/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}
/******/
/******/
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "97980c32a127a1569b0b"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _three = __webpack_require__(1);
	
	var _stats = __webpack_require__(2);
	
	var _stats2 = _interopRequireDefault(_stats);
	
	var _physijs = __webpack_require__(3);
	
	var _physijs2 = _interopRequireDefault(_physijs);
	
	var _threeExamples = __webpack_require__(4);
	
	var _math = __webpack_require__(6);
	
	var _hydroxyl = __webpack_require__(7);
	
	var _hydroxyl2 = _interopRequireDefault(_hydroxyl);
	
	var _factories = __webpack_require__(8);
	
	var _utils = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* setup the stats */
	var stats = new _stats2.default();
	stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
	document.body.appendChild(stats.dom);
	
	var scene = new _physijs2.default.Scene();
	var camera = new _three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 15000);
	camera.position.x = 750;
	camera.position.y = 250;
	camera.position.z = 1000;
	camera.lookAt(new _three.Vector3(0, 0, 0));
	
	var controls = new _threeExamples.TrackballControls(camera);
	controls.rotateSpeed = 1.0;
	controls.zoomSpeed = 1.2;
	controls.panSpeed = 0.8;
	controls.noZoom = false;
	controls.noPan = false;
	controls.staticMoving = true;
	controls.dynamicDampingFactor = 0.3;
	controls.keys = [65, 83, 68];
	controls.addEventListener('change', render);
	
	var light = new _three.DirectionalLight(0xffffff, 0.8);
	light.position.set(1, 1, 1);
	scene.add(light);
	var light = new _three.DirectionalLight(0xffffff, 0.5);
	light.position.set(-1, -1, 1);
	scene.add(light);
	
	var renderer = new _three.WebGLRenderer();
	renderer.setClearColor(0xE5E5E5);
	renderer.setSize(window.innerWidth, window.innerHeight);
	document.body.appendChild(renderer.domElement);
	
	/** make the boundary */
	var boundaryLength = 2000;
	
	// initial positions will be random within +- generateWithin
	var generateWithin = boundaryLength / 2 - boundaryLength / 5;
	
	var boundary = (0, _factories.createBoundary)(boundaryLength);
	scene.add(boundary);
	
	var molecules = [];
	
	/* this function is called after everything is added to the physics world */
	boundary.addEventListener('ready', function () {
	  // add the molecules only after the boundary is added
	
	  var initNumHydroxyls = 200;
	  for (var i = 0; i < initNumHydroxyls; ++i) {
	    var h = (0, _factories.createHydroxyl)();
	    h.position.copy((0, _math.randVector3)(generateWithin));
	
	    scene.add(h);
	    molecules.push(h);
	  }
	
	  var loader = new _three.JSONLoader();
	  loader.load('models/hypertau.js', function (geometry, materials) {
	    var material = (0, _utils.createBouncyMaterial)(new _three.MultiMaterial(materials));
	
	    var initNumTau = 40;
	    for (var _i = 0; _i < initNumTau; ++_i) {
	      var tau = new _physijs2.default.CylinderMesh(geometry, material, 1000);
	
	      tau.position.copy((0, _math.randVector3)(generateWithin));
	      tau.rotateX(Math.random() * Math.PI);
	      tau.rotateY(Math.random() * Math.PI);
	      tau.rotateZ(Math.random() * Math.PI);
	      tau.scale.multiplyScalar(5);
	
	      molecules.push(tau);
	      scene.add(tau);
	    }
	  });
	});
	
	scene.setGravity(new _three.Vector3(0, 0, 0));
	scene.simulate();
	animate();
	
	function preSimulate() {
	  molecules.forEach(function (mol) {
	    // apply a random slight impulse to each molecule
	    mol.applyCentralImpulse((0, _math.randVector3)(100));
	
	    // the scene's physics have finished updating, scale the velocity of the
	    // molcules up to fix bug with collisions
	    if (mol.justCollided) {
	      // mol.setLinearVelocity(mol.getLinearVelocity().multiplyScalar(1.37));
	
	      mol.justCollided = false;
	    }
	  });
	}
	
	function animate() {
	  stats.begin();
	
	  /*** begin stats monitored code ***/
	
	  // any tampering with the physics before the engine recalculates can be done
	  // in this function's body
	  preSimulate();
	
	  // perform physics calculations
	  scene.simulate();
	
	  controls.update();
	  renderer.render(scene, camera);
	
	  /*** end stats monitored code ***/
	
	  stats.end();
	
	  requestAnimationFrame(animate);
	}
	
	function render() {}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.THREE = global.THREE || {})));
	}(this, (function (exports) { 'use strict';
	
		// Polyfills
	
		if ( Number.EPSILON === undefined ) {
	
			Number.EPSILON = Math.pow( 2, - 52 );
	
		}
	
		//
	
		if ( Math.sign === undefined ) {
	
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
	
			Math.sign = function ( x ) {
	
				return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
	
			};
	
		}
	
		if ( Function.prototype.name === undefined ) {
	
			// Missing in IE9-11.
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
	
			Object.defineProperty( Function.prototype, 'name', {
	
				get: function () {
	
					return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];
	
				}
	
			} );
	
		}
	
		if ( Object.assign === undefined ) {
	
			// Missing in IE.
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	
			( function () {
	
				Object.assign = function ( target ) {
	
					'use strict';
	
					if ( target === undefined || target === null ) {
	
						throw new TypeError( 'Cannot convert undefined or null to object' );
	
					}
	
					var output = Object( target );
	
					for ( var index = 1; index < arguments.length; index ++ ) {
	
						var source = arguments[ index ];
	
						if ( source !== undefined && source !== null ) {
	
							for ( var nextKey in source ) {
	
								if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
	
									output[ nextKey ] = source[ nextKey ];
	
								}
	
							}
	
						}
	
					}
	
					return output;
	
				};
	
			} )();
	
		}
	
		/**
		 * https://github.com/mrdoob/eventdispatcher.js/
		 */
	
		function EventDispatcher() {}
	
		Object.assign( EventDispatcher.prototype, {
	
			addEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) this._listeners = {};
	
				var listeners = this._listeners;
	
				if ( listeners[ type ] === undefined ) {
	
					listeners[ type ] = [];
	
				}
	
				if ( listeners[ type ].indexOf( listener ) === - 1 ) {
	
					listeners[ type ].push( listener );
	
				}
	
			},
	
			hasEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) return false;
	
				var listeners = this._listeners;
	
				if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
	
					return true;
	
				}
	
				return false;
	
			},
	
			removeEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) return;
	
				var listeners = this._listeners;
				var listenerArray = listeners[ type ];
	
				if ( listenerArray !== undefined ) {
	
					var index = listenerArray.indexOf( listener );
	
					if ( index !== - 1 ) {
	
						listenerArray.splice( index, 1 );
	
					}
	
				}
	
			},
	
			dispatchEvent: function ( event ) {
	
				if ( this._listeners === undefined ) return;
	
				var listeners = this._listeners;
				var listenerArray = listeners[ event.type ];
	
				if ( listenerArray !== undefined ) {
	
					event.target = this;
	
					var array = [], i = 0;
					var length = listenerArray.length;
	
					for ( i = 0; i < length; i ++ ) {
	
						array[ i ] = listenerArray[ i ];
	
					}
	
					for ( i = 0; i < length; i ++ ) {
	
						array[ i ].call( this, event );
	
					}
	
				}
	
			}
	
		} );
	
		var REVISION = '82';
		var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
		var CullFaceNone = 0;
		var CullFaceBack = 1;
		var CullFaceFront = 2;
		var CullFaceFrontBack = 3;
		var FrontFaceDirectionCW = 0;
		var FrontFaceDirectionCCW = 1;
		var BasicShadowMap = 0;
		var PCFShadowMap = 1;
		var PCFSoftShadowMap = 2;
		var FrontSide = 0;
		var BackSide = 1;
		var DoubleSide = 2;
		var FlatShading = 1;
		var SmoothShading = 2;
		var NoColors = 0;
		var FaceColors = 1;
		var VertexColors = 2;
		var NoBlending = 0;
		var NormalBlending = 1;
		var AdditiveBlending = 2;
		var SubtractiveBlending = 3;
		var MultiplyBlending = 4;
		var CustomBlending = 5;
		var BlendingMode = {
			NoBlending: NoBlending,
			NormalBlending: NormalBlending,
			AdditiveBlending: AdditiveBlending,
			SubtractiveBlending: SubtractiveBlending,
			MultiplyBlending: MultiplyBlending,
			CustomBlending: CustomBlending
		};
		var AddEquation = 100;
		var SubtractEquation = 101;
		var ReverseSubtractEquation = 102;
		var MinEquation = 103;
		var MaxEquation = 104;
		var ZeroFactor = 200;
		var OneFactor = 201;
		var SrcColorFactor = 202;
		var OneMinusSrcColorFactor = 203;
		var SrcAlphaFactor = 204;
		var OneMinusSrcAlphaFactor = 205;
		var DstAlphaFactor = 206;
		var OneMinusDstAlphaFactor = 207;
		var DstColorFactor = 208;
		var OneMinusDstColorFactor = 209;
		var SrcAlphaSaturateFactor = 210;
		var NeverDepth = 0;
		var AlwaysDepth = 1;
		var LessDepth = 2;
		var LessEqualDepth = 3;
		var EqualDepth = 4;
		var GreaterEqualDepth = 5;
		var GreaterDepth = 6;
		var NotEqualDepth = 7;
		var MultiplyOperation = 0;
		var MixOperation = 1;
		var AddOperation = 2;
		var NoToneMapping = 0;
		var LinearToneMapping = 1;
		var ReinhardToneMapping = 2;
		var Uncharted2ToneMapping = 3;
		var CineonToneMapping = 4;
		var UVMapping = 300;
		var CubeReflectionMapping = 301;
		var CubeRefractionMapping = 302;
		var EquirectangularReflectionMapping = 303;
		var EquirectangularRefractionMapping = 304;
		var SphericalReflectionMapping = 305;
		var CubeUVReflectionMapping = 306;
		var CubeUVRefractionMapping = 307;
		var TextureMapping = {
			UVMapping: UVMapping,
			CubeReflectionMapping: CubeReflectionMapping,
			CubeRefractionMapping: CubeRefractionMapping,
			EquirectangularReflectionMapping: EquirectangularReflectionMapping,
			EquirectangularRefractionMapping: EquirectangularRefractionMapping,
			SphericalReflectionMapping: SphericalReflectionMapping,
			CubeUVReflectionMapping: CubeUVReflectionMapping,
			CubeUVRefractionMapping: CubeUVRefractionMapping
		};
		var RepeatWrapping = 1000;
		var ClampToEdgeWrapping = 1001;
		var MirroredRepeatWrapping = 1002;
		var TextureWrapping = {
			RepeatWrapping: RepeatWrapping,
			ClampToEdgeWrapping: ClampToEdgeWrapping,
			MirroredRepeatWrapping: MirroredRepeatWrapping
		};
		var NearestFilter = 1003;
		var NearestMipMapNearestFilter = 1004;
		var NearestMipMapLinearFilter = 1005;
		var LinearFilter = 1006;
		var LinearMipMapNearestFilter = 1007;
		var LinearMipMapLinearFilter = 1008;
		var TextureFilter = {
			NearestFilter: NearestFilter,
			NearestMipMapNearestFilter: NearestMipMapNearestFilter,
			NearestMipMapLinearFilter: NearestMipMapLinearFilter,
			LinearFilter: LinearFilter,
			LinearMipMapNearestFilter: LinearMipMapNearestFilter,
			LinearMipMapLinearFilter: LinearMipMapLinearFilter
		};
		var UnsignedByteType = 1009;
		var ByteType = 1010;
		var ShortType = 1011;
		var UnsignedShortType = 1012;
		var IntType = 1013;
		var UnsignedIntType = 1014;
		var FloatType = 1015;
		var HalfFloatType = 1016;
		var UnsignedShort4444Type = 1017;
		var UnsignedShort5551Type = 1018;
		var UnsignedShort565Type = 1019;
		var UnsignedInt248Type = 1020;
		var AlphaFormat = 1021;
		var RGBFormat = 1022;
		var RGBAFormat = 1023;
		var LuminanceFormat = 1024;
		var LuminanceAlphaFormat = 1025;
		var RGBEFormat = RGBAFormat;
		var DepthFormat = 1026;
		var DepthStencilFormat = 1027;
		var RGB_S3TC_DXT1_Format = 2001;
		var RGBA_S3TC_DXT1_Format = 2002;
		var RGBA_S3TC_DXT3_Format = 2003;
		var RGBA_S3TC_DXT5_Format = 2004;
		var RGB_PVRTC_4BPPV1_Format = 2100;
		var RGB_PVRTC_2BPPV1_Format = 2101;
		var RGBA_PVRTC_4BPPV1_Format = 2102;
		var RGBA_PVRTC_2BPPV1_Format = 2103;
		var RGB_ETC1_Format = 2151;
		var LoopOnce = 2200;
		var LoopRepeat = 2201;
		var LoopPingPong = 2202;
		var InterpolateDiscrete = 2300;
		var InterpolateLinear = 2301;
		var InterpolateSmooth = 2302;
		var ZeroCurvatureEnding = 2400;
		var ZeroSlopeEnding = 2401;
		var WrapAroundEnding = 2402;
		var TrianglesDrawMode = 0;
		var TriangleStripDrawMode = 1;
		var TriangleFanDrawMode = 2;
		var LinearEncoding = 3000;
		var sRGBEncoding = 3001;
		var GammaEncoding = 3007;
		var RGBEEncoding = 3002;
		var LogLuvEncoding = 3003;
		var RGBM7Encoding = 3004;
		var RGBM16Encoding = 3005;
		var RGBDEncoding = 3006;
		var BasicDepthPacking = 3200;
		var RGBADepthPacking = 3201;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _Math = {
	
			DEG2RAD: Math.PI / 180,
			RAD2DEG: 180 / Math.PI,
	
			generateUUID: function () {
	
				// http://www.broofa.com/Tools/Math.uuid.htm
	
				var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
				var uuid = new Array( 36 );
				var rnd = 0, r;
	
				return function generateUUID() {
	
					for ( var i = 0; i < 36; i ++ ) {
	
						if ( i === 8 || i === 13 || i === 18 || i === 23 ) {
	
							uuid[ i ] = '-';
	
						} else if ( i === 14 ) {
	
							uuid[ i ] = '4';
	
						} else {
	
							if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
							r = rnd & 0xf;
							rnd = rnd >> 4;
							uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];
	
						}
	
					}
	
					return uuid.join( '' );
	
				};
	
			}(),
	
			clamp: function ( value, min, max ) {
	
				return Math.max( min, Math.min( max, value ) );
	
			},
	
			// compute euclidian modulo of m % n
			// https://en.wikipedia.org/wiki/Modulo_operation
	
			euclideanModulo: function ( n, m ) {
	
				return ( ( n % m ) + m ) % m;
	
			},
	
			// Linear mapping from range <a1, a2> to range <b1, b2>
	
			mapLinear: function ( x, a1, a2, b1, b2 ) {
	
				return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
	
			},
	
			// https://en.wikipedia.org/wiki/Linear_interpolation
	
			lerp: function ( x, y, t ) {
	
				return ( 1 - t ) * x + t * y;
	
			},
	
			// http://en.wikipedia.org/wiki/Smoothstep
	
			smoothstep: function ( x, min, max ) {
	
				if ( x <= min ) return 0;
				if ( x >= max ) return 1;
	
				x = ( x - min ) / ( max - min );
	
				return x * x * ( 3 - 2 * x );
	
			},
	
			smootherstep: function ( x, min, max ) {
	
				if ( x <= min ) return 0;
				if ( x >= max ) return 1;
	
				x = ( x - min ) / ( max - min );
	
				return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
	
			},
	
			random16: function () {
	
				console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
				return Math.random();
	
			},
	
			// Random integer from <low, high> interval
	
			randInt: function ( low, high ) {
	
				return low + Math.floor( Math.random() * ( high - low + 1 ) );
	
			},
	
			// Random float from <low, high> interval
	
			randFloat: function ( low, high ) {
	
				return low + Math.random() * ( high - low );
	
			},
	
			// Random float from <-range/2, range/2> interval
	
			randFloatSpread: function ( range ) {
	
				return range * ( 0.5 - Math.random() );
	
			},
	
			degToRad: function ( degrees ) {
	
				return degrees * _Math.DEG2RAD;
	
			},
	
			radToDeg: function ( radians ) {
	
				return radians * _Math.RAD2DEG;
	
			},
	
			isPowerOfTwo: function ( value ) {
	
				return ( value & ( value - 1 ) ) === 0 && value !== 0;
	
			},
	
			nearestPowerOfTwo: function ( value ) {
	
				return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );
	
			},
	
			nextPowerOfTwo: function ( value ) {
	
				value --;
				value |= value >> 1;
				value |= value >> 2;
				value |= value >> 4;
				value |= value >> 8;
				value |= value >> 16;
				value ++;
	
				return value;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author philogb / http://blog.thejit.org/
		 * @author egraether / http://egraether.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		function Vector2( x, y ) {
	
			this.x = x || 0;
			this.y = y || 0;
	
		}
	
		Vector2.prototype = {
	
			constructor: Vector2,
	
			isVector2: true,
	
			get width() {
	
				return this.x;
	
			},
	
			set width( value ) {
	
				this.x = value;
	
			},
	
			get height() {
	
				return this.y;
	
			},
	
			set height( value ) {
	
				this.y = value;
	
			},
	
			//
	
			set: function ( x, y ) {
	
				this.x = x;
				this.y = y;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
				
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
	
				return this;
	
			},
	
			multiply: function ( v ) {
	
				this.x *= v.x;
				this.y *= v.y;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				if ( isFinite( scalar ) ) {
	
					this.x *= scalar;
					this.y *= scalar;
	
				} else {
	
					this.x = 0;
					this.y = 0;
	
				}
	
				return this;
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min, max;
	
				return function clampScalar( minVal, maxVal ) {
	
					if ( min === undefined ) {
	
						min = new Vector2();
						max = new Vector2();
	
					}
	
					min.set( minVal, minVal );
					max.set( maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y );
	
			},
	
			lengthManhattan: function() {
	
				return Math.abs( this.x ) + Math.abs( this.y );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() );
	
			},
	
			angle: function () {
	
				// computes the angle in radians with respect to the positive x-axis
	
				var angle = Math.atan2( this.y, this.x );
	
				if ( angle < 0 ) angle += 2 * Math.PI;
	
				return angle;
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;
	
			},
	
			distanceToManhattan: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
	
			},
	
			setLength: function ( length ) {
	
				return this.multiplyScalar( length / this.length() );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
	
				return array;
	
			},
	
			fromAttribute: function ( attribute, index, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				index = index * attribute.itemSize + offset;
	
				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];
	
				return this;
	
			},
	
			rotateAround: function ( center, angle ) {
	
				var c = Math.cos( angle ), s = Math.sin( angle );
	
				var x = this.x - center.x;
				var y = this.y - center.y;
	
				this.x = x * c - y * s + center.x;
				this.y = x * s + y * c + center.y;
	
				return this;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */
	
		function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			Object.defineProperty( this, 'id', { value: TextureIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.sourceFile = '';
	
			this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
			this.mipmaps = [];
	
			this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
	
			this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
			this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
	
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;
	
			this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
	
			this.format = format !== undefined ? format : RGBAFormat;
			this.type = type !== undefined ? type : UnsignedByteType;
	
			this.offset = new Vector2( 0, 0 );
			this.repeat = new Vector2( 1, 1 );
	
			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
	
	
			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
			this.encoding = encoding !== undefined ? encoding :  LinearEncoding;
	
			this.version = 0;
			this.onUpdate = null;
	
		}
	
		Texture.DEFAULT_IMAGE = undefined;
		Texture.DEFAULT_MAPPING = UVMapping;
	
		Texture.prototype = {
	
			constructor: Texture,
	
			isTexture: true,
	
			set needsUpdate( value ) {
	
				if ( value === true ) this.version ++;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.image = source.image;
				this.mipmaps = source.mipmaps.slice( 0 );
	
				this.mapping = source.mapping;
	
				this.wrapS = source.wrapS;
				this.wrapT = source.wrapT;
	
				this.magFilter = source.magFilter;
				this.minFilter = source.minFilter;
	
				this.anisotropy = source.anisotropy;
	
				this.format = source.format;
				this.type = source.type;
	
				this.offset.copy( source.offset );
				this.repeat.copy( source.repeat );
	
				this.generateMipmaps = source.generateMipmaps;
				this.premultiplyAlpha = source.premultiplyAlpha;
				this.flipY = source.flipY;
				this.unpackAlignment = source.unpackAlignment;
				this.encoding = source.encoding;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				if ( meta.textures[ this.uuid ] !== undefined ) {
	
					return meta.textures[ this.uuid ];
	
				}
	
				function getDataURL( image ) {
	
					var canvas;
	
					if ( image.toDataURL !== undefined ) {
	
						canvas = image;
	
					} else {
	
						canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
						canvas.width = image.width;
						canvas.height = image.height;
	
						canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );
	
					}
	
					if ( canvas.width > 2048 || canvas.height > 2048 ) {
	
						return canvas.toDataURL( 'image/jpeg', 0.6 );
	
					} else {
	
						return canvas.toDataURL( 'image/png' );
	
					}
	
				}
	
				var output = {
					metadata: {
						version: 4.4,
						type: 'Texture',
						generator: 'Texture.toJSON'
					},
	
					uuid: this.uuid,
					name: this.name,
	
					mapping: this.mapping,
	
					repeat: [ this.repeat.x, this.repeat.y ],
					offset: [ this.offset.x, this.offset.y ],
					wrap: [ this.wrapS, this.wrapT ],
	
					minFilter: this.minFilter,
					magFilter: this.magFilter,
					anisotropy: this.anisotropy,
	
					flipY: this.flipY
				};
	
				if ( this.image !== undefined ) {
	
					// TODO: Move to THREE.Image
	
					var image = this.image;
	
					if ( image.uuid === undefined ) {
	
						image.uuid = _Math.generateUUID(); // UGH
	
					}
	
					if ( meta.images[ image.uuid ] === undefined ) {
	
						meta.images[ image.uuid ] = {
							uuid: image.uuid,
							url: getDataURL( image )
						};
	
					}
	
					output.image = image.uuid;
	
				}
	
				meta.textures[ this.uuid ] = output;
	
				return output;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			},
	
			transformUv: function ( uv ) {
	
				if ( this.mapping !== UVMapping )  return;
	
				uv.multiply( this.repeat );
				uv.add( this.offset );
	
				if ( uv.x < 0 || uv.x > 1 ) {
	
					switch ( this.wrapS ) {
	
						case RepeatWrapping:
	
							uv.x = uv.x - Math.floor( uv.x );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.x = uv.x < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
	
								uv.x = Math.ceil( uv.x ) - uv.x;
	
							} else {
	
								uv.x = uv.x - Math.floor( uv.x );
	
							}
							break;
	
					}
	
				}
	
				if ( uv.y < 0 || uv.y > 1 ) {
	
					switch ( this.wrapT ) {
	
						case RepeatWrapping:
	
							uv.y = uv.y - Math.floor( uv.y );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.y = uv.y < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
	
								uv.y = Math.ceil( uv.y ) - uv.y;
	
							} else {
	
								uv.y = uv.y - Math.floor( uv.y );
	
							}
							break;
	
					}
	
				}
	
				if ( this.flipY ) {
	
					uv.y = 1 - uv.y;
	
				}
	
			}
	
		};
	
		Object.assign( Texture.prototype, EventDispatcher.prototype );
	
		var count = 0;
		function TextureIdCount() { return count++; }
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Vector4( x, y, z, w ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;
	
		}
	
		Vector4.prototype = {
	
			constructor: Vector4,
	
			isVector4: true,
	
			set: function ( x, y, z, w ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
				this.w = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setW: function ( w ) {
	
				this.w = w;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					case 3: this.w = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
				
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					case 3: return this.w;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z, this.w );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
				this.w = ( v.w !== undefined ) ? v.w : 1;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
				this.w += v.w;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
				this.w += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
				this.w = a.w + b.w;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
				this.w += v.w * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
				this.w -= v.w;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
				this.w -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
				this.w = a.w - b.w;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				if ( isFinite( scalar ) ) {
	
					this.x *= scalar;
					this.y *= scalar;
					this.z *= scalar;
					this.w *= scalar;
	
				} else {
	
					this.x = 0;
					this.y = 0;
					this.z = 0;
					this.w = 0;
	
				}
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z, w = this.w;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
				this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			setAxisAngleFromQuaternion: function ( q ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
	
				// q is assumed to be normalized
	
				this.w = 2 * Math.acos( q.w );
	
				var s = Math.sqrt( 1 - q.w * q.w );
	
				if ( s < 0.0001 ) {
	
					 this.x = 1;
					 this.y = 0;
					 this.z = 0;
	
				} else {
	
					 this.x = q.x / s;
					 this.y = q.y / s;
					 this.z = q.z / s;
	
				}
	
				return this;
	
			},
	
			setAxisAngleFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var angle, x, y, z,		// variables for result
					epsilon = 0.01,		// margin to allow for rounding errors
					epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
	
					te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
				     ( Math.abs( m13 - m31 ) < epsilon ) &&
				     ( Math.abs( m23 - m32 ) < epsilon ) ) {
	
					// singularity found
					// first check for identity matrix which must have +1 for all terms
					// in leading diagonal and zero in other terms
	
					if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
					     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
					     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
					     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
	
						// this singularity is identity matrix so angle = 0
	
						this.set( 1, 0, 0, 0 );
	
						return this; // zero angle, arbitrary axis
	
					}
	
					// otherwise this singularity is angle = 180
	
					angle = Math.PI;
	
					var xx = ( m11 + 1 ) / 2;
					var yy = ( m22 + 1 ) / 2;
					var zz = ( m33 + 1 ) / 2;
					var xy = ( m12 + m21 ) / 4;
					var xz = ( m13 + m31 ) / 4;
					var yz = ( m23 + m32 ) / 4;
	
					if ( ( xx > yy ) && ( xx > zz ) ) {
	
						// m11 is the largest diagonal term
	
						if ( xx < epsilon ) {
	
							x = 0;
							y = 0.707106781;
							z = 0.707106781;
	
						} else {
	
							x = Math.sqrt( xx );
							y = xy / x;
							z = xz / x;
	
						}
	
					} else if ( yy > zz ) {
	
						// m22 is the largest diagonal term
	
						if ( yy < epsilon ) {
	
							x = 0.707106781;
							y = 0;
							z = 0.707106781;
	
						} else {
	
							y = Math.sqrt( yy );
							x = xy / y;
							z = yz / y;
	
						}
	
					} else {
	
						// m33 is the largest diagonal term so base result on this
	
						if ( zz < epsilon ) {
	
							x = 0.707106781;
							y = 0.707106781;
							z = 0;
	
						} else {
	
							z = Math.sqrt( zz );
							x = xz / z;
							y = yz / z;
	
						}
	
					}
	
					this.set( x, y, z, angle );
	
					return this; // return 180 deg rotation
	
				}
	
				// as we have reached here there are no singularities so we can handle normally
	
				var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				                   ( m13 - m31 ) * ( m13 - m31 ) +
				                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
	
				if ( Math.abs( s ) < 0.001 ) s = 1;
	
				// prevent divide by zero, should not happen if matrix is orthogonal and should be
				// caught by singularity test above, but I've left it in just in case
	
				this.x = ( m32 - m23 ) / s;
				this.y = ( m13 - m31 ) / s;
				this.z = ( m21 - m12 ) / s;
				this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
	
				return this;
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
				this.w = Math.min( this.w, v.w );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
				this.w = Math.max( this.w, v.w );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
				this.w = Math.max( min.w, Math.min( max.w, this.w ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min, max;
	
				return function clampScalar( minVal, maxVal ) {
	
					if ( min === undefined ) {
	
						min = new Vector4();
						max = new Vector4();
	
					}
	
					min.set( minVal, minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
				this.w = Math.floor( this.w );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
				this.w = Math.ceil( this.w );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
				this.w = Math.round( this.w );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
				this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
				this.w = - this.w;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
	
			},
	
			lengthManhattan: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() );
	
			},
	
			setLength: function ( length ) {
	
				return this.multiplyScalar( length / this.length() );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
				this.w += ( v.w - this.w ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
				this.w = array[ offset + 3 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
				array[ offset + 3 ] = this.w;
	
				return array;
	
			},
	
			fromAttribute: function ( attribute, index, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				index = index * attribute.itemSize + offset;
	
				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];
				this.z = attribute.array[ index + 2 ];
				this.w = attribute.array[ index + 3 ];
	
				return this;
	
			}
	
		};
	
		/**
		 * @author szimek / https://github.com/szimek/
		 * @author alteredq / http://alteredqualia.com/
		 * @author Marius Kintel / https://github.com/kintel
		 */
	
		/*
		 In options, we can specify:
		 * Texture parameters for an auto-generated target texture
		 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
		*/
		function WebGLRenderTarget( width, height, options ) {
	
			this.uuid = _Math.generateUUID();
	
			this.width = width;
			this.height = height;
	
			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;
	
			this.viewport = new Vector4( 0, 0, width, height );
	
			options = options || {};
	
			if ( options.minFilter === undefined ) options.minFilter = LinearFilter;
	
			this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
	
			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
	
		}
	
		Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {
	
			isWebGLRenderTarget: true,
	
			setSize: function ( width, height ) {
	
				if ( this.width !== width || this.height !== height ) {
	
					this.width = width;
					this.height = height;
	
					this.dispose();
	
				}
	
				this.viewport.set( 0, 0, width, height );
				this.scissor.set( 0, 0, width, height );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.width = source.width;
				this.height = source.height;
	
				this.viewport.copy( source.viewport );
	
				this.texture = source.texture.clone();
	
				this.depthBuffer = source.depthBuffer;
				this.stencilBuffer = source.stencilBuffer;
				this.depthTexture = source.depthTexture;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com
		 */
	
		function WebGLRenderTargetCube( width, height, options ) {
	
			WebGLRenderTarget.call( this, width, height, options );
	
			this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
			this.activeMipMapLevel = 0;
	
		}
	
		WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
		WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
	
		WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		function Quaternion( x, y, z, w ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;
	
		}
	
		Quaternion.prototype = {
	
			constructor: Quaternion,
	
			get x () {
	
				return this._x;
	
			},
	
			set x ( value ) {
	
				this._x = value;
				this.onChangeCallback();
	
			},
	
			get y () {
	
				return this._y;
	
			},
	
			set y ( value ) {
	
				this._y = value;
				this.onChangeCallback();
	
			},
	
			get z () {
	
				return this._z;
	
			},
	
			set z ( value ) {
	
				this._z = value;
				this.onChangeCallback();
	
			},
	
			get w () {
	
				return this._w;
	
			},
	
			set w ( value ) {
	
				this._w = value;
				this.onChangeCallback();
	
			},
	
			set: function ( x, y, z, w ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._w = w;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._w );
	
			},
	
			copy: function ( quaternion ) {
	
				this._x = quaternion.x;
				this._y = quaternion.y;
				this._z = quaternion.z;
				this._w = quaternion.w;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromEuler: function ( euler, update ) {
	
				if ( (euler && euler.isEuler) === false ) {
	
					throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
				}
	
				// http://www.mathworks.com/matlabcentral/fileexchange/
				// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
				//	content/SpinCalc.m
	
				var c1 = Math.cos( euler._x / 2 );
				var c2 = Math.cos( euler._y / 2 );
				var c3 = Math.cos( euler._z / 2 );
				var s1 = Math.sin( euler._x / 2 );
				var s2 = Math.sin( euler._y / 2 );
				var s3 = Math.sin( euler._z / 2 );
	
				var order = euler.order;
	
				if ( order === 'XYZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'YXZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'ZXY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'ZYX' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'YZX' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'XZY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				}
	
				if ( update !== false ) this.onChangeCallback();
	
				return this;
	
			},
	
			setFromAxisAngle: function ( axis, angle ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
	
				// assumes axis is normalized
	
				var halfAngle = angle / 2, s = Math.sin( halfAngle );
	
				this._x = axis.x * s;
				this._y = axis.y * s;
				this._z = axis.z * s;
				this._w = Math.cos( halfAngle );
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
	
					trace = m11 + m22 + m33,
					s;
	
				if ( trace > 0 ) {
	
					s = 0.5 / Math.sqrt( trace + 1.0 );
	
					this._w = 0.25 / s;
					this._x = ( m32 - m23 ) * s;
					this._y = ( m13 - m31 ) * s;
					this._z = ( m21 - m12 ) * s;
	
				} else if ( m11 > m22 && m11 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
	
					this._w = ( m32 - m23 ) / s;
					this._x = 0.25 * s;
					this._y = ( m12 + m21 ) / s;
					this._z = ( m13 + m31 ) / s;
	
				} else if ( m22 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
	
					this._w = ( m13 - m31 ) / s;
					this._x = ( m12 + m21 ) / s;
					this._y = 0.25 * s;
					this._z = ( m23 + m32 ) / s;
	
				} else {
	
					s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
	
					this._w = ( m21 - m12 ) / s;
					this._x = ( m13 + m31 ) / s;
					this._y = ( m23 + m32 ) / s;
					this._z = 0.25 * s;
	
				}
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromUnitVectors: function () {
	
				// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
	
				// assumes direction vectors vFrom and vTo are normalized
	
				var v1, r;
	
				var EPS = 0.000001;
	
				return function setFromUnitVectors( vFrom, vTo ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
	
					r = vFrom.dot( vTo ) + 1;
	
					if ( r < EPS ) {
	
						r = 0;
	
						if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
	
							v1.set( - vFrom.y, vFrom.x, 0 );
	
						} else {
	
							v1.set( 0, - vFrom.z, vFrom.y );
	
						}
	
					} else {
	
						v1.crossVectors( vFrom, vTo );
	
					}
	
					this._x = v1.x;
					this._y = v1.y;
					this._z = v1.z;
					this._w = r;
	
					return this.normalize();
	
				};
	
			}(),
	
			inverse: function () {
	
				return this.conjugate().normalize();
	
			},
	
			conjugate: function () {
	
				this._x *= - 1;
				this._y *= - 1;
				this._z *= - 1;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
	
			},
	
			lengthSq: function () {
	
				return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
	
			},
	
			normalize: function () {
	
				var l = this.length();
	
				if ( l === 0 ) {
	
					this._x = 0;
					this._y = 0;
					this._z = 0;
					this._w = 1;
	
				} else {
	
					l = 1 / l;
	
					this._x = this._x * l;
					this._y = this._y * l;
					this._z = this._z * l;
					this._w = this._w * l;
	
				}
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			multiply: function ( q, p ) {
	
				if ( p !== undefined ) {
	
					console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
					return this.multiplyQuaternions( q, p );
	
				}
	
				return this.multiplyQuaternions( this, q );
	
			},
	
			premultiply: function ( q ) {
	
				return this.multiplyQuaternions( q, this );
	
			},
	
			multiplyQuaternions: function ( a, b ) {
	
				// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
	
				var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
				var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
	
				this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
				this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
				this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
				this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			slerp: function ( qb, t ) {
	
				if ( t === 0 ) return this;
				if ( t === 1 ) return this.copy( qb );
	
				var x = this._x, y = this._y, z = this._z, w = this._w;
	
				// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
	
				var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
	
				if ( cosHalfTheta < 0 ) {
	
					this._w = - qb._w;
					this._x = - qb._x;
					this._y = - qb._y;
					this._z = - qb._z;
	
					cosHalfTheta = - cosHalfTheta;
	
				} else {
	
					this.copy( qb );
	
				}
	
				if ( cosHalfTheta >= 1.0 ) {
	
					this._w = w;
					this._x = x;
					this._y = y;
					this._z = z;
	
					return this;
	
				}
	
				var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );
	
				if ( Math.abs( sinHalfTheta ) < 0.001 ) {
	
					this._w = 0.5 * ( w + this._w );
					this._x = 0.5 * ( x + this._x );
					this._y = 0.5 * ( y + this._y );
					this._z = 0.5 * ( z + this._z );
	
					return this;
	
				}
	
				var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
				var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
	
				this._w = ( w * ratioA + this._w * ratioB );
				this._x = ( x * ratioA + this._x * ratioB );
				this._y = ( y * ratioA + this._y * ratioB );
				this._z = ( z * ratioA + this._z * ratioB );
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			equals: function ( quaternion ) {
	
				return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this._x = array[ offset ];
				this._y = array[ offset + 1 ];
				this._z = array[ offset + 2 ];
				this._w = array[ offset + 3 ];
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._w;
	
				return array;
	
			},
	
			onChange: function ( callback ) {
	
				this.onChangeCallback = callback;
	
				return this;
	
			},
	
			onChangeCallback: function () {}
	
		};
	
		Object.assign( Quaternion, {
	
			slerp: function( qa, qb, qm, t ) {
	
				return qm.copy( qa ).slerp( qb, t );
	
			},
	
			slerpFlat: function(
					dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
	
				// fuzz-free, array-based Quaternion SLERP operation
	
				var x0 = src0[ srcOffset0 + 0 ],
					y0 = src0[ srcOffset0 + 1 ],
					z0 = src0[ srcOffset0 + 2 ],
					w0 = src0[ srcOffset0 + 3 ],
	
					x1 = src1[ srcOffset1 + 0 ],
					y1 = src1[ srcOffset1 + 1 ],
					z1 = src1[ srcOffset1 + 2 ],
					w1 = src1[ srcOffset1 + 3 ];
	
				if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
	
					var s = 1 - t,
	
						cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
	
						dir = ( cos >= 0 ? 1 : - 1 ),
						sqrSin = 1 - cos * cos;
	
					// Skip the Slerp for tiny steps to avoid numeric problems:
					if ( sqrSin > Number.EPSILON ) {
	
						var sin = Math.sqrt( sqrSin ),
							len = Math.atan2( sin, cos * dir );
	
						s = Math.sin( s * len ) / sin;
						t = Math.sin( t * len ) / sin;
	
					}
	
					var tDir = t * dir;
	
					x0 = x0 * s + x1 * tDir;
					y0 = y0 * s + y1 * tDir;
					z0 = z0 * s + z1 * tDir;
					w0 = w0 * s + w1 * tDir;
	
					// Normalize in case we just did a lerp:
					if ( s === 1 - t ) {
	
						var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
	
						x0 *= f;
						y0 *= f;
						z0 *= f;
						w0 *= f;
	
					}
	
				}
	
				dst[ dstOffset ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author *kile / http://kile.stravaganza.org/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Vector3( x, y, z ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
	
		}
	
		Vector3.prototype = {
	
			constructor: Vector3,
	
			isVector3: true,
	
			set: function ( x, y, z ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
				
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
	
				return this;
	
			},
	
			multiply: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
					return this.multiplyVectors( v, w );
	
				}
	
				this.x *= v.x;
				this.y *= v.y;
				this.z *= v.z;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				if ( isFinite( scalar ) ) {
	
					this.x *= scalar;
					this.y *= scalar;
					this.z *= scalar;
	
				} else {
	
					this.x = 0;
					this.y = 0;
					this.z = 0;
	
				}
	
				return this;
	
			},
	
			multiplyVectors: function ( a, b ) {
	
				this.x = a.x * b.x;
				this.y = a.y * b.y;
				this.z = a.z * b.z;
	
				return this;
	
			},
	
			applyEuler: function () {
	
				var quaternion;
	
				return function applyEuler( euler ) {
	
					if ( (euler && euler.isEuler) === false ) {
	
						console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
					}
	
					if ( quaternion === undefined ) quaternion = new Quaternion();
	
					return this.applyQuaternion( quaternion.setFromEuler( euler ) );
	
				};
	
			}(),
	
			applyAxisAngle: function () {
	
				var quaternion;
	
				return function applyAxisAngle( axis, angle ) {
	
					if ( quaternion === undefined ) quaternion = new Quaternion();
	
					return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
	
				};
	
			}(),
	
			applyMatrix3: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
				this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				// input: THREE.Matrix4 affine matrix
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];
	
				return this;
	
			},
	
			applyProjection: function ( m ) {
	
				// input: THREE.Matrix4 projection matrix
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
				var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide
	
				this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
				this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
				this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;
	
				return this;
	
			},
	
			applyQuaternion: function ( q ) {
	
				var x = this.x, y = this.y, z = this.z;
				var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
	
				// calculate quat * vector
	
				var ix =  qw * x + qy * z - qz * y;
				var iy =  qw * y + qz * x - qx * z;
				var iz =  qw * z + qx * y - qy * x;
				var iw = - qx * x - qy * y - qz * z;
	
				// calculate result * inverse quat
	
				this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
				this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
				this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
	
				return this;
	
			},
	
			project: function () {
	
				var matrix;
	
				return function project( camera ) {
	
					if ( matrix === undefined ) matrix = new Matrix4();
	
					matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
					return this.applyProjection( matrix );
	
				};
	
			}(),
	
			unproject: function () {
	
				var matrix;
	
				return function unproject( camera ) {
	
					if ( matrix === undefined ) matrix = new Matrix4();
	
					matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
					return this.applyProjection( matrix );
	
				};
	
			}(),
	
			transformDirection: function ( m ) {
	
				// input: THREE.Matrix4 affine matrix
				// vector interpreted as a direction
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
	
				return this.normalize();
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
				this.z /= v.z;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min, max;
	
				return function clampScalar( minVal, maxVal ) {
	
					if ( min === undefined ) {
	
						min = new Vector3();
						max = new Vector3();
	
					}
	
					min.set( minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
	
			},
	
			lengthManhattan: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() );
	
			},
	
			setLength: function ( length ) {
	
				return this.multiplyScalar( length / this.length() );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			cross: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
					return this.crossVectors( v, w );
	
				}
	
				var x = this.x, y = this.y, z = this.z;
	
				this.x = y * v.z - z * v.y;
				this.y = z * v.x - x * v.z;
				this.z = x * v.y - y * v.x;
	
				return this;
	
			},
	
			crossVectors: function ( a, b ) {
	
				var ax = a.x, ay = a.y, az = a.z;
				var bx = b.x, by = b.y, bz = b.z;
	
				this.x = ay * bz - az * by;
				this.y = az * bx - ax * bz;
				this.z = ax * by - ay * bx;
	
				return this;
	
			},
	
			projectOnVector: function ( vector ) {
	
				var scalar = vector.dot( this ) / vector.lengthSq();
	
				return this.copy( vector ).multiplyScalar( scalar );
	
			},
	
			projectOnPlane: function () {
	
				var v1;
	
				return function projectOnPlane( planeNormal ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
	
					v1.copy( this ).projectOnVector( planeNormal );
	
					return this.sub( v1 );
	
				};
	
			}(),
	
			reflect: function () {
	
				// reflect incident vector off plane orthogonal to normal
				// normal is assumed to have unit length
	
				var v1;
	
				return function reflect( normal ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
	
					return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
	
				};
	
			}(),
	
			angleTo: function ( v ) {
	
				var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );
	
				// clamp, to handle numerical problems
	
				return Math.acos( _Math.clamp( theta, - 1, 1 ) );
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
	
				return dx * dx + dy * dy + dz * dz;
	
			},
	
			distanceToManhattan: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
	
			},
	
			setFromSpherical: function( s ) {
	
				var sinPhiRadius = Math.sin( s.phi ) * s.radius;
	
				this.x = sinPhiRadius * Math.sin( s.theta );
				this.y = Math.cos( s.phi ) * s.radius;
				this.z = sinPhiRadius * Math.cos( s.theta );
	
				return this;
	
			},
	
			setFromMatrixPosition: function ( m ) {
	
				return this.setFromMatrixColumn( m, 3 );
	
			},
	
			setFromMatrixScale: function ( m ) {
	
				var sx = this.setFromMatrixColumn( m, 0 ).length();
				var sy = this.setFromMatrixColumn( m, 1 ).length();
				var sz = this.setFromMatrixColumn( m, 2 ).length();
	
				this.x = sx;
				this.y = sy;
				this.z = sz;
	
				return this;
	
			},
	
			setFromMatrixColumn: function ( m, index ) {
	
				if ( typeof m === 'number' ) {
	
					console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
					var temp = m;
					m = index;
					index = temp;
	
				}
	
				return this.fromArray( m.elements, index * 4 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
	
				return array;
	
			},
	
			fromAttribute: function ( attribute, index, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				index = index * attribute.itemSize + offset;
	
				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];
				this.z = attribute.array[ index + 2 ];
	
				return this;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author jordi_ros / http://plattsoft.com
		 * @author D1plo1d / http://github.com/D1plo1d
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author timknip / http://www.floorplanner.com/
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Matrix4() {
	
			this.elements = new Float32Array( [
	
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
	
			] );
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Matrix4.prototype = {
	
			constructor: Matrix4,
	
			isMatrix4: true,
	
			set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
				te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
				te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
				te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new Matrix4().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				this.elements.set( m.elements );
	
				return this;
	
			},
	
			copyPosition: function ( m ) {
	
				var te = this.elements;
				var me = m.elements;
	
				te[ 12 ] = me[ 12 ];
				te[ 13 ] = me[ 13 ];
				te[ 14 ] = me[ 14 ];
	
				return this;
	
			},
	
			extractBasis: function ( xAxis, yAxis, zAxis ) {
	
				xAxis.setFromMatrixColumn( this, 0 );
				yAxis.setFromMatrixColumn( this, 1 );
				zAxis.setFromMatrixColumn( this, 2 );
	
				return this;
	
			},
	
			makeBasis: function ( xAxis, yAxis, zAxis ) {
	
				this.set(
					xAxis.x, yAxis.x, zAxis.x, 0,
					xAxis.y, yAxis.y, zAxis.y, 0,
					xAxis.z, yAxis.z, zAxis.z, 0,
					0,       0,       0,       1
				);
	
				return this;
	
			},
	
			extractRotation: function () {
	
				var v1;
	
				return function extractRotation( m ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
	
					var te = this.elements;
					var me = m.elements;
	
					var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
					var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
					var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();
	
					te[ 0 ] = me[ 0 ] * scaleX;
					te[ 1 ] = me[ 1 ] * scaleX;
					te[ 2 ] = me[ 2 ] * scaleX;
	
					te[ 4 ] = me[ 4 ] * scaleY;
					te[ 5 ] = me[ 5 ] * scaleY;
					te[ 6 ] = me[ 6 ] * scaleY;
	
					te[ 8 ] = me[ 8 ] * scaleZ;
					te[ 9 ] = me[ 9 ] * scaleZ;
					te[ 10 ] = me[ 10 ] * scaleZ;
	
					return this;
	
				};
	
			}(),
	
			makeRotationFromEuler: function ( euler ) {
	
				if ( (euler && euler.isEuler) === false ) {
	
					console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
				}
	
				var te = this.elements;
	
				var x = euler.x, y = euler.y, z = euler.z;
				var a = Math.cos( x ), b = Math.sin( x );
				var c = Math.cos( y ), d = Math.sin( y );
				var e = Math.cos( z ), f = Math.sin( z );
	
				if ( euler.order === 'XYZ' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - c * f;
					te[ 8 ] = d;
	
					te[ 1 ] = af + be * d;
					te[ 5 ] = ae - bf * d;
					te[ 9 ] = - b * c;
	
					te[ 2 ] = bf - ae * d;
					te[ 6 ] = be + af * d;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YXZ' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce + df * b;
					te[ 4 ] = de * b - cf;
					te[ 8 ] = a * d;
	
					te[ 1 ] = a * f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b;
	
					te[ 2 ] = cf * b - de;
					te[ 6 ] = df + ce * b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZXY' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce - df * b;
					te[ 4 ] = - a * f;
					te[ 8 ] = de + cf * b;
	
					te[ 1 ] = cf + de * b;
					te[ 5 ] = a * e;
					te[ 9 ] = df - ce * b;
	
					te[ 2 ] = - a * d;
					te[ 6 ] = b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZYX' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = be * d - af;
					te[ 8 ] = ae * d + bf;
	
					te[ 1 ] = c * f;
					te[ 5 ] = bf * d + ae;
					te[ 9 ] = af * d - be;
	
					te[ 2 ] = - d;
					te[ 6 ] = b * c;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YZX' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = bd - ac * f;
					te[ 8 ] = bc * f + ad;
	
					te[ 1 ] = f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b * e;
	
					te[ 2 ] = - d * e;
					te[ 6 ] = ad * f + bc;
					te[ 10 ] = ac - bd * f;
	
				} else if ( euler.order === 'XZY' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - f;
					te[ 8 ] = d * e;
	
					te[ 1 ] = ac * f + bd;
					te[ 5 ] = a * e;
					te[ 9 ] = ad * f - bc;
	
					te[ 2 ] = bc * f - ad;
					te[ 6 ] = b * e;
					te[ 10 ] = bd * f + ac;
	
				}
	
				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;
	
				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			makeRotationFromQuaternion: function ( q ) {
	
				var te = this.elements;
	
				var x = q.x, y = q.y, z = q.z, w = q.w;
				var x2 = x + x, y2 = y + y, z2 = z + z;
				var xx = x * x2, xy = x * y2, xz = x * z2;
				var yy = y * y2, yz = y * z2, zz = z * z2;
				var wx = w * x2, wy = w * y2, wz = w * z2;
	
				te[ 0 ] = 1 - ( yy + zz );
				te[ 4 ] = xy - wz;
				te[ 8 ] = xz + wy;
	
				te[ 1 ] = xy + wz;
				te[ 5 ] = 1 - ( xx + zz );
				te[ 9 ] = yz - wx;
	
				te[ 2 ] = xz - wy;
				te[ 6 ] = yz + wx;
				te[ 10 ] = 1 - ( xx + yy );
	
				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;
	
				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			lookAt: function () {
	
				var x, y, z;
	
				return function lookAt( eye, target, up ) {
	
					if ( x === undefined ) {
	
						x = new Vector3();
						y = new Vector3();
						z = new Vector3();
	
					}
	
					var te = this.elements;
	
					z.subVectors( eye, target ).normalize();
	
					if ( z.lengthSq() === 0 ) {
	
						z.z = 1;
	
					}
	
					x.crossVectors( up, z ).normalize();
	
					if ( x.lengthSq() === 0 ) {
	
						z.z += 0.0001;
						x.crossVectors( up, z ).normalize();
	
					}
	
					y.crossVectors( z, x );
	
	
					te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
					te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
					te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
	
					return this;
	
				};
	
			}(),
	
			multiply: function ( m, n ) {
	
				if ( n !== undefined ) {
	
					console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
					return this.multiplyMatrices( m, n );
	
				}
	
				return this.multiplyMatrices( this, m );
	
			},
	
			premultiply: function ( m ) {
	
				return this.multiplyMatrices( m, this );
	
			},
	
			multiplyMatrices: function ( a, b ) {
	
				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;
	
				var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
				var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
				var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
				var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
	
				var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
				var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
				var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
				var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
	
				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
				te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
				te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
				te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
	
				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
				te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
				te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
				te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
	
				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
				te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
				te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
				te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
	
				te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
				te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
				te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
				te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	
				return this;
	
			},
	
			multiplyToArray: function ( a, b, r ) {
	
				var te = this.elements;
	
				this.multiplyMatrices( a, b );
	
				r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
				r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
				r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
				r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
				te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
				te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
				te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
	
				return this;
	
			},
	
			applyToVector3Array: function () {
	
				var v1;
	
				return function applyToVector3Array( array, offset, length ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = array.length;
	
					for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {
	
						v1.fromArray( array, j );
						v1.applyMatrix4( this );
						v1.toArray( array, j );
	
					}
	
					return array;
	
				};
	
			}(),
	
			applyToBuffer: function () {
	
				var v1;
	
				return function applyToBuffer( buffer, offset, length ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = buffer.length / buffer.itemSize;
	
					for ( var i = 0, j = offset; i < length; i ++, j ++ ) {
	
						v1.x = buffer.getX( j );
						v1.y = buffer.getY( j );
						v1.z = buffer.getZ( j );
	
						v1.applyMatrix4( this );
	
						buffer.setXYZ( j, v1.x, v1.y, v1.z );
	
					}
	
					return buffer;
	
				};
	
			}(),
	
			determinant: function () {
	
				var te = this.elements;
	
				var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
				var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
				var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
				var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
	
				//TODO: make this more efficient
				//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
	
				return (
					n41 * (
						+ n14 * n23 * n32
						 - n13 * n24 * n32
						 - n14 * n22 * n33
						 + n12 * n24 * n33
						 + n13 * n22 * n34
						 - n12 * n23 * n34
					) +
					n42 * (
						+ n11 * n23 * n34
						 - n11 * n24 * n33
						 + n14 * n21 * n33
						 - n13 * n21 * n34
						 + n13 * n24 * n31
						 - n14 * n23 * n31
					) +
					n43 * (
						+ n11 * n24 * n32
						 - n11 * n22 * n34
						 - n14 * n21 * n32
						 + n12 * n21 * n34
						 + n14 * n22 * n31
						 - n12 * n24 * n31
					) +
					n44 * (
						- n13 * n22 * n31
						 - n11 * n23 * n32
						 + n11 * n22 * n33
						 + n13 * n21 * n32
						 - n12 * n21 * n33
						 + n12 * n23 * n31
					)
	
				);
	
			},
	
			transpose: function () {
	
				var te = this.elements;
				var tmp;
	
				tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
				tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
				tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
	
				tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
				tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
				tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
	
				return this;
	
			},
	
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
						"- just use .toArray instead." );
	
				return this.toArray( array, offset );
	
			},
	
			getPosition: function () {
	
				var v1;
	
				return function getPosition() {
	
					if ( v1 === undefined ) v1 = new Vector3();
					console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
	
					return v1.setFromMatrixColumn( this, 3 );
	
				};
	
			}(),
	
			setPosition: function ( v ) {
	
				var te = this.elements;
	
				te[ 12 ] = v.x;
				te[ 13 ] = v.y;
				te[ 14 ] = v.z;
	
				return this;
	
			},
	
			getInverse: function ( m, throwOnDegenerate ) {
	
				// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
				var te = this.elements,
					me = m.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
					n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
					n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
					n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
	
					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
	
				var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
	
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
				te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
				te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
	
				te[ 4 ] = t12 * detInv;
				te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
				te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
				te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
	
				te[ 8 ] = t13 * detInv;
				te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
				te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
				te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
	
				te[ 12 ] = t14 * detInv;
				te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
				te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
				te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
	
				return this;
	
			},
	
			scale: function ( v ) {
	
				var te = this.elements;
				var x = v.x, y = v.y, z = v.z;
	
				te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
				te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
				te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
				te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
	
				return this;
	
			},
	
			getMaxScaleOnAxis: function () {
	
				var te = this.elements;
	
				var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
				var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
				var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
	
				return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
	
			},
	
			makeTranslation: function ( x, y, z ) {
	
				this.set(
	
					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationX: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					1, 0,  0, 0,
					0, c, - s, 0,
					0, s,  c, 0,
					0, 0,  0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationY: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					 c, 0, s, 0,
					 0, 1, 0, 0,
					- s, 0, c, 0,
					 0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationZ: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					c, - s, 0, 0,
					s,  c, 0, 0,
					0,  0, 1, 0,
					0,  0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationAxis: function ( axis, angle ) {
	
				// Based on http://www.gamedev.net/reference/articles/article1199.asp
	
				var c = Math.cos( angle );
				var s = Math.sin( angle );
				var t = 1 - c;
				var x = axis.x, y = axis.y, z = axis.z;
				var tx = t * x, ty = t * y;
	
				this.set(
	
					tx * x + c, tx * y - s * z, tx * z + s * y, 0,
					tx * y + s * z, ty * y + c, ty * z - s * x, 0,
					tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
					0, 0, 0, 1
	
				);
	
				 return this;
	
			},
	
			makeScale: function ( x, y, z ) {
	
				this.set(
	
					x, 0, 0, 0,
					0, y, 0, 0,
					0, 0, z, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			compose: function ( position, quaternion, scale ) {
	
				this.makeRotationFromQuaternion( quaternion );
				this.scale( scale );
				this.setPosition( position );
	
				return this;
	
			},
	
			decompose: function () {
	
				var vector, matrix;
	
				return function decompose( position, quaternion, scale ) {
	
					if ( vector === undefined ) {
	
						vector = new Vector3();
						matrix = new Matrix4();
	
					}
	
					var te = this.elements;
	
					var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
					var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
					var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
	
					// if determine is negative, we need to invert one scale
					var det = this.determinant();
					if ( det < 0 ) {
	
						sx = - sx;
	
					}
	
					position.x = te[ 12 ];
					position.y = te[ 13 ];
					position.z = te[ 14 ];
	
					// scale the rotation part
	
					matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()
	
					var invSX = 1 / sx;
					var invSY = 1 / sy;
					var invSZ = 1 / sz;
	
					matrix.elements[ 0 ] *= invSX;
					matrix.elements[ 1 ] *= invSX;
					matrix.elements[ 2 ] *= invSX;
	
					matrix.elements[ 4 ] *= invSY;
					matrix.elements[ 5 ] *= invSY;
					matrix.elements[ 6 ] *= invSY;
	
					matrix.elements[ 8 ] *= invSZ;
					matrix.elements[ 9 ] *= invSZ;
					matrix.elements[ 10 ] *= invSZ;
	
					quaternion.setFromRotationMatrix( matrix );
	
					scale.x = sx;
					scale.y = sy;
					scale.z = sz;
	
					return this;
	
				};
	
			}(),
	
			makeFrustum: function ( left, right, bottom, top, near, far ) {
	
				var te = this.elements;
				var x = 2 * near / ( right - left );
				var y = 2 * near / ( top - bottom );
	
				var a = ( right + left ) / ( right - left );
				var b = ( top + bottom ) / ( top - bottom );
				var c = - ( far + near ) / ( far - near );
				var d = - 2 * far * near / ( far - near );
	
				te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
				te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
	
				return this;
	
			},
	
			makePerspective: function ( fov, aspect, near, far ) {
	
				var ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );
				var ymin = - ymax;
				var xmin = ymin * aspect;
				var xmax = ymax * aspect;
	
				return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );
	
			},
	
			makeOrthographic: function ( left, right, top, bottom, near, far ) {
	
				var te = this.elements;
				var w = 1.0 / ( right - left );
				var h = 1.0 / ( top - bottom );
				var p = 1.0 / ( far - near );
	
				var x = ( right + left ) * w;
				var y = ( top + bottom ) * h;
				var z = ( far + near ) * p;
	
				te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
				te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
	
				return this;
	
			},
	
			equals: function ( matrix ) {
	
				var te = this.elements;
				var me = matrix.elements;
	
				for ( var i = 0; i < 16; i ++ ) {
	
					if ( te[ i ] !== me[ i ] ) return false;
	
				}
	
				return true;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				for( var i = 0; i < 16; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
				array[ offset + 3 ] = te[ 3 ];
	
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
	
				array[ offset + 8 ]  = te[ 8 ];
				array[ offset + 9 ]  = te[ 9 ];
				array[ offset + 10 ] = te[ 10 ];
				array[ offset + 11 ] = te[ 11 ];
	
				array[ offset + 12 ] = te[ 12 ];
				array[ offset + 13 ] = te[ 13 ];
				array[ offset + 14 ] = te[ 14 ];
				array[ offset + 15 ] = te[ 15 ];
	
				return array;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
	
			Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.flipY = false;
	
		}
	
		CubeTexture.prototype = Object.create( Texture.prototype );
		CubeTexture.prototype.constructor = CubeTexture;
	
		CubeTexture.prototype.isCubeTexture = true;
	
		Object.defineProperty( CubeTexture.prototype, 'images', {
	
			get: function () {
	
				return this.image;
	
			},
	
			set: function ( value ) {
	
				this.image = value;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 *
		 * Uniforms of a program.
		 * Those form a tree structure with a special top-level container for the root,
		 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
		 *
		 *
		 * Properties of inner nodes including the top-level container:
		 *
		 * .seq - array of nested uniforms
		 * .map - nested uniforms by name
		 *
		 *
		 * Methods of all nodes except the top-level container:
		 *
		 * .setValue( gl, value, [renderer] )
		 *
		 * 		uploads a uniform value(s)
		 *  	the 'renderer' parameter is needed for sampler uniforms
		 *
		 *
		 * Static methods of the top-level container (renderer factorizations):
		 *
		 * .upload( gl, seq, values, renderer )
		 *
		 * 		sets uniforms in 'seq' to 'values[id].value'
		 *
		 * .seqWithValue( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with corresponding entry in values
		 *
		 *
		 * Methods of the top-level container (renderer factorizations):
		 *
		 * .setValue( gl, name, value )
		 *
		 * 		sets uniform with  name 'name' to 'value'
		 *
		 * .set( gl, obj, prop )
		 *
		 * 		sets uniform from object and property with same name than uniform
		 *
		 * .setOptional( gl, obj, prop )
		 *
		 * 		like .set for an optional property of the object
		 *
		 */
	
		var emptyTexture = new Texture();
		var emptyCubeTexture = new CubeTexture();
	
		// --- Base for inner nodes (including the root) ---
	
		function UniformContainer() {
	
			this.seq = [];
			this.map = {};
	
		}
	
		// --- Utilities ---
	
		// Array Caches (provide typed arrays for temporary by size)
	
		var arrayCacheF32 = [];
		var arrayCacheI32 = [];
	
		// Flattening for arrays of vectors and matrices
	
		function flatten( array, nBlocks, blockSize ) {
	
			var firstElem = array[ 0 ];
	
			if ( firstElem <= 0 || firstElem > 0 ) return array;
			// unoptimized: ! isNaN( firstElem )
			// see http://jacksondunstan.com/articles/983
	
			var n = nBlocks * blockSize,
				r = arrayCacheF32[ n ];
	
			if ( r === undefined ) {
	
				r = new Float32Array( n );
				arrayCacheF32[ n ] = r;
	
			}
	
			if ( nBlocks !== 0 ) {
	
				firstElem.toArray( r, 0 );
	
				for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
	
					offset += blockSize;
					array[ i ].toArray( r, offset );
	
				}
	
			}
	
			return r;
	
		}
	
		// Texture unit allocation
	
		function allocTexUnits( renderer, n ) {
	
			var r = arrayCacheI32[ n ];
	
			if ( r === undefined ) {
	
				r = new Int32Array( n );
				arrayCacheI32[ n ] = r;
	
			}
	
			for ( var i = 0; i !== n; ++ i )
				r[ i ] = renderer.allocTextureUnit();
	
			return r;
	
		}
	
		// --- Setters ---
	
		// Note: Defining these methods externally, because they come in a bunch
		// and this way their names minify.
	
		// Single scalar
	
		function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
		function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }
	
		// Single float vector (from flat array or THREE.VectorN)
	
		function setValue2fv( gl, v ) {
	
			if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
			else gl.uniform2f( this.addr, v.x, v.y );
	
		}
	
		function setValue3fv( gl, v ) {
	
			if ( v.x !== undefined )
				gl.uniform3f( this.addr, v.x, v.y, v.z );
			else if ( v.r !== undefined )
				gl.uniform3f( this.addr, v.r, v.g, v.b );
			else
				gl.uniform3fv( this.addr, v );
	
		}
	
		function setValue4fv( gl, v ) {
	
			if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
			else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
	
		}
	
		// Single matrix (from flat array or MatrixN)
	
		function setValue2fm( gl, v ) {
	
			gl.uniformMatrix2fv( this.addr, false, v.elements || v );
	
		}
	
		function setValue3fm( gl, v ) {
	
			gl.uniformMatrix3fv( this.addr, false, v.elements || v );
	
		}
	
		function setValue4fm( gl, v ) {
	
			gl.uniformMatrix4fv( this.addr, false, v.elements || v );
	
		}
	
		// Single texture (2D / Cube)
	
		function setValueT1( gl, v, renderer ) {
	
			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTexture2D( v || emptyTexture, unit );
	
		}
	
		function setValueT6( gl, v, renderer ) {
	
			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTextureCube( v || emptyCubeTexture, unit );
	
		}
	
		// Integer / Boolean vectors or arrays thereof (always flat arrays)
	
		function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
		function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
		function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }
	
		// Helper to pick the right setter for the singular case
	
		function getSingularSetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValue1f; // FLOAT
				case 0x8b50: return setValue2fv; // _VEC2
				case 0x8b51: return setValue3fv; // _VEC3
				case 0x8b52: return setValue4fv; // _VEC4
	
				case 0x8b5a: return setValue2fm; // _MAT2
				case 0x8b5b: return setValue3fm; // _MAT3
				case 0x8b5c: return setValue4fm; // _MAT4
	
				case 0x8b5e: return setValueT1; // SAMPLER_2D
				case 0x8b60: return setValueT6; // SAMPLER_CUBE
	
				case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
	
			}
	
		}
	
		// Array of scalars
	
		function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
		function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }
	
		// Array of vectors (flat or from THREE classes)
	
		function setValueV2a( gl, v ) {
	
			gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );
	
		}
	
		function setValueV3a( gl, v ) {
	
			gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );
	
		}
	
		function setValueV4a( gl, v ) {
	
			gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );
	
		}
	
		// Array of matrices (flat or from THREE clases)
	
		function setValueM2a( gl, v ) {
	
			gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );
	
		}
	
		function setValueM3a( gl, v ) {
	
			gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );
	
		}
	
		function setValueM4a( gl, v ) {
	
			gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );
	
		}
	
		// Array of textures (2D / Cube)
	
		function setValueT1a( gl, v, renderer ) {
	
			var n = v.length,
				units = allocTexUnits( renderer, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );
	
			}
	
		}
	
		function setValueT6a( gl, v, renderer ) {
	
			var n = v.length,
				units = allocTexUnits( renderer, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
	
			}
	
		}
	
		// Helper to pick the right setter for a pure (bottom-level) array
	
		function getPureArraySetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValue1fv; // FLOAT
				case 0x8b50: return setValueV2a; // _VEC2
				case 0x8b51: return setValueV3a; // _VEC3
				case 0x8b52: return setValueV4a; // _VEC4
	
				case 0x8b5a: return setValueM2a; // _MAT2
				case 0x8b5b: return setValueM3a; // _MAT3
				case 0x8b5c: return setValueM4a; // _MAT4
	
				case 0x8b5e: return setValueT1a; // SAMPLER_2D
				case 0x8b60: return setValueT6a; // SAMPLER_CUBE
	
				case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
	
			}
	
		}
	
		// --- Uniform Classes ---
	
		function SingleUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.setValue = getSingularSetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		function PureArrayUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		function StructuredUniform( id ) {
	
			this.id = id;
	
			UniformContainer.call( this ); // mix-in
	
		}
	
		StructuredUniform.prototype.setValue = function( gl, value ) {
	
			// Note: Don't need an extra 'renderer' parameter, since samplers
			// are not allowed in structured uniforms.
	
			var seq = this.seq;
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				u.setValue( gl, value[ u.id ] );
	
			}
	
		};
	
		// --- Top-level ---
	
		// Parser - builds up the property tree from the path strings
	
		var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
	
		// extracts
		// 	- the identifier (member name or array index)
		//  - followed by an optional right bracket (found when array index)
		//  - followed by an optional left bracket or dot (type of subscript)
		//
		// Note: These portions can be read in a non-overlapping fashion and
		// allow straightforward parsing of the hierarchy that WebGL encodes
		// in the uniform names.
	
		function addUniform( container, uniformObject ) {
	
			container.seq.push( uniformObject );
			container.map[ uniformObject.id ] = uniformObject;
	
		}
	
		function parseUniform( activeInfo, addr, container ) {
	
			var path = activeInfo.name,
				pathLength = path.length;
	
			// reset RegExp object, because of the early exit of a previous run
			RePathPart.lastIndex = 0;
	
			for (; ;) {
	
				var match = RePathPart.exec( path ),
					matchEnd = RePathPart.lastIndex,
	
					id = match[ 1 ],
					idIsIndex = match[ 2 ] === ']',
					subscript = match[ 3 ];
	
				if ( idIsIndex ) id = id | 0; // convert to integer
	
				if ( subscript === undefined ||
						subscript === '[' && matchEnd + 2 === pathLength ) {
					// bare name or "pure" bottom-level array "[0]" suffix
	
					addUniform( container, subscript === undefined ?
							new SingleUniform( id, activeInfo, addr ) :
							new PureArrayUniform( id, activeInfo, addr ) );
	
					break;
	
				} else {
					// step into inner node / create it in case it doesn't exist
	
					var map = container.map,
						next = map[ id ];
	
					if ( next === undefined ) {
	
						next = new StructuredUniform( id );
						addUniform( container, next );
	
					}
	
					container = next;
	
				}
	
			}
	
		}
	
		// Root Container
	
		function WebGLUniforms( gl, program, renderer ) {
	
			UniformContainer.call( this );
	
			this.renderer = renderer;
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				var info = gl.getActiveUniform( program, i ),
					path = info.name,
					addr = gl.getUniformLocation( program, path );
	
				parseUniform( info, addr, this );
	
			}
	
		}
	
		WebGLUniforms.prototype.setValue = function( gl, name, value ) {
	
			var u = this.map[ name ];
	
			if ( u !== undefined ) u.setValue( gl, value, this.renderer );
	
		};
	
		WebGLUniforms.prototype.set = function( gl, object, name ) {
	
			var u = this.map[ name ];
	
			if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );
	
		};
	
		WebGLUniforms.prototype.setOptional = function( gl, object, name ) {
	
			var v = object[ name ];
	
			if ( v !== undefined ) this.setValue( gl, name, v );
	
		};
	
	
		// Static interface
	
		WebGLUniforms.upload = function( gl, seq, values, renderer ) {
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ],
					v = values[ u.id ];
	
				if ( v.needsUpdate !== false ) {
					// note: always updating when .needsUpdate is undefined
	
					u.setValue( gl, v.value, renderer );
	
				}
	
			}
	
		};
	
		WebGLUniforms.seqWithValue = function( seq, values ) {
	
			var r = [];
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				if ( u.id in values ) r.push( u );
	
			}
	
			return r;
	
		};
	
		/**
		 * Uniform Utilities
		 */
	
		var UniformsUtils = {
	
			merge: function ( uniforms ) {
	
				var merged = {};
	
				for ( var u = 0; u < uniforms.length; u ++ ) {
	
					var tmp = this.clone( uniforms[ u ] );
	
					for ( var p in tmp ) {
	
						merged[ p ] = tmp[ p ];
	
					}
	
				}
	
				return merged;
	
			},
	
			clone: function ( uniforms_src ) {
	
				var uniforms_dst = {};
	
				for ( var u in uniforms_src ) {
	
					uniforms_dst[ u ] = {};
	
					for ( var p in uniforms_src[ u ] ) {
	
						var parameter_src = uniforms_src[ u ][ p ];
	
						if ( parameter_src && ( parameter_src.isColor ||
							parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
							parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
							parameter_src.isTexture ) ) {
	
							uniforms_dst[ u ][ p ] = parameter_src.clone();
	
						} else if ( Array.isArray( parameter_src ) ) {
	
							uniforms_dst[ u ][ p ] = parameter_src.slice();
	
						} else {
	
							uniforms_dst[ u ][ p ] = parameter_src;
	
						}
	
					}
	
				}
	
				return uniforms_dst;
	
			}
	
		};
	
		var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";
	
		var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";
	
		var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";
	
		var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";
	
		var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
	
		var begin_vertex = "\nvec3 transformed = vec3( position );\n";
	
		var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";
	
		var bsdfs = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";
	
		var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";
	
		var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";
	
		var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";
	
		var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";
	
		var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";
	
		var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
	
		var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";
	
		var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	
		var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
	
		var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";
	
		var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";
	
		var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";
	
		var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";
	
		var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";
	
		var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";
	
		var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";
	
		var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";
	
		var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";
	
		var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";
	
		var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";
	
		var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";
	
		var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";
	
		var fog_fragment = "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";
	
		var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
	
		var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";
	
		var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
	
		var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";
	
		var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";
	
		var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";
	
		var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";
	
		var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";
	
		var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";
	
		var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";
	
		var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";
	
		var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";
	
		var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";
	
		var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";
	
		var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";
	
		var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";
	
		var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";
	
		var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";
	
		var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";
	
		var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
	
		var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";
	
		var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
	
		var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";
	
		var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";
	
		var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";
	
		var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";
	
		var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";
	
		var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";
	
		var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";
	
		var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";
	
		var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
	
		var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";
	
		var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";
	
		var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";
	
		var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";
	
		var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
	
		var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";
	
		var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";
	
		var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";
	
		var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
	
		var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
	
		var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";
	
		var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";
	
		var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
	
		var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";
	
		var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";
	
		var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
	
		var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
	
		var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
	
		var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";
	
		var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";
	
		var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";
	
		var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";
	
		var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";
	
		var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";
	
		var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";
	
		var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";
	
		var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";
	
		var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";
	
		var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n";
	
		var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n";
	
		var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n";
	
		var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";
	
		var normal_frag = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n";
	
		var normal_vert = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";
	
		var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";
	
		var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";
	
		var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";
	
		var ShaderChunk = {
			alphamap_fragment: alphamap_fragment,
			alphamap_pars_fragment: alphamap_pars_fragment,
			alphatest_fragment: alphatest_fragment,
			aomap_fragment: aomap_fragment,
			aomap_pars_fragment: aomap_pars_fragment,
			begin_vertex: begin_vertex,
			beginnormal_vertex: beginnormal_vertex,
			bsdfs: bsdfs,
			bumpmap_pars_fragment: bumpmap_pars_fragment,
			clipping_planes_fragment: clipping_planes_fragment,
			clipping_planes_pars_fragment: clipping_planes_pars_fragment,
			clipping_planes_pars_vertex: clipping_planes_pars_vertex,
			clipping_planes_vertex: clipping_planes_vertex,
			color_fragment: color_fragment,
			color_pars_fragment: color_pars_fragment,
			color_pars_vertex: color_pars_vertex,
			color_vertex: color_vertex,
			common: common,
			cube_uv_reflection_fragment: cube_uv_reflection_fragment,
			defaultnormal_vertex: defaultnormal_vertex,
			displacementmap_pars_vertex: displacementmap_pars_vertex,
			displacementmap_vertex: displacementmap_vertex,
			emissivemap_fragment: emissivemap_fragment,
			emissivemap_pars_fragment: emissivemap_pars_fragment,
			encodings_fragment: encodings_fragment,
			encodings_pars_fragment: encodings_pars_fragment,
			envmap_fragment: envmap_fragment,
			envmap_pars_fragment: envmap_pars_fragment,
			envmap_pars_vertex: envmap_pars_vertex,
			envmap_vertex: envmap_vertex,
			fog_fragment: fog_fragment,
			fog_pars_fragment: fog_pars_fragment,
			lightmap_fragment: lightmap_fragment,
			lightmap_pars_fragment: lightmap_pars_fragment,
			lights_lambert_vertex: lights_lambert_vertex,
			lights_pars: lights_pars,
			lights_phong_fragment: lights_phong_fragment,
			lights_phong_pars_fragment: lights_phong_pars_fragment,
			lights_physical_fragment: lights_physical_fragment,
			lights_physical_pars_fragment: lights_physical_pars_fragment,
			lights_template: lights_template,
			logdepthbuf_fragment: logdepthbuf_fragment,
			logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
			logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
			logdepthbuf_vertex: logdepthbuf_vertex,
			map_fragment: map_fragment,
			map_pars_fragment: map_pars_fragment,
			map_particle_fragment: map_particle_fragment,
			map_particle_pars_fragment: map_particle_pars_fragment,
			metalnessmap_fragment: metalnessmap_fragment,
			metalnessmap_pars_fragment: metalnessmap_pars_fragment,
			morphnormal_vertex: morphnormal_vertex,
			morphtarget_pars_vertex: morphtarget_pars_vertex,
			morphtarget_vertex: morphtarget_vertex,
			normal_flip: normal_flip,
			normal_fragment: normal_fragment,
			normalmap_pars_fragment: normalmap_pars_fragment,
			packing: packing,
			premultiplied_alpha_fragment: premultiplied_alpha_fragment,
			project_vertex: project_vertex,
			roughnessmap_fragment: roughnessmap_fragment,
			roughnessmap_pars_fragment: roughnessmap_pars_fragment,
			shadowmap_pars_fragment: shadowmap_pars_fragment,
			shadowmap_pars_vertex: shadowmap_pars_vertex,
			shadowmap_vertex: shadowmap_vertex,
			shadowmask_pars_fragment: shadowmask_pars_fragment,
			skinbase_vertex: skinbase_vertex,
			skinning_pars_vertex: skinning_pars_vertex,
			skinning_vertex: skinning_vertex,
			skinnormal_vertex: skinnormal_vertex,
			specularmap_fragment: specularmap_fragment,
			specularmap_pars_fragment: specularmap_pars_fragment,
			tonemapping_fragment: tonemapping_fragment,
			tonemapping_pars_fragment: tonemapping_pars_fragment,
			uv_pars_fragment: uv_pars_fragment,
			uv_pars_vertex: uv_pars_vertex,
			uv_vertex: uv_vertex,
			uv2_pars_fragment: uv2_pars_fragment,
			uv2_pars_vertex: uv2_pars_vertex,
			uv2_vertex: uv2_vertex,
			worldpos_vertex: worldpos_vertex,
	
			cube_frag: cube_frag,
			cube_vert: cube_vert,
			depth_frag: depth_frag,
			depth_vert: depth_vert,
			distanceRGBA_frag: distanceRGBA_frag,
			distanceRGBA_vert: distanceRGBA_vert,
			equirect_frag: equirect_frag,
			equirect_vert: equirect_vert,
			linedashed_frag: linedashed_frag,
			linedashed_vert: linedashed_vert,
			meshbasic_frag: meshbasic_frag,
			meshbasic_vert: meshbasic_vert,
			meshlambert_frag: meshlambert_frag,
			meshlambert_vert: meshlambert_vert,
			meshphong_frag: meshphong_frag,
			meshphong_vert: meshphong_vert,
			meshphysical_frag: meshphysical_frag,
			meshphysical_vert: meshphysical_vert,
			normal_frag: normal_frag,
			normal_vert: normal_vert,
			points_frag: points_frag,
			points_vert: points_vert,
			shadow_frag: shadow_frag,
			shadow_vert: shadow_vert
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Color( r, g, b ) {
	
			if ( g === undefined && b === undefined ) {
	
				// r is THREE.Color, hex or string
				return this.set( r );
	
			}
	
			return this.setRGB( r, g, b );
	
		}
	
		Color.prototype = {
	
			constructor: Color,
	
			isColor: true,
	
			r: 1, g: 1, b: 1,
	
			set: function ( value ) {
	
				if ( (value && value.isColor) ) {
	
					this.copy( value );
	
				} else if ( typeof value === 'number' ) {
	
					this.setHex( value );
	
				} else if ( typeof value === 'string' ) {
	
					this.setStyle( value );
	
				}
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.r = scalar;
				this.g = scalar;
				this.b = scalar;
	
				return this;
	
			},
	
			setHex: function ( hex ) {
	
				hex = Math.floor( hex );
	
				this.r = ( hex >> 16 & 255 ) / 255;
				this.g = ( hex >> 8 & 255 ) / 255;
				this.b = ( hex & 255 ) / 255;
	
				return this;
	
			},
	
			setRGB: function ( r, g, b ) {
	
				this.r = r;
				this.g = g;
				this.b = b;
	
				return this;
	
			},
	
			setHSL: function () {
	
				function hue2rgb( p, q, t ) {
	
					if ( t < 0 ) t += 1;
					if ( t > 1 ) t -= 1;
					if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
					if ( t < 1 / 2 ) return q;
					if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
					return p;
	
				}
	
				return function setHSL( h, s, l ) {
	
					// h,s,l ranges are in 0.0 - 1.0
					h = _Math.euclideanModulo( h, 1 );
					s = _Math.clamp( s, 0, 1 );
					l = _Math.clamp( l, 0, 1 );
	
					if ( s === 0 ) {
	
						this.r = this.g = this.b = l;
	
					} else {
	
						var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
						var q = ( 2 * l ) - p;
	
						this.r = hue2rgb( q, p, h + 1 / 3 );
						this.g = hue2rgb( q, p, h );
						this.b = hue2rgb( q, p, h - 1 / 3 );
	
					}
	
					return this;
	
				};
	
			}(),
	
			setStyle: function ( style ) {
	
				function handleAlpha( string ) {
	
					if ( string === undefined ) return;
	
					if ( parseFloat( string ) < 1 ) {
	
						console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
	
					}
	
				}
	
	
				var m;
	
				if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
	
					// rgb / hsl
	
					var color;
					var name = m[ 1 ];
					var components = m[ 2 ];
	
					switch ( name ) {
	
						case 'rgb':
						case 'rgba':
	
							if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(255,0,0) rgba(255,0,0,0.5)
								this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
								this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
								this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
								this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
								this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
								this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							break;
	
						case 'hsl':
						case 'hsla':
	
							if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
								var h = parseFloat( color[ 1 ] ) / 360;
								var s = parseInt( color[ 2 ], 10 ) / 100;
								var l = parseInt( color[ 3 ], 10 ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this.setHSL( h, s, l );
	
							}
	
							break;
	
					}
	
				} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
	
					// hex color
	
					var hex = m[ 1 ];
					var size = hex.length;
	
					if ( size === 3 ) {
	
						// #ff0
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
	
						return this;
	
					} else if ( size === 6 ) {
	
						// #ff0000
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
	
						return this;
	
					}
	
				}
	
				if ( style && style.length > 0 ) {
	
					// color keywords
					var hex = ColorKeywords[ style ];
	
					if ( hex !== undefined ) {
	
						// red
						this.setHex( hex );
	
					} else {
	
						// unknown color
						console.warn( 'THREE.Color: Unknown color ' + style );
	
					}
	
				}
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this.r, this.g, this.b );
	
			},
	
			copy: function ( color ) {
	
				this.r = color.r;
				this.g = color.g;
				this.b = color.b;
	
				return this;
	
			},
	
			copyGammaToLinear: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
				this.r = Math.pow( color.r, gammaFactor );
				this.g = Math.pow( color.g, gammaFactor );
				this.b = Math.pow( color.b, gammaFactor );
	
				return this;
	
			},
	
			copyLinearToGamma: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
				var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
	
				this.r = Math.pow( color.r, safeInverse );
				this.g = Math.pow( color.g, safeInverse );
				this.b = Math.pow( color.b, safeInverse );
	
				return this;
	
			},
	
			convertGammaToLinear: function () {
	
				var r = this.r, g = this.g, b = this.b;
	
				this.r = r * r;
				this.g = g * g;
				this.b = b * b;
	
				return this;
	
			},
	
			convertLinearToGamma: function () {
	
				this.r = Math.sqrt( this.r );
				this.g = Math.sqrt( this.g );
				this.b = Math.sqrt( this.b );
	
				return this;
	
			},
	
			getHex: function () {
	
				return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
	
			},
	
			getHexString: function () {
	
				return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
	
			},
	
			getHSL: function ( optionalTarget ) {
	
				// h,s,l ranges are in 0.0 - 1.0
	
				var hsl = optionalTarget || { h: 0, s: 0, l: 0 };
	
				var r = this.r, g = this.g, b = this.b;
	
				var max = Math.max( r, g, b );
				var min = Math.min( r, g, b );
	
				var hue, saturation;
				var lightness = ( min + max ) / 2.0;
	
				if ( min === max ) {
	
					hue = 0;
					saturation = 0;
	
				} else {
	
					var delta = max - min;
	
					saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
	
					switch ( max ) {
	
						case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
						case g: hue = ( b - r ) / delta + 2; break;
						case b: hue = ( r - g ) / delta + 4; break;
	
					}
	
					hue /= 6;
	
				}
	
				hsl.h = hue;
				hsl.s = saturation;
				hsl.l = lightness;
	
				return hsl;
	
			},
	
			getStyle: function () {
	
				return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
	
			},
	
			offsetHSL: function ( h, s, l ) {
	
				var hsl = this.getHSL();
	
				hsl.h += h; hsl.s += s; hsl.l += l;
	
				this.setHSL( hsl.h, hsl.s, hsl.l );
	
				return this;
	
			},
	
			add: function ( color ) {
	
				this.r += color.r;
				this.g += color.g;
				this.b += color.b;
	
				return this;
	
			},
	
			addColors: function ( color1, color2 ) {
	
				this.r = color1.r + color2.r;
				this.g = color1.g + color2.g;
				this.b = color1.b + color2.b;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.r += s;
				this.g += s;
				this.b += s;
	
				return this;
	
			},
	
			sub: function( color ) {
	
				this.r = Math.max( 0, this.r - color.r );
				this.g = Math.max( 0, this.g - color.g );
				this.b = Math.max( 0, this.b - color.b );
	
				return this;
	
			},
	
			multiply: function ( color ) {
	
				this.r *= color.r;
				this.g *= color.g;
				this.b *= color.b;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				this.r *= s;
				this.g *= s;
				this.b *= s;
	
				return this;
	
			},
	
			lerp: function ( color, alpha ) {
	
				this.r += ( color.r - this.r ) * alpha;
				this.g += ( color.g - this.g ) * alpha;
				this.b += ( color.b - this.b ) * alpha;
	
				return this;
	
			},
	
			equals: function ( c ) {
	
				return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.r = array[ offset ];
				this.g = array[ offset + 1 ];
				this.b = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.r;
				array[ offset + 1 ] = this.g;
				array[ offset + 2 ] = this.b;
	
				return array;
	
			},
	
			toJSON: function () {
	
				return this.getHex();
	
			}
	
		};
	
		var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
	
		/**
		 * Uniforms library for shared webgl shaders
		 */
	
		var UniformsLib = {
	
			common: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
	
				map: { value: null },
				offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },
	
				specularMap: { value: null },
				alphaMap: { value: null },
	
				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				reflectivity: { value: 1.0 },
				refractionRatio: { value: 0.98 }
	
			},
	
			aomap: {
	
				aoMap: { value: null },
				aoMapIntensity: { value: 1 }
	
			},
	
			lightmap: {
	
				lightMap: { value: null },
				lightMapIntensity: { value: 1 }
	
			},
	
			emissivemap: {
	
				emissiveMap: { value: null }
	
			},
	
			bumpmap: {
	
				bumpMap: { value: null },
				bumpScale: { value: 1 }
	
			},
	
			normalmap: {
	
				normalMap: { value: null },
				normalScale: { value: new Vector2( 1, 1 ) }
	
			},
	
			displacementmap: {
	
				displacementMap: { value: null },
				displacementScale: { value: 1 },
				displacementBias: { value: 0 }
	
			},
	
			roughnessmap: {
	
				roughnessMap: { value: null }
	
			},
	
			metalnessmap: {
	
				metalnessMap: { value: null }
	
			},
	
			fog: {
	
				fogDensity: { value: 0.00025 },
				fogNear: { value: 1 },
				fogFar: { value: 2000 },
				fogColor: { value: new Color( 0xffffff ) }
	
			},
	
			lights: {
	
				ambientLightColor: { value: [] },
	
				directionalLights: { value: [], properties: {
					direction: {},
					color: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				directionalShadowMap: { value: [] },
				directionalShadowMatrix: { value: [] },
	
				spotLights: { value: [], properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				spotShadowMap: { value: [] },
				spotShadowMatrix: { value: [] },
	
				pointLights: { value: [], properties: {
					color: {},
					position: {},
					decay: {},
					distance: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				pointShadowMap: { value: [] },
				pointShadowMatrix: { value: [] },
	
				hemisphereLights: { value: [], properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				} }
	
			},
	
			points: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
				size: { value: 1.0 },
				scale: { value: 1.0 },
				map: { value: null },
				offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 */
	
		var ShaderLib = {
	
			basic: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.fog
	
				] ),
	
				vertexShader: ShaderChunk.meshbasic_vert,
				fragmentShader: ShaderChunk.meshbasic_frag
	
			},
	
			lambert: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.fog,
					UniformsLib.lights,
	
					{
						emissive : { value: new Color( 0x000000 ) }
					}
	
				] ),
	
				vertexShader: ShaderChunk.meshlambert_vert,
				fragmentShader: ShaderChunk.meshlambert_frag
	
			},
	
			phong: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.fog,
					UniformsLib.lights,
	
					{
						emissive : { value: new Color( 0x000000 ) },
						specular : { value: new Color( 0x111111 ) },
						shininess: { value: 30 }
					}
	
				] ),
	
				vertexShader: ShaderChunk.meshphong_vert,
				fragmentShader: ShaderChunk.meshphong_frag
	
			},
	
			standard: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.roughnessmap,
					UniformsLib.metalnessmap,
					UniformsLib.fog,
					UniformsLib.lights,
	
					{
						emissive : { value: new Color( 0x000000 ) },
						roughness: { value: 0.5 },
						metalness: { value: 0 },
						envMapIntensity : { value: 1 }, // temporary
					}
	
				] ),
	
				vertexShader: ShaderChunk.meshphysical_vert,
				fragmentShader: ShaderChunk.meshphysical_frag
	
			},
	
			points: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.points,
					UniformsLib.fog
	
				] ),
	
				vertexShader: ShaderChunk.points_vert,
				fragmentShader: ShaderChunk.points_frag
	
			},
	
			dashed: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.fog,
	
					{
						scale    : { value: 1 },
						dashSize : { value: 1 },
						totalSize: { value: 2 }
					}
	
				] ),
	
				vertexShader: ShaderChunk.linedashed_vert,
				fragmentShader: ShaderChunk.linedashed_frag
	
			},
	
			depth: {
	
				uniforms: UniformsUtils.merge( [
	
					UniformsLib.common,
					UniformsLib.displacementmap
	
				] ),
	
				vertexShader: ShaderChunk.depth_vert,
				fragmentShader: ShaderChunk.depth_frag
	
			},
	
			normal: {
	
				uniforms: {
	
					opacity : { value: 1.0 }
	
				},
	
				vertexShader: ShaderChunk.normal_vert,
				fragmentShader: ShaderChunk.normal_frag
	
			},
	
			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */
	
			cube: {
	
				uniforms: {
					tCube: { value: null },
					tFlip: { value: - 1 },
					opacity: { value: 1.0 }
				},
	
				vertexShader: ShaderChunk.cube_vert,
				fragmentShader: ShaderChunk.cube_frag
	
			},
	
			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */
	
			equirect: {
	
				uniforms: {
					tEquirect: { value: null },
					tFlip: { value: - 1 }
				},
	
				vertexShader: ShaderChunk.equirect_vert,
				fragmentShader: ShaderChunk.equirect_frag
	
			},
	
			distanceRGBA: {
	
				uniforms: {
	
					lightPos: { value: new Vector3() }
	
				},
	
				vertexShader: ShaderChunk.distanceRGBA_vert,
				fragmentShader: ShaderChunk.distanceRGBA_frag
	
			}
	
		};
	
		ShaderLib.physical = {
	
			uniforms: UniformsUtils.merge( [
	
				ShaderLib.standard.uniforms,
	
				{
					clearCoat: { value: 0 },
					clearCoatRoughness: { value: 0 }
				}
	
			] ),
	
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Box2( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
	
		}
	
		Box2.prototype = {
	
			constructor: Box2,
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function () {
	
				var v1 = new Vector2();
	
				return function setFromCenterAndSize( center, size ) {
	
					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = + Infinity;
				this.max.x = this.max.y = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			containsPoint: function ( point ) {
	
				if ( point.x < this.min.x || point.x > this.max.x ||
				     point.y < this.min.y || point.y > this.max.y ) {
	
					return false;
	
				}
	
				return true;
	
			},
	
			containsBox: function ( box ) {
	
				if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {
	
					return true;
	
				}
	
				return false;
	
			},
	
			getParameter: function ( point, optionalTarget ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				var result = optionalTarget || new Vector2();
	
				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 6 splitting planes to rule out intersections.
	
				if ( box.max.x < this.min.x || box.min.x > this.max.x ||
				     box.max.y < this.min.y || box.min.y > this.max.y ) {
	
					return false;
	
				}
	
				return true;
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return result.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function () {
	
				var v1 = new Vector2();
	
				return function distanceToPoint( point ) {
	
					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();
	
				};
	
			}(),
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		};
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function LensFlarePlugin( renderer, flares ) {
	
			var gl = renderer.context;
			var state = renderer.state;
	
			var vertexBuffer, elementBuffer;
			var shader, program, attributes, uniforms;
	
			var tempTexture, occlusionTexture;
	
			function init() {
	
				var vertices = new Float32Array( [
					- 1, - 1,  0, 0,
					 1, - 1,  1, 0,
					 1,  1,  1, 1,
					- 1,  1,  0, 1
				] );
	
				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );
	
				// buffers
	
				vertexBuffer     = gl.createBuffer();
				elementBuffer    = gl.createBuffer();
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
				// textures
	
				tempTexture      = gl.createTexture();
				occlusionTexture = gl.createTexture();
	
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
				shader = {
	
					vertexShader: [
	
						"uniform lowp int renderType;",
	
						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",
	
						"uniform sampler2D occlusionMap;",
	
						"attribute vec2 position;",
						"attribute vec2 uv;",
	
						"varying vec2 vUV;",
						"varying float vVisibility;",
	
						"void main() {",
	
							"vUV = uv;",
	
							"vec2 pos = position;",
	
							"if ( renderType == 2 ) {",
	
								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",
	
								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",
	
								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
	
							"}",
	
							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
	
						"}"
	
					].join( "\n" ),
	
					fragmentShader: [
	
						"uniform lowp int renderType;",
	
						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",
	
						"varying vec2 vUV;",
						"varying float vVisibility;",
	
						"void main() {",
	
							// pink square
	
							"if ( renderType == 0 ) {",
	
								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",
	
							// restore
	
							"} else if ( renderType == 1 ) {",
	
								"gl_FragColor = texture2D( map, vUV );",
	
							// flare
	
							"} else {",
	
								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",
	
							"}",
	
						"}"
	
					].join( "\n" )
	
				};
	
				program = createProgram( shader );
	
				attributes = {
					vertex: gl.getAttribLocation ( program, "position" ),
					uv:     gl.getAttribLocation ( program, "uv" )
				};
	
				uniforms = {
					renderType:     gl.getUniformLocation( program, "renderType" ),
					map:            gl.getUniformLocation( program, "map" ),
					occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
					opacity:        gl.getUniformLocation( program, "opacity" ),
					color:          gl.getUniformLocation( program, "color" ),
					scale:          gl.getUniformLocation( program, "scale" ),
					rotation:       gl.getUniformLocation( program, "rotation" ),
					screenPosition: gl.getUniformLocation( program, "screenPosition" )
				};
	
			}
	
			/*
			 * Render lens flares
			 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
			 *         reads these back and calculates occlusion.
			 */
	
			this.render = function ( scene, camera, viewport ) {
	
				if ( flares.length === 0 ) return;
	
				var tempPosition = new Vector3();
	
				var invAspect = viewport.w / viewport.z,
					halfViewportWidth = viewport.z * 0.5,
					halfViewportHeight = viewport.w * 0.5;
	
				var size = 16 / viewport.w,
					scale = new Vector2( size * invAspect, size );
	
				var screenPosition = new Vector3( 1, 1, 0 ),
					screenPositionPixels = new Vector2( 1, 1 );
	
				var validArea = new Box2();
	
				validArea.min.set( viewport.x, viewport.y );
				validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );
	
				if ( program === undefined ) {
	
					init();
	
				}
	
				gl.useProgram( program );
	
				state.initAttributes();
				state.enableAttribute( attributes.vertex );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();
	
				// loop through all lens flares to update their occlusion and positions
				// setup gl and common used attribs/uniforms
	
				gl.uniform1i( uniforms.occlusionMap, 0 );
				gl.uniform1i( uniforms.map, 1 );
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
				state.disable( gl.CULL_FACE );
				state.setDepthWrite( false );
	
				for ( var i = 0, l = flares.length; i < l; i ++ ) {
	
					size = 16 / viewport.w;
					scale.set( size * invAspect, size );
	
					// calc object screen position
	
					var flare = flares[ i ];
	
					tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );
	
					tempPosition.applyMatrix4( camera.matrixWorldInverse );
					tempPosition.applyProjection( camera.projectionMatrix );
	
					// setup arrays for gl programs
	
					screenPosition.copy( tempPosition );
	
					// horizontal and vertical coordinate of the lower left corner of the pixels to copy
	
					screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
					screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;
	
					// screen cull
	
					if ( validArea.containsPoint( screenPositionPixels ) === true ) {
	
						// save current RGB to temp texture
	
						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, null );
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );
	
	
						// render pink quad
	
						gl.uniform1i( uniforms.renderType, 0 );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
	
						state.disable( gl.BLEND );
						state.enable( gl.DEPTH_TEST );
	
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
						// copy result to occlusionMap
	
						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );
	
	
						// restore graphics
	
						gl.uniform1i( uniforms.renderType, 1 );
						state.disable( gl.DEPTH_TEST );
	
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
						// update object positions
	
						flare.positionScreen.copy( screenPosition );
	
						if ( flare.customUpdateCallback ) {
	
							flare.customUpdateCallback( flare );
	
						} else {
	
							flare.updateLensFlares();
	
						}
	
						// render flares
	
						gl.uniform1i( uniforms.renderType, 2 );
						state.enable( gl.BLEND );
	
						for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {
	
							var sprite = flare.lensFlares[ j ];
	
							if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {
	
								screenPosition.x = sprite.x;
								screenPosition.y = sprite.y;
								screenPosition.z = sprite.z;
	
								size = sprite.size * sprite.scale / viewport.w;
	
								scale.x = size * invAspect;
								scale.y = size;
	
								gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
								gl.uniform2f( uniforms.scale, scale.x, scale.y );
								gl.uniform1f( uniforms.rotation, sprite.rotation );
	
								gl.uniform1f( uniforms.opacity, sprite.opacity );
								gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );
	
								state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
								renderer.setTexture2D( sprite.texture, 1 );
	
								gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
							}
	
						}
	
					}
	
				}
	
				// restore gl
	
				state.enable( gl.CULL_FACE );
				state.enable( gl.DEPTH_TEST );
				state.setDepthWrite( true );
	
				renderer.resetGLState();
	
			};
	
			function createProgram( shader ) {
	
				var program = gl.createProgram();
	
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
	
				var prefix = "precision " + renderer.getPrecision() + " float;\n";
	
				gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
				gl.shaderSource( vertexShader, prefix + shader.vertexShader );
	
				gl.compileShader( fragmentShader );
				gl.compileShader( vertexShader );
	
				gl.attachShader( program, fragmentShader );
				gl.attachShader( program, vertexShader );
	
				gl.linkProgram( program );
	
				return program;
	
			}
	
		}
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function SpritePlugin( renderer, sprites ) {
	
			var gl = renderer.context;
			var state = renderer.state;
	
			var vertexBuffer, elementBuffer;
			var program, attributes, uniforms;
	
			var texture;
	
			// decompose matrixWorld
	
			var spritePosition = new Vector3();
			var spriteRotation = new Quaternion();
			var spriteScale = new Vector3();
	
			function init() {
	
				var vertices = new Float32Array( [
					- 0.5, - 0.5,  0, 0,
					  0.5, - 0.5,  1, 0,
					  0.5,   0.5,  1, 1,
					- 0.5,   0.5,  0, 1
				] );
	
				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );
	
				vertexBuffer  = gl.createBuffer();
				elementBuffer = gl.createBuffer();
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
				program = createProgram();
	
				attributes = {
					position:			gl.getAttribLocation ( program, 'position' ),
					uv:					gl.getAttribLocation ( program, 'uv' )
				};
	
				uniforms = {
					uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
					uvScale:			gl.getUniformLocation( program, 'uvScale' ),
	
					rotation:			gl.getUniformLocation( program, 'rotation' ),
					scale:				gl.getUniformLocation( program, 'scale' ),
	
					color:				gl.getUniformLocation( program, 'color' ),
					map:				gl.getUniformLocation( program, 'map' ),
					opacity:			gl.getUniformLocation( program, 'opacity' ),
	
					modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
					projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),
	
					fogType:			gl.getUniformLocation( program, 'fogType' ),
					fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
					fogNear:			gl.getUniformLocation( program, 'fogNear' ),
					fogFar:				gl.getUniformLocation( program, 'fogFar' ),
					fogColor:			gl.getUniformLocation( program, 'fogColor' ),
	
					alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
				};
	
				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = 8;
				canvas.height = 8;
	
				var context = canvas.getContext( '2d' );
				context.fillStyle = 'white';
				context.fillRect( 0, 0, 8, 8 );
	
				texture = new Texture( canvas );
				texture.needsUpdate = true;
	
			}
	
			this.render = function ( scene, camera ) {
	
				if ( sprites.length === 0 ) return;
	
				// setup gl
	
				if ( program === undefined ) {
	
					init();
	
				}
	
				gl.useProgram( program );
	
				state.initAttributes();
				state.enableAttribute( attributes.position );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();
	
				state.disable( gl.CULL_FACE );
				state.enable( gl.BLEND );
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
				gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
	
				state.activeTexture( gl.TEXTURE0 );
				gl.uniform1i( uniforms.map, 0 );
	
				var oldFogType = 0;
				var sceneFogType = 0;
				var fog = scene.fog;
	
				if ( fog ) {
	
					gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );
	
					if ( (fog && fog.isFog) ) {
	
						gl.uniform1f( uniforms.fogNear, fog.near );
						gl.uniform1f( uniforms.fogFar, fog.far );
	
						gl.uniform1i( uniforms.fogType, 1 );
						oldFogType = 1;
						sceneFogType = 1;
	
					} else if ( (fog && fog.isFogExp2) ) {
	
						gl.uniform1f( uniforms.fogDensity, fog.density );
	
						gl.uniform1i( uniforms.fogType, 2 );
						oldFogType = 2;
						sceneFogType = 2;
	
					}
	
				} else {
	
					gl.uniform1i( uniforms.fogType, 0 );
					oldFogType = 0;
					sceneFogType = 0;
	
				}
	
	
				// update positions and sort
	
				for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
					var sprite = sprites[ i ];
	
					sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
					sprite.z = - sprite.modelViewMatrix.elements[ 14 ];
	
				}
	
				sprites.sort( painterSortStable );
	
				// render all sprites
	
				var scale = [];
	
				for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
					var sprite = sprites[ i ];
					var material = sprite.material;
	
					if ( material.visible === false ) continue;
	
					gl.uniform1f( uniforms.alphaTest, material.alphaTest );
					gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );
	
					sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );
	
					scale[ 0 ] = spriteScale.x;
					scale[ 1 ] = spriteScale.y;
	
					var fogType = 0;
	
					if ( scene.fog && material.fog ) {
	
						fogType = sceneFogType;
	
					}
	
					if ( oldFogType !== fogType ) {
	
						gl.uniform1i( uniforms.fogType, fogType );
						oldFogType = fogType;
	
					}
	
					if ( material.map !== null ) {
	
						gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
						gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );
	
					} else {
	
						gl.uniform2f( uniforms.uvOffset, 0, 0 );
						gl.uniform2f( uniforms.uvScale, 1, 1 );
	
					}
	
					gl.uniform1f( uniforms.opacity, material.opacity );
					gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );
	
					gl.uniform1f( uniforms.rotation, material.rotation );
					gl.uniform2fv( uniforms.scale, scale );
	
					state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
					state.setDepthTest( material.depthTest );
					state.setDepthWrite( material.depthWrite );
	
					if ( material.map ) {
	
						renderer.setTexture2D( material.map, 0 );
	
					} else {
	
						renderer.setTexture2D( texture, 0 );
	
					}
	
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
				}
	
				// restore gl
	
				state.enable( gl.CULL_FACE );
	
				renderer.resetGLState();
	
			};
	
			function createProgram() {
	
				var program = gl.createProgram();
	
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
	
				gl.shaderSource( vertexShader, [
	
					'precision ' + renderer.getPrecision() + ' float;',
	
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform float rotation;',
					'uniform vec2 scale;',
					'uniform vec2 uvOffset;',
					'uniform vec2 uvScale;',
	
					'attribute vec2 position;',
					'attribute vec2 uv;',
	
					'varying vec2 vUV;',
	
					'void main() {',
	
						'vUV = uvOffset + uv * uvScale;',
	
						'vec2 alignedPosition = position * scale;',
	
						'vec2 rotatedPosition;',
						'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
						'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
	
						'vec4 finalPosition;',
	
						'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
						'finalPosition.xy += rotatedPosition;',
						'finalPosition = projectionMatrix * finalPosition;',
	
						'gl_Position = finalPosition;',
	
					'}'
	
				].join( '\n' ) );
	
				gl.shaderSource( fragmentShader, [
	
					'precision ' + renderer.getPrecision() + ' float;',
	
					'uniform vec3 color;',
					'uniform sampler2D map;',
					'uniform float opacity;',
	
					'uniform int fogType;',
					'uniform vec3 fogColor;',
					'uniform float fogDensity;',
					'uniform float fogNear;',
					'uniform float fogFar;',
					'uniform float alphaTest;',
	
					'varying vec2 vUV;',
	
					'void main() {',
	
						'vec4 texture = texture2D( map, vUV );',
	
						'if ( texture.a < alphaTest ) discard;',
	
						'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
	
						'if ( fogType > 0 ) {',
	
							'float depth = gl_FragCoord.z / gl_FragCoord.w;',
							'float fogFactor = 0.0;',
	
							'if ( fogType == 1 ) {',
	
								'fogFactor = smoothstep( fogNear, fogFar, depth );',
	
							'} else {',
	
								'const float LOG2 = 1.442695;',
								'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
								'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
	
							'}',
	
							'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',
	
						'}',
	
					'}'
	
				].join( '\n' ) );
	
				gl.compileShader( vertexShader );
				gl.compileShader( fragmentShader );
	
				gl.attachShader( program, vertexShader );
				gl.attachShader( program, fragmentShader );
	
				gl.linkProgram( program );
	
				return program;
	
			}
	
			function painterSortStable( a, b ) {
	
				if ( a.renderOrder !== b.renderOrder ) {
	
					return a.renderOrder - b.renderOrder;
	
				} else if ( a.z !== b.z ) {
	
					return b.z - a.z;
	
				} else {
	
					return b.id - a.id;
	
				}
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Material() {
	
			Object.defineProperty( this, 'id', { value: MaterialIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Material';
	
			this.fog = true;
			this.lights = true;
	
			this.blending = NormalBlending;
			this.side = FrontSide;
			this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
			this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors
	
			this.opacity = 1;
			this.transparent = false;
	
			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;
	
			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;
	
			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;
	
			this.colorWrite = true;
	
			this.precision = null; // override the renderer's default precision for this material
	
			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;
	
			this.alphaTest = 0;
			this.premultipliedAlpha = false;
	
			this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer
	
			this.visible = true;
	
			this._needsUpdate = true;
	
		}
	
		Material.prototype = {
	
			constructor: Material,
	
			isMaterial: true,
	
			get needsUpdate() {
	
				return this._needsUpdate;
	
			},
	
			set needsUpdate( value ) {
	
				if ( value === true ) this.update();
				this._needsUpdate = value;
	
			},
	
			setValues: function ( values ) {
	
				if ( values === undefined ) return;
	
				for ( var key in values ) {
	
					var newValue = values[ key ];
	
					if ( newValue === undefined ) {
	
						console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
						continue;
	
					}
	
					var currentValue = this[ key ];
	
					if ( currentValue === undefined ) {
	
						console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
						continue;
	
					}
	
					if ( (currentValue && currentValue.isColor) ) {
	
						currentValue.set( newValue );
	
					} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {
	
						currentValue.copy( newValue );
	
					} else if ( key === 'overdraw' ) {
	
						// ensure overdraw is backwards-compatible with legacy boolean type
						this[ key ] = Number( newValue );
	
					} else {
	
						this[ key ] = newValue;
	
					}
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				var isRoot = meta === undefined;
	
				if ( isRoot ) {
	
					meta = {
						textures: {},
						images: {}
					};
	
				}
	
				var data = {
					metadata: {
						version: 4.4,
						type: 'Material',
						generator: 'Material.toJSON'
					}
				};
	
				// standard Material serialization
				data.uuid = this.uuid;
				data.type = this.type;
	
				if ( this.name !== '' ) data.name = this.name;
	
				if ( (this.color && this.color.isColor) ) data.color = this.color.getHex();
	
				if ( this.roughness !== undefined ) data.roughness = this.roughness;
				if ( this.metalness !== undefined ) data.metalness = this.metalness;
	
				if ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();
				if ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();
				if ( this.shininess !== undefined ) data.shininess = this.shininess;
	
				if ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;
				if ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
				if ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
				if ( (this.bumpMap && this.bumpMap.isTexture) ) {
	
					data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
					data.bumpScale = this.bumpScale;
	
				}
				if ( (this.normalMap && this.normalMap.isTexture) ) {
	
					data.normalMap = this.normalMap.toJSON( meta ).uuid;
					data.normalScale = this.normalScale.toArray();
	
				}
				if ( (this.displacementMap && this.displacementMap.isTexture) ) {
	
					data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
					data.displacementScale = this.displacementScale;
					data.displacementBias = this.displacementBias;
	
				}
				if ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
				if ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
	
				if ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
				if ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
	
				if ( (this.envMap && this.envMap.isTexture) ) {
	
					data.envMap = this.envMap.toJSON( meta ).uuid;
					data.reflectivity = this.reflectivity; // Scale behind envMap
	
				}
	
				if ( this.size !== undefined ) data.size = this.size;
				if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
	
				if ( this.blending !== NormalBlending ) data.blending = this.blending;
				if ( this.shading !== SmoothShading ) data.shading = this.shading;
				if ( this.side !== FrontSide ) data.side = this.side;
				if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;
	
				if ( this.opacity < 1 ) data.opacity = this.opacity;
				if ( this.transparent === true ) data.transparent = this.transparent;
	
				data.depthFunc = this.depthFunc;
				data.depthTest = this.depthTest;
				data.depthWrite = this.depthWrite;
	
				if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
				if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
				if ( this.wireframe === true ) data.wireframe = this.wireframe;
				if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
				if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
				if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
	
				data.skinning = this.skinning;
				data.morphTargets = this.morphTargets;
	
				// TODO: Copied from Object3D.toJSON
	
				function extractFromCache( cache ) {
	
					var values = [];
	
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
	
					return values;
	
				}
	
				if ( isRoot ) {
	
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
	
					if ( textures.length > 0 ) data.textures = textures;
					if ( images.length > 0 ) data.images = images;
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
	
				this.fog = source.fog;
				this.lights = source.lights;
	
				this.blending = source.blending;
				this.side = source.side;
				this.shading = source.shading;
				this.vertexColors = source.vertexColors;
	
				this.opacity = source.opacity;
				this.transparent = source.transparent;
	
				this.blendSrc = source.blendSrc;
				this.blendDst = source.blendDst;
				this.blendEquation = source.blendEquation;
				this.blendSrcAlpha = source.blendSrcAlpha;
				this.blendDstAlpha = source.blendDstAlpha;
				this.blendEquationAlpha = source.blendEquationAlpha;
	
				this.depthFunc = source.depthFunc;
				this.depthTest = source.depthTest;
				this.depthWrite = source.depthWrite;
	
				this.colorWrite = source.colorWrite;
	
				this.precision = source.precision;
	
				this.polygonOffset = source.polygonOffset;
				this.polygonOffsetFactor = source.polygonOffsetFactor;
				this.polygonOffsetUnits = source.polygonOffsetUnits;
	
				this.alphaTest = source.alphaTest;
	
				this.premultipliedAlpha = source.premultipliedAlpha;
	
				this.overdraw = source.overdraw;
	
				this.visible = source.visible;
				this.clipShadows = source.clipShadows;
				this.clipIntersection = source.clipIntersection;
	
				var srcPlanes = source.clippingPlanes,
					dstPlanes = null;
	
				if ( srcPlanes !== null ) {
	
					var n = srcPlanes.length;
					dstPlanes = new Array( n );
	
					for ( var i = 0; i !== n; ++ i )
						dstPlanes[ i ] = srcPlanes[ i ].clone();
	
				}
	
				this.clippingPlanes = dstPlanes;
	
				return this;
	
			},
	
			update: function () {
	
				this.dispatchEvent( { type: 'update' } );
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		};
	
		Object.assign( Material.prototype, EventDispatcher.prototype );
	
		var count$1 = 0;
		function MaterialIdCount() { return count$1++; }
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  defines: { "label" : "value" },
		 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
		 *
		 *  fragmentShader: <string>,
		 *  vertexShader: <string>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  lights: <bool>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function ShaderMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'ShaderMaterial';
	
			this.defines = {};
			this.uniforms = {};
	
			this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
			this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';
	
			this.linewidth = 1;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes
	
			this.skinning = false; // set to use skinning attribute streams
			this.morphTargets = false; // set to use morph targets
			this.morphNormals = false; // set to use morph normals
	
			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};
	
			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv2': [ 0, 0 ]
			};
	
			this.index0AttributeName = undefined;
	
			if ( parameters !== undefined ) {
	
				if ( parameters.attributes !== undefined ) {
	
					console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
	
				}
	
				this.setValues( parameters );
	
			}
	
		}
	
		ShaderMaterial.prototype = Object.create( Material.prototype );
		ShaderMaterial.prototype.constructor = ShaderMaterial;
	
		ShaderMaterial.prototype.isShaderMaterial = true;
	
		ShaderMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;
	
			this.uniforms = UniformsUtils.clone( source.uniforms );
	
			this.defines = source.defines;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			this.lights = source.lights;
			this.clipping = source.clipping;
	
			this.skinning = source.skinning;
	
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			this.extensions = source.extensions;
	
			return this;
	
		};
	
		ShaderMaterial.prototype.toJSON = function ( meta ) {
	
			var data = Material.prototype.toJSON.call( this, meta );
	
			data.uniforms = this.uniforms;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;
	
			return data;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / https://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */
	
		function MeshDepthMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshDepthMaterial';
	
			this.depthPacking = BasicDepthPacking;
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		MeshDepthMaterial.prototype = Object.create( Material.prototype );
		MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
	
		MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
	
		MeshDepthMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.depthPacking = source.depthPacking;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			return this;
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Box3( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
	
		}
	
		Box3.prototype = {
	
			constructor: Box3,
	
			isBox3: true,
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromArray: function ( array ) {
	
				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;
	
				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;
	
				for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
					var x = array[ i ];
					var y = array[ i + 1 ];
					var z = array[ i + 2 ];
	
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;
	
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;
	
				}
	
				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function () {
	
				var v1 = new Vector3();
	
				return function setFromCenterAndSize( center, size ) {
	
					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
	
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );
	
					return this;
	
				};
	
			}(),
	
			setFromObject: function () {
	
				// Computes the world-axis-aligned bounding box of an object (including its children),
				// accounting for both the object's, and children's, world transforms
	
				var v1 = new Vector3();
	
				return function setFromObject( object ) {
	
					var scope = this;
	
					object.updateMatrixWorld( true );
	
					this.makeEmpty();
	
					object.traverse( function ( node ) {
	
						var geometry = node.geometry;
	
						if ( geometry !== undefined ) {
	
							if ( (geometry && geometry.isGeometry) ) {
	
								var vertices = geometry.vertices;
	
								for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
									v1.copy( vertices[ i ] );
									v1.applyMatrix4( node.matrixWorld );
	
									scope.expandByPoint( v1 );
	
								}
	
							} else if ( (geometry && geometry.isBufferGeometry) ) {
	
								var attribute = geometry.attributes.position;
	
								if ( attribute !== undefined ) {
	
									var array, offset, stride;
	
									if ( (attribute && attribute.isInterleavedBufferAttribute) ) {
	
										array = attribute.data.array;
										offset = attribute.offset;
										stride = attribute.data.stride;
	
									} else {
	
										array = attribute.array;
										offset = 0;
										stride = 3;
	
									}
	
									for ( var i = offset, il = array.length; i < il; i += stride ) {
	
										v1.fromArray( array, i );
										v1.applyMatrix4( node.matrixWorld );
	
										scope.expandByPoint( v1 );
	
									}
	
								}
	
							}
	
						}
	
					} );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = this.min.z = + Infinity;
				this.max.x = this.max.y = this.max.z = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			containsPoint: function ( point ) {
	
				if ( point.x < this.min.x || point.x > this.max.x ||
						 point.y < this.min.y || point.y > this.max.y ||
						 point.z < this.min.z || point.z > this.max.z ) {
	
					return false;
	
				}
	
				return true;
	
			},
	
			containsBox: function ( box ) {
	
				if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
					 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
					 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {
	
					return true;
	
				}
	
				return false;
	
			},
	
			getParameter: function ( point, optionalTarget ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				var result = optionalTarget || new Vector3();
	
				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y ),
					( point.z - this.min.z ) / ( this.max.z - this.min.z )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 6 splitting planes to rule out intersections.
	
				if ( box.max.x < this.min.x || box.min.x > this.max.x ||
						 box.max.y < this.min.y || box.min.y > this.max.y ||
						 box.max.z < this.min.z || box.min.z > this.max.z ) {
	
					return false;
	
				}
	
				return true;
	
			},
	
			intersectsSphere: ( function () {
	
				var closestPoint;
	
				return function intersectsSphere( sphere ) {
	
					if ( closestPoint === undefined ) closestPoint = new Vector3();
	
					// Find the point on the AABB closest to the sphere center.
					this.clampPoint( sphere.center, closestPoint );
	
					// If that point is inside the sphere, the AABB and sphere intersect.
					return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
	
				};
	
			} )(),
	
			intersectsPlane: function ( plane ) {
	
				// We compute the minimum and maximum dot product values. If those values
				// are on the same side (back or front) of the plane, then there is no intersection.
	
				var min, max;
	
				if ( plane.normal.x > 0 ) {
	
					min = plane.normal.x * this.min.x;
					max = plane.normal.x * this.max.x;
	
				} else {
	
					min = plane.normal.x * this.max.x;
					max = plane.normal.x * this.min.x;
	
				}
	
				if ( plane.normal.y > 0 ) {
	
					min += plane.normal.y * this.min.y;
					max += plane.normal.y * this.max.y;
	
				} else {
	
					min += plane.normal.y * this.max.y;
					max += plane.normal.y * this.min.y;
	
				}
	
				if ( plane.normal.z > 0 ) {
	
					min += plane.normal.z * this.min.z;
					max += plane.normal.z * this.max.z;
	
				} else {
	
					min += plane.normal.z * this.max.z;
					max += plane.normal.z * this.min.z;
	
				}
	
				return ( min <= plane.constant && max >= plane.constant );
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function () {
	
				var v1 = new Vector3();
	
				return function distanceToPoint( point ) {
	
					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();
	
				};
	
			}(),
	
			getBoundingSphere: function () {
	
				var v1 = new Vector3();
	
				return function getBoundingSphere( optionalTarget ) {
	
					var result = optionalTarget || new Sphere();
	
					this.getCenter( result.center );
	
					result.radius = this.getSize( v1 ).length() * 0.5;
	
					return result;
	
				};
	
			}(),
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
				if( this.isEmpty() ) this.makeEmpty();
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			applyMatrix4: function () {
	
				var points = [
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3()
				];
	
				return function applyMatrix4( matrix ) {
	
					// transform of empty box is an empty box.
					if( this.isEmpty() ) return this;
	
					// NOTE: I am using a binary pattern to specify all 2^3 combinations below
					points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
					points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
					points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
					points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
					points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
					points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
					points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
					points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111
	
					this.setFromPoints( points );
	
					return this;
	
				};
	
			}(),
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Sphere( center, radius ) {
	
			this.center = ( center !== undefined ) ? center : new Vector3();
			this.radius = ( radius !== undefined ) ? radius : 0;
	
		}
	
		Sphere.prototype = {
	
			constructor: Sphere,
	
			set: function ( center, radius ) {
	
				this.center.copy( center );
				this.radius = radius;
	
				return this;
	
			},
	
			setFromPoints: function () {
	
				var box = new Box3();
	
				return function setFromPoints( points, optionalCenter ) {
	
					var center = this.center;
	
					if ( optionalCenter !== undefined ) {
	
						center.copy( optionalCenter );
	
					} else {
	
						box.setFromPoints( points ).getCenter( center );
	
					}
	
					var maxRadiusSq = 0;
	
					for ( var i = 0, il = points.length; i < il; i ++ ) {
	
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
	
					}
	
					this.radius = Math.sqrt( maxRadiusSq );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( sphere ) {
	
				this.center.copy( sphere.center );
				this.radius = sphere.radius;
	
				return this;
	
			},
	
			empty: function () {
	
				return ( this.radius <= 0 );
	
			},
	
			containsPoint: function ( point ) {
	
				return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return ( point.distanceTo( this.center ) - this.radius );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				var radiusSum = this.radius + sphere.radius;
	
				return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsSphere( this );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				// We use the following equation to compute the signed distance from
				// the center of the sphere to the plane.
				//
				// distance = q * n - d
				//
				// If this distance is greater than the radius of the sphere,
				// then there is no intersection.
	
				return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var deltaLengthSq = this.center.distanceToSquared( point );
	
				var result = optionalTarget || new Vector3();
	
				result.copy( point );
	
				if ( deltaLengthSq > ( this.radius * this.radius ) ) {
	
					result.sub( this.center ).normalize();
					result.multiplyScalar( this.radius ).add( this.center );
	
				}
	
				return result;
	
			},
	
			getBoundingBox: function ( optionalTarget ) {
	
				var box = optionalTarget || new Box3();
	
				box.set( this.center, this.center );
				box.expandByScalar( this.radius );
	
				return box;
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.center.applyMatrix4( matrix );
				this.radius = this.radius * matrix.getMaxScaleOnAxis();
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.center.add( offset );
	
				return this;
	
			},
	
			equals: function ( sphere ) {
	
				return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 * @author tschw
		 */
	
		function Matrix3() {
	
			this.elements = new Float32Array( [
	
				1, 0, 0,
				0, 1, 0,
				0, 0, 1
	
			] );
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Matrix3.prototype = {
	
			constructor: Matrix3,
	
			isMatrix3: true,
	
			set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
				te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
				te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0,
					0, 1, 0,
					0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				var me = m.elements;
	
				this.set(
	
					me[ 0 ], me[ 3 ], me[ 6 ],
					me[ 1 ], me[ 4 ], me[ 7 ],
					me[ 2 ], me[ 5 ], me[ 8 ]
	
				);
	
				return this;
	
			},
	
			setFromMatrix4: function( m ) {
	
				var me = m.elements;
	
				this.set(
	
					me[ 0 ], me[ 4 ], me[  8 ],
					me[ 1 ], me[ 5 ], me[  9 ],
					me[ 2 ], me[ 6 ], me[ 10 ]
	
				);
	
				return this;
	
			},
	
			applyToVector3Array: function () {
	
				var v1;
	
				return function applyToVector3Array( array, offset, length ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = array.length;
	
					for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {
	
						v1.fromArray( array, j );
						v1.applyMatrix3( this );
						v1.toArray( array, j );
	
					}
	
					return array;
	
				};
	
			}(),
	
			applyToBuffer: function () {
	
				var v1;
	
				return function applyToBuffer( buffer, offset, length ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = buffer.length / buffer.itemSize;
	
					for ( var i = 0, j = offset; i < length; i ++, j ++ ) {
	
						v1.x = buffer.getX( j );
						v1.y = buffer.getY( j );
						v1.z = buffer.getZ( j );
	
						v1.applyMatrix3( this );
	
						buffer.setXYZ( j, v1.x, v1.y, v1.z );
	
					}
	
					return buffer;
	
				};
	
			}(),
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
				te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
				te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
	
				return this;
	
			},
	
			determinant: function () {
	
				var te = this.elements;
	
				var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
					d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
					g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
	
				return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
	
			},
	
			getInverse: function ( matrix, throwOnDegenerate ) {
	
				if ( (matrix && matrix.isMatrix4) ) {
	
					console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );
	
				}
	
				var me = matrix.elements,
					te = this.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
					n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
					n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
	
					t11 = n33 * n22 - n32 * n23,
					t12 = n32 * n13 - n33 * n12,
					t13 = n23 * n12 - n22 * n13,
	
					det = n11 * t11 + n21 * t12 + n31 * t13;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
				te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
	
				te[ 3 ] = t12 * detInv;
				te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
				te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
	
				te[ 6 ] = t13 * detInv;
				te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
				te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
	
				return this;
	
			},
	
			transpose: function () {
	
				var tmp, m = this.elements;
	
				tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
				tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
				tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
	
				return this;
	
			},
	
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
						"- just use .toArray instead." );
	
				return this.toArray( array, offset );
	
			},
	
			getNormalMatrix: function ( matrix4 ) {
	
				return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
	
			},
	
			transposeIntoArray: function ( r ) {
	
				var m = this.elements;
	
				r[ 0 ] = m[ 0 ];
				r[ 1 ] = m[ 3 ];
				r[ 2 ] = m[ 6 ];
				r[ 3 ] = m[ 1 ];
				r[ 4 ] = m[ 4 ];
				r[ 5 ] = m[ 7 ];
				r[ 6 ] = m[ 2 ];
				r[ 7 ] = m[ 5 ];
				r[ 8 ] = m[ 8 ];
	
				return this;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				for( var i = 0; i < 9; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
	
				array[ offset + 3 ] = te[ 3 ];
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
	
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
				array[ offset + 8 ]  = te[ 8 ];
	
				return array;
	
			}
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Plane( normal, constant ) {
	
			this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;
	
		}
	
		Plane.prototype = {
	
			constructor: Plane,
	
			set: function ( normal, constant ) {
	
				this.normal.copy( normal );
				this.constant = constant;
	
				return this;
	
			},
	
			setComponents: function ( x, y, z, w ) {
	
				this.normal.set( x, y, z );
				this.constant = w;
	
				return this;
	
			},
	
			setFromNormalAndCoplanarPoint: function ( normal, point ) {
	
				this.normal.copy( normal );
				this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized
	
				return this;
	
			},
	
			setFromCoplanarPoints: function () {
	
				var v1 = new Vector3();
				var v2 = new Vector3();
	
				return function setFromCoplanarPoints( a, b, c ) {
	
					var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
	
					// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
	
					this.setFromNormalAndCoplanarPoint( normal, a );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( plane ) {
	
				this.normal.copy( plane.normal );
				this.constant = plane.constant;
	
				return this;
	
			},
	
			normalize: function () {
	
				// Note: will lead to a divide by zero if the plane is invalid.
	
				var inverseNormalLength = 1.0 / this.normal.length();
				this.normal.multiplyScalar( inverseNormalLength );
				this.constant *= inverseNormalLength;
	
				return this;
	
			},
	
			negate: function () {
	
				this.constant *= - 1;
				this.normal.negate();
	
				return this;
	
			},
	
			distanceToPoint: function ( point ) {
	
				return this.normal.dot( point ) + this.constant;
	
			},
	
			distanceToSphere: function ( sphere ) {
	
				return this.distanceToPoint( sphere.center ) - sphere.radius;
	
			},
	
			projectPoint: function ( point, optionalTarget ) {
	
				return this.orthoPoint( point, optionalTarget ).sub( point ).negate();
	
			},
	
			orthoPoint: function ( point, optionalTarget ) {
	
				var perpendicularMagnitude = this.distanceToPoint( point );
	
				var result = optionalTarget || new Vector3();
				return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );
	
			},
	
			intersectLine: function () {
	
				var v1 = new Vector3();
	
				return function intersectLine( line, optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					var direction = line.delta( v1 );
	
					var denominator = this.normal.dot( direction );
	
					if ( denominator === 0 ) {
	
						// line is coplanar, return origin
						if ( this.distanceToPoint( line.start ) === 0 ) {
	
							return result.copy( line.start );
	
						}
	
						// Unsure if this is the correct method to handle this case.
						return undefined;
	
					}
	
					var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
	
					if ( t < 0 || t > 1 ) {
	
						return undefined;
	
					}
	
					return result.copy( direction ).multiplyScalar( t ).add( line.start );
	
				};
	
			}(),
	
			intersectsLine: function ( line ) {
	
				// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
	
				var startSign = this.distanceToPoint( line.start );
				var endSign = this.distanceToPoint( line.end );
	
				return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsPlane( this );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				return sphere.intersectsPlane( this );
	
			},
	
			coplanarPoint: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.copy( this.normal ).multiplyScalar( - this.constant );
	
			},
	
			applyMatrix4: function () {
	
				var v1 = new Vector3();
				var m1 = new Matrix3();
	
				return function applyMatrix4( matrix, optionalNormalMatrix ) {
	
					var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );
	
					// transform normal based on theory here:
					// http://www.songho.ca/opengl/gl_normaltransform.html
					var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
					var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
	
					// recalculate constant (like in setFromNormalAndCoplanarPoint)
					this.constant = - referencePoint.dot( normal );
	
					return this;
	
				};
	
			}(),
	
			translate: function ( offset ) {
	
				this.constant = this.constant - offset.dot( this.normal );
	
				return this;
	
			},
	
			equals: function ( plane ) {
	
				return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / http://clara.io
		 */
	
		function Frustum( p0, p1, p2, p3, p4, p5 ) {
	
			this.planes = [
	
				( p0 !== undefined ) ? p0 : new Plane(),
				( p1 !== undefined ) ? p1 : new Plane(),
				( p2 !== undefined ) ? p2 : new Plane(),
				( p3 !== undefined ) ? p3 : new Plane(),
				( p4 !== undefined ) ? p4 : new Plane(),
				( p5 !== undefined ) ? p5 : new Plane()
	
			];
	
		}
	
		Frustum.prototype = {
	
			constructor: Frustum,
	
			set: function ( p0, p1, p2, p3, p4, p5 ) {
	
				var planes = this.planes;
	
				planes[ 0 ].copy( p0 );
				planes[ 1 ].copy( p1 );
				planes[ 2 ].copy( p2 );
				planes[ 3 ].copy( p3 );
				planes[ 4 ].copy( p4 );
				planes[ 5 ].copy( p5 );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( frustum ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					planes[ i ].copy( frustum.planes[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromMatrix: function ( m ) {
	
				var planes = this.planes;
				var me = m.elements;
				var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
				var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
				var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
				var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
	
				planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
				planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
				planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
				planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
				planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
	
				return this;
	
			},
	
			intersectsObject: function () {
	
				var sphere = new Sphere();
	
				return function intersectsObject( object ) {
	
					var geometry = object.geometry;
	
					if ( geometry.boundingSphere === null )
						geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere )
						.applyMatrix4( object.matrixWorld );
	
					return this.intersectsSphere( sphere );
	
				};
	
			}(),
	
			intersectsSprite: function () {
	
				var sphere = new Sphere();
	
				return function intersectsSprite( sprite ) {
	
					sphere.center.set( 0, 0, 0 );
					sphere.radius = 0.7071067811865476;
					sphere.applyMatrix4( sprite.matrixWorld );
	
					return this.intersectsSphere( sphere );
	
				};
	
			}(),
	
			intersectsSphere: function ( sphere ) {
	
				var planes = this.planes;
				var center = sphere.center;
				var negRadius = - sphere.radius;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					var distance = planes[ i ].distanceToPoint( center );
	
					if ( distance < negRadius ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			},
	
			intersectsBox: function () {
	
				var p1 = new Vector3(),
					p2 = new Vector3();
	
				return function intersectsBox( box ) {
	
					var planes = this.planes;
	
					for ( var i = 0; i < 6 ; i ++ ) {
	
						var plane = planes[ i ];
	
						p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
						p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
						p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
						p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
						p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
						p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;
	
						var d1 = plane.distanceToPoint( p1 );
						var d2 = plane.distanceToPoint( p2 );
	
						// if both outside plane, no intersection
	
						if ( d1 < 0 && d2 < 0 ) {
	
							return false;
	
						}
	
					}
	
					return true;
	
				};
	
			}(),
	
	
			containsPoint: function ( point ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					if ( planes[ i ].distanceToPoint( point ) < 0 ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {
	
			var _gl = _renderer.context,
			_state = _renderer.state,
			_frustum = new Frustum(),
			_projScreenMatrix = new Matrix4(),
	
			_lightShadows = _lights.shadows,
	
			_shadowMapSize = new Vector2(),
			_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),
	
			_lookTarget = new Vector3(),
			_lightPositionWorld = new Vector3(),
	
			_renderList = [],
	
			_MorphingFlag = 1,
			_SkinningFlag = 2,
	
			_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,
	
			_depthMaterials = new Array( _NumberOfMaterialVariants ),
			_distanceMaterials = new Array( _NumberOfMaterialVariants ),
	
			_materialCache = {};
	
			var cubeDirections = [
				new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
				new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
			];
	
			var cubeUps = [
				new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
				new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
			];
	
			var cube2DViewPorts = [
				new Vector4(), new Vector4(), new Vector4(),
				new Vector4(), new Vector4(), new Vector4()
			];
	
			// init
	
			var depthMaterialTemplate = new MeshDepthMaterial();
			depthMaterialTemplate.depthPacking = RGBADepthPacking;
			depthMaterialTemplate.clipping = true;
	
			var distanceShader = ShaderLib[ "distanceRGBA" ];
			var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );
	
			for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {
	
				var useMorphing = ( i & _MorphingFlag ) !== 0;
				var useSkinning = ( i & _SkinningFlag ) !== 0;
	
				var depthMaterial = depthMaterialTemplate.clone();
				depthMaterial.morphTargets = useMorphing;
				depthMaterial.skinning = useSkinning;
	
				_depthMaterials[ i ] = depthMaterial;
	
				var distanceMaterial = new ShaderMaterial( {
					defines: {
						'USE_SHADOWMAP': ''
					},
					uniforms: distanceUniforms,
					vertexShader: distanceShader.vertexShader,
					fragmentShader: distanceShader.fragmentShader,
					morphTargets: useMorphing,
					skinning: useSkinning,
					clipping: true
				} );
	
				_distanceMaterials[ i ] = distanceMaterial;
	
			}
	
			//
	
			var scope = this;
	
			this.enabled = false;
	
			this.autoUpdate = true;
			this.needsUpdate = false;
	
			this.type = PCFShadowMap;
	
			this.renderReverseSided = true;
			this.renderSingleSided = true;
	
			this.render = function ( scene, camera ) {
	
				if ( scope.enabled === false ) return;
				if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
	
				if ( _lightShadows.length === 0 ) return;
	
				// Set GL state for depth map.
				_state.clearColor( 1, 1, 1, 1 );
				_state.disable( _gl.BLEND );
				_state.setDepthTest( true );
				_state.setScissorTest( false );
	
				// render depth map
	
				var faceCount, isPointLight;
	
				for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {
	
					var light = _lightShadows[ i ];
					var shadow = light.shadow;
	
					if ( shadow === undefined ) {
	
						console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
						continue;
	
					}
	
					var shadowCamera = shadow.camera;
	
					_shadowMapSize.copy( shadow.mapSize );
					_shadowMapSize.min( _maxShadowMapSize );
	
					if ( (light && light.isPointLight) ) {
	
						faceCount = 6;
						isPointLight = true;
	
						var vpWidth = _shadowMapSize.x;
						var vpHeight = _shadowMapSize.y;
	
						// These viewports map a cube-map onto a 2D texture with the
						// following orientation:
						//
						//  xzXZ
						//   y Y
						//
						// X - Positive x direction
						// x - Negative x direction
						// Y - Positive y direction
						// y - Negative y direction
						// Z - Positive z direction
						// z - Negative z direction
	
						// positive X
						cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
						// negative X
						cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
						// positive Z
						cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
						// negative Z
						cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
						// positive Y
						cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
						// negative Y
						cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );
	
						_shadowMapSize.x *= 4.0;
						_shadowMapSize.y *= 2.0;
	
					} else {
	
						faceCount = 1;
						isPointLight = false;
	
					}
	
					if ( shadow.map === null ) {
	
						var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
	
						shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
	
						shadowCamera.updateProjectionMatrix();
	
					}
	
					if ( (shadow && shadow.isSpotLightShadow) ) {
	
						shadow.update( light );
	
					}
	
					var shadowMap = shadow.map;
					var shadowMatrix = shadow.matrix;
	
					_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
					shadowCamera.position.copy( _lightPositionWorld );
	
					_renderer.setRenderTarget( shadowMap );
					_renderer.clear();
	
					// render shadow map for each cube face (if omni-directional) or
					// run a single pass if not
	
					for ( var face = 0; face < faceCount; face ++ ) {
	
						if ( isPointLight ) {
	
							_lookTarget.copy( shadowCamera.position );
							_lookTarget.add( cubeDirections[ face ] );
							shadowCamera.up.copy( cubeUps[ face ] );
							shadowCamera.lookAt( _lookTarget );
	
							var vpDimensions = cube2DViewPorts[ face ];
							_state.viewport( vpDimensions );
	
						} else {
	
							_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
							shadowCamera.lookAt( _lookTarget );
	
						}
	
						shadowCamera.updateMatrixWorld();
						shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );
	
						// compute shadow matrix
	
						shadowMatrix.set(
							0.5, 0.0, 0.0, 0.5,
							0.0, 0.5, 0.0, 0.5,
							0.0, 0.0, 0.5, 0.5,
							0.0, 0.0, 0.0, 1.0
						);
	
						shadowMatrix.multiply( shadowCamera.projectionMatrix );
						shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
	
						// update camera matrices and frustum
	
						_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
						_frustum.setFromMatrix( _projScreenMatrix );
	
						// set object matrices & frustum culling
	
						_renderList.length = 0;
	
						projectObject( scene, camera, shadowCamera );
	
						// render shadow map
						// render regular objects
	
						for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {
	
							var object = _renderList[ j ];
							var geometry = _objects.update( object );
							var material = object.material;
	
							if ( (material && material.isMultiMaterial) ) {
	
								var groups = geometry.groups;
								var materials = material.materials;
	
								for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
	
									var group = groups[ k ];
									var groupMaterial = materials[ group.materialIndex ];
	
									if ( groupMaterial.visible === true ) {
	
										var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
										_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
	
									}
	
								}
	
							} else {
	
								var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
	
							}
	
						}
	
					}
	
				}
	
				// Restore GL state.
				var clearColor = _renderer.getClearColor(),
				clearAlpha = _renderer.getClearAlpha();
				_renderer.setClearColor( clearColor, clearAlpha );
	
				scope.needsUpdate = false;
	
			};
	
			function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {
	
				var geometry = object.geometry;
	
				var result = null;
	
				var materialVariants = _depthMaterials;
				var customMaterial = object.customDepthMaterial;
	
				if ( isPointLight ) {
	
					materialVariants = _distanceMaterials;
					customMaterial = object.customDistanceMaterial;
	
				}
	
				if ( ! customMaterial ) {
	
					var useMorphing = false;
	
					if ( material.morphTargets ) {
	
						if ( (geometry && geometry.isBufferGeometry) ) {
	
							useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
	
						} else if ( (geometry && geometry.isGeometry) ) {
	
							useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
	
						}
	
					}
	
					var useSkinning = object.isSkinnedMesh && material.skinning;
	
					var variantIndex = 0;
	
					if ( useMorphing ) variantIndex |= _MorphingFlag;
					if ( useSkinning ) variantIndex |= _SkinningFlag;
	
					result = materialVariants[ variantIndex ];
	
				} else {
	
					result = customMaterial;
	
				}
	
				if ( _renderer.localClippingEnabled &&
					 material.clipShadows === true &&
						material.clippingPlanes.length !== 0 ) {
	
					// in this case we need a unique material instance reflecting the
					// appropriate state
	
					var keyA = result.uuid, keyB = material.uuid;
	
					var materialsForVariant = _materialCache[ keyA ];
	
					if ( materialsForVariant === undefined ) {
	
						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;
	
					}
	
					var cachedMaterial = materialsForVariant[ keyB ];
	
					if ( cachedMaterial === undefined ) {
	
						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;
	
					}
	
					result = cachedMaterial;
	
				}
	
				result.visible = material.visible;
				result.wireframe = material.wireframe;
	
				var side = material.side;
	
				if ( scope.renderSingleSided && side == DoubleSide ) {
	
					side = FrontSide;
	
				}
	
				if ( scope.renderReverseSided ) {
	
					if ( side === FrontSide ) side = BackSide;
					else if ( side === BackSide ) side = FrontSide;
	
				}
	
				result.side = side;
	
				result.clipShadows = material.clipShadows;
				result.clippingPlanes = material.clippingPlanes;
	
				result.wireframeLinewidth = material.wireframeLinewidth;
				result.linewidth = material.linewidth;
	
				if ( isPointLight && result.uniforms.lightPos !== undefined ) {
	
					result.uniforms.lightPos.value.copy( lightPositionWorld );
	
				}
	
				return result;
	
			}
	
			function projectObject( object, camera, shadowCamera ) {
	
				if ( object.visible === false ) return;
	
				var visible = ( object.layers.mask & camera.layers.mask ) !== 0;
	
				if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
	
					if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {
	
						var material = object.material;
	
						if ( material.visible === true ) {
	
							object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
							_renderList.push( object );
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					projectObject( children[ i ], camera, shadowCamera );
	
				}
	
			}
	
		}
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Ray( origin, direction ) {
	
			this.origin = ( origin !== undefined ) ? origin : new Vector3();
			this.direction = ( direction !== undefined ) ? direction : new Vector3();
	
		}
	
		Ray.prototype = {
	
			constructor: Ray,
	
			set: function ( origin, direction ) {
	
				this.origin.copy( origin );
				this.direction.copy( direction );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( ray ) {
	
				this.origin.copy( ray.origin );
				this.direction.copy( ray.direction );
	
				return this;
	
			},
	
			at: function ( t, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );
	
			},
	
			lookAt: function ( v ) {
	
				this.direction.copy( v ).sub( this.origin ).normalize();
	
				return this;
	
			},
	
			recast: function () {
	
				var v1 = new Vector3();
	
				return function recast( t ) {
	
					this.origin.copy( this.at( t, v1 ) );
	
					return this;
	
				};
	
			}(),
	
			closestPointToPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				result.subVectors( point, this.origin );
				var directionDistance = result.dot( this.direction );
	
				if ( directionDistance < 0 ) {
	
					return result.copy( this.origin );
	
				}
	
				return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return Math.sqrt( this.distanceSqToPoint( point ) );
	
			},
	
			distanceSqToPoint: function () {
	
				var v1 = new Vector3();
	
				return function distanceSqToPoint( point ) {
	
					var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
	
					// point behind the ray
	
					if ( directionDistance < 0 ) {
	
						return this.origin.distanceToSquared( point );
	
					}
	
					v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
					return v1.distanceToSquared( point );
	
				};
	
			}(),
	
			distanceSqToSegment: function () {
	
				var segCenter = new Vector3();
				var segDir = new Vector3();
				var diff = new Vector3();
	
				return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
	
					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
					// It returns the min distance between the ray and the segment
					// defined by v0 and v1
					// It can also set two optional targets :
					// - The closest point on the ray
					// - The closest point on the segment
	
					segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
					segDir.copy( v1 ).sub( v0 ).normalize();
					diff.copy( this.origin ).sub( segCenter );
	
					var segExtent = v0.distanceTo( v1 ) * 0.5;
					var a01 = - this.direction.dot( segDir );
					var b0 = diff.dot( this.direction );
					var b1 = - diff.dot( segDir );
					var c = diff.lengthSq();
					var det = Math.abs( 1 - a01 * a01 );
					var s0, s1, sqrDist, extDet;
	
					if ( det > 0 ) {
	
						// The ray and segment are not parallel.
	
						s0 = a01 * b1 - b0;
						s1 = a01 * b0 - b1;
						extDet = segExtent * det;
	
						if ( s0 >= 0 ) {
	
							if ( s1 >= - extDet ) {
	
								if ( s1 <= extDet ) {
	
									// region 0
									// Minimum at interior points of ray and segment.
	
									var invDet = 1 / det;
									s0 *= invDet;
									s1 *= invDet;
									sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
	
								} else {
	
									// region 1
	
									s1 = segExtent;
									s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
									sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
								}
	
							} else {
	
								// region 5
	
								s1 = - segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						} else {
	
							if ( s1 <= - extDet ) {
	
								// region 4
	
								s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							} else if ( s1 <= extDet ) {
	
								// region 3
	
								s0 = 0;
								s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = s1 * ( s1 + 2 * b1 ) + c;
	
							} else {
	
								// region 2
	
								s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						}
	
					} else {
	
						// Ray and segment are parallel.
	
						s1 = ( a01 > 0 ) ? - segExtent : segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
					}
	
					if ( optionalPointOnRay ) {
	
						optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
	
					}
	
					if ( optionalPointOnSegment ) {
	
						optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );
	
					}
	
					return sqrDist;
	
				};
	
			}(),
	
			intersectSphere: function () {
	
				var v1 = new Vector3();
	
				return function intersectSphere( sphere, optionalTarget ) {
	
					v1.subVectors( sphere.center, this.origin );
					var tca = v1.dot( this.direction );
					var d2 = v1.dot( v1 ) - tca * tca;
					var radius2 = sphere.radius * sphere.radius;
	
					if ( d2 > radius2 ) return null;
	
					var thc = Math.sqrt( radius2 - d2 );
	
					// t0 = first intersect point - entrance on front of sphere
					var t0 = tca - thc;
	
					// t1 = second intersect point - exit point on back of sphere
					var t1 = tca + thc;
	
					// test to see if both t0 and t1 are behind the ray - if so, return null
					if ( t0 < 0 && t1 < 0 ) return null;
	
					// test to see if t0 is behind the ray:
					// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
					// in order to always return an intersect point that is in front of the ray.
					if ( t0 < 0 ) return this.at( t1, optionalTarget );
	
					// else t0 is in front of the ray, so return the first collision point scaled by t0
					return this.at( t0, optionalTarget );
	
				};
	
			}(),
	
			intersectsSphere: function ( sphere ) {
	
				return this.distanceToPoint( sphere.center ) <= sphere.radius;
	
			},
	
			distanceToPlane: function ( plane ) {
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator === 0 ) {
	
					// line is coplanar, return origin
					if ( plane.distanceToPoint( this.origin ) === 0 ) {
	
						return 0;
	
					}
	
					// Null is preferable to undefined since undefined means.... it is undefined
	
					return null;
	
				}
	
				var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
	
				// Return if the ray never intersects the plane
	
				return t >= 0 ? t :  null;
	
			},
	
			intersectPlane: function ( plane, optionalTarget ) {
	
				var t = this.distanceToPlane( plane );
	
				if ( t === null ) {
	
					return null;
	
				}
	
				return this.at( t, optionalTarget );
	
			},
	
	
	
			intersectsPlane: function ( plane ) {
	
				// check if the ray lies on the plane first
	
				var distToPoint = plane.distanceToPoint( this.origin );
	
				if ( distToPoint === 0 ) {
	
					return true;
	
				}
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator * distToPoint < 0 ) {
	
					return true;
	
				}
	
				// ray origin is behind the plane (and is pointing behind it)
	
				return false;
	
			},
	
			intersectBox: function ( box, optionalTarget ) {
	
				var tmin, tmax, tymin, tymax, tzmin, tzmax;
	
				var invdirx = 1 / this.direction.x,
					invdiry = 1 / this.direction.y,
					invdirz = 1 / this.direction.z;
	
				var origin = this.origin;
	
				if ( invdirx >= 0 ) {
	
					tmin = ( box.min.x - origin.x ) * invdirx;
					tmax = ( box.max.x - origin.x ) * invdirx;
	
				} else {
	
					tmin = ( box.max.x - origin.x ) * invdirx;
					tmax = ( box.min.x - origin.x ) * invdirx;
	
				}
	
				if ( invdiry >= 0 ) {
	
					tymin = ( box.min.y - origin.y ) * invdiry;
					tymax = ( box.max.y - origin.y ) * invdiry;
	
				} else {
	
					tymin = ( box.max.y - origin.y ) * invdiry;
					tymax = ( box.min.y - origin.y ) * invdiry;
	
				}
	
				if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
	
				// These lines also handle the case where tmin or tmax is NaN
				// (result of 0 * Infinity). x !== x returns true if x is NaN
	
				if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
	
				if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
	
				if ( invdirz >= 0 ) {
	
					tzmin = ( box.min.z - origin.z ) * invdirz;
					tzmax = ( box.max.z - origin.z ) * invdirz;
	
				} else {
	
					tzmin = ( box.max.z - origin.z ) * invdirz;
					tzmax = ( box.min.z - origin.z ) * invdirz;
	
				}
	
				if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
	
				if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
	
				if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
	
				//return point closest to the ray (positive side)
	
				if ( tmax < 0 ) return null;
	
				return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );
	
			},
	
			intersectsBox: ( function () {
	
				var v = new Vector3();
	
				return function intersectsBox( box ) {
	
					return this.intersectBox( box, v ) !== null;
	
				};
	
			} )(),
	
			intersectTriangle: function () {
	
				// Compute the offset origin, edges, and normal.
				var diff = new Vector3();
				var edge1 = new Vector3();
				var edge2 = new Vector3();
				var normal = new Vector3();
	
				return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {
	
					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
	
					edge1.subVectors( b, a );
					edge2.subVectors( c, a );
					normal.crossVectors( edge1, edge2 );
	
					// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
					// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
					//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
					//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
					//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
					var DdN = this.direction.dot( normal );
					var sign;
	
					if ( DdN > 0 ) {
	
						if ( backfaceCulling ) return null;
						sign = 1;
	
					} else if ( DdN < 0 ) {
	
						sign = - 1;
						DdN = - DdN;
	
					} else {
	
						return null;
	
					}
	
					diff.subVectors( this.origin, a );
					var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
	
					// b1 < 0, no intersection
					if ( DdQxE2 < 0 ) {
	
						return null;
	
					}
	
					var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
	
					// b2 < 0, no intersection
					if ( DdE1xQ < 0 ) {
	
						return null;
	
					}
	
					// b1+b2 > 1, no intersection
					if ( DdQxE2 + DdE1xQ > DdN ) {
	
						return null;
	
					}
	
					// Line intersects triangle, check if ray does.
					var QdN = - sign * diff.dot( normal );
	
					// t < 0, no intersection
					if ( QdN < 0 ) {
	
						return null;
	
					}
	
					// Ray intersects triangle.
					return this.at( QdN / DdN, optionalTarget );
	
				};
	
			}(),
	
			applyMatrix4: function ( matrix4 ) {
	
				this.direction.add( this.origin ).applyMatrix4( matrix4 );
				this.origin.applyMatrix4( matrix4 );
				this.direction.sub( this.origin );
				this.direction.normalize();
	
				return this;
	
			},
	
			equals: function ( ray ) {
	
				return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		function Euler( x, y, z, order ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || Euler.DefaultOrder;
	
		}
	
		Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
	
		Euler.DefaultOrder = 'XYZ';
	
		Euler.prototype = {
	
			constructor: Euler,
	
			isEuler: true,
	
			get x () {
	
				return this._x;
	
			},
	
			set x ( value ) {
	
				this._x = value;
				this.onChangeCallback();
	
			},
	
			get y () {
	
				return this._y;
	
			},
	
			set y ( value ) {
	
				this._y = value;
				this.onChangeCallback();
	
			},
	
			get z () {
	
				return this._z;
	
			},
	
			set z ( value ) {
	
				this._z = value;
				this.onChangeCallback();
	
			},
	
			get order () {
	
				return this._order;
	
			},
	
			set order ( value ) {
	
				this._order = value;
				this.onChangeCallback();
	
			},
	
			set: function ( x, y, z, order ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._order = order || this._order;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._order );
	
			},
	
			copy: function ( euler ) {
	
				this._x = euler._x;
				this._y = euler._y;
				this._z = euler._z;
				this._order = euler._order;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m, order, update ) {
	
				var clamp = _Math.clamp;
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements;
				var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
				var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
				var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				order = order || this._order;
	
				if ( order === 'XYZ' ) {
	
					this._y = Math.asin( clamp( m13, - 1, 1 ) );
	
					if ( Math.abs( m13 ) < 0.99999 ) {
	
						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );
	
					} else {
	
						this._x = Math.atan2( m32, m22 );
						this._z = 0;
	
					}
	
				} else if ( order === 'YXZ' ) {
	
					this._x = Math.asin( - clamp( m23, - 1, 1 ) );
	
					if ( Math.abs( m23 ) < 0.99999 ) {
	
						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );
	
					} else {
	
						this._y = Math.atan2( - m31, m11 );
						this._z = 0;
	
					}
	
				} else if ( order === 'ZXY' ) {
	
					this._x = Math.asin( clamp( m32, - 1, 1 ) );
	
					if ( Math.abs( m32 ) < 0.99999 ) {
	
						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );
	
					} else {
	
						this._y = 0;
						this._z = Math.atan2( m21, m11 );
	
					}
	
				} else if ( order === 'ZYX' ) {
	
					this._y = Math.asin( - clamp( m31, - 1, 1 ) );
	
					if ( Math.abs( m31 ) < 0.99999 ) {
	
						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );
	
					} else {
	
						this._x = 0;
						this._z = Math.atan2( - m12, m22 );
	
					}
	
				} else if ( order === 'YZX' ) {
	
					this._z = Math.asin( clamp( m21, - 1, 1 ) );
	
					if ( Math.abs( m21 ) < 0.99999 ) {
	
						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );
	
					} else {
	
						this._x = 0;
						this._y = Math.atan2( m13, m33 );
	
					}
	
				} else if ( order === 'XZY' ) {
	
					this._z = Math.asin( - clamp( m12, - 1, 1 ) );
	
					if ( Math.abs( m12 ) < 0.99999 ) {
	
						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );
	
					} else {
	
						this._x = Math.atan2( - m23, m33 );
						this._y = 0;
	
					}
	
				} else {
	
					console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
	
				}
	
				this._order = order;
	
				if ( update !== false ) this.onChangeCallback();
	
				return this;
	
			},
	
			setFromQuaternion: function () {
	
				var matrix;
	
				return function setFromQuaternion( q, order, update ) {
	
					if ( matrix === undefined ) matrix = new Matrix4();
	
					matrix.makeRotationFromQuaternion( q );
	
					return this.setFromRotationMatrix( matrix, order, update );
	
				};
	
			}(),
	
			setFromVector3: function ( v, order ) {
	
				return this.set( v.x, v.y, v.z, order || this._order );
	
			},
	
			reorder: function () {
	
				// WARNING: this discards revolution information -bhouston
	
				var q = new Quaternion();
	
				return function reorder( newOrder ) {
	
					q.setFromEuler( this );
	
					return this.setFromQuaternion( q, newOrder );
	
				};
	
			}(),
	
			equals: function ( euler ) {
	
				return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
	
			},
	
			fromArray: function ( array ) {
	
				this._x = array[ 0 ];
				this._y = array[ 1 ];
				this._z = array[ 2 ];
				if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._order;
	
				return array;
	
			},
	
			toVector3: function ( optionalResult ) {
	
				if ( optionalResult ) {
	
					return optionalResult.set( this._x, this._y, this._z );
	
				} else {
	
					return new Vector3( this._x, this._y, this._z );
	
				}
	
			},
	
			onChange: function ( callback ) {
	
				this.onChangeCallback = callback;
	
				return this;
	
			},
	
			onChangeCallback: function () {}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Layers() {
	
			this.mask = 1;
	
		}
	
		Layers.prototype = {
	
			constructor: Layers,
	
			set: function ( channel ) {
	
				this.mask = 1 << channel;
	
			},
	
			enable: function ( channel ) {
	
				this.mask |= 1 << channel;
	
			},
	
			toggle: function ( channel ) {
	
				this.mask ^= 1 << channel;
	
			},
	
			disable: function ( channel ) {
	
				this.mask &= ~ ( 1 << channel );
	
			},
	
			test: function ( layers ) {
	
				return ( this.mask & layers.mask ) !== 0;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author elephantatwork / www.elephantatwork.ch
		 */
	
		function Object3D() {
	
			Object.defineProperty( this, 'id', { value: Object3DIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Object3D';
	
			this.parent = null;
			this.children = [];
	
			this.up = Object3D.DefaultUp.clone();
	
			var position = new Vector3();
			var rotation = new Euler();
			var quaternion = new Quaternion();
			var scale = new Vector3( 1, 1, 1 );
	
			function onRotationChange() {
	
				quaternion.setFromEuler( rotation, false );
	
			}
	
			function onQuaternionChange() {
	
				rotation.setFromQuaternion( quaternion, undefined, false );
	
			}
	
			rotation.onChange( onRotationChange );
			quaternion.onChange( onQuaternionChange );
	
			Object.defineProperties( this, {
				position: {
					enumerable: true,
					value: position
				},
				rotation: {
					enumerable: true,
					value: rotation
				},
				quaternion: {
					enumerable: true,
					value: quaternion
				},
				scale: {
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );
	
			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();
	
			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;
	
			this.layers = new Layers();
			this.visible = true;
	
			this.castShadow = false;
			this.receiveShadow = false;
	
			this.frustumCulled = true;
			this.renderOrder = 0;
	
			this.userData = {};
	
			this.onBeforeRender = function(){}; 
			this.onAfterRender = function(){};
	
		}
	
		Object3D.DefaultUp = new Vector3( 0, 1, 0 );
		Object3D.DefaultMatrixAutoUpdate = true;
	
		Object.assign( Object3D.prototype, EventDispatcher.prototype, {
	
			isObject3D: true,
	
			applyMatrix: function ( matrix ) {
	
				this.matrix.multiplyMatrices( matrix, this.matrix );
	
				this.matrix.decompose( this.position, this.quaternion, this.scale );
	
			},
	
			setRotationFromAxisAngle: function ( axis, angle ) {
	
				// assumes axis is normalized
	
				this.quaternion.setFromAxisAngle( axis, angle );
	
			},
	
			setRotationFromEuler: function ( euler ) {
	
				this.quaternion.setFromEuler( euler, true );
	
			},
	
			setRotationFromMatrix: function ( m ) {
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				this.quaternion.setFromRotationMatrix( m );
	
			},
	
			setRotationFromQuaternion: function ( q ) {
	
				// assumes q is normalized
	
				this.quaternion.copy( q );
	
			},
	
			rotateOnAxis: function () {
	
				// rotate object on axis in object space
				// axis is assumed to be normalized
	
				var q1 = new Quaternion();
	
				return function rotateOnAxis( axis, angle ) {
	
					q1.setFromAxisAngle( axis, angle );
	
					this.quaternion.multiply( q1 );
	
					return this;
	
				};
	
			}(),
	
			rotateX: function () {
	
				var v1 = new Vector3( 1, 0, 0 );
	
				return function rotateX( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			rotateY: function () {
	
				var v1 = new Vector3( 0, 1, 0 );
	
				return function rotateY( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			rotateZ: function () {
	
				var v1 = new Vector3( 0, 0, 1 );
	
				return function rotateZ( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			translateOnAxis: function () {
	
				// translate object by distance along axis in object space
				// axis is assumed to be normalized
	
				var v1 = new Vector3();
	
				return function translateOnAxis( axis, distance ) {
	
					v1.copy( axis ).applyQuaternion( this.quaternion );
	
					this.position.add( v1.multiplyScalar( distance ) );
	
					return this;
	
				};
	
			}(),
	
			translateX: function () {
	
				var v1 = new Vector3( 1, 0, 0 );
	
				return function translateX( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			translateY: function () {
	
				var v1 = new Vector3( 0, 1, 0 );
	
				return function translateY( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			translateZ: function () {
	
				var v1 = new Vector3( 0, 0, 1 );
	
				return function translateZ( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			localToWorld: function ( vector ) {
	
				return vector.applyMatrix4( this.matrixWorld );
	
			},
	
			worldToLocal: function () {
	
				var m1 = new Matrix4();
	
				return function worldToLocal( vector ) {
	
					return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
	
				};
	
			}(),
	
			lookAt: function () {
	
				// This routine does not support objects with rotated and/or translated parent(s)
	
				var m1 = new Matrix4();
	
				return function lookAt( vector ) {
	
					m1.lookAt( vector, this.position, this.up );
	
					this.quaternion.setFromRotationMatrix( m1 );
	
				};
	
			}(),
	
			add: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.add( arguments[ i ] );
	
					}
	
					return this;
	
				}
	
				if ( object === this ) {
	
					console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
					return this;
	
				}
	
				if ( (object && object.isObject3D) ) {
	
					if ( object.parent !== null ) {
	
						object.parent.remove( object );
	
					}
	
					object.parent = this;
					object.dispatchEvent( { type: 'added' } );
	
					this.children.push( object );
	
				} else {
	
					console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
	
				}
	
				return this;
	
			},
	
			remove: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.remove( arguments[ i ] );
	
					}
	
				}
	
				var index = this.children.indexOf( object );
	
				if ( index !== - 1 ) {
	
					object.parent = null;
	
					object.dispatchEvent( { type: 'removed' } );
	
					this.children.splice( index, 1 );
	
				}
	
			},
	
			getObjectById: function ( id ) {
	
				return this.getObjectByProperty( 'id', id );
	
			},
	
			getObjectByName: function ( name ) {
	
				return this.getObjectByProperty( 'name', name );
	
			},
	
			getObjectByProperty: function ( name, value ) {
	
				if ( this[ name ] === value ) return this;
	
				for ( var i = 0, l = this.children.length; i < l; i ++ ) {
	
					var child = this.children[ i ];
					var object = child.getObjectByProperty( name, value );
	
					if ( object !== undefined ) {
	
						return object;
	
					}
	
				}
	
				return undefined;
	
			},
	
			getWorldPosition: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				this.updateMatrixWorld( true );
	
				return result.setFromMatrixPosition( this.matrixWorld );
	
			},
	
			getWorldQuaternion: function () {
	
				var position = new Vector3();
				var scale = new Vector3();
	
				return function getWorldQuaternion( optionalTarget ) {
	
					var result = optionalTarget || new Quaternion();
	
					this.updateMatrixWorld( true );
	
					this.matrixWorld.decompose( position, result, scale );
	
					return result;
	
				};
	
			}(),
	
			getWorldRotation: function () {
	
				var quaternion = new Quaternion();
	
				return function getWorldRotation( optionalTarget ) {
	
					var result = optionalTarget || new Euler();
	
					this.getWorldQuaternion( quaternion );
	
					return result.setFromQuaternion( quaternion, this.rotation.order, false );
	
				};
	
			}(),
	
			getWorldScale: function () {
	
				var position = new Vector3();
				var quaternion = new Quaternion();
	
				return function getWorldScale( optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					this.updateMatrixWorld( true );
	
					this.matrixWorld.decompose( position, quaternion, result );
	
					return result;
	
				};
	
			}(),
	
			getWorldDirection: function () {
	
				var quaternion = new Quaternion();
	
				return function getWorldDirection( optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					this.getWorldQuaternion( quaternion );
	
					return result.set( 0, 0, 1 ).applyQuaternion( quaternion );
	
				};
	
			}(),
	
			raycast: function () {},
	
			traverse: function ( callback ) {
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverse( callback );
	
				}
	
			},
	
			traverseVisible: function ( callback ) {
	
				if ( this.visible === false ) return;
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverseVisible( callback );
	
				}
	
			},
	
			traverseAncestors: function ( callback ) {
	
				var parent = this.parent;
	
				if ( parent !== null ) {
	
					callback( parent );
	
					parent.traverseAncestors( callback );
	
				}
	
			},
	
			updateMatrix: function () {
	
				this.matrix.compose( this.position, this.quaternion, this.scale );
	
				this.matrixWorldNeedsUpdate = true;
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				if ( this.matrixAutoUpdate === true ) this.updateMatrix();
	
				if ( this.matrixWorldNeedsUpdate === true || force === true ) {
	
					if ( this.parent === null ) {
	
						this.matrixWorld.copy( this.matrix );
	
					} else {
	
						this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
	
					}
	
					this.matrixWorldNeedsUpdate = false;
	
					force = true;
	
				}
	
				// update children
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].updateMatrixWorld( force );
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				// meta is '' when called from JSON.stringify
				var isRootObject = ( meta === undefined || meta === '' );
	
				var output = {};
	
				// meta is a hash used to collect geometries, materials.
				// not providing it implies that this is the root object
				// being serialized.
				if ( isRootObject ) {
	
					// initialize meta obj
					meta = {
						geometries: {},
						materials: {},
						textures: {},
						images: {}
					};
	
					output.metadata = {
						version: 4.4,
						type: 'Object',
						generator: 'Object3D.toJSON'
					};
	
				}
	
				// standard Object3D serialization
	
				var object = {};
	
				object.uuid = this.uuid;
				object.type = this.type;
	
				if ( this.name !== '' ) object.name = this.name;
				if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
				if ( this.castShadow === true ) object.castShadow = true;
				if ( this.receiveShadow === true ) object.receiveShadow = true;
				if ( this.visible === false ) object.visible = false;
	
				object.matrix = this.matrix.toArray();
	
				//
	
				if ( this.geometry !== undefined ) {
	
					if ( meta.geometries[ this.geometry.uuid ] === undefined ) {
	
						meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );
	
					}
	
					object.geometry = this.geometry.uuid;
	
				}
	
				if ( this.material !== undefined ) {
	
					if ( meta.materials[ this.material.uuid ] === undefined ) {
	
						meta.materials[ this.material.uuid ] = this.material.toJSON( meta );
	
					}
	
					object.material = this.material.uuid;
	
				}
	
				//
	
				if ( this.children.length > 0 ) {
	
					object.children = [];
	
					for ( var i = 0; i < this.children.length; i ++ ) {
	
						object.children.push( this.children[ i ].toJSON( meta ).object );
	
					}
	
				}
	
				if ( isRootObject ) {
	
					var geometries = extractFromCache( meta.geometries );
					var materials = extractFromCache( meta.materials );
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
	
					if ( geometries.length > 0 ) output.geometries = geometries;
					if ( materials.length > 0 ) output.materials = materials;
					if ( textures.length > 0 ) output.textures = textures;
					if ( images.length > 0 ) output.images = images;
	
				}
	
				output.object = object;
	
				return output;
	
				// extract data from the cache hash
				// remove metadata on each item
				// and return as array
				function extractFromCache( cache ) {
	
					var values = [];
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
					return values;
	
				}
	
			},
	
			clone: function ( recursive ) {
	
				return new this.constructor().copy( this, recursive );
	
			},
	
			copy: function ( source, recursive ) {
	
				if ( recursive === undefined ) recursive = true;
	
				this.name = source.name;
	
				this.up.copy( source.up );
	
				this.position.copy( source.position );
				this.quaternion.copy( source.quaternion );
				this.scale.copy( source.scale );
	
				this.matrix.copy( source.matrix );
				this.matrixWorld.copy( source.matrixWorld );
	
				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
	
				this.visible = source.visible;
	
				this.castShadow = source.castShadow;
				this.receiveShadow = source.receiveShadow;
	
				this.frustumCulled = source.frustumCulled;
				this.renderOrder = source.renderOrder;
	
				this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
				if ( recursive === true ) {
	
					for ( var i = 0; i < source.children.length; i ++ ) {
	
						var child = source.children[ i ];
						this.add( child.clone() );
	
					}
	
				}
	
				return this;
	
			}
	
		} );
	
		var count$2 = 0;
		function Object3DIdCount() { return count$2++; }
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Line3( start, end ) {
	
			this.start = ( start !== undefined ) ? start : new Vector3();
			this.end = ( end !== undefined ) ? end : new Vector3();
	
		}
	
		Line3.prototype = {
	
			constructor: Line3,
	
			set: function ( start, end ) {
	
				this.start.copy( start );
				this.end.copy( end );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( line ) {
	
				this.start.copy( line.start );
				this.end.copy( line.end );
	
				return this;
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
	
			},
	
			delta: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.subVectors( this.end, this.start );
	
			},
	
			distanceSq: function () {
	
				return this.start.distanceToSquared( this.end );
	
			},
	
			distance: function () {
	
				return this.start.distanceTo( this.end );
	
			},
	
			at: function ( t, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return this.delta( result ).multiplyScalar( t ).add( this.start );
	
			},
	
			closestPointToPointParameter: function () {
	
				var startP = new Vector3();
				var startEnd = new Vector3();
	
				return function closestPointToPointParameter( point, clampToLine ) {
	
					startP.subVectors( point, this.start );
					startEnd.subVectors( this.end, this.start );
	
					var startEnd2 = startEnd.dot( startEnd );
					var startEnd_startP = startEnd.dot( startP );
	
					var t = startEnd_startP / startEnd2;
	
					if ( clampToLine ) {
	
						t = _Math.clamp( t, 0, 1 );
	
					}
	
					return t;
	
				};
	
			}(),
	
			closestPointToPoint: function ( point, clampToLine, optionalTarget ) {
	
				var t = this.closestPointToPointParameter( point, clampToLine );
	
				var result = optionalTarget || new Vector3();
	
				return this.delta( result ).multiplyScalar( t ).add( this.start );
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.start.applyMatrix4( matrix );
				this.end.applyMatrix4( matrix );
	
				return this;
	
			},
	
			equals: function ( line ) {
	
				return line.start.equals( this.start ) && line.end.equals( this.end );
	
			}
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Triangle( a, b, c ) {
	
			this.a = ( a !== undefined ) ? a : new Vector3();
			this.b = ( b !== undefined ) ? b : new Vector3();
			this.c = ( c !== undefined ) ? c : new Vector3();
	
		}
	
		Triangle.normal = function () {
	
			var v0 = new Vector3();
	
			return function normal( a, b, c, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				result.subVectors( c, b );
				v0.subVectors( a, b );
				result.cross( v0 );
	
				var resultLengthSq = result.lengthSq();
				if ( resultLengthSq > 0 ) {
	
					return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );
	
				}
	
				return result.set( 0, 0, 0 );
	
			};
	
		}();
	
		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		Triangle.barycoordFromPoint = function () {
	
			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();
	
			return function barycoordFromPoint( point, a, b, c, optionalTarget ) {
	
				v0.subVectors( c, a );
				v1.subVectors( b, a );
				v2.subVectors( point, a );
	
				var dot00 = v0.dot( v0 );
				var dot01 = v0.dot( v1 );
				var dot02 = v0.dot( v2 );
				var dot11 = v1.dot( v1 );
				var dot12 = v1.dot( v2 );
	
				var denom = ( dot00 * dot11 - dot01 * dot01 );
	
				var result = optionalTarget || new Vector3();
	
				// collinear or singular triangle
				if ( denom === 0 ) {
	
					// arbitrary location outside of triangle?
					// not sure if this is the best idea, maybe should be returning undefined
					return result.set( - 2, - 1, - 1 );
	
				}
	
				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
	
				// barycentric coordinates must always sum to 1
				return result.set( 1 - u - v, v, u );
	
			};
	
		}();
	
		Triangle.containsPoint = function () {
	
			var v1 = new Vector3();
	
			return function containsPoint( point, a, b, c ) {
	
				var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );
	
				return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );
	
			};
	
		}();
	
		Triangle.prototype = {
	
			constructor: Triangle,
	
			set: function ( a, b, c ) {
	
				this.a.copy( a );
				this.b.copy( b );
				this.c.copy( c );
	
				return this;
	
			},
	
			setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
	
				this.a.copy( points[ i0 ] );
				this.b.copy( points[ i1 ] );
				this.c.copy( points[ i2 ] );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( triangle ) {
	
				this.a.copy( triangle.a );
				this.b.copy( triangle.b );
				this.c.copy( triangle.c );
	
				return this;
	
			},
	
			area: function () {
	
				var v0 = new Vector3();
				var v1 = new Vector3();
	
				return function area() {
	
					v0.subVectors( this.c, this.b );
					v1.subVectors( this.a, this.b );
	
					return v0.cross( v1 ).length() * 0.5;
	
				};
	
			}(),
	
			midpoint: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
	
			},
	
			normal: function ( optionalTarget ) {
	
				return Triangle.normal( this.a, this.b, this.c, optionalTarget );
	
			},
	
			plane: function ( optionalTarget ) {
	
				var result = optionalTarget || new Plane();
	
				return result.setFromCoplanarPoints( this.a, this.b, this.c );
	
			},
	
			barycoordFromPoint: function ( point, optionalTarget ) {
	
				return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );
	
			},
	
			containsPoint: function ( point ) {
	
				return Triangle.containsPoint( point, this.a, this.b, this.c );
	
			},
	
			closestPointToPoint: function () {
	
				var plane, edgeList, projectedPoint, closestPoint;
	
				return function closestPointToPoint( point, optionalTarget ) {
	
					if ( plane === undefined ) {
	
						plane = new Plane();
						edgeList = [ new Line3(), new Line3(), new Line3() ];
						projectedPoint = new Vector3();
						closestPoint = new Vector3();
	
					}
	
					var result = optionalTarget || new Vector3();
					var minDistance = Infinity;
	
					// project the point onto the plane of the triangle
	
					plane.setFromCoplanarPoints( this.a, this.b, this.c );
					plane.projectPoint( point, projectedPoint );
	
					// check if the projection lies within the triangle
	
					if( this.containsPoint( projectedPoint ) === true ) {
	
						// if so, this is the closest point
	
						result.copy( projectedPoint );
	
					} else {
	
						// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices
	
						edgeList[ 0 ].set( this.a, this.b );
						edgeList[ 1 ].set( this.b, this.c );
						edgeList[ 2 ].set( this.c, this.a );
	
						for( var i = 0; i < edgeList.length; i ++ ) {
	
							edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );
	
							var distance = projectedPoint.distanceToSquared( closestPoint );
	
							if( distance < minDistance ) {
	
								minDistance = distance;
	
								result.copy( closestPoint );
	
							}
	
						}
	
					}
	
					return result;
	
				};
	
			}(),
	
			equals: function ( triangle ) {
	
				return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Face3( a, b, c, normal, color, materialIndex ) {
	
			this.a = a;
			this.b = b;
			this.c = c;
	
			this.normal = (normal && normal.isVector3) ? normal : new Vector3();
			this.vertexNormals = Array.isArray( normal ) ? normal : [];
	
			this.color = (color && color.isColor) ? color : new Color();
			this.vertexColors = Array.isArray( color ) ? color : [];
	
			this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
	
		}
	
		Face3.prototype = {
	
			constructor: Face3,
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.a = source.a;
				this.b = source.b;
				this.c = source.c;
	
				this.normal.copy( source.normal );
				this.color.copy( source.color );
	
				this.materialIndex = source.materialIndex;
	
				for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
	
					this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
	
				}
	
				for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
	
					this.vertexColors[ i ] = source.vertexColors[ i ].clone();
	
				}
	
				return this;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  shading: THREE.SmoothShading,
		 *  depthTest: <bool>,
		 *  depthWrite: <bool>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>
		 * }
		 */
	
		function MeshBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshBasicMaterial';
	
			this.color = new Color( 0xffffff ); // emissive
	
			this.map = null;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		MeshBasicMaterial.prototype = Object.create( Material.prototype );
		MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
	
		MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
	
		MeshBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferAttribute( array, itemSize, normalized ) {
	
			if ( Array.isArray( array ) ) {
	
				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
			}
	
			this.uuid = _Math.generateUUID();
	
			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;
	
			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.version = 0;
	
		}
	
		BufferAttribute.prototype = {
	
			constructor: BufferAttribute,
	
			isBufferAttribute: true,
	
			set needsUpdate( value ) {
	
				if ( value === true ) this.version ++;
	
			},
	
			setArray: function ( array ) {
	
				if ( Array.isArray( array ) ) {
	
					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
				}
	
				this.count = array !== undefined ? array.length / this.itemSize : 0;
				this.array = array;
	
			},
	
			setDynamic: function ( value ) {
	
				this.dynamic = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.array = new source.array.constructor( source.array );
				this.itemSize = source.itemSize;
				this.count = source.count;
				this.normalized = source.normalized;
	
				this.dynamic = source.dynamic;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.itemSize;
				index2 *= attribute.itemSize;
	
				for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			copyArray: function ( array ) {
	
				this.array.set( array );
	
				return this;
	
			},
	
			copyColorsArray: function ( colors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = colors.length; i < l; i ++ ) {
	
					var color = colors[ i ];
	
					if ( color === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
						color = new Color();
	
					}
	
					array[ offset ++ ] = color.r;
					array[ offset ++ ] = color.g;
					array[ offset ++ ] = color.b;
	
				}
	
				return this;
	
			},
	
			copyIndicesArray: function ( indices ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
					var index = indices[ i ];
	
					array[ offset ++ ] = index.a;
					array[ offset ++ ] = index.b;
					array[ offset ++ ] = index.c;
	
				}
	
				return this;
	
			},
	
			copyVector2sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
						vector = new Vector2();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
	
				}
	
				return this;
	
			},
	
			copyVector3sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
						vector = new Vector3();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
	
				}
	
				return this;
	
			},
	
			copyVector4sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
						vector = new Vector4();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
					array[ offset ++ ] = vector.w;
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.array[ index * this.itemSize ];
	
			},
	
			setX: function ( index, x ) {
	
				this.array[ index * this.itemSize ] = x;
	
				return this;
	
			},
	
			getY: function ( index ) {
	
				return this.array[ index * this.itemSize + 1 ];
	
			},
	
			setY: function ( index, y ) {
	
				this.array[ index * this.itemSize + 1 ] = y;
	
				return this;
	
			},
	
			getZ: function ( index ) {
	
				return this.array[ index * this.itemSize + 2 ];
	
			},
	
			setZ: function ( index, z ) {
	
				this.array[ index * this.itemSize + 2 ] = z;
	
				return this;
	
			},
	
			getW: function ( index ) {
	
				return this.array[ index * this.itemSize + 3 ];
	
			},
	
			setW: function ( index, w ) {
	
				this.array[ index * this.itemSize + 3 ] = w;
	
				return this;
	
			},
	
			setXY: function ( index, x, y ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
				this.array[ index + 3 ] = w;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		};
	
		//
	
		function Int8Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Int8Array( array ), itemSize );
	
		}
	
		function Uint8Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Uint8Array( array ), itemSize );
	
		}
	
		function Uint8ClampedAttribute( array, itemSize ) {
	
			return new BufferAttribute( new Uint8ClampedArray( array ), itemSize );
	
		}
	
		function Int16Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Int16Array( array ), itemSize );
	
		}
	
		function Uint16Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Uint16Array( array ), itemSize );
	
		}
	
		function Int32Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Int32Array( array ), itemSize );
	
		}
	
		function Uint32Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Uint32Array( array ), itemSize );
	
		}
	
		function Float32Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Float32Array( array ), itemSize );
	
		}
	
		function Float64Attribute( array, itemSize ) {
	
			return new BufferAttribute( new Float64Array( array ), itemSize );
	
		}
	
		// Deprecated
	
		function DynamicBufferAttribute( array, itemSize ) {
	
			console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
			return new BufferAttribute( array, itemSize ).setDynamic( true );
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author bhouston / http://clara.io
		 */
	
		function Geometry() {
	
			Object.defineProperty( this, 'id', { value: GeometryIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Geometry';
	
			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];
	
			this.morphTargets = [];
			this.morphNormals = [];
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.elementsNeedUpdate = false;
			this.verticesNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.lineDistancesNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Object.assign( Geometry.prototype, EventDispatcher.prototype, {
	
			isGeometry: true,
	
			applyMatrix: function ( matrix ) {
	
				var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertex.applyMatrix4( matrix );
	
				}
	
				for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
	
					var face = this.faces[ i ];
					face.normal.applyMatrix3( normalMatrix ).normalize();
	
					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
						face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
	
					}
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				this.verticesNeedUpdate = true;
				this.normalsNeedUpdate = true;
	
				return this;
	
			},
	
			rotateX: function () {
	
				// rotate geometry around world x-axis
	
				var m1;
	
				return function rotateX( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationX( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateY: function () {
	
				// rotate geometry around world y-axis
	
				var m1;
	
				return function rotateY( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationY( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateZ: function () {
	
				// rotate geometry around world z-axis
	
				var m1;
	
				return function rotateZ( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationZ( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			translate: function () {
	
				// translate geometry
	
				var m1;
	
				return function translate( x, y, z ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeTranslation( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			scale: function () {
	
				// scale geometry
	
				var m1;
	
				return function scale( x, y, z ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeScale( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			lookAt: function () {
	
				var obj;
	
				return function lookAt( vector ) {
	
					if ( obj === undefined ) obj = new Object3D();
	
					obj.lookAt( vector );
	
					obj.updateMatrix();
	
					this.applyMatrix( obj.matrix );
	
				};
	
			}(),
	
			fromBufferGeometry: function ( geometry ) {
	
				var scope = this;
	
				var indices = geometry.index !== null ? geometry.index.array : undefined;
				var attributes = geometry.attributes;
	
				var positions = attributes.position.array;
				var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
				var colors = attributes.color !== undefined ? attributes.color.array : undefined;
				var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
				var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
	
				if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
	
				var tempNormals = [];
				var tempUVs = [];
				var tempUVs2 = [];
	
				for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {
	
					scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );
	
					if ( normals !== undefined ) {
	
						tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );
	
					}
	
					if ( colors !== undefined ) {
	
						scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );
	
					}
	
					if ( uvs !== undefined ) {
	
						tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );
	
					}
	
					if ( uvs2 !== undefined ) {
	
						tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );
	
					}
	
				}
	
				function addFace( a, b, c, materialIndex ) {
	
					var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
					var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];
	
					var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
	
					scope.faces.push( face );
	
					if ( uvs !== undefined ) {
	
						scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );
	
					}
	
					if ( uvs2 !== undefined ) {
	
						scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );
	
					}
	
				}
	
				if ( indices !== undefined ) {
	
					var groups = geometry.groups;
	
					if ( groups.length > 0 ) {
	
						for ( var i = 0; i < groups.length; i ++ ) {
	
							var group = groups[ i ];
	
							var start = group.start;
							var count = group.count;
	
							for ( var j = start, jl = start + count; j < jl; j += 3 ) {
	
								addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );
	
							}
	
						}
	
					} else {
	
						for ( var i = 0; i < indices.length; i += 3 ) {
	
							addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
	
						}
	
					}
	
				} else {
	
					for ( var i = 0; i < positions.length / 3; i += 3 ) {
	
						addFace( i, i + 1, i + 2 );
	
					}
	
				}
	
				this.computeFaceNormals();
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				return this;
	
			},
	
			center: function () {
	
				this.computeBoundingBox();
	
				var offset = this.boundingBox.getCenter().negate();
	
				this.translate( offset.x, offset.y, offset.z );
	
				return offset;
	
			},
	
			normalize: function () {
	
				this.computeBoundingSphere();
	
				var center = this.boundingSphere.center;
				var radius = this.boundingSphere.radius;
	
				var s = radius === 0 ? 1 : 1.0 / radius;
	
				var matrix = new Matrix4();
				matrix.set(
					s, 0, 0, - s * center.x,
					0, s, 0, - s * center.y,
					0, 0, s, - s * center.z,
					0, 0, 0, 1
				);
	
				this.applyMatrix( matrix );
	
				return this;
	
			},
	
			computeFaceNormals: function () {
	
				var cb = new Vector3(), ab = new Vector3();
	
				for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					var face = this.faces[ f ];
	
					var vA = this.vertices[ face.a ];
					var vB = this.vertices[ face.b ];
					var vC = this.vertices[ face.c ];
	
					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );
	
					cb.normalize();
	
					face.normal.copy( cb );
	
				}
	
			},
	
			computeVertexNormals: function ( areaWeighted ) {
	
				if ( areaWeighted === undefined ) areaWeighted = true;
	
				var v, vl, f, fl, face, vertices;
	
				vertices = new Array( this.vertices.length );
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ] = new Vector3();
	
				}
	
				if ( areaWeighted ) {
	
					// vertex normals weighted by triangle areas
					// http://www.iquilezles.org/www/articles/normals/normals.htm
	
					var vA, vB, vC;
					var cb = new Vector3(), ab = new Vector3();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vA = this.vertices[ face.a ];
						vB = this.vertices[ face.b ];
						vC = this.vertices[ face.c ];
	
						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );
	
						vertices[ face.a ].add( cb );
						vertices[ face.b ].add( cb );
						vertices[ face.c ].add( cb );
	
					}
	
				} else {
	
					this.computeFaceNormals();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vertices[ face.a ].add( face.normal );
						vertices[ face.b ].add( face.normal );
						vertices[ face.c ].add( face.normal );
	
					}
	
				}
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ].normalize();
	
				}
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( vertices[ face.a ] );
						vertexNormals[ 1 ].copy( vertices[ face.b ] );
						vertexNormals[ 2 ].copy( vertices[ face.c ] );
	
					} else {
	
						vertexNormals[ 0 ] = vertices[ face.a ].clone();
						vertexNormals[ 1 ] = vertices[ face.b ].clone();
						vertexNormals[ 2 ] = vertices[ face.c ].clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeFlatVertexNormals: function () {
	
				var f, fl, face;
	
				this.computeFaceNormals();
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( face.normal );
						vertexNormals[ 1 ].copy( face.normal );
						vertexNormals[ 2 ].copy( face.normal );
	
					} else {
	
						vertexNormals[ 0 ] = face.normal.clone();
						vertexNormals[ 1 ] = face.normal.clone();
						vertexNormals[ 2 ] = face.normal.clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeMorphNormals: function () {
	
				var i, il, f, fl, face;
	
				// save original normals
				// - create temp variables on first access
				//   otherwise just copy (for faster repeated calls)
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					if ( ! face.__originalFaceNormal ) {
	
						face.__originalFaceNormal = face.normal.clone();
	
					} else {
	
						face.__originalFaceNormal.copy( face.normal );
	
					}
	
					if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
	
					for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
	
						if ( ! face.__originalVertexNormals[ i ] ) {
	
							face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
	
						} else {
	
							face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
	
						}
	
					}
	
				}
	
				// use temp geometry to compute face and vertex normals for each morph
	
				var tmpGeo = new Geometry();
				tmpGeo.faces = this.faces;
	
				for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
	
					// create on first access
	
					if ( ! this.morphNormals[ i ] ) {
	
						this.morphNormals[ i ] = {};
						this.morphNormals[ i ].faceNormals = [];
						this.morphNormals[ i ].vertexNormals = [];
	
						var dstNormalsFace = this.morphNormals[ i ].faceNormals;
						var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
	
						var faceNormal, vertexNormals;
	
						for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
							faceNormal = new Vector3();
							vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
	
							dstNormalsFace.push( faceNormal );
							dstNormalsVertex.push( vertexNormals );
	
						}
	
					}
	
					var morphNormals = this.morphNormals[ i ];
	
					// set vertices to morph target
	
					tmpGeo.vertices = this.morphTargets[ i ].vertices;
	
					// compute morph normals
	
					tmpGeo.computeFaceNormals();
					tmpGeo.computeVertexNormals();
	
					// store morph normals
	
					var faceNormal, vertexNormals;
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						faceNormal = morphNormals.faceNormals[ f ];
						vertexNormals = morphNormals.vertexNormals[ f ];
	
						faceNormal.copy( face.normal );
	
						vertexNormals.a.copy( face.vertexNormals[ 0 ] );
						vertexNormals.b.copy( face.vertexNormals[ 1 ] );
						vertexNormals.c.copy( face.vertexNormals[ 2 ] );
	
					}
	
				}
	
				// restore original normals
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					face.normal = face.__originalFaceNormal;
					face.vertexNormals = face.__originalVertexNormals;
	
				}
	
			},
	
			computeTangents: function () {
	
				console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );
	
			},
	
			computeLineDistances: function () {
	
				var d = 0;
				var vertices = this.vertices;
	
				for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
					if ( i > 0 ) {
	
						d += vertices[ i ].distanceTo( vertices[ i - 1 ] );
	
					}
	
					this.lineDistances[ i ] = d;
	
				}
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				this.boundingBox.setFromPoints( this.vertices );
	
			},
	
			computeBoundingSphere: function () {
	
				if ( this.boundingSphere === null ) {
	
					this.boundingSphere = new Sphere();
	
				}
	
				this.boundingSphere.setFromPoints( this.vertices );
	
			},
	
			merge: function ( geometry, matrix, materialIndexOffset ) {
	
				if ( (geometry && geometry.isGeometry) === false ) {
	
					console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
					return;
	
				}
	
				var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				uvs1 = this.faceVertexUvs[ 0 ],
				uvs2 = geometry.faceVertexUvs[ 0 ],
				colors1 = this.colors,
				colors2 = geometry.colors;
	
				if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
	
				if ( matrix !== undefined ) {
	
					normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				}
	
				// vertices
	
				for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
	
					var vertex = vertices2[ i ];
	
					var vertexCopy = vertex.clone();
	
					if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
	
					vertices1.push( vertexCopy );
	
				}
	
				// colors
	
				for ( var i = 0, il = colors2.length; i < il; i ++ ) {
	
					colors1.push( colors2[ i ].clone() );
	
				}
	
				// faces
	
				for ( i = 0, il = faces2.length; i < il; i ++ ) {
	
					var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;
	
					faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
					faceCopy.normal.copy( face.normal );
	
					if ( normalMatrix !== undefined ) {
	
						faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
	
					}
	
					for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
	
						normal = faceVertexNormals[ j ].clone();
	
						if ( normalMatrix !== undefined ) {
	
							normal.applyMatrix3( normalMatrix ).normalize();
	
						}
	
						faceCopy.vertexNormals.push( normal );
	
					}
	
					faceCopy.color.copy( face.color );
	
					for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
	
						color = faceVertexColors[ j ];
						faceCopy.vertexColors.push( color.clone() );
	
					}
	
					faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
	
					faces1.push( faceCopy );
	
				}
	
				// uvs
	
				for ( i = 0, il = uvs2.length; i < il; i ++ ) {
	
					var uv = uvs2[ i ], uvCopy = [];
	
					if ( uv === undefined ) {
	
						continue;
	
					}
	
					for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
	
						uvCopy.push( uv[ j ].clone() );
	
					}
	
					uvs1.push( uvCopy );
	
				}
	
			},
	
			mergeMesh: function ( mesh ) {
	
				if ( (mesh && mesh.isMesh) === false ) {
	
					console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
					return;
	
				}
	
				mesh.matrixAutoUpdate && mesh.updateMatrix();
	
				this.merge( mesh.geometry, mesh.matrix );
	
			},
	
			/*
			 * Checks for duplicate vertices with hashmap.
			 * Duplicated vertices are removed
			 * and faces' vertices are updated.
			 */
	
			mergeVertices: function () {
	
				var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
				var unique = [], changes = [];
	
				var v, key;
				var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
				var precision = Math.pow( 10, precisionPoints );
				var i, il, face;
				var indices, j, jl;
	
				for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					v = this.vertices[ i ];
					key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
	
					if ( verticesMap[ key ] === undefined ) {
	
						verticesMap[ key ] = i;
						unique.push( this.vertices[ i ] );
						changes[ i ] = unique.length - 1;
	
					} else {
	
						//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
						changes[ i ] = changes[ verticesMap[ key ] ];
	
					}
	
				}
	
	
				// if faces are completely degenerate after merging vertices, we
				// have to remove them from the geometry.
				var faceIndicesToRemove = [];
	
				for ( i = 0, il = this.faces.length; i < il; i ++ ) {
	
					face = this.faces[ i ];
	
					face.a = changes[ face.a ];
					face.b = changes[ face.b ];
					face.c = changes[ face.c ];
	
					indices = [ face.a, face.b, face.c ];
	
					var dupIndex = - 1;
	
					// if any duplicate vertices are found in a Face3
					// we have to remove the face as nothing can be saved
					for ( var n = 0; n < 3; n ++ ) {
	
						if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
	
							dupIndex = n;
							faceIndicesToRemove.push( i );
							break;
	
						}
	
					}
	
				}
	
				for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
	
					var idx = faceIndicesToRemove[ i ];
	
					this.faces.splice( idx, 1 );
	
					for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
	
						this.faceVertexUvs[ j ].splice( idx, 1 );
	
					}
	
				}
	
				// Use unique set of vertices
	
				var diff = this.vertices.length - unique.length;
				this.vertices = unique;
				return diff;
	
			},
	
			sortFacesByMaterialIndex: function () {
	
				var faces = this.faces;
				var length = faces.length;
	
				// tag faces
	
				for ( var i = 0; i < length; i ++ ) {
	
					faces[ i ]._id = i;
	
				}
	
				// sort faces
	
				function materialIndexSort( a, b ) {
	
					return a.materialIndex - b.materialIndex;
	
				}
	
				faces.sort( materialIndexSort );
	
				// sort uvs
	
				var uvs1 = this.faceVertexUvs[ 0 ];
				var uvs2 = this.faceVertexUvs[ 1 ];
	
				var newUvs1, newUvs2;
	
				if ( uvs1 && uvs1.length === length ) newUvs1 = [];
				if ( uvs2 && uvs2.length === length ) newUvs2 = [];
	
				for ( var i = 0; i < length; i ++ ) {
	
					var id = faces[ i ]._id;
	
					if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
					if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
	
				}
	
				if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
				if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.4,
						type: 'Geometry',
						generator: 'Geometry.toJSON'
					}
				};
	
				// standard Geometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
					}
	
					return data;
	
				}
	
				var vertices = [];
	
				for ( var i = 0; i < this.vertices.length; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
				var faces = [];
				var normals = [];
				var normalsHash = {};
				var colors = [];
				var colorsHash = {};
				var uvs = [];
				var uvsHash = {};
	
				for ( var i = 0; i < this.faces.length; i ++ ) {
	
					var face = this.faces[ i ];
	
					var hasMaterial = true;
					var hasFaceUv = false; // deprecated
					var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
					var hasFaceNormal = face.normal.length() > 0;
					var hasFaceVertexNormal = face.vertexNormals.length > 0;
					var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
					var hasFaceVertexColor = face.vertexColors.length > 0;
	
					var faceType = 0;
	
					faceType = setBit( faceType, 0, 0 ); // isQuad
					faceType = setBit( faceType, 1, hasMaterial );
					faceType = setBit( faceType, 2, hasFaceUv );
					faceType = setBit( faceType, 3, hasFaceVertexUv );
					faceType = setBit( faceType, 4, hasFaceNormal );
					faceType = setBit( faceType, 5, hasFaceVertexNormal );
					faceType = setBit( faceType, 6, hasFaceColor );
					faceType = setBit( faceType, 7, hasFaceVertexColor );
	
					faces.push( faceType );
					faces.push( face.a, face.b, face.c );
					faces.push( face.materialIndex );
	
					if ( hasFaceVertexUv ) {
	
						var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
	
						faces.push(
							getUvIndex( faceVertexUvs[ 0 ] ),
							getUvIndex( faceVertexUvs[ 1 ] ),
							getUvIndex( faceVertexUvs[ 2 ] )
						);
	
					}
	
					if ( hasFaceNormal ) {
	
						faces.push( getNormalIndex( face.normal ) );
	
					}
	
					if ( hasFaceVertexNormal ) {
	
						var vertexNormals = face.vertexNormals;
	
						faces.push(
							getNormalIndex( vertexNormals[ 0 ] ),
							getNormalIndex( vertexNormals[ 1 ] ),
							getNormalIndex( vertexNormals[ 2 ] )
						);
	
					}
	
					if ( hasFaceColor ) {
	
						faces.push( getColorIndex( face.color ) );
	
					}
	
					if ( hasFaceVertexColor ) {
	
						var vertexColors = face.vertexColors;
	
						faces.push(
							getColorIndex( vertexColors[ 0 ] ),
							getColorIndex( vertexColors[ 1 ] ),
							getColorIndex( vertexColors[ 2 ] )
						);
	
					}
	
				}
	
				function setBit( value, position, enabled ) {
	
					return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
	
				}
	
				function getNormalIndex( normal ) {
	
					var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
	
					if ( normalsHash[ hash ] !== undefined ) {
	
						return normalsHash[ hash ];
	
					}
	
					normalsHash[ hash ] = normals.length / 3;
					normals.push( normal.x, normal.y, normal.z );
	
					return normalsHash[ hash ];
	
				}
	
				function getColorIndex( color ) {
	
					var hash = color.r.toString() + color.g.toString() + color.b.toString();
	
					if ( colorsHash[ hash ] !== undefined ) {
	
						return colorsHash[ hash ];
	
					}
	
					colorsHash[ hash ] = colors.length;
					colors.push( color.getHex() );
	
					return colorsHash[ hash ];
	
				}
	
				function getUvIndex( uv ) {
	
					var hash = uv.x.toString() + uv.y.toString();
	
					if ( uvsHash[ hash ] !== undefined ) {
	
						return uvsHash[ hash ];
	
					}
	
					uvsHash[ hash ] = uvs.length / 2;
					uvs.push( uv.x, uv.y );
	
					return uvsHash[ hash ];
	
				}
	
				data.data = {};
	
				data.data.vertices = vertices;
				data.data.normals = normals;
				if ( colors.length > 0 ) data.data.colors = colors;
				if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
				data.data.faces = faces;
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				// Handle primitives
	
				var parameters = this.parameters;
	
				if ( parameters !== undefined ) {
	
					var values = [];
	
					for ( var key in parameters ) {
	
						values.push( parameters[ key ] );
	
					}
	
					var geometry = Object.create( this.constructor.prototype );
					this.constructor.apply( geometry, values );
					return geometry;
	
				}
	
				return new this.constructor().copy( this );
				*/
	
				return new Geometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.vertices = [];
				this.faces = [];
				this.faceVertexUvs = [ [] ];
				this.colors = [];
	
				var vertices = source.vertices;
	
				for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
					this.vertices.push( vertices[ i ].clone() );
	
				}
	
				var colors = source.colors;
	
				for ( var i = 0, il = colors.length; i < il; i ++ ) {
	
					this.colors.push( colors[ i ].clone() );
	
				}
	
				var faces = source.faces;
	
				for ( var i = 0, il = faces.length; i < il; i ++ ) {
	
					this.faces.push( faces[ i ].clone() );
	
				}
	
				for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
	
					var faceVertexUvs = source.faceVertexUvs[ i ];
	
					if ( this.faceVertexUvs[ i ] === undefined ) {
	
						this.faceVertexUvs[ i ] = [];
	
					}
	
					for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
	
						var uvs = faceVertexUvs[ j ], uvsCopy = [];
	
						for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {
	
							var uv = uvs[ k ];
	
							uvsCopy.push( uv.clone() );
	
						}
	
						this.faceVertexUvs[ i ].push( uvsCopy );
	
					}
	
				}
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		var count$3 = 0;
		function GeometryIdCount() { return count$3++; }
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectGeometry() {
	
			Object.defineProperty( this, 'id', { value: GeometryIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'DirectGeometry';
	
			this.indices = [];
			this.vertices = [];
			this.normals = [];
			this.colors = [];
			this.uvs = [];
			this.uvs2 = [];
	
			this.groups = [];
	
			this.morphTargets = {};
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			// this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.verticesNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {
	
			computeBoundingBox: Geometry.prototype.computeBoundingBox,
			computeBoundingSphere: Geometry.prototype.computeBoundingSphere,
	
			computeFaceNormals: function () {
	
				console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );
	
			},
	
			computeVertexNormals: function () {
	
				console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );
	
			},
	
			computeGroups: function ( geometry ) {
	
				var group;
				var groups = [];
				var materialIndex;
	
				var faces = geometry.faces;
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					// materials
	
					if ( face.materialIndex !== materialIndex ) {
	
						materialIndex = face.materialIndex;
	
						if ( group !== undefined ) {
	
							group.count = ( i * 3 ) - group.start;
							groups.push( group );
	
						}
	
						group = {
							start: i * 3,
							materialIndex: materialIndex
						};
	
					}
	
				}
	
				if ( group !== undefined ) {
	
					group.count = ( i * 3 ) - group.start;
					groups.push( group );
	
				}
	
				this.groups = groups;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				var faces = geometry.faces;
				var vertices = geometry.vertices;
				var faceVertexUvs = geometry.faceVertexUvs;
	
				var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
				var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
	
				// morphs
	
				var morphTargets = geometry.morphTargets;
				var morphTargetsLength = morphTargets.length;
	
				var morphTargetsPosition;
	
				if ( morphTargetsLength > 0 ) {
	
					morphTargetsPosition = [];
	
					for ( var i = 0; i < morphTargetsLength; i ++ ) {
	
						morphTargetsPosition[ i ] = [];
	
					}
	
					this.morphTargets.position = morphTargetsPosition;
	
				}
	
				var morphNormals = geometry.morphNormals;
				var morphNormalsLength = morphNormals.length;
	
				var morphTargetsNormal;
	
				if ( morphNormalsLength > 0 ) {
	
					morphTargetsNormal = [];
	
					for ( var i = 0; i < morphNormalsLength; i ++ ) {
	
						morphTargetsNormal[ i ] = [];
	
					}
	
					this.morphTargets.normal = morphTargetsNormal;
	
				}
	
				// skins
	
				var skinIndices = geometry.skinIndices;
				var skinWeights = geometry.skinWeights;
	
				var hasSkinIndices = skinIndices.length === vertices.length;
				var hasSkinWeights = skinWeights.length === vertices.length;
	
				//
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
	
					} else {
	
						var normal = face.normal;
	
						this.normals.push( normal, normal, normal );
	
					}
	
					var vertexColors = face.vertexColors;
	
					if ( vertexColors.length === 3 ) {
	
						this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
	
					} else {
	
						var color = face.color;
	
						this.colors.push( color, color, color );
	
					}
	
					if ( hasFaceVertexUv === true ) {
	
						var vertexUvs = faceVertexUvs[ 0 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
	
							this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					if ( hasFaceVertexUv2 === true ) {
	
						var vertexUvs = faceVertexUvs[ 1 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
	
							this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					// morphs
	
					for ( var j = 0; j < morphTargetsLength; j ++ ) {
	
						var morphTarget = morphTargets[ j ].vertices;
	
						morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
	
					}
	
					for ( var j = 0; j < morphNormalsLength; j ++ ) {
	
						var morphNormal = morphNormals[ j ].vertexNormals[ i ];
	
						morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );
	
					}
	
					// skins
	
					if ( hasSkinIndices ) {
	
						this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
	
					}
	
					if ( hasSkinWeights ) {
	
						this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
	
					}
	
				}
	
				this.computeGroups( geometry );
	
				this.verticesNeedUpdate = geometry.verticesNeedUpdate;
				this.normalsNeedUpdate = geometry.normalsNeedUpdate;
				this.colorsNeedUpdate = geometry.colorsNeedUpdate;
				this.uvsNeedUpdate = geometry.uvsNeedUpdate;
				this.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferGeometry() {
	
			Object.defineProperty( this, 'id', { value: GeometryIdCount() } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'BufferGeometry';
	
			this.index = null;
			this.attributes = {};
	
			this.morphAttributes = {};
	
			this.groups = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			this.drawRange = { start: 0, count: Infinity };
	
		}
	
		Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {
	
			isBufferGeometry: true,
	
			getIndex: function () {
	
				return this.index;
	
			},
	
			setIndex: function ( index ) {
	
				this.index = index;
	
			},
	
			addAttribute: function ( name, attribute ) {
	
				if ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {
	
					console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
	
					this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
	
					return;
	
				}
	
				if ( name === 'index' ) {
	
					console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
					this.setIndex( attribute );
	
					return;
	
				}
	
				this.attributes[ name ] = attribute;
	
				return this;
	
			},
	
			getAttribute: function ( name ) {
	
				return this.attributes[ name ];
	
			},
	
			removeAttribute: function ( name ) {
	
				delete this.attributes[ name ];
	
				return this;
	
			},
	
			addGroup: function ( start, count, materialIndex ) {
	
				this.groups.push( {
	
					start: start,
					count: count,
					materialIndex: materialIndex !== undefined ? materialIndex : 0
	
				} );
	
			},
	
			clearGroups: function () {
	
				this.groups = [];
	
			},
	
			setDrawRange: function ( start, count ) {
	
				this.drawRange.start = start;
				this.drawRange.count = count;
	
			},
	
			applyMatrix: function ( matrix ) {
	
				var position = this.attributes.position;
	
				if ( position !== undefined ) {
	
					matrix.applyToVector3Array( position.array );
					position.needsUpdate = true;
	
				}
	
				var normal = this.attributes.normal;
	
				if ( normal !== undefined ) {
	
					var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
					normalMatrix.applyToVector3Array( normal.array );
					normal.needsUpdate = true;
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				return this;
	
			},
	
			rotateX: function () {
	
				// rotate geometry around world x-axis
	
				var m1;
	
				return function rotateX( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationX( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateY: function () {
	
				// rotate geometry around world y-axis
	
				var m1;
	
				return function rotateY( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationY( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateZ: function () {
	
				// rotate geometry around world z-axis
	
				var m1;
	
				return function rotateZ( angle ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeRotationZ( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			translate: function () {
	
				// translate geometry
	
				var m1;
	
				return function translate( x, y, z ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeTranslation( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			scale: function () {
	
				// scale geometry
	
				var m1;
	
				return function scale( x, y, z ) {
	
					if ( m1 === undefined ) m1 = new Matrix4();
	
					m1.makeScale( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			lookAt: function () {
	
				var obj;
	
				return function lookAt( vector ) {
	
					if ( obj === undefined ) obj = new Object3D();
	
					obj.lookAt( vector );
	
					obj.updateMatrix();
	
					this.applyMatrix( obj.matrix );
	
				};
	
			}(),
	
			center: function () {
	
				this.computeBoundingBox();
	
				var offset = this.boundingBox.getCenter().negate();
	
				this.translate( offset.x, offset.y, offset.z );
	
				return offset;
	
			},
	
			setFromObject: function ( object ) {
	
				// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
	
				var geometry = object.geometry;
	
				if ( (object && object.isPoints) || (object && object.isLine) ) {
	
					var positions = new Float32Attribute( geometry.vertices.length * 3, 3 );
					var colors = new Float32Attribute( geometry.colors.length * 3, 3 );
	
					this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
					this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
	
					if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
	
						var lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );
	
						this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
	
					}
	
					if ( geometry.boundingSphere !== null ) {
	
						this.boundingSphere = geometry.boundingSphere.clone();
	
					}
	
					if ( geometry.boundingBox !== null ) {
	
						this.boundingBox = geometry.boundingBox.clone();
	
					}
	
				} else if ( (object && object.isMesh) ) {
	
					if ( (geometry && geometry.isGeometry) ) {
	
						this.fromGeometry( geometry );
	
					}
	
				}
	
				return this;
	
			},
	
			updateFromObject: function ( object ) {
	
				var geometry = object.geometry;
	
				if ( (object && object.isMesh) ) {
	
					var direct = geometry.__directGeometry;
	
					if ( geometry.elementsNeedUpdate === true ) {
	
						direct = undefined;
						geometry.elementsNeedUpdate = false;
	
					}
	
					if ( direct === undefined ) {
	
						return this.fromGeometry( geometry );
	
					}
	
					direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
					direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
					direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
					direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
					direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
					geometry.verticesNeedUpdate = false;
					geometry.normalsNeedUpdate = false;
					geometry.colorsNeedUpdate = false;
					geometry.uvsNeedUpdate = false;
					geometry.groupsNeedUpdate = false;
	
					geometry = direct;
	
				}
	
				var attribute;
	
				if ( geometry.verticesNeedUpdate === true ) {
	
					attribute = this.attributes.position;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.vertices );
						attribute.needsUpdate = true;
	
					}
	
					geometry.verticesNeedUpdate = false;
	
				}
	
				if ( geometry.normalsNeedUpdate === true ) {
	
					attribute = this.attributes.normal;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.normals );
						attribute.needsUpdate = true;
	
					}
	
					geometry.normalsNeedUpdate = false;
	
				}
	
				if ( geometry.colorsNeedUpdate === true ) {
	
					attribute = this.attributes.color;
	
					if ( attribute !== undefined ) {
	
						attribute.copyColorsArray( geometry.colors );
						attribute.needsUpdate = true;
	
					}
	
					geometry.colorsNeedUpdate = false;
	
				}
	
				if ( geometry.uvsNeedUpdate ) {
	
					attribute = this.attributes.uv;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector2sArray( geometry.uvs );
						attribute.needsUpdate = true;
	
					}
	
					geometry.uvsNeedUpdate = false;
	
				}
	
				if ( geometry.lineDistancesNeedUpdate ) {
	
					attribute = this.attributes.lineDistance;
	
					if ( attribute !== undefined ) {
	
						attribute.copyArray( geometry.lineDistances );
						attribute.needsUpdate = true;
	
					}
	
					geometry.lineDistancesNeedUpdate = false;
	
				}
	
				if ( geometry.groupsNeedUpdate ) {
	
					geometry.computeGroups( object.geometry );
					this.groups = geometry.groups;
	
					geometry.groupsNeedUpdate = false;
	
				}
	
				return this;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
	
				return this.fromDirectGeometry( geometry.__directGeometry );
	
			},
	
			fromDirectGeometry: function ( geometry ) {
	
				var positions = new Float32Array( geometry.vertices.length * 3 );
				this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
	
				if ( geometry.normals.length > 0 ) {
	
					var normals = new Float32Array( geometry.normals.length * 3 );
					this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
	
				}
	
				if ( geometry.colors.length > 0 ) {
	
					var colors = new Float32Array( geometry.colors.length * 3 );
					this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
	
				}
	
				if ( geometry.uvs.length > 0 ) {
	
					var uvs = new Float32Array( geometry.uvs.length * 2 );
					this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
	
				}
	
				if ( geometry.uvs2.length > 0 ) {
	
					var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
					this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
	
				}
	
				if ( geometry.indices.length > 0 ) {
	
					var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
					var indices = new TypeArray( geometry.indices.length * 3 );
					this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );
	
				}
	
				// groups
	
				this.groups = geometry.groups;
	
				// morphs
	
				for ( var name in geometry.morphTargets ) {
	
					var array = [];
					var morphTargets = geometry.morphTargets[ name ];
	
					for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
	
						var morphTarget = morphTargets[ i ];
	
						var attribute = new Float32Attribute( morphTarget.length * 3, 3 );
	
						array.push( attribute.copyVector3sArray( morphTarget ) );
	
					}
	
					this.morphAttributes[ name ] = array;
	
				}
	
				// skinning
	
				if ( geometry.skinIndices.length > 0 ) {
	
					var skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );
					this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
	
				}
	
				if ( geometry.skinWeights.length > 0 ) {
	
					var skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );
					this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
	
				}
	
				//
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				return this;
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				var positions = this.attributes.position.array;
	
				if ( positions !== undefined ) {
	
					this.boundingBox.setFromArray( positions );
	
				} else {
	
					this.boundingBox.makeEmpty();
	
				}
	
				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
	
					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
	
				}
	
			},
	
			computeBoundingSphere: function () {
	
				var box = new Box3();
				var vector = new Vector3();
	
				return function computeBoundingSphere() {
	
					if ( this.boundingSphere === null ) {
	
						this.boundingSphere = new Sphere();
	
					}
	
					var positions = this.attributes.position;
	
					if ( positions ) {
	
						var array = positions.array;
						var center = this.boundingSphere.center;
	
						box.setFromArray( array );
						box.getCenter( center );
	
						// hoping to find a boundingSphere with a radius smaller than the
						// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
	
						var maxRadiusSq = 0;
	
						for ( var i = 0, il = array.length; i < il; i += 3 ) {
	
							vector.fromArray( array, i );
							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
	
						}
	
						this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
	
						if ( isNaN( this.boundingSphere.radius ) ) {
	
							console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
	
						}
	
					}
	
				};
	
			}(),
	
			computeFaceNormals: function () {
	
				// backwards compatibility
	
			},
	
			computeVertexNormals: function () {
	
				var index = this.index;
				var attributes = this.attributes;
				var groups = this.groups;
	
				if ( attributes.position ) {
	
					var positions = attributes.position.array;
	
					if ( attributes.normal === undefined ) {
	
						this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
	
					} else {
	
						// reset existing normals to zero
	
						var array = attributes.normal.array;
	
						for ( var i = 0, il = array.length; i < il; i ++ ) {
	
							array[ i ] = 0;
	
						}
	
					}
	
					var normals = attributes.normal.array;
	
					var vA, vB, vC,
	
					pA = new Vector3(),
					pB = new Vector3(),
					pC = new Vector3(),
	
					cb = new Vector3(),
					ab = new Vector3();
	
					// indexed elements
	
					if ( index ) {
	
						var indices = index.array;
	
						if ( groups.length === 0 ) {
	
							this.addGroup( 0, indices.length );
	
						}
	
						for ( var j = 0, jl = groups.length; j < jl; ++ j ) {
	
							var group = groups[ j ];
	
							var start = group.start;
							var count = group.count;
	
							for ( var i = start, il = start + count; i < il; i += 3 ) {
	
								vA = indices[ i + 0 ] * 3;
								vB = indices[ i + 1 ] * 3;
								vC = indices[ i + 2 ] * 3;
	
								pA.fromArray( positions, vA );
								pB.fromArray( positions, vB );
								pC.fromArray( positions, vC );
	
								cb.subVectors( pC, pB );
								ab.subVectors( pA, pB );
								cb.cross( ab );
	
								normals[ vA ] += cb.x;
								normals[ vA + 1 ] += cb.y;
								normals[ vA + 2 ] += cb.z;
	
								normals[ vB ] += cb.x;
								normals[ vB + 1 ] += cb.y;
								normals[ vB + 2 ] += cb.z;
	
								normals[ vC ] += cb.x;
								normals[ vC + 1 ] += cb.y;
								normals[ vC + 2 ] += cb.z;
	
							}
	
						}
	
					} else {
	
						// non-indexed elements (unconnected triangle soup)
	
						for ( var i = 0, il = positions.length; i < il; i += 9 ) {
	
							pA.fromArray( positions, i );
							pB.fromArray( positions, i + 3 );
							pC.fromArray( positions, i + 6 );
	
							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );
	
							normals[ i ] = cb.x;
							normals[ i + 1 ] = cb.y;
							normals[ i + 2 ] = cb.z;
	
							normals[ i + 3 ] = cb.x;
							normals[ i + 4 ] = cb.y;
							normals[ i + 5 ] = cb.z;
	
							normals[ i + 6 ] = cb.x;
							normals[ i + 7 ] = cb.y;
							normals[ i + 8 ] = cb.z;
	
						}
	
					}
	
					this.normalizeNormals();
	
					attributes.normal.needsUpdate = true;
	
				}
	
			},
	
			merge: function ( geometry, offset ) {
	
				if ( (geometry && geometry.isBufferGeometry) === false ) {
	
					console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
					return;
	
				}
	
				if ( offset === undefined ) offset = 0;
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					if ( geometry.attributes[ key ] === undefined ) continue;
	
					var attribute1 = attributes[ key ];
					var attributeArray1 = attribute1.array;
	
					var attribute2 = geometry.attributes[ key ];
					var attributeArray2 = attribute2.array;
	
					var attributeSize = attribute2.itemSize;
	
					for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {
	
						attributeArray1[ j ] = attributeArray2[ i ];
	
					}
	
				}
	
				return this;
	
			},
	
			normalizeNormals: function () {
	
				var normals = this.attributes.normal.array;
	
				var x, y, z, n;
	
				for ( var i = 0, il = normals.length; i < il; i += 3 ) {
	
					x = normals[ i ];
					y = normals[ i + 1 ];
					z = normals[ i + 2 ];
	
					n = 1.0 / Math.sqrt( x * x + y * y + z * z );
	
					normals[ i ] *= n;
					normals[ i + 1 ] *= n;
					normals[ i + 2 ] *= n;
	
				}
	
			},
	
			toNonIndexed: function () {
	
				if ( this.index === null ) {
	
					console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
					return this;
	
				}
	
				var geometry2 = new BufferGeometry();
	
				var indices = this.index.array;
				var attributes = this.attributes;
	
				for ( var name in attributes ) {
	
					var attribute = attributes[ name ];
	
					var array = attribute.array;
					var itemSize = attribute.itemSize;
	
					var array2 = new array.constructor( indices.length * itemSize );
	
					var index = 0, index2 = 0;
	
					for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
						index = indices[ i ] * itemSize;
	
						for ( var j = 0; j < itemSize; j ++ ) {
	
							array2[ index2 ++ ] = array[ index ++ ];
	
						}
	
					}
	
					geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );
	
				}
	
				return geometry2;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.4,
						type: 'BufferGeometry',
						generator: 'BufferGeometry.toJSON'
					}
				};
	
				// standard BufferGeometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
					}
	
					return data;
	
				}
	
				data.data = { attributes: {} };
	
				var index = this.index;
	
				if ( index !== null ) {
	
					var array = Array.prototype.slice.call( index.array );
	
					data.data.index = {
						type: index.array.constructor.name,
						array: array
					};
	
				}
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
	
					var array = Array.prototype.slice.call( attribute.array );
	
					data.data.attributes[ key ] = {
						itemSize: attribute.itemSize,
						type: attribute.array.constructor.name,
						array: array,
						normalized: attribute.normalized
					};
	
				}
	
				var groups = this.groups;
	
				if ( groups.length > 0 ) {
	
					data.data.groups = JSON.parse( JSON.stringify( groups ) );
	
				}
	
				var boundingSphere = this.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					data.data.boundingSphere = {
						center: boundingSphere.center.toArray(),
						radius: boundingSphere.radius
					};
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				// Handle primitives
	
				var parameters = this.parameters;
	
				if ( parameters !== undefined ) {
	
					var values = [];
	
					for ( var key in parameters ) {
	
						values.push( parameters[ key ] );
	
					}
	
					var geometry = Object.create( this.constructor.prototype );
					this.constructor.apply( geometry, values );
					return geometry;
	
				}
	
				return new this.constructor().copy( this );
				*/
	
				return new BufferGeometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				var index = source.index;
	
				if ( index !== null ) {
	
					this.setIndex( index.clone() );
	
				}
	
				var attributes = source.attributes;
	
				for ( var name in attributes ) {
	
					var attribute = attributes[ name ];
					this.addAttribute( name, attribute.clone() );
	
				}
	
				var groups = source.groups;
	
				for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );
	
				}
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		BufferGeometry.MaxIndex = 65535;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author jonobr1 / http://jonobr1.com/
		 */
	
		function Mesh( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Mesh';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );
	
			this.drawMode = TrianglesDrawMode;
	
			this.updateMorphTargets();
	
		}
	
		Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Mesh,
	
			isMesh: true,
	
			setDrawMode: function ( value ) {
	
				this.drawMode = value;
	
			},
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.drawMode = source.drawMode;
	
				return this;
	
			},
	
			updateMorphTargets: function () {
	
				var morphTargets = this.geometry.morphTargets;
	
				if ( morphTargets !== undefined && morphTargets.length > 0 ) {
	
					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};
	
					for ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {
	
						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ morphTargets[ m ].name ] = m;
	
					}
	
				}
	
			},
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				var vA = new Vector3();
				var vB = new Vector3();
				var vC = new Vector3();
	
				var tempA = new Vector3();
				var tempB = new Vector3();
				var tempC = new Vector3();
	
				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();
	
				var barycoord = new Vector3();
	
				var intersectionPoint = new Vector3();
				var intersectionPointWorld = new Vector3();
	
				function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {
	
					Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );
	
					uv1.multiplyScalar( barycoord.x );
					uv2.multiplyScalar( barycoord.y );
					uv3.multiplyScalar( barycoord.z );
	
					uv1.add( uv2 ).add( uv3 );
	
					return uv1.clone();
	
				}
	
				function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {
	
					var intersect;
					var material = object.material;
	
					if ( material.side === BackSide ) {
	
						intersect = ray.intersectTriangle( pC, pB, pA, true, point );
	
					} else {
	
						intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
	
					}
	
					if ( intersect === null ) return null;
	
					intersectionPointWorld.copy( point );
					intersectionPointWorld.applyMatrix4( object.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );
	
					if ( distance < raycaster.near || distance > raycaster.far ) return null;
	
					return {
						distance: distance,
						point: intersectionPointWorld.clone(),
						object: object
					};
	
				}
	
				function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {
	
					vA.fromArray( positions, a * 3 );
					vB.fromArray( positions, b * 3 );
					vC.fromArray( positions, c * 3 );
	
					var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );
	
					if ( intersection ) {
	
						if ( uvs ) {
	
							uvA.fromArray( uvs, a * 2 );
							uvB.fromArray( uvs, b * 2 );
							uvC.fromArray( uvs, c * 2 );
	
							intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );
	
						}
	
						intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
						intersection.faceIndex = a;
	
					}
	
					return intersection;
	
				}
	
				return function raycast( raycaster, intersects ) {
	
					var geometry = this.geometry;
					var material = this.material;
					var matrixWorld = this.matrixWorld;
	
					if ( material === undefined ) return;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					// Check boundingBox before continuing
	
					if ( geometry.boundingBox !== null ) {
	
						if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;
	
					}
	
					var uvs, intersection;
	
					if ( (geometry && geometry.isBufferGeometry) ) {
	
						var a, b, c;
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;
	
						if ( attributes.uv !== undefined ) {
	
							uvs = attributes.uv.array;
	
						}
	
						if ( index !== null ) {
	
							var indices = index.array;
	
							for ( var i = 0, l = indices.length; i < l; i += 3 ) {
	
								a = indices[ i ];
								b = indices[ i + 1 ];
								c = indices[ i + 2 ];
	
								intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );
	
								if ( intersection ) {
	
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						} else {
	
	
							for ( var i = 0, l = positions.length; i < l; i += 9 ) {
	
								a = i / 3;
								b = a + 1;
								c = a + 2;
	
								intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );
	
								if ( intersection ) {
	
									intersection.index = a; // triangle number in positions buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						}
	
					} else if ( (geometry && geometry.isGeometry) ) {
	
						var fvA, fvB, fvC;
						var isFaceMaterial = (material && material.isMultiMaterial);
						var materials = isFaceMaterial === true ? material.materials : null;
	
						var vertices = geometry.vertices;
						var faces = geometry.faces;
						var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
						if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
	
						for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
	
							var face = faces[ f ];
							var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;
	
							if ( faceMaterial === undefined ) continue;
	
							fvA = vertices[ face.a ];
							fvB = vertices[ face.b ];
							fvC = vertices[ face.c ];
	
							if ( faceMaterial.morphTargets === true ) {
	
								var morphTargets = geometry.morphTargets;
								var morphInfluences = this.morphTargetInfluences;
	
								vA.set( 0, 0, 0 );
								vB.set( 0, 0, 0 );
								vC.set( 0, 0, 0 );
	
								for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {
	
									var influence = morphInfluences[ t ];
	
									if ( influence === 0 ) continue;
	
									var targets = morphTargets[ t ].vertices;
	
									vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
									vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
									vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );
	
								}
	
								vA.add( fvA );
								vB.add( fvB );
								vC.add( fvC );
	
								fvA = vA;
								fvB = vB;
								fvC = vC;
	
							}
	
							intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );
	
							if ( intersection ) {
	
								if ( uvs ) {
	
									var uvs_f = uvs[ f ];
									uvA.copy( uvs_f[ 0 ] );
									uvB.copy( uvs_f[ 1 ] );
									uvC.copy( uvs_f[ 2 ] );
	
									intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );
	
								}
	
								intersection.face = face;
								intersection.faceIndex = f;
								intersects.push( intersection );
	
							}
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'BoxBufferGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
	
			var scope = this;
	
			// segments
			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;
	
			// these are used to calculate buffer length
			var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
			var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );
	
			// buffers
			var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
			var vertices = new Float32Array( vertexCount * 3 );
			var normals = new Float32Array( vertexCount * 3 );
			var uvs = new Float32Array( vertexCount * 2 );
	
			// offset variables
			var vertexBufferOffset = 0;
			var uvBufferOffset = 0;
			var indexBufferOffset = 0;
			var numberOfVertices = 0;
	
			// group variables
			var groupStart = 0;
	
			// build each side of the box geometry
			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
			buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
			buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz
	
			// build geometry
			this.setIndex( new BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );
	
			// helper functions
	
			function calculateVertexCount( w, h, d ) {
	
				var vertices = 0;
	
				// calculate the amount of vertices for each side (plane)
				vertices += (w + 1) * (h + 1) * 2; // xy
				vertices += (w + 1) * (d + 1) * 2; // xz
				vertices += (d + 1) * (h + 1) * 2; // zy
	
				return vertices;
	
			}
	
			function calculateIndexCount( w, h, d ) {
	
				var index = 0;
	
				// calculate the amount of squares for each side
				index += w * h * 2; // xy
				index += w * d * 2; // xz
				index += d * h * 2; // zy
	
				return index * 6; // two triangles per square => six vertices per square
	
			}
	
			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
	
				var segmentWidth	= width / gridX;
				var segmentHeight = height / gridY;
	
				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;
	
				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;
	
				var vertexCounter = 0;
				var groupCount = 0;
	
				var vector = new Vector3();
	
				// generate vertices, normals and uvs
	
				for ( var iy = 0; iy < gridY1; iy ++ ) {
	
					var y = iy * segmentHeight - heightHalf;
	
					for ( var ix = 0; ix < gridX1; ix ++ ) {
	
						var x = ix * segmentWidth - widthHalf;
	
						// set values to correct vector component
						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;
	
						// now apply vector to vertex buffer
						vertices[ vertexBufferOffset ] = vector.x;
						vertices[ vertexBufferOffset + 1 ] = vector.y;
						vertices[ vertexBufferOffset + 2 ] = vector.z;
	
						// set values to correct vector component
						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;
	
						// now apply vector to normal buffer
						normals[ vertexBufferOffset ] = vector.x;
						normals[ vertexBufferOffset + 1 ] = vector.y;
						normals[ vertexBufferOffset + 2 ] = vector.z;
	
						// uvs
						uvs[ uvBufferOffset ] = ix / gridX;
						uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );
	
						// update offsets and counters
						vertexBufferOffset += 3;
						uvBufferOffset += 2;
						vertexCounter += 1;
	
					}
	
				}
	
				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment
	
				for ( iy = 0; iy < gridY; iy ++ ) {
	
					for ( ix = 0; ix < gridX; ix ++ ) {
	
						// indices
						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
	
						// face one
						indices[ indexBufferOffset ] = a;
						indices[ indexBufferOffset + 1 ] = b;
						indices[ indexBufferOffset + 2 ] = d;
	
						// face two
						indices[ indexBufferOffset + 3 ] = b;
						indices[ indexBufferOffset + 4 ] = c;
						indices[ indexBufferOffset + 5 ] = d;
	
						// update offsets and counters
						indexBufferOffset += 6;
						groupCount += 6;
	
					}
	
				}
	
				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, materialIndex );
	
				// calculate new start value for groups
				groupStart += groupCount;
	
				// update total number of vertices
				numberOfVertices += vertexCounter;
	
			}
	
		}
	
		BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
		 */
	
		function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PlaneBufferGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			var width_half = width / 2;
			var height_half = height / 2;
	
			var gridX = Math.floor( widthSegments ) || 1;
			var gridY = Math.floor( heightSegments ) || 1;
	
			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;
	
			var segment_width = width / gridX;
			var segment_height = height / gridY;
	
			var vertices = new Float32Array( gridX1 * gridY1 * 3 );
			var normals = new Float32Array( gridX1 * gridY1 * 3 );
			var uvs = new Float32Array( gridX1 * gridY1 * 2 );
	
			var offset = 0;
			var offset2 = 0;
	
			for ( var iy = 0; iy < gridY1; iy ++ ) {
	
				var y = iy * segment_height - height_half;
	
				for ( var ix = 0; ix < gridX1; ix ++ ) {
	
					var x = ix * segment_width - width_half;
	
					vertices[ offset ] = x;
					vertices[ offset + 1 ] = - y;
	
					normals[ offset + 2 ] = 1;
	
					uvs[ offset2 ] = ix / gridX;
					uvs[ offset2 + 1 ] = 1 - ( iy / gridY );
	
					offset += 3;
					offset2 += 2;
	
				}
	
			}
	
			offset = 0;
	
			var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );
	
			for ( var iy = 0; iy < gridY; iy ++ ) {
	
				for ( var ix = 0; ix < gridX; ix ++ ) {
	
					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;
	
					indices[ offset ] = a;
					indices[ offset + 1 ] = b;
					indices[ offset + 2 ] = d;
	
					indices[ offset + 3 ] = b;
					indices[ offset + 4 ] = c;
					indices[ offset + 5 ] = d;
	
					offset += 6;
	
				}
	
			}
	
			this.setIndex( new BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );
	
		}
	
		PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function Camera() {
	
			Object3D.call( this );
	
			this.type = 'Camera';
	
			this.matrixWorldInverse = new Matrix4();
			this.projectionMatrix = new Matrix4();
	
		}
	
		Camera.prototype = Object.create( Object3D.prototype );
		Camera.prototype.constructor = Camera;
	
		Camera.prototype.isCamera = true;
	
		Camera.prototype.getWorldDirection = function () {
	
			var quaternion = new Quaternion();
	
			return function getWorldDirection( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				this.getWorldQuaternion( quaternion );
	
				return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
			};
	
		}();
	
		Camera.prototype.lookAt = function () {
	
			// This routine does not support cameras with rotated and/or translated parent(s)
	
			var m1 = new Matrix4();
	
			return function lookAt( vector ) {
	
				m1.lookAt( this.position, vector, this.up );
	
				this.quaternion.setFromRotationMatrix( m1 );
	
			};
	
		}();
	
		Camera.prototype.clone = function () {
	
			return new this.constructor().copy( this );
	
		};
	
		Camera.prototype.copy = function ( source ) {
	
			Object3D.prototype.copy.call( this, source );
	
			this.matrixWorldInverse.copy( source.matrixWorldInverse );
			this.projectionMatrix.copy( source.projectionMatrix );
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author greggman / http://games.greggman.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author tschw
		 */
	
		function PerspectiveCamera( fov, aspect, near, far ) {
	
			Camera.call( this );
	
			this.type = 'PerspectiveCamera';
	
			this.fov = fov !== undefined ? fov : 50;
			this.zoom = 1;
	
			this.near = near !== undefined ? near : 0.1;
			this.far = far !== undefined ? far : 2000;
			this.focus = 10;
	
			this.aspect = aspect !== undefined ? aspect : 1;
			this.view = null;
	
			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
	
			this.updateProjectionMatrix();
	
		}
	
		PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: PerspectiveCamera,
	
			isPerspectiveCamera: true,
	
			copy: function ( source ) {
	
				Camera.prototype.copy.call( this, source );
	
				this.fov = source.fov;
				this.zoom = source.zoom;
	
				this.near = source.near;
				this.far = source.far;
				this.focus = source.focus;
	
				this.aspect = source.aspect;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				this.filmGauge = source.filmGauge;
				this.filmOffset = source.filmOffset;
	
				return this;
	
			},
	
			/**
			 * Sets the FOV by focal length in respect to the current .filmGauge.
			 *
			 * The default film gauge is 35, so that the focal length can be specified for
			 * a 35mm (full frame) camera.
			 *
			 * Values for focal length and film gauge must have the same unit.
			 */
			setFocalLength: function ( focalLength ) {
	
				// see http://www.bobatkins.com/photography/technical/field_of_view.html
				var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
	
				this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
				this.updateProjectionMatrix();
	
			},
	
			/**
			 * Calculates the focal length from the current .fov and .filmGauge.
			 */
			getFocalLength: function () {
	
				var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );
	
				return 0.5 * this.getFilmHeight() / vExtentSlope;
	
			},
	
			getEffectiveFOV: function () {
	
				return _Math.RAD2DEG * 2 * Math.atan(
						Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );
	
			},
	
			getFilmWidth: function () {
	
				// film not completely covered in portrait format (aspect < 1)
				return this.filmGauge * Math.min( this.aspect, 1 );
	
			},
	
			getFilmHeight: function () {
	
				// film not completely covered in landscape format (aspect > 1)
				return this.filmGauge / Math.max( this.aspect, 1 );
	
			},
	
			/**
			 * Sets an offset in a larger frustum. This is useful for multi-window or
			 * multi-monitor/multi-machine setups.
			 *
			 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
			 * the monitors are in grid like this
			 *
			 *   +---+---+---+
			 *   | A | B | C |
			 *   +---+---+---+
			 *   | D | E | F |
			 *   +---+---+---+
			 *
			 * then for each monitor you would call it like this
			 *
			 *   var w = 1920;
			 *   var h = 1080;
			 *   var fullWidth = w * 3;
			 *   var fullHeight = h * 2;
			 *
			 *   --A--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
			 *   --B--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
			 *   --C--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
			 *   --D--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
			 *   --E--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
			 *   --F--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
			 *
			 *   Note there is no reason monitors have to be the same size or in a grid.
			 */
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
	
				this.aspect = fullWidth / fullHeight;
	
				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function() {
	
				this.view = null;
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var near = this.near,
					top = near * Math.tan(
							_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
					height = 2 * top,
					width = this.aspect * height,
					left = - 0.5 * width,
					view = this.view;
	
				if ( view !== null ) {
	
					var fullWidth = view.fullWidth,
						fullHeight = view.fullHeight;
	
					left += view.offsetX * width / fullWidth;
					top -= view.offsetY * height / fullHeight;
					width *= view.width / fullWidth;
					height *= view.height / fullHeight;
	
				}
	
				var skew = this.filmOffset;
				if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
	
				this.projectionMatrix.makeFrustum(
						left, left + width, top - height, top, near, this.far );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.fov = this.fov;
				data.object.zoom = this.zoom;
	
				data.object.near = this.near;
				data.object.far = this.far;
				data.object.focus = this.focus;
	
				data.object.aspect = this.aspect;
	
				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
	
				data.object.filmGauge = this.filmGauge;
				data.object.filmOffset = this.filmOffset;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author arose / http://github.com/arose
		 */
	
		function OrthographicCamera( left, right, top, bottom, near, far ) {
	
			Camera.call( this );
	
			this.type = 'OrthographicCamera';
	
			this.zoom = 1;
			this.view = null;
	
			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;
	
			this.near = ( near !== undefined ) ? near : 0.1;
			this.far = ( far !== undefined ) ? far : 2000;
	
			this.updateProjectionMatrix();
	
		}
	
		OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: OrthographicCamera,
	
			isOrthographicCamera: true,
	
			copy: function ( source ) {
	
				Camera.prototype.copy.call( this, source );
	
				this.left = source.left;
				this.right = source.right;
				this.top = source.top;
				this.bottom = source.bottom;
				this.near = source.near;
				this.far = source.far;
	
				this.zoom = source.zoom;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				return this;
	
			},
	
			setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {
	
				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function() {
	
				this.view = null;
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var dx = ( this.right - this.left ) / ( 2 * this.zoom );
				var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
				var cx = ( this.right + this.left ) / 2;
				var cy = ( this.top + this.bottom ) / 2;
	
				var left = cx - dx;
				var right = cx + dx;
				var top = cy + dy;
				var bottom = cy - dy;
	
				if ( this.view !== null ) {
	
					var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
					var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
					var scaleW = ( this.right - this.left ) / this.view.width;
					var scaleH = ( this.top - this.bottom ) / this.view.height;
	
					left += scaleW * ( this.view.offsetX / zoomW );
					right = left + scaleW * ( this.view.width / zoomW );
					top -= scaleH * ( this.view.offsetY / zoomH );
					bottom = top - scaleH * ( this.view.height / zoomH );
	
				}
	
				this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.zoom = this.zoom;
				data.object.left = this.left;
				data.object.right = this.right;
				data.object.top = this.top;
				data.object.bottom = this.bottom;
				data.object.near = this.near;
				data.object.far = this.far;
	
				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			var type, size;
	
			function setIndex( index ) {
	
				if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {
	
					type = gl.UNSIGNED_INT;
					size = 4;
	
				} else {
	
					type = gl.UNSIGNED_SHORT;
					size = 2;
	
				}
	
			}
	
			function render( start, count ) {
	
				gl.drawElements( mode, count, type, start * size );
	
				infoRender.calls ++;
				infoRender.vertices += count;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
	
			}
	
			function renderInstances( geometry, start, count ) {
	
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				if ( extension === null ) {
	
					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
	
				}
	
				extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );
	
				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
	
			}
	
			return {
	
				setMode: setMode,
				setIndex: setIndex,
				render: render,
				renderInstances: renderInstances
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLBufferRenderer( gl, extensions, infoRender ) {
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			function render( start, count ) {
	
				gl.drawArrays( mode, start, count );
	
				infoRender.calls ++;
				infoRender.vertices += count;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
	
			}
	
			function renderInstances( geometry ) {
	
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				if ( extension === null ) {
	
					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
	
				}
	
				var position = geometry.attributes.position;
	
				var count = 0;
	
				if ( (position && position.isInterleavedBufferAttribute) ) {
	
					count = position.data.count;
	
					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );
	
				} else {
	
					count = position.count;
	
					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );
	
				}
	
				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
	
			}
	
			return {
				setMode: setMode,
				render: render,
				renderInstances: renderInstances
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLLights() {
	
			var lights = {};
	
			return {
	
				get: function ( light ) {
	
					if ( lights[ light.id ] !== undefined ) {
	
						return lights[ light.id ];
	
					}
	
					var uniforms;
	
					switch ( light.type ) {
	
						case 'DirectionalLight':
							uniforms = {
								direction: new Vector3(),
								color: new Color(),
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'SpotLight':
							uniforms = {
								position: new Vector3(),
								direction: new Vector3(),
								color: new Color(),
								distance: 0,
								coneCos: 0,
								penumbraCos: 0,
								decay: 0,
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'PointLight':
							uniforms = {
								position: new Vector3(),
								color: new Color(),
								distance: 0,
								decay: 0,
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'HemisphereLight':
							uniforms = {
								direction: new Vector3(),
								skyColor: new Color(),
								groundColor: new Color()
							};
							break;
	
					}
	
					lights[ light.id ] = uniforms;
	
					return uniforms;
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function addLineNumbers( string ) {
	
			var lines = string.split( '\n' );
	
			for ( var i = 0; i < lines.length; i ++ ) {
	
				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
	
			}
	
			return lines.join( '\n' );
	
		}
	
		function WebGLShader( gl, type, string ) {
	
			var shader = gl.createShader( type );
	
			gl.shaderSource( shader, string );
			gl.compileShader( shader );
	
			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {
	
				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );
	
			}
	
			if ( gl.getShaderInfoLog( shader ) !== '' ) {
	
				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );
	
			}
	
			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
	
			return shader;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var programIdCount = 0;
	
		function getEncodingComponents( encoding ) {
	
			switch ( encoding ) {
	
				case LinearEncoding:
					return [ 'Linear','( value )' ];
				case sRGBEncoding:
					return [ 'sRGB','( value )' ];
				case RGBEEncoding:
					return [ 'RGBE','( value )' ];
				case RGBM7Encoding:
					return [ 'RGBM','( value, 7.0 )' ];
				case RGBM16Encoding:
					return [ 'RGBM','( value, 16.0 )' ];
				case RGBDEncoding:
					return [ 'RGBD','( value, 256.0 )' ];
				case GammaEncoding:
					return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
				default:
					throw new Error( 'unsupported encoding: ' + encoding );
	
			}
	
		}
	
		function getTexelDecodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";
	
		}
	
		function getTexelEncodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";
	
		}
	
		function getToneMappingFunction( functionName, toneMapping ) {
	
			var toneMappingName;
	
			switch ( toneMapping ) {
	
				case LinearToneMapping:
					toneMappingName = "Linear";
					break;
	
				case ReinhardToneMapping:
					toneMappingName = "Reinhard";
					break;
	
				case Uncharted2ToneMapping:
					toneMappingName = "Uncharted2";
					break;
	
				case CineonToneMapping:
					toneMappingName = "OptimizedCineon";
					break;
	
				default:
					throw new Error( 'unsupported toneMapping: ' + toneMapping );
	
			}
	
			return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
	
		}
	
		function generateExtensions( extensions, parameters, rendererExtensions ) {
	
			extensions = extensions || {};
	
			var chunks = [
				( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
			];
	
			return chunks.filter( filterEmptyLine ).join( '\n' );
	
		}
	
		function generateDefines( defines ) {
	
			var chunks = [];
	
			for ( var name in defines ) {
	
				var value = defines[ name ];
	
				if ( value === false ) continue;
	
				chunks.push( '#define ' + name + ' ' + value );
	
			}
	
			return chunks.join( '\n' );
	
		}
	
		function fetchAttributeLocations( gl, program, identifiers ) {
	
			var attributes = {};
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );
	
			for ( var i = 0; i < n; i ++ ) {
	
				var info = gl.getActiveAttrib( program, i );
				var name = info.name;
	
				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );
	
				attributes[ name ] = gl.getAttribLocation( program, name );
	
			}
	
			return attributes;
	
		}
	
		function filterEmptyLine( string ) {
	
			return string !== '';
	
		}
	
		function replaceLightNums( string, parameters ) {
	
			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );
	
		}
	
		function parseIncludes( string ) {
	
			var pattern = /#include +<([\w\d.]+)>/g;
	
			function replace( match, include ) {
	
				var replace = ShaderChunk[ include ];
	
				if ( replace === undefined ) {
	
					throw new Error( 'Can not resolve #include <' + include + '>' );
	
				}
	
				return parseIncludes( replace );
	
			}
	
			return string.replace( pattern, replace );
	
		}
	
		function unrollLoops( string ) {
	
			var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
	
			function replace( match, start, end, snippet ) {
	
				var unroll = '';
	
				for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
	
					unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );
	
				}
	
				return unroll;
	
			}
	
			return string.replace( pattern, replace );
	
		}
	
		function WebGLProgram( renderer, code, material, parameters ) {
	
			var gl = renderer.context;
	
			var extensions = material.extensions;
			var defines = material.defines;
	
			var vertexShader = material.__webglShader.vertexShader;
			var fragmentShader = material.__webglShader.fragmentShader;
	
			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
	
			if ( parameters.shadowMapType === PCFShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
	
			} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
	
			}
	
			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
	
			if ( parameters.envMap ) {
	
				switch ( material.envMap.mapping ) {
	
					case CubeReflectionMapping:
					case CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;
	
					case CubeUVReflectionMapping:
					case CubeUVRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
						break;
	
					case EquirectangularReflectionMapping:
					case EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;
	
					case SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;
	
				}
	
				switch ( material.envMap.mapping ) {
	
					case CubeRefractionMapping:
					case EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;
	
				}
	
				switch ( material.combine ) {
	
					case MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;
	
					case MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;
	
					case AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;
	
				}
	
			}
	
			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
	
			// console.log( 'building new program ' );
	
			//
	
			var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );
	
			var customDefines = generateDefines( defines );
	
			//
	
			var program = gl.createProgram();
	
			var prefixVertex, prefixFragment;
	
			if ( material.isRawShaderMaterial ) {
	
				prefixVertex = [
	
					customDefines,
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
				prefixFragment = [
	
					customExtensions,
					customDefines,
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
			} else {
	
				prefixVertex = [
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + material.__webglShader.name,
	
					customDefines,
	
					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					'#define MAX_BONES ' + parameters.maxBones,
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
	
					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',
	
					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',
	
					'#ifdef USE_COLOR',
	
					'	attribute vec3 color;',
	
					'#endif',
	
					'#ifdef USE_MORPHTARGETS',
	
					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',
	
					'	#ifdef USE_MORPHNORMALS',
	
					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',
	
					'	#else',
	
					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',
	
					'	#endif',
	
					'#endif',
	
					'#ifdef USE_SKINNING',
	
					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',
	
					'#endif',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
				prefixFragment = [
	
					customExtensions,
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + material.__webglShader.name,
	
					customDefines,
	
					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
					'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',
	
					parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',
	
					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',
	
					( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
					( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
					( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',
	
					( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
					parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
					parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
					parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
					parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',
	
					parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
			}
	
			vertexShader = parseIncludes( vertexShader, parameters );
			vertexShader = replaceLightNums( vertexShader, parameters );
	
			fragmentShader = parseIncludes( fragmentShader, parameters );
			fragmentShader = replaceLightNums( fragmentShader, parameters );
	
			if ( ! material.isShaderMaterial ) {
	
				vertexShader = unrollLoops( vertexShader );
				fragmentShader = unrollLoops( fragmentShader );
	
			}
	
			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;
	
			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );
	
			var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );
	
			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );
	
			// Force a particular attribute to index 0.
	
			if ( material.index0AttributeName !== undefined ) {
	
				gl.bindAttribLocation( program, 0, material.index0AttributeName );
	
			} else if ( parameters.morphTargets === true ) {
	
				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );
	
			}
	
			gl.linkProgram( program );
	
			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );
	
			var runnable = true;
			var haveDiagnostics = true;
	
			// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
			// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );
	
			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {
	
				runnable = false;
	
				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );
	
			} else if ( programLog !== '' ) {
	
				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
	
			} else if ( vertexLog === '' || fragmentLog === '' ) {
	
				haveDiagnostics = false;
	
			}
	
			if ( haveDiagnostics ) {
	
				this.diagnostics = {
	
					runnable: runnable,
					material: material,
	
					programLog: programLog,
	
					vertexShader: {
	
						log: vertexLog,
						prefix: prefixVertex
	
					},
	
					fragmentShader: {
	
						log: fragmentLog,
						prefix: prefixFragment
	
					}
	
				};
	
			}
	
			// clean up
	
			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );
	
			// set up caching for uniform locations
	
			var cachedUniforms;
	
			this.getUniforms = function() {
	
				if ( cachedUniforms === undefined ) {
	
					cachedUniforms =
							new WebGLUniforms( gl, program, renderer );
	
				}
	
				return cachedUniforms;
	
			};
	
			// set up caching for attribute locations
	
			var cachedAttributes;
	
			this.getAttributes = function() {
	
				if ( cachedAttributes === undefined ) {
	
					cachedAttributes = fetchAttributeLocations( gl, program );
	
				}
	
				return cachedAttributes;
	
			};
	
			// free resource
	
			this.destroy = function() {
	
				gl.deleteProgram( program );
				this.program = undefined;
	
			};
	
			// DEPRECATED
	
			Object.defineProperties( this, {
	
				uniforms: {
					get: function() {
	
						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();
	
					}
				},
	
				attributes: {
					get: function() {
	
						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();
	
					}
				}
	
			} );
	
	
			//
	
			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;
	
			return this;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLPrograms( renderer, capabilities ) {
	
			var programs = [];
	
			var shaderIDs = {
				MeshDepthMaterial: 'depth',
				MeshNormalMaterial: 'normal',
				MeshBasicMaterial: 'basic',
				MeshLambertMaterial: 'lambert',
				MeshPhongMaterial: 'phong',
				MeshStandardMaterial: 'physical',
				MeshPhysicalMaterial: 'physical',
				LineBasicMaterial: 'basic',
				LineDashedMaterial: 'dashed',
				PointsMaterial: 'points'
			};
	
			var parameterNames = [
				"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
				"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
				"roughnessMap", "metalnessMap",
				"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
				"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
				"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
				"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
				"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
				"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
				"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking"
			];
	
	
			function allocateBones( object ) {
	
				if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {
	
					return 1024;
	
				} else {
	
					// default for when object is not specified
					// ( for example when prebuilding shader to be used with multiple objects )
					//
					//  - leave some extra space for other uniforms
					//  - limit here is ANGLE's 254 max uniform vectors
					//    (up to 54 should be safe)
	
					var nVertexUniforms = capabilities.maxVertexUniforms;
					var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
	
					var maxBones = nVertexMatrices;
	
					if ( object !== undefined && (object && object.isSkinnedMesh) ) {
	
						maxBones = Math.min( object.skeleton.bones.length, maxBones );
	
						if ( maxBones < object.skeleton.bones.length ) {
	
							console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );
	
						}
	
					}
	
					return maxBones;
	
				}
	
			}
	
			function getTextureEncodingFromMap( map, gammaOverrideLinear ) {
	
				var encoding;
	
				if ( ! map ) {
	
					encoding = LinearEncoding;
	
				} else if ( (map && map.isTexture) ) {
	
					encoding = map.encoding;
	
				} else if ( (map && map.isWebGLRenderTarget) ) {
	
					console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
					encoding = map.texture.encoding;
	
				}
	
				// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
				if ( encoding === LinearEncoding && gammaOverrideLinear ) {
	
					encoding = GammaEncoding;
	
				}
	
				return encoding;
	
			}
	
			this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {
	
				var shaderID = shaderIDs[ material.type ];
	
				// heuristics to create shader parameters according to lights in the scene
				// (not to blow over maxLights budget)
	
				var maxBones = allocateBones( object );
				var precision = renderer.getPrecision();
	
				if ( material.precision !== null ) {
	
					precision = capabilities.getMaxPrecision( material.precision );
	
					if ( precision !== material.precision ) {
	
						console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
	
					}
	
				}
	
				var currentRenderTarget = renderer.getCurrentRenderTarget();
	
				var parameters = {
	
					shaderID: shaderID,
	
					precision: precision,
					supportsVertexTextures: capabilities.vertexTextures,
					outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
					map: !! material.map,
					mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
					envMap: !! material.envMap,
					envMapMode: material.envMap && material.envMap.mapping,
					envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
					envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
					lightMap: !! material.lightMap,
					aoMap: !! material.aoMap,
					emissiveMap: !! material.emissiveMap,
					emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
					bumpMap: !! material.bumpMap,
					normalMap: !! material.normalMap,
					displacementMap: !! material.displacementMap,
					roughnessMap: !! material.roughnessMap,
					metalnessMap: !! material.metalnessMap,
					specularMap: !! material.specularMap,
					alphaMap: !! material.alphaMap,
	
					combine: material.combine,
	
					vertexColors: material.vertexColors,
	
					fog: !! fog,
					useFog: material.fog,
					fogExp: (fog && fog.isFogExp2),
	
					flatShading: material.shading === FlatShading,
	
					sizeAttenuation: material.sizeAttenuation,
					logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
	
					skinning: material.skinning,
					maxBones: maxBones,
					useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,
	
					morphTargets: material.morphTargets,
					morphNormals: material.morphNormals,
					maxMorphTargets: renderer.maxMorphTargets,
					maxMorphNormals: renderer.maxMorphNormals,
	
					numDirLights: lights.directional.length,
					numPointLights: lights.point.length,
					numSpotLights: lights.spot.length,
					numHemiLights: lights.hemi.length,
	
					numClippingPlanes: nClipPlanes,
					numClipIntersection: nClipIntersection,
	
					shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
					shadowMapType: renderer.shadowMap.type,
	
					toneMapping: renderer.toneMapping,
					physicallyCorrectLights: renderer.physicallyCorrectLights,
	
					premultipliedAlpha: material.premultipliedAlpha,
	
					alphaTest: material.alphaTest,
					doubleSided: material.side === DoubleSide,
					flipSided: material.side === BackSide,
	
					depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false
	
				};
	
				return parameters;
	
			};
	
			this.getProgramCode = function ( material, parameters ) {
	
				var array = [];
	
				if ( parameters.shaderID ) {
	
					array.push( parameters.shaderID );
	
				} else {
	
					array.push( material.fragmentShader );
					array.push( material.vertexShader );
	
				}
	
				if ( material.defines !== undefined ) {
	
					for ( var name in material.defines ) {
	
						array.push( name );
						array.push( material.defines[ name ] );
	
					}
	
				}
	
				for ( var i = 0; i < parameterNames.length; i ++ ) {
	
					array.push( parameters[ parameterNames[ i ] ] );
	
				}
	
				return array.join();
	
			};
	
			this.acquireProgram = function ( material, parameters, code ) {
	
				var program;
	
				// Check if code has been already compiled
				for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
	
					var programInfo = programs[ p ];
	
					if ( programInfo.code === code ) {
	
						program = programInfo;
						++ program.usedTimes;
	
						break;
	
					}
	
				}
	
				if ( program === undefined ) {
	
					program = new WebGLProgram( renderer, code, material, parameters );
					programs.push( program );
	
				}
	
				return program;
	
			};
	
			this.releaseProgram = function( program ) {
	
				if ( -- program.usedTimes === 0 ) {
	
					// Remove from unordered set
					var i = programs.indexOf( program );
					programs[ i ] = programs[ programs.length - 1 ];
					programs.pop();
	
					// Free WebGL resources
					program.destroy();
	
				}
	
			};
	
			// Exposed for resource monitoring & error feedback via renderer.info:
			this.programs = programs;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLGeometries( gl, properties, info ) {
	
			var geometries = {};
	
			function onGeometryDispose( event ) {
	
				var geometry = event.target;
				var buffergeometry = geometries[ geometry.id ];
	
				if ( buffergeometry.index !== null ) {
	
					deleteAttribute( buffergeometry.index );
	
				}
	
				deleteAttributes( buffergeometry.attributes );
	
				geometry.removeEventListener( 'dispose', onGeometryDispose );
	
				delete geometries[ geometry.id ];
	
				// TODO
	
				var property = properties.get( geometry );
	
				if ( property.wireframe ) {
	
					deleteAttribute( property.wireframe );
	
				}
	
				properties.delete( geometry );
	
				var bufferproperty = properties.get( buffergeometry );
	
				if ( bufferproperty.wireframe ) {
	
					deleteAttribute( bufferproperty.wireframe );
	
				}
	
				properties.delete( buffergeometry );
	
				//
	
				info.memory.geometries --;
	
			}
	
			function getAttributeBuffer( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) {
	
					return properties.get( attribute.data ).__webglBuffer;
	
				}
	
				return properties.get( attribute ).__webglBuffer;
	
			}
	
			function deleteAttribute( attribute ) {
	
				var buffer = getAttributeBuffer( attribute );
	
				if ( buffer !== undefined ) {
	
					gl.deleteBuffer( buffer );
					removeAttributeBuffer( attribute );
	
				}
	
			}
	
			function deleteAttributes( attributes ) {
	
				for ( var name in attributes ) {
	
					deleteAttribute( attributes[ name ] );
	
				}
	
			}
	
			function removeAttributeBuffer( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) {
	
					properties.delete( attribute.data );
	
				} else {
	
					properties.delete( attribute );
	
				}
	
			}
	
			return {
	
				get: function ( object ) {
	
					var geometry = object.geometry;
	
					if ( geometries[ geometry.id ] !== undefined ) {
	
						return geometries[ geometry.id ];
	
					}
	
					geometry.addEventListener( 'dispose', onGeometryDispose );
	
					var buffergeometry;
	
					if ( geometry.isBufferGeometry ) {
	
						buffergeometry = geometry;
	
					} else if ( geometry.isGeometry ) {
	
						if ( geometry._bufferGeometry === undefined ) {
	
							geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
	
						}
	
						buffergeometry = geometry._bufferGeometry;
	
					}
	
					geometries[ geometry.id ] = buffergeometry;
	
					info.memory.geometries ++;
	
					return buffergeometry;
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLObjects( gl, properties, info ) {
	
			var geometries = new WebGLGeometries( gl, properties, info );
	
			//
	
			function update( object ) {
	
				// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.
	
				var geometry = geometries.get( object );
	
				if ( object.geometry.isGeometry ) {
	
					geometry.updateFromObject( object );
	
				}
	
				var index = geometry.index;
				var attributes = geometry.attributes;
	
				if ( index !== null ) {
	
					updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );
	
				}
	
				for ( var name in attributes ) {
	
					updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );
	
				}
	
				// morph targets
	
				var morphAttributes = geometry.morphAttributes;
	
				for ( var name in morphAttributes ) {
	
					var array = morphAttributes[ name ];
	
					for ( var i = 0, l = array.length; i < l; i ++ ) {
	
						updateAttribute( array[ i ], gl.ARRAY_BUFFER );
	
					}
	
				}
	
				return geometry;
	
			}
	
			function updateAttribute( attribute, bufferType ) {
	
				var data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;
	
				var attributeProperties = properties.get( data );
	
				if ( attributeProperties.__webglBuffer === undefined ) {
	
					createBuffer( attributeProperties, data, bufferType );
	
				} else if ( attributeProperties.version !== data.version ) {
	
					updateBuffer( attributeProperties, data, bufferType );
	
				}
	
			}
	
			function createBuffer( attributeProperties, data, bufferType ) {
	
				attributeProperties.__webglBuffer = gl.createBuffer();
				gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );
	
				var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
	
				gl.bufferData( bufferType, data.array, usage );
	
				attributeProperties.version = data.version;
	
			}
	
			function updateBuffer( attributeProperties, data, bufferType ) {
	
				gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );
	
				if ( data.dynamic === false ) {
	
					gl.bufferData( bufferType, data.array, gl.STATIC_DRAW );
	
				} else if ( data.updateRange.count === - 1 ) {
	
					// Not using update ranges
	
					gl.bufferSubData( bufferType, 0, data.array );
	
				} else if ( data.updateRange.count === 0 ) {
	
					console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );
	
				} else {
	
					gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
									  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );
	
					data.updateRange.count = 0; // reset range
	
				}
	
				attributeProperties.version = data.version;
	
			}
	
			function getAttributeBuffer( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) {
	
					return properties.get( attribute.data ).__webglBuffer;
	
				}
	
				return properties.get( attribute ).__webglBuffer;
	
			}
	
			function getWireframeAttribute( geometry ) {
	
				var property = properties.get( geometry );
	
				if ( property.wireframe !== undefined ) {
	
					return property.wireframe;
	
				}
	
				var indices = [];
	
				var index = geometry.index;
				var attributes = geometry.attributes;
				var position = attributes.position;
	
				// console.time( 'wireframe' );
	
				if ( index !== null ) {
	
					var edges = {};
					var array = index.array;
	
					for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
						var a = array[ i + 0 ];
						var b = array[ i + 1 ];
						var c = array[ i + 2 ];
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				} else {
	
					var array = attributes.position.array;
	
					for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
	
						var a = i + 0;
						var b = i + 1;
						var c = i + 2;
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				}
	
				// console.timeEnd( 'wireframe' );
	
				var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
				var attribute = new BufferAttribute( new TypeArray( indices ), 1 );
	
				updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );
	
				property.wireframe = attribute;
	
				return attribute;
	
			}
	
			return {
	
				getAttributeBuffer: getAttributeBuffer,
				getWireframeAttribute: getWireframeAttribute,
	
				update: update
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {
	
			var _infoMemory = info.memory;
			var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );
	
			//
	
			function clampToMaxSize( image, maxSize ) {
	
				if ( image.width > maxSize || image.height > maxSize ) {
	
					// Warning: Scaling through the canvas will only work with images that use
					// premultiplied alpha.
	
					var scale = maxSize / Math.max( image.width, image.height );
	
					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = Math.floor( image.width * scale );
					canvas.height = Math.floor( image.height * scale );
	
					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );
	
					console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
					return canvas;
	
				}
	
				return image;
	
			}
	
			function isPowerOfTwo( image ) {
	
				return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );
	
			}
	
			function makePowerOfTwo( image ) {
	
				if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {
	
					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = _Math.nearestPowerOfTwo( image.width );
					canvas.height = _Math.nearestPowerOfTwo( image.height );
	
					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, canvas.width, canvas.height );
	
					console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
					return canvas;
	
				}
	
				return image;
	
			}
	
			function textureNeedsPowerOfTwo( texture ) {
	
				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;
				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;
	
				return false;
	
			}
	
			// Fallback filters for non-power-of-2 textures
	
			function filterFallback( f ) {
	
				if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {
	
					return _gl.NEAREST;
	
				}
	
				return _gl.LINEAR;
	
			}
	
			//
	
			function onTextureDispose( event ) {
	
				var texture = event.target;
	
				texture.removeEventListener( 'dispose', onTextureDispose );
	
				deallocateTexture( texture );
	
				_infoMemory.textures --;
	
	
			}
	
			function onRenderTargetDispose( event ) {
	
				var renderTarget = event.target;
	
				renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
	
				deallocateRenderTarget( renderTarget );
	
				_infoMemory.textures --;
	
			}
	
			//
	
			function deallocateTexture( texture ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.image && textureProperties.__image__webglTextureCube ) {
	
					// cube texture
	
					_gl.deleteTexture( textureProperties.__image__webglTextureCube );
	
				} else {
	
					// 2D texture
	
					if ( textureProperties.__webglInit === undefined ) return;
	
					_gl.deleteTexture( textureProperties.__webglTexture );
	
				}
	
				// remove all webgl properties
				properties.delete( texture );
	
			}
	
			function deallocateRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				if ( ! renderTarget ) return;
	
				if ( textureProperties.__webglTexture !== undefined ) {
	
					_gl.deleteTexture( textureProperties.__webglTexture );
	
				}
	
				if ( renderTarget.depthTexture ) {
	
					renderTarget.depthTexture.dispose();
	
				}
	
				if ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {
	
					for ( var i = 0; i < 6; i ++ ) {
	
						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
						if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
	
					}
	
				} else {
	
					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
	
				}
	
				properties.delete( renderTarget.texture );
				properties.delete( renderTarget );
	
			}
	
			//
	
	
	
			function setTexture2D( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					var image = texture.image;
	
					if ( image === undefined ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );
	
					} else if ( image.complete === false ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );
	
					} else {
	
						uploadTexture( textureProperties, texture, slot );
						return;
	
					}
	
				}
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
			}
	
			function setTextureCube( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.image.length === 6 ) {
	
					if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
						if ( ! textureProperties.__image__webglTextureCube ) {
	
							texture.addEventListener( 'dispose', onTextureDispose );
	
							textureProperties.__image__webglTextureCube = _gl.createTexture();
	
							_infoMemory.textures ++;
	
						}
	
						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
						_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
	
						var isCompressed = (texture && texture.isCompressedTexture);
						var isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);
	
						var cubeImage = [];
	
						for ( var i = 0; i < 6; i ++ ) {
	
							if ( ! isCompressed && ! isDataTexture ) {
	
								cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );
	
							} else {
	
								cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
	
							}
	
						}
	
						var image = cubeImage[ 0 ],
						isPowerOfTwoImage = isPowerOfTwo( image ),
						glFormat = paramThreeToGL( texture.format ),
						glType = paramThreeToGL( texture.type );
	
						setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );
	
						for ( var i = 0; i < 6; i ++ ) {
	
							if ( ! isCompressed ) {
	
								if ( isDataTexture ) {
	
									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
	
								} else {
	
									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );
	
								}
	
							} else {
	
								var mipmap, mipmaps = cubeImage[ i ].mipmaps;
	
								for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
	
									mipmap = mipmaps[ j ];
	
									if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
										if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
											state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
										} else {
	
											console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );
	
										}
	
									} else {
	
										state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
									}
	
								}
	
							}
	
						}
	
						if ( texture.generateMipmaps && isPowerOfTwoImage ) {
	
							_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
	
						}
	
						textureProperties.__version = texture.version;
	
						if ( texture.onUpdate ) texture.onUpdate( texture );
	
					} else {
	
						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
					}
	
				}
	
			}
	
			function setTextureCubeDynamic( texture, slot ) {
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );
	
			}
	
			function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {
	
				var extension;
	
				if ( isPowerOfTwoImage ) {
	
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );
	
					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );
	
				} else {
	
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
	
					if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );
	
					}
	
					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );
	
					if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );
	
					}
	
				}
	
				extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension ) {
	
					if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
					if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;
	
					if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
	
						_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
						properties.get( texture ).__currentAnisotropy = texture.anisotropy;
	
					}
	
				}
	
			}
	
			function uploadTexture( textureProperties, texture, slot ) {
	
				if ( textureProperties.__webglInit === undefined ) {
	
					textureProperties.__webglInit = true;
	
					texture.addEventListener( 'dispose', onTextureDispose );
	
					textureProperties.__webglTexture = _gl.createTexture();
	
					_infoMemory.textures ++;
	
				}
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
	
				var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );
	
				if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {
	
					image = makePowerOfTwo( image );
	
				}
	
				var isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );
	
				setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );
	
				var mipmap, mipmaps = texture.mipmaps;
	
				if ( (texture && texture.isDepthTexture) ) {
	
					// populate depth texture with dummy data
	
					var internalFormat = _gl.DEPTH_COMPONENT;
	
					if ( texture.type === FloatType ) {
	
						if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
						internalFormat = _gl.DEPTH_COMPONENT32F;
	
					} else if ( _isWebGL2 ) {
	
						// WebGL 2.0 requires signed internalformat for glTexImage2D
						internalFormat = _gl.DEPTH_COMPONENT16;
	
					}
	
					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.format === DepthStencilFormat ) {
	
						internalFormat = _gl.DEPTH_STENCIL;
	
					}
	
					state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );
	
				} else if ( (texture && texture.isDataTexture) ) {
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
						texture.generateMipmaps = false;
	
					} else {
	
						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );
	
					}
	
				} else if ( (texture && texture.isCompressedTexture) ) {
	
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
						mipmap = mipmaps[ i ];
	
						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
							if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
								state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
							} else {
	
								console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );
	
							}
	
						} else {
	
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
					}
	
				} else {
	
					// regular Texture (image, video, canvas)
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );
	
						}
	
						texture.generateMipmaps = false;
	
					} else {
	
						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );
	
					}
	
				}
	
				if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );
	
				textureProperties.__version = texture.version;
	
				if ( texture.onUpdate ) texture.onUpdate( texture );
	
			}
	
			// Render targets
	
			// Setup storage for target texture and bind it to correct framebuffer
			function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
	
				var glFormat = paramThreeToGL( renderTarget.texture.format );
				var glType = paramThreeToGL( renderTarget.texture.type );
				state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
	
			}
	
			// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
			function setupRenderBufferStorage( renderbuffer, renderTarget ) {
	
				_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
	
				if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
	
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
				} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
				} else {
	
					// FIXME: We don't support !depth !stencil
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );
	
				}
	
				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
	
			}
	
			// Setup resources for a Depth Texture for a FBO (needs an extension)
			function setupDepthTexture( framebuffer, renderTarget ) {
	
				var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
				if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');
	
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	
				if ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {
	
					throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
	
				}
	
				// upload an empty depth texture with framebuffer size
				if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
						renderTarget.depthTexture.image.width !== renderTarget.width ||
						renderTarget.depthTexture.image.height !== renderTarget.height ) {
					renderTarget.depthTexture.image.width = renderTarget.width;
					renderTarget.depthTexture.image.height = renderTarget.height;
					renderTarget.depthTexture.needsUpdate = true;
				}
	
				setTexture2D( renderTarget.depthTexture, 0 );
	
				var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
	
				if ( renderTarget.depthTexture.format === DepthFormat ) {
	
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );
	
				} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
	
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );
	
				} else {
	
					throw new Error('Unknown depthTexture format')
	
				}
	
			}
	
			// Setup GL resources for a non-texture depth buffer
			function setupDepthRenderbuffer( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
	
				var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
	
				if ( renderTarget.depthTexture ) {
	
					if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');
	
					setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
	
				} else {
	
					if ( isCube ) {
	
						renderTargetProperties.__webglDepthbuffer = [];
	
						for ( var i = 0; i < 6; i ++ ) {
	
							_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
							renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
	
						}
	
					} else {
	
						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
	
					}
	
				}
	
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
	
			}
	
			// Set up GL resources for the render target
			function setupRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
	
				textureProperties.__webglTexture = _gl.createTexture();
	
				_infoMemory.textures ++;
	
				var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );
	
				// Setup framebuffer
	
				if ( isCube ) {
	
					renderTargetProperties.__webglFramebuffer = [];
	
					for ( var i = 0; i < 6; i ++ ) {
	
						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
	
					}
	
				} else {
	
					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
	
				}
	
				// Setup color buffer
	
				if ( isCube ) {
	
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );
	
					for ( var i = 0; i < 6; i ++ ) {
	
						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
	
					}
	
					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );
	
				} else {
	
					state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );
	
					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
					state.bindTexture( _gl.TEXTURE_2D, null );
	
				}
	
				// Setup depth and stencil buffers
	
				if ( renderTarget.depthBuffer ) {
	
					setupDepthRenderbuffer( renderTarget );
	
				}
	
			}
	
			function updateRenderTargetMipmap( renderTarget ) {
	
				var texture = renderTarget.texture;
	
				if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
						texture.minFilter !== NearestFilter &&
						texture.minFilter !== LinearFilter ) {
	
					var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					var webglTexture = properties.get( texture ).__webglTexture;
	
					state.bindTexture( target, webglTexture );
					_gl.generateMipmap( target );
					state.bindTexture( target, null );
	
				}
	
			}
	
			this.setTexture2D = setTexture2D;
			this.setTextureCube = setTextureCube;
			this.setTextureCubeDynamic = setTextureCubeDynamic;
			this.setupRenderTarget = setupRenderTarget;
			this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	
		}
	
		/**
		 * @author fordacious / fordacious.github.io
		 */
	
		function WebGLProperties() {
	
			var properties = {};
	
			return {
	
				get: function ( object ) {
	
					var uuid = object.uuid;
					var map = properties[ uuid ];
	
					if ( map === undefined ) {
	
						map = {};
						properties[ uuid ] = map;
	
					}
	
					return map;
	
				},
	
				delete: function ( object ) {
	
					delete properties[ object.uuid ];
	
				},
	
				clear: function () {
	
					properties = {};
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLState( gl, extensions, paramThreeToGL ) {
	
			function ColorBuffer() {
	
				var locked = false;
	
				var color = new Vector4();
				var currentColorMask = null;
				var currentColorClear = new Vector4();
	
				return {
	
					setMask: function ( colorMask ) {
	
						if ( currentColorMask !== colorMask && ! locked ) {
	
							gl.colorMask( colorMask, colorMask, colorMask, colorMask );
							currentColorMask = colorMask;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( r, g, b, a ) {
	
						color.set( r, g, b, a );
	
						if ( currentColorClear.equals( color ) === false ) {
	
							gl.clearColor( r, g, b, a );
							currentColorClear.copy( color );
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentColorMask = null;
						currentColorClear.set( 0, 0, 0, 1 );
	
					}
	
				};
	
			}
	
			function DepthBuffer() {
	
				var locked = false;
	
				var currentDepthMask = null;
				var currentDepthFunc = null;
				var currentDepthClear = null;
	
				return {
	
					setTest: function ( depthTest ) {
	
						if ( depthTest ) {
	
							enable( gl.DEPTH_TEST );
	
						} else {
	
							disable( gl.DEPTH_TEST );
	
						}
	
					},
	
					setMask: function ( depthMask ) {
	
						if ( currentDepthMask !== depthMask && ! locked ) {
	
							gl.depthMask( depthMask );
							currentDepthMask = depthMask;
	
						}
	
					},
	
					setFunc: function ( depthFunc ) {
	
						if ( currentDepthFunc !== depthFunc ) {
	
							if ( depthFunc ) {
	
								switch ( depthFunc ) {
	
									case NeverDepth:
	
										gl.depthFunc( gl.NEVER );
										break;
	
									case AlwaysDepth:
	
										gl.depthFunc( gl.ALWAYS );
										break;
	
									case LessDepth:
	
										gl.depthFunc( gl.LESS );
										break;
	
									case LessEqualDepth:
	
										gl.depthFunc( gl.LEQUAL );
										break;
	
									case EqualDepth:
	
										gl.depthFunc( gl.EQUAL );
										break;
	
									case GreaterEqualDepth:
	
										gl.depthFunc( gl.GEQUAL );
										break;
	
									case GreaterDepth:
	
										gl.depthFunc( gl.GREATER );
										break;
	
									case NotEqualDepth:
	
										gl.depthFunc( gl.NOTEQUAL );
										break;
	
									default:
	
										gl.depthFunc( gl.LEQUAL );
	
								}
	
							} else {
	
								gl.depthFunc( gl.LEQUAL );
	
							}
	
							currentDepthFunc = depthFunc;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( depth ) {
	
						if ( currentDepthClear !== depth ) {
	
							gl.clearDepth( depth );
							currentDepthClear = depth;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentDepthMask = null;
						currentDepthFunc = null;
						currentDepthClear = null;
	
					}
	
				};
	
			}
	
			function StencilBuffer() {
	
				var locked = false;
	
				var currentStencilMask = null;
				var currentStencilFunc = null;
				var currentStencilRef = null;
				var currentStencilFuncMask = null;
				var currentStencilFail  = null;
				var currentStencilZFail = null;
				var currentStencilZPass = null;
				var currentStencilClear = null;
	
				return {
	
					setTest: function ( stencilTest ) {
	
						if ( stencilTest ) {
	
							enable( gl.STENCIL_TEST );
	
						} else {
	
							disable( gl.STENCIL_TEST );
	
						}
	
					},
	
					setMask: function ( stencilMask ) {
	
						if ( currentStencilMask !== stencilMask && ! locked ) {
	
							gl.stencilMask( stencilMask );
							currentStencilMask = stencilMask;
	
						}
	
					},
	
					setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
	
						if ( currentStencilFunc !== stencilFunc ||
						     currentStencilRef 	!== stencilRef 	||
						     currentStencilFuncMask !== stencilMask ) {
	
							gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );
	
							currentStencilFunc = stencilFunc;
							currentStencilRef  = stencilRef;
							currentStencilFuncMask = stencilMask;
	
						}
	
					},
	
					setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
	
						if ( currentStencilFail	 !== stencilFail 	||
						     currentStencilZFail !== stencilZFail ||
						     currentStencilZPass !== stencilZPass ) {
	
							gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );
	
							currentStencilFail  = stencilFail;
							currentStencilZFail = stencilZFail;
							currentStencilZPass = stencilZPass;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( stencil ) {
	
						if ( currentStencilClear !== stencil ) {
	
							gl.clearStencil( stencil );
							currentStencilClear = stencil;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentStencilMask = null;
						currentStencilFunc = null;
						currentStencilRef = null;
						currentStencilFuncMask = null;
						currentStencilFail = null;
						currentStencilZFail = null;
						currentStencilZPass = null;
						currentStencilClear = null;
	
					}
	
				};
	
			}
	
			//
	
			var colorBuffer = new ColorBuffer();
			var depthBuffer = new DepthBuffer();
			var stencilBuffer = new StencilBuffer();
	
			var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var newAttributes = new Uint8Array( maxVertexAttributes );
			var enabledAttributes = new Uint8Array( maxVertexAttributes );
			var attributeDivisors = new Uint8Array( maxVertexAttributes );
	
			var capabilities = {};
	
			var compressedTextureFormats = null;
	
			var currentBlending = null;
			var currentBlendEquation = null;
			var currentBlendSrc = null;
			var currentBlendDst = null;
			var currentBlendEquationAlpha = null;
			var currentBlendSrcAlpha = null;
			var currentBlendDstAlpha = null;
			var currentPremultipledAlpha = false;
	
			var currentFlipSided = null;
			var currentCullFace = null;
	
			var currentLineWidth = null;
	
			var currentPolygonOffsetFactor = null;
			var currentPolygonOffsetUnits = null;
	
			var currentScissorTest = null;
	
			var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	
			var currentTextureSlot = null;
			var currentBoundTextures = {};
	
			var currentScissor = new Vector4();
			var currentViewport = new Vector4();
	
			function createTexture( type, target, count ) {
	
				var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
				var texture = gl.createTexture();
	
				gl.bindTexture( type, texture );
				gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
				gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
	
				for ( var i = 0; i < count; i ++ ) {
	
					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );
	
				}
	
				return texture;
	
			}
	
			var emptyTextures = {};
			emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
			emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );
	
			//
	
			function init() {
	
				clearColor( 0, 0, 0, 1 );
				clearDepth( 1 );
				clearStencil( 0 );
	
				enable( gl.DEPTH_TEST );
				setDepthFunc( LessEqualDepth );
	
				setFlipSided( false );
				setCullFace( CullFaceBack );
				enable( gl.CULL_FACE );
	
				enable( gl.BLEND );
				setBlending( NormalBlending );
	
			}
	
			function initAttributes() {
	
				for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
	
					newAttributes[ i ] = 0;
	
				}
	
			}
	
			function enableAttribute( attribute ) {
	
				newAttributes[ attribute ] = 1;
	
				if ( enabledAttributes[ attribute ] === 0 ) {
	
					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;
	
				}
	
				if ( attributeDivisors[ attribute ] !== 0 ) {
	
					var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
					extension.vertexAttribDivisorANGLE( attribute, 0 );
					attributeDivisors[ attribute ] = 0;
	
				}
	
			}
	
			function enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {
	
				newAttributes[ attribute ] = 1;
	
				if ( enabledAttributes[ attribute ] === 0 ) {
	
					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;
	
				}
	
				if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
	
					extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
					attributeDivisors[ attribute ] = meshPerAttribute;
	
				}
	
			}
	
			function disableUnusedAttributes() {
	
				for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
	
					if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
			}
	
			function enable( id ) {
	
				if ( capabilities[ id ] !== true ) {
	
					gl.enable( id );
					capabilities[ id ] = true;
	
				}
	
			}
	
			function disable( id ) {
	
				if ( capabilities[ id ] !== false ) {
	
					gl.disable( id );
					capabilities[ id ] = false;
	
				}
	
			}
	
			function getCompressedTextureFormats() {
	
				if ( compressedTextureFormats === null ) {
	
					compressedTextureFormats = [];
	
					if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {
	
						var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );
	
						for ( var i = 0; i < formats.length; i ++ ) {
	
							compressedTextureFormats.push( formats[ i ] );
	
						}
	
					}
	
				}
	
				return compressedTextureFormats;
	
			}
	
			function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
	
				if ( blending !== NoBlending ) {
	
					enable( gl.BLEND );
	
				} else {
	
					disable( gl.BLEND );
	
				}
	
				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
	
					if ( blending === AdditiveBlending ) {
	
						if ( premultipliedAlpha ) {
	
							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );
	
						} else {
	
							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
	
						}
	
					} else if ( blending === SubtractiveBlending ) {
	
						if ( premultipliedAlpha ) {
	
							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );
	
						} else {
	
							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );
	
						}
	
					} else if ( blending === MultiplyBlending ) {
	
						if ( premultipliedAlpha ) {
	
							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
	
						} else {
	
							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
	
						}
	
					} else {
	
						if ( premultipliedAlpha ) {
	
							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
	
						} else {
	
							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
	
						}
	
					}
	
					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;
	
				}
	
				if ( blending === CustomBlending ) {
	
					blendEquationAlpha = blendEquationAlpha || blendEquation;
					blendSrcAlpha = blendSrcAlpha || blendSrc;
					blendDstAlpha = blendDstAlpha || blendDst;
	
					if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
	
						gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );
	
						currentBlendEquation = blendEquation;
						currentBlendEquationAlpha = blendEquationAlpha;
	
					}
	
					if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
	
						gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );
	
						currentBlendSrc = blendSrc;
						currentBlendDst = blendDst;
						currentBlendSrcAlpha = blendSrcAlpha;
						currentBlendDstAlpha = blendDstAlpha;
	
					}
	
				} else {
	
					currentBlendEquation = null;
					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendEquationAlpha = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
	
				}
	
			}
	
			// TODO Deprecate
	
			function setColorWrite( colorWrite ) {
	
				colorBuffer.setMask( colorWrite );
	
			}
	
			function setDepthTest( depthTest ) {
	
				depthBuffer.setTest( depthTest );
	
			}
	
			function setDepthWrite( depthWrite ) {
	
				depthBuffer.setMask( depthWrite );
	
			}
	
			function setDepthFunc( depthFunc ) {
	
				depthBuffer.setFunc( depthFunc );
	
			}
	
			function setStencilTest( stencilTest ) {
	
				stencilBuffer.setTest( stencilTest );
	
			}
	
			function setStencilWrite( stencilWrite ) {
	
				stencilBuffer.setMask( stencilWrite );
	
			}
	
			function setStencilFunc( stencilFunc, stencilRef, stencilMask ) {
	
				stencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );
	
			}
	
			function setStencilOp( stencilFail, stencilZFail, stencilZPass ) {
	
				stencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );
	
			}
	
			//
	
			function setFlipSided( flipSided ) {
	
				if ( currentFlipSided !== flipSided ) {
	
					if ( flipSided ) {
	
						gl.frontFace( gl.CW );
	
					} else {
	
						gl.frontFace( gl.CCW );
	
					}
	
					currentFlipSided = flipSided;
	
				}
	
			}
	
			function setCullFace( cullFace ) {
	
				if ( cullFace !== CullFaceNone ) {
	
					enable( gl.CULL_FACE );
	
					if ( cullFace !== currentCullFace ) {
	
						if ( cullFace === CullFaceBack ) {
	
							gl.cullFace( gl.BACK );
	
						} else if ( cullFace === CullFaceFront ) {
	
							gl.cullFace( gl.FRONT );
	
						} else {
	
							gl.cullFace( gl.FRONT_AND_BACK );
	
						}
	
					}
	
				} else {
	
					disable( gl.CULL_FACE );
	
				}
	
				currentCullFace = cullFace;
	
			}
	
			function setLineWidth( width ) {
	
				if ( width !== currentLineWidth ) {
	
					gl.lineWidth( width );
	
					currentLineWidth = width;
	
				}
	
			}
	
			function setPolygonOffset( polygonOffset, factor, units ) {
	
				if ( polygonOffset ) {
	
					enable( gl.POLYGON_OFFSET_FILL );
	
					if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
	
						gl.polygonOffset( factor, units );
	
						currentPolygonOffsetFactor = factor;
						currentPolygonOffsetUnits = units;
	
					}
	
				} else {
	
					disable( gl.POLYGON_OFFSET_FILL );
	
				}
	
			}
	
			function getScissorTest() {
	
				return currentScissorTest;
	
			}
	
			function setScissorTest( scissorTest ) {
	
				currentScissorTest = scissorTest;
	
				if ( scissorTest ) {
	
					enable( gl.SCISSOR_TEST );
	
				} else {
	
					disable( gl.SCISSOR_TEST );
	
				}
	
			}
	
			// texture
	
			function activeTexture( webglSlot ) {
	
				if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;
	
				if ( currentTextureSlot !== webglSlot ) {
	
					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;
	
				}
	
			}
	
			function bindTexture( webglType, webglTexture ) {
	
				if ( currentTextureSlot === null ) {
	
					activeTexture();
	
				}
	
				var boundTexture = currentBoundTextures[ currentTextureSlot ];
	
				if ( boundTexture === undefined ) {
	
					boundTexture = { type: undefined, texture: undefined };
					currentBoundTextures[ currentTextureSlot ] = boundTexture;
	
				}
	
				if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
	
					gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
	
					boundTexture.type = webglType;
					boundTexture.texture = webglTexture;
	
				}
	
			}
	
			function compressedTexImage2D() {
	
				try {
	
					gl.compressedTexImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( error );
	
				}
	
			}
	
			function texImage2D() {
	
				try {
	
					gl.texImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( error );
	
				}
	
			}
	
			// TODO Deprecate
	
			function clearColor( r, g, b, a ) {
	
				colorBuffer.setClear( r, g, b, a );
	
			}
	
			function clearDepth( depth ) {
	
				depthBuffer.setClear( depth );
	
			}
	
			function clearStencil( stencil ) {
	
				stencilBuffer.setClear( stencil );
	
			}
	
			//
	
			function scissor( scissor ) {
	
				if ( currentScissor.equals( scissor ) === false ) {
	
					gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
					currentScissor.copy( scissor );
	
				}
	
			}
	
			function viewport( viewport ) {
	
				if ( currentViewport.equals( viewport ) === false ) {
	
					gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
					currentViewport.copy( viewport );
	
				}
	
			}
	
			//
	
			function reset() {
	
				for ( var i = 0; i < enabledAttributes.length; i ++ ) {
	
					if ( enabledAttributes[ i ] === 1 ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
				capabilities = {};
	
				compressedTextureFormats = null;
	
				currentTextureSlot = null;
				currentBoundTextures = {};
	
				currentBlending = null;
	
				currentFlipSided = null;
				currentCullFace = null;
	
				colorBuffer.reset();
				depthBuffer.reset();
				stencilBuffer.reset();
	
			}
	
			return {
	
				buffers: {
					color: colorBuffer,
					depth: depthBuffer,
					stencil: stencilBuffer
				},
	
				init: init,
				initAttributes: initAttributes,
				enableAttribute: enableAttribute,
				enableAttributeAndDivisor: enableAttributeAndDivisor,
				disableUnusedAttributes: disableUnusedAttributes,
				enable: enable,
				disable: disable,
				getCompressedTextureFormats: getCompressedTextureFormats,
	
				setBlending: setBlending,
	
				setColorWrite: setColorWrite,
				setDepthTest: setDepthTest,
				setDepthWrite: setDepthWrite,
				setDepthFunc: setDepthFunc,
				setStencilTest: setStencilTest,
				setStencilWrite: setStencilWrite,
				setStencilFunc: setStencilFunc,
				setStencilOp: setStencilOp,
	
				setFlipSided: setFlipSided,
				setCullFace: setCullFace,
	
				setLineWidth: setLineWidth,
				setPolygonOffset: setPolygonOffset,
	
				getScissorTest: getScissorTest,
				setScissorTest: setScissorTest,
	
				activeTexture: activeTexture,
				bindTexture: bindTexture,
				compressedTexImage2D: compressedTexImage2D,
				texImage2D: texImage2D,
	
				clearColor: clearColor,
				clearDepth: clearDepth,
				clearStencil: clearStencil,
	
				scissor: scissor,
				viewport: viewport,
	
				reset: reset
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLCapabilities( gl, extensions, parameters ) {
	
			var maxAnisotropy;
	
			function getMaxAnisotropy() {
	
				if ( maxAnisotropy !== undefined ) return maxAnisotropy;
	
				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension !== null ) {
	
					maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
	
				} else {
	
					maxAnisotropy = 0;
	
				}
	
				return maxAnisotropy;
	
			}
	
			function getMaxPrecision( precision ) {
	
				if ( precision === 'highp' ) {
	
					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {
	
						return 'highp';
	
					}
	
					precision = 'mediump';
	
				}
	
				if ( precision === 'mediump' ) {
	
					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {
	
						return 'mediump';
	
					}
	
				}
	
				return 'lowp';
	
			}
	
			var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
			var maxPrecision = getMaxPrecision( precision );
	
			if ( maxPrecision !== precision ) {
	
				console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
				precision = maxPrecision;
	
			}
	
			var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );
	
			var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
			var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
			var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
			var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );
	
			var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
			var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
			var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );
	
			var vertexTextures = maxVertexTextures > 0;
			var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
			var floatVertexTextures = vertexTextures && floatFragmentTextures;
	
			return {
	
				getMaxAnisotropy: getMaxAnisotropy,
				getMaxPrecision: getMaxPrecision,
	
				precision: precision,
				logarithmicDepthBuffer: logarithmicDepthBuffer,
	
				maxTextures: maxTextures,
				maxVertexTextures: maxVertexTextures,
				maxTextureSize: maxTextureSize,
				maxCubemapSize: maxCubemapSize,
	
				maxAttributes: maxAttributes,
				maxVertexUniforms: maxVertexUniforms,
				maxVaryings: maxVaryings,
				maxFragmentUniforms: maxFragmentUniforms,
	
				vertexTextures: vertexTextures,
				floatFragmentTextures: floatFragmentTextures,
				floatVertexTextures: floatVertexTextures
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLExtensions( gl ) {
	
			var extensions = {};
	
			return {
	
				get: function ( name ) {
	
					if ( extensions[ name ] !== undefined ) {
	
						return extensions[ name ];
	
					}
	
					var extension;
	
					switch ( name ) {
	
						case 'WEBGL_depth_texture':
							extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
							break;
	
						case 'EXT_texture_filter_anisotropic':
							extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
							break;
	
						case 'WEBGL_compressed_texture_s3tc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
							break;
	
						case 'WEBGL_compressed_texture_pvrtc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
							break;
	
						case 'WEBGL_compressed_texture_etc1':
							extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
							break;
	
						default:
							extension = gl.getExtension( name );
	
					}
	
					if ( extension === null ) {
	
						console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
	
					}
	
					extensions[ name ] = extension;
	
					return extension;
	
				}
	
			};
	
		}
	
		/**
		 * @author tschw
		 */
	
		function WebGLClipping() {
	
			var scope = this,
	
				globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false,
	
				plane = new Plane(),
				viewNormalMatrix = new Matrix3(),
	
				uniform = { value: null, needsUpdate: false };
	
			this.uniform = uniform;
			this.numPlanes = 0;
			this.numIntersection = 0;
	
			this.init = function( planes, enableLocalClipping, camera ) {
	
				var enabled =
					planes.length !== 0 ||
					enableLocalClipping ||
					// enable state of previous frame - the clipping code has to
					// run another frame in order to reset the state:
					numGlobalPlanes !== 0 ||
					localClippingEnabled;
	
				localClippingEnabled = enableLocalClipping;
	
				globalState = projectPlanes( planes, camera, 0 );
				numGlobalPlanes = planes.length;
	
				return enabled;
	
			};
	
			this.beginShadows = function() {
	
				renderingShadows = true;
				projectPlanes( null );
	
			};
	
			this.endShadows = function() {
	
				renderingShadows = false;
				resetGlobalState();
	
			};
	
			this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
	
				if ( ! localClippingEnabled ||
						planes === null || planes.length === 0 ||
						renderingShadows && ! clipShadows ) {
					// there's no local clipping
	
					if ( renderingShadows ) {
						// there's no global clipping
	
						projectPlanes( null );
	
					} else {
	
						resetGlobalState();
					}
	
				} else {
	
					var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
						lGlobal = nGlobal * 4,
	
						dstArray = cache.clippingState || null;
	
					uniform.value = dstArray; // ensure unique state
	
					dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
	
					for ( var i = 0; i !== lGlobal; ++ i ) {
	
						dstArray[ i ] = globalState[ i ];
	
					}
	
					cache.clippingState = dstArray;
					this.numIntersection = clipIntersection ? this.numPlanes : 0;
					this.numPlanes += nGlobal;
	
				}
	
	
			};
	
			function resetGlobalState() {
	
				if ( uniform.value !== globalState ) {
	
					uniform.value = globalState;
					uniform.needsUpdate = numGlobalPlanes > 0;
	
				}
	
				scope.numPlanes = numGlobalPlanes;
				scope.numIntersection = 0;
	
			}
	
			function projectPlanes( planes, camera, dstOffset, skipTransform ) {
	
				var nPlanes = planes !== null ? planes.length : 0,
					dstArray = null;
	
				if ( nPlanes !== 0 ) {
	
					dstArray = uniform.value;
	
					if ( skipTransform !== true || dstArray === null ) {
	
						var flatSize = dstOffset + nPlanes * 4,
							viewMatrix = camera.matrixWorldInverse;
	
						viewNormalMatrix.getNormalMatrix( viewMatrix );
	
						if ( dstArray === null || dstArray.length < flatSize ) {
	
							dstArray = new Float32Array( flatSize );
	
						}
	
						for ( var i = 0, i4 = dstOffset;
											i !== nPlanes; ++ i, i4 += 4 ) {
	
							plane.copy( planes[ i ] ).
									applyMatrix4( viewMatrix, viewNormalMatrix );
	
							plane.normal.toArray( dstArray, i4 );
							dstArray[ i4 + 3 ] = plane.constant;
	
						}
	
					}
	
					uniform.value = dstArray;
					uniform.needsUpdate = true;
	
				}
	
				scope.numPlanes = nPlanes;
				
				return dstArray;
	
			}
	
		}
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 * @author tschw
		 */
	
		function WebGLRenderer( parameters ) {
	
			console.log( 'THREE.WebGLRenderer', REVISION );
	
			parameters = parameters || {};
	
			var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,
	
			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;
	
			var lights = [];
	
			var opaqueObjects = [];
			var opaqueObjectsLastIndex = - 1;
			var transparentObjects = [];
			var transparentObjectsLastIndex = - 1;
	
			var morphInfluences = new Float32Array( 8 );
	
			var sprites = [];
			var lensFlares = [];
	
			// public properties
	
			this.domElement = _canvas;
			this.context = null;
	
			// clearing
	
			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;
	
			// scene graph
	
			this.sortObjects = true;
	
			// user-defined clipping
	
			this.clippingPlanes = [];
			this.localClippingEnabled = false;
	
			// physically based shading
	
			this.gammaFactor = 2.0;	// for backwards compatibility
			this.gammaInput = false;
			this.gammaOutput = false;
	
			// physical lights
	
			this.physicallyCorrectLights = false;
	
			// tone mapping
	
			this.toneMapping = LinearToneMapping;
			this.toneMappingExposure = 1.0;
			this.toneMappingWhitePoint = 1.0;
	
			// morphs
	
			this.maxMorphTargets = 8;
			this.maxMorphNormals = 4;
	
			// internal properties
	
			var _this = this,
	
			// internal state cache
	
			_currentProgram = null,
			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,
			_currentGeometryProgram = '',
			_currentCamera = null,
	
			_currentScissor = new Vector4(),
			_currentScissorTest = null,
	
			_currentViewport = new Vector4(),
	
			//
	
			_usedTextureUnits = 0,
	
			//
	
			_clearColor = new Color( 0x000000 ),
			_clearAlpha = 0,
	
			_width = _canvas.width,
			_height = _canvas.height,
	
			_pixelRatio = 1,
	
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,
	
			_viewport = new Vector4( 0, 0, _width, _height ),
	
			// frustum
	
			_frustum = new Frustum(),
	
			// clipping
	
			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,
	
			_sphere = new Sphere(),
	
			// camera matrices cache
	
			_projScreenMatrix = new Matrix4(),
	
			_vector3 = new Vector3(),
	
			// light arrays cache
	
			_lights = {
	
				hash: '',
	
				ambient: [ 0, 0, 0 ],
				directional: [],
				directionalShadowMap: [],
				directionalShadowMatrix: [],
				spot: [],
				spotShadowMap: [],
				spotShadowMatrix: [],
				point: [],
				pointShadowMap: [],
				pointShadowMatrix: [],
				hemi: [],
	
				shadows: []
	
			},
	
			// info
	
			_infoRender = {
	
				calls: 0,
				vertices: 0,
				faces: 0,
				points: 0
	
			};
	
			this.info = {
	
				render: _infoRender,
				memory: {
	
					geometries: 0,
					textures: 0
	
				},
				programs: null
	
			};
	
	
			// initialize
	
			var _gl;
	
			try {
	
				var attributes = {
					alpha: _alpha,
					depth: _depth,
					stencil: _stencil,
					antialias: _antialias,
					premultipliedAlpha: _premultipliedAlpha,
					preserveDrawingBuffer: _preserveDrawingBuffer
				};
	
				_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );
	
				if ( _gl === null ) {
	
					if ( _canvas.getContext( 'webgl' ) !== null ) {
	
						throw 'Error creating WebGL context with your selected attributes.';
	
					} else {
	
						throw 'Error creating WebGL context.';
	
					}
	
				}
	
				// Some experimental-webgl implementations do not have getShaderPrecisionFormat
	
				if ( _gl.getShaderPrecisionFormat === undefined ) {
	
					_gl.getShaderPrecisionFormat = function () {
	
						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
	
					};
	
				}
	
				_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
	
			} catch ( error ) {
	
				console.error( 'THREE.WebGLRenderer: ' + error );
	
			}
	
			var extensions = new WebGLExtensions( _gl );
	
			extensions.get( 'WEBGL_depth_texture' );
			extensions.get( 'OES_texture_float' );
			extensions.get( 'OES_texture_float_linear' );
			extensions.get( 'OES_texture_half_float' );
			extensions.get( 'OES_texture_half_float_linear' );
			extensions.get( 'OES_standard_derivatives' );
			extensions.get( 'ANGLE_instanced_arrays' );
	
			if ( extensions.get( 'OES_element_index_uint' ) ) {
	
				BufferGeometry.MaxIndex = 4294967296;
	
			}
	
			var capabilities = new WebGLCapabilities( _gl, extensions, parameters );
	
			var state = new WebGLState( _gl, extensions, paramThreeToGL );
			var properties = new WebGLProperties();
			var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
			var objects = new WebGLObjects( _gl, properties, this.info );
			var programCache = new WebGLPrograms( this, capabilities );
			var lightCache = new WebGLLights();
	
			this.info.programs = programCache.programs;
	
			var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
			var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );
	
			//
	
			var backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			var backgroundCamera2 = new PerspectiveCamera();
			var backgroundPlaneMesh = new Mesh(
				new PlaneBufferGeometry( 2, 2 ),
				new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
			);
			var backgroundBoxShader = ShaderLib[ 'cube' ];
			var backgroundBoxMesh = new Mesh(
				new BoxBufferGeometry( 5, 5, 5 ),
				new ShaderMaterial( {
					uniforms: backgroundBoxShader.uniforms,
					vertexShader: backgroundBoxShader.vertexShader,
					fragmentShader: backgroundBoxShader.fragmentShader,
					side: BackSide,
					depthTest: false,
					depthWrite: false,
					fog: false
				} )
			);
	
			//
	
			function getTargetPixelRatio() {
	
				return _currentRenderTarget === null ? _pixelRatio : 1;
	
			}
	
			function glClearColor( r, g, b, a ) {
	
				if ( _premultipliedAlpha === true ) {
	
					r *= a; g *= a; b *= a;
	
				}
	
				state.clearColor( r, g, b, a );
	
			}
	
			function setDefaultGLState() {
	
				state.init();
	
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );
	
				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
			}
	
			function resetGLState() {
	
				_currentProgram = null;
				_currentCamera = null;
	
				_currentGeometryProgram = '';
				_currentMaterialId = - 1;
	
				state.reset();
	
			}
	
			setDefaultGLState();
	
			this.context = _gl;
			this.capabilities = capabilities;
			this.extensions = extensions;
			this.properties = properties;
			this.state = state;
	
			// shadow map
	
			var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );
	
			this.shadowMap = shadowMap;
	
	
			// Plugins
	
			var spritePlugin = new SpritePlugin( this, sprites );
			var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );
	
			// API
	
			this.getContext = function () {
	
				return _gl;
	
			};
	
			this.getContextAttributes = function () {
	
				return _gl.getContextAttributes();
	
			};
	
			this.forceContextLoss = function () {
	
				extensions.get( 'WEBGL_lose_context' ).loseContext();
	
			};
	
			this.getMaxAnisotropy = function () {
	
				return capabilities.getMaxAnisotropy();
	
			};
	
			this.getPrecision = function () {
	
				return capabilities.precision;
	
			};
	
			this.getPixelRatio = function () {
	
				return _pixelRatio;
	
			};
	
			this.setPixelRatio = function ( value ) {
	
				if ( value === undefined ) return;
	
				_pixelRatio = value;
	
				this.setSize( _viewport.z, _viewport.w, false );
	
			};
	
			this.getSize = function () {
	
				return {
					width: _width,
					height: _height
				};
	
			};
	
			this.setSize = function ( width, height, updateStyle ) {
	
				_width = width;
				_height = height;
	
				_canvas.width = width * _pixelRatio;
				_canvas.height = height * _pixelRatio;
	
				if ( updateStyle !== false ) {
	
					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';
	
				}
	
				this.setViewport( 0, 0, width, height );
	
			};
	
			this.setViewport = function ( x, y, width, height ) {
	
				state.viewport( _viewport.set( x, y, width, height ) );
	
			};
	
			this.setScissor = function ( x, y, width, height ) {
	
				state.scissor( _scissor.set( x, y, width, height ) );
	
			};
	
			this.setScissorTest = function ( boolean ) {
	
				state.setScissorTest( _scissorTest = boolean );
	
			};
	
			// Clearing
	
			this.getClearColor = function () {
	
				return _clearColor;
	
			};
	
			this.setClearColor = function ( color, alpha ) {
	
				_clearColor.set( color );
	
				_clearAlpha = alpha !== undefined ? alpha : 1;
	
				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
			};
	
			this.getClearAlpha = function () {
	
				return _clearAlpha;
	
			};
	
			this.setClearAlpha = function ( alpha ) {
	
				_clearAlpha = alpha;
	
				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
			};
	
			this.clear = function ( color, depth, stencil ) {
	
				var bits = 0;
	
				if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
				if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;
	
				_gl.clear( bits );
	
			};
	
			this.clearColor = function () {
	
				this.clear( true, false, false );
	
			};
	
			this.clearDepth = function () {
	
				this.clear( false, true, false );
	
			};
	
			this.clearStencil = function () {
	
				this.clear( false, false, true );
	
			};
	
			this.clearTarget = function ( renderTarget, color, depth, stencil ) {
	
				this.setRenderTarget( renderTarget );
				this.clear( color, depth, stencil );
	
			};
	
			// Reset
	
			this.resetGLState = resetGLState;
	
			this.dispose = function() {
	
				transparentObjects = [];
				transparentObjectsLastIndex = -1;
				opaqueObjects = [];
				opaqueObjectsLastIndex = -1;
	
				_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
	
			};
	
			// Events
	
			function onContextLost( event ) {
	
				event.preventDefault();
	
				resetGLState();
				setDefaultGLState();
	
				properties.clear();
	
			}
	
			function onMaterialDispose( event ) {
	
				var material = event.target;
	
				material.removeEventListener( 'dispose', onMaterialDispose );
	
				deallocateMaterial( material );
	
			}
	
			// Buffer deallocation
	
			function deallocateMaterial( material ) {
	
				releaseMaterialProgramReference( material );
	
				properties.delete( material );
	
			}
	
	
			function releaseMaterialProgramReference( material ) {
	
				var programInfo = properties.get( material ).program;
	
				material.program = undefined;
	
				if ( programInfo !== undefined ) {
	
					programCache.releaseProgram( programInfo );
	
				}
	
			}
	
			// Buffer rendering
	
			this.renderBufferImmediate = function ( object, program, material ) {
	
				state.initAttributes();
	
				var buffers = properties.get( object );
	
				if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
				if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
				if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
				if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
	
				var attributes = program.getAttributes();
	
				if ( object.hasPositions ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( attributes.position );
					_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasNormals ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );
	
					if ( ! material.isMeshPhongMaterial &&
					     ! material.isMeshStandardMaterial &&
					       material.shading === FlatShading ) {
	
						for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {
	
							var array = object.normalArray;
	
							var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
							var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
							var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;
	
							array[ i + 0 ] = nx;
							array[ i + 1 ] = ny;
							array[ i + 2 ] = nz;
	
							array[ i + 3 ] = nx;
							array[ i + 4 ] = ny;
							array[ i + 5 ] = nz;
	
							array[ i + 6 ] = nx;
							array[ i + 7 ] = ny;
							array[ i + 8 ] = nz;
	
						}
	
					}
	
					_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( attributes.normal );
	
					_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasUvs && material.map ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( attributes.uv );
	
					_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasColors && material.vertexColors !== NoColors ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( attributes.color );
	
					_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				state.disableUnusedAttributes();
	
				_gl.drawArrays( _gl.TRIANGLES, 0, object.count );
	
				object.count = 0;
	
			};
	
			this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {
	
				setMaterial( material );
	
				var program = setProgram( camera, fog, material, object );
	
				var updateBuffers = false;
				var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;
	
				if ( geometryProgram !== _currentGeometryProgram ) {
	
					_currentGeometryProgram = geometryProgram;
					updateBuffers = true;
	
				}
	
				// morph targets
	
				var morphTargetInfluences = object.morphTargetInfluences;
	
				if ( morphTargetInfluences !== undefined ) {
	
					var activeInfluences = [];
	
					for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {
	
						var influence = morphTargetInfluences[ i ];
						activeInfluences.push( [ influence, i ] );
	
					}
	
					activeInfluences.sort( absNumericalSort );
	
					if ( activeInfluences.length > 8 ) {
	
						activeInfluences.length = 8;
	
					}
	
					var morphAttributes = geometry.morphAttributes;
	
					for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {
	
						var influence = activeInfluences[ i ];
						morphInfluences[ i ] = influence[ 0 ];
	
						if ( influence[ 0 ] !== 0 ) {
	
							var index = influence[ 1 ];
	
							if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
							if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );
	
						} else {
	
							if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
							if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );
	
						}
	
					}
	
					for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {
	
						morphInfluences[ i ] = 0.0;
	
					}
	
					program.getUniforms().setValue(
							_gl, 'morphTargetInfluences', morphInfluences );
	
					updateBuffers = true;
	
				}
	
				//
	
				var index = geometry.index;
				var position = geometry.attributes.position;
				var rangeFactor = 1;
	
				if ( material.wireframe === true ) {
	
					index = objects.getWireframeAttribute( geometry );
					rangeFactor = 2;
	
				}
	
				var renderer;
	
				if ( index !== null ) {
	
					renderer = indexedBufferRenderer;
					renderer.setIndex( index );
	
				} else {
	
					renderer = bufferRenderer;
	
				}
	
				if ( updateBuffers ) {
	
					setupVertexAttributes( material, program, geometry );
	
					if ( index !== null ) {
	
						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );
	
					}
	
				}
	
				//
	
				var dataCount = 0;
	
				if ( index !== null ) {
	
					dataCount = index.count;
	
				} else if ( position !== undefined ) {
	
					dataCount = position.count;
	
				}
	
				var rangeStart = geometry.drawRange.start * rangeFactor;
				var rangeCount = geometry.drawRange.count * rangeFactor;
	
				var groupStart = group !== null ? group.start * rangeFactor : 0;
				var groupCount = group !== null ? group.count * rangeFactor : Infinity;
	
				var drawStart = Math.max( rangeStart, groupStart );
				var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
	
				var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
	
				if ( drawCount === 0 ) return;
	
				//
	
				if ( object.isMesh ) {
	
					if ( material.wireframe === true ) {
	
						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );
	
					} else {
	
						switch ( object.drawMode ) {
	
							case TrianglesDrawMode:
								renderer.setMode( _gl.TRIANGLES );
								break;
	
							case TriangleStripDrawMode:
								renderer.setMode( _gl.TRIANGLE_STRIP );
								break;
	
							case TriangleFanDrawMode:
								renderer.setMode( _gl.TRIANGLE_FAN );
								break;
	
						}
	
					}
	
	
				} else if ( object.isLine ) {
	
					var lineWidth = material.linewidth;
	
					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
	
					state.setLineWidth( lineWidth * getTargetPixelRatio() );
	
					if ( object.isLineSegments ) {
	
						renderer.setMode( _gl.LINES );
	
					} else {
	
						renderer.setMode( _gl.LINE_STRIP );
	
					}
	
				} else if ( object.isPoints ) {
	
					renderer.setMode( _gl.POINTS );
	
				}
	
				if ( geometry && geometry.isInstancedBufferGeometry ) {
	
					if ( geometry.maxInstancedCount > 0 ) {
	
						renderer.renderInstances( geometry, drawStart, drawCount );
	
					}
	
				} else {
	
					renderer.render( drawStart, drawCount );
	
				}
	
			};
	
			function setupVertexAttributes( material, program, geometry, startIndex ) {
	
				var extension;
	
				if ( geometry && geometry.isInstancedBufferGeometry ) {
	
					extension = extensions.get( 'ANGLE_instanced_arrays' );
	
					if ( extension === null ) {
	
						console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;
	
					}
	
				}
	
				if ( startIndex === undefined ) startIndex = 0;
	
				state.initAttributes();
	
				var geometryAttributes = geometry.attributes;
	
				var programAttributes = program.getAttributes();
	
				var materialDefaultAttributeValues = material.defaultAttributeValues;
	
				for ( var name in programAttributes ) {
	
					var programAttribute = programAttributes[ name ];
	
					if ( programAttribute >= 0 ) {
	
						var geometryAttribute = geometryAttributes[ name ];
	
						if ( geometryAttribute !== undefined ) {
	
							var type = _gl.FLOAT;
							var array = geometryAttribute.array;
							var normalized = geometryAttribute.normalized;
	
							if ( array instanceof Float32Array ) {
	
								type = _gl.FLOAT;
	
							} else if ( array instanceof Float64Array ) {
	
								console.warn( "Unsupported data buffer format: Float64Array" );
	
							} else if ( array instanceof Uint16Array ) {
	
								type = _gl.UNSIGNED_SHORT;
	
							} else if ( array instanceof Int16Array ) {
	
								type = _gl.SHORT;
	
							} else if ( array instanceof Uint32Array ) {
	
								type = _gl.UNSIGNED_INT;
	
							} else if ( array instanceof Int32Array ) {
	
								type = _gl.INT;
	
							} else if ( array instanceof Int8Array ) {
	
								type = _gl.BYTE;
	
							} else if ( array instanceof Uint8Array ) {
	
								type = _gl.UNSIGNED_BYTE;
	
							}
	
							var size = geometryAttribute.itemSize;
							var buffer = objects.getAttributeBuffer( geometryAttribute );
	
							if ( geometryAttribute.isInterleavedBufferAttribute ) {
	
								var data = geometryAttribute.data;
								var stride = data.stride;
								var offset = geometryAttribute.offset;
	
								if ( data && data.isInstancedInterleavedBuffer ) {
	
									state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = data.meshPerAttribute * data.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );
	
							} else {
	
								if ( geometryAttribute.isInstancedBufferAttribute ) {
	
									state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );
	
							}
	
						} else if ( materialDefaultAttributeValues !== undefined ) {
	
							var value = materialDefaultAttributeValues[ name ];
	
							if ( value !== undefined ) {
	
								switch ( value.length ) {
	
									case 2:
										_gl.vertexAttrib2fv( programAttribute, value );
										break;
	
									case 3:
										_gl.vertexAttrib3fv( programAttribute, value );
										break;
	
									case 4:
										_gl.vertexAttrib4fv( programAttribute, value );
										break;
	
									default:
										_gl.vertexAttrib1fv( programAttribute, value );
	
								}
	
							}
	
						}
	
					}
	
				}
	
				state.disableUnusedAttributes();
	
			}
	
			// Sorting
	
			function absNumericalSort( a, b ) {
	
				return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );
	
			}
	
			function painterSortStable( a, b ) {
	
				if ( a.object.renderOrder !== b.object.renderOrder ) {
	
					return a.object.renderOrder - b.object.renderOrder;
	
				} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {
	
					return a.material.program.id - b.material.program.id;
	
				} else if ( a.material.id !== b.material.id ) {
	
					return a.material.id - b.material.id;
	
				} else if ( a.z !== b.z ) {
	
					return a.z - b.z;
	
				} else {
	
					return a.id - b.id;
	
				}
	
			}
	
			function reversePainterSortStable( a, b ) {
	
				if ( a.object.renderOrder !== b.object.renderOrder ) {
	
					return a.object.renderOrder - b.object.renderOrder;
	
				} if ( a.z !== b.z ) {
	
					return b.z - a.z;
	
				} else {
	
					return a.id - b.id;
	
				}
	
			}
	
			// Rendering
	
			this.render = function ( scene, camera, renderTarget, forceClear ) {
	
				if ( camera !== undefined && camera.isCamera !== true ) {
	
					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;
	
				}
	
				// reset caching for this frame
	
				_currentGeometryProgram = '';
				_currentMaterialId = - 1;
				_currentCamera = null;
	
				// update scene graph
	
				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
	
				// update camera matrices and frustum
	
				if ( camera.parent === null ) camera.updateMatrixWorld();
	
				camera.matrixWorldInverse.getInverse( camera.matrixWorld );
	
				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );
	
				lights.length = 0;
	
				opaqueObjectsLastIndex = - 1;
				transparentObjectsLastIndex = - 1;
	
				sprites.length = 0;
				lensFlares.length = 0;
	
				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
	
				projectObject( scene, camera );
	
				opaqueObjects.length = opaqueObjectsLastIndex + 1;
				transparentObjects.length = transparentObjectsLastIndex + 1;
	
				if ( _this.sortObjects === true ) {
	
					opaqueObjects.sort( painterSortStable );
					transparentObjects.sort( reversePainterSortStable );
	
				}
	
				//
	
				if ( _clippingEnabled ) _clipping.beginShadows();
	
				setupShadows( lights );
	
				shadowMap.render( scene, camera );
	
				setupLights( lights, camera );
	
				if ( _clippingEnabled ) _clipping.endShadows();
	
				//
	
				_infoRender.calls = 0;
				_infoRender.vertices = 0;
				_infoRender.faces = 0;
				_infoRender.points = 0;
	
				if ( renderTarget === undefined ) {
	
					renderTarget = null;
	
				}
	
				this.setRenderTarget( renderTarget );
	
				//
	
				var background = scene.background;
	
				if ( background === null ) {
	
					glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
				} else if ( background && background.isColor ) {
	
					glClearColor( background.r, background.g, background.b, 1 );
					forceClear = true;
	
				}
	
				if ( this.autoClear || forceClear ) {
	
					this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );
	
				}
	
				if ( background && background.isCubeTexture ) {
	
					backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );
	
					backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
					backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );
	
					backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
					backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );
	
					objects.update( backgroundBoxMesh );
	
					_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );
	
				} else if ( background && background.isTexture ) {
	
					backgroundPlaneMesh.material.map = background;
	
					objects.update( backgroundPlaneMesh );
	
					_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );
	
				}
	
				//
	
				if ( scene.overrideMaterial ) {
	
					var overrideMaterial = scene.overrideMaterial;
	
					renderObjects( opaqueObjects, scene, camera, overrideMaterial );
					renderObjects( transparentObjects, scene, camera, overrideMaterial );
	
				} else {
	
					// opaque pass (front-to-back order)
	
					state.setBlending( NoBlending );
					renderObjects( opaqueObjects, scene, camera );
	
					// transparent pass (back-to-front order)
	
					renderObjects( transparentObjects, scene, camera );
	
				}
	
				// custom render plugins (post pass)
	
				spritePlugin.render( scene, camera );
				lensFlarePlugin.render( scene, camera, _currentViewport );
	
				// Generate mipmap if we're using any kind of mipmap filtering
	
				if ( renderTarget ) {
	
					textures.updateRenderTargetMipmap( renderTarget );
	
				}
	
				// Ensure depth buffer writing is enabled so it can be cleared on next render
	
				state.setDepthTest( true );
				state.setDepthWrite( true );
				state.setColorWrite( true );
	
				// _gl.finish();
	
			};
	
			function pushRenderItem( object, geometry, material, z, group ) {
	
				var array, index;
	
				// allocate the next position in the appropriate array
	
				if ( material.transparent ) {
	
					array = transparentObjects;
					index = ++ transparentObjectsLastIndex;
	
				} else {
	
					array = opaqueObjects;
					index = ++ opaqueObjectsLastIndex;
	
				}
	
				// recycle existing render item or grow the array
	
				var renderItem = array[ index ];
	
				if ( renderItem !== undefined ) {
	
					renderItem.id = object.id;
					renderItem.object = object;
					renderItem.geometry = geometry;
					renderItem.material = material;
					renderItem.z = _vector3.z;
					renderItem.group = group;
	
				} else {
	
					renderItem = {
						id: object.id,
						object: object,
						geometry: geometry,
						material: material,
						z: _vector3.z,
						group: group
					};
	
					// assert( index === array.length );
					array.push( renderItem );
	
				}
	
			}
	
			// TODO Duplicated code (Frustum)
	
			function isObjectViewable( object ) {
	
				var geometry = object.geometry;
	
				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();
	
				_sphere.copy( geometry.boundingSphere ).
					applyMatrix4( object.matrixWorld );
	
				return isSphereViewable( _sphere );
	
			}
	
			function isSpriteViewable( sprite ) {
	
				_sphere.center.set( 0, 0, 0 );
				_sphere.radius = 0.7071067811865476;
				_sphere.applyMatrix4( sprite.matrixWorld );
	
				return isSphereViewable( _sphere );
	
			}
	
			function isSphereViewable( sphere ) {
	
				if ( ! _frustum.intersectsSphere( sphere ) ) return false;
	
				var numPlanes = _clipping.numPlanes;
	
				if ( numPlanes === 0 ) return true;
	
				var planes = _this.clippingPlanes,
	
					center = sphere.center,
					negRad = - sphere.radius,
					i = 0;
	
				do {
	
					// out when deeper than radius in the negative halfspace
					if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;
	
				} while ( ++ i !== numPlanes );
	
				return true;
	
			}
	
			function projectObject( object, camera ) {
	
				if ( object.visible === false ) return;
	
				var visible = ( object.layers.mask & camera.layers.mask ) !== 0;
	
				if ( visible ) {
	
					if ( object.isLight ) {
	
						lights.push( object );
	
					} else if ( object.isSprite ) {
	
						if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {
	
							sprites.push( object );
	
						}
	
					} else if ( object.isLensFlare ) {
	
						lensFlares.push( object );
	
					} else if ( object.isImmediateRenderObject ) {
	
						if ( _this.sortObjects === true ) {
	
							_vector3.setFromMatrixPosition( object.matrixWorld );
							_vector3.applyProjection( _projScreenMatrix );
	
						}
	
						pushRenderItem( object, null, object.material, _vector3.z, null );
	
					} else if ( object.isMesh || object.isLine || object.isPoints ) {
	
						if ( object.isSkinnedMesh ) {
	
							object.skeleton.update();
	
						}
	
						if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {
	
							var material = object.material;
	
							if ( material.visible === true ) {
	
								if ( _this.sortObjects === true ) {
	
									_vector3.setFromMatrixPosition( object.matrixWorld );
									_vector3.applyProjection( _projScreenMatrix );
	
								}
	
								var geometry = objects.update( object );
	
								if ( material.isMultiMaterial ) {
	
									var groups = geometry.groups;
									var materials = material.materials;
	
									for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
										var group = groups[ i ];
										var groupMaterial = materials[ group.materialIndex ];
	
										if ( groupMaterial.visible === true ) {
	
											pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );
	
										}
	
									}
	
								} else {
	
									pushRenderItem( object, geometry, material, _vector3.z, null );
	
								}
	
							}
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					projectObject( children[ i ], camera );
	
				}
	
			}
	
			function renderObjects( renderList, scene, camera, overrideMaterial ) {
	
				for ( var i = 0, l = renderList.length; i < l; i ++ ) {
	
					var renderItem = renderList[ i ];
	
					var object = renderItem.object;
					var geometry = renderItem.geometry;
					var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
					var group = renderItem.group;
	
					object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
					object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
	
					object.onBeforeRender( _this, scene, camera, geometry, material, group );
	
					if ( object.isImmediateRenderObject ) {
	
						setMaterial( material );
	
						var program = setProgram( camera, scene.fog, material, object );
	
						_currentGeometryProgram = '';
	
						object.render( function ( object ) {
	
							_this.renderBufferImmediate( object, program, material );
	
						} );
	
					} else {
	
						_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );
	
					}
	
					object.onAfterRender( _this, scene, camera, geometry, material, group );
	
	
				}
	
			}
	
			function initMaterial( material, fog, object ) {
	
				var materialProperties = properties.get( material );
	
				var parameters = programCache.getParameters(
						material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );
	
				var code = programCache.getProgramCode( material, parameters );
	
				var program = materialProperties.program;
				var programChange = true;
	
				if ( program === undefined ) {
	
					// new material
					material.addEventListener( 'dispose', onMaterialDispose );
	
				} else if ( program.code !== code ) {
	
					// changed glsl or parameters
					releaseMaterialProgramReference( material );
	
				} else if ( parameters.shaderID !== undefined ) {
	
					// same glsl and uniform list
					return;
	
				} else {
	
					// only rebuild uniform list
					programChange = false;
	
				}
	
				if ( programChange ) {
	
					if ( parameters.shaderID ) {
	
						var shader = ShaderLib[ parameters.shaderID ];
	
						materialProperties.__webglShader = {
							name: material.type,
							uniforms: UniformsUtils.clone( shader.uniforms ),
							vertexShader: shader.vertexShader,
							fragmentShader: shader.fragmentShader
						};
	
					} else {
	
						materialProperties.__webglShader = {
							name: material.type,
							uniforms: material.uniforms,
							vertexShader: material.vertexShader,
							fragmentShader: material.fragmentShader
						};
	
					}
	
					material.__webglShader = materialProperties.__webglShader;
	
					program = programCache.acquireProgram( material, parameters, code );
	
					materialProperties.program = program;
					material.program = program;
	
				}
	
				var attributes = program.getAttributes();
	
				if ( material.morphTargets ) {
	
					material.numSupportedMorphTargets = 0;
	
					for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
	
						if ( attributes[ 'morphTarget' + i ] >= 0 ) {
	
							material.numSupportedMorphTargets ++;
	
						}
	
					}
	
				}
	
				if ( material.morphNormals ) {
	
					material.numSupportedMorphNormals = 0;
	
					for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
	
						if ( attributes[ 'morphNormal' + i ] >= 0 ) {
	
							material.numSupportedMorphNormals ++;
	
						}
	
					}
	
				}
	
				var uniforms = materialProperties.__webglShader.uniforms;
	
				if ( ! material.isShaderMaterial &&
				     ! material.isRawShaderMaterial ||
				       material.clipping === true ) {
	
					materialProperties.numClippingPlanes = _clipping.numPlanes;
					materialProperties.numIntersection = _clipping.numIntersection;
					uniforms.clippingPlanes = _clipping.uniform;
	
				}
	
				materialProperties.fog = fog;
	
				// store the light setup it was created for
	
				materialProperties.lightsHash = _lights.hash;
	
				if ( material.lights ) {
	
					// wire up the material to this renderer's lighting state
	
					uniforms.ambientLightColor.value = _lights.ambient;
					uniforms.directionalLights.value = _lights.directional;
					uniforms.spotLights.value = _lights.spot;
					uniforms.pointLights.value = _lights.point;
					uniforms.hemisphereLights.value = _lights.hemi;
	
					uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
					uniforms.spotShadowMap.value = _lights.spotShadowMap;
					uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
					uniforms.pointShadowMap.value = _lights.pointShadowMap;
					uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;
	
				}
	
				var progUniforms = materialProperties.program.getUniforms(),
					uniformsList =
							WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
	
				materialProperties.uniformsList = uniformsList;
	
			}
	
			function setMaterial( material ) {
	
				material.side === DoubleSide
					? state.disable( _gl.CULL_FACE )
					: state.enable( _gl.CULL_FACE );
	
				state.setFlipSided( material.side === BackSide );
	
				material.transparent === true
					? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
					: state.setBlending( NoBlending );
	
				state.setDepthFunc( material.depthFunc );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );
				state.setColorWrite( material.colorWrite );
				state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
	
			}
	
			function setProgram( camera, fog, material, object ) {
	
				_usedTextureUnits = 0;
	
				var materialProperties = properties.get( material );
	
				if ( _clippingEnabled ) {
	
					if ( _localClippingEnabled || camera !== _currentCamera ) {
	
						var useCache =
								camera === _currentCamera &&
								material.id === _currentMaterialId;
	
						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						_clipping.setState(
								material.clippingPlanes, material.clipIntersection, material.clipShadows,
								camera, materialProperties, useCache );
	
					}
	
				}
	
				if ( material.needsUpdate === false ) {
	
					if ( materialProperties.program === undefined ) {
	
						material.needsUpdate = true;
	
					} else if ( material.fog && materialProperties.fog !== fog ) {
	
						material.needsUpdate = true;
	
					} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {
	
						material.needsUpdate = true;
	
					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== _clipping.numPlanes || 
		 				  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {
	
						material.needsUpdate = true;
	
					}
	
				}
	
				if ( material.needsUpdate ) {
	
					initMaterial( material, fog, object );
					material.needsUpdate = false;
	
				}
	
				var refreshProgram = false;
				var refreshMaterial = false;
				var refreshLights = false;
	
				var program = materialProperties.program,
					p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.__webglShader.uniforms;
	
				if ( program.id !== _currentProgram ) {
	
					_gl.useProgram( program.program );
					_currentProgram = program.id;
	
					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;
	
				}
	
				if ( material.id !== _currentMaterialId ) {
	
					_currentMaterialId = material.id;
	
					refreshMaterial = true;
	
				}
	
				if ( refreshProgram || camera !== _currentCamera ) {
	
					p_uniforms.set( _gl, camera, 'projectionMatrix' );
	
					if ( capabilities.logarithmicDepthBuffer ) {
	
						p_uniforms.setValue( _gl, 'logDepthBufFC',
								2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
	
					}
	
	
					if ( camera !== _currentCamera ) {
	
						_currentCamera = camera;
	
						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:
	
						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done
	
					}
	
					// load material specific uniforms
					// (shader material also gets them for the sake of genericity)
	
					if ( material.isShaderMaterial ||
					     material.isMeshPhongMaterial ||
					     material.isMeshStandardMaterial ||
					     material.envMap ) {
	
						var uCamPos = p_uniforms.map.cameraPosition;
	
						if ( uCamPos !== undefined ) {
	
							uCamPos.setValue( _gl,
									_vector3.setFromMatrixPosition( camera.matrixWorld ) );
	
						}
	
					}
	
					if ( material.isMeshPhongMaterial ||
					     material.isMeshLambertMaterial ||
					     material.isMeshBasicMaterial ||
					     material.isMeshStandardMaterial ||
					     material.isShaderMaterial ||
					     material.skinning ) {
	
						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
	
					}
	
					p_uniforms.set( _gl, _this, 'toneMappingExposure' );
					p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );
	
				}
	
				// skinning uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone texture must go before other textures
				// not sure why, but otherwise weird things happen
	
				if ( material.skinning ) {
	
					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
	
					var skeleton = object.skeleton;
	
					if ( skeleton ) {
	
						if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {
	
							p_uniforms.set( _gl, skeleton, 'boneTexture' );
							p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
							p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );
	
						} else {
	
							p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
	
						}
	
					}
	
				}
	
				if ( refreshMaterial ) {
	
					if ( material.lights ) {
	
						// the current material requires lighting info
	
						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required
	
						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
	
					}
	
					// refresh uniforms common to several materials
	
					if ( fog && material.fog ) {
	
						refreshUniformsFog( m_uniforms, fog );
	
					}
	
					if ( material.isMeshBasicMaterial ||
					     material.isMeshLambertMaterial ||
					     material.isMeshPhongMaterial ||
					     material.isMeshStandardMaterial ||
					     material.isMeshDepthMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
	
					}
	
					// refresh single material specific uniforms
	
					if ( material.isLineBasicMaterial ) {
	
						refreshUniformsLine( m_uniforms, material );
	
					} else if ( material.isLineDashedMaterial ) {
	
						refreshUniformsLine( m_uniforms, material );
						refreshUniformsDash( m_uniforms, material );
	
					} else if ( material.isPointsMaterial ) {
	
						refreshUniformsPoints( m_uniforms, material );
	
					} else if ( material.isMeshLambertMaterial ) {
	
						refreshUniformsLambert( m_uniforms, material );
	
					} else if ( material.isMeshPhongMaterial ) {
	
						refreshUniformsPhong( m_uniforms, material );
	
					} else if ( material.isMeshPhysicalMaterial ) {
	
						refreshUniformsPhysical( m_uniforms, material );
	
					} else if ( material.isMeshStandardMaterial ) {
	
						refreshUniformsStandard( m_uniforms, material );
	
					} else if ( material.isMeshDepthMaterial ) {
	
						if ( material.displacementMap ) {
	
							m_uniforms.displacementMap.value = material.displacementMap;
							m_uniforms.displacementScale.value = material.displacementScale;
							m_uniforms.displacementBias.value = material.displacementBias;
	
						}
	
					} else if ( material.isMeshNormalMaterial ) {
	
						m_uniforms.opacity.value = material.opacity;
	
					}
	
					WebGLUniforms.upload(
							_gl, materialProperties.uniformsList, m_uniforms, _this );
	
				}
	
	
				// common matrices
	
				p_uniforms.set( _gl, object, 'modelViewMatrix' );
				p_uniforms.set( _gl, object, 'normalMatrix' );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
	
				return program;
	
			}
	
			// Uniforms (refresh uniforms objects)
	
			function refreshUniformsCommon( uniforms, material ) {
	
				uniforms.opacity.value = material.opacity;
	
				uniforms.diffuse.value = material.color;
	
				if ( material.emissive ) {
	
					uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
	
				}
	
				uniforms.map.value = material.map;
				uniforms.specularMap.value = material.specularMap;
				uniforms.alphaMap.value = material.alphaMap;
	
				if ( material.aoMap ) {
	
					uniforms.aoMap.value = material.aoMap;
					uniforms.aoMapIntensity.value = material.aoMapIntensity;
	
				}
	
				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map
	
				var uvScaleMap;
	
				if ( material.map ) {
	
					uvScaleMap = material.map;
	
				} else if ( material.specularMap ) {
	
					uvScaleMap = material.specularMap;
	
				} else if ( material.displacementMap ) {
	
					uvScaleMap = material.displacementMap;
	
				} else if ( material.normalMap ) {
	
					uvScaleMap = material.normalMap;
	
				} else if ( material.bumpMap ) {
	
					uvScaleMap = material.bumpMap;
	
				} else if ( material.roughnessMap ) {
	
					uvScaleMap = material.roughnessMap;
	
				} else if ( material.metalnessMap ) {
	
					uvScaleMap = material.metalnessMap;
	
				} else if ( material.alphaMap ) {
	
					uvScaleMap = material.alphaMap;
	
				} else if ( material.emissiveMap ) {
	
					uvScaleMap = material.emissiveMap;
	
				}
	
				if ( uvScaleMap !== undefined ) {
	
					// backwards compatibility
					if ( uvScaleMap.isWebGLRenderTarget ) {
	
						uvScaleMap = uvScaleMap.texture;
	
					}
	
					var offset = uvScaleMap.offset;
					var repeat = uvScaleMap.repeat;
	
					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
	
				}
	
				uniforms.envMap.value = material.envMap;
	
				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;
	
				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;
	
			}
	
			function refreshUniformsLine( uniforms, material ) {
	
				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
	
			}
	
			function refreshUniformsDash( uniforms, material ) {
	
				uniforms.dashSize.value = material.dashSize;
				uniforms.totalSize.value = material.dashSize + material.gapSize;
				uniforms.scale.value = material.scale;
	
			}
	
			function refreshUniformsPoints( uniforms, material ) {
	
				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
				uniforms.size.value = material.size * _pixelRatio;
				uniforms.scale.value = _height * 0.5;
	
				uniforms.map.value = material.map;
	
				if ( material.map !== null ) {
	
					var offset = material.map.offset;
					var repeat = material.map.repeat;
	
					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
	
				}
	
			}
	
			function refreshUniformsFog( uniforms, fog ) {
	
				uniforms.fogColor.value = fog.color;
	
				if ( fog.isFog ) {
	
					uniforms.fogNear.value = fog.near;
					uniforms.fogFar.value = fog.far;
	
				} else if ( fog.isFogExp2 ) {
	
					uniforms.fogDensity.value = fog.density;
	
				}
	
			}
	
			function refreshUniformsLambert( uniforms, material ) {
	
				if ( material.lightMap ) {
	
					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
			}
	
			function refreshUniformsPhong( uniforms, material ) {
	
				uniforms.specular.value = material.specular;
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
	
				if ( material.lightMap ) {
	
					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsStandard( uniforms, material ) {
	
				uniforms.roughness.value = material.roughness;
				uniforms.metalness.value = material.metalness;
	
				if ( material.roughnessMap ) {
	
					uniforms.roughnessMap.value = material.roughnessMap;
	
				}
	
				if ( material.metalnessMap ) {
	
					uniforms.metalnessMap.value = material.metalnessMap;
	
				}
	
				if ( material.lightMap ) {
	
					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
				if ( material.envMap ) {
	
					//uniforms.envMap.value = material.envMap; // part of uniforms common
					uniforms.envMapIntensity.value = material.envMapIntensity;
	
				}
	
			}
	
			function refreshUniformsPhysical( uniforms, material ) {
	
				uniforms.clearCoat.value = material.clearCoat;
				uniforms.clearCoatRoughness.value = material.clearCoatRoughness;
	
				refreshUniformsStandard( uniforms, material );
	
			}
	
			// If uniforms are marked as clean, they don't need to be loaded to the GPU.
	
			function markUniformsLightsNeedsUpdate( uniforms, value ) {
	
				uniforms.ambientLightColor.needsUpdate = value;
	
				uniforms.directionalLights.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;
	
			}
	
			// Lighting
	
			function setupShadows( lights ) {
	
				var lightShadowsLength = 0;
	
				for ( var i = 0, l = lights.length; i < l; i ++ ) {
	
					var light = lights[ i ];
	
					if ( light.castShadow ) {
	
						_lights.shadows[ lightShadowsLength ++ ] = light;
	
					}
	
				}
	
				_lights.shadows.length = lightShadowsLength;
	
			}
	
			function setupLights( lights, camera ) {
	
				var l, ll, light,
				r = 0, g = 0, b = 0,
				color,
				intensity,
				distance,
				shadowMap,
	
				viewMatrix = camera.matrixWorldInverse,
	
				directionalLength = 0,
				pointLength = 0,
				spotLength = 0,
				hemiLength = 0;
	
				for ( l = 0, ll = lights.length; l < ll; l ++ ) {
	
					light = lights[ l ];
	
					color = light.color;
					intensity = light.intensity;
					distance = light.distance;
	
					shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
	
					if ( light.isAmbientLight ) {
	
						r += color.r * intensity;
						g += color.g * intensity;
						b += color.b * intensity;
	
					} else if ( light.isDirectionalLight ) {
	
						var uniforms = lightCache.get( light );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;
	
						}
	
						_lights.directionalShadowMap[ directionalLength ] = shadowMap;
						_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
						_lights.directional[ directionalLength ++ ] = uniforms;
	
					} else if ( light.isSpotLight ) {
	
						var uniforms = lightCache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( color ).multiplyScalar( intensity );
						uniforms.distance = distance;
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						uniforms.coneCos = Math.cos( light.angle );
						uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;
	
						}
	
						_lights.spotShadowMap[ spotLength ] = shadowMap;
						_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
						_lights.spot[ spotLength ++ ] = uniforms;
	
					} else if ( light.isPointLight ) {
	
						var uniforms = lightCache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.distance = light.distance;
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;
	
						}
	
						_lights.pointShadowMap[ pointLength ] = shadowMap;
	
						if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {
	
							_lights.pointShadowMatrix[ pointLength ] = new Matrix4();
	
						}
	
						// for point lights we set the shadow matrix to be a translation-only matrix
						// equal to inverse of the light's position
						_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
						_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );
	
						_lights.point[ pointLength ++ ] = uniforms;
	
					} else if ( light.isHemisphereLight ) {
	
						var uniforms = lightCache.get( light );
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						uniforms.direction.transformDirection( viewMatrix );
						uniforms.direction.normalize();
	
						uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
						uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
	
						_lights.hemi[ hemiLength ++ ] = uniforms;
	
					}
	
				}
	
				_lights.ambient[ 0 ] = r;
				_lights.ambient[ 1 ] = g;
				_lights.ambient[ 2 ] = b;
	
				_lights.directional.length = directionalLength;
				_lights.spot.length = spotLength;
				_lights.point.length = pointLength;
				_lights.hemi.length = hemiLength;
	
				_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;
	
			}
	
			// GL state setting
	
			this.setFaceCulling = function ( cullFace, frontFaceDirection ) {
	
				state.setCullFace( cullFace );
				state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );
	
			};
	
			// Textures
	
			function allocTextureUnit() {
	
				var textureUnit = _usedTextureUnits;
	
				if ( textureUnit >= capabilities.maxTextures ) {
	
					console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );
	
				}
	
				_usedTextureUnits += 1;
	
				return textureUnit;
	
			}
	
			this.allocTextureUnit = allocTextureUnit;
	
			// this.setTexture2D = setTexture2D;
			this.setTexture2D = ( function() {
	
				var warned = false;
	
				// backwards compatibility: peel texture.texture
				return function setTexture2D( texture, slot ) {
	
					if ( texture && texture.isWebGLRenderTarget ) {
	
						if ( ! warned ) {
	
							console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
							warned = true;
	
						}
	
						texture = texture.texture;
	
					}
	
					textures.setTexture2D( texture, slot );
	
				};
	
			}() );
	
			this.setTexture = ( function() {
	
				var warned = false;
	
				return function setTexture( texture, slot ) {
	
					if ( ! warned ) {
	
						console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
						warned = true;
	
					}
	
					textures.setTexture2D( texture, slot );
	
				};
	
			}() );
	
			this.setTextureCube = ( function() {
	
				var warned = false;
	
				return function setTextureCube( texture, slot ) {
	
					// backwards compatibility: peel texture.texture
					if ( texture && texture.isWebGLRenderTargetCube ) {
	
						if ( ! warned ) {
	
							console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
							warned = true;
	
						}
	
						texture = texture.texture;
	
					}
	
					// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
					// TODO: unify these code paths
					if ( ( texture && texture.isCubeTexture ) ||
						 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
	
						// CompressedTexture can have Array in image :/
	
						// this function alone should take care of cube textures
						textures.setTextureCube( texture, slot );
	
					} else {
	
						// assumed: texture property of THREE.WebGLRenderTargetCube
	
						textures.setTextureCubeDynamic( texture, slot );
	
					}
	
				};
	
			}() );
	
			this.getCurrentRenderTarget = function() {
	
				return _currentRenderTarget;
	
			};
	
			this.setRenderTarget = function ( renderTarget ) {
	
				_currentRenderTarget = renderTarget;
	
				if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
	
					textures.setupRenderTarget( renderTarget );
	
				}
	
				var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
				var framebuffer;
	
				if ( renderTarget ) {
	
					var renderTargetProperties = properties.get( renderTarget );
	
					if ( isCube ) {
	
						framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];
	
					} else {
	
						framebuffer = renderTargetProperties.__webglFramebuffer;
	
					}
	
					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;
	
					_currentViewport.copy( renderTarget.viewport );
	
				} else {
	
					framebuffer = null;
	
					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
					_currentScissorTest = _scissorTest;
	
					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
	
				}
	
				if ( _currentFramebuffer !== framebuffer ) {
	
					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
					_currentFramebuffer = framebuffer;
	
				}
	
				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );
	
				state.viewport( _currentViewport );
	
				if ( isCube ) {
	
					var textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );
	
				}
	
			};
	
			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {
	
				if ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {
	
					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;
	
				}
	
				var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
				if ( framebuffer ) {
	
					var restore = false;
	
					if ( framebuffer !== _currentFramebuffer ) {
	
						_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	
						restore = true;
	
					}
	
					try {
	
						var texture = renderTarget.texture;
						var textureFormat = texture.format;
						var textureType = texture.type;
	
						if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;
	
						}
	
						if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;
	
						}
	
						if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {
	
							// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
	
							if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
	
								_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );
	
							}
	
						} else {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
	
						}
	
					} finally {
	
						if ( restore ) {
	
							_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );
	
						}
	
					}
	
				}
	
			};
	
			// Map three.js constants to WebGL constants
	
			function paramThreeToGL( p ) {
	
				var extension;
	
				if ( p === RepeatWrapping ) return _gl.REPEAT;
				if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
				if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;
	
				if ( p === NearestFilter ) return _gl.NEAREST;
				if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
				if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;
	
				if ( p === LinearFilter ) return _gl.LINEAR;
				if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
				if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;
	
				if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
				if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
				if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
				if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;
	
				if ( p === ByteType ) return _gl.BYTE;
				if ( p === ShortType ) return _gl.SHORT;
				if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
				if ( p === IntType ) return _gl.INT;
				if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
				if ( p === FloatType ) return _gl.FLOAT;
	
				if ( p === HalfFloatType ) {
	
					extension = extensions.get( 'OES_texture_half_float' );
	
					if ( extension !== null ) return extension.HALF_FLOAT_OES;
	
				}
	
				if ( p === AlphaFormat ) return _gl.ALPHA;
				if ( p === RGBFormat ) return _gl.RGB;
				if ( p === RGBAFormat ) return _gl.RGBA;
				if ( p === LuminanceFormat ) return _gl.LUMINANCE;
				if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
				if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
				if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;
	
				if ( p === AddEquation ) return _gl.FUNC_ADD;
				if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
				if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;
	
				if ( p === ZeroFactor ) return _gl.ZERO;
				if ( p === OneFactor ) return _gl.ONE;
				if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
				if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
				if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
				if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
				if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
				if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;
	
				if ( p === DstColorFactor ) return _gl.DST_COLOR;
				if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
				if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;
	
				if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
					p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	
					}
	
				}
	
				if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
					 p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
						if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
						if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
						if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
	
					}
	
				}
	
				if ( p === RGB_ETC1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
	
					if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;
	
				}
	
				if ( p === MinEquation || p === MaxEquation ) {
	
					extension = extensions.get( 'EXT_blend_minmax' );
	
					if ( extension !== null ) {
	
						if ( p === MinEquation ) return extension.MIN_EXT;
						if ( p === MaxEquation ) return extension.MAX_EXT;
	
					}
	
				}
	
				if ( p === UnsignedInt248Type ) {
	
					extension = extensions.get( 'WEBGL_depth_texture' );
	
					if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;
	
				}
	
				return 0;
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function FogExp2 ( color, density ) {
	
			this.name = '';
	
			this.color = new Color( color );
			this.density = ( density !== undefined ) ? density : 0.00025;
	
		}
	
		FogExp2.prototype.isFogExp2 = true;
	
		FogExp2.prototype.clone = function () {
	
			return new FogExp2( this.color.getHex(), this.density );
	
		};
	
		FogExp2.prototype.toJSON = function ( meta ) {
	
			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Fog ( color, near, far ) {
	
			this.name = '';
	
			this.color = new Color( color );
	
			this.near = ( near !== undefined ) ? near : 1;
			this.far = ( far !== undefined ) ? far : 1000;
	
		}
	
		Fog.prototype.isFog = true;
	
		Fog.prototype.clone = function () {
	
			return new Fog( this.color.getHex(), this.near, this.far );
	
		};
	
		Fog.prototype.toJSON = function ( meta ) {
	
			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Scene () {
	
			Object3D.call( this );
	
			this.type = 'Scene';
	
			this.background = null;
			this.fog = null;
			this.overrideMaterial = null;
	
			this.autoUpdate = true; // checked by the renderer
	
		}
	
		Scene.prototype = Object.create( Object3D.prototype );
	
		Scene.prototype.constructor = Scene;
	
		Scene.prototype.copy = function ( source, recursive ) {
	
			Object3D.prototype.copy.call( this, source, recursive );
	
			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();
			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
	
			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
	
			return this;
	
		};
	
		Scene.prototype.toJSON = function ( meta ) {
	
			var data = Object3D.prototype.toJSON.call( this, meta );
	
			if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
	
			return data;
	
		};
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function LensFlare( texture, size, distance, blending, color ) {
	
			Object3D.call( this );
	
			this.lensFlares = [];
	
			this.positionScreen = new Vector3();
			this.customUpdateCallback = undefined;
	
			if ( texture !== undefined ) {
	
				this.add( texture, size, distance, blending, color );
	
			}
	
		}
	
		LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: LensFlare,
	
			isLensFlare: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.positionScreen.copy( source.positionScreen );
				this.customUpdateCallback = source.customUpdateCallback;
	
				for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {
	
					this.lensFlares.push( source.lensFlares[ i ] );
	
				}
	
				return this;
	
			},
	
			add: function ( texture, size, distance, blending, color, opacity ) {
	
				if ( size === undefined ) size = - 1;
				if ( distance === undefined ) distance = 0;
				if ( opacity === undefined ) opacity = 1;
				if ( color === undefined ) color = new Color( 0xffffff );
				if ( blending === undefined ) blending = NormalBlending;
	
				distance = Math.min( distance, Math.max( 0, distance ) );
	
				this.lensFlares.push( {
					texture: texture,	// THREE.Texture
					size: size, 		// size in pixels (-1 = use texture.width)
					distance: distance, 	// distance (0-1) from light source (0=at light source)
					x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
					scale: 1, 		// scale
					rotation: 0, 		// rotation
					opacity: opacity,	// opacity
					color: color,		// color
					blending: blending	// blending
				} );
	
			},
	
			/*
			 * Update lens flares update positions on all flares based on the screen position
			 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
			 */
	
			updateLensFlares: function () {
	
				var f, fl = this.lensFlares.length;
				var flare;
				var vecX = - this.positionScreen.x * 2;
				var vecY = - this.positionScreen.y * 2;
	
				for ( f = 0; f < fl; f ++ ) {
	
					flare = this.lensFlares[ f ];
	
					flare.x = this.positionScreen.x + vecX * flare.distance;
					flare.y = this.positionScreen.y + vecY * flare.distance;
	
					flare.wantedRotation = flare.x * Math.PI * 0.25;
					flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *	uvOffset: new THREE.Vector2(),
		 *	uvScale: new THREE.Vector2()
		 * }
		 */
	
		function SpriteMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'SpriteMaterial';
	
			this.color = new Color( 0xffffff );
			this.map = null;
	
			this.rotation = 0;
	
			this.fog = false;
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		SpriteMaterial.prototype = Object.create( Material.prototype );
		SpriteMaterial.prototype.constructor = SpriteMaterial;
	
		SpriteMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.map = source.map;
	
			this.rotation = source.rotation;
	
			return this;
	
		};
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Sprite( material ) {
	
			Object3D.call( this );
	
			this.type = 'Sprite';
	
			this.material = ( material !== undefined ) ? material : new SpriteMaterial();
	
		}
	
		Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Sprite,
	
			isSprite: true,
	
			raycast: ( function () {
	
				var matrixPosition = new Vector3();
	
				return function raycast( raycaster, intersects ) {
	
					matrixPosition.setFromMatrixPosition( this.matrixWorld );
	
					var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
					var guessSizeSq = this.scale.x * this.scale.y / 4;
	
					if ( distanceSq > guessSizeSq ) {
	
						return;
	
					}
	
					intersects.push( {
	
						distance: Math.sqrt( distanceSq ),
						point: this.position,
						face: null,
						object: this
	
					} );
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LOD() {
	
			Object3D.call( this );
	
			this.type = 'LOD';
	
			Object.defineProperties( this, {
				levels: {
					enumerable: true,
					value: []
				}
			} );
	
		}
	
	
		LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: LOD,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source, false );
	
				var levels = source.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					this.addLevel( level.object.clone(), level.distance );
	
				}
	
				return this;
	
			},
	
			addLevel: function ( object, distance ) {
	
				if ( distance === undefined ) distance = 0;
	
				distance = Math.abs( distance );
	
				var levels = this.levels;
	
				for ( var l = 0; l < levels.length; l ++ ) {
	
					if ( distance < levels[ l ].distance ) {
	
						break;
	
					}
	
				}
	
				levels.splice( l, 0, { distance: distance, object: object } );
	
				this.add( object );
	
			},
	
			getObjectForDistance: function ( distance ) {
	
				var levels = this.levels;
	
				for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
					if ( distance < levels[ i ].distance ) {
	
						break;
	
					}
	
				}
	
				return levels[ i - 1 ].object;
	
			},
	
			raycast: ( function () {
	
				var matrixPosition = new Vector3();
	
				return function raycast( raycaster, intersects ) {
	
					matrixPosition.setFromMatrixPosition( this.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( matrixPosition );
	
					this.getObjectForDistance( distance ).raycast( raycaster, intersects );
	
				};
	
			}() ),
	
			update: function () {
	
				var v1 = new Vector3();
				var v2 = new Vector3();
	
				return function update( camera ) {
	
					var levels = this.levels;
	
					if ( levels.length > 1 ) {
	
						v1.setFromMatrixPosition( camera.matrixWorld );
						v2.setFromMatrixPosition( this.matrixWorld );
	
						var distance = v1.distanceTo( v2 );
	
						levels[ 0 ].object.visible = true;
	
						for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
							if ( distance >= levels[ i ].distance ) {
	
								levels[ i - 1 ].object.visible = false;
								levels[ i ].object.visible = true;
	
							} else {
	
								break;
	
							}
	
						}
	
						for ( ; i < l; i ++ ) {
	
							levels[ i ].object.visible = false;
	
						}
	
					}
	
				};
	
			}(),
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.levels = [];
	
				var levels = this.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					data.object.levels.push( {
						object: level.object.uuid,
						distance: level.distance
					} );
	
				}
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { data: data, width: width, height: height };
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.generateMipmaps  = false;
			this.flipY = false;
			this.unpackAlignment = 1;
	
		}
	
		DataTexture.prototype = Object.create( Texture.prototype );
		DataTexture.prototype.constructor = DataTexture;
	
		DataTexture.prototype.isDataTexture = true;
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author michael guerrero / http://realitymeltdown.com
		 * @author ikerr / http://verold.com
		 */
	
		function Skeleton( bones, boneInverses, useVertexTexture ) {
	
			this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;
	
			this.identityMatrix = new Matrix4();
	
			// copy the bone array
	
			bones = bones || [];
	
			this.bones = bones.slice( 0 );
	
			// create a bone texture or an array of floats
	
			if ( this.useVertexTexture ) {
	
				// layout (1 matrix = 4 pixels)
				//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
				//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
				//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
				//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
				//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
	
	
				var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
				size = _Math.nextPowerOfTwo( Math.ceil( size ) );
				size = Math.max( size, 4 );
	
				this.boneTextureWidth = size;
				this.boneTextureHeight = size;
	
				this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
				this.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );
	
			} else {
	
				this.boneMatrices = new Float32Array( 16 * this.bones.length );
	
			}
	
			// use the supplied bone inverses or calculate the inverses
	
			if ( boneInverses === undefined ) {
	
				this.calculateInverses();
	
			} else {
	
				if ( this.bones.length === boneInverses.length ) {
	
					this.boneInverses = boneInverses.slice( 0 );
	
				} else {
	
					console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );
	
					this.boneInverses = [];
	
					for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
						this.boneInverses.push( new Matrix4() );
	
					}
	
				}
	
			}
	
		}
	
		Object.assign( Skeleton.prototype, {
	
			calculateInverses: function () {
	
				this.boneInverses = [];
	
				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
					var inverse = new Matrix4();
	
					if ( this.bones[ b ] ) {
	
						inverse.getInverse( this.bones[ b ].matrixWorld );
	
					}
	
					this.boneInverses.push( inverse );
	
				}
	
			},
	
			pose: function () {
	
				var bone;
	
				// recover the bind-time world matrices
	
				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
					bone = this.bones[ b ];
	
					if ( bone ) {
	
						bone.matrixWorld.getInverse( this.boneInverses[ b ] );
	
					}
	
				}
	
				// compute the local matrices, positions, rotations and scales
	
				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
					bone = this.bones[ b ];
	
					if ( bone ) {
	
						if ( (bone.parent && bone.parent.isBone) ) {
	
							bone.matrix.getInverse( bone.parent.matrixWorld );
							bone.matrix.multiply( bone.matrixWorld );
	
						} else {
	
							bone.matrix.copy( bone.matrixWorld );
	
						}
	
						bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
	
					}
	
				}
	
			},
	
			update: ( function () {
	
				var offsetMatrix = new Matrix4();
	
				return function update() {
	
					// flatten bone matrices to array
	
					for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
						// compute the offset between the current and the original transform
	
						var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;
	
						offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
						offsetMatrix.toArray( this.boneMatrices, b * 16 );
	
					}
	
					if ( this.useVertexTexture ) {
	
						this.boneTexture.needsUpdate = true;
	
					}
	
				};
	
			} )(),
	
			clone: function () {
	
				return new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function Bone( skin ) {
	
			Object3D.call( this );
	
			this.type = 'Bone';
	
			this.skin = skin;
	
		}
	
		Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Bone,
	
			isBone: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.skin = source.skin;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function SkinnedMesh( geometry, material, useVertexTexture ) {
	
			Mesh.call( this, geometry, material );
	
			this.type = 'SkinnedMesh';
	
			this.bindMode = "attached";
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();
	
			// init bones
	
			// TODO: remove bone creation as there is no reason (other than
			// convenience) for THREE.SkinnedMesh to do this.
	
			var bones = [];
	
			if ( this.geometry && this.geometry.bones !== undefined ) {
	
				var bone, gbone;
	
				for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {
	
					gbone = this.geometry.bones[ b ];
	
					bone = new Bone( this );
					bones.push( bone );
	
					bone.name = gbone.name;
					bone.position.fromArray( gbone.pos );
					bone.quaternion.fromArray( gbone.rotq );
					if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );
	
				}
	
				for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {
	
					gbone = this.geometry.bones[ b ];
	
					if ( gbone.parent !== - 1 && gbone.parent !== null &&
							bones[ gbone.parent ] !== undefined ) {
	
						bones[ gbone.parent ].add( bones[ b ] );
	
					} else {
	
						this.add( bones[ b ] );
	
					}
	
				}
	
			}
	
			this.normalizeSkinWeights();
	
			this.updateMatrixWorld( true );
			this.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );
	
		}
	
	
		SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
	
			constructor: SkinnedMesh,
	
			isSkinnedMesh: true,
	
			bind: function( skeleton, bindMatrix ) {
	
				this.skeleton = skeleton;
	
				if ( bindMatrix === undefined ) {
	
					this.updateMatrixWorld( true );
	
					this.skeleton.calculateInverses();
	
					bindMatrix = this.matrixWorld;
	
				}
	
				this.bindMatrix.copy( bindMatrix );
				this.bindMatrixInverse.getInverse( bindMatrix );
	
			},
	
			pose: function () {
	
				this.skeleton.pose();
	
			},
	
			normalizeSkinWeights: function () {
	
				if ( (this.geometry && this.geometry.isGeometry) ) {
	
					for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {
	
						var sw = this.geometry.skinWeights[ i ];
	
						var scale = 1.0 / sw.lengthManhattan();
	
						if ( scale !== Infinity ) {
	
							sw.multiplyScalar( scale );
	
						} else {
	
							sw.set( 1, 0, 0, 0 ); // do something reasonable
	
						}
	
					}
	
				} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {
	
					var vec = new Vector4();
	
					var skinWeight = this.geometry.attributes.skinWeight;
	
					for ( var i = 0; i < skinWeight.count; i ++ ) {
	
						vec.x = skinWeight.getX( i );
						vec.y = skinWeight.getY( i );
						vec.z = skinWeight.getZ( i );
						vec.w = skinWeight.getW( i );
	
						var scale = 1.0 / vec.lengthManhattan();
	
						if ( scale !== Infinity ) {
	
							vec.multiplyScalar( scale );
	
						} else {
	
							vec.set( 1, 0, 0, 0 ); // do something reasonable
	
						}
	
						skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );
	
					}
	
				}
	
			},
	
			updateMatrixWorld: function( force ) {
	
				Mesh.prototype.updateMatrixWorld.call( this, true );
	
				if ( this.bindMode === "attached" ) {
	
					this.bindMatrixInverse.getInverse( this.matrixWorld );
	
				} else if ( this.bindMode === "detached" ) {
	
					this.bindMatrixInverse.getInverse( this.bindMatrix );
	
				} else {
	
					console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );
	
				}
	
			},
	
			clone: function() {
	
				return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *  linecap: "round",
		 *  linejoin: "round"
		 * }
		 */
	
		function LineBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'LineBasicMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		LineBasicMaterial.prototype = Object.create( Material.prototype );
		LineBasicMaterial.prototype.constructor = LineBasicMaterial;
	
		LineBasicMaterial.prototype.isLineBasicMaterial = true;
	
		LineBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Line( geometry, material, mode ) {
	
			if ( mode === 1 ) {
	
				console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
				return new LineSegments( geometry, material );
	
			}
	
			Object3D.call( this );
	
			this.type = 'Line';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );
	
		}
	
		Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Line,
	
			isLine: true,
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				return function raycast( raycaster, intersects ) {
	
					var precision = raycaster.linePrecision;
					var precisionSq = precision * precision;
	
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					var vStart = new Vector3();
					var vEnd = new Vector3();
					var interSegment = new Vector3();
					var interRay = new Vector3();
					var step = (this && this.isLineSegments) ? 2 : 1;
	
					if ( (geometry && geometry.isBufferGeometry) ) {
	
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;
	
						if ( index !== null ) {
	
							var indices = index.array;
	
							for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
	
								var a = indices[ i ];
								var b = indices[ i + 1 ];
	
								vStart.fromArray( positions, a * 3 );
								vEnd.fromArray( positions, b * 3 );
	
								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
								if ( distSq > precisionSq ) continue;
	
								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
								var distance = raycaster.ray.origin.distanceTo( interRay );
	
								if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
								intersects.push( {
	
									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this
	
								} );
	
							}
	
						} else {
	
							for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
	
								vStart.fromArray( positions, 3 * i );
								vEnd.fromArray( positions, 3 * i + 3 );
	
								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
								if ( distSq > precisionSq ) continue;
	
								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
								var distance = raycaster.ray.origin.distanceTo( interRay );
	
								if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
								intersects.push( {
	
									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this
	
								} );
	
							}
	
						}
	
					} else if ( (geometry && geometry.isGeometry) ) {
	
						var vertices = geometry.vertices;
						var nbVertices = vertices.length;
	
						for ( var i = 0; i < nbVertices - 1; i += step ) {
	
							var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
	
							if ( distSq > precisionSq ) continue;
	
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
							var distance = raycaster.ray.origin.distanceTo( interRay );
	
							if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
							intersects.push( {
	
								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
	
							} );
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LineSegments( geometry, material ) {
	
			Line.call( this, geometry, material );
	
			this.type = 'LineSegments';
	
		}
	
		LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
	
			constructor: LineSegments,
	
			isLineSegments: true
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  size: <float>,
		 *  sizeAttenuation: <bool>
		 * }
		 */
	
		function PointsMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'PointsMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.map = null;
	
			this.size = 1;
			this.sizeAttenuation = true;
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		PointsMaterial.prototype = Object.create( Material.prototype );
		PointsMaterial.prototype.constructor = PointsMaterial;
	
		PointsMaterial.prototype.isPointsMaterial = true;
	
		PointsMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Points( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Points';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );
	
		}
	
		Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Points,
	
			isPoints: true,
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				return function raycast( raycaster, intersects ) {
	
					var object = this;
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
					var threshold = raycaster.params.Points.threshold;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
					var localThresholdSq = localThreshold * localThreshold;
					var position = new Vector3();
	
					function testPoint( point, index ) {
	
						var rayPointDistanceSq = ray.distanceSqToPoint( point );
	
						if ( rayPointDistanceSq < localThresholdSq ) {
	
							var intersectPoint = ray.closestPointToPoint( point );
							intersectPoint.applyMatrix4( matrixWorld );
	
							var distance = raycaster.ray.origin.distanceTo( intersectPoint );
	
							if ( distance < raycaster.near || distance > raycaster.far ) return;
	
							intersects.push( {
	
								distance: distance,
								distanceToRay: Math.sqrt( rayPointDistanceSq ),
								point: intersectPoint.clone(),
								index: index,
								face: null,
								object: object
	
							} );
	
						}
	
					}
	
					if ( (geometry && geometry.isBufferGeometry) ) {
	
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;
	
						if ( index !== null ) {
	
							var indices = index.array;
	
							for ( var i = 0, il = indices.length; i < il; i ++ ) {
	
								var a = indices[ i ];
	
								position.fromArray( positions, a * 3 );
	
								testPoint( position, a );
	
							}
	
						} else {
	
							for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
	
								position.fromArray( positions, i * 3 );
	
								testPoint( position, i );
	
							}
	
						}
	
					} else {
	
						var vertices = geometry.vertices;
	
						for ( var i = 0, l = vertices.length; i < l; i ++ ) {
	
							testPoint( vertices[ i ], i );
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Group() {
	
			Object3D.call( this );
	
			this.type = 'Group';
	
		}
	
		Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Group
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.generateMipmaps = false;
	
			var scope = this;
	
			function update() {
	
				requestAnimationFrame( update );
	
				if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
	
					scope.needsUpdate = true;
	
				}
	
			}
	
			update();
	
		}
	
		VideoTexture.prototype = Object.create( Texture.prototype );
		VideoTexture.prototype.constructor = VideoTexture;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { width: width, height: height };
			this.mipmaps = mipmaps;
	
			// no flipping for cube textures
			// (also flipping doesn't work for compressed textures )
	
			this.flipY = false;
	
			// can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files
	
			this.generateMipmaps = false;
	
		}
	
		CompressedTexture.prototype = Object.create( Texture.prototype );
		CompressedTexture.prototype.constructor = CompressedTexture;
	
		CompressedTexture.prototype.isCompressedTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.needsUpdate = true;
	
		}
	
		CanvasTexture.prototype = Object.create( Texture.prototype );
		CanvasTexture.prototype.constructor = CanvasTexture;
	
		/**
		 * @author Matt DesLauriers / @mattdesl
		 * @author atix / arthursilber.de
		 */
	
		function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
	
			format = format !== undefined ? format : DepthFormat;
	
			if ( format !== DepthFormat && format !== DepthStencilFormat ) {
	
				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )
	
			}
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.image = { width: width, height: height };
	
			this.type = type !== undefined ? type : UnsignedShortType;
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.flipY = false;
			this.generateMipmaps	= false;
	
		}
	
		DepthTexture.prototype = Object.create( Texture.prototype );
		DepthTexture.prototype.constructor = DepthTexture;
		DepthTexture.prototype.isDepthTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WireframeGeometry( geometry ) {
	
			BufferGeometry.call( this );
	
			var edge = [ 0, 0 ], hash = {};
	
			function sortFunction( a, b ) {
	
				return a - b;
	
			}
	
			var keys = [ 'a', 'b', 'c' ];
	
			if ( (geometry && geometry.isGeometry) ) {
	
				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var numEdges = 0;
	
				// allocate maximal size
				var edges = new Uint32Array( 6 * faces.length );
	
				for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					for ( var j = 0; j < 3; j ++ ) {
	
						edge[ 0 ] = face[ keys[ j ] ];
						edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
						edge.sort( sortFunction );
	
						var key = edge.toString();
	
						if ( hash[ key ] === undefined ) {
	
							edges[ 2 * numEdges ] = edge[ 0 ];
							edges[ 2 * numEdges + 1 ] = edge[ 1 ];
							hash[ key ] = true;
							numEdges ++;
	
						}
	
					}
	
				}
	
				var coords = new Float32Array( numEdges * 2 * 3 );
	
				for ( var i = 0, l = numEdges; i < l; i ++ ) {
	
					for ( var j = 0; j < 2; j ++ ) {
	
						var vertex = vertices[ edges [ 2 * i + j ] ];
	
						var index = 6 * i + 3 * j;
						coords[ index + 0 ] = vertex.x;
						coords[ index + 1 ] = vertex.y;
						coords[ index + 2 ] = vertex.z;
	
					}
	
				}
	
				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );
	
			} else if ( (geometry && geometry.isBufferGeometry) ) {
	
				if ( geometry.index !== null ) {
	
					// Indexed BufferGeometry
	
					var indices = geometry.index.array;
					var vertices = geometry.attributes.position;
					var groups = geometry.groups;
					var numEdges = 0;
	
					if ( groups.length === 0 ) {
	
						geometry.addGroup( 0, indices.length );
	
					}
	
					// allocate maximal size
					var edges = new Uint32Array( 2 * indices.length );
	
					for ( var o = 0, ol = groups.length; o < ol; ++ o ) {
	
						var group = groups[ o ];
	
						var start = group.start;
						var count = group.count;
	
						for ( var i = start, il = start + count; i < il; i += 3 ) {
	
							for ( var j = 0; j < 3; j ++ ) {
	
								edge[ 0 ] = indices[ i + j ];
								edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
								edge.sort( sortFunction );
	
								var key = edge.toString();
	
								if ( hash[ key ] === undefined ) {
	
									edges[ 2 * numEdges ] = edge[ 0 ];
									edges[ 2 * numEdges + 1 ] = edge[ 1 ];
									hash[ key ] = true;
									numEdges ++;
	
								}
	
							}
	
						}
	
					}
	
					var coords = new Float32Array( numEdges * 2 * 3 );
	
					for ( var i = 0, l = numEdges; i < l; i ++ ) {
	
						for ( var j = 0; j < 2; j ++ ) {
	
							var index = 6 * i + 3 * j;
							var index2 = edges[ 2 * i + j ];
	
							coords[ index + 0 ] = vertices.getX( index2 );
							coords[ index + 1 ] = vertices.getY( index2 );
							coords[ index + 2 ] = vertices.getZ( index2 );
	
						}
	
					}
	
					this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );
	
				} else {
	
					// non-indexed BufferGeometry
	
					var vertices = geometry.attributes.position.array;
					var numEdges = vertices.length / 3;
					var numTris = numEdges / 3;
	
					var coords = new Float32Array( numEdges * 2 * 3 );
	
					for ( var i = 0, l = numTris; i < l; i ++ ) {
	
						for ( var j = 0; j < 3; j ++ ) {
	
							var index = 18 * i + 6 * j;
	
							var index1 = 9 * i + 3 * j;
							coords[ index + 0 ] = vertices[ index1 ];
							coords[ index + 1 ] = vertices[ index1 + 1 ];
							coords[ index + 2 ] = vertices[ index1 + 2 ];
	
							var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
							coords[ index + 3 ] = vertices[ index2 ];
							coords[ index + 4 ] = vertices[ index2 + 1 ];
							coords[ index + 5 ] = vertices[ index2 + 2 ];
	
						}
	
					}
	
					this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );
	
				}
	
			}
	
		}
	
		WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
		WireframeGeometry.prototype.constructor = WireframeGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
		 */
	
		function ParametricBufferGeometry( func, slices, stacks ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ParametricBufferGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			// generate vertices and uvs
	
			var vertices = [];
			var uvs = [];
	
			var i, j, p;
			var u, v;
	
			var sliceCount = slices + 1;
	
			for ( i = 0; i <= stacks; i ++ ) {
	
				v = i / stacks;
	
				for ( j = 0; j <= slices; j ++ ) {
	
					u = j / slices;
	
					p = func( u, v );
					vertices.push( p.x, p.y, p.z );
	
					uvs.push( u, v );
	
				}
	
			}
	
			// generate indices
	
			var indices = [];
			var a, b, c, d;
	
			for ( i = 0; i < stacks; i ++ ) {
	
				for ( j = 0; j < slices; j ++ ) {
	
					a = i * sliceCount + j;
					b = i * sliceCount + j + 1;
					c = ( i + 1 ) * sliceCount + j + 1;
					d = ( i + 1 ) * sliceCount + j;
	
					// faces one and two
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
			this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
			this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );
	
			// generate normals
	
			this.computeVertexNormals();
	
		}
	
		ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
	
		/**
		 * @author zz85 / https://github.com/zz85
		 *
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
		 */
	
		function ParametricGeometry( func, slices, stacks ) {
	
			Geometry.call( this );
	
			this.type = 'ParametricGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
			this.mergeVertices();
	
		}
	
		ParametricGeometry.prototype = Object.create( Geometry.prototype );
		ParametricGeometry.prototype.constructor = ParametricGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PolyhedronBufferGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			radius = radius || 1;
			detail = detail || 0;
	
			// default buffer data
	
			var vertexBuffer = [];
			var uvBuffer = [];
	
			// the subdivision creates the vertex buffer data
	
			subdivide( detail );
	
			// all vertices should lie on a conceptual sphere with a given radius
	
			appplyRadius( radius );
	
			// finally, create the uv data
	
			generateUVs();
	
			// build non-indexed geometry
	
			this.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );
			this.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );
			this.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );
			this.normalizeNormals();
	
			this.boundingSphere = new Sphere( new Vector3(), radius );
	
			// helper functions
	
			function subdivide( detail ) {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				// iterate over all faces and apply a subdivison with the given detail value
	
				for ( var i = 0; i < indices.length; i += 3 ) {
	
					// get the vertices of the face
	
					getVertexByIndex( indices[ i + 0 ], a );
					getVertexByIndex( indices[ i + 1 ], b );
					getVertexByIndex( indices[ i + 2 ], c );
	
					// perform subdivision
	
					subdivideFace( a, b, c, detail );
	
				}
	
			}
	
			function subdivideFace( a, b, c, detail ) {
	
				var cols = Math.pow( 2, detail );
	
				// we use this multidimensional array as a data structure for creating the subdivision
	
				var v = [];
	
				var i, j;
	
				// construct all of the vertices for this subdivision
	
				for ( i = 0 ; i <= cols; i ++ ) {
	
					v[ i ] = [];
	
					var aj = a.clone().lerp( c, i / cols );
					var bj = b.clone().lerp( c, i / cols );
	
					var rows = cols - i;
	
					for ( j = 0; j <= rows; j ++ ) {
	
						if ( j === 0 && i === cols ) {
	
							v[ i ][ j ] = aj;
	
						} else {
	
							v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
	
						}
	
					}
	
				}
	
				// construct all of the faces
	
				for ( i = 0; i < cols ; i ++ ) {
	
					for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
	
						var k = Math.floor( j / 2 );
	
						if ( j % 2 === 0 ) {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
							pushVertex( v[ i ][ k ] );
	
						} else {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
	
						}
	
					}
	
				}
	
			}
	
			function appplyRadius( radius ) {
	
				var vertex = new Vector3();
	
				// iterate over the entire buffer and apply the radius to each vertex
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					vertex.normalize().multiplyScalar( radius );
	
					vertexBuffer[ i + 0 ] = vertex.x;
					vertexBuffer[ i + 1 ] = vertex.y;
					vertexBuffer[ i + 2 ] = vertex.z;
	
				}
	
			}
	
			function generateUVs() {
	
				var vertex = new Vector3();
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
					var v = inclination( vertex ) / Math.PI + 0.5;
					uvBuffer.push( u, 1 - v );
	
				}
	
				correctUVs();
	
				correctSeam();
	
			}
	
			function correctSeam() {
	
				// handle case when face straddles the seam, see #3269
	
				for ( var i = 0; i < uvBuffer.length; i += 6 ) {
	
					// uv data of a single face
	
					var x0 = uvBuffer[ i + 0 ];
					var x1 = uvBuffer[ i + 2 ];
					var x2 = uvBuffer[ i + 4 ];
	
					var max = Math.max( x0, x1, x2 );
					var min = Math.min( x0, x1, x2 );
	
					// 0.9 is somewhat arbitrary
	
					if ( max > 0.9 && min < 0.1 ) {
	
						if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
						if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
						if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
	
					}
	
				}
	
			}
	
			function pushVertex( vertex ) {
	
				vertexBuffer.push( vertex.x, vertex.y, vertex.z );
	
			}
	
			function getVertexByIndex( index, vertex ) {
	
				var stride = index * 3;
	
				vertex.x = vertices[ stride + 0 ];
				vertex.y = vertices[ stride + 1 ];
				vertex.z = vertices[ stride + 2 ];
	
			}
	
			function correctUVs() {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				var centroid = new Vector3();
	
				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();
	
				for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
	
					a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
					b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
					c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
	
					uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
					uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
					uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
	
					centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
	
					var azi = azimuth( centroid );
	
					correctUV( uvA, j + 0, a, azi );
					correctUV( uvB, j + 2, b, azi );
					correctUV( uvC, j + 4, c, azi );
	
				}
	
			}
	
			function correctUV( uv, stride, vector, azimuth  ) {
	
				if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
	
					uvBuffer[ stride ] =  uv.x - 1;
	
				}
	
				if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
	
					uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
	
				}
	
			}
	
			// Angle around the Y axis, counter-clockwise when looking from above.
	
			function azimuth( vector ) {
	
				return Math.atan2( vector.z, - vector.x );
	
			}
	
	
			// Angle above the XZ plane.
	
			function inclination( vector ) {
	
				return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
	
			}
	
		}
	
		PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function TetrahedronBufferGeometry( radius, detail ) {
	
			var vertices = [
				1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
			];
	
			var indices = [
				2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'TetrahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */
	
		function TetrahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'TetrahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
		TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function OctahedronBufferGeometry( radius,detail ) {
	
			var vertices = [
				1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
			];
	
			var indices = [
				0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'OctahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */
	
		function OctahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'OctahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		OctahedronGeometry.prototype = Object.create( Geometry.prototype );
		OctahedronGeometry.prototype.constructor = OctahedronGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function IcosahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	
			var vertices = [
				- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
				 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
				 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
			];
	
			var indices = [
				 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
				 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
				 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
				 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'IcosahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */
	
		function IcosahedronGeometry( radius, detail ) {
	
		 	Geometry.call( this );
	
			this.type = 'IcosahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
		IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function DodecahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
			var r = 1 / t;
	
			var vertices = [
	
				// (±1, ±1, ±1)
				- 1, - 1, - 1,    - 1, - 1,  1,
				- 1,  1, - 1,    - 1,  1,  1,
				 1, - 1, - 1,     1, - 1,  1,
				 1,  1, - 1,     1,  1,  1,
	
				// (0, ±1/φ, ±φ)
				 0, - r, - t,     0, - r,  t,
				 0,  r, - t,     0,  r,  t,
	
				// (±1/φ, ±φ, 0)
				- r, - t,  0,    - r,  t,  0,
				 r, - t,  0,     r,  t,  0,
	
				// (±φ, 0, ±1/φ)
				- t,  0, - r,     t,  0, - r,
				- t,  0,  r,     t,  0,  r
			];
	
			var indices = [
				 3, 11,  7,      3,  7, 15,      3, 15, 13,
				 7, 19, 17,      7, 17,  6,      7,  6, 15,
				17,  4,  8,     17,  8, 10,     17, 10,  6,
				 8,  0, 16,      8, 16,  2,      8,  2, 10,
				 0, 12,  1,      0,  1, 18,      0, 18, 16,
				 6, 10,  2,      6,  2, 13,      6, 13, 15,
				 2, 16, 18,      2, 18,  3,      2,  3, 13,
				18,  1,  9,     18,  9, 11,     18, 11,  3,
				 4, 14, 12,      4, 12,  0,      4,  0,  8,
				11,  9,  5,     11,  5, 19,     11, 19,  7,
				19,  5, 14,     19, 14,  4,     19,  4, 17,
				 1, 12, 14,      1, 14,  5,      1,  5,  9
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'DodecahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
	
		/**
		 * @author Abe Pazos / https://hamoid.com
		 */
	
		function DodecahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'DodecahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
		DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
	
		/**
		 * @author clockworkgeek / https://github.com/clockworkgeek
		 * @author timothypratley / https://github.com/timothypratley
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function PolyhedronGeometry( vertices, indices, radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'PolyhedronGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
			this.mergeVertices();
	
		}
	
		PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
		PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Creates a tube which extrudes along a 3d spline.
		 *
		 */
	
		function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TubeBufferGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			tubularSegments = tubularSegments || 64;
			radius = radius || 1;
			radialSegments = radialSegments || 8;
			closed = closed || false;
	
			var frames = path.computeFrenetFrames( tubularSegments, closed );
	
			// expose internals
	
			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals;
	
			// helper variables
	
			var vertex = new Vector3();
			var normal = new Vector3();
			var uv = new Vector2();
	
			var i, j;
	
			// buffer
	
			var vertices = [];
			var normals = [];
			var uvs = [];
			var indices = [];
	
			// create buffer data
	
			generateBufferData();
	
			// build geometry
	
			this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
			this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
			this.addAttribute( 'normal', Float32Attribute( normals, 3 ) );
			this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );
	
			// functions
	
			function generateBufferData() {
	
				for ( i = 0; i < tubularSegments; i ++ ) {
	
					generateSegment( i );
	
				}
	
				// if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
	
				generateSegment( ( closed === false ) ? tubularSegments : 0 );
	
				// uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries
	
				generateUVs();
	
				// finally create faces
	
				generateIndices();
	
			}
	
			function generateSegment( i ) {
	
				// we use getPointAt to sample evenly distributed points from the given path
	
				var P = path.getPointAt( i / tubularSegments );
	
				// retrieve corresponding normal and binormal
	
				var N = frames.normals[ i ];
				var B = frames.binormals[ i ];
	
				// generate normals and vertices for the current segment
	
				for ( j = 0; j <= radialSegments; j ++ ) {
	
					var v = j / radialSegments * Math.PI * 2;
	
					var sin =   Math.sin( v );
					var cos = - Math.cos( v );
	
					// normal
	
					normal.x = ( cos * N.x + sin * B.x );
					normal.y = ( cos * N.y + sin * B.y );
					normal.z = ( cos * N.z + sin * B.z );
					normal.normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// vertex
	
					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			}
	
			function generateIndices() {
	
				for ( j = 1; j <= tubularSegments; j ++ ) {
	
					for ( i = 1; i <= radialSegments; i ++ ) {
	
						var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
						var b = ( radialSegments + 1 ) * j + ( i - 1 );
						var c = ( radialSegments + 1 ) * j + i;
						var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
					}
	
				}
	
			}
	
			function generateUVs() {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					for ( j = 0; j <= radialSegments; j ++ ) {
	
						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;
	
						uvs.push( uv.x, uv.y );
	
					}
	
				}
	
			}
	
		}
	
		TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
	
		/**
		 * @author oosmoxiecode / https://github.com/oosmoxiecode
		 * @author WestLangley / https://github.com/WestLangley
		 * @author zz85 / https://github.com/zz85
		 * @author miningold / https://github.com/miningold
		 * @author jonobr1 / https://github.com/jonobr1
		 *
		 * Creates a tube which extrudes along a 3d spline.
		 */
	
		function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
	
			Geometry.call( this );
	
			this.type = 'TubeGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );
	
			var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
	
			// expose internals
	
			this.tangents = bufferGeometry.tangents;
			this.normals = bufferGeometry.normals;
			this.binormals = bufferGeometry.binormals;
	
			// create geometry
	
			this.fromBufferGeometry( bufferGeometry );
			this.mergeVertices();
	
		}
	
		TubeGeometry.prototype = Object.create( Geometry.prototype );
		TubeGeometry.prototype.constructor = TubeGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * see: http://www.blackpawn.com/texts/pqtorus/
		 */
		function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusKnotBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			radius = radius || 100;
			tube = tube || 40;
			tubularSegments = Math.floor( tubularSegments ) || 64;
			radialSegments = Math.floor( radialSegments ) || 8;
			p = p || 2;
			q = q || 3;
	
			// used to calculate buffer length
			var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
			var indexCount = radialSegments * tubularSegments * 2 * 3;
	
			// buffers
			var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
			// helper variables
			var i, j, index = 0, indexOffset = 0;
	
			var vertex = new Vector3();
			var normal = new Vector3();
			var uv = new Vector2();
	
			var P1 = new Vector3();
			var P2 = new Vector3();
	
			var B = new Vector3();
			var T = new Vector3();
			var N = new Vector3();
	
			// generate vertices, normals and uvs
	
			for ( i = 0; i <= tubularSegments; ++ i ) {
	
				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
	
				var u = i / tubularSegments * p * Math.PI * 2;
	
				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
	
				calculatePositionOnCurve( u, p, q, radius, P1 );
				calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
	
				// calculate orthonormal basis
	
				T.subVectors( P2, P1 );
				N.addVectors( P2, P1 );
				B.crossVectors( T, N );
				N.crossVectors( B, T );
	
				// normalize B, N. T can be ignored, we don't use it
	
				B.normalize();
				N.normalize();
	
				for ( j = 0; j <= radialSegments; ++ j ) {
	
					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
	
					var v = j / radialSegments * Math.PI * 2;
					var cx = - tube * Math.cos( v );
					var cy = tube * Math.sin( v );
	
					// now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
	
					vertex.x = P1.x + ( cx * N.x + cy * B.x );
					vertex.y = P1.y + ( cx * N.y + cy * B.y );
					vertex.z = P1.z + ( cx * N.z + cy * B.z );
	
					// vertex
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );
	
					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
					normal.subVectors( vertex, P1 ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );
	
					// uv
					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;
					uvs.setXY( index, uv.x, uv.y );
	
					// increase index
					index ++;
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= tubularSegments; j ++ ) {
	
				for ( i = 1; i <= radialSegments; i ++ ) {
	
					// indices
					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;
	
					// face two
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );
	
			// this function calculates the current position on the torus curve
	
			function calculatePositionOnCurve( u, p, q, radius, position ) {
	
				var cu = Math.cos( u );
				var su = Math.sin( u );
				var quOverP = q / p * u;
				var cs = Math.cos( quOverP );
	
				position.x = radius * ( 2 + cs ) * 0.5 * cu;
				position.y = radius * ( 2 + cs ) * su * 0.5;
				position.z = radius * Math.sin( quOverP ) * 0.5;
	
			}
	
		}
	
		TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
	
		/**
		 * @author oosmoxiecode
		 */
	
		function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
	
			Geometry.call( this );
	
			this.type = 'TorusKnotGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );
	
			this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
			this.mergeVertices();
	
		}
	
		TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
		TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			radius = radius || 100;
			tube = tube || 40;
			radialSegments = Math.floor( radialSegments ) || 8;
			tubularSegments = Math.floor( tubularSegments ) || 6;
			arc = arc || Math.PI * 2;
	
			// used to calculate buffer length
			var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
			var indexCount = radialSegments * tubularSegments * 2 * 3;
	
			// buffers
			var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
			var vertices = new Float32Array( vertexCount * 3 );
			var normals = new Float32Array( vertexCount * 3 );
			var uvs = new Float32Array( vertexCount * 2 );
	
			// offset variables
			var vertexBufferOffset = 0;
			var uvBufferOffset = 0;
			var indexBufferOffset = 0;
	
			// helper variables
			var center = new Vector3();
			var vertex = new Vector3();
			var normal = new Vector3();
	
			var j, i;
	
			// generate vertices, normals and uvs
	
			for ( j = 0; j <= radialSegments; j ++ ) {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					var u = i / tubularSegments * arc;
					var v = j / radialSegments * Math.PI * 2;
	
					// vertex
					vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
					vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
					vertex.z = tube * Math.sin( v );
	
					vertices[ vertexBufferOffset ] = vertex.x;
					vertices[ vertexBufferOffset + 1 ] = vertex.y;
					vertices[ vertexBufferOffset + 2 ] = vertex.z;
	
					// this vector is used to calculate the normal
					center.x = radius * Math.cos( u );
					center.y = radius * Math.sin( u );
	
					// normal
					normal.subVectors( vertex, center ).normalize();
	
					normals[ vertexBufferOffset ] = normal.x;
					normals[ vertexBufferOffset + 1 ] = normal.y;
					normals[ vertexBufferOffset + 2 ] = normal.z;
	
					// uv
					uvs[ uvBufferOffset ] = i / tubularSegments;
					uvs[ uvBufferOffset + 1 ] = j / radialSegments;
	
					// update offsets
					vertexBufferOffset += 3;
					uvBufferOffset += 2;
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= radialSegments; j ++ ) {
	
				for ( i = 1; i <= tubularSegments; i ++ ) {
	
					// indices
					var a = ( tubularSegments + 1 ) * j + i - 1;
					var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
					var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
					var d = ( tubularSegments + 1 ) * j + i;
	
					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;
	
					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;
	
					// update offset
					indexBufferOffset += 6;
	
				}
	
			}
	
			// build geometry
			this.setIndex( new BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );
	
		}
	
		TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
	
		/**
		 * @author oosmoxiecode
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
		 */
	
		function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			Geometry.call( this );
	
			this.type = 'TorusGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
	
		}
	
		TorusGeometry.prototype = Object.create( Geometry.prototype );
		TorusGeometry.prototype.constructor = TorusGeometry;
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		var ShapeUtils = {
	
			// calculate area of the contour polygon
	
			area: function ( contour ) {
	
				var n = contour.length;
				var a = 0.0;
	
				for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
	
					a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
	
				}
	
				return a * 0.5;
	
			},
	
			triangulate: ( function () {
	
				/**
				 * This code is a quick port of code written in C++ which was submitted to
				 * flipcode.com by John W. Ratcliff  // July 22, 2000
				 * See original code and more information here:
				 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
				 *
				 * ported to actionscript by Zevan Rosser
				 * www.actionsnippet.com
				 *
				 * ported to javascript by Joshua Koo
				 * http://www.lab4games.net/zz85/blog
				 *
				 */
	
				function snip( contour, u, v, w, n, verts ) {
	
					var p;
					var ax, ay, bx, by;
					var cx, cy, px, py;
	
					ax = contour[ verts[ u ] ].x;
					ay = contour[ verts[ u ] ].y;
	
					bx = contour[ verts[ v ] ].x;
					by = contour[ verts[ v ] ].y;
	
					cx = contour[ verts[ w ] ].x;
					cy = contour[ verts[ w ] ].y;
	
					if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;
	
					var aX, aY, bX, bY, cX, cY;
					var apx, apy, bpx, bpy, cpx, cpy;
					var cCROSSap, bCROSScp, aCROSSbp;
	
					aX = cx - bx;  aY = cy - by;
					bX = ax - cx;  bY = ay - cy;
					cX = bx - ax;  cY = by - ay;
	
					for ( p = 0; p < n; p ++ ) {
	
						px = contour[ verts[ p ] ].x;
						py = contour[ verts[ p ] ].y;
	
						if ( ( ( px === ax ) && ( py === ay ) ) ||
							 ( ( px === bx ) && ( py === by ) ) ||
							 ( ( px === cx ) && ( py === cy ) ) )	continue;
	
						apx = px - ax;  apy = py - ay;
						bpx = px - bx;  bpy = py - by;
						cpx = px - cx;  cpy = py - cy;
	
						// see if p is inside triangle abc
	
						aCROSSbp = aX * bpy - aY * bpx;
						cCROSSap = cX * apy - cY * apx;
						bCROSScp = bX * cpy - bY * cpx;
	
						if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;
	
					}
	
					return true;
	
				}
	
				// takes in an contour array and returns
	
				return function triangulate( contour, indices ) {
	
					var n = contour.length;
	
					if ( n < 3 ) return null;
	
					var result = [],
						verts = [],
						vertIndices = [];
	
					/* we want a counter-clockwise polygon in verts */
	
					var u, v, w;
	
					if ( ShapeUtils.area( contour ) > 0.0 ) {
	
						for ( v = 0; v < n; v ++ ) verts[ v ] = v;
	
					} else {
	
						for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;
	
					}
	
					var nv = n;
	
					/*  remove nv - 2 vertices, creating 1 triangle every time */
	
					var count = 2 * nv;   /* error detection */
	
					for ( v = nv - 1; nv > 2; ) {
	
						/* if we loop, it is probably a non-simple polygon */
	
						if ( ( count -- ) <= 0 ) {
	
							//** Triangulate: ERROR - probable bad polygon!
	
							//throw ( "Warning, unable to triangulate polygon!" );
							//return null;
							// Sometimes warning is fine, especially polygons are triangulated in reverse.
							console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );
	
							if ( indices ) return vertIndices;
							return result;
	
						}
	
						/* three consecutive vertices in current polygon, <u,v,w> */
	
						u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
						v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
						w = v + 1;  if ( nv <= w ) w = 0;     /* next     */
	
						if ( snip( contour, u, v, w, nv, verts ) ) {
	
							var a, b, c, s, t;
	
							/* true names of the vertices */
	
							a = verts[ u ];
							b = verts[ v ];
							c = verts[ w ];
	
							/* output Triangle */
	
							result.push( [ contour[ a ],
								contour[ b ],
								contour[ c ] ] );
	
	
							vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );
	
							/* remove v from the remaining polygon */
	
							for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {
	
								verts[ s ] = verts[ t ];
	
							}
	
							nv --;
	
							/* reset error detection counter */
	
							count = 2 * nv;
	
						}
	
					}
	
					if ( indices ) return vertIndices;
					return result;
	
				}
	
			} )(),
	
			triangulateShape: function ( contour, holes ) {
	
				function removeDupEndPts(points) {
	
					var l = points.length;
	
					if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
	
						points.pop();
	
					}
	
				}
	
				removeDupEndPts( contour );
				holes.forEach( removeDupEndPts );
	
				function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
	
					// inOtherPt needs to be collinear to the inSegment
					if ( inSegPt1.x !== inSegPt2.x ) {
	
						if ( inSegPt1.x < inSegPt2.x ) {
	
							return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
	
						} else {
	
							return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
	
						}
	
					} else {
	
						if ( inSegPt1.y < inSegPt2.y ) {
	
							return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
	
						} else {
	
							return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
	
						}
	
					}
	
				}
	
				function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
	
					var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
					var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;
	
					var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
					var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;
	
					var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
					var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;
	
					if ( Math.abs( limit ) > Number.EPSILON ) {
	
						// not parallel
	
						var perpSeg2;
						if ( limit > 0 ) {
	
							if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];
	
						} else {
	
							if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];
	
						}
	
						// i.e. to reduce rounding errors
						// intersection at endpoint of segment#1?
						if ( perpSeg2 === 0 ) {
	
							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt1 ];
	
						}
						if ( perpSeg2 === limit ) {
	
							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt2 ];
	
						}
						// intersection at endpoint of segment#2?
						if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
						if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];
	
						// return real intersection point
						var factorSeg1 = perpSeg2 / limit;
						return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
									y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];
	
					} else {
	
						// parallel or collinear
						if ( ( perpSeg1 !== 0 ) ||
							 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];
	
						// they are collinear or degenerate
						var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
						var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
						// both segments are points
						if ( seg1Pt && seg2Pt ) {
	
							if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
								 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
							return [ inSeg1Pt1 ];                 						// they are the same point
	
						}
						// segment#1  is a single point
						if ( seg1Pt ) {
	
							if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
							return [ inSeg1Pt1 ];
	
						}
						// segment#2  is a single point
						if ( seg2Pt ) {
	
							if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
							return [ inSeg2Pt1 ];
	
						}
	
						// they are collinear segments, which might overlap
						var seg1min, seg1max, seg1minVal, seg1maxVal;
						var seg2min, seg2max, seg2minVal, seg2maxVal;
						if ( seg1dx !== 0 ) {
	
							// the segments are NOT on a vertical line
							if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
	
								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
	
							} else {
	
								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
	
							}
							if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
	
								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
	
							} else {
	
								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
	
							}
	
						} else {
	
							// the segments are on a vertical line
							if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
	
								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
	
							} else {
	
								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
	
							}
							if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
	
								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
	
							} else {
	
								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
	
							}
	
						}
						if ( seg1minVal <= seg2minVal ) {
	
							if ( seg1maxVal <  seg2minVal )	return [];
							if ( seg1maxVal === seg2minVal )	{
	
								if ( inExcludeAdjacentSegs )		return [];
								return [ seg2min ];
	
							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
							return	[ seg2min, seg2max ];
	
						} else {
	
							if ( seg1minVal >  seg2maxVal )	return [];
							if ( seg1minVal === seg2maxVal )	{
	
								if ( inExcludeAdjacentSegs )		return [];
								return [ seg1min ];
	
							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
							return	[ seg1min, seg2max ];
	
						}
	
					}
	
				}
	
				function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
	
					// The order of legs is important
	
					// translation of all points, so that Vertex is at (0,0)
					var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
					var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
					var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;
	
					// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
					var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
					var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;
	
					if ( Math.abs( from2toAngle ) > Number.EPSILON ) {
	
						// angle != 180 deg.
	
						var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
						// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );
	
						if ( from2toAngle > 0 ) {
	
							// main angle < 180 deg.
							return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
	
						} else {
	
							// main angle > 180 deg.
							return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
	
						}
	
					} else {
	
						// angle == 180 deg.
						// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
						return	( from2otherAngle > 0 );
	
					}
	
				}
	
	
				function removeHoles( contour, holes ) {
	
					var shape = contour.concat(); // work on this shape
					var hole;
	
					function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
	
						// Check if hole point lies within angle around shape point
						var lastShapeIdx = shape.length - 1;
	
						var prevShapeIdx = inShapeIdx - 1;
						if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;
	
						var nextShapeIdx = inShapeIdx + 1;
						if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;
	
						var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
						if ( ! insideAngle ) {
	
							// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
							return	false;
	
						}
	
						// Check if shape point lies within angle around hole point
						var lastHoleIdx = hole.length - 1;
	
						var prevHoleIdx = inHoleIdx - 1;
						if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;
	
						var nextHoleIdx = inHoleIdx + 1;
						if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;
	
						insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
						if ( ! insideAngle ) {
	
							// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
							return	false;
	
						}
	
						return	true;
	
					}
	
					function intersectsShapeEdge( inShapePt, inHolePt ) {
	
						// checks for intersections with shape edges
						var sIdx, nextIdx, intersection;
						for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {
	
							nextIdx = sIdx + 1; nextIdx %= shape.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;
	
						}
	
						return	false;
	
					}
	
					var indepHoles = [];
	
					function intersectsHoleEdge( inShapePt, inHolePt ) {
	
						// checks for intersections with hole edges
						var ihIdx, chkHole,
							hIdx, nextIdx, intersection;
						for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {
	
							chkHole = holes[ indepHoles[ ihIdx ]];
							for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {
	
								nextIdx = hIdx + 1; nextIdx %= chkHole.length;
								intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
								if ( intersection.length > 0 )		return	true;
	
							}
	
						}
						return	false;
	
					}
	
					var holeIndex, shapeIndex,
						shapePt, holePt,
						holeIdx, cutKey, failedCuts = [],
						tmpShape1, tmpShape2,
						tmpHole1, tmpHole2;
	
					for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
						indepHoles.push( h );
	
					}
	
					var minShapeIndex = 0;
					var counter = indepHoles.length * 2;
					while ( indepHoles.length > 0 ) {
	
						counter --;
						if ( counter < 0 ) {
	
							console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
							break;
	
						}
	
						// search for shape-vertex and hole-vertex,
						// which can be connected without intersections
						for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {
	
							shapePt = shape[ shapeIndex ];
							holeIndex	= - 1;
	
							// search for hole which can be reached without intersections
							for ( var h = 0; h < indepHoles.length; h ++ ) {
	
								holeIdx = indepHoles[ h ];
	
								// prevent multiple checks
								cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
								if ( failedCuts[ cutKey ] !== undefined )			continue;
	
								hole = holes[ holeIdx ];
								for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
	
									holePt = hole[ h2 ];
									if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
									if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
									if ( intersectsHoleEdge( shapePt, holePt ) )		continue;
	
									holeIndex = h2;
									indepHoles.splice( h, 1 );
	
									tmpShape1 = shape.slice( 0, shapeIndex + 1 );
									tmpShape2 = shape.slice( shapeIndex );
									tmpHole1 = hole.slice( holeIndex );
									tmpHole2 = hole.slice( 0, holeIndex + 1 );
	
									shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );
	
									minShapeIndex = shapeIndex;
	
									// Debug only, to show the selected cuts
									// glob_CutLines.push( [ shapePt, holePt ] );
	
									break;
	
								}
								if ( holeIndex >= 0 )	break;		// hole-vertex found
	
								failedCuts[ cutKey ] = true;			// remember failure
	
							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found
	
						}
	
					}
	
					return shape; 			/* shape with no holes */
	
				}
	
	
				var i, il, f, face,
					key, index,
					allPointsMap = {};
	
				// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.
	
				var allpoints = contour.concat();
	
				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
					Array.prototype.push.apply( allpoints, holes[ h ] );
	
				}
	
				//console.log( "allpoints",allpoints, allpoints.length );
	
				// prepare all points map
	
				for ( i = 0, il = allpoints.length; i < il; i ++ ) {
	
					key = allpoints[ i ].x + ":" + allpoints[ i ].y;
	
					if ( allPointsMap[ key ] !== undefined ) {
	
						console.warn( "THREE.ShapeUtils: Duplicate point", key, i );
	
					}
	
					allPointsMap[ key ] = i;
	
				}
	
				// remove holes by cutting paths to holes and adding them to the shape
				var shapeWithoutHoles = removeHoles( contour, holes );
	
				var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
				//console.log( "triangles",triangles, triangles.length );
	
				// check all face vertices against all points map
	
				for ( i = 0, il = triangles.length; i < il; i ++ ) {
	
					face = triangles[ i ];
	
					for ( f = 0; f < 3; f ++ ) {
	
						key = face[ f ].x + ":" + face[ f ].y;
	
						index = allPointsMap[ key ];
	
						if ( index !== undefined ) {
	
							face[ f ] = index;
	
						}
	
					}
	
				}
	
				return triangles.concat();
	
			},
	
			isClockWise: function ( pts ) {
	
				return ShapeUtils.area( pts ) < 0;
	
			},
	
			// Bezier Curves formulas obtained from
			// http://en.wikipedia.org/wiki/B%C3%A9zier_curve
	
			// Quad Bezier Functions
	
			b2: ( function () {
	
				function b2p0( t, p ) {
	
					var k = 1 - t;
					return k * k * p;
	
				}
	
				function b2p1( t, p ) {
	
					return 2 * ( 1 - t ) * t * p;
	
				}
	
				function b2p2( t, p ) {
	
					return t * t * p;
	
				}
	
				return function b2( t, p0, p1, p2 ) {
	
					return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );
	
				};
	
			} )(),
	
			// Cubic Bezier Functions
	
			b3: ( function () {
	
				function b3p0( t, p ) {
	
					var k = 1 - t;
					return k * k * k * p;
	
				}
	
				function b3p1( t, p ) {
	
					var k = 1 - t;
					return 3 * k * k * t * p;
	
				}
	
				function b3p2( t, p ) {
	
					var k = 1 - t;
					return 3 * k * t * t * p;
	
				}
	
				function b3p3( t, p ) {
	
					return t * t * t * p;
	
				}
	
				return function b3( t, p0, p1, p2, p3 ) {
	
					return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );
	
				};
	
			} )()
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Creates extruded geometry from a path shape.
		 *
		 * parameters = {
		 *
		 *  curveSegments: <int>, // number of points on the curves
		 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
		 *  amount: <int>, // Depth to extrude the shape
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into the original shape bevel goes
		 *  bevelSize: <float>, // how far from shape outline is bevel
		 *  bevelSegments: <int>, // number of bevel layers
		 *
		 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
		 *  frames: <Object> // containing arrays of tangents, normals, binormals
		 *
		 *  uvGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 **/
	
		function ExtrudeGeometry( shapes, options ) {
	
			if ( typeof( shapes ) === "undefined" ) {
	
				shapes = [];
				return;
	
			}
	
			Geometry.call( this );
	
			this.type = 'ExtrudeGeometry';
	
			shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
	
			this.addShapeList( shapes, options );
	
			this.computeFaceNormals();
	
			// can't really use automatic vertex normals
			// as then front and back sides get smoothed too
			// should do separate smoothing just for sides
	
			//this.computeVertexNormals();
	
			//console.log( "took", ( Date.now() - startTime ) );
	
		}
	
		ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
		ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
	
		ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
	
			var sl = shapes.length;
	
			for ( var s = 0; s < sl; s ++ ) {
	
				var shape = shapes[ s ];
				this.addShape( shape, options );
	
			}
	
		};
	
		ExtrudeGeometry.prototype.addShape = function ( shape, options ) {
	
			var amount = options.amount !== undefined ? options.amount : 100;
	
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
	
			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false
	
			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
	
			var steps = options.steps !== undefined ? options.steps : 1;
	
			var extrudePath = options.extrudePath;
			var extrudePts, extrudeByPath = false;
	
			// Use default WorldUVGenerator if no UV generators are specified.
			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;
	
			var splineTube, binormal, normal, position2;
			if ( extrudePath ) {
	
				extrudePts = extrudePath.getSpacedPoints( steps );
	
				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion
	
				// SETUP TNB variables
	
				// TODO1 - have a .isClosed in spline?
	
				splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );
	
				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
	
				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();
	
			}
	
			// Safeguards if bevels are not enabled
	
			if ( ! bevelEnabled ) {
	
				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
	
			}
	
			// Variables initialization
	
			var ahole, h, hl; // looping of holes
			var scope = this;
	
			var shapesOffset = this.vertices.length;
	
			var shapePoints = shape.extractPoints( curveSegments );
	
			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;
	
			var reverse = ! ShapeUtils.isClockWise( vertices );
	
			if ( reverse ) {
	
				vertices = vertices.reverse();
	
				// Maybe we should also check if holes are in the opposite direction, just to be safe ...
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
	
					if ( ShapeUtils.isClockWise( ahole ) ) {
	
						holes[ h ] = ahole.reverse();
	
					}
	
				}
	
				reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!
	
			}
	
	
			var faces = ShapeUtils.triangulateShape( vertices, holes );
	
			/* Vertices */
	
			var contour = vertices; // vertices has all points but contour has only points of circumference
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
	
				vertices = vertices.concat( ahole );
	
			}
	
	
			function scalePt2( pt, vec, size ) {
	
				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
	
				return vec.clone().multiplyScalar( size ).add( pt );
	
			}
	
			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;
	
	
			// Find directions for point movement
	
	
			function getBevelVec( inPt, inPrev, inNext ) {
	
				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.
	
				var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt
	
				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html
	
				var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
	
				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
	
				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
				if ( Math.abs( collinear0 ) > Number.EPSILON ) {
	
					// not collinear
	
					// length of vectors for normalizing
	
					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
	
					// shift adjacent points by unit vectors to the left
	
					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
	
					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
	
					// scaling factor for v_prev to intersection point
	
					var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
								( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
							  ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
					// vector from inPt to intersection point
	
					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
	
					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {
	
						return	new Vector2( v_trans_x, v_trans_y );
	
					} else {
	
						shrink_by = Math.sqrt( v_trans_lensq / 2 );
	
					}
	
				} else {
	
					// handle special case of collinear edges
	
					var direction_eq = false;		// assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {
	
						if ( v_next_x > Number.EPSILON ) {
	
							direction_eq = true;
	
						}
	
					} else {
	
						if ( v_prev_x < - Number.EPSILON ) {
	
							if ( v_next_x < - Number.EPSILON ) {
	
								direction_eq = true;
	
							}
	
						} else {
	
							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
	
								direction_eq = true;
	
							}
	
						}
	
					}
	
					if ( direction_eq ) {
	
						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y =  v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );
	
					} else {
	
						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );
	
					}
	
				}
	
				return	new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
	
			}
	
	
			var contourMovements = [];
	
			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
				if ( j === il ) j = 0;
				if ( k === il ) k = 0;
	
				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)
	
				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
	
			}
	
			var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
	
				oneHoleMovements = [];
	
				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
					if ( j === il ) j = 0;
					if ( k === il ) k = 0;
	
					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
	
				}
	
				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );
	
			}
	
	
			// Loop bevelSegments, 1 for the front, 1 for the back
	
			for ( b = 0; b < bevelSegments; b ++ ) {
	
				//for ( b = bevelSegments; b > 0; b -- ) {
	
				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );
	
				// contract shape
	
				for ( i = 0, il = contour.length; i < il; i ++ ) {
	
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
	
					v( vert.x, vert.y,  - z );
	
				}
	
				// expand holes
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
	
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
						v( vert.x, vert.y,  - z );
	
					}
	
				}
	
			}
	
			bs = bevelSize;
	
			// Back facing vertices
	
			for ( i = 0; i < vlen; i ++ ) {
	
				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
				if ( ! extrudeByPath ) {
	
					v( vert.x, vert.y, 0 );
	
				} else {
	
					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
	
					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
	
					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
	
					v( position2.x, position2.y, position2.z );
	
				}
	
			}
	
			// Add stepped vertices...
			// Including front facing vertices
	
			var s;
	
			for ( s = 1; s <= steps; s ++ ) {
	
				for ( i = 0; i < vlen; i ++ ) {
	
					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
					if ( ! extrudeByPath ) {
	
						v( vert.x, vert.y, amount / steps * s );
	
					} else {
	
						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
	
						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
	
						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
	
						v( position2.x, position2.y, position2.z );
	
					}
	
				}
	
			}
	
	
			// Add bevel segments planes
	
			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {
	
				t = b / bevelSegments;
				z = bevelThickness * Math.cos ( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );
	
				// contract shape
	
				for ( i = 0, il = contour.length; i < il; i ++ ) {
	
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y,  amount + z );
	
				}
	
				// expand holes
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
	
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
						if ( ! extrudeByPath ) {
	
							v( vert.x, vert.y,  amount + z );
	
						} else {
	
							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
	
						}
	
					}
	
				}
	
			}
	
			/* Faces */
	
			// Top and bottom faces
	
			buildLidFaces();
	
			// Sides faces
	
			buildSideFaces();
	
	
			/////  Internal functions
	
			function buildLidFaces() {
	
				if ( bevelEnabled ) {
	
					var layer = 0; // steps + 1
					var offset = vlen * layer;
	
					// Bottom faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
	
					}
	
					layer = steps + bevelSegments * 2;
					offset = vlen * layer;
	
					// Top faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
	
					}
	
				} else {
	
					// Bottom faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );
	
					}
	
					// Top faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
	
					}
	
				}
	
			}
	
			// Create faces for the z-sides of the shape
	
			function buildSideFaces() {
	
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );
	
					//, true
					layeroffset += ahole.length;
	
				}
	
			}
	
			function sidewalls( contour, layeroffset ) {
	
				var j, k;
				i = contour.length;
	
				while ( -- i >= 0 ) {
	
					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;
	
					//console.log('b', i,j, i-1, k,vertices.length);
	
					var s = 0, sl = steps  + bevelSegments * 2;
	
					for ( s = 0; s < sl; s ++ ) {
	
						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );
	
						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;
	
						f4( a, b, c, d, contour, s, sl, j, k );
	
					}
	
				}
	
			}
	
	
			function v( x, y, z ) {
	
				scope.vertices.push( new Vector3( x, y, z ) );
	
			}
	
			function f3( a, b, c ) {
	
				a += shapesOffset;
				b += shapesOffset;
				c += shapesOffset;
	
				scope.faces.push( new Face3( a, b, c, null, null, 0 ) );
	
				var uvs = uvgen.generateTopUV( scope, a, b, c );
	
				scope.faceVertexUvs[ 0 ].push( uvs );
	
			}
	
			function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {
	
				a += shapesOffset;
				b += shapesOffset;
				c += shapesOffset;
				d += shapesOffset;
	
				scope.faces.push( new Face3( a, b, d, null, null, 1 ) );
				scope.faces.push( new Face3( b, c, d, null, null, 1 ) );
	
				var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );
	
				scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
				scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );
	
			}
	
		};
	
		ExtrudeGeometry.WorldUVGenerator = {
	
			generateTopUV: function ( geometry, indexA, indexB, indexC ) {
	
				var vertices = geometry.vertices;
	
				var a = vertices[ indexA ];
				var b = vertices[ indexB ];
				var c = vertices[ indexC ];
	
				return [
					new Vector2( a.x, a.y ),
					new Vector2( b.x, b.y ),
					new Vector2( c.x, c.y )
				];
	
			},
	
			generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {
	
				var vertices = geometry.vertices;
	
				var a = vertices[ indexA ];
				var b = vertices[ indexB ];
				var c = vertices[ indexC ];
				var d = vertices[ indexD ];
	
				if ( Math.abs( a.y - b.y ) < 0.01 ) {
	
					return [
						new Vector2( a.x, 1 - a.z ),
						new Vector2( b.x, 1 - b.z ),
						new Vector2( c.x, 1 - c.z ),
						new Vector2( d.x, 1 - d.z )
					];
	
				} else {
	
					return [
						new Vector2( a.y, 1 - a.z ),
						new Vector2( b.y, 1 - b.z ),
						new Vector2( c.y, 1 - c.z ),
						new Vector2( d.y, 1 - d.z )
					];
	
				}
	
			}
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Text = 3D Text
		 *
		 * parameters = {
		 *  font: <THREE.Font>, // font
		 *
		 *  size: <float>, // size of the text
		 *  height: <float>, // thickness to extrude text
		 *  curveSegments: <int>, // number of points on the curves
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into text bevel goes
		 *  bevelSize: <float> // how far from text outline is bevel
		 * }
		 */
	
		function TextGeometry( text, parameters ) {
	
			parameters = parameters || {};
	
			var font = parameters.font;
	
			if ( (font && font.isFont) === false ) {
	
				console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
				return new Geometry();
	
			}
	
			var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );
	
			// translate parameters to ExtrudeGeometry API
	
			parameters.amount = parameters.height !== undefined ? parameters.height : 50;
	
			// defaults
	
			if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
			if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
			if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
	
			ExtrudeGeometry.call( this, shapes, parameters );
	
			this.type = 'TextGeometry';
	
		}
	
		TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );
		TextGeometry.prototype.constructor = TextGeometry;
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * based on THREE.SphereGeometry
		 */
	
		function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'SphereBufferGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 50;
	
			widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
			heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
	
			phiStart = phiStart !== undefined ? phiStart : 0;
			phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
	
			var thetaEnd = thetaStart + thetaLength;
	
			var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );
	
			var positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
			var index = 0, vertices = [], normal = new Vector3();
	
			for ( var y = 0; y <= heightSegments; y ++ ) {
	
				var verticesRow = [];
	
				var v = y / heightSegments;
	
				for ( var x = 0; x <= widthSegments; x ++ ) {
	
					var u = x / widthSegments;
	
					var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
					var py = radius * Math.cos( thetaStart + v * thetaLength );
					var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
	
					normal.set( px, py, pz ).normalize();
	
					positions.setXYZ( index, px, py, pz );
					normals.setXYZ( index, normal.x, normal.y, normal.z );
					uvs.setXY( index, u, 1 - v );
	
					verticesRow.push( index );
	
					index ++;
	
				}
	
				vertices.push( verticesRow );
	
			}
	
			var indices = [];
	
			for ( var y = 0; y < heightSegments; y ++ ) {
	
				for ( var x = 0; x < widthSegments; x ++ ) {
	
					var v1 = vertices[ y ][ x + 1 ];
					var v2 = vertices[ y ][ x ];
					var v3 = vertices[ y + 1 ][ x ];
					var v4 = vertices[ y + 1 ][ x + 1 ];
	
					if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
					if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );
	
				}
	
			}
	
			this.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
			this.addAttribute( 'position', positions );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );
	
			this.boundingSphere = new Sphere( new Vector3(), radius );
	
		}
	
		SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'SphereGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	
		}
	
		SphereGeometry.prototype = Object.create( Geometry.prototype );
		SphereGeometry.prototype.constructor = SphereGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'RingBufferGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			innerRadius = innerRadius || 20;
			outerRadius = outerRadius || 50;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
			phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
	
			// these are used to calculate buffer length
			var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
			var indexCount = thetaSegments * phiSegments * 2 * 3;
	
			// buffers
			var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
			// some helper variables
			var index = 0, indexOffset = 0, segment;
			var radius = innerRadius;
			var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
			var vertex = new Vector3();
			var uv = new Vector2();
			var j, i;
	
			// generate vertices, normals and uvs
	
			// values are generate from the inside of the ring to the outside
	
			for ( j = 0; j <= phiSegments; j ++ ) {
	
				for ( i = 0; i <= thetaSegments; i ++ ) {
	
					segment = thetaStart + i / thetaSegments * thetaLength;
	
					// vertex
					vertex.x = radius * Math.cos( segment );
					vertex.y = radius * Math.sin( segment );
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );
	
					// normal
					normals.setXYZ( index, 0, 0, 1 );
	
					// uv
					uv.x = ( vertex.x / outerRadius + 1 ) / 2;
					uv.y = ( vertex.y / outerRadius + 1 ) / 2;
					uvs.setXY( index, uv.x, uv.y );
	
					// increase index
					index++;
	
				}
	
				// increase the radius for next row of vertices
				radius += radiusStep;
	
			}
	
			// generate indices
	
			for ( j = 0; j < phiSegments; j ++ ) {
	
				var thetaSegmentLevel = j * ( thetaSegments + 1 );
	
				for ( i = 0; i < thetaSegments; i ++ ) {
	
					segment = i + thetaSegmentLevel;
	
					// indices
					var a = segment;
					var b = segment + thetaSegments + 1;
					var c = segment + thetaSegments + 2;
					var d = segment + 1;
	
					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
	
					// face two
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );
	
		}
	
		RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		RingBufferGeometry.prototype.constructor = RingBufferGeometry;
	
		/**
		 * @author Kaleb Murphy
		 */
	
		function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'RingGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
	
		}
	
		RingGeometry.prototype = Object.create( Geometry.prototype );
		RingGeometry.prototype.constructor = RingGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
		 */
	
		function PlaneGeometry( width, height, widthSegments, heightSegments ) {
	
			Geometry.call( this );
	
			this.type = 'PlaneGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	
		}
	
		PlaneGeometry.prototype = Object.create( Geometry.prototype );
		PlaneGeometry.prototype.constructor = PlaneGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		 // points - to create a closed torus, one must use a set of points
		 //    like so: [ a, b, c, d, a ], see first is the same as last.
		 // segments - the number of circumference segments to create
		 // phiStart - the starting radian
		 // phiLength - the radian (0 to 2PI) range of the lathed section
		 //    2PI is a closed lathe, less than 2PI is a portion.
	
		function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'LatheBufferGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			segments = Math.floor( segments ) || 12;
			phiStart = phiStart || 0;
			phiLength = phiLength || Math.PI * 2;
	
			// clamp phiLength so it's in range of [ 0, 2PI ]
			phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );
	
			// these are used to calculate buffer length
			var vertexCount = ( segments + 1 ) * points.length;
			var indexCount = segments * points.length * 2 * 3;
	
			// buffers
			var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
			// helper variables
			var index = 0, indexOffset = 0, base;
			var inverseSegments = 1.0 / segments;
			var vertex = new Vector3();
			var uv = new Vector2();
			var i, j;
	
			// generate vertices and uvs
	
			for ( i = 0; i <= segments; i ++ ) {
	
				var phi = phiStart + i * inverseSegments * phiLength;
	
				var sin = Math.sin( phi );
				var cos = Math.cos( phi );
	
				for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
	
					// vertex
					vertex.x = points[ j ].x * sin;
					vertex.y = points[ j ].y;
					vertex.z = points[ j ].x * cos;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );
	
					// uv
					uv.x = i / segments;
					uv.y = j / ( points.length - 1 );
					uvs.setXY( index, uv.x, uv.y );
	
					// increase index
					index ++;
	
				}
	
			}
	
			// generate indices
	
			for ( i = 0; i < segments; i ++ ) {
	
				for ( j = 0; j < ( points.length - 1 ); j ++ ) {
	
					base = j + i * points.length;
	
					// indices
					var a = base;
					var b = base + points.length;
					var c = base + points.length + 1;
					var d = base + 1;
	
					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;
	
					// face two
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'uv', uvs );
	
			// generate normals
	
			this.computeVertexNormals();
	
			// if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).
	
			if( phiLength === Math.PI * 2 ) {
	
				var normals = this.attributes.normal.array;
				var n1 = new Vector3();
				var n2 = new Vector3();
				var n = new Vector3();
	
				// this is the buffer offset for the last line of vertices
				base = segments * points.length * 3;
	
				for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
	
					// select the normal of the vertex in the first line
					n1.x = normals[ j + 0 ];
					n1.y = normals[ j + 1 ];
					n1.z = normals[ j + 2 ];
	
					// select the normal of the vertex in the last line
					n2.x = normals[ base + j + 0 ];
					n2.y = normals[ base + j + 1 ];
					n2.z = normals[ base + j + 2 ];
	
					// average normals
					n.addVectors( n1, n2 ).normalize();
	
					// assign the new values to both normals
					normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
					normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
					normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
	
				} // next row
	
			}
	
		}
	
		LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
	
		/**
		 * @author astrodud / http://astrodud.isgreat.org/
		 * @author zz85 / https://github.com/zz85
		 * @author bhouston / http://clara.io
		 */
	
		// points - to create a closed torus, one must use a set of points
		//    like so: [ a, b, c, d, a ], see first is the same as last.
		// segments - the number of circumference segments to create
		// phiStart - the starting radian
		// phiLength - the radian (0 to 2PI) range of the lathed section
		//    2PI is a closed lathe, less than 2PI is a portion.
	
		function LatheGeometry( points, segments, phiStart, phiLength ) {
	
			Geometry.call( this );
	
			this.type = 'LatheGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
			this.mergeVertices();
	
		}
	
		LatheGeometry.prototype = Object.create( Geometry.prototype );
		LatheGeometry.prototype.constructor = LatheGeometry;
	
		/**
		 * @author jonobr1 / http://jonobr1.com
		 *
		 * Creates a one-sided polygonal geometry from a path shape. Similar to
		 * ExtrudeGeometry.
		 *
		 * parameters = {
		 *
		 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
		 *
		 *	material: <int> // material index for front and back faces
		 *	uvGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 **/
	
		function ShapeGeometry( shapes, options ) {
	
			Geometry.call( this );
	
			this.type = 'ShapeGeometry';
	
			if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];
	
			this.addShapeList( shapes, options );
	
			this.computeFaceNormals();
	
		}
	
		ShapeGeometry.prototype = Object.create( Geometry.prototype );
		ShapeGeometry.prototype.constructor = ShapeGeometry;
	
		/**
		 * Add an array of shapes to THREE.ShapeGeometry.
		 */
		ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {
	
			for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
				this.addShape( shapes[ i ], options );
	
			}
	
			return this;
	
		};
	
		/**
		 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
		 */
		ShapeGeometry.prototype.addShape = function ( shape, options ) {
	
			if ( options === undefined ) options = {};
			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
	
			var material = options.material;
			var uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;
	
			//
	
			var i, l, hole;
	
			var shapesOffset = this.vertices.length;
			var shapePoints = shape.extractPoints( curveSegments );
	
			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;
	
			var reverse = ! ShapeUtils.isClockWise( vertices );
	
			if ( reverse ) {
	
				vertices = vertices.reverse();
	
				// Maybe we should also check if holes are in the opposite direction, just to be safe...
	
				for ( i = 0, l = holes.length; i < l; i ++ ) {
	
					hole = holes[ i ];
	
					if ( ShapeUtils.isClockWise( hole ) ) {
	
						holes[ i ] = hole.reverse();
	
					}
	
				}
	
				reverse = false;
	
			}
	
			var faces = ShapeUtils.triangulateShape( vertices, holes );
	
			// Vertices
	
			for ( i = 0, l = holes.length; i < l; i ++ ) {
	
				hole = holes[ i ];
				vertices = vertices.concat( hole );
	
			}
	
			//
	
			var vert, vlen = vertices.length;
			var face, flen = faces.length;
	
			for ( i = 0; i < vlen; i ++ ) {
	
				vert = vertices[ i ];
	
				this.vertices.push( new Vector3( vert.x, vert.y, 0 ) );
	
			}
	
			for ( i = 0; i < flen; i ++ ) {
	
				face = faces[ i ];
	
				var a = face[ 0 ] + shapesOffset;
				var b = face[ 1 ] + shapesOffset;
				var c = face[ 2 ] + shapesOffset;
	
				this.faces.push( new Face3( a, b, c, null, null, material ) );
				this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );
	
			}
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function EdgesGeometry( geometry, thresholdAngle ) {
	
			BufferGeometry.call( this );
	
			thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
	
			var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
	
			var edge = [ 0, 0 ], hash = {};
	
			function sortFunction( a, b ) {
	
				return a - b;
	
			}
	
			var keys = [ 'a', 'b', 'c' ];
	
			var geometry2;
	
			if ( (geometry && geometry.isBufferGeometry) ) {
	
				geometry2 = new Geometry();
				geometry2.fromBufferGeometry( geometry );
	
			} else {
	
				geometry2 = geometry.clone();
	
			}
	
			geometry2.mergeVertices();
			geometry2.computeFaceNormals();
	
			var vertices = geometry2.vertices;
			var faces = geometry2.faces;
	
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
				var face = faces[ i ];
	
				for ( var j = 0; j < 3; j ++ ) {
	
					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );
	
					var key = edge.toString();
	
					if ( hash[ key ] === undefined ) {
	
						hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
	
					} else {
	
						hash[ key ].face2 = i;
	
					}
	
				}
	
			}
	
			var coords = [];
	
			for ( var key in hash ) {
	
				var h = hash[ key ];
	
				if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {
	
					var vertex = vertices[ h.vert1 ];
					coords.push( vertex.x );
					coords.push( vertex.y );
					coords.push( vertex.z );
	
					vertex = vertices[ h.vert2 ];
					coords.push( vertex.x );
					coords.push( vertex.y );
					coords.push( vertex.z );
	
				}
	
			}
	
			this.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );
	
		}
	
		EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
		EdgesGeometry.prototype.constructor = EdgesGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CylinderBufferGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			var scope = this;
	
			radiusTop = radiusTop !== undefined ? radiusTop : 20;
			radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
			height = height !== undefined ? height : 100;
	
			radialSegments = Math.floor( radialSegments ) || 8;
			heightSegments = Math.floor( heightSegments ) || 1;
	
			openEnded = openEnded !== undefined ? openEnded : false;
			thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
			thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;
	
			// used to calculate buffer length
	
			var nbCap = 0;
	
			if ( openEnded === false ) {
	
				if ( radiusTop > 0 ) nbCap ++;
				if ( radiusBottom > 0 ) nbCap ++;
	
			}
	
			var vertexCount = calculateVertexCount();
			var indexCount = calculateIndexCount();
	
			// buffers
	
			var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
			var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
			// helper variables
	
			var index = 0,
			    indexOffset = 0,
			    indexArray = [],
			    halfHeight = height / 2;
	
			// group variables
			var groupStart = 0;
	
			// generate geometry
	
			generateTorso();
	
			if ( openEnded === false ) {
	
				if ( radiusTop > 0 ) generateCap( true );
				if ( radiusBottom > 0 ) generateCap( false );
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );
	
			// helper functions
	
			function calculateVertexCount() {
	
				var count = ( radialSegments + 1 ) * ( heightSegments + 1 );
	
				if ( openEnded === false ) {
	
					count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );
	
				}
	
				return count;
	
			}
	
			function calculateIndexCount() {
	
				var count = radialSegments * heightSegments * 2 * 3;
	
				if ( openEnded === false ) {
	
					count += radialSegments * nbCap * 3;
	
				}
	
				return count;
	
			}
	
			function generateTorso() {
	
				var x, y;
				var normal = new Vector3();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				// this will be used to calculate the normal
				var slope = ( radiusBottom - radiusTop ) / height;
	
				// generate vertices, normals and uvs
	
				for ( y = 0; y <= heightSegments; y ++ ) {
	
					var indexRow = [];
	
					var v = y / heightSegments;
	
					// calculate the radius of the current row
					var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
	
					for ( x = 0; x <= radialSegments; x ++ ) {
	
						var u = x / radialSegments;
	
						var theta = u * thetaLength + thetaStart;
	
						var sinTheta = Math.sin( theta );
						var cosTheta = Math.cos( theta );
	
						// vertex
						vertex.x = radius * sinTheta;
						vertex.y = - v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );
	
						// normal
						normal.set( sinTheta, slope, cosTheta ).normalize();
						normals.setXYZ( index, normal.x, normal.y, normal.z );
	
						// uv
						uvs.setXY( index, u, 1 - v );
	
						// save index of vertex in respective row
						indexRow.push( index );
	
						// increase index
						index ++;
	
					}
	
					// now save vertices of the row in our index array
					indexArray.push( indexRow );
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					for ( y = 0; y < heightSegments; y ++ ) {
	
						// we use the index array to access the correct indices
						var i1 = indexArray[ y ][ x ];
						var i2 = indexArray[ y + 1 ][ x ];
						var i3 = indexArray[ y + 1 ][ x + 1 ];
						var i4 = indexArray[ y ][ x + 1 ];
	
						// face one
						indices.setX( indexOffset, i1 ); indexOffset ++;
						indices.setX( indexOffset, i2 ); indexOffset ++;
						indices.setX( indexOffset, i4 ); indexOffset ++;
	
						// face two
						indices.setX( indexOffset, i2 ); indexOffset ++;
						indices.setX( indexOffset, i3 ); indexOffset ++;
						indices.setX( indexOffset, i4 ); indexOffset ++;
	
						// update counters
						groupCount += 6;
	
					}
	
				}
	
				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, 0 );
	
				// calculate new start value for groups
				groupStart += groupCount;
	
			}
	
			function generateCap( top ) {
	
				var x, centerIndexStart, centerIndexEnd;
	
				var uv = new Vector2();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				var radius = ( top === true ) ? radiusTop : radiusBottom;
				var sign = ( top === true ) ? 1 : - 1;
	
				// save the index of the first center vertex
				centerIndexStart = index;
	
				// first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment
	
				for ( x = 1; x <= radialSegments; x ++ ) {
	
					// vertex
					vertices.setXYZ( index, 0, halfHeight * sign, 0 );
	
					// normal
					normals.setXYZ( index, 0, sign, 0 );
	
					// uv
					uv.x = 0.5;
					uv.y = 0.5;
	
					uvs.setXY( index, uv.x, uv.y );
	
					// increase index
					index ++;
	
				}
	
				// save the index of the last center vertex
				centerIndexEnd = index;
	
				// now we generate the surrounding vertices, normals and uvs
	
				for ( x = 0; x <= radialSegments; x ++ ) {
	
					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;
	
					var cosTheta = Math.cos( theta );
					var sinTheta = Math.sin( theta );
	
					// vertex
					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );
	
					// normal
					normals.setXYZ( index, 0, sign, 0 );
	
					// uv
					uv.x = ( cosTheta * 0.5 ) + 0.5;
					uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
					uvs.setXY( index, uv.x, uv.y );
	
					// increase index
					index ++;
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					var c = centerIndexStart + x;
					var i = centerIndexEnd + x;
	
					if ( top === true ) {
	
						// face top
						indices.setX( indexOffset, i ); indexOffset ++;
						indices.setX( indexOffset, i + 1 ); indexOffset ++;
						indices.setX( indexOffset, c ); indexOffset ++;
	
					} else {
	
						// face bottom
						indices.setX( indexOffset, i + 1 ); indexOffset ++;
						indices.setX( indexOffset, i ); indexOffset ++;
						indices.setX( indexOffset, c ); indexOffset ++;
	
					}
	
					// update counters
					groupCount += 3;
	
				}
	
				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
	
				// calculate new start value for groups
				groupStart += groupCount;
	
			}
	
		}
	
		CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CylinderGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		CylinderGeometry.prototype = Object.create( Geometry.prototype );
		CylinderGeometry.prototype.constructor = CylinderGeometry;
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 */
	
		function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
		ConeGeometry.prototype.constructor = ConeGeometry;
	
		/**
		 * @author: abelnation / http://github.com/abelnation
		 */
	
		function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeBufferGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
		ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CircleBufferGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 50;
			segments = segments !== undefined ? Math.max( 3, segments ) : 8;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			var vertices = segments + 2;
	
			var positions = new Float32Array( vertices * 3 );
			var normals = new Float32Array( vertices * 3 );
			var uvs = new Float32Array( vertices * 2 );
	
			// center data is already zero, but need to set a few extras
			normals[ 2 ] = 1.0;
			uvs[ 0 ] = 0.5;
			uvs[ 1 ] = 0.5;
	
			for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {
	
				var segment = thetaStart + s / segments * thetaLength;
	
				positions[ i ] = radius * Math.cos( segment );
				positions[ i + 1 ] = radius * Math.sin( segment );
	
				normals[ i + 2 ] = 1; // normal z
	
				uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
				uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;
	
			}
	
			var indices = [];
	
			for ( var i = 1; i <= segments; i ++ ) {
	
				indices.push( i, i + 1, 0 );
	
			}
	
			this.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );
	
			this.boundingSphere = new Sphere( new Vector3(), radius );
	
		}
	
		CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
	
		/**
		 * @author hughes
		 */
	
		function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CircleGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	
		}
	
		CircleGeometry.prototype = Object.create( Geometry.prototype );
		CircleGeometry.prototype.constructor = CircleGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
		 */
	
		function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
			Geometry.call( this );
	
			this.type = 'BoxGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
	
			this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();
	
		}
	
		BoxGeometry.prototype = Object.create( Geometry.prototype );
		BoxGeometry.prototype.constructor = BoxGeometry;
	
	
	
		var Geometries = Object.freeze({
			WireframeGeometry: WireframeGeometry,
			ParametricGeometry: ParametricGeometry,
			ParametricBufferGeometry: ParametricBufferGeometry,
			TetrahedronGeometry: TetrahedronGeometry,
			TetrahedronBufferGeometry: TetrahedronBufferGeometry,
			OctahedronGeometry: OctahedronGeometry,
			OctahedronBufferGeometry: OctahedronBufferGeometry,
			IcosahedronGeometry: IcosahedronGeometry,
			IcosahedronBufferGeometry: IcosahedronBufferGeometry,
			DodecahedronGeometry: DodecahedronGeometry,
			DodecahedronBufferGeometry: DodecahedronBufferGeometry,
			PolyhedronGeometry: PolyhedronGeometry,
			PolyhedronBufferGeometry: PolyhedronBufferGeometry,
			TubeGeometry: TubeGeometry,
			TubeBufferGeometry: TubeBufferGeometry,
			TorusKnotGeometry: TorusKnotGeometry,
			TorusKnotBufferGeometry: TorusKnotBufferGeometry,
			TorusGeometry: TorusGeometry,
			TorusBufferGeometry: TorusBufferGeometry,
			TextGeometry: TextGeometry,
			SphereBufferGeometry: SphereBufferGeometry,
			SphereGeometry: SphereGeometry,
			RingGeometry: RingGeometry,
			RingBufferGeometry: RingBufferGeometry,
			PlaneBufferGeometry: PlaneBufferGeometry,
			PlaneGeometry: PlaneGeometry,
			LatheGeometry: LatheGeometry,
			LatheBufferGeometry: LatheBufferGeometry,
			ShapeGeometry: ShapeGeometry,
			ExtrudeGeometry: ExtrudeGeometry,
			EdgesGeometry: EdgesGeometry,
			ConeGeometry: ConeGeometry,
			ConeBufferGeometry: ConeBufferGeometry,
			CylinderGeometry: CylinderGeometry,
			CylinderBufferGeometry: CylinderBufferGeometry,
			CircleBufferGeometry: CircleBufferGeometry,
			CircleGeometry: CircleGeometry,
			BoxBufferGeometry: BoxBufferGeometry,
			BoxGeometry: BoxGeometry
		});
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ShadowMaterial() {
	
			ShaderMaterial.call( this, {
				uniforms: UniformsUtils.merge( [
					UniformsLib[ "lights" ],
					{
						opacity: { value: 1.0 }
					}
				] ),
				vertexShader: ShaderChunk[ 'shadow_vert' ],
				fragmentShader: ShaderChunk[ 'shadow_frag' ]
			} );
	
			this.lights = true;
			this.transparent = true;
	
			Object.defineProperties( this, {
				opacity: {
					enumerable: true,
					get: function () {
						return this.uniforms.opacity.value;
					},
					set: function ( value ) {
						this.uniforms.opacity.value = value;
					}
				}
			} );
	
		}
	
		ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
		ShadowMaterial.prototype.constructor = ShadowMaterial;
	
		ShadowMaterial.prototype.isShadowMaterial = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function RawShaderMaterial( parameters ) {
	
			ShaderMaterial.call( this, parameters );
	
			this.type = 'RawShaderMaterial';
	
		}
	
		RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
		RawShaderMaterial.prototype.constructor = RawShaderMaterial;
	
		RawShaderMaterial.prototype.isRawShaderMaterial = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function MultiMaterial( materials ) {
	
			this.uuid = _Math.generateUUID();
	
			this.type = 'MultiMaterial';
	
			this.materials = materials instanceof Array ? materials : [];
	
			this.visible = true;
	
		}
	
		MultiMaterial.prototype = {
	
			constructor: MultiMaterial,
	
			isMultiMaterial: true,
	
			toJSON: function ( meta ) {
	
				var output = {
					metadata: {
						version: 4.2,
						type: 'material',
						generator: 'MaterialExporter'
					},
					uuid: this.uuid,
					type: this.type,
					materials: []
				};
	
				var materials = this.materials;
	
				for ( var i = 0, l = materials.length; i < l; i ++ ) {
	
					var material = materials[ i ].toJSON( meta );
					delete material.metadata;
	
					output.materials.push( material );
	
				}
	
				output.visible = this.visible;
	
				return output;
	
			},
	
			clone: function () {
	
				var material = new this.constructor();
	
				for ( var i = 0; i < this.materials.length; i ++ ) {
	
					material.materials.push( this.materials[ i ].clone() );
	
				}
	
				material.visible = this.visible;
	
				return material;
	
			}
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  roughness: <float>,
		 *  metalness: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  roughnessMap: new THREE.Texture( <Image> ),
		 *
		 *  metalnessMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  envMapIntensity: <float>
		 *
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshStandardMaterial( parameters ) {
	
			Material.call( this );
	
			this.defines = { 'STANDARD': '' };
	
			this.type = 'MeshStandardMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.roughness = 0.5;
			this.metalness = 0.5;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.roughnessMap = null;
	
			this.metalnessMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.envMapIntensity = 1.0;
	
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshStandardMaterial.prototype = Object.create( Material.prototype );
		MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
	
		MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
	
		MeshStandardMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.defines = { 'STANDARD': '' };
	
			this.color.copy( source.color );
			this.roughness = source.roughness;
			this.metalness = source.metalness;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.roughnessMap = source.roughnessMap;
	
			this.metalnessMap = source.metalnessMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;
	
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  reflectivity: <float>
		 * }
		 */
	
		function MeshPhysicalMaterial( parameters ) {
	
			MeshStandardMaterial.call( this );
	
			this.defines = { 'PHYSICAL': '' };
	
			this.type = 'MeshPhysicalMaterial';
	
			this.reflectivity = 0.5; // maps to F0 = 0.04
	
			this.clearCoat = 0.0;
			this.clearCoatRoughness = 0.0;
	
			this.setValues( parameters );
	
		}
	
		MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
		MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
	
		MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
	
		MeshPhysicalMaterial.prototype.copy = function ( source ) {
	
			MeshStandardMaterial.prototype.copy.call( this, source );
	
			this.defines = { 'PHYSICAL': '' };
	
			this.reflectivity = source.reflectivity;
	
			this.clearCoat = source.clearCoat;
			this.clearCoatRoughness = source.clearCoatRoughness;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshPhongMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshPhongMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.specular = new Color( 0x111111 );
			this.shininess = 30;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshPhongMaterial.prototype = Object.create( Material.prototype );
		MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
	
		MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
	
		MeshPhongMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * parameters = {
		 *  opacity: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */
	
		function MeshNormalMaterial( parameters ) {
	
			Material.call( this, parameters );
	
			this.type = 'MeshNormalMaterial';
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
			this.lights = false;
			this.morphTargets = false;
	
			this.setValues( parameters );
	
		}
	
		MeshNormalMaterial.prototype = Object.create( Material.prototype );
		MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
	
		MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
	
		MeshNormalMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshLambertMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshLambertMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshLambertMaterial.prototype = Object.create( Material.prototype );
		MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
	
		MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
	
		MeshLambertMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *
		 *  scale: <float>,
		 *  dashSize: <float>,
		 *  gapSize: <float>
		 * }
		 */
	
		function LineDashedMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'LineDashedMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.linewidth = 1;
	
			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		LineDashedMaterial.prototype = Object.create( Material.prototype );
		LineDashedMaterial.prototype.constructor = LineDashedMaterial;
	
		LineDashedMaterial.prototype.isLineDashedMaterial = true;
	
		LineDashedMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.linewidth = source.linewidth;
	
			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;
	
			return this;
	
		};
	
	
	
		var Materials = Object.freeze({
			ShadowMaterial: ShadowMaterial,
			SpriteMaterial: SpriteMaterial,
			RawShaderMaterial: RawShaderMaterial,
			ShaderMaterial: ShaderMaterial,
			PointsMaterial: PointsMaterial,
			MultiMaterial: MultiMaterial,
			MeshPhysicalMaterial: MeshPhysicalMaterial,
			MeshStandardMaterial: MeshStandardMaterial,
			MeshPhongMaterial: MeshPhongMaterial,
			MeshNormalMaterial: MeshNormalMaterial,
			MeshLambertMaterial: MeshLambertMaterial,
			MeshDepthMaterial: MeshDepthMaterial,
			MeshBasicMaterial: MeshBasicMaterial,
			LineDashedMaterial: LineDashedMaterial,
			LineBasicMaterial: LineBasicMaterial,
			Material: Material
		});
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var Cache = {
	
			enabled: false,
	
			files: {},
	
			add: function ( key, file ) {
	
				if ( this.enabled === false ) return;
	
				// console.log( 'THREE.Cache', 'Adding key:', key );
	
				this.files[ key ] = file;
	
			},
	
			get: function ( key ) {
	
				if ( this.enabled === false ) return;
	
				// console.log( 'THREE.Cache', 'Checking key:', key );
	
				return this.files[ key ];
	
			},
	
			remove: function ( key ) {
	
				delete this.files[ key ];
	
			},
	
			clear: function () {
	
				this.files = {};
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LoadingManager( onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var isLoading = false, itemsLoaded = 0, itemsTotal = 0;
	
			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;
	
			this.itemStart = function ( url ) {
	
				itemsTotal ++;
	
				if ( isLoading === false ) {
	
					if ( scope.onStart !== undefined ) {
	
						scope.onStart( url, itemsLoaded, itemsTotal );
	
					}
	
				}
	
				isLoading = true;
	
			};
	
			this.itemEnd = function ( url ) {
	
				itemsLoaded ++;
	
				if ( scope.onProgress !== undefined ) {
	
					scope.onProgress( url, itemsLoaded, itemsTotal );
	
				}
	
				if ( itemsLoaded === itemsTotal ) {
	
					isLoading = false;
	
					if ( scope.onLoad !== undefined ) {
	
						scope.onLoad();
	
					}
	
				}
	
			};
	
			this.itemError = function ( url ) {
	
				if ( scope.onError !== undefined ) {
	
					scope.onError( url );
	
				}
	
			};
	
		}
	
		var DefaultLoadingManager = new LoadingManager();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function XHRLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( XHRLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( url === undefined ) url = '';
	
				if ( this.path !== undefined ) url = this.path + url;
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) onLoad( cached );
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				// Check for data: URI
				var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
				var dataUriRegexResult = url.match( dataUriRegex );
	
				// Safari can not handle Data URIs through XMLHttpRequest so process manually
				if ( dataUriRegexResult ) {
	
					var mimeType = dataUriRegexResult[1];
					var isBase64 = !!dataUriRegexResult[2];
					var data = dataUriRegexResult[3];
	
					data = window.decodeURIComponent(data);
	
					if( isBase64 ) {
						data = window.atob(data);
					}
	
					try {
	
						var response;
						var responseType = ( this.responseType || '' ).toLowerCase();
	
						switch ( responseType ) {
	
							case 'arraybuffer':
							case 'blob':
	
							 	response = new ArrayBuffer( data.length );
								var view = new Uint8Array( response );
								for ( var i = 0; i < data.length; i ++ ) {
	
										view[ i ] = data.charCodeAt( i );
	
								}
	
								if ( responseType === 'blob' ) {
	
									response = new Blob( [ response ], { "type" : mimeType } );
	
								}
	
								break;
	
							case 'document':
	
								var parser = new DOMParser();
								response = parser.parseFromString( data, mimeType );
	
								break;
	
							case 'json':
	
								response = JSON.parse( data );
	
								break;
	
							default: // 'text' or other
	
								response = data;
	
								break;
	
						}
	
						// Wait for next browser tick
						window.setTimeout( function() {
	
							if ( onLoad ) onLoad( response );
	
							scope.manager.itemEnd( url );
	
						}, 0);
	
					} catch ( error ) {
	
						// Wait for next browser tick
						window.setTimeout( function() {
	
							if ( onError ) onError( error );
	
							scope.manager.itemError( url );
	
						}, 0);
	
					}
	
				} else {
	
					var request = new XMLHttpRequest();
					request.open( 'GET', url, true );
	
					request.addEventListener( 'load', function ( event ) {
	
						var response = event.target.response;
	
						Cache.add( url, response );
	
						if ( this.status === 200 ) {
	
							if ( onLoad ) onLoad( response );
	
							scope.manager.itemEnd( url );
	
						} else if ( this.status === 0 ) {
	
							// Some browsers return HTTP Status 0 when using non-http protocol
							// e.g. 'file://' or 'data://'. Handle as success.
	
							console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );
	
							if ( onLoad ) onLoad( response );
	
							scope.manager.itemEnd( url );
	
						} else {
	
							if ( onError ) onError( event );
	
							scope.manager.itemError( url );
	
						}
	
					}, false );
	
					if ( onProgress !== undefined ) {
	
						request.addEventListener( 'progress', function ( event ) {
	
							onProgress( event );
	
						}, false );
	
					}
	
					request.addEventListener( 'error', function ( event ) {
	
						if ( onError ) onError( event );
	
						scope.manager.itemError( url );
	
					}, false );
	
					if ( this.responseType !== undefined ) request.responseType = this.responseType;
					if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
	
					if ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );
	
					request.send( null );
	
				}
	
				scope.manager.itemStart( url );
	
				return request;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			},
	
			setResponseType: function ( value ) {
	
				this.responseType = value;
				return this;
	
			},
	
			setWithCredentials: function ( value ) {
	
				this.withCredentials = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Abstract Base class to block based textures loader (dds, pvr, ...)
		 */
	
		function CompressedTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			// override in sub classes
			this._parser = null;
	
		}
	
		Object.assign( CompressedTextureLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var images = [];
	
				var texture = new CompressedTexture();
				texture.image = images;
	
				var loader = new XHRLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'arraybuffer' );
	
				function loadTexture( i ) {
	
					loader.load( url[ i ], function ( buffer ) {
	
						var texDatas = scope._parser( buffer, true );
	
						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};
	
						loaded += 1;
	
						if ( loaded === 6 ) {
	
							if ( texDatas.mipmapCount === 1 )
								texture.minFilter = LinearFilter;
	
							texture.format = texDatas.format;
							texture.needsUpdate = true;
	
							if ( onLoad ) onLoad( texture );
	
						}
	
					}, onProgress, onError );
	
				}
	
				if ( Array.isArray( url ) ) {
	
					var loaded = 0;
	
					for ( var i = 0, il = url.length; i < il; ++ i ) {
	
						loadTexture( i );
	
					}
	
				} else {
	
					// compressed cubemap texture stored in a single DDS file
	
					loader.load( url, function ( buffer ) {
	
						var texDatas = scope._parser( buffer, true );
	
						if ( texDatas.isCubemap ) {
	
							var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
	
							for ( var f = 0; f < faces; f ++ ) {
	
								images[ f ] = { mipmaps : [] };
	
								for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
	
									images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
									images[ f ].format = texDatas.format;
									images[ f ].width = texDatas.width;
									images[ f ].height = texDatas.height;
	
								}
	
							}
	
						} else {
	
							texture.image.width = texDatas.width;
							texture.image.height = texDatas.height;
							texture.mipmaps = texDatas.mipmaps;
	
						}
	
						if ( texDatas.mipmapCount === 1 ) {
	
							texture.minFilter = LinearFilter;
	
						}
	
						texture.format = texDatas.format;
						texture.needsUpdate = true;
	
						if ( onLoad ) onLoad( texture );
	
					}, onProgress, onError );
	
				}
	
				return texture;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author Nikos M. / https://github.com/foo123/
		 *
		 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
		 */
	
		var DataTextureLoader = BinaryTextureLoader;
		function BinaryTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			// override in sub classes
			this._parser = null;
	
		}
	
		Object.assign( BinaryTextureLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var texture = new DataTexture();
	
				var loader = new XHRLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
	
				loader.load( url, function ( buffer ) {
	
					var texData = scope._parser( buffer );
	
					if ( ! texData ) return;
	
					if ( undefined !== texData.image ) {
	
						texture.image = texData.image;
	
					} else if ( undefined !== texData.data ) {
	
						texture.image.width = texData.width;
						texture.image.height = texData.height;
						texture.image.data = texData.data;
	
					}
	
					texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
					texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;
	
					texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
					texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;
	
					texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;
	
					if ( undefined !== texData.format ) {
	
						texture.format = texData.format;
	
					}
					if ( undefined !== texData.type ) {
	
						texture.type = texData.type;
	
					}
	
					if ( undefined !== texData.mipmaps ) {
	
						texture.mipmaps = texData.mipmaps;
	
					}
	
					if ( 1 === texData.mipmapCount ) {
	
						texture.minFilter = LinearFilter;
	
					}
	
					texture.needsUpdate = true;
	
					if ( onLoad ) onLoad( texture, texData );
	
				}, onProgress, onError );
	
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ImageLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( ImageLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
				image.onload = function () {
	
					image.onload = null;
	
					URL.revokeObjectURL( image.src );
	
					if ( onLoad ) onLoad( image );
	
					scope.manager.itemEnd( url );
	
				};
				image.onerror = onError;
	
				if ( url.indexOf( 'data:' ) === 0 ) {
	
					image.src = url;
	
				} else {
	
					var loader = new XHRLoader();
					loader.setPath( this.path );
					loader.setResponseType( 'blob' );
					loader.setWithCredentials( this.withCredentials );
					loader.load( url, function ( blob ) {
	
						image.src = URL.createObjectURL( blob );
	
					}, onProgress, onError );
	
				}
	
				scope.manager.itemStart( url );
	
				return image;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setWithCredentials: function ( value ) {
	
				this.withCredentials = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CubeTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( CubeTextureLoader.prototype, {
	
			load: function ( urls, onLoad, onProgress, onError ) {
	
				var texture = new CubeTexture();
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
	
				var loaded = 0;
	
				function loadTexture( i ) {
	
					loader.load( urls[ i ], function ( image ) {
	
						texture.images[ i ] = image;
	
						loaded ++;
	
						if ( loaded === 6 ) {
	
							texture.needsUpdate = true;
	
							if ( onLoad ) onLoad( texture );
	
						}
	
					}, undefined, onError );
	
				}
	
				for ( var i = 0; i < urls.length; ++ i ) {
	
					loadTexture( i );
	
				}
	
				return texture;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function TextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( TextureLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var texture = new Texture();
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setWithCredentials( this.withCredentials );
				loader.setPath( this.path );
				loader.load( url, function ( image ) {
	
					// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
					var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
	
					texture.format = isJPEG ? RGBFormat : RGBAFormat;
					texture.image = image;
					texture.needsUpdate = true;
	
					if ( onLoad !== undefined ) {
	
						onLoad( texture );
	
					}
	
				}, onProgress, onError );
	
				return texture;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setWithCredentials: function ( value ) {
	
				this.withCredentials = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
	
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Light( color, intensity ) {
	
			Object3D.call( this );
	
			this.type = 'Light';
	
			this.color = new Color( color );
			this.intensity = intensity !== undefined ? intensity : 1;
	
			this.receiveShadow = undefined;
	
		}
	
		Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Light,
	
			isLight: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.color.copy( source.color );
				this.intensity = source.intensity;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.color = this.color.getHex();
				data.object.intensity = this.intensity;
	
				if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
	
				if ( this.distance !== undefined ) data.object.distance = this.distance;
				if ( this.angle !== undefined ) data.object.angle = this.angle;
				if ( this.decay !== undefined ) data.object.decay = this.decay;
				if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
	
				if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function HemisphereLight( skyColor, groundColor, intensity ) {
	
			Light.call( this, skyColor, intensity );
	
			this.type = 'HemisphereLight';
	
			this.castShadow = undefined;
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.groundColor = new Color( groundColor );
	
		}
	
		HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: HemisphereLight,
	
			isHemisphereLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.groundColor.copy( source.groundColor );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LightShadow( camera ) {
	
			this.camera = camera;
	
			this.bias = 0;
			this.radius = 1;
	
			this.mapSize = new Vector2( 512, 512 );
	
			this.map = null;
			this.matrix = new Matrix4();
	
		}
	
		Object.assign( LightShadow.prototype, {
	
			copy: function ( source ) {
	
				this.camera = source.camera.clone();
	
				this.bias = source.bias;
				this.radius = source.radius;
	
				this.mapSize.copy( source.mapSize );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			toJSON: function () {
	
				var object = {};
	
				if ( this.bias !== 0 ) object.bias = this.bias;
				if ( this.radius !== 1 ) object.radius = this.radius;
				if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
	
				object.camera = this.camera.toJSON( false ).object;
				delete object.camera.matrix;
	
				return object;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function SpotLightShadow() {
	
			LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
	
		}
	
		SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: SpotLightShadow,
	
			isSpotLightShadow: true,
	
			update: function ( light ) {
	
				var fov = _Math.RAD2DEG * 2 * light.angle;
				var aspect = this.mapSize.width / this.mapSize.height;
				var far = light.distance || 500;
	
				var camera = this.camera;
	
				if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
	
					camera.fov = fov;
					camera.aspect = aspect;
					camera.far = far;
					camera.updateProjectionMatrix();
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'SpotLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * Math.PI;
				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / Math.PI;
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
			this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new SpotLightShadow();
	
		}
	
		SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: SpotLight,
	
			isSpotLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.angle = source.angle;
				this.penumbra = source.penumbra;
				this.decay = source.decay;
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
	
		function PointLight( color, intensity, distance, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'PointLight';
	
			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * 4 * Math.PI;
	
				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / ( 4 * Math.PI );
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
	
		}
	
		PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: PointLight,
	
			isPointLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.decay = source.decay;
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectionalLightShadow( light ) {
	
			LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
	
		}
	
		DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: DirectionalLightShadow
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DirectionalLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'DirectionalLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			this.shadow = new DirectionalLightShadow();
	
		}
	
		DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: DirectionalLight,
	
			isDirectionalLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AmbientLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'AmbientLight';
	
			this.castShadow = undefined;
	
		}
	
		AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: AmbientLight,
	
			isAmbientLight: true,
	
		} );
	
		/**
		 * @author tschw
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		var AnimationUtils = {
	
			// same as Array.prototype.slice, but also works on typed arrays
			arraySlice: function( array, from, to ) {
	
				if ( AnimationUtils.isTypedArray( array ) ) {
	
					return new array.constructor( array.subarray( from, to ) );
	
				}
	
				return array.slice( from, to );
	
			},
	
			// converts an array to a specific type
			convertArray: function( array, type, forceClone ) {
	
				if ( ! array || // let 'undefined' and 'null' pass
						! forceClone && array.constructor === type ) return array;
	
				if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
	
					return new type( array ); // create typed array
	
				}
	
				return Array.prototype.slice.call( array ); // create Array
	
			},
	
			isTypedArray: function( object ) {
	
				return ArrayBuffer.isView( object ) &&
						! ( object instanceof DataView );
	
			},
	
			// returns an array by which times and values can be sorted
			getKeyframeOrder: function( times ) {
	
				function compareTime( i, j ) {
	
					return times[ i ] - times[ j ];
	
				}
	
				var n = times.length;
				var result = new Array( n );
				for ( var i = 0; i !== n; ++ i ) result[ i ] = i;
	
				result.sort( compareTime );
	
				return result;
	
			},
	
			// uses the array previously returned by 'getKeyframeOrder' to sort data
			sortedArray: function( values, stride, order ) {
	
				var nValues = values.length;
				var result = new values.constructor( nValues );
	
				for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
	
					var srcOffset = order[ i ] * stride;
	
					for ( var j = 0; j !== stride; ++ j ) {
	
						result[ dstOffset ++ ] = values[ srcOffset + j ];
	
					}
	
				}
	
				return result;
	
			},
	
			// function for parsing AOS keyframe formats
			flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {
	
				var i = 1, key = jsonKeys[ 0 ];
	
				while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
	
					key = jsonKeys[ i ++ ];
	
				}
	
				if ( key === undefined ) return; // no data
	
				var value = key[ valuePropertyName ];
				if ( value === undefined ) return; // no data
	
				if ( Array.isArray( value ) ) {
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push.apply( values, value ); // push all elements
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else if ( value.toArray !== undefined ) {
					// ...assume THREE.Math-ish
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							value.toArray( values, values.length );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else {
					// otherwise push as-is
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push( value );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				}
	
			}
	
		};
	
		/**
		 * Abstract base class of interpolants over parametric samples.
		 *
		 * The parameter domain is one dimensional, typically the time or a path
		 * along a curve defined by the data.
		 *
		 * The sample values can have any dimensionality and derived classes may
		 * apply special interpretations to the data.
		 *
		 * This class provides the interval seek in a Template Method, deferring
		 * the actual interpolation to derived classes.
		 *
		 * Time complexity is O(1) for linear access crossing at most two points
		 * and O(log N) for random access, where N is the number of positions.
		 *
		 * References:
		 *
		 * 		http://www.oodesign.com/template-method-pattern.html
		 *
		 * @author tschw
		 */
	
		function Interpolant(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;
	
			this.resultBuffer = resultBuffer !== undefined ?
					resultBuffer : new sampleValues.constructor( sampleSize );
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;
	
		}
	
		Interpolant.prototype = {
	
			constructor: Interpolant,
	
			evaluate: function( t ) {
	
				var pp = this.parameterPositions,
					i1 = this._cachedIndex,
	
					t1 = pp[   i1   ],
					t0 = pp[ i1 - 1 ];
	
				validate_interval: {
	
					seek: {
	
						var right;
	
						linear_scan: {
		//- See http://jsperf.com/comparison-to-undefined/3
		//- slower code:
		//-
		//- 				if ( t >= t1 || t1 === undefined ) {
							forward_scan: if ( ! ( t < t1 ) ) {
	
								for ( var giveUpAt = i1 + 2; ;) {
	
									if ( t1 === undefined ) {
	
										if ( t < t0 ) break forward_scan;
	
										// after end
	
										i1 = pp.length;
										this._cachedIndex = i1;
										return this.afterEnd_( i1 - 1, t, t0 );
	
									}
	
									if ( i1 === giveUpAt ) break; // this loop
	
									t0 = t1;
									t1 = pp[ ++ i1 ];
	
									if ( t < t1 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the right side of the index
								right = pp.length;
								break linear_scan;
	
							}
	
		//- slower code:
		//-					if ( t < t0 || t0 === undefined ) {
							if ( ! ( t >= t0 ) ) {
	
								// looping?
	
								var t1global = pp[ 1 ];
	
								if ( t < t1global ) {
	
									i1 = 2; // + 1, using the scan for the details
									t0 = t1global;
	
								}
	
								// linear reverse scan
	
								for ( var giveUpAt = i1 - 2; ;) {
	
									if ( t0 === undefined ) {
	
										// before start
	
										this._cachedIndex = 0;
										return this.beforeStart_( 0, t, t1 );
	
									}
	
									if ( i1 === giveUpAt ) break; // this loop
	
									t1 = t0;
									t0 = pp[ -- i1 - 1 ];
	
									if ( t >= t0 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the left side of the index
								right = i1;
								i1 = 0;
								break linear_scan;
	
							}
	
							// the interval is valid
	
							break validate_interval;
	
						} // linear scan
	
						// binary search
	
						while ( i1 < right ) {
	
							var mid = ( i1 + right ) >>> 1;
	
							if ( t < pp[ mid ] ) {
	
								right = mid;
	
							} else {
	
								i1 = mid + 1;
	
							}
	
						}
	
						t1 = pp[   i1   ];
						t0 = pp[ i1 - 1 ];
	
						// check boundary cases, again
	
						if ( t0 === undefined ) {
	
							this._cachedIndex = 0;
							return this.beforeStart_( 0, t, t1 );
	
						}
	
						if ( t1 === undefined ) {
	
							i1 = pp.length;
							this._cachedIndex = i1;
							return this.afterEnd_( i1 - 1, t0, t );
	
						}
	
					} // seek
	
					this._cachedIndex = i1;
	
					this.intervalChanged_( i1, t0, t1 );
	
				} // validate_interval
	
				return this.interpolate_( i1, t0, t, t1 );
	
			},
	
			settings: null, // optional, subclass-specific settings structure
			// Note: The indirection allows central control of many interpolants.
	
			// --- Protected interface
	
			DefaultSettings_: {},
	
			getSettings_: function() {
	
				return this.settings || this.DefaultSettings_;
	
			},
	
			copySampleValue_: function( index ) {
	
				// copies a sample value to the result buffer
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
					offset = index * stride;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] = values[ offset + i ];
	
				}
	
				return result;
	
			},
	
			// Template methods for derived classes:
	
			interpolate_: function( i1, t0, t, t1 ) {
	
				throw new Error( "call to abstract method" );
				// implementations shall return this.resultBuffer
	
			},
	
			intervalChanged_: function( i1, t0, t1 ) {
	
				// empty
	
			}
	
		};
	
		Object.assign( Interpolant.prototype, {
	
			beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
				Interpolant.prototype.copySampleValue_,
	
			afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
				Interpolant.prototype.copySampleValue_
	
		} );
	
		/**
		 * Fast and simple cubic spline interpolant.
		 *
		 * It was derived from a Hermitian construction setting the first derivative
		 * at each sample position to the linear slope between neighboring positions
		 * over their parameter interval.
		 *
		 * @author tschw
		 */
	
		function CubicInterpolant(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
			this._weightPrev = -0;
			this._offsetPrev = -0;
			this._weightNext = -0;
			this._offsetNext = -0;
	
		}
	
		CubicInterpolant.prototype =
				Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: CubicInterpolant,
	
			DefaultSettings_: {
	
				endingStart: 	ZeroCurvatureEnding,
				endingEnd:		ZeroCurvatureEnding
	
			},
	
			intervalChanged_: function( i1, t0, t1 ) {
	
				var pp = this.parameterPositions,
					iPrev = i1 - 2,
					iNext = i1 + 1,
	
					tPrev = pp[ iPrev ],
					tNext = pp[ iNext ];
	
				if ( tPrev === undefined ) {
	
					switch ( this.getSettings_().endingStart ) {
	
						case ZeroSlopeEnding:
	
							// f'(t0) = 0
							iPrev = i1;
							tPrev = 2 * t0 - t1;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iPrev = pp.length - 2;
							tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(t0) = 0 a.k.a. Natural Spline
							iPrev = i1;
							tPrev = t1;
	
					}
	
				}
	
				if ( tNext === undefined ) {
	
					switch ( this.getSettings_().endingEnd ) {
	
						case ZeroSlopeEnding:
	
							// f'(tN) = 0
							iNext = i1;
							tNext = 2 * t1 - t0;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iNext = 1;
							tNext = t1 + pp[ 1 ] - pp[ 0 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(tN) = 0, a.k.a. Natural Spline
							iNext = i1 - 1;
							tNext = t0;
	
					}
	
				}
	
				var halfDt = ( t1 - t0 ) * 0.5,
					stride = this.valueSize;
	
				this._weightPrev = halfDt / ( t0 - tPrev );
				this._weightNext = halfDt / ( tNext - t1 );
				this._offsetPrev = iPrev * stride;
				this._offsetNext = iNext * stride;
	
			},
	
			interpolate_: function( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					o1 = i1 * stride,		o0 = o1 - stride,
					oP = this._offsetPrev, 	oN = this._offsetNext,
					wP = this._weightPrev,	wN = this._weightNext,
	
					p = ( t - t0 ) / ( t1 - t0 ),
					pp = p * p,
					ppp = pp * p;
	
				// evaluate polynomials
	
				var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
				var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
				var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
				var sN =       wN   * ppp   -           wN      * pp;
	
				// combine data linearly
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							sP * values[ oP + i ] +
							s0 * values[ o0 + i ] +
							s1 * values[ o1 + i ] +
							sN * values[ oN + i ];
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 */
	
		function LinearInterpolant(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		LinearInterpolant.prototype =
				Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: LinearInterpolant,
	
			interpolate_: function( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset1 = i1 * stride,
					offset0 = offset1 - stride,
	
					weight1 = ( t - t0 ) / ( t1 - t0 ),
					weight0 = 1 - weight1;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							values[ offset0 + i ] * weight0 +
							values[ offset1 + i ] * weight1;
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * Interpolant that evaluates to the sample value at the position preceeding
		 * the parameter.
		 *
		 * @author tschw
		 */
	
		function DiscreteInterpolant(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		DiscreteInterpolant.prototype =
				Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: DiscreteInterpolant,
	
			interpolate_: function( i1, t0, t, t1 ) {
	
				return this.copySampleValue_( i1 - 1 );
	
			}
	
		} );
	
		var KeyframeTrackPrototype;
	
		KeyframeTrackPrototype = {
	
			TimeBufferType: Float32Array,
			ValueBufferType: Float32Array,
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodDiscrete: function( result ) {
	
				return new DiscreteInterpolant(
						this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodLinear: function( result ) {
	
				return new LinearInterpolant(
						this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: function( result ) {
	
				return new CubicInterpolant(
						this.times, this.values, this.getValueSize(), result );
	
			},
	
			setInterpolation: function( interpolation ) {
	
				var factoryMethod;
	
				switch ( interpolation ) {
	
					case InterpolateDiscrete:
	
						factoryMethod = this.InterpolantFactoryMethodDiscrete;
	
						break;
	
					case InterpolateLinear:
	
						factoryMethod = this.InterpolantFactoryMethodLinear;
	
						break;
	
					case InterpolateSmooth:
	
						factoryMethod = this.InterpolantFactoryMethodSmooth;
	
						break;
	
				}
	
				if ( factoryMethod === undefined ) {
	
					var message = "unsupported interpolation for " +
							this.ValueTypeName + " keyframe track named " + this.name;
	
					if ( this.createInterpolant === undefined ) {
	
						// fall back to default, unless the default itself is messed up
						if ( interpolation !== this.DefaultInterpolation ) {
	
							this.setInterpolation( this.DefaultInterpolation );
	
						} else {
	
							throw new Error( message ); // fatal, in this case
	
						}
	
					}
	
					console.warn( message );
					return;
	
				}
	
				this.createInterpolant = factoryMethod;
	
			},
	
			getInterpolation: function() {
	
				switch ( this.createInterpolant ) {
	
					case this.InterpolantFactoryMethodDiscrete:
	
						return InterpolateDiscrete;
	
					case this.InterpolantFactoryMethodLinear:
	
						return InterpolateLinear;
	
					case this.InterpolantFactoryMethodSmooth:
	
						return InterpolateSmooth;
	
				}
	
			},
	
			getValueSize: function() {
	
				return this.values.length / this.times.length;
	
			},
	
			// move all keyframes either forwards or backwards in time
			shift: function( timeOffset ) {
	
				if( timeOffset !== 0.0 ) {
	
					var times = this.times;
	
					for( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] += timeOffset;
	
					}
	
				}
	
				return this;
	
			},
	
			// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
			scale: function( timeScale ) {
	
				if( timeScale !== 1.0 ) {
	
					var times = this.times;
	
					for( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] *= timeScale;
	
					}
	
				}
	
				return this;
	
			},
	
			// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
			// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
			trim: function( startTime, endTime ) {
	
				var times = this.times,
					nKeys = times.length,
					from = 0,
					to = nKeys - 1;
	
				while ( from !== nKeys && times[ from ] < startTime ) ++ from;
				while ( to !== -1 && times[ to ] > endTime ) -- to;
	
				++ to; // inclusive -> exclusive bound
	
				if( from !== 0 || to !== nKeys ) {
	
					// empty tracks are forbidden, so keep at least one keyframe
					if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;
	
					var stride = this.getValueSize();
					this.times = AnimationUtils.arraySlice( times, from, to );
					this.values = AnimationUtils.
							arraySlice( this.values, from * stride, to * stride );
	
				}
	
				return this;
	
			},
	
			// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
			validate: function() {
	
				var valid = true;
	
				var valueSize = this.getValueSize();
				if ( valueSize - Math.floor( valueSize ) !== 0 ) {
	
					console.error( "invalid value size in track", this );
					valid = false;
	
				}
	
				var times = this.times,
					values = this.values,
	
					nKeys = times.length;
	
				if( nKeys === 0 ) {
	
					console.error( "track is empty", this );
					valid = false;
	
				}
	
				var prevTime = null;
	
				for( var i = 0; i !== nKeys; i ++ ) {
	
					var currTime = times[ i ];
	
					if ( typeof currTime === 'number' && isNaN( currTime ) ) {
	
						console.error( "time is not a valid number", this, i, currTime );
						valid = false;
						break;
	
					}
	
					if( prevTime !== null && prevTime > currTime ) {
	
						console.error( "out of order keys", this, i, currTime, prevTime );
						valid = false;
						break;
	
					}
	
					prevTime = currTime;
	
				}
	
				if ( values !== undefined ) {
	
					if ( AnimationUtils.isTypedArray( values ) ) {
	
						for ( var i = 0, n = values.length; i !== n; ++ i ) {
	
							var value = values[ i ];
	
							if ( isNaN( value ) ) {
	
								console.error( "value is not a valid number", this, i, value );
								valid = false;
								break;
	
							}
	
						}
	
					}
	
				}
	
				return valid;
	
			},
	
			// removes equivalent sequential keys as common in morph target sequences
			// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
			optimize: function() {
	
				var times = this.times,
					values = this.values,
					stride = this.getValueSize(),
	
					smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
	
					writeIndex = 1,
					lastIndex = times.length - 1;
	
				for( var i = 1; i < lastIndex; ++ i ) {
	
					var keep = false;
	
					var time = times[ i ];
					var timeNext = times[ i + 1 ];
	
					// remove adjacent keyframes scheduled at the same time
	
					if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
	
						if ( ! smoothInterpolation ) {
	
							// remove unnecessary keyframes same as their neighbors
	
							var offset = i * stride,
								offsetP = offset - stride,
								offsetN = offset + stride;
	
							for ( var j = 0; j !== stride; ++ j ) {
	
								var value = values[ offset + j ];
	
								if ( value !== values[ offsetP + j ] ||
										value !== values[ offsetN + j ] ) {
	
									keep = true;
									break;
	
								}
	
							}
	
						} else keep = true;
	
					}
	
					// in-place compaction
	
					if ( keep ) {
	
						if ( i !== writeIndex ) {
	
							times[ writeIndex ] = times[ i ];
	
							var readOffset = i * stride,
								writeOffset = writeIndex * stride;
	
							for ( var j = 0; j !== stride; ++ j )
	
								values[ writeOffset + j ] = values[ readOffset + j ];
	
						}
	
						++ writeIndex;
	
					}
	
				}
	
				// flush last keyframe (compaction looks ahead)
	
				if ( lastIndex > 0 ) {
	
					times[ writeIndex ] = times[ lastIndex ];
	
					for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )
	
						values[ writeOffset + j ] = values[ readOffset + j ];
	
					++ writeIndex;
	
				}
	
				if ( writeIndex !== times.length ) {
	
					this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
					this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
	
				}
	
				return this;
	
			}
	
		};
	
		function KeyframeTrackConstructor( name, times, values, interpolation ) {
	
			if( name === undefined ) throw new Error( "track name is undefined" );
	
			if( times === undefined || times.length === 0 ) {
	
				throw new Error( "no keyframes in track named " + name );
	
			}
	
			this.name = name;
	
			this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
			this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
	
			this.setInterpolation( interpolation || this.DefaultInterpolation );
	
			this.validate();
			this.optimize();
	
		}
	
		/**
		 *
		 * A Track of vectored keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function VectorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		VectorKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: VectorKeyframeTrack,
	
			ValueTypeName: 'vector'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 * Spherical linear unit quaternion interpolant.
		 *
		 * @author tschw
		 */
	
		function QuaternionLinearInterpolant(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		QuaternionLinearInterpolant.prototype =
				Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: QuaternionLinearInterpolant,
	
			interpolate_: function( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset = i1 * stride,
	
					alpha = ( t - t0 ) / ( t1 - t0 );
	
				for ( var end = offset + stride; offset !== end; offset += 4 ) {
	
					Quaternion.slerpFlat( result, 0,
							values, offset - stride, values, offset, alpha );
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * A Track of quaternion keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function QuaternionKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		QuaternionKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: QuaternionKeyframeTrack,
	
			ValueTypeName: 'quaternion',
	
			// ValueBufferType is inherited
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodLinear: function( result ) {
	
				return new QuaternionLinearInterpolant(
						this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: undefined // not yet implemented
	
		} );
	
		/**
		 *
		 * A Track of numeric keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function NumberKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		NumberKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: NumberKeyframeTrack,
	
			ValueTypeName: 'number',
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 *
		 * A Track that interpolates Strings
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function StringKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		StringKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: StringKeyframeTrack,
	
			ValueTypeName: 'string',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
	
			InterpolantFactoryMethodSmooth: undefined
	
		} );
	
		/**
		 *
		 * A Track of Boolean keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function BooleanKeyframeTrack( name, times, values ) {
	
			KeyframeTrackConstructor.call( this, name, times, values );
	
		}
	
		BooleanKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: BooleanKeyframeTrack,
	
			ValueTypeName: 'bool',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
			InterpolantFactoryMethodSmooth: undefined
	
			// Note: Actually this track could have a optimized / compressed
			// representation of a single value and a custom interpolant that
			// computes "firstValue ^ isOdd( index )".
	
		} );
	
		/**
		 *
		 * A Track of keyframe values that represent color.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function ColorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		ColorKeyframeTrack.prototype =
				Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: ColorKeyframeTrack,
	
			ValueTypeName: 'color'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
	
			// Note: Very basic implementation and nothing special yet.
			// However, this is the place for color space parameterization.
	
		} );
	
		/**
		 *
		 * A timed sequence of keyframes for a specific property.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function KeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.apply( this, arguments );
	
		}
	
		KeyframeTrack.prototype = KeyframeTrackPrototype;
		KeyframeTrackPrototype.constructor = KeyframeTrack;
	
		// Static methods:
	
		Object.assign( KeyframeTrack, {
	
			// Serialization (in static context, because of constructor invocation
			// and automatic invocation of .toJSON):
	
			parse: function( json ) {
	
				if( json.type === undefined ) {
	
					throw new Error( "track type undefined, can not parse" );
	
				}
	
				var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );
	
				if ( json.times === undefined ) {
	
					var times = [], values = [];
	
					AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
	
					json.times = times;
					json.values = values;
	
				}
	
				// derived classes can define a static parse method
				if ( trackType.parse !== undefined ) {
	
					return trackType.parse( json );
	
				} else {
	
					// by default, we asssume a constructor compatible with the base
					return new trackType(
							json.name, json.times, json.values, json.interpolation );
	
				}
	
			},
	
			toJSON: function( track ) {
	
				var trackType = track.constructor;
	
				var json;
	
				// derived classes can define a static toJSON method
				if ( trackType.toJSON !== undefined ) {
	
					json = trackType.toJSON( track );
	
				} else {
	
					// by default, we assume the data can be serialized as-is
					json = {
	
						'name': track.name,
						'times': AnimationUtils.convertArray( track.times, Array ),
						'values': AnimationUtils.convertArray( track.values, Array )
	
					};
	
					var interpolation = track.getInterpolation();
	
					if ( interpolation !== track.DefaultInterpolation ) {
	
						json.interpolation = interpolation;
	
					}
	
				}
	
				json.type = track.ValueTypeName; // mandatory
	
				return json;
	
			},
	
			_getTrackTypeForValueTypeName: function( typeName ) {
	
				switch( typeName.toLowerCase() ) {
	
					case "scalar":
					case "double":
					case "float":
					case "number":
					case "integer":
	
						return NumberKeyframeTrack;
	
					case "vector":
					case "vector2":
					case "vector3":
					case "vector4":
	
						return VectorKeyframeTrack;
	
					case "color":
	
						return ColorKeyframeTrack;
	
					case "quaternion":
	
						return QuaternionKeyframeTrack;
	
					case "bool":
					case "boolean":
	
						return BooleanKeyframeTrack;
	
					case "string":
	
						return StringKeyframeTrack;
	
				}
	
				throw new Error( "Unsupported typeName: " + typeName );
	
			}
	
		} );
	
		/**
		 *
		 * Reusable set of Tracks that represent an animation.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		function AnimationClip( name, duration, tracks ) {
	
			this.name = name;
			this.tracks = tracks;
			this.duration = ( duration !== undefined ) ? duration : -1;
	
			this.uuid = _Math.generateUUID();
	
			// this means it should figure out its duration by scanning the tracks
			if ( this.duration < 0 ) {
	
				this.resetDuration();
	
			}
	
			this.optimize();
	
		}
	
		AnimationClip.prototype = {
	
			constructor: AnimationClip,
	
			resetDuration: function() {
	
				var tracks = this.tracks,
					duration = 0;
	
				for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
	
					var track = this.tracks[ i ];
	
					duration = Math.max(
							duration, track.times[ track.times.length - 1 ] );
	
				}
	
				this.duration = duration;
	
			},
	
			trim: function() {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].trim( 0, this.duration );
	
				}
	
				return this;
	
			},
	
			optimize: function() {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].optimize();
	
				}
	
				return this;
	
			}
	
		};
	
		// Static methods:
	
		Object.assign( AnimationClip, {
	
			parse: function( json ) {
	
				var tracks = [],
					jsonTracks = json.tracks,
					frameTime = 1.0 / ( json.fps || 1.0 );
	
				for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
	
					tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );
	
				}
	
				return new AnimationClip( json.name, json.duration, tracks );
	
			},
	
	
			toJSON: function( clip ) {
	
				var tracks = [],
					clipTracks = clip.tracks;
	
				var json = {
	
					'name': clip.name,
					'duration': clip.duration,
					'tracks': tracks
	
				};
	
				for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
	
					tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
	
				}
	
				return json;
	
			},
	
	
			CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {
	
				var numMorphTargets = morphTargetSequence.length;
				var tracks = [];
	
				for ( var i = 0; i < numMorphTargets; i ++ ) {
	
					var times = [];
					var values = [];
	
					times.push(
							( i + numMorphTargets - 1 ) % numMorphTargets,
							i,
							( i + 1 ) % numMorphTargets );
	
					values.push( 0, 1, 0 );
	
					var order = AnimationUtils.getKeyframeOrder( times );
					times = AnimationUtils.sortedArray( times, 1, order );
					values = AnimationUtils.sortedArray( values, 1, order );
	
					// if there is a key at the first frame, duplicate it as the
					// last frame as well for perfect loop.
					if ( ! noLoop && times[ 0 ] === 0 ) {
	
						times.push( numMorphTargets );
						values.push( values[ 0 ] );
	
					}
	
					tracks.push(
							new NumberKeyframeTrack(
								'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
								times, values
							).scale( 1.0 / fps ) );
				}
	
				return new AnimationClip( name, -1, tracks );
	
			},
	
			findByName: function( objectOrClipArray, name ) {
	
				var clipArray = objectOrClipArray;
	
				if ( ! Array.isArray( objectOrClipArray ) ) {
	
					var o = objectOrClipArray;
					clipArray = o.geometry && o.geometry.animations || o.animations;
	
				}
	
				for ( var i = 0; i < clipArray.length; i ++ ) {
	
					if ( clipArray[ i ].name === name ) {
	
						return clipArray[ i ];
	
					}
				}
	
				return null;
	
			},
	
			CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {
	
				var animationToMorphTargets = {};
	
				// tested with https://regex101.com/ on trick sequences
				// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
				var pattern = /^([\w-]*?)([\d]+)$/;
	
				// sort morph target names into animation groups based
				// patterns like Walk_001, Walk_002, Run_001, Run_002
				for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
	
					var morphTarget = morphTargets[ i ];
					var parts = morphTarget.name.match( pattern );
	
					if ( parts && parts.length > 1 ) {
	
						var name = parts[ 1 ];
	
						var animationMorphTargets = animationToMorphTargets[ name ];
						if ( ! animationMorphTargets ) {
	
							animationToMorphTargets[ name ] = animationMorphTargets = [];
	
						}
	
						animationMorphTargets.push( morphTarget );
	
					}
	
				}
	
				var clips = [];
	
				for ( var name in animationToMorphTargets ) {
	
					clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
	
				}
	
				return clips;
	
			},
	
			// parse the animation.hierarchy format
			parseAnimation: function( animation, bones ) {
	
				if ( ! animation ) {
	
					console.error( "  no animation in JSONLoader data" );
					return null;
	
				}
	
				var addNonemptyTrack = function(
						trackType, trackName, animationKeys, propertyName, destTracks ) {
	
					// only return track if there are actually keys.
					if ( animationKeys.length !== 0 ) {
	
						var times = [];
						var values = [];
	
						AnimationUtils.flattenJSON(
								animationKeys, times, values, propertyName );
	
						// empty keys are filtered out, so check again
						if ( times.length !== 0 ) {
	
							destTracks.push( new trackType( trackName, times, values ) );
	
						}
	
					}
	
				};
	
				var tracks = [];
	
				var clipName = animation.name || 'default';
				// automatic length determination in AnimationClip.
				var duration = animation.length || -1;
				var fps = animation.fps || 30;
	
				var hierarchyTracks = animation.hierarchy || [];
	
				for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
	
					var animationKeys = hierarchyTracks[ h ].keys;
	
					// skip empty tracks
					if ( ! animationKeys || animationKeys.length === 0 ) continue;
	
					// process morph targets in a way exactly compatible
					// with AnimationHandler.init( animation )
					if ( animationKeys[0].morphTargets ) {
	
						// figure out all morph targets used in this track
						var morphTargetNames = {};
						for ( var k = 0; k < animationKeys.length; k ++ ) {
	
							if ( animationKeys[k].morphTargets ) {
	
								for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {
	
									morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
								}
	
							}
	
						}
	
						// create a track for each morph target with all zero
						// morphTargetInfluences except for the keys in which
						// the morphTarget is named.
						for ( var morphTargetName in morphTargetNames ) {
	
							var times = [];
							var values = [];
	
							for ( var m = 0;
									m !== animationKeys[k].morphTargets.length; ++ m ) {
	
								var animationKey = animationKeys[k];
	
								times.push( animationKey.time );
								values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
	
							}
	
							tracks.push( new NumberKeyframeTrack(
									'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
	
						}
	
						duration = morphTargetNames.length * ( fps || 1.0 );
	
					} else {
						// ...assume skeletal animation
	
						var boneName = '.bones[' + bones[ h ].name + ']';
	
						addNonemptyTrack(
								VectorKeyframeTrack, boneName + '.position',
								animationKeys, 'pos', tracks );
	
						addNonemptyTrack(
								QuaternionKeyframeTrack, boneName + '.quaternion',
								animationKeys, 'rot', tracks );
	
						addNonemptyTrack(
								VectorKeyframeTrack, boneName + '.scale',
								animationKeys, 'scl', tracks );
	
					}
	
				}
	
				if ( tracks.length === 0 ) {
	
					return null;
	
				}
	
				var clip = new AnimationClip( clipName, duration, tracks );
	
				return clip;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function MaterialLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.textures = {};
	
		}
	
		Object.assign( MaterialLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new XHRLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			setTextures: function ( value ) {
	
				this.textures = value;
	
			},
	
			parse: function ( json ) {
	
				var textures = this.textures;
	
				function getTexture( name ) {
	
					if ( textures[ name ] === undefined ) {
	
						console.warn( 'THREE.MaterialLoader: Undefined texture', name );
	
					}
	
					return textures[ name ];
	
				}
	
				var material = new Materials[ json.type ]();
	
				if ( json.uuid !== undefined ) material.uuid = json.uuid;
				if ( json.name !== undefined ) material.name = json.name;
				if ( json.color !== undefined ) material.color.setHex( json.color );
				if ( json.roughness !== undefined ) material.roughness = json.roughness;
				if ( json.metalness !== undefined ) material.metalness = json.metalness;
				if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
				if ( json.specular !== undefined ) material.specular.setHex( json.specular );
				if ( json.shininess !== undefined ) material.shininess = json.shininess;
				if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
				if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
				if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
				if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
				if ( json.fog !== undefined ) material.fog = json.fog;
				if ( json.shading !== undefined ) material.shading = json.shading;
				if ( json.blending !== undefined ) material.blending = json.blending;
				if ( json.side !== undefined ) material.side = json.side;
				if ( json.opacity !== undefined ) material.opacity = json.opacity;
				if ( json.transparent !== undefined ) material.transparent = json.transparent;
				if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
				if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
				if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
				if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
				if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
				if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
				if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
				if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
				if ( json.skinning !== undefined ) material.skinning = json.skinning;
				if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
	
				// for PointsMaterial
	
				if ( json.size !== undefined ) material.size = json.size;
				if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
	
				// maps
	
				if ( json.map !== undefined ) material.map = getTexture( json.map );
	
				if ( json.alphaMap !== undefined ) {
	
					material.alphaMap = getTexture( json.alphaMap );
					material.transparent = true;
	
				}
	
				if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
				if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
	
				if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
				if ( json.normalScale !== undefined ) {
	
					var normalScale = json.normalScale;
	
					if ( Array.isArray( normalScale ) === false ) {
	
						// Blender exporter used to export a scalar. See #7459
	
						normalScale = [ normalScale, normalScale ];
	
					}
	
					material.normalScale = new Vector2().fromArray( normalScale );
	
				}
	
				if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
				if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
				if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
	
				if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
				if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
	
				if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
				if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
	
				if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
	
				if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
	
				if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
	
				if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
				if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
	
				if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
				if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
	
				// MultiMaterial
	
				if ( json.materials !== undefined ) {
	
					for ( var i = 0, l = json.materials.length; i < l; i ++ ) {
	
						material.materials.push( this.parse( json.materials[ i ] ) );
	
					}
	
				}
	
				return material;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferGeometryLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( BufferGeometryLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new XHRLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				var geometry = new BufferGeometry();
	
				var index = json.data.index;
	
				var TYPED_ARRAYS = {
					'Int8Array': Int8Array,
					'Uint8Array': Uint8Array,
					'Uint8ClampedArray': Uint8ClampedArray,
					'Int16Array': Int16Array,
					'Uint16Array': Uint16Array,
					'Int32Array': Int32Array,
					'Uint32Array': Uint32Array,
					'Float32Array': Float32Array,
					'Float64Array': Float64Array
				};
	
				if ( index !== undefined ) {
	
					var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
					geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
	
				}
	
				var attributes = json.data.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
	
					geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );
	
				}
	
				var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
	
				if ( groups !== undefined ) {
	
					for ( var i = 0, n = groups.length; i !== n; ++ i ) {
	
						var group = groups[ i ];
	
						geometry.addGroup( group.start, group.count, group.materialIndex );
	
					}
	
				}
	
				var boundingSphere = json.data.boundingSphere;
	
				if ( boundingSphere !== undefined ) {
	
					var center = new Vector3();
	
					if ( boundingSphere.center !== undefined ) {
	
						center.fromArray( boundingSphere.center );
	
					}
	
					geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
	
				}
	
				return geometry;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Loader() {
	
			this.onLoadStart = function () {};
			this.onLoadProgress = function () {};
			this.onLoadComplete = function () {};
	
		}
	
		Loader.prototype = {
	
			constructor: Loader,
	
			crossOrigin: undefined,
	
			extractUrlBase: function ( url ) {
	
				var parts = url.split( '/' );
	
				if ( parts.length === 1 ) return './';
	
				parts.pop();
	
				return parts.join( '/' ) + '/';
	
			},
	
			initMaterials: function ( materials, texturePath, crossOrigin ) {
	
				var array = [];
	
				for ( var i = 0; i < materials.length; ++ i ) {
	
					array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );
	
				}
	
				return array;
	
			},
	
			createMaterial: ( function () {
	
				var color, textureLoader, materialLoader;
	
				return function createMaterial( m, texturePath, crossOrigin ) {
	
					if ( color === undefined ) color = new Color();
					if ( textureLoader === undefined ) textureLoader = new TextureLoader();
					if ( materialLoader === undefined ) materialLoader = new MaterialLoader();
	
					// convert from old material format
	
					var textures = {};
	
					function loadTexture( path, repeat, offset, wrap, anisotropy ) {
	
						var fullPath = texturePath + path;
						var loader = Loader.Handlers.get( fullPath );
	
						var texture;
	
						if ( loader !== null ) {
	
							texture = loader.load( fullPath );
	
						} else {
	
							textureLoader.setCrossOrigin( crossOrigin );
							texture = textureLoader.load( fullPath );
	
						}
	
						if ( repeat !== undefined ) {
	
							texture.repeat.fromArray( repeat );
	
							if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
							if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;
	
						}
	
						if ( offset !== undefined ) {
	
							texture.offset.fromArray( offset );
	
						}
	
						if ( wrap !== undefined ) {
	
							if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
							if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;
	
							if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
							if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;
	
						}
	
						if ( anisotropy !== undefined ) {
	
							texture.anisotropy = anisotropy;
	
						}
	
						var uuid = _Math.generateUUID();
	
						textures[ uuid ] = texture;
	
						return uuid;
	
					}
	
					//
	
					var json = {
						uuid: _Math.generateUUID(),
						type: 'MeshLambertMaterial'
					};
	
					for ( var name in m ) {
	
						var value = m[ name ];
	
						switch ( name ) {
							case 'DbgColor':
							case 'DbgIndex':
							case 'opticalDensity':
							case 'illumination':
								break;
							case 'DbgName':
								json.name = value;
								break;
							case 'blending':
								json.blending = BlendingMode[ value ];
								break;
							case 'colorAmbient':
							case 'mapAmbient':
								console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
								break;
							case 'colorDiffuse':
								json.color = color.fromArray( value ).getHex();
								break;
							case 'colorSpecular':
								json.specular = color.fromArray( value ).getHex();
								break;
							case 'colorEmissive':
								json.emissive = color.fromArray( value ).getHex();
								break;
							case 'specularCoef':
								json.shininess = value;
								break;
							case 'shading':
								if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
								if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
								if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
								break;
							case 'mapDiffuse':
								json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
								break;
							case 'mapDiffuseRepeat':
							case 'mapDiffuseOffset':
							case 'mapDiffuseWrap':
							case 'mapDiffuseAnisotropy':
								break;
							case 'mapEmissive':
								json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
								break;
							case 'mapEmissiveRepeat':
							case 'mapEmissiveOffset':
							case 'mapEmissiveWrap':
							case 'mapEmissiveAnisotropy':
								break;
							case 'mapLight':
								json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
								break;
							case 'mapLightRepeat':
							case 'mapLightOffset':
							case 'mapLightWrap':
							case 'mapLightAnisotropy':
								break;
							case 'mapAO':
								json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
								break;
							case 'mapAORepeat':
							case 'mapAOOffset':
							case 'mapAOWrap':
							case 'mapAOAnisotropy':
								break;
							case 'mapBump':
								json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
								break;
							case 'mapBumpScale':
								json.bumpScale = value;
								break;
							case 'mapBumpRepeat':
							case 'mapBumpOffset':
							case 'mapBumpWrap':
							case 'mapBumpAnisotropy':
								break;
							case 'mapNormal':
								json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
								break;
							case 'mapNormalFactor':
								json.normalScale = [ value, value ];
								break;
							case 'mapNormalRepeat':
							case 'mapNormalOffset':
							case 'mapNormalWrap':
							case 'mapNormalAnisotropy':
								break;
							case 'mapSpecular':
								json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
								break;
							case 'mapSpecularRepeat':
							case 'mapSpecularOffset':
							case 'mapSpecularWrap':
							case 'mapSpecularAnisotropy':
								break;
							case 'mapMetalness':
								json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
								break;
							case 'mapMetalnessRepeat':
							case 'mapMetalnessOffset':
							case 'mapMetalnessWrap':
							case 'mapMetalnessAnisotropy':
								break;
							case 'mapRoughness':
								json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
								break;
							case 'mapRoughnessRepeat':
							case 'mapRoughnessOffset':
							case 'mapRoughnessWrap':
							case 'mapRoughnessAnisotropy':
								break;
							case 'mapAlpha':
								json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
								break;
							case 'mapAlphaRepeat':
							case 'mapAlphaOffset':
							case 'mapAlphaWrap':
							case 'mapAlphaAnisotropy':
								break;
							case 'flipSided':
								json.side = BackSide;
								break;
							case 'doubleSided':
								json.side = DoubleSide;
								break;
							case 'transparency':
								console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
								json.opacity = value;
								break;
							case 'depthTest':
							case 'depthWrite':
							case 'colorWrite':
							case 'opacity':
							case 'reflectivity':
							case 'transparent':
							case 'visible':
							case 'wireframe':
								json[ name ] = value;
								break;
							case 'vertexColors':
								if ( value === true ) json.vertexColors = VertexColors;
								if ( value === 'face' ) json.vertexColors = FaceColors;
								break;
							default:
								console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
								break;
						}
	
					}
	
					if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
					if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;
	
					if ( json.opacity < 1 ) json.transparent = true;
	
					materialLoader.setTextures( textures );
	
					return materialLoader.parse( json );
	
				};
	
			} )()
	
		};
	
		Loader.Handlers = {
	
			handlers: [],
	
			add: function ( regex, loader ) {
	
				this.handlers.push( regex, loader );
	
			},
	
			get: function ( file ) {
	
				var handlers = this.handlers;
	
				for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
	
					var regex = handlers[ i ];
					var loader  = handlers[ i + 1 ];
	
					if ( regex.test( file ) ) {
	
						return loader;
	
					}
	
				}
	
				return null;
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function JSONLoader( manager ) {
	
			if ( typeof manager === 'boolean' ) {
	
				console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
				manager = undefined;
	
			}
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			this.withCredentials = false;
	
		}
	
		Object.assign( JSONLoader.prototype, {
	
			load: function( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );
	
				var loader = new XHRLoader( this.manager );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( text ) {
	
					var json = JSON.parse( text );
					var metadata = json.metadata;
	
					if ( metadata !== undefined ) {
	
						var type = metadata.type;
	
						if ( type !== undefined ) {
	
							if ( type.toLowerCase() === 'object' ) {
	
								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
								return;
	
							}
	
							if ( type.toLowerCase() === 'scene' ) {
	
								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
								return;
	
							}
	
						}
	
					}
	
					var object = scope.parse( json, texturePath );
					onLoad( object.geometry, object.materials );
	
				}, onProgress, onError );
	
			},
	
			setTexturePath: function ( value ) {
	
				this.texturePath = value;
	
			},
	
			parse: function ( json, texturePath ) {
	
				var geometry = new Geometry(),
				scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;
	
				parseModel( scale );
	
				parseSkin();
				parseMorphing( scale );
				parseAnimations();
	
				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();
	
				function parseModel( scale ) {
	
					function isBitSet( value, position ) {
	
						return value & ( 1 << position );
	
					}
	
					var i, j, fi,
	
					offset, zLength,
	
				colorIndex, normalIndex, uvIndex, materialIndex,
	
					type,
					isQuad,
					hasMaterial,
					hasFaceVertexUv,
					hasFaceNormal, hasFaceVertexNormal,
					hasFaceColor, hasFaceVertexColor,
	
				vertex, face, faceA, faceB, hex, normal,
	
					uvLayer, uv, u, v,
	
					faces = json.faces,
					vertices = json.vertices,
					normals = json.normals,
					colors = json.colors,
	
					nUvLayers = 0;
	
					if ( json.uvs !== undefined ) {
	
						// disregard empty arrays
	
						for ( i = 0; i < json.uvs.length; i ++ ) {
	
							if ( json.uvs[ i ].length ) nUvLayers ++;
	
						}
	
						for ( i = 0; i < nUvLayers; i ++ ) {
	
							geometry.faceVertexUvs[ i ] = [];
	
						}
	
					}
	
					offset = 0;
					zLength = vertices.length;
	
					while ( offset < zLength ) {
	
						vertex = new Vector3();
	
						vertex.x = vertices[ offset ++ ] * scale;
						vertex.y = vertices[ offset ++ ] * scale;
						vertex.z = vertices[ offset ++ ] * scale;
	
						geometry.vertices.push( vertex );
	
					}
	
					offset = 0;
					zLength = faces.length;
	
					while ( offset < zLength ) {
	
						type = faces[ offset ++ ];
	
	
						isQuad              = isBitSet( type, 0 );
						hasMaterial         = isBitSet( type, 1 );
						hasFaceVertexUv     = isBitSet( type, 3 );
						hasFaceNormal       = isBitSet( type, 4 );
						hasFaceVertexNormal = isBitSet( type, 5 );
						hasFaceColor	     = isBitSet( type, 6 );
						hasFaceVertexColor  = isBitSet( type, 7 );
	
						// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);
	
						if ( isQuad ) {
	
							faceA = new Face3();
							faceA.a = faces[ offset ];
							faceA.b = faces[ offset + 1 ];
							faceA.c = faces[ offset + 3 ];
	
							faceB = new Face3();
							faceB.a = faces[ offset + 1 ];
							faceB.b = faces[ offset + 2 ];
							faceB.c = faces[ offset + 3 ];
	
							offset += 4;
	
							if ( hasMaterial ) {
	
								materialIndex = faces[ offset ++ ];
								faceA.materialIndex = materialIndex;
								faceB.materialIndex = materialIndex;
	
							}
	
							// to get face <=> uv index correspondence
	
							fi = geometry.faces.length;
	
							if ( hasFaceVertexUv ) {
	
								for ( i = 0; i < nUvLayers; i ++ ) {
	
									uvLayer = json.uvs[ i ];
	
									geometry.faceVertexUvs[ i ][ fi ] = [];
									geometry.faceVertexUvs[ i ][ fi + 1 ] = [];
	
									for ( j = 0; j < 4; j ++ ) {
	
										uvIndex = faces[ offset ++ ];
	
										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];
	
										uv = new Vector2( u, v );
	
										if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
										if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );
	
									}
	
								}
	
							}
	
							if ( hasFaceNormal ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								faceA.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
								faceB.normal.copy( faceA.normal );
	
							}
	
							if ( hasFaceVertexNormal ) {
	
								for ( i = 0; i < 4; i ++ ) {
	
									normalIndex = faces[ offset ++ ] * 3;
	
									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);
	
	
									if ( i !== 2 ) faceA.vertexNormals.push( normal );
									if ( i !== 0 ) faceB.vertexNormals.push( normal );
	
								}
	
							}
	
	
							if ( hasFaceColor ) {
	
								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];
	
								faceA.color.setHex( hex );
								faceB.color.setHex( hex );
	
							}
	
	
							if ( hasFaceVertexColor ) {
	
								for ( i = 0; i < 4; i ++ ) {
	
									colorIndex = faces[ offset ++ ];
									hex = colors[ colorIndex ];
	
									if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
									if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );
	
								}
	
							}
	
							geometry.faces.push( faceA );
							geometry.faces.push( faceB );
	
						} else {
	
							face = new Face3();
							face.a = faces[ offset ++ ];
							face.b = faces[ offset ++ ];
							face.c = faces[ offset ++ ];
	
							if ( hasMaterial ) {
	
								materialIndex = faces[ offset ++ ];
								face.materialIndex = materialIndex;
	
							}
	
							// to get face <=> uv index correspondence
	
							fi = geometry.faces.length;
	
							if ( hasFaceVertexUv ) {
	
								for ( i = 0; i < nUvLayers; i ++ ) {
	
									uvLayer = json.uvs[ i ];
	
									geometry.faceVertexUvs[ i ][ fi ] = [];
	
									for ( j = 0; j < 3; j ++ ) {
	
										uvIndex = faces[ offset ++ ];
	
										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];
	
										uv = new Vector2( u, v );
	
										geometry.faceVertexUvs[ i ][ fi ].push( uv );
	
									}
	
								}
	
							}
	
							if ( hasFaceNormal ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								face.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
							}
	
							if ( hasFaceVertexNormal ) {
	
								for ( i = 0; i < 3; i ++ ) {
	
									normalIndex = faces[ offset ++ ] * 3;
	
									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);
	
									face.vertexNormals.push( normal );
	
								}
	
							}
	
	
							if ( hasFaceColor ) {
	
								colorIndex = faces[ offset ++ ];
								face.color.setHex( colors[ colorIndex ] );
	
							}
	
	
							if ( hasFaceVertexColor ) {
	
								for ( i = 0; i < 3; i ++ ) {
	
									colorIndex = faces[ offset ++ ];
									face.vertexColors.push( new Color( colors[ colorIndex ] ) );
	
								}
	
							}
	
							geometry.faces.push( face );
	
						}
	
					}
	
				}
	
				function parseSkin() {
	
					var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;
	
					if ( json.skinWeights ) {
	
						for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {
	
							var x =                               json.skinWeights[ i ];
							var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
							var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
							var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;
	
							geometry.skinWeights.push( new Vector4( x, y, z, w ) );
	
						}
	
					}
	
					if ( json.skinIndices ) {
	
						for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {
	
							var a =                               json.skinIndices[ i ];
							var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
							var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
							var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;
	
							geometry.skinIndices.push( new Vector4( a, b, c, d ) );
	
						}
	
					}
	
					geometry.bones = json.bones;
	
					if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {
	
						console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
							geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );
	
					}
	
				}
	
				function parseMorphing( scale ) {
	
					if ( json.morphTargets !== undefined ) {
	
						for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {
	
							geometry.morphTargets[ i ] = {};
							geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
							geometry.morphTargets[ i ].vertices = [];
	
							var dstVertices = geometry.morphTargets[ i ].vertices;
							var srcVertices = json.morphTargets[ i ].vertices;
	
							for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {
	
								var vertex = new Vector3();
								vertex.x = srcVertices[ v ] * scale;
								vertex.y = srcVertices[ v + 1 ] * scale;
								vertex.z = srcVertices[ v + 2 ] * scale;
	
								dstVertices.push( vertex );
	
							}
	
						}
	
					}
	
					if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {
	
						console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );
	
						var faces = geometry.faces;
						var morphColors = json.morphColors[ 0 ].colors;
	
						for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
							faces[ i ].color.fromArray( morphColors, i * 3 );
	
						}
	
					}
	
				}
	
				function parseAnimations() {
	
					var outputAnimations = [];
	
					// parse old style Bone/Hierarchy animations
					var animations = [];
	
					if ( json.animation !== undefined ) {
	
						animations.push( json.animation );
	
					}
	
					if ( json.animations !== undefined ) {
	
						if ( json.animations.length ) {
	
							animations = animations.concat( json.animations );
	
						} else {
	
							animations.push( json.animations );
	
						}
	
					}
	
					for ( var i = 0; i < animations.length; i ++ ) {
	
						var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
						if ( clip ) outputAnimations.push( clip );
	
					}
	
					// parse implicit morph animations
					if ( geometry.morphTargets ) {
	
						// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
						var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
						outputAnimations = outputAnimations.concat( morphAnimationClips );
	
					}
	
					if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;
	
				}
	
				if ( json.materials === undefined || json.materials.length === 0 ) {
	
					return { geometry: geometry };
	
				} else {
	
					var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );
	
					return { geometry: geometry, materials: materials };
	
				}
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ObjectLoader ( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.texturePath = '';
	
		}
	
		Object.assign( ObjectLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( this.texturePath === '' ) {
	
					this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );
	
				}
	
				var scope = this;
	
				var loader = new XHRLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					scope.parse( JSON.parse( text ), onLoad );
	
				}, onProgress, onError );
	
			},
	
			setTexturePath: function ( value ) {
	
				this.texturePath = value;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
	
			},
	
			parse: function ( json, onLoad ) {
	
				var geometries = this.parseGeometries( json.geometries );
	
				var images = this.parseImages( json.images, function () {
	
					if ( onLoad !== undefined ) onLoad( object );
	
				} );
	
				var textures  = this.parseTextures( json.textures, images );
				var materials = this.parseMaterials( json.materials, textures );
	
				var object = this.parseObject( json.object, geometries, materials );
	
				if ( json.animations ) {
	
					object.animations = this.parseAnimations( json.animations );
	
				}
	
				if ( json.images === undefined || json.images.length === 0 ) {
	
					if ( onLoad !== undefined ) onLoad( object );
	
				}
	
				return object;
	
			},
	
			parseGeometries: function ( json ) {
	
				var geometries = {};
	
				if ( json !== undefined ) {
	
					var geometryLoader = new JSONLoader();
					var bufferGeometryLoader = new BufferGeometryLoader();
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var geometry;
						var data = json[ i ];
	
						switch ( data.type ) {
	
							case 'PlaneGeometry':
							case 'PlaneBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.widthSegments,
									data.heightSegments
								);
	
								break;
	
							case 'BoxGeometry':
							case 'BoxBufferGeometry':
							case 'CubeGeometry': // backwards compatible
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.depth,
									data.widthSegments,
									data.heightSegments,
									data.depthSegments
								);
	
								break;
	
							case 'CircleGeometry':
							case 'CircleBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.segments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'CylinderGeometry':
							case 'CylinderBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radiusTop,
									data.radiusBottom,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'ConeGeometry':
							case 'ConeBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'SphereGeometry':
							case 'SphereBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.widthSegments,
									data.heightSegments,
									data.phiStart,
									data.phiLength,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'DodecahedronGeometry':
							case 'IcosahedronGeometry':
							case 'OctahedronGeometry':
							case 'TetrahedronGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.detail
								);
	
								break;
	
							case 'RingGeometry':
							case 'RingBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.innerRadius,
									data.outerRadius,
									data.thetaSegments,
									data.phiSegments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'TorusGeometry':
							case 'TorusBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.radialSegments,
									data.tubularSegments,
									data.arc
								);
	
								break;
	
							case 'TorusKnotGeometry':
							case 'TorusKnotBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.tubularSegments,
									data.radialSegments,
									data.p,
									data.q
								);
	
								break;
	
							case 'LatheGeometry':
							case 'LatheBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.points,
									data.segments,
									data.phiStart,
									data.phiLength
								);
	
								break;
	
							case 'BufferGeometry':
	
								geometry = bufferGeometryLoader.parse( data );
	
								break;
	
							case 'Geometry':
	
								geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;
	
								break;
	
							default:
	
								console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
	
								continue;
	
						}
	
						geometry.uuid = data.uuid;
	
						if ( data.name !== undefined ) geometry.name = data.name;
	
						geometries[ data.uuid ] = geometry;
	
					}
	
				}
	
				return geometries;
	
			},
	
			parseMaterials: function ( json, textures ) {
	
				var materials = {};
	
				if ( json !== undefined ) {
	
					var loader = new MaterialLoader();
					loader.setTextures( textures );
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var material = loader.parse( json[ i ] );
						materials[ material.uuid ] = material;
	
					}
	
				}
	
				return materials;
	
			},
	
			parseAnimations: function ( json ) {
	
				var animations = [];
	
				for ( var i = 0; i < json.length; i ++ ) {
	
					var clip = AnimationClip.parse( json[ i ] );
	
					animations.push( clip );
	
				}
	
				return animations;
	
			},
	
			parseImages: function ( json, onLoad ) {
	
				var scope = this;
				var images = {};
	
				function loadImage( url ) {
	
					scope.manager.itemStart( url );
	
					return loader.load( url, function () {
	
						scope.manager.itemEnd( url );
	
					}, undefined, function () {
	
						scope.manager.itemError( url );
	
					} );
	
				}
	
				if ( json !== undefined && json.length > 0 ) {
	
					var manager = new LoadingManager( onLoad );
	
					var loader = new ImageLoader( manager );
					loader.setCrossOrigin( this.crossOrigin );
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var image = json[ i ];
						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;
	
						images[ image.uuid ] = loadImage( path );
	
					}
	
				}
	
				return images;
	
			},
	
			parseTextures: function ( json, images ) {
	
				function parseConstant( value, type ) {
	
					if ( typeof( value ) === 'number' ) return value;
	
					console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
	
					return type[ value ];
	
				}
	
				var textures = {};
	
				if ( json !== undefined ) {
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var data = json[ i ];
	
						if ( data.image === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
	
						}
	
						if ( images[ data.image ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
	
						}
	
						var texture = new Texture( images[ data.image ] );
						texture.needsUpdate = true;
	
						texture.uuid = data.uuid;
	
						if ( data.name !== undefined ) texture.name = data.name;
	
						if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );
	
						if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
						if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
						if ( data.wrap !== undefined ) {
	
							texture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );
							texture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );
	
						}
	
						if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );
						if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );
						if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
	
						if ( data.flipY !== undefined ) texture.flipY = data.flipY;
	
						textures[ data.uuid ] = texture;
	
					}
	
				}
	
				return textures;
	
			},
	
			parseObject: function () {
	
				var matrix = new Matrix4();
	
				return function parseObject( data, geometries, materials ) {
	
					var object;
	
					function getGeometry( name ) {
	
						if ( geometries[ name ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
	
						}
	
						return geometries[ name ];
	
					}
	
					function getMaterial( name ) {
	
						if ( name === undefined ) return undefined;
	
						if ( materials[ name ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined material', name );
	
						}
	
						return materials[ name ];
	
					}
	
					switch ( data.type ) {
	
						case 'Scene':
	
							object = new Scene();
	
							if ( data.background !== undefined ) {
	
								if ( Number.isInteger( data.background ) ) {
	
									object.background = new Color( data.background );
	
								}
	
							}
	
							if ( data.fog !== undefined ) {
	
								if ( data.fog.type === 'Fog' ) {
	
									object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
	
								} else if ( data.fog.type === 'FogExp2' ) {
	
									object.fog = new FogExp2( data.fog.color, data.fog.density );
	
								}
	
							}
	
							break;
	
						case 'PerspectiveCamera':
	
							object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
	
							if ( data.focus !== undefined ) object.focus = data.focus;
							if ( data.zoom !== undefined ) object.zoom = data.zoom;
							if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
							if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
							if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
	
							break;
	
						case 'OrthographicCamera':
	
							object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
	
							break;
	
						case 'AmbientLight':
	
							object = new AmbientLight( data.color, data.intensity );
	
							break;
	
						case 'DirectionalLight':
	
							object = new DirectionalLight( data.color, data.intensity );
	
							break;
	
						case 'PointLight':
	
							object = new PointLight( data.color, data.intensity, data.distance, data.decay );
	
							break;
	
						case 'SpotLight':
	
							object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
	
							break;
	
						case 'HemisphereLight':
	
							object = new HemisphereLight( data.color, data.groundColor, data.intensity );
	
							break;
	
						case 'Mesh':
	
							var geometry = getGeometry( data.geometry );
							var material = getMaterial( data.material );
	
							if ( geometry.bones && geometry.bones.length > 0 ) {
	
								object = new SkinnedMesh( geometry, material );
	
							} else {
	
								object = new Mesh( geometry, material );
	
							}
	
							break;
	
						case 'LOD':
	
							object = new LOD();
	
							break;
	
						case 'Line':
	
							object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
	
							break;
	
						case 'LineSegments':
	
							object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
	
							break;
	
						case 'PointCloud':
						case 'Points':
	
							object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
	
							break;
	
						case 'Sprite':
	
							object = new Sprite( getMaterial( data.material ) );
	
							break;
	
						case 'Group':
	
							object = new Group();
	
							break;
	
						default:
	
							object = new Object3D();
	
					}
	
					object.uuid = data.uuid;
	
					if ( data.name !== undefined ) object.name = data.name;
					if ( data.matrix !== undefined ) {
	
						matrix.fromArray( data.matrix );
						matrix.decompose( object.position, object.quaternion, object.scale );
	
					} else {
	
						if ( data.position !== undefined ) object.position.fromArray( data.position );
						if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
						if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
						if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
	
					}
	
					if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
					if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
	
					if ( data.shadow ) {
	
						if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
						if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
						if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
						if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
	
					}
	
					if ( data.visible !== undefined ) object.visible = data.visible;
					if ( data.userData !== undefined ) object.userData = data.userData;
	
					if ( data.children !== undefined ) {
	
						for ( var child in data.children ) {
	
							object.add( this.parseObject( data.children[ child ], geometries, materials ) );
	
						}
	
					}
	
					if ( data.type === 'LOD' ) {
	
						var levels = data.levels;
	
						for ( var l = 0; l < levels.length; l ++ ) {
	
							var level = levels[ l ];
							var child = object.getObjectByProperty( 'uuid', level.object );
	
							if ( child !== undefined ) {
	
								object.addLevel( child, level.distance );
	
							}
	
						}
	
					}
	
					return object;
	
				};
	
			}()
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Extensible curve object
		 *
		 * Some common of Curve methods
		 * .getPoint(t), getTangent(t)
		 * .getPointAt(u), getTangentAt(u)
		 * .getPoints(), .getSpacedPoints()
		 * .getLength()
		 * .updateArcLengths()
		 *
		 * This following classes subclasses THREE.Curve:
		 *
		 * -- 2d classes --
		 * THREE.LineCurve
		 * THREE.QuadraticBezierCurve
		 * THREE.CubicBezierCurve
		 * THREE.SplineCurve
		 * THREE.ArcCurve
		 * THREE.EllipseCurve
		 *
		 * -- 3d classes --
		 * THREE.LineCurve3
		 * THREE.QuadraticBezierCurve3
		 * THREE.CubicBezierCurve3
		 * THREE.SplineCurve3
		 *
		 * A series of curves can be represented as a THREE.CurvePath
		 *
		 **/
	
		/**************************************************************
		 *	Abstract Curve base class
		 **************************************************************/
	
		function Curve() {}
	
		Curve.prototype = {
	
			constructor: Curve,
	
			// Virtual base class method to overwrite and implement in subclasses
			//	- t [0 .. 1]
	
			getPoint: function ( t ) {
	
				console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
				return null;
	
			},
	
			// Get point at relative position in curve according to arc length
			// - u [0 .. 1]
	
			getPointAt: function ( u ) {
	
				var t = this.getUtoTmapping( u );
				return this.getPoint( t );
	
			},
	
			// Get sequence of points using getPoint( t )
	
			getPoints: function ( divisions ) {
	
				if ( ! divisions ) divisions = 5;
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPoint( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get sequence of points using getPointAt( u )
	
			getSpacedPoints: function ( divisions ) {
	
				if ( ! divisions ) divisions = 5;
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPointAt( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get total curve arc length
	
			getLength: function () {
	
				var lengths = this.getLengths();
				return lengths[ lengths.length - 1 ];
	
			},
	
			// Get list of cumulative segment lengths
	
			getLengths: function ( divisions ) {
	
				if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;
	
				if ( this.cacheArcLengths
					&& ( this.cacheArcLengths.length === divisions + 1 )
					&& ! this.needsUpdate ) {
	
					//console.log( "cached", this.cacheArcLengths );
					return this.cacheArcLengths;
	
				}
	
				this.needsUpdate = false;
	
				var cache = [];
				var current, last = this.getPoint( 0 );
				var p, sum = 0;
	
				cache.push( 0 );
	
				for ( p = 1; p <= divisions; p ++ ) {
	
					current = this.getPoint ( p / divisions );
					sum += current.distanceTo( last );
					cache.push( sum );
					last = current;
	
				}
	
				this.cacheArcLengths = cache;
	
				return cache; // { sums: cache, sum:sum }; Sum is in the last element.
	
			},
	
			updateArcLengths: function() {
	
				this.needsUpdate = true;
				this.getLengths();
	
			},
	
			// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
	
			getUtoTmapping: function ( u, distance ) {
	
				var arcLengths = this.getLengths();
	
				var i = 0, il = arcLengths.length;
	
				var targetArcLength; // The targeted u distance value to get
	
				if ( distance ) {
	
					targetArcLength = distance;
	
				} else {
	
					targetArcLength = u * arcLengths[ il - 1 ];
	
				}
	
				//var time = Date.now();
	
				// binary search for the index with largest value smaller than target u distance
	
				var low = 0, high = il - 1, comparison;
	
				while ( low <= high ) {
	
					i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
	
					comparison = arcLengths[ i ] - targetArcLength;
	
					if ( comparison < 0 ) {
	
						low = i + 1;
	
					} else if ( comparison > 0 ) {
	
						high = i - 1;
	
					} else {
	
						high = i;
						break;
	
						// DONE
	
					}
	
				}
	
				i = high;
	
				//console.log('b' , i, low, high, Date.now()- time);
	
				if ( arcLengths[ i ] === targetArcLength ) {
	
					var t = i / ( il - 1 );
					return t;
	
				}
	
				// we could get finer grain at lengths, or use simple interpolation between two points
	
				var lengthBefore = arcLengths[ i ];
				var lengthAfter = arcLengths[ i + 1 ];
	
				var segmentLength = lengthAfter - lengthBefore;
	
				// determine where we are between the 'before' and 'after' points
	
				var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
	
				// add that fractional amount to t
	
				var t = ( i + segmentFraction ) / ( il - 1 );
	
				return t;
	
			},
	
			// Returns a unit vector tangent at t
			// In case any sub curve does not implement its tangent derivation,
			// 2 points a small delta apart will be used to find its gradient
			// which seems to give a reasonable approximation
	
			getTangent: function( t ) {
	
				var delta = 0.0001;
				var t1 = t - delta;
				var t2 = t + delta;
	
				// Capping in case of danger
	
				if ( t1 < 0 ) t1 = 0;
				if ( t2 > 1 ) t2 = 1;
	
				var pt1 = this.getPoint( t1 );
				var pt2 = this.getPoint( t2 );
	
				var vec = pt2.clone().sub( pt1 );
				return vec.normalize();
	
			},
	
			getTangentAt: function ( u ) {
	
				var t = this.getUtoTmapping( u );
				return this.getTangent( t );
	
			},
	
			computeFrenetFrames: function ( segments, closed ) {
	
				// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	
				var normal = new Vector3();
	
				var tangents = [];
				var normals = [];
				var binormals = [];
	
				var vec = new Vector3();
				var mat = new Matrix4();
	
				var i, u, theta;
	
				// compute the tangent vectors for each segment on the curve
	
				for ( i = 0; i <= segments; i ++ ) {
	
					u = i / segments;
	
					tangents[ i ] = this.getTangentAt( u );
					tangents[ i ].normalize();
	
				}
	
				// select an initial normal vector perpendicular to the first tangent vector,
				// and in the direction of the minimum tangent xyz component
	
				normals[ 0 ] = new Vector3();
				binormals[ 0 ] = new Vector3();
				var min = Number.MAX_VALUE;
				var tx = Math.abs( tangents[ 0 ].x );
				var ty = Math.abs( tangents[ 0 ].y );
				var tz = Math.abs( tangents[ 0 ].z );
	
				if ( tx <= min ) {
	
					min = tx;
					normal.set( 1, 0, 0 );
	
				}
	
				if ( ty <= min ) {
	
					min = ty;
					normal.set( 0, 1, 0 );
	
				}
	
				if ( tz <= min ) {
	
					normal.set( 0, 0, 1 );
	
				}
	
				vec.crossVectors( tangents[ 0 ], normal ).normalize();
	
				normals[ 0 ].crossVectors( tangents[ 0 ], vec );
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	
	
				// compute the slowly-varying normal and binormal vectors for each segment on the curve
	
				for ( i = 1; i <= segments; i ++ ) {
	
					normals[ i ] = normals[ i - 1 ].clone();
	
					binormals[ i ] = binormals[ i - 1 ].clone();
	
					vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
	
					if ( vec.length() > Number.EPSILON ) {
	
						vec.normalize();
	
						theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
	
						normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
	
					}
	
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
				}
	
				// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
	
				if ( closed === true ) {
	
					theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
					theta /= segments;
	
					if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
	
						theta = - theta;
	
					}
	
					for ( i = 1; i <= segments; i ++ ) {
	
						// twist a little...
						normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
						binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
					}
	
				}
	
				return {
					tangents: tangents,
					normals: normals,
					binormals: binormals
				};
	
			}
	
		};
	
		// TODO: Transformation for Curves?
	
		/**************************************************************
		 *	3D Curves
		 **************************************************************/
	
		// A Factory method for creating new curve subclasses
	
		Curve.create = function ( constructor, getPointFunc ) {
	
			constructor.prototype = Object.create( Curve.prototype );
			constructor.prototype.constructor = constructor;
			constructor.prototype.getPoint = getPointFunc;
	
			return constructor;
	
		};
	
		/**************************************************************
		 *	Line
		 **************************************************************/
	
		function LineCurve( v1, v2 ) {
	
			this.v1 = v1;
			this.v2 = v2;
	
		}
	
		LineCurve.prototype = Object.create( Curve.prototype );
		LineCurve.prototype.constructor = LineCurve;
	
		LineCurve.prototype.isLineCurve = true;
	
		LineCurve.prototype.getPoint = function ( t ) {
	
			if ( t === 1 ) {
	
				return this.v2.clone();
	
			}
	
			var point = this.v2.clone().sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );
	
			return point;
	
		};
	
		// Line curve is linear, so we can overwrite default getPointAt
	
		LineCurve.prototype.getPointAt = function ( u ) {
	
			return this.getPoint( u );
	
		};
	
		LineCurve.prototype.getTangent = function( t ) {
	
			var tangent = this.v2.clone().sub( this.v1 );
	
			return tangent.normalize();
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 **/
	
		/**************************************************************
		 *	Curved Path - a curve path is simply a array of connected
		 *  curves, but retains the api of a curve
		 **************************************************************/
	
		function CurvePath() {
	
			this.curves = [];
	
			this.autoClose = false; // Automatically closes the path
	
		}
	
		CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
	
			constructor: CurvePath,
	
			add: function ( curve ) {
	
				this.curves.push( curve );
	
			},
	
			closePath: function () {
	
				// Add a line curve if start and end of lines are not connected
				var startPoint = this.curves[ 0 ].getPoint( 0 );
				var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
	
				if ( ! startPoint.equals( endPoint ) ) {
	
					this.curves.push( new LineCurve( endPoint, startPoint ) );
	
				}
	
			},
	
			// To get accurate point with reference to
			// entire path distance at time t,
			// following has to be done:
	
			// 1. Length of each sub path have to be known
			// 2. Locate and identify type of curve
			// 3. Get t for the curve
			// 4. Return curve.getPointAt(t')
	
			getPoint: function ( t ) {
	
				var d = t * this.getLength();
				var curveLengths = this.getCurveLengths();
				var i = 0;
	
				// To think about boundaries points.
	
				while ( i < curveLengths.length ) {
	
					if ( curveLengths[ i ] >= d ) {
	
						var diff = curveLengths[ i ] - d;
						var curve = this.curves[ i ];
	
						var segmentLength = curve.getLength();
						var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
	
						return curve.getPointAt( u );
	
					}
	
					i ++;
	
				}
	
				return null;
	
				// loop where sum != 0, sum > d , sum+1 <d
	
			},
	
			// We cannot use the default THREE.Curve getPoint() with getLength() because in
			// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
			// getPoint() depends on getLength
	
			getLength: function () {
	
				var lens = this.getCurveLengths();
				return lens[ lens.length - 1 ];
	
			},
	
			// cacheLengths must be recalculated.
			updateArcLengths: function () {
	
				this.needsUpdate = true;
				this.cacheLengths = null;
				this.getLengths();
	
			},
	
			// Compute lengths and cache them
			// We cannot overwrite getLengths() because UtoT mapping uses it.
	
			getCurveLengths: function () {
	
				// We use cache values if curves and cache array are same length
	
				if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
	
					return this.cacheLengths;
	
				}
	
				// Get length of sub-curve
				// Push sums into cached array
	
				var lengths = [], sums = 0;
	
				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
	
					sums += this.curves[ i ].getLength();
					lengths.push( sums );
	
				}
	
				this.cacheLengths = lengths;
	
				return lengths;
	
			},
	
			getSpacedPoints: function ( divisions ) {
	
				if ( ! divisions ) divisions = 40;
	
				var points = [];
	
				for ( var i = 0; i <= divisions; i ++ ) {
	
					points.push( this.getPoint( i / divisions ) );
	
				}
	
				if ( this.autoClose ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			getPoints: function ( divisions ) {
	
				divisions = divisions || 12;
	
				var points = [], last;
	
				for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
	
					var curve = curves[ i ];
					var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
						: (curve && curve.isLineCurve) ? 1
						: (curve && curve.isSplineCurve) ? divisions * curve.points.length
						: divisions;
	
					var pts = curve.getPoints( resolution );
	
					for ( var j = 0; j < pts.length; j++ ) {
	
						var point = pts[ j ];
	
						if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
	
						points.push( point );
						last = point;
	
					}
	
				}
	
				if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			/**************************************************************
			 *	Create Geometries Helpers
			 **************************************************************/
	
			/// Generate geometry from path points (for Line or Points objects)
	
			createPointsGeometry: function ( divisions ) {
	
				var pts = this.getPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			// Generate geometry from equidistant sampling along the path
	
			createSpacedPointsGeometry: function ( divisions ) {
	
				var pts = this.getSpacedPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			createGeometry: function ( points ) {
	
				var geometry = new Geometry();
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
	
				}
	
				return geometry;
	
			}
	
		} );
	
		/**************************************************************
		 *	Ellipse curve
		 **************************************************************/
	
		function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
			this.aX = aX;
			this.aY = aY;
	
			this.xRadius = xRadius;
			this.yRadius = yRadius;
	
			this.aStartAngle = aStartAngle;
			this.aEndAngle = aEndAngle;
	
			this.aClockwise = aClockwise;
	
			this.aRotation = aRotation || 0;
	
		}
	
		EllipseCurve.prototype = Object.create( Curve.prototype );
		EllipseCurve.prototype.constructor = EllipseCurve;
	
		EllipseCurve.prototype.isEllipseCurve = true;
	
		EllipseCurve.prototype.getPoint = function( t ) {
	
			var twoPi = Math.PI * 2;
			var deltaAngle = this.aEndAngle - this.aStartAngle;
			var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
	
			// ensures that deltaAngle is 0 .. 2 PI
			while ( deltaAngle < 0 ) deltaAngle += twoPi;
			while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
	
			if ( deltaAngle < Number.EPSILON ) {
	
				if ( samePoints ) {
	
					deltaAngle = 0;
	
				} else {
	
					deltaAngle = twoPi;
	
				}
	
			}
	
			if ( this.aClockwise === true && ! samePoints ) {
	
				if ( deltaAngle === twoPi ) {
	
					deltaAngle = - twoPi;
	
				} else {
	
					deltaAngle = deltaAngle - twoPi;
	
				}
	
			}
	
			var angle = this.aStartAngle + t * deltaAngle;
			var x = this.aX + this.xRadius * Math.cos( angle );
			var y = this.aY + this.yRadius * Math.sin( angle );
	
			if ( this.aRotation !== 0 ) {
	
				var cos = Math.cos( this.aRotation );
				var sin = Math.sin( this.aRotation );
	
				var tx = x - this.aX;
				var ty = y - this.aY;
	
				// Rotate the point about the center of the ellipse.
				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;
	
			}
	
			return new Vector2( x, y );
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		var CurveUtils = {
	
			tangentQuadraticBezier: function ( t, p0, p1, p2 ) {
	
				return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );
	
			},
	
			// Puay Bing, thanks for helping with this derivative!
	
			tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {
	
				return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
					3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
					6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
					3 * t * t * p3;
	
			},
	
			tangentSpline: function ( t, p0, p1, p2, p3 ) {
	
				// To check if my formulas are correct
	
				var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
				var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
				var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
				var h11 = 3 * t * t - 2 * t;	// t3 − t2
	
				return h00 + h10 + h01 + h11;
	
			},
	
			// Catmull-Rom
	
			interpolate: function( p0, p1, p2, p3, t ) {
	
				var v0 = ( p2 - p0 ) * 0.5;
				var v1 = ( p3 - p1 ) * 0.5;
				var t2 = t * t;
				var t3 = t * t2;
				return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
			}
	
		};
	
		/**************************************************************
		 *	Spline curve
		 **************************************************************/
	
		function SplineCurve( points /* array of Vector2 */ ) {
	
			this.points = ( points === undefined ) ? [] : points;
	
		}
	
		SplineCurve.prototype = Object.create( Curve.prototype );
		SplineCurve.prototype.constructor = SplineCurve;
	
		SplineCurve.prototype.isSplineCurve = true;
	
		SplineCurve.prototype.getPoint = function ( t ) {
	
			var points = this.points;
			var point = ( points.length - 1 ) * t;
	
			var intPoint = Math.floor( point );
			var weight = point - intPoint;
	
			var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
			var interpolate = CurveUtils.interpolate;
	
			return new Vector2(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight )
			);
	
		};
	
		/**************************************************************
		 *	Cubic Bezier curve
		 **************************************************************/
	
		function CubicBezierCurve( v0, v1, v2, v3 ) {
	
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
	
		}
	
		CubicBezierCurve.prototype = Object.create( Curve.prototype );
		CubicBezierCurve.prototype.constructor = CubicBezierCurve;
	
		CubicBezierCurve.prototype.getPoint = function ( t ) {
	
			var b3 = ShapeUtils.b3;
	
			return new Vector2(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
			);
	
		};
	
		CubicBezierCurve.prototype.getTangent = function( t ) {
	
			var tangentCubicBezier = CurveUtils.tangentCubicBezier;
	
			return new Vector2(
				tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
			).normalize();
	
		};
	
		/**************************************************************
		 *	Quadratic Bezier curve
		 **************************************************************/
	
	
		function QuadraticBezierCurve( v0, v1, v2 ) {
	
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
	
		}
	
		QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
	
	
		QuadraticBezierCurve.prototype.getPoint = function ( t ) {
	
			var b2 = ShapeUtils.b2;
	
			return new Vector2(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y )
			);
	
		};
	
	
		QuadraticBezierCurve.prototype.getTangent = function( t ) {
	
			var tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;
	
			return new Vector2(
				tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
				tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
			).normalize();
	
		};
	
		var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {
	
			fromPoints: function ( vectors ) {
	
				this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );
	
				for ( var i = 1, l = vectors.length; i < l; i ++ ) {
	
					this.lineTo( vectors[ i ].x, vectors[ i ].y );
	
				}
	
			},
	
			moveTo: function ( x, y ) {
	
				this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
	
			},
	
			lineTo: function ( x, y ) {
	
				var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
				this.curves.push( curve );
	
				this.currentPoint.set( x, y );
	
			},
	
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	
				var curve = new QuadraticBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCPx, aCPy ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
			},
	
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
				var curve = new CubicBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCP1x, aCP1y ),
					new Vector2( aCP2x, aCP2y ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
			},
	
			splineThru: function ( pts /*Array of Vector*/ ) {
	
				var npts = [ this.currentPoint.clone() ].concat( pts );
	
				var curve = new SplineCurve( npts );
				this.curves.push( curve );
	
				this.currentPoint.copy( pts[ pts.length - 1 ] );
	
			},
	
			arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absarc( aX + x0, aY + y0, aRadius,
					aStartAngle, aEndAngle, aClockwise );
	
			},
	
			absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
			},
	
			ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
			},
	
			absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
				if ( this.curves.length > 0 ) {
	
					// if a previous curve is present, attempt to join
					var firstPoint = curve.getPoint( 0 );
	
					if ( ! firstPoint.equals( this.currentPoint ) ) {
	
						this.lineTo( firstPoint.x, firstPoint.y );
	
					}
	
				}
	
				this.curves.push( curve );
	
				var lastPoint = curve.getPoint( 1 );
				this.currentPoint.copy( lastPoint );
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Defines a 2d shape plane using paths.
		 **/
	
		// STEP 1 Create a path.
		// STEP 2 Turn path into shape.
		// STEP 3 ExtrudeGeometry takes in Shape/Shapes
		// STEP 3a - Extract points from each shape, turn to vertices
		// STEP 3b - Triangulate each shape, add faces.
	
		function Shape() {
	
			Path.apply( this, arguments );
	
			this.holes = [];
	
		}
	
		Shape.prototype = Object.assign( Object.create( PathPrototype ), {
	
			constructor: Shape,
	
			getPointsHoles: function ( divisions ) {
	
				var holesPts = [];
	
				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
	
					holesPts[ i ] = this.holes[ i ].getPoints( divisions );
	
				}
	
				return holesPts;
	
			},
	
			// Get points of shape and holes (keypoints based on segments parameter)
	
			extractAllPoints: function ( divisions ) {
	
				return {
	
					shape: this.getPoints( divisions ),
					holes: this.getPointsHoles( divisions )
	
				};
	
			},
	
			extractPoints: function ( divisions ) {
	
				return this.extractAllPoints( divisions );
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Creates free form 2d path using series of points, lines or curves.
		 *
		 **/
	
		function Path( points ) {
	
			CurvePath.call( this );
			this.currentPoint = new Vector2();
	
			if ( points ) {
	
				this.fromPoints( points );
	
			}
	
		}
	
		Path.prototype = PathPrototype;
		PathPrototype.constructor = Path;
	
	
		// minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
		function ShapePath() {
			this.subPaths = [];
			this.currentPath = null;
		}
	
		ShapePath.prototype = {
			moveTo: function ( x, y ) {
				this.currentPath = new Path();
				this.subPaths.push(this.currentPath);
				this.currentPath.moveTo( x, y );
			},
			lineTo: function ( x, y ) {
				this.currentPath.lineTo( x, y );
			},
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
				this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
			},
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
				this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
			},
			splineThru: function ( pts ) {
				this.currentPath.splineThru( pts );
			},
	
			toShapes: function ( isCCW, noHoles ) {
	
				function toShapesNoHoles( inSubpaths ) {
	
					var shapes = [];
	
					for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
	
						var tmpPath = inSubpaths[ i ];
	
						var tmpShape = new Shape();
						tmpShape.curves = tmpPath.curves;
	
						shapes.push( tmpShape );
	
					}
	
					return shapes;
	
				}
	
				function isPointInsidePolygon( inPt, inPolygon ) {
	
					var polyLen = inPolygon.length;
	
					// inPt on polygon contour => immediate success    or
					// toggling of inside/outside at every single! intersection point of an edge
					//  with the horizontal line through inPt, left of inPt
					//  not counting lowerY endpoints of edges and whole edges on that line
					var inside = false;
					for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
	
						var edgeLowPt  = inPolygon[ p ];
						var edgeHighPt = inPolygon[ q ];
	
						var edgeDx = edgeHighPt.x - edgeLowPt.x;
						var edgeDy = edgeHighPt.y - edgeLowPt.y;
	
						if ( Math.abs( edgeDy ) > Number.EPSILON ) {
	
							// not parallel
							if ( edgeDy < 0 ) {
	
								edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
								edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
	
							}
							if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
	
							if ( inPt.y === edgeLowPt.y ) {
	
								if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
								// continue;				// no intersection or edgeLowPt => doesn't count !!!
	
							} else {
	
								var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
								if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
								if ( perpEdge < 0 ) 				continue;
								inside = ! inside;		// true intersection left of inPt
	
							}
	
						} else {
	
							// parallel or collinear
							if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
							// edge lies on the same horizontal line as inPt
							if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
								 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
							// continue;
	
						}
	
					}
	
					return	inside;
	
				}
	
				var isClockWise = ShapeUtils.isClockWise;
	
				var subPaths = this.subPaths;
				if ( subPaths.length === 0 ) return [];
	
				if ( noHoles === true )	return	toShapesNoHoles( subPaths );
	
	
				var solid, tmpPath, tmpShape, shapes = [];
	
				if ( subPaths.length === 1 ) {
	
					tmpPath = subPaths[ 0 ];
					tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
					return shapes;
	
				}
	
				var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
				holesFirst = isCCW ? ! holesFirst : holesFirst;
	
				// console.log("Holes first", holesFirst);
	
				var betterShapeHoles = [];
				var newShapes = [];
				var newShapeHoles = [];
				var mainIdx = 0;
				var tmpPoints;
	
				newShapes[ mainIdx ] = undefined;
				newShapeHoles[ mainIdx ] = [];
	
				for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
	
					tmpPath = subPaths[ i ];
					tmpPoints = tmpPath.getPoints();
					solid = isClockWise( tmpPoints );
					solid = isCCW ? ! solid : solid;
	
					if ( solid ) {
	
						if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
	
						newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
						newShapes[ mainIdx ].s.curves = tmpPath.curves;
	
						if ( holesFirst )	mainIdx ++;
						newShapeHoles[ mainIdx ] = [];
	
						//console.log('cw', i);
	
					} else {
	
						newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
	
						//console.log('ccw', i);
	
					}
	
				}
	
				// only Holes? -> probably all Shapes with wrong orientation
				if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
	
	
				if ( newShapes.length > 1 ) {
	
					var ambiguous = false;
					var toChange = [];
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						betterShapeHoles[ sIdx ] = [];
	
					}
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						var sho = newShapeHoles[ sIdx ];
	
						for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
	
							var ho = sho[ hIdx ];
							var hole_unassigned = true;
	
							for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
	
								if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
	
									if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
									if ( hole_unassigned ) {
	
										hole_unassigned = false;
										betterShapeHoles[ s2Idx ].push( ho );
	
									} else {
	
										ambiguous = true;
	
									}
	
								}
	
							}
							if ( hole_unassigned ) {
	
								betterShapeHoles[ sIdx ].push( ho );
	
							}
	
						}
	
					}
					// console.log("ambiguous: ", ambiguous);
					if ( toChange.length > 0 ) {
	
						// console.log("to change: ", toChange);
						if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
	
					}
	
				}
	
				var tmpHoles;
	
				for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
	
					tmpShape = newShapes[ i ].s;
					shapes.push( tmpShape );
					tmpHoles = newShapeHoles[ i ];
	
					for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
	
						tmpShape.holes.push( tmpHoles[ j ].h );
	
					}
	
				}
	
				//console.log("shape", shapes);
	
				return shapes;
	
			}
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Font( data ) {
	
			this.data = data;
	
		}
	
		Object.assign( Font.prototype, {
	
			isFont: true,
	
			generateShapes: function ( text, size, divisions ) {
	
				function createPaths( text ) {
	
					var chars = String( text ).split( '' );
					var scale = size / data.resolution;
					var offset = 0;
	
					var paths = [];
	
					for ( var i = 0; i < chars.length; i ++ ) {
	
						var ret = createPath( chars[ i ], scale, offset );
						offset += ret.offset;
	
						paths.push( ret.path );
	
					}
	
					return paths;
	
				}
	
				function createPath( c, scale, offset ) {
	
					var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];
	
					if ( ! glyph ) return;
	
					var path = new ShapePath();
	
					var pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;
					var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;
	
					if ( glyph.o ) {
	
						var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
	
						for ( var i = 0, l = outline.length; i < l; ) {
	
							var action = outline[ i ++ ];
	
							switch ( action ) {
	
								case 'm': // moveTo
	
									x = outline[ i ++ ] * scale + offset;
									y = outline[ i ++ ] * scale;
	
									path.moveTo( x, y );
	
									break;
	
								case 'l': // lineTo
	
									x = outline[ i ++ ] * scale + offset;
									y = outline[ i ++ ] * scale;
	
									path.lineTo( x, y );
	
									break;
	
								case 'q': // quadraticCurveTo
	
									cpx  = outline[ i ++ ] * scale + offset;
									cpy  = outline[ i ++ ] * scale;
									cpx1 = outline[ i ++ ] * scale + offset;
									cpy1 = outline[ i ++ ] * scale;
	
									path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
	
									laste = pts[ pts.length - 1 ];
	
									if ( laste ) {
	
										cpx0 = laste.x;
										cpy0 = laste.y;
	
										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {
	
											var t = i2 / divisions;
											b2( t, cpx0, cpx1, cpx );
											b2( t, cpy0, cpy1, cpy );
	
										}
	
									}
	
									break;
	
								case 'b': // bezierCurveTo
	
									cpx  = outline[ i ++ ] * scale + offset;
									cpy  = outline[ i ++ ] * scale;
									cpx1 = outline[ i ++ ] * scale + offset;
									cpy1 = outline[ i ++ ] * scale;
									cpx2 = outline[ i ++ ] * scale + offset;
									cpy2 = outline[ i ++ ] * scale;
	
									path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
	
									laste = pts[ pts.length - 1 ];
	
									if ( laste ) {
	
										cpx0 = laste.x;
										cpy0 = laste.y;
	
										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {
	
											var t = i2 / divisions;
											b3( t, cpx0, cpx1, cpx2, cpx );
											b3( t, cpy0, cpy1, cpy2, cpy );
	
										}
	
									}
	
									break;
	
							}
	
						}
	
					}
	
					return { offset: glyph.ha * scale, path: path };
	
				}
	
				//
	
				if ( size === undefined ) size = 100;
				if ( divisions === undefined ) divisions = 4;
	
				var data = this.data;
	
				var paths = createPaths( text );
				var shapes = [];
	
				for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
	
					Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
	
				}
	
				return shapes;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function FontLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( FontLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new XHRLoader( this.manager );
				loader.load( url, function ( text ) {
	
					var json;
	
					try {
	
						json = JSON.parse( text );
	
					} catch ( e ) {
	
						console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
						json = JSON.parse( text.substring( 65, text.length - 2 ) );
	
					}
	
					var font = scope.parse( json );
	
					if ( onLoad ) onLoad( font );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				return new Font( json );
	
			}
	
		} );
	
		var context;
	
		function getAudioContext() {
	
			if ( context === undefined ) {
	
				context = new ( window.AudioContext || window.webkitAudioContext )();
	
			}
	
			return context;
	
		}
	
		/**
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function AudioLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( AudioLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var loader = new XHRLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.load( url, function ( buffer ) {
	
					var context = getAudioContext();
	
					context.decodeAudioData( buffer, function ( audioBuffer ) {
	
						onLoad( audioBuffer );
	
					} );
	
				}, onProgress, onError );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function StereoCamera() {
	
			this.type = 'StereoCamera';
	
			this.aspect = 1;
	
			this.eyeSep = 0.064;
	
			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable( 1 );
			this.cameraL.matrixAutoUpdate = false;
	
			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable( 2 );
			this.cameraR.matrixAutoUpdate = false;
	
		}
	
		Object.assign( StereoCamera.prototype, {
	
			update: ( function () {
	
				var instance, focus, fov, aspect, near, far, zoom;
	
				var eyeRight = new Matrix4();
				var eyeLeft = new Matrix4();
	
				return function update( camera ) {
	
					var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
														aspect !== camera.aspect * this.aspect || near !== camera.near ||
														far !== camera.far || zoom !== camera.zoom;
	
					if ( needsUpdate ) {
	
						instance = this;
						focus = camera.focus;
						fov = camera.fov;
						aspect = camera.aspect * this.aspect;
						near = camera.near;
						far = camera.far;
						zoom = camera.zoom;
	
						// Off-axis stereoscopic effect based on
						// http://paulbourke.net/stereographics/stereorender/
	
						var projectionMatrix = camera.projectionMatrix.clone();
						var eyeSep = this.eyeSep / 2;
						var eyeSepOnProjection = eyeSep * near / focus;
						var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
						var xmin, xmax;
	
						// translate xOffset
	
						eyeLeft.elements[ 12 ] = - eyeSep;
						eyeRight.elements[ 12 ] = eyeSep;
	
						// for left eye
	
						xmin = - ymax * aspect + eyeSepOnProjection;
						xmax = ymax * aspect + eyeSepOnProjection;
	
						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
						this.cameraL.projectionMatrix.copy( projectionMatrix );
	
						// for right eye
	
						xmin = - ymax * aspect - eyeSepOnProjection;
						xmax = ymax * aspect - eyeSepOnProjection;
	
						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
						this.cameraR.projectionMatrix.copy( projectionMatrix );
	
					}
	
					this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
					this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );
	
				};
	
			} )()
	
		} );
	
		/**
		 * Camera for rendering cube maps
		 *	- renders scene into axis-aligned cube
		 *
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function CubeCamera( near, far, cubeResolution ) {
	
			Object3D.call( this );
	
			this.type = 'CubeCamera';
	
			var fov = 90, aspect = 1;
	
			var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
			this.add( cameraPX );
	
			var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
			this.add( cameraNX );
	
			var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
			this.add( cameraPY );
	
			var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
			this.add( cameraNY );
	
			var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
			this.add( cameraPZ );
	
			var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
			this.add( cameraNZ );
	
			var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
	
			this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
	
			this.updateCubeMap = function ( renderer, scene ) {
	
				if ( this.parent === null ) this.updateMatrixWorld();
	
				var renderTarget = this.renderTarget;
				var generateMipmaps = renderTarget.texture.generateMipmaps;
	
				renderTarget.texture.generateMipmaps = false;
	
				renderTarget.activeCubeFace = 0;
				renderer.render( scene, cameraPX, renderTarget );
	
				renderTarget.activeCubeFace = 1;
				renderer.render( scene, cameraNX, renderTarget );
	
				renderTarget.activeCubeFace = 2;
				renderer.render( scene, cameraPY, renderTarget );
	
				renderTarget.activeCubeFace = 3;
				renderer.render( scene, cameraNY, renderTarget );
	
				renderTarget.activeCubeFace = 4;
				renderer.render( scene, cameraPZ, renderTarget );
	
				renderTarget.texture.generateMipmaps = generateMipmaps;
	
				renderTarget.activeCubeFace = 5;
				renderer.render( scene, cameraNZ, renderTarget );
	
				renderer.setRenderTarget( null );
	
			};
	
		}
	
		CubeCamera.prototype = Object.create( Object3D.prototype );
		CubeCamera.prototype.constructor = CubeCamera;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AudioListener() {
	
			Object3D.call( this );
	
			this.type = 'AudioListener';
	
			this.context = getAudioContext();
	
			this.gain = this.context.createGain();
			this.gain.connect( this.context.destination );
	
			this.filter = null;
	
		}
	
		AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: AudioListener,
	
			getInput: function () {
	
				return this.gain;
	
			},
	
			removeFilter: function ( ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
					this.gain.connect( this.context.destination );
					this.filter = null;
	
				}
	
			},
	
			getFilter: function () {
	
				return this.filter;
	
			},
	
			setFilter: function ( value ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
	
				} else {
	
					this.gain.disconnect( this.context.destination );
	
				}
	
				this.filter = value;
				this.gain.connect( this.filter );
				this.filter.connect( this.context.destination );
	
			},
	
			getMasterVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
			setMasterVolume: function ( value ) {
	
				this.gain.gain.value = value;
	
			},
	
			updateMatrixWorld: ( function () {
	
				var position = new Vector3();
				var quaternion = new Quaternion();
				var scale = new Vector3();
	
				var orientation = new Vector3();
	
				return function updateMatrixWorld( force ) {
	
					Object3D.prototype.updateMatrixWorld.call( this, force );
	
					var listener = this.context.listener;
					var up = this.up;
	
					this.matrixWorld.decompose( position, quaternion, scale );
	
					orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
					listener.setPosition( position.x, position.y, position.z );
					listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );
	
				};
	
			} )()
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function Audio( listener ) {
	
			Object3D.call( this );
	
			this.type = 'Audio';
	
			this.context = listener.context;
			this.source = this.context.createBufferSource();
			this.source.onended = this.onEnded.bind( this );
	
			this.gain = this.context.createGain();
			this.gain.connect( listener.getInput() );
	
			this.autoplay = false;
	
			this.startTime = 0;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.sourceType = 'empty';
	
			this.filters = [];
	
		}
	
		Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Audio,
	
			getOutput: function () {
	
				return this.gain;
	
			},
	
			setNodeSource: function ( audioNode ) {
	
				this.hasPlaybackControl = false;
				this.sourceType = 'audioNode';
				this.source = audioNode;
				this.connect();
	
				return this;
	
			},
	
			setBuffer: function ( audioBuffer ) {
	
				this.source.buffer = audioBuffer;
				this.sourceType = 'buffer';
	
				if ( this.autoplay ) this.play();
	
				return this;
	
			},
	
			play: function () {
	
				if ( this.isPlaying === true ) {
	
					console.warn( 'THREE.Audio: Audio is already playing.' );
					return;
	
				}
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				var source = this.context.createBufferSource();
	
				source.buffer = this.source.buffer;
				source.loop = this.source.loop;
				source.onended = this.source.onended;
				source.start( 0, this.startTime );
				source.playbackRate.value = this.playbackRate;
	
				this.isPlaying = true;
	
				this.source = source;
	
				return this.connect();
	
			},
	
			pause: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.source.stop();
				this.startTime = this.context.currentTime;
				this.isPlaying = false;
	
				return this;
	
			},
	
			stop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.source.stop();
				this.startTime = 0;
				this.isPlaying = false;
	
				return this;
	
			},
	
			connect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.connect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].connect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
	
				} else {
	
					this.source.connect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			disconnect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.disconnect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].disconnect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
	
				} else {
	
					this.source.disconnect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			getFilters: function () {
	
				return this.filters;
	
			},
	
			setFilters: function ( value ) {
	
				if ( ! value ) value = [];
	
				if ( this.isPlaying === true ) {
	
					this.disconnect();
					this.filters = value;
					this.connect();
	
				} else {
	
					this.filters = value;
	
				}
	
				return this;
	
			},
	
			getFilter: function () {
	
				return this.getFilters()[ 0 ];
	
			},
	
			setFilter: function ( filter ) {
	
				return this.setFilters( filter ? [ filter ] : [] );
	
			},
	
			setPlaybackRate: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.playbackRate = value;
	
				if ( this.isPlaying === true ) {
	
					this.source.playbackRate.value = this.playbackRate;
	
				}
	
				return this;
	
			},
	
			getPlaybackRate: function () {
	
				return this.playbackRate;
	
			},
	
			onEnded: function () {
	
				this.isPlaying = false;
	
			},
	
			getLoop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return false;
	
				}
	
				return this.source.loop;
	
			},
	
			setLoop: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.source.loop = value;
	
			},
	
			getVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
	
			setVolume: function ( value ) {
	
				this.gain.gain.value = value;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function PositionalAudio( listener ) {
	
			Audio.call( this, listener );
	
			this.panner = this.context.createPanner();
			this.panner.connect( this.gain );
	
		}
	
		PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
	
			constructor: PositionalAudio,
	
			getOutput: function () {
	
				return this.panner;
	
			},
	
			getRefDistance: function () {
	
				return this.panner.refDistance;
	
			},
	
			setRefDistance: function ( value ) {
	
				this.panner.refDistance = value;
	
			},
	
			getRolloffFactor: function () {
	
				return this.panner.rolloffFactor;
	
			},
	
			setRolloffFactor: function ( value ) {
	
				this.panner.rolloffFactor = value;
	
			},
	
			getDistanceModel: function () {
	
				return this.panner.distanceModel;
	
			},
	
			setDistanceModel: function ( value ) {
	
				this.panner.distanceModel = value;
	
			},
	
			getMaxDistance: function () {
	
				return this.panner.maxDistance;
	
			},
	
			setMaxDistance: function ( value ) {
	
				this.panner.maxDistance = value;
	
			},
	
			updateMatrixWorld: ( function () {
	
				var position = new Vector3();
	
				return function updateMatrixWorld( force ) {
	
					Object3D.prototype.updateMatrixWorld.call( this, force );
	
					position.setFromMatrixPosition( this.matrixWorld );
	
					this.panner.setPosition( position.x, position.y, position.z );
	
				};
	
			} )()
	
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AudioAnalyser( audio, fftSize ) {
	
			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
	
			this.data = new Uint8Array( this.analyser.frequencyBinCount );
	
			audio.getOutput().connect( this.analyser );
	
		}
	
		Object.assign( AudioAnalyser.prototype, {
	
			getFrequencyData: function () {
	
				this.analyser.getByteFrequencyData( this.data );
	
				return this.data;
	
			},
	
			getAverageFrequency: function () {
	
				var value = 0, data = this.getFrequencyData();
	
				for ( var i = 0; i < data.length; i ++ ) {
	
					value += data[ i ];
	
				}
	
				return value / data.length;
	
			}
	
		} );
	
		/**
		 *
		 * Buffered scene graph property that allows weighted accumulation.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function PropertyMixer( binding, typeName, valueSize ) {
	
			this.binding = binding;
			this.valueSize = valueSize;
	
			var bufferType = Float64Array,
				mixFunction;
	
			switch ( typeName ) {
	
				case 'quaternion':			mixFunction = this._slerp;		break;
	
				case 'string':
				case 'bool':
	
					bufferType = Array,		mixFunction = this._select;		break;
	
				default:					mixFunction = this._lerp;
	
			}
	
			this.buffer = new bufferType( valueSize * 4 );
			// layout: [ incoming | accu0 | accu1 | orig ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property
	
			this._mixBufferRegion = mixFunction;
	
			this.cumulativeWeight = 0;
	
			this.useCount = 0;
			this.referenceCount = 0;
	
		}
	
		PropertyMixer.prototype = {
	
			constructor: PropertyMixer,
	
			// accumulate data in the 'incoming' region into 'accu<i>'
			accumulate: function( accuIndex, weight ) {
	
				// note: happily accumulating nothing when weight = 0, the caller knows
				// the weight and shouldn't have made the call in the first place
	
				var buffer = this.buffer,
					stride = this.valueSize,
					offset = accuIndex * stride + stride,
	
					currentWeight = this.cumulativeWeight;
	
				if ( currentWeight === 0 ) {
	
					// accuN := incoming * weight
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ offset + i ] = buffer[ i ];
	
					}
	
					currentWeight = weight;
	
				} else {
	
					// accuN := accuN + incoming * weight
	
					currentWeight += weight;
					var mix = weight / currentWeight;
					this._mixBufferRegion( buffer, offset, 0, mix, stride );
	
				}
	
				this.cumulativeWeight = currentWeight;
	
			},
	
			// apply the state of 'accu<i>' to the binding when accus differ
			apply: function( accuIndex ) {
	
				var stride = this.valueSize,
					buffer = this.buffer,
					offset = accuIndex * stride + stride,
	
					weight = this.cumulativeWeight,
	
					binding = this.binding;
	
				this.cumulativeWeight = 0;
	
				if ( weight < 1 ) {
	
					// accuN := accuN + original * ( 1 - cumulativeWeight )
	
					var originalValueOffset = stride * 3;
	
					this._mixBufferRegion(
							buffer, offset, originalValueOffset, 1 - weight, stride );
	
				}
	
				for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
	
					if ( buffer[ i ] !== buffer[ i + stride ] ) {
	
						// value has changed -> update scene graph
	
						binding.setValue( buffer, offset );
						break;
	
					}
	
				}
	
			},
	
			// remember the state of the bound property and copy it to both accus
			saveOriginalState: function() {
	
				var binding = this.binding;
	
				var buffer = this.buffer,
					stride = this.valueSize,
	
					originalValueOffset = stride * 3;
	
				binding.getValue( buffer, originalValueOffset );
	
				// accu[0..1] := orig -- initially detect changes against the original
				for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
	
					buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
	
				}
	
				this.cumulativeWeight = 0;
	
			},
	
			// apply the state previously taken via 'saveOriginalState' to the binding
			restoreOriginalState: function() {
	
				var originalValueOffset = this.valueSize * 3;
				this.binding.setValue( this.buffer, originalValueOffset );
	
			},
	
	
			// mix functions
	
			_select: function( buffer, dstOffset, srcOffset, t, stride ) {
	
				if ( t >= 0.5 ) {
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
	
					}
	
				}
	
			},
	
			_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {
	
				Quaternion.slerpFlat( buffer, dstOffset,
						buffer, dstOffset, buffer, srcOffset, t );
	
			},
	
			_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {
	
				var s = 1 - t;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					var j = dstOffset + i;
	
					buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
	
				}
	
			}
	
		};
	
		/**
		 *
		 * A reference to a real property in the scene graph.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function PropertyBinding( rootNode, path, parsedPath ) {
	
			this.path = path;
			this.parsedPath = parsedPath ||
					PropertyBinding.parseTrackName( path );
	
			this.node = PropertyBinding.findNode(
					rootNode, this.parsedPath.nodeName ) || rootNode;
	
			this.rootNode = rootNode;
	
		}
	
		PropertyBinding.prototype = {
	
			constructor: PropertyBinding,
	
			getValue: function getValue_unbound( targetArray, offset ) {
	
				this.bind();
				this.getValue( targetArray, offset );
	
				// Note: This class uses a State pattern on a per-method basis:
				// 'bind' sets 'this.getValue' / 'setValue' and shadows the
				// prototype version of these methods with one that represents
				// the bound state. When the property is not found, the methods
				// become no-ops.
	
			},
	
			setValue: function getValue_unbound( sourceArray, offset ) {
	
				this.bind();
				this.setValue( sourceArray, offset );
	
			},
	
			// create getter / setter pair for a property in the scene graph
			bind: function() {
	
				var targetObject = this.node,
					parsedPath = this.parsedPath,
	
					objectName = parsedPath.objectName,
					propertyName = parsedPath.propertyName,
					propertyIndex = parsedPath.propertyIndex;
	
				if ( ! targetObject ) {
	
					targetObject = PropertyBinding.findNode(
							this.rootNode, parsedPath.nodeName ) || this.rootNode;
	
					this.node = targetObject;
	
				}
	
				// set fail state so we can just 'return' on error
				this.getValue = this._getValue_unavailable;
				this.setValue = this._setValue_unavailable;
	
		 		// ensure there is a value node
				if ( ! targetObject ) {
	
					console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
					return;
	
				}
	
				if ( objectName ) {
	
					var objectIndex = parsedPath.objectIndex;
	
					// special cases were we need to reach deeper into the hierarchy to get the face materials....
					switch ( objectName ) {
	
						case 'materials':
	
							if ( ! targetObject.material ) {
	
								console.error( '  can not bind to material as node does not have a material', this );
								return;
	
							}
	
							if ( ! targetObject.material.materials ) {
	
								console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
								return;
	
							}
	
							targetObject = targetObject.material.materials;
	
							break;
	
						case 'bones':
	
							if ( ! targetObject.skeleton ) {
	
								console.error( '  can not bind to bones as node does not have a skeleton', this );
								return;
	
							}
	
							// potential future optimization: skip this if propertyIndex is already an integer
							// and convert the integer string to a true integer.
	
							targetObject = targetObject.skeleton.bones;
	
							// support resolving morphTarget names into indices.
							for ( var i = 0; i < targetObject.length; i ++ ) {
	
								if ( targetObject[ i ].name === objectIndex ) {
	
									objectIndex = i;
									break;
	
								}
	
							}
	
							break;
	
						default:
	
							if ( targetObject[ objectName ] === undefined ) {
	
								console.error( '  can not bind to objectName of node, undefined', this );
								return;
	
							}
	
							targetObject = targetObject[ objectName ];
	
					}
	
	
					if ( objectIndex !== undefined ) {
	
						if ( targetObject[ objectIndex ] === undefined ) {
	
							console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
							return;
	
						}
	
						targetObject = targetObject[ objectIndex ];
	
					}
	
				}
	
				// resolve property
				var nodeProperty = targetObject[ propertyName ];
	
				if ( nodeProperty === undefined ) {
	
					var nodeName = parsedPath.nodeName;
	
					console.error( "  trying to update property for track: " + nodeName +
							'.' + propertyName + " but it wasn't found.", targetObject );
					return;
	
				}
	
				// determine versioning scheme
				var versioning = this.Versioning.None;
	
				if ( targetObject.needsUpdate !== undefined ) { // material
	
					versioning = this.Versioning.NeedsUpdate;
					this.targetObject = targetObject;
	
				} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
	
					versioning = this.Versioning.MatrixWorldNeedsUpdate;
					this.targetObject = targetObject;
	
				}
	
				// determine how the property gets bound
				var bindingType = this.BindingType.Direct;
	
				if ( propertyIndex !== undefined ) {
					// access a sub element of the property array (only primitives are supported right now)
	
					if ( propertyName === "morphTargetInfluences" ) {
						// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
	
						// support resolving morphTarget names into indices.
						if ( ! targetObject.geometry ) {
	
							console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
							return;
	
						}
	
						if ( ! targetObject.geometry.morphTargets ) {
	
							console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
							return;
	
						}
	
						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
	
							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
	
								propertyIndex = i;
								break;
	
							}
	
						}
	
					}
	
					bindingType = this.BindingType.ArrayElement;
	
					this.resolvedProperty = nodeProperty;
					this.propertyIndex = propertyIndex;
	
				} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
					// must use copy for Object3D.Euler/Quaternion
	
					bindingType = this.BindingType.HasFromToArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else if ( nodeProperty.length !== undefined ) {
	
					bindingType = this.BindingType.EntireArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else {
	
					this.propertyName = propertyName;
	
				}
	
				// select getter / setter
				this.getValue = this.GetterByBindingType[ bindingType ];
				this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
	
			},
	
			unbind: function() {
	
				this.node = null;
	
				// back to the prototype version of getValue / setValue
				// note: avoiding to mutate the shape of 'this' via 'delete'
				this.getValue = this._getValue_unbound;
				this.setValue = this._setValue_unbound;
	
			}
	
		};
	
		Object.assign( PropertyBinding.prototype, { // prototype, continued
	
			// these are used to "bind" a nonexistent property
			_getValue_unavailable: function() {},
			_setValue_unavailable: function() {},
	
			// initial state of these methods that calls 'bind'
			_getValue_unbound: PropertyBinding.prototype.getValue,
			_setValue_unbound: PropertyBinding.prototype.setValue,
	
			BindingType: {
				Direct: 0,
				EntireArray: 1,
				ArrayElement: 2,
				HasFromToArray: 3
			},
	
			Versioning: {
				None: 0,
				NeedsUpdate: 1,
				MatrixWorldNeedsUpdate: 2
			},
	
			GetterByBindingType: [
	
				function getValue_direct( buffer, offset ) {
	
					buffer[ offset ] = this.node[ this.propertyName ];
	
				},
	
				function getValue_array( buffer, offset ) {
	
					var source = this.resolvedProperty;
	
					for ( var i = 0, n = source.length; i !== n; ++ i ) {
	
						buffer[ offset ++ ] = source[ i ];
	
					}
	
				},
	
				function getValue_arrayElement( buffer, offset ) {
	
					buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
	
				},
	
				function getValue_toArray( buffer, offset ) {
	
					this.resolvedProperty.toArray( buffer, offset );
	
				}
	
			],
	
			SetterByBindingTypeAndVersioning: [
	
				[
					// Direct
	
					function setValue_direct( buffer, offset ) {
	
						this.node[ this.propertyName ] = buffer[ offset ];
	
					},
	
					function setValue_direct_setNeedsUpdate( buffer, offset ) {
	
						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// EntireArray
	
					function setValue_array( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
					},
	
					function setValue_array_setNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// ArrayElement
	
					function setValue_arrayElement( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
	
					},
	
					function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// HasToFromArray
	
					function setValue_fromArray( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
	
					},
	
					function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				]
	
			]
	
		} );
	
		PropertyBinding.Composite =
				function( targetGroup, path, optionalParsedPath ) {
	
			var parsedPath = optionalParsedPath ||
					PropertyBinding.parseTrackName( path );
	
			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_( path, parsedPath );
	
		};
	
		PropertyBinding.Composite.prototype = {
	
			constructor: PropertyBinding.Composite,
	
			getValue: function( array, offset ) {
	
				this.bind(); // bind all binding
	
				var firstValidIndex = this._targetGroup.nCachedObjects_,
					binding = this._bindings[ firstValidIndex ];
	
				// and only call .getValue on the first
				if ( binding !== undefined ) binding.getValue( array, offset );
	
			},
	
			setValue: function( array, offset ) {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].setValue( array, offset );
	
				}
	
			},
	
			bind: function() {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].bind();
	
				}
	
			},
	
			unbind: function() {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].unbind();
	
				}
	
			}
	
		};
	
		PropertyBinding.create = function( root, path, parsedPath ) {
	
			if ( ! ( (root && root.isAnimationObjectGroup) ) ) {
	
				return new PropertyBinding( root, path, parsedPath );
	
			} else {
	
				return new PropertyBinding.Composite( root, path, parsedPath );
	
			}
	
		};
	
		PropertyBinding.parseTrackName = function( trackName ) {
	
			// matches strings in the form of:
			//    nodeName.property
			//    nodeName.property[accessor]
			//    nodeName.material.property[accessor]
			//    uuid.property[accessor]
			//    uuid.objectName[objectIndex].propertyName[propertyIndex]
			//    parentName/nodeName.property
			//    parentName/parentName/nodeName.property[index]
			//    .bone[Armature.DEF_cog].position
			//    scene:helium_balloon_model:helium_balloon_model.position
			// created and tested via https://regex101.com/#javascript
	
			var re = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/;
			var matches = re.exec( trackName );
	
			if ( ! matches ) {
	
				throw new Error( "cannot parse trackName at all: " + trackName );
	
			}
	
			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 2 ], 	// allowed to be null, specified root node.
				objectName: matches[ 3 ],
				objectIndex: matches[ 4 ],
				propertyName: matches[ 5 ],
				propertyIndex: matches[ 6 ]	// allowed to be null, specifies that the whole property is set.
			};
	
			if ( results.propertyName === null || results.propertyName.length === 0 ) {
	
				throw new Error( "can not parse propertyName from trackName: " + trackName );
	
			}
	
			return results;
	
		};
	
		PropertyBinding.findNode = function( root, nodeName ) {
	
			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {
	
				return root;
	
			}
	
			// search into skeleton bones.
			if ( root.skeleton ) {
	
				var searchSkeleton = function( skeleton ) {
	
					for( var i = 0; i < skeleton.bones.length; i ++ ) {
	
						var bone = skeleton.bones[ i ];
	
						if ( bone.name === nodeName ) {
	
							return bone;
	
						}
					}
	
					return null;
	
				};
	
				var bone = searchSkeleton( root.skeleton );
	
				if ( bone ) {
	
					return bone;
	
				}
			}
	
			// search into node subtree.
			if ( root.children ) {
	
				var searchNodeSubtree = function( children ) {
	
					for( var i = 0; i < children.length; i ++ ) {
	
						var childNode = children[ i ];
	
						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
	
							return childNode;
	
						}
	
						var result = searchNodeSubtree( childNode.children );
	
						if ( result ) return result;
	
					}
	
					return null;
	
				};
	
				var subTreeNode = searchNodeSubtree( root.children );
	
				if ( subTreeNode ) {
	
					return subTreeNode;
	
				}
	
			}
	
			return null;
	
		};
	
		/**
		 *
		 * A group of objects that receives a shared animation state.
		 *
		 * Usage:
		 *
		 * 	-	Add objects you would otherwise pass as 'root' to the
		 * 		constructor or the .clipAction method of AnimationMixer.
		 *
		 * 	-	Instead pass this object as 'root'.
		 *
		 * 	-	You can also add and remove objects later when the mixer
		 * 		is running.
		 *
		 * Note:
		 *
		 *  	Objects of this class appear as one object to the mixer,
		 *  	so cache control of the individual objects must be done
		 *  	on the group.
		 *
		 * Limitation:
		 *
		 * 	- 	The animated properties must be compatible among the
		 * 		all objects in the group.
		 *
		 *  -	A single property can either be controlled through a
		 *  	target group or directly, but not both.
		 *
		 * @author tschw
		 */
	
		function AnimationObjectGroup( var_args ) {
	
			this.uuid = _Math.generateUUID();
	
			// cached objects followed by the active ones
			this._objects = Array.prototype.slice.call( arguments );
	
			this.nCachedObjects_ = 0;			// threshold
			// note: read by PropertyBinding.Composite
	
			var indices = {};
			this._indicesByUUID = indices;		// for bookkeeping
	
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
				indices[ arguments[ i ].uuid ] = i;
	
			}
	
			this._paths = [];					// inside: string
			this._parsedPaths = [];				// inside: { we don't care, here }
			this._bindings = []; 				// inside: Array< PropertyBinding >
			this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays
	
			var scope = this;
	
			this.stats = {
	
				objects: {
					get total() { return scope._objects.length; },
					get inUse() { return this.total - scope.nCachedObjects_;  }
				},
	
				get bindingsPerObject() { return scope._bindings.length; }
	
			};
	
		}
	
		AnimationObjectGroup.prototype = {
	
			constructor: AnimationObjectGroup,
	
			isAnimationObjectGroup: true,
	
			add: function( var_args ) {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index === undefined ) {
	
						// unknown object -> add it to the ACTIVE region
	
						index = nObjects ++;
						indicesByUUID[ uuid ] = index;
						objects.push( object );
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							bindings[ j ].push(
									new PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] ) );
	
						}
	
					} else if ( index < nCachedObjects ) {
	
						var knownObject = objects[ index ];
	
						// move existing object to the ACTIVE region
	
						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ];
	
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;
	
						indicesByUUID[ uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = lastCached;
	
							if ( binding === undefined ) {
	
								// since we do not bother to create new bindings
								// for objects that are cached, the binding may
								// or may not exist
	
								binding = new PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] );
	
							}
	
							bindingsForPath[ firstActiveIndex ] = binding;
	
						}
	
					} else if ( objects[ index ] !== knownObject) {
	
						console.error( "Different objects with the same UUID " +
								"detected. Clean the caches or recreate your " +
								"infrastructure when reloading scenes..." );
	
					} // else the object is already where we want it to be
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			remove: function( var_args ) {
	
				var objects = this._objects,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined && index >= nCachedObjects ) {
	
						// move existing object into the CACHED region
	
						var lastCachedIndex = nCachedObjects ++,
							firstActiveObject = objects[ lastCachedIndex ];
	
						indicesByUUID[ firstActiveObject.uuid ] = index;
						objects[ index ] = firstActiveObject;
	
						indicesByUUID[ uuid ] = lastCachedIndex;
						objects[ lastCachedIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								firstActive = bindingsForPath[ lastCachedIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = firstActive;
							bindingsForPath[ lastCachedIndex ] = binding;
	
						}
	
					}
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// remove & forget
			uncache: function( var_args ) {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined ) {
	
						delete indicesByUUID[ uuid ];
	
						if ( index < nCachedObjects ) {
	
							// object is cached, shrink the CACHED region
	
							var firstActiveIndex = -- nCachedObjects,
								lastCachedObject = objects[ firstActiveIndex ],
								lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							// last cached object takes this object's place
							indicesByUUID[ lastCachedObject.uuid ] = index;
							objects[ index ] = lastCachedObject;
	
							// last object goes to the activated slot and pop
							indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
							objects[ firstActiveIndex ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ],
									lastCached = bindingsForPath[ firstActiveIndex ],
									last = bindingsForPath[ lastIndex ];
	
								bindingsForPath[ index ] = lastCached;
								bindingsForPath[ firstActiveIndex ] = last;
								bindingsForPath.pop();
	
							}
	
						} else {
	
							// object is active, just swap with the last and pop
	
							var lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							indicesByUUID[ lastObject.uuid ] = index;
							objects[ index ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ];
	
								bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
								bindingsForPath.pop();
	
							}
	
						} // cached or active
	
					} // if object is known
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// Internal interface used by befriended PropertyBinding.Composite:
	
			subscribe_: function( path, parsedPath ) {
				// returns an array of bindings for the given path that is changed
				// according to the contained objects in the group
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ],
					bindings = this._bindings;
	
				if ( index !== undefined ) return bindings[ index ];
	
				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					bindingsForPath = new Array( nObjects );
	
				index = bindings.length;
	
				indicesByPath[ path ] = index;
	
				paths.push( path );
				parsedPaths.push( parsedPath );
				bindings.push( bindingsForPath );
	
				for ( var i = nCachedObjects,
						n = objects.length; i !== n; ++ i ) {
	
					var object = objects[ i ];
	
					bindingsForPath[ i ] =
							new PropertyBinding( object, path, parsedPath );
	
				}
	
				return bindingsForPath;
	
			},
	
			unsubscribe_: function( path ) {
				// tells the group to forget about a property path and no longer
				// update the array previously obtained with 'subscribe_'
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ];
	
				if ( index !== undefined ) {
	
					var paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						lastBindingsIndex = bindings.length - 1,
						lastBindings = bindings[ lastBindingsIndex ],
						lastBindingsPath = path[ lastBindingsIndex ];
	
					indicesByPath[ lastBindingsPath ] = index;
	
					bindings[ index ] = lastBindings;
					bindings.pop();
	
					parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
					parsedPaths.pop();
	
					paths[ index ] = paths[ lastBindingsIndex ];
					paths.pop();
	
				}
	
			}
	
		};
	
		/**
		 *
		 * Action provided by AnimationMixer for scheduling clip playback on specific
		 * objects.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 *
		 */
	
		function AnimationAction( mixer, clip, localRoot ) {
	
			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot || null;
	
			var tracks = clip.tracks,
				nTracks = tracks.length,
				interpolants = new Array( nTracks );
	
			var interpolantSettings = {
					endingStart: 	ZeroCurvatureEnding,
					endingEnd:		ZeroCurvatureEnding
			};
	
			for ( var i = 0; i !== nTracks; ++ i ) {
	
				var interpolant = tracks[ i ].createInterpolant( null );
				interpolants[ i ] = interpolant;
				interpolant.settings = interpolantSettings;
	
			}
	
			this._interpolantSettings = interpolantSettings;
	
			this._interpolants = interpolants;	// bound by the mixer
	
			// inside: PropertyMixer (managed by the mixer)
			this._propertyBindings = new Array( nTracks );
	
			this._cacheIndex = null;			// for the memory manager
			this._byClipCacheIndex = null;		// for the memory manager
	
			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;
	
			this.loop = LoopRepeat;
			this._loopCount = -1;
	
			// global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action
			this._startTime = null;
	
			// scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop
			this.time = 0;
	
			this.timeScale = 1;
			this._effectiveTimeScale = 1;
	
			this.weight = 1;
			this._effectiveWeight = 1;
	
			this.repetitions = Infinity; 		// no. of repetitions when looping
	
			this.paused = false;				// false -> zero effective time scale
			this.enabled = true;				// true -> zero effective weight
	
			this.clampWhenFinished 	= false;	// keep feeding the last frame?
	
			this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
			this.zeroSlopeAtEnd		= true;		// clips for start, loop and end
	
		}
	
		AnimationAction.prototype = {
	
			constructor: AnimationAction,
	
			// State & Scheduling
	
			play: function() {
	
				this._mixer._activateAction( this );
	
				return this;
	
			},
	
			stop: function() {
	
				this._mixer._deactivateAction( this );
	
				return this.reset();
	
			},
	
			reset: function() {
	
				this.paused = false;
				this.enabled = true;
	
				this.time = 0;			// restart clip
				this._loopCount = -1;	// forget previous loops
				this._startTime = null;	// forget scheduling
	
				return this.stopFading().stopWarping();
	
			},
	
			isRunning: function() {
	
				return this.enabled && ! this.paused && this.timeScale !== 0 &&
						this._startTime === null && this._mixer._isActiveAction( this );
	
			},
	
			// return true when play has been called
			isScheduled: function() {
	
				return this._mixer._isActiveAction( this );
	
			},
	
			startAt: function( time ) {
	
				this._startTime = time;
	
				return this;
	
			},
	
			setLoop: function( mode, repetitions ) {
	
				this.loop = mode;
				this.repetitions = repetitions;
	
				return this;
	
			},
	
			// Weight
	
			// set the weight stopping any scheduled fading
			// although .enabled = false yields an effective weight of zero, this
			// method does *not* change .enabled, because it would be confusing
			setEffectiveWeight: function( weight ) {
	
				this.weight = weight;
	
				// note: same logic as when updated at runtime
				this._effectiveWeight = this.enabled ? weight : 0;
	
				return this.stopFading();
	
			},
	
			// return the weight considering fading and .enabled
			getEffectiveWeight: function() {
	
				return this._effectiveWeight;
	
			},
	
			fadeIn: function( duration ) {
	
				return this._scheduleFading( duration, 0, 1 );
	
			},
	
			fadeOut: function( duration ) {
	
				return this._scheduleFading( duration, 1, 0 );
	
			},
	
			crossFadeFrom: function( fadeOutAction, duration, warp ) {
	
				fadeOutAction.fadeOut( duration );
				this.fadeIn( duration );
	
				if( warp ) {
	
					var fadeInDuration = this._clip.duration,
						fadeOutDuration = fadeOutAction._clip.duration,
	
						startEndRatio = fadeOutDuration / fadeInDuration,
						endStartRatio = fadeInDuration / fadeOutDuration;
	
					fadeOutAction.warp( 1.0, startEndRatio, duration );
					this.warp( endStartRatio, 1.0, duration );
	
				}
	
				return this;
	
			},
	
			crossFadeTo: function( fadeInAction, duration, warp ) {
	
				return fadeInAction.crossFadeFrom( this, duration, warp );
	
			},
	
			stopFading: function() {
	
				var weightInterpolant = this._weightInterpolant;
	
				if ( weightInterpolant !== null ) {
	
					this._weightInterpolant = null;
					this._mixer._takeBackControlInterpolant( weightInterpolant );
	
				}
	
				return this;
	
			},
	
			// Time Scale Control
	
			// set the weight stopping any scheduled warping
			// although .paused = true yields an effective time scale of zero, this
			// method does *not* change .paused, because it would be confusing
			setEffectiveTimeScale: function( timeScale ) {
	
				this.timeScale = timeScale;
				this._effectiveTimeScale = this.paused ? 0 :timeScale;
	
				return this.stopWarping();
	
			},
	
			// return the time scale considering warping and .paused
			getEffectiveTimeScale: function() {
	
				return this._effectiveTimeScale;
	
			},
	
			setDuration: function( duration ) {
	
				this.timeScale = this._clip.duration / duration;
	
				return this.stopWarping();
	
			},
	
			syncWith: function( action ) {
	
				this.time = action.time;
				this.timeScale = action.timeScale;
	
				return this.stopWarping();
	
			},
	
			halt: function( duration ) {
	
				return this.warp( this._effectiveTimeScale, 0, duration );
	
			},
	
			warp: function( startTimeScale, endTimeScale, duration ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._timeScaleInterpolant,
	
					timeScale = this.timeScale;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant(),
					this._timeScaleInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now;
				times[ 1 ] = now + duration;
	
				values[ 0 ] = startTimeScale / timeScale;
				values[ 1 ] = endTimeScale / timeScale;
	
				return this;
	
			},
	
			stopWarping: function() {
	
				var timeScaleInterpolant = this._timeScaleInterpolant;
	
				if ( timeScaleInterpolant !== null ) {
	
					this._timeScaleInterpolant = null;
					this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
	
				}
	
				return this;
	
			},
	
			// Object Accessors
	
			getMixer: function() {
	
				return this._mixer;
	
			},
	
			getClip: function() {
	
				return this._clip;
	
			},
	
			getRoot: function() {
	
				return this._localRoot || this._mixer._root;
	
			},
	
			// Interna
	
			_update: function( time, deltaTime, timeDirection, accuIndex ) {
				// called by the mixer
	
				var startTime = this._startTime;
	
				if ( startTime !== null ) {
	
					// check for scheduled start of action
	
					var timeRunning = ( time - startTime ) * timeDirection;
					if ( timeRunning < 0 || timeDirection === 0 ) {
	
						return; // yet to come / don't decide when delta = 0
	
					}
	
					// start
	
					this._startTime = null; // unschedule
					deltaTime = timeDirection * timeRunning;
	
				}
	
				// apply time scale and advance time
	
				deltaTime *= this._updateTimeScale( time );
				var clipTime = this._updateTime( deltaTime );
	
				// note: _updateTime may disable the action resulting in
				// an effective weight of 0
	
				var weight = this._updateWeight( time );
	
				if ( weight > 0 ) {
	
					var interpolants = this._interpolants;
					var propertyMixers = this._propertyBindings;
	
					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
	
						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );
	
					}
	
				}
	
			},
	
			_updateWeight: function( time ) {
	
				var weight = 0;
	
				if ( this.enabled ) {
	
					weight = this.weight;
					var interpolant = this._weightInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						weight *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopFading();
	
							if ( interpolantValue === 0 ) {
	
								// faded out, disable
								this.enabled = false;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveWeight = weight;
				return weight;
	
			},
	
			_updateTimeScale: function( time ) {
	
				var timeScale = 0;
	
				if ( ! this.paused ) {
	
					timeScale = this.timeScale;
	
					var interpolant = this._timeScaleInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						timeScale *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopWarping();
	
							if ( timeScale === 0 ) {
	
								// motion has halted, pause
								this.paused = true;
	
							} else {
	
								// warp done - apply final time scale
								this.timeScale = timeScale;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveTimeScale = timeScale;
				return timeScale;
	
			},
	
			_updateTime: function( deltaTime ) {
	
				var time = this.time + deltaTime;
	
				if ( deltaTime === 0 ) return time;
	
				var duration = this._clip.duration,
	
					loop = this.loop,
					loopCount = this._loopCount;
	
				if ( loop === LoopOnce ) {
	
					if ( loopCount === -1 ) {
						// just started
	
						this.loopCount = 0;
						this._setEndings( true, true, false );
	
					}
	
					handle_stop: {
	
						if ( time >= duration ) {
	
							time = duration;
	
						} else if ( time < 0 ) {
	
							time = 0;
	
						} else break handle_stop;
	
						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;
	
						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime < 0 ? -1 : 1
						} );
	
					}
	
				} else { // repetitive Repeat or PingPong
	
					var pingPong = ( loop === LoopPingPong );
	
					if ( loopCount === -1 ) {
						// just started
	
						if ( deltaTime >= 0 ) {
	
							loopCount = 0;
	
							this._setEndings(
									true, this.repetitions === 0, pingPong );
	
						} else {
	
							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1
	
							this._setEndings(
									this.repetitions === 0, true, pingPong );
	
						}
	
					}
	
					if ( time >= duration || time < 0 ) {
						// wrap around
	
						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;
	
						loopCount += Math.abs( loopDelta );
	
						var pending = this.repetitions - loopCount;
	
						if ( pending < 0 ) {
							// have to stop (switch state, clamp time, fire event)
	
							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;
	
							time = deltaTime > 0 ? duration : 0;
	
							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : -1
							} );
	
						} else {
							// keep running
	
							if ( pending === 0 ) {
								// entering the last round
	
								var atStart = deltaTime < 0;
								this._setEndings( atStart, ! atStart, pingPong );
	
							} else {
	
								this._setEndings( false, false, pingPong );
	
							}
	
							this._loopCount = loopCount;
	
							this._mixer.dispatchEvent( {
								type: 'loop', action: this, loopDelta: loopDelta
							} );
	
						}
	
					}
	
					if ( pingPong && ( loopCount & 1 ) === 1 ) {
						// invert time for the "pong round"
	
						this.time = time;
						return duration - time;
	
					}
	
				}
	
				this.time = time;
				return time;
	
			},
	
			_setEndings: function( atStart, atEnd, pingPong ) {
	
				var settings = this._interpolantSettings;
	
				if ( pingPong ) {
	
					settings.endingStart 	= ZeroSlopeEnding;
					settings.endingEnd		= ZeroSlopeEnding;
	
				} else {
	
					// assuming for LoopOnce atStart == atEnd == true
	
					if ( atStart ) {
	
						settings.endingStart = this.zeroSlopeAtStart ?
								ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingStart = WrapAroundEnding;
	
					}
	
					if ( atEnd ) {
	
						settings.endingEnd = this.zeroSlopeAtEnd ?
								ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingEnd 	 = WrapAroundEnding;
	
					}
	
				}
	
			},
	
			_scheduleFading: function( duration, weightNow, weightThen ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._weightInterpolant;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant(),
					this._weightInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now; 				values[ 0 ] = weightNow;
				times[ 1 ] = now + duration;	values[ 1 ] = weightThen;
	
				return this;
	
			}
	
		};
	
		/**
		 *
		 * Player for AnimationClips.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function AnimationMixer( root ) {
	
			this._root = root;
			this._initMemoryManager();
			this._accuIndex = 0;
	
			this.time = 0;
	
			this.timeScale = 1.0;
	
		}
	
		Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {
	
			// return an action for a clip optionally using a custom root target
			// object (this method allocates a lot of dynamic memory in case a
			// previously unknown clip/root combination is specified)
			clipAction: function( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
							AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject !== null ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ],
					prototypeAction = null;
	
				if ( actionsForClip !== undefined ) {
	
					var existingAction =
							actionsForClip.actionByRoot[ rootUuid ];
	
					if ( existingAction !== undefined ) {
	
						return existingAction;
	
					}
	
					// we know the clip, so we don't have to parse all
					// the bindings again but can just copy
					prototypeAction = actionsForClip.knownActions[ 0 ];
	
					// also, take the clip from the prototype action
					if ( clipObject === null )
						clipObject = prototypeAction._clip;
	
				}
	
				// clip must be known when specified via string
				if ( clipObject === null ) return null;
	
				// allocate all resources required to run it
				var newAction = new AnimationAction( this, clipObject, optionalRoot );
	
				this._bindAction( newAction, prototypeAction );
	
				// and make the action known to the memory manager
				this._addInactiveAction( newAction, clipUuid, rootUuid );
	
				return newAction;
	
			},
	
			// get an existing action
			existingAction: function( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
							AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					return actionsForClip.actionByRoot[ rootUuid ] || null;
	
				}
	
				return null;
	
			},
	
			// deactivates all previously scheduled actions
			stopAllAction: function() {
	
				var actions = this._actions,
					nActions = this._nActiveActions,
					bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				this._nActiveActions = 0;
				this._nActiveBindings = 0;
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					actions[ i ].reset();
	
				}
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].useCount = 0;
	
				}
	
				return this;
	
			},
	
			// advance the time and update apply the animation
			update: function( deltaTime ) {
	
				deltaTime *= this.timeScale;
	
				var actions = this._actions,
					nActions = this._nActiveActions,
	
					time = this.time += deltaTime,
					timeDirection = Math.sign( deltaTime ),
	
					accuIndex = this._accuIndex ^= 1;
	
				// run active actions
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					var action = actions[ i ];
	
					if ( action.enabled ) {
	
						action._update( time, deltaTime, timeDirection, accuIndex );
	
					}
	
				}
	
				// update scene graph
	
				var bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].apply( accuIndex );
	
				}
	
				return this;
	
			},
	
			// return this mixer's root target object
			getRoot: function() {
	
				return this._root;
	
			},
	
			// free all resources specific to a particular clip
			uncacheClip: function( clip ) {
	
				var actions = this._actions,
					clipUuid = clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					// note: just calling _removeInactiveAction would mess up the
					// iteration state and also require updating the state we can
					// just throw away
	
					var actionsToRemove = actionsForClip.knownActions;
	
					for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
	
						var action = actionsToRemove[ i ];
	
						this._deactivateAction( action );
	
						var cacheIndex = action._cacheIndex,
							lastInactiveAction = actions[ actions.length - 1 ];
	
						action._cacheIndex = null;
						action._byClipCacheIndex = null;
	
						lastInactiveAction._cacheIndex = cacheIndex;
						actions[ cacheIndex ] = lastInactiveAction;
						actions.pop();
	
						this._removeInactiveBindingsForAction( action );
	
					}
	
					delete actionsByClip[ clipUuid ];
	
				}
	
			},
	
			// free all resources specific to a particular root target object
			uncacheRoot: function( root ) {
	
				var rootUuid = root.uuid,
					actionsByClip = this._actionsByClip;
	
				for ( var clipUuid in actionsByClip ) {
	
					var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
						action = actionByRoot[ rootUuid ];
	
					if ( action !== undefined ) {
	
						this._deactivateAction( action );
						this._removeInactiveAction( action );
	
					}
	
				}
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingByName !== undefined ) {
	
					for ( var trackName in bindingByName ) {
	
						var binding = bindingByName[ trackName ];
						binding.restoreOriginalState();
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			// remove a targeted clip from the cache
			uncacheAction: function( clip, optionalRoot ) {
	
				var action = this.existingAction( clip, optionalRoot );
	
				if ( action !== null ) {
	
					this._deactivateAction( action );
					this._removeInactiveAction( action );
	
				}
	
			}
	
		} );
	
		// Implementation details:
	
		Object.assign( AnimationMixer.prototype, {
	
			_bindAction: function( action, prototypeAction ) {
	
				var root = action._localRoot || this._root,
					tracks = action._clip.tracks,
					nTracks = tracks.length,
					bindings = action._propertyBindings,
					interpolants = action._interpolants,
					rootUuid = root.uuid,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingsByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingsByName === undefined ) {
	
					bindingsByName = {};
					bindingsByRoot[ rootUuid ] = bindingsByName;
	
				}
	
				for ( var i = 0; i !== nTracks; ++ i ) {
	
					var track = tracks[ i ],
						trackName = track.name,
						binding = bindingsByName[ trackName ];
	
					if ( binding !== undefined ) {
	
						bindings[ i ] = binding;
	
					} else {
	
						binding = bindings[ i ];
	
						if ( binding !== undefined ) {
	
							// existing binding, make sure the cache knows
	
							if ( binding._cacheIndex === null ) {
	
								++ binding.referenceCount;
								this._addInactiveBinding( binding, rootUuid, trackName );
	
							}
	
							continue;
	
						}
	
						var path = prototypeAction && prototypeAction.
								_propertyBindings[ i ].binding.parsedPath;
	
						binding = new PropertyMixer(
								PropertyBinding.create( root, trackName, path ),
								track.ValueTypeName, track.getValueSize() );
	
						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );
	
						bindings[ i ] = binding;
	
					}
	
					interpolants[ i ].resultBuffer = binding.buffer;
	
				}
	
			},
	
			_activateAction: function( action ) {
	
				if ( ! this._isActiveAction( action ) ) {
	
					if ( action._cacheIndex === null ) {
	
						// this action has been forgotten by the cache, but the user
						// appears to be still using it -> rebind
	
						var rootUuid = ( action._localRoot || this._root ).uuid,
							clipUuid = action._clip.uuid,
							actionsForClip = this._actionsByClip[ clipUuid ];
	
						this._bindAction( action,
								actionsForClip && actionsForClip.knownActions[ 0 ] );
	
						this._addInactiveAction( action, clipUuid, rootUuid );
	
					}
	
					var bindings = action._propertyBindings;
	
					// increment reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( binding.useCount ++ === 0 ) {
	
							this._lendBinding( binding );
							binding.saveOriginalState();
	
						}
	
					}
	
					this._lendAction( action );
	
				}
	
			},
	
			_deactivateAction: function( action ) {
	
				if ( this._isActiveAction( action ) ) {
	
					var bindings = action._propertyBindings;
	
					// decrement reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( -- binding.useCount === 0 ) {
	
							binding.restoreOriginalState();
							this._takeBackBinding( binding );
	
						}
	
					}
	
					this._takeBackAction( action );
	
				}
	
			},
	
			// Memory manager
	
			_initMemoryManager: function() {
	
				this._actions = []; // 'nActiveActions' followed by inactive ones
				this._nActiveActions = 0;
	
				this._actionsByClip = {};
				// inside:
				// {
				// 		knownActions: Array< AnimationAction >	- used as prototypes
				// 		actionByRoot: AnimationAction			- lookup
				// }
	
	
				this._bindings = []; // 'nActiveBindings' followed by inactive ones
				this._nActiveBindings = 0;
	
				this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
	
	
				this._controlInterpolants = []; // same game as above
				this._nActiveControlInterpolants = 0;
	
				var scope = this;
	
				this.stats = {
	
					actions: {
						get total() { return scope._actions.length; },
						get inUse() { return scope._nActiveActions; }
					},
					bindings: {
						get total() { return scope._bindings.length; },
						get inUse() { return scope._nActiveBindings; }
					},
					controlInterpolants: {
						get total() { return scope._controlInterpolants.length; },
						get inUse() { return scope._nActiveControlInterpolants; }
					}
	
				};
	
			},
	
			// Memory management for AnimationAction objects
	
			_isActiveAction: function( action ) {
	
				var index = action._cacheIndex;
				return index !== null && index < this._nActiveActions;
	
			},
	
			_addInactiveAction: function( action, clipUuid, rootUuid ) {
	
				var actions = this._actions,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip === undefined ) {
	
					actionsForClip = {
	
						knownActions: [ action ],
						actionByRoot: {}
	
					};
	
					action._byClipCacheIndex = 0;
	
					actionsByClip[ clipUuid ] = actionsForClip;
	
				} else {
	
					var knownActions = actionsForClip.knownActions;
	
					action._byClipCacheIndex = knownActions.length;
					knownActions.push( action );
	
				}
	
				action._cacheIndex = actions.length;
				actions.push( action );
	
				actionsForClip.actionByRoot[ rootUuid ] = action;
	
			},
	
			_removeInactiveAction: function( action ) {
	
				var actions = this._actions,
					lastInactiveAction = actions[ actions.length - 1 ],
					cacheIndex = action._cacheIndex;
	
				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();
	
				action._cacheIndex = null;
	
	
				var clipUuid = action._clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ],
					knownActionsForClip = actionsForClip.knownActions,
	
					lastKnownAction =
						knownActionsForClip[ knownActionsForClip.length - 1 ],
	
					byClipCacheIndex = action._byClipCacheIndex;
	
				lastKnownAction._byClipCacheIndex = byClipCacheIndex;
				knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
				knownActionsForClip.pop();
	
				action._byClipCacheIndex = null;
	
	
				var actionByRoot = actionsForClip.actionByRoot,
					rootUuid = ( actions._localRoot || this._root ).uuid;
	
				delete actionByRoot[ rootUuid ];
	
				if ( knownActionsForClip.length === 0 ) {
	
					delete actionsByClip[ clipUuid ];
	
				}
	
				this._removeInactiveBindingsForAction( action );
	
			},
	
			_removeInactiveBindingsForAction: function( action ) {
	
				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
					var binding = bindings[ i ];
	
					if ( -- binding.referenceCount === 0 ) {
	
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			_lendAction: function( action ) {
	
				// [ active actions |  inactive actions  ]
				// [  active actions >| inactive actions ]
				//                 s        a
				//                  <-swap->
				//                 a        s
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					lastActiveIndex = this._nActiveActions ++,
	
					firstInactiveAction = actions[ lastActiveIndex ];
	
				action._cacheIndex = lastActiveIndex;
				actions[ lastActiveIndex ] = action;
	
				firstInactiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = firstInactiveAction;
	
			},
	
			_takeBackAction: function( action ) {
	
				// [  active actions  | inactive actions ]
				// [ active actions |< inactive actions  ]
				//        a        s
				//         <-swap->
				//        s        a
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveActions,
	
					lastActiveAction = actions[ firstInactiveIndex ];
	
				action._cacheIndex = firstInactiveIndex;
				actions[ firstInactiveIndex ] = action;
	
				lastActiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = lastActiveAction;
	
			},
	
			// Memory management for PropertyMixer objects
	
			_addInactiveBinding: function( binding, rootUuid, trackName ) {
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					bindings = this._bindings;
	
				if ( bindingByName === undefined ) {
	
					bindingByName = {};
					bindingsByRoot[ rootUuid ] = bindingByName;
	
				}
	
				bindingByName[ trackName ] = binding;
	
				binding._cacheIndex = bindings.length;
				bindings.push( binding );
	
			},
	
			_removeInactiveBinding: function( binding ) {
	
				var bindings = this._bindings,
					propBinding = binding.binding,
					rootUuid = propBinding.rootNode.uuid,
					trackName = propBinding.path,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					lastInactiveBinding = bindings[ bindings.length - 1 ],
					cacheIndex = binding._cacheIndex;
	
				lastInactiveBinding._cacheIndex = cacheIndex;
				bindings[ cacheIndex ] = lastInactiveBinding;
				bindings.pop();
	
				delete bindingByName[ trackName ];
	
				remove_empty_map: {
	
					for ( var _ in bindingByName ) break remove_empty_map;
	
					delete bindingsByRoot[ rootUuid ];
	
				}
	
			},
	
			_lendBinding: function( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					lastActiveIndex = this._nActiveBindings ++,
	
					firstInactiveBinding = bindings[ lastActiveIndex ];
	
				binding._cacheIndex = lastActiveIndex;
				bindings[ lastActiveIndex ] = binding;
	
				firstInactiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = firstInactiveBinding;
	
			},
	
			_takeBackBinding: function( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveBindings,
	
					lastActiveBinding = bindings[ firstInactiveIndex ];
	
				binding._cacheIndex = firstInactiveIndex;
				bindings[ firstInactiveIndex ] = binding;
	
				lastActiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = lastActiveBinding;
	
			},
	
	
			// Memory management of Interpolants for weight and time scale
	
			_lendControlInterpolant: function() {
	
				var interpolants = this._controlInterpolants,
					lastActiveIndex = this._nActiveControlInterpolants ++,
					interpolant = interpolants[ lastActiveIndex ];
	
				if ( interpolant === undefined ) {
	
					interpolant = new LinearInterpolant(
							new Float32Array( 2 ), new Float32Array( 2 ),
								1, this._controlInterpolantsResultBuffer );
	
					interpolant.__cacheIndex = lastActiveIndex;
					interpolants[ lastActiveIndex ] = interpolant;
	
				}
	
				return interpolant;
	
			},
	
			_takeBackControlInterpolant: function( interpolant ) {
	
				var interpolants = this._controlInterpolants,
					prevIndex = interpolant.__cacheIndex,
	
					firstInactiveIndex = -- this._nActiveControlInterpolants,
	
					lastActiveInterpolant = interpolants[ firstInactiveIndex ];
	
				interpolant.__cacheIndex = firstInactiveIndex;
				interpolants[ firstInactiveIndex ] = interpolant;
	
				lastActiveInterpolant.__cacheIndex = prevIndex;
				interpolants[ prevIndex ] = lastActiveInterpolant;
	
			},
	
			_controlInterpolantsResultBuffer: new Float32Array( 1 )
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Uniform( value ) {
	
			if ( typeof value === 'string' ) {
	
				console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
				value = arguments[ 1 ];
	
			}
	
			this.value = value;
	
		}
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferGeometry() {
	
			BufferGeometry.call( this );
	
			this.type = 'InstancedBufferGeometry';
			this.maxInstancedCount = undefined;
	
		}
	
		InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;
	
		InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;
	
		InstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {
	
			this.groups.push( {
	
				start: start,
				count: count,
				materialIndex: materialIndex
	
			} );
	
		};
	
		InstancedBufferGeometry.prototype.copy = function ( source ) {
	
			var index = source.index;
	
			if ( index !== null ) {
	
				this.setIndex( index.clone() );
	
			}
	
			var attributes = source.attributes;
	
			for ( var name in attributes ) {
	
				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );
	
			}
	
			var groups = source.groups;
	
			for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );
	
			}
	
			return this;
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
	
			this.uuid = _Math.generateUUID();
	
			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;
	
			this.normalized = normalized === true;
	
		}
	
	
		InterleavedBufferAttribute.prototype = {
	
			constructor: InterleavedBufferAttribute,
	
			isInterleavedBufferAttribute: true,
	
			get count() {
	
				return this.data.count;
	
			},
	
			get array() {
	
				return this.data.array;
	
			},
	
			setX: function ( index, x ) {
	
				this.data.array[ index * this.data.stride + this.offset ] = x;
	
				return this;
	
			},
	
			setY: function ( index, y ) {
	
				this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
	
				return this;
	
			},
	
			setZ: function ( index, z ) {
	
				this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
	
				return this;
	
			},
	
			setW: function ( index, w ) {
	
				this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset ];
	
			},
	
			getY: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 1 ];
	
			},
	
			getZ: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 2 ];
	
			},
	
			getW: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 3 ];
	
			},
	
			setXY: function ( index, x, y ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
				this.data.array[ index + 3 ] = w;
	
				return this;
	
			}
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InterleavedBuffer( array, stride ) {
	
			this.uuid = _Math.generateUUID();
	
			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;
	
			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.version = 0;
	
		}
	
		InterleavedBuffer.prototype = {
	
			constructor: InterleavedBuffer,
	
			isInterleavedBuffer: true,
	
			set needsUpdate( value ) {
	
				if ( value === true ) this.version ++;
	
			},
	
			setArray: function ( array ) {
	
				if ( Array.isArray( array ) ) {
	
					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
				}
	
				this.count = array !== undefined ? array.length / this.stride : 0;
				this.array = array;
	
			},
	
			setDynamic: function ( value ) {
	
				this.dynamic = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.array = new source.array.constructor( source.array );
				this.count = source.count;
				this.stride = source.stride;
				this.dynamic = source.dynamic;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.stride;
				index2 *= attribute.stride;
	
				for ( var i = 0, l = this.stride; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
	
			InterleavedBuffer.call( this, array, stride );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );
		InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;
	
		InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;
	
		InstancedInterleavedBuffer.prototype.copy = function ( source ) {
	
			InterleavedBuffer.prototype.copy.call( this, source );
	
			this.meshPerAttribute = source.meshPerAttribute;
	
			return this;
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {
	
			BufferAttribute.call( this, array, itemSize );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;
	
		InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;
	
		InstancedBufferAttribute.prototype.copy = function ( source ) {
	
			BufferAttribute.prototype.copy.call( this, source );
	
			this.meshPerAttribute = source.meshPerAttribute;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author bhouston / http://clara.io/
		 * @author stephomi / http://stephaneginier.com/
		 */
	
		function Raycaster( origin, direction, near, far ) {
	
			this.ray = new Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)
	
			this.near = near || 0;
			this.far = far || Infinity;
	
			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};
	
			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );
	
		}
	
		function ascSort( a, b ) {
	
			return a.distance - b.distance;
	
		}
	
		function intersectObject( object, raycaster, intersects, recursive ) {
	
			if ( object.visible === false ) return;
	
			object.raycast( raycaster, intersects );
	
			if ( recursive === true ) {
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					intersectObject( children[ i ], raycaster, intersects, true );
	
				}
	
			}
	
		}
	
		//
	
		Raycaster.prototype = {
	
			constructor: Raycaster,
	
			linePrecision: 1,
	
			set: function ( origin, direction ) {
	
				// direction is assumed to be normalized (for accurate distance calculations)
	
				this.ray.set( origin, direction );
	
			},
	
			setFromCamera: function ( coords, camera ) {
	
				if ( (camera && camera.isPerspectiveCamera) ) {
	
					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
	
				} else if ( (camera && camera.isOrthographicCamera) ) {
	
					this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
	
				} else {
	
					console.error( 'THREE.Raycaster: Unsupported camera type.' );
	
				}
	
			},
	
			intersectObject: function ( object, recursive ) {
	
				var intersects = [];
	
				intersectObject( object, this, intersects, recursive );
	
				intersects.sort( ascSort );
	
				return intersects;
	
			},
	
			intersectObjects: function ( objects, recursive ) {
	
				var intersects = [];
	
				if ( Array.isArray( objects ) === false ) {
	
					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;
	
				}
	
				for ( var i = 0, l = objects.length; i < l; i ++ ) {
	
					intersectObject( objects[ i ], this, intersects, recursive );
	
				}
	
				intersects.sort( ascSort );
	
				return intersects;
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Clock( autoStart ) {
	
			this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
	
			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;
	
			this.running = false;
	
		}
	
		Clock.prototype = {
	
			constructor: Clock,
	
			start: function () {
	
				this.startTime = ( performance || Date ).now();
	
				this.oldTime = this.startTime;
				this.elapsedTime = 0;
				this.running = true;
	
			},
	
			stop: function () {
	
				this.getElapsedTime();
				this.running = false;
	
			},
	
			getElapsedTime: function () {
	
				this.getDelta();
				return this.elapsedTime;
	
			},
	
			getDelta: function () {
	
				var diff = 0;
	
				if ( this.autoStart && ! this.running ) {
	
					this.start();
	
				}
	
				if ( this.running ) {
	
					var newTime = ( performance || Date ).now();
	
					diff = ( newTime - this.oldTime ) / 1000;
					this.oldTime = newTime;
	
					this.elapsedTime += diff;
	
				}
	
				return diff;
	
			}
	
		};
	
		/**
		 * Spline from Tween.js, slightly optimized (and trashed)
		 * http://sole.github.com/tween.js/examples/05_spline.html
		 *
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Spline( points ) {
	
			this.points = points;
	
			var c = [], v3 = { x: 0, y: 0, z: 0 },
			point, intPoint, weight, w2, w3,
			pa, pb, pc, pd;
	
			this.initFromArray = function ( a ) {
	
				this.points = [];
	
				for ( var i = 0; i < a.length; i ++ ) {
	
					this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };
	
				}
	
			};
	
			this.getPoint = function ( k ) {
	
				point = ( this.points.length - 1 ) * k;
				intPoint = Math.floor( point );
				weight = point - intPoint;
	
				c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
				c[ 1 ] = intPoint;
				c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
				c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;
	
				pa = this.points[ c[ 0 ] ];
				pb = this.points[ c[ 1 ] ];
				pc = this.points[ c[ 2 ] ];
				pd = this.points[ c[ 3 ] ];
	
				w2 = weight * weight;
				w3 = weight * w2;
	
				v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
				v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
				v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );
	
				return v3;
	
			};
	
			this.getControlPointsArray = function () {
	
				var i, p, l = this.points.length,
					coords = [];
	
				for ( i = 0; i < l; i ++ ) {
	
					p = this.points[ i ];
					coords[ i ] = [ p.x, p.y, p.z ];
	
				}
	
				return coords;
	
			};
	
			// approximate length by summing linear segments
	
			this.getLength = function ( nSubDivisions ) {
	
				var i, index, nSamples, position,
					point = 0, intPoint = 0, oldIntPoint = 0,
					oldPosition = new Vector3(),
					tmpVec = new Vector3(),
					chunkLengths = [],
					totalLength = 0;
	
				// first point has 0 length
	
				chunkLengths[ 0 ] = 0;
	
				if ( ! nSubDivisions ) nSubDivisions = 100;
	
				nSamples = this.points.length * nSubDivisions;
	
				oldPosition.copy( this.points[ 0 ] );
	
				for ( i = 1; i < nSamples; i ++ ) {
	
					index = i / nSamples;
	
					position = this.getPoint( index );
					tmpVec.copy( position );
	
					totalLength += tmpVec.distanceTo( oldPosition );
	
					oldPosition.copy( position );
	
					point = ( this.points.length - 1 ) * index;
					intPoint = Math.floor( point );
	
					if ( intPoint !== oldIntPoint ) {
	
						chunkLengths[ intPoint ] = totalLength;
						oldIntPoint = intPoint;
	
					}
	
				}
	
				// last point ends with total length
	
				chunkLengths[ chunkLengths.length ] = totalLength;
	
				return { chunks: chunkLengths, total: totalLength };
	
			};
	
			this.reparametrizeByArcLength = function ( samplingCoef ) {
	
				var i, j,
					index, indexCurrent, indexNext,
					realDistance,
					sampling, position,
					newpoints = [],
					tmpVec = new Vector3(),
					sl = this.getLength();
	
				newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );
	
				for ( i = 1; i < this.points.length; i ++ ) {
	
					//tmpVec.copy( this.points[ i - 1 ] );
					//linearDistance = tmpVec.distanceTo( this.points[ i ] );
	
					realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];
	
					sampling = Math.ceil( samplingCoef * realDistance / sl.total );
	
					indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
					indexNext = i / ( this.points.length - 1 );
	
					for ( j = 1; j < sampling - 1; j ++ ) {
	
						index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );
	
						position = this.getPoint( index );
						newpoints.push( tmpVec.copy( position ).clone() );
	
					}
	
					newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );
	
				}
	
				this.points = newpoints;
	
			};
	
			// Catmull-Rom
	
			function interpolate( p0, p1, p2, p3, t, t2, t3 ) {
	
				var v0 = ( p2 - p0 ) * 0.5,
					v1 = ( p3 - p1 ) * 0.5;
	
				return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
			}
	
		}
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
		 *
		 * The poles (phi) are at the positive and negative y axis.
		 * The equator starts at positive z.
		 */
	
		function Spherical( radius, phi, theta ) {
	
			this.radius = ( radius !== undefined ) ? radius : 1.0;
			this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
			this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere
	
			return this;
	
		}
	
		Spherical.prototype = {
	
			constructor: Spherical,
	
			set: function ( radius, phi, theta ) {
	
				this.radius = radius;
				this.phi = phi;
				this.theta = theta;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( other ) {
	
				this.radius = other.radius;
				this.phi = other.phi;
				this.theta = other.theta;
	
				return this;
	
			},
	
			// restrict phi to be betwee EPS and PI-EPS
			makeSafe: function() {
	
				var EPS = 0.000001;
				this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
	
				return this;
	
			},
	
			setFromVector3: function( vec3 ) {
	
				this.radius = vec3.length();
	
				if ( this.radius === 0 ) {
	
					this.theta = 0;
					this.phi = 0;
	
				} else {
	
					this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
					this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle
	
				}
	
				return this;
	
			},
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function MorphBlendMesh( geometry, material ) {
	
			Mesh.call( this, geometry, material );
	
			this.animationsMap = {};
			this.animationsList = [];
	
			// prepare default animation
			// (all frames played together in 1 second)
	
			var numFrames = this.geometry.morphTargets.length;
	
			var name = "__default";
	
			var startFrame = 0;
			var endFrame = numFrames - 1;
	
			var fps = numFrames / 1;
	
			this.createAnimation( name, startFrame, endFrame, fps );
			this.setAnimationWeight( name, 1 );
	
		}
	
		MorphBlendMesh.prototype = Object.create( Mesh.prototype );
		MorphBlendMesh.prototype.constructor = MorphBlendMesh;
	
		MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {
	
			var animation = {
	
				start: start,
				end: end,
	
				length: end - start + 1,
	
				fps: fps,
				duration: ( end - start ) / fps,
	
				lastFrame: 0,
				currentFrame: 0,
	
				active: false,
	
				time: 0,
				direction: 1,
				weight: 1,
	
				directionBackwards: false,
				mirroredLoop: false
	
			};
	
			this.animationsMap[ name ] = animation;
			this.animationsList.push( animation );
	
		};
	
		MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {
	
			var pattern = /([a-z]+)_?(\d+)/i;
	
			var firstAnimation, frameRanges = {};
	
			var geometry = this.geometry;
	
			for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {
	
				var morph = geometry.morphTargets[ i ];
				var chunks = morph.name.match( pattern );
	
				if ( chunks && chunks.length > 1 ) {
	
					var name = chunks[ 1 ];
	
					if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };
	
					var range = frameRanges[ name ];
	
					if ( i < range.start ) range.start = i;
					if ( i > range.end ) range.end = i;
	
					if ( ! firstAnimation ) firstAnimation = name;
	
				}
	
			}
	
			for ( var name in frameRanges ) {
	
				var range = frameRanges[ name ];
				this.createAnimation( name, range.start, range.end, fps );
	
			}
	
			this.firstAnimation = firstAnimation;
	
		};
	
		MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.direction = 1;
				animation.directionBackwards = false;
	
			}
	
		};
	
		MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.direction = - 1;
				animation.directionBackwards = true;
	
			}
	
		};
	
		MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.fps = fps;
				animation.duration = ( animation.end - animation.start ) / animation.fps;
	
			}
	
		};
	
		MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.duration = duration;
				animation.fps = ( animation.end - animation.start ) / animation.duration;
	
			}
	
		};
	
		MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.weight = weight;
	
			}
	
		};
	
		MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.time = time;
	
			}
	
		};
	
		MorphBlendMesh.prototype.getAnimationTime = function ( name ) {
	
			var time = 0;
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				time = animation.time;
	
			}
	
			return time;
	
		};
	
		MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {
	
			var duration = - 1;
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				duration = animation.duration;
	
			}
	
			return duration;
	
		};
	
		MorphBlendMesh.prototype.playAnimation = function ( name ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.time = 0;
				animation.active = true;
	
			} else {
	
				console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );
	
			}
	
		};
	
		MorphBlendMesh.prototype.stopAnimation = function ( name ) {
	
			var animation = this.animationsMap[ name ];
	
			if ( animation ) {
	
				animation.active = false;
	
			}
	
		};
	
		MorphBlendMesh.prototype.update = function ( delta ) {
	
			for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {
	
				var animation = this.animationsList[ i ];
	
				if ( ! animation.active ) continue;
	
				var frameTime = animation.duration / animation.length;
	
				animation.time += animation.direction * delta;
	
				if ( animation.mirroredLoop ) {
	
					if ( animation.time > animation.duration || animation.time < 0 ) {
	
						animation.direction *= - 1;
	
						if ( animation.time > animation.duration ) {
	
							animation.time = animation.duration;
							animation.directionBackwards = true;
	
						}
	
						if ( animation.time < 0 ) {
	
							animation.time = 0;
							animation.directionBackwards = false;
	
						}
	
					}
	
				} else {
	
					animation.time = animation.time % animation.duration;
	
					if ( animation.time < 0 ) animation.time += animation.duration;
	
				}
	
				var keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
				var weight = animation.weight;
	
				if ( keyframe !== animation.currentFrame ) {
	
					this.morphTargetInfluences[ animation.lastFrame ] = 0;
					this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;
	
					this.morphTargetInfluences[ keyframe ] = 0;
	
					animation.lastFrame = animation.currentFrame;
					animation.currentFrame = keyframe;
	
				}
	
				var mix = ( animation.time % frameTime ) / frameTime;
	
				if ( animation.directionBackwards ) mix = 1 - mix;
	
				if ( animation.currentFrame !== animation.lastFrame ) {
	
					this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
					this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;
	
				} else {
	
					this.morphTargetInfluences[ animation.currentFrame ] = weight;
	
				}
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function ImmediateRenderObject( material ) {
	
			Object3D.call( this );
	
			this.material = material;
			this.render = function ( renderCallback ) {};
	
		}
	
		ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
		ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
	
		ImmediateRenderObject.prototype.isImmediateRenderObject = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function VertexNormalsHelper( object, size, hex, linewidth ) {
	
			this.object = object;
	
			this.size = ( size !== undefined ) ? size : 1;
	
			var color = ( hex !== undefined ) ? hex : 0xff0000;
	
			var width = ( linewidth !== undefined ) ? linewidth : 1;
	
			//
	
			var nNormals = 0;
	
			var objGeometry = this.object.geometry;
	
			if ( (objGeometry && objGeometry.isGeometry) ) {
	
				nNormals = objGeometry.faces.length * 3;
	
			} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {
	
				nNormals = objGeometry.attributes.normal.count;
	
			}
	
			//
	
			var geometry = new BufferGeometry();
	
			var positions = new Float32Attribute( nNormals * 2 * 3, 3 );
	
			geometry.addAttribute( 'position', positions );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
	
			//
	
			this.matrixAutoUpdate = false;
	
			this.update();
	
		}
	
		VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
		VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
	
		VertexNormalsHelper.prototype.update = ( function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();
	
			return function update() {
	
				var keys = [ 'a', 'b', 'c' ];
	
				this.object.updateMatrixWorld( true );
	
				normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
				var matrixWorld = this.object.matrixWorld;
	
				var position = this.geometry.attributes.position;
	
				//
	
				var objGeometry = this.object.geometry;
	
				if ( (objGeometry && objGeometry.isGeometry) ) {
	
					var vertices = objGeometry.vertices;
	
					var faces = objGeometry.faces;
	
					var idx = 0;
	
					for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
						var face = faces[ i ];
	
						for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
							var vertex = vertices[ face[ keys[ j ] ] ];
	
							var normal = face.vertexNormals[ j ];
	
							v1.copy( vertex ).applyMatrix4( matrixWorld );
	
							v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
							position.setXYZ( idx, v1.x, v1.y, v1.z );
	
							idx = idx + 1;
	
							position.setXYZ( idx, v2.x, v2.y, v2.z );
	
							idx = idx + 1;
	
						}
	
					}
	
				} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {
	
					var objPos = objGeometry.attributes.position;
	
					var objNorm = objGeometry.attributes.normal;
	
					var idx = 0;
	
					// for simplicity, ignore index and drawcalls, and render every normal
	
					for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
	
						v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
	
						v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
	
						v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
						position.setXYZ( idx, v1.x, v1.y, v1.z );
	
						idx = idx + 1;
	
						position.setXYZ( idx, v2.x, v2.y, v2.z );
	
						idx = idx + 1;
	
					}
	
				}
	
				position.needsUpdate = true;
	
				return this;
	
			};
	
		}() );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function SpotLightHelper( light ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			var geometry = new BufferGeometry();
	
			var positions = [
				0, 0, 0,   0,   0,   1,
				0, 0, 0,   1,   0,   1,
				0, 0, 0, - 1,   0,   1,
				0, 0, 0,   0,   1,   1,
				0, 0, 0,   0, - 1,   1
			];
	
			for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
	
				var p1 = ( i / l ) * Math.PI * 2;
				var p2 = ( j / l ) * Math.PI * 2;
	
				positions.push(
					Math.cos( p1 ), Math.sin( p1 ), 1,
					Math.cos( p2 ), Math.sin( p2 ), 1
				);
	
			}
	
			geometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.cone = new LineSegments( geometry, material );
			this.add( this.cone );
	
			this.update();
	
		}
	
		SpotLightHelper.prototype = Object.create( Object3D.prototype );
		SpotLightHelper.prototype.constructor = SpotLightHelper;
	
		SpotLightHelper.prototype.dispose = function () {
	
			this.cone.geometry.dispose();
			this.cone.material.dispose();
	
		};
	
		SpotLightHelper.prototype.update = function () {
	
			var vector = new Vector3();
			var vector2 = new Vector3();
	
			return function update() {
	
				var coneLength = this.light.distance ? this.light.distance : 1000;
				var coneWidth = coneLength * Math.tan( this.light.angle );
	
				this.cone.scale.set( coneWidth, coneWidth, coneLength );
	
				vector.setFromMatrixPosition( this.light.matrixWorld );
				vector2.setFromMatrixPosition( this.light.target.matrixWorld );
	
				this.cone.lookAt( vector2.sub( vector ) );
	
				this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
			};
	
		}();
	
		/**
		 * @author Sean Griffin / http://twitter.com/sgrif
		 * @author Michael Guerrero / http://realitymeltdown.com
		 * @author mrdoob / http://mrdoob.com/
		 * @author ikerr / http://verold.com
		 */
	
		function SkeletonHelper( object ) {
	
			this.bones = this.getBoneList( object );
	
			var geometry = new Geometry();
	
			for ( var i = 0; i < this.bones.length; i ++ ) {
	
				var bone = this.bones[ i ];
	
				if ( (bone.parent && bone.parent.isBone) ) {
	
					geometry.vertices.push( new Vector3() );
					geometry.vertices.push( new Vector3() );
					geometry.colors.push( new Color( 0, 0, 1 ) );
					geometry.colors.push( new Color( 0, 1, 0 ) );
	
				}
	
			}
	
			geometry.dynamic = true;
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );
	
			LineSegments.call( this, geometry, material );
	
			this.root = object;
	
			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.update();
	
		}
	
	
		SkeletonHelper.prototype = Object.create( LineSegments.prototype );
		SkeletonHelper.prototype.constructor = SkeletonHelper;
	
		SkeletonHelper.prototype.getBoneList = function( object ) {
	
			var boneList = [];
	
			if ( (object && object.isBone) ) {
	
				boneList.push( object );
	
			}
	
			for ( var i = 0; i < object.children.length; i ++ ) {
	
				boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );
	
			}
	
			return boneList;
	
		};
	
		SkeletonHelper.prototype.update = function () {
	
			var geometry = this.geometry;
	
			var matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );
	
			var boneMatrix = new Matrix4();
	
			var j = 0;
	
			for ( var i = 0; i < this.bones.length; i ++ ) {
	
				var bone = this.bones[ i ];
	
				if ( (bone.parent && bone.parent.isBone) ) {
	
					boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
					geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );
	
					boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
					geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );
	
					j += 2;
	
				}
	
			}
	
			geometry.verticesNeedUpdate = true;
	
			geometry.computeBoundingSphere();
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function PointLightHelper( light, sphereSize ) {
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
			var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
			material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
			Mesh.call( this, geometry, material );
	
			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			/*
			var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
			var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
	
			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
	
			var d = light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.scale.set( d, d, d );
	
			}
	
			this.add( this.lightDistance );
			*/
	
		}
	
		PointLightHelper.prototype = Object.create( Mesh.prototype );
		PointLightHelper.prototype.constructor = PointLightHelper;
	
		PointLightHelper.prototype.dispose = function () {
	
			this.geometry.dispose();
			this.material.dispose();
	
		};
	
		PointLightHelper.prototype.update = function () {
	
			this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
			/*
			var d = this.light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );
	
			}
			*/
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function HemisphereLightHelper( light, sphereSize ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.colors = [ new Color(), new Color() ];
	
			var geometry = new SphereGeometry( sphereSize, 4, 2 );
			geometry.rotateX( - Math.PI / 2 );
	
			for ( var i = 0, il = 8; i < il; i ++ ) {
	
				geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];
	
			}
	
			var material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );
	
			this.lightSphere = new Mesh( geometry, material );
			this.add( this.lightSphere );
	
			this.update();
	
		}
	
		HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
		HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
	
		HemisphereLightHelper.prototype.dispose = function () {
	
			this.lightSphere.geometry.dispose();
			this.lightSphere.material.dispose();
	
		};
	
		HemisphereLightHelper.prototype.update = function () {
	
			var vector = new Vector3();
	
			return function update() {
	
				this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
				this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );
	
				this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
				this.lightSphere.geometry.colorsNeedUpdate = true;
	
			};
	
		}();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function GridHelper( size, divisions, color1, color2 ) {
	
			divisions = divisions || 1;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
	
			var center = divisions / 2;
			var step = ( size * 2 ) / divisions;
			var vertices = [], colors = [];
	
			for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {
	
				vertices.push( - size, 0, k, size, 0, k );
				vertices.push( k, 0, - size, k, 0, size );
	
				var color = i === center ? color1 : color2;
	
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
	
			}
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		GridHelper.prototype = Object.create( LineSegments.prototype );
		GridHelper.prototype.constructor = GridHelper;
	
		GridHelper.prototype.setColors = function () {
	
			console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function FaceNormalsHelper( object, size, hex, linewidth ) {
	
			// FaceNormalsHelper only supports THREE.Geometry
	
			this.object = object;
	
			this.size = ( size !== undefined ) ? size : 1;
	
			var color = ( hex !== undefined ) ? hex : 0xffff00;
	
			var width = ( linewidth !== undefined ) ? linewidth : 1;
	
			//
	
			var nNormals = 0;
	
			var objGeometry = this.object.geometry;
	
			if ( (objGeometry && objGeometry.isGeometry) ) {
	
				nNormals = objGeometry.faces.length;
	
			} else {
	
				console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
	
			}
	
			//
	
			var geometry = new BufferGeometry();
	
			var positions = new Float32Attribute( nNormals * 2 * 3, 3 );
	
			geometry.addAttribute( 'position', positions );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
	
			//
	
			this.matrixAutoUpdate = false;
			this.update();
	
		}
	
		FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
		FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
	
		FaceNormalsHelper.prototype.update = ( function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();
	
			return function update() {
	
				this.object.updateMatrixWorld( true );
	
				normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
				var matrixWorld = this.object.matrixWorld;
	
				var position = this.geometry.attributes.position;
	
				//
	
				var objGeometry = this.object.geometry;
	
				var vertices = objGeometry.vertices;
	
				var faces = objGeometry.faces;
	
				var idx = 0;
	
				for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					var normal = face.normal;
	
					v1.copy( vertices[ face.a ] )
						.add( vertices[ face.b ] )
						.add( vertices[ face.c ] )
						.divideScalar( 3 )
						.applyMatrix4( matrixWorld );
	
					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
					position.setXYZ( idx, v1.x, v1.y, v1.z );
	
					idx = idx + 1;
	
					position.setXYZ( idx, v2.x, v2.y, v2.z );
	
					idx = idx + 1;
	
				}
	
				position.needsUpdate = true;
	
				return this;
	
			};
	
		}() );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function DirectionalLightHelper( light, size ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			if ( size === undefined ) size = 1;
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32Attribute( [
				- size,   size, 0,
				  size,   size, 0,
				  size, - size, 0,
				- size, - size, 0,
				- size,   size, 0
			], 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.add( new Line( geometry, material ) );
	
			geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
	
			this.add( new Line( geometry, material ));
	
			this.update();
	
		}
	
		DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
		DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
	
		DirectionalLightHelper.prototype.dispose = function () {
	
			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];
	
			lightPlane.geometry.dispose();
			lightPlane.material.dispose();
			targetLine.geometry.dispose();
			targetLine.material.dispose();
	
		};
	
		DirectionalLightHelper.prototype.update = function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var v3 = new Vector3();
	
			return function update() {
	
				v1.setFromMatrixPosition( this.light.matrixWorld );
				v2.setFromMatrixPosition( this.light.target.matrixWorld );
				v3.subVectors( v2, v1 );
	
				var lightPlane = this.children[ 0 ];
				var targetLine = this.children[ 1 ];
	
				lightPlane.lookAt( v3 );
				lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
				targetLine.lookAt( v3 );
				targetLine.scale.z = v3.length();
	
			};
	
		}();
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 *	- shows frustum, line of sight and up of the camera
		 *	- suitable for fast updates
		 * 	- based on frustum visualization in lightgl.js shadowmap example
		 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
		 */
	
		function CameraHelper( camera ) {
	
			var geometry = new Geometry();
			var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );
	
			var pointMap = {};
	
			// colors
	
			var hexFrustum = 0xffaa00;
			var hexCone = 0xff0000;
			var hexUp = 0x00aaff;
			var hexTarget = 0xffffff;
			var hexCross = 0x333333;
	
			// near
	
			addLine( "n1", "n2", hexFrustum );
			addLine( "n2", "n4", hexFrustum );
			addLine( "n4", "n3", hexFrustum );
			addLine( "n3", "n1", hexFrustum );
	
			// far
	
			addLine( "f1", "f2", hexFrustum );
			addLine( "f2", "f4", hexFrustum );
			addLine( "f4", "f3", hexFrustum );
			addLine( "f3", "f1", hexFrustum );
	
			// sides
	
			addLine( "n1", "f1", hexFrustum );
			addLine( "n2", "f2", hexFrustum );
			addLine( "n3", "f3", hexFrustum );
			addLine( "n4", "f4", hexFrustum );
	
			// cone
	
			addLine( "p", "n1", hexCone );
			addLine( "p", "n2", hexCone );
			addLine( "p", "n3", hexCone );
			addLine( "p", "n4", hexCone );
	
			// up
	
			addLine( "u1", "u2", hexUp );
			addLine( "u2", "u3", hexUp );
			addLine( "u3", "u1", hexUp );
	
			// target
	
			addLine( "c", "t", hexTarget );
			addLine( "p", "c", hexCross );
	
			// cross
	
			addLine( "cn1", "cn2", hexCross );
			addLine( "cn3", "cn4", hexCross );
	
			addLine( "cf1", "cf2", hexCross );
			addLine( "cf3", "cf4", hexCross );
	
			function addLine( a, b, hex ) {
	
				addPoint( a, hex );
				addPoint( b, hex );
	
			}
	
			function addPoint( id, hex ) {
	
				geometry.vertices.push( new Vector3() );
				geometry.colors.push( new Color( hex ) );
	
				if ( pointMap[ id ] === undefined ) {
	
					pointMap[ id ] = [];
	
				}
	
				pointMap[ id ].push( geometry.vertices.length - 1 );
	
			}
	
			LineSegments.call( this, geometry, material );
	
			this.camera = camera;
			if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
	
			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.pointMap = pointMap;
	
			this.update();
	
		}
	
		CameraHelper.prototype = Object.create( LineSegments.prototype );
		CameraHelper.prototype.constructor = CameraHelper;
	
		CameraHelper.prototype.update = function () {
	
			var geometry, pointMap;
	
			var vector = new Vector3();
			var camera = new Camera();
	
			function setPoint( point, x, y, z ) {
	
				vector.set( x, y, z ).unproject( camera );
	
				var points = pointMap[ point ];
	
				if ( points !== undefined ) {
	
					for ( var i = 0, il = points.length; i < il; i ++ ) {
	
						geometry.vertices[ points[ i ] ].copy( vector );
	
					}
	
				}
	
			}
	
			return function update() {
	
				geometry = this.geometry;
				pointMap = this.pointMap;
	
				var w = 1, h = 1;
	
				// we need just camera projection matrix
				// world matrix must be identity
	
				camera.projectionMatrix.copy( this.camera.projectionMatrix );
	
				// center / target
	
				setPoint( "c", 0, 0, - 1 );
				setPoint( "t", 0, 0,  1 );
	
				// near
	
				setPoint( "n1", - w, - h, - 1 );
				setPoint( "n2",   w, - h, - 1 );
				setPoint( "n3", - w,   h, - 1 );
				setPoint( "n4",   w,   h, - 1 );
	
				// far
	
				setPoint( "f1", - w, - h, 1 );
				setPoint( "f2",   w, - h, 1 );
				setPoint( "f3", - w,   h, 1 );
				setPoint( "f4",   w,   h, 1 );
	
				// up
	
				setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
				setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
				setPoint( "u3",         0, h * 2,   - 1 );
	
				// cross
	
				setPoint( "cf1", - w,   0, 1 );
				setPoint( "cf2",   w,   0, 1 );
				setPoint( "cf3",   0, - h, 1 );
				setPoint( "cf4",   0,   h, 1 );
	
				setPoint( "cn1", - w,   0, - 1 );
				setPoint( "cn2",   w,   0, - 1 );
				setPoint( "cn3",   0, - h, - 1 );
				setPoint( "cn4",   0,   h, - 1 );
	
				geometry.verticesNeedUpdate = true;
	
			};
	
		}();
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		// a helper to show the world-axis-aligned bounding box for an object
	
		function BoundingBoxHelper( object, hex ) {
	
			var color = ( hex !== undefined ) ? hex : 0x888888;
	
			this.object = object;
	
			this.box = new Box3();
	
			Mesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );
	
		}
	
		BoundingBoxHelper.prototype = Object.create( Mesh.prototype );
		BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;
	
		BoundingBoxHelper.prototype.update = function () {
	
			this.box.setFromObject( this.object );
	
			this.box.getSize( this.scale );
	
			this.box.getCenter( this.position );
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BoxHelper( object, color ) {
	
			if ( color === undefined ) color = 0xffff00;
	
			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
			var positions = new Float32Array( 8 * 3 );
	
			var geometry = new BufferGeometry();
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
			geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			if ( object !== undefined ) {
	
				this.update( object );
	
			}
	
		}
	
		BoxHelper.prototype = Object.create( LineSegments.prototype );
		BoxHelper.prototype.constructor = BoxHelper;
	
		BoxHelper.prototype.update = ( function () {
	
			var box = new Box3();
	
			return function update( object ) {
	
				if ( (object && object.isBox3) ) {
	
					box.copy( object );
	
				} else {
	
					box.setFromObject( object );
	
				}
	
				if ( box.isEmpty() ) return;
	
				var min = box.min;
				var max = box.max;
	
				/*
				  5____4
				1/___0/|
				| 6__|_7
				2/___3/
	
				0: max.x, max.y, max.z
				1: min.x, max.y, max.z
				2: min.x, min.y, max.z
				3: max.x, min.y, max.z
				4: max.x, max.y, min.z
				5: min.x, max.y, min.z
				6: min.x, min.y, min.z
				7: max.x, min.y, min.z
				*/
	
				var position = this.geometry.attributes.position;
				var array = position.array;
	
				array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
				array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
				array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
				array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
				array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
				array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
				array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
				array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
	
				position.needsUpdate = true;
	
				this.geometry.computeBoundingSphere();
	
			};
	
		} )();
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author zz85 / http://github.com/zz85
		 * @author bhouston / http://clara.io
		 *
		 * Creates an arrow for visualizing directions
		 *
		 * Parameters:
		 *  dir - Vector3
		 *  origin - Vector3
		 *  length - Number
		 *  color - color in hex value
		 *  headLength - Number
		 *  headWidth - Number
		 */
	
		var lineGeometry = new BufferGeometry();
		lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
	
		var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );
	
		function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
	
			// dir is assumed to be normalized
	
			Object3D.call( this );
	
			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
			this.position.copy( origin );
	
			this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );
	
			this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );
	
			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );
	
		}
	
		ArrowHelper.prototype = Object.create( Object3D.prototype );
		ArrowHelper.prototype.constructor = ArrowHelper;
	
		ArrowHelper.prototype.setDirection = ( function () {
	
			var axis = new Vector3();
			var radians;
	
			return function setDirection( dir ) {
	
				// dir is assumed to be normalized
	
				if ( dir.y > 0.99999 ) {
	
					this.quaternion.set( 0, 0, 0, 1 );
	
				} else if ( dir.y < - 0.99999 ) {
	
					this.quaternion.set( 1, 0, 0, 0 );
	
				} else {
	
					axis.set( dir.z, 0, - dir.x ).normalize();
	
					radians = Math.acos( dir.y );
	
					this.quaternion.setFromAxisAngle( axis, radians );
	
				}
	
			};
	
		}() );
	
		ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
	
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
			this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
			this.line.updateMatrix();
	
			this.cone.scale.set( headWidth, headLength, headWidth );
			this.cone.position.y = length;
			this.cone.updateMatrix();
	
		};
	
		ArrowHelper.prototype.setColor = function ( color ) {
	
			this.line.material.color.copy( color );
			this.cone.material.color.copy( color );
	
		};
	
		/**
		 * @author sroucheray / http://sroucheray.org/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AxisHelper( size ) {
	
			size = size || 1;
	
			var vertices = new Float32Array( [
				0, 0, 0,  size, 0, 0,
				0, 0, 0,  0, size, 0,
				0, 0, 0,  0, 0, size
			] );
	
			var colors = new Float32Array( [
				1, 0, 0,  1, 0.6, 0,
				0, 1, 0,  0.6, 1, 0,
				0, 0, 1,  0, 0.6, 1
			] );
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		AxisHelper.prototype = Object.create( LineSegments.prototype );
		AxisHelper.prototype.constructor = AxisHelper;
	
		/**
		 * @author zz85 https://github.com/zz85
		 *
		 * Centripetal CatmullRom Curve - which is useful for avoiding
		 * cusps and self-intersections in non-uniform catmull rom curves.
		 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
		 *
		 * curve.type accepts centripetal(default), chordal and catmullrom
		 * curve.tension is used for catmullrom which defaults to 0.5
		 */
	
		var CatmullRomCurve3 = ( function() {
	
			var
				tmp = new Vector3(),
				px = new CubicPoly(),
				py = new CubicPoly(),
				pz = new CubicPoly();
	
			/*
			Based on an optimized c++ solution in
			 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
			 - http://ideone.com/NoEbVM
	
			This CubicPoly class could be used for reusing some variables and calculations,
			but for three.js curve use, it could be possible inlined and flatten into a single function call
			which can be placed in CurveUtils.
			*/
	
			function CubicPoly() {}
	
			/*
			 * Compute coefficients for a cubic polynomial
			 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
			 * such that
			 *   p(0) = x0, p(1) = x1
			 *  and
			 *   p'(0) = t0, p'(1) = t1.
			 */
			CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {
	
				this.c0 = x0;
				this.c1 = t0;
				this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
				this.c3 = 2 * x0 - 2 * x1 + t0 + t1;
	
			};
	
			CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {
	
				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
	
				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;
	
				// initCubicPoly
				this.init( x1, x2, t1, t2 );
	
			};
	
			// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
			CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {
	
				this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
	
			};
	
			CubicPoly.prototype.calc = function( t ) {
	
				var t2 = t * t;
				var t3 = t2 * t;
				return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;
	
			};
	
			// Subclass Three.js curve
			return Curve.create(
	
				function ( p /* array of Vector3 */ ) {
	
					this.points = p || [];
					this.closed = false;
	
				},
	
				function ( t ) {
	
					var points = this.points,
						point, intPoint, weight, l;
	
					l = points.length;
	
					if ( l < 2 ) console.log( 'duh, you need at least 2 points' );
	
					point = ( l - ( this.closed ? 0 : 1 ) ) * t;
					intPoint = Math.floor( point );
					weight = point - intPoint;
	
					if ( this.closed ) {
	
						intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
	
					} else if ( weight === 0 && intPoint === l - 1 ) {
	
						intPoint = l - 2;
						weight = 1;
	
					}
	
					var p0, p1, p2, p3; // 4 points
	
					if ( this.closed || intPoint > 0 ) {
	
						p0 = points[ ( intPoint - 1 ) % l ];
	
					} else {
	
						// extrapolate first point
						tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
						p0 = tmp;
	
					}
	
					p1 = points[ intPoint % l ];
					p2 = points[ ( intPoint + 1 ) % l ];
	
					if ( this.closed || intPoint + 2 < l ) {
	
						p3 = points[ ( intPoint + 2 ) % l ];
	
					} else {
	
						// extrapolate last point
						tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
						p3 = tmp;
	
					}
	
					if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {
	
						// init Centripetal / Chordal Catmull-Rom
						var pow = this.type === 'chordal' ? 0.5 : 0.25;
						var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
						var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
						var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
	
						// safety check for repeated points
						if ( dt1 < 1e-4 ) dt1 = 1.0;
						if ( dt0 < 1e-4 ) dt0 = dt1;
						if ( dt2 < 1e-4 ) dt2 = dt1;
	
						px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
						py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
						pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
	
					} else if ( this.type === 'catmullrom' ) {
	
						var tension = this.tension !== undefined ? this.tension : 0.5;
						px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
						py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
						pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );
	
					}
	
					var v = new Vector3(
						px.calc( weight ),
						py.calc( weight ),
						pz.calc( weight )
					);
	
					return v;
	
				}
	
			);
	
		} )();
	
		/**************************************************************
		 *	Closed Spline 3D curve
		 **************************************************************/
	
	
		function ClosedSplineCurve3( points ) {
	
			console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
			this.closed = true;
	
		}
	
		ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	
		/**************************************************************
		 *	Spline 3D curve
		 **************************************************************/
	
	
		var SplineCurve3 = Curve.create(
	
			function ( points /* array of Vector3 */ ) {
	
				console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
				this.points = ( points === undefined ) ? [] : points;
	
			},
	
			function ( t ) {
	
				var points = this.points;
				var point = ( points.length - 1 ) * t;
	
				var intPoint = Math.floor( point );
				var weight = point - intPoint;
	
				var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
				var point1 = points[ intPoint ];
				var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
				var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
				var interpolate = CurveUtils.interpolate;
	
				return new Vector3(
					interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
					interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
					interpolate( point0.z, point1.z, point2.z, point3.z, weight )
				);
	
			}
	
		);
	
		/**************************************************************
		 *	Cubic Bezier 3D curve
		 **************************************************************/
	
		var CubicBezierCurve3 = Curve.create(
	
			function ( v0, v1, v2, v3 ) {
	
				this.v0 = v0;
				this.v1 = v1;
				this.v2 = v2;
				this.v3 = v3;
	
			},
	
			function ( t ) {
	
				var b3 = ShapeUtils.b3;
	
				return new Vector3(
					b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
					b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
					b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
				);
	
			}
	
		);
	
		/**************************************************************
		 *	Quadratic Bezier 3D curve
		 **************************************************************/
	
		var QuadraticBezierCurve3 = Curve.create(
	
			function ( v0, v1, v2 ) {
	
				this.v0 = v0;
				this.v1 = v1;
				this.v2 = v2;
	
			},
	
			function ( t ) {
	
				var b2 = ShapeUtils.b2;
	
				return new Vector3(
					b2( t, this.v0.x, this.v1.x, this.v2.x ),
					b2( t, this.v0.y, this.v1.y, this.v2.y ),
					b2( t, this.v0.z, this.v1.z, this.v2.z )
				);
	
			}
	
		);
	
		/**************************************************************
		 *	Line3D
		 **************************************************************/
	
		var LineCurve3 = Curve.create(
	
			function ( v1, v2 ) {
	
				this.v1 = v1;
				this.v2 = v2;
	
			},
	
			function ( t ) {
	
				if ( t === 1 ) {
	
					return this.v2.clone();
	
				}
	
				var vector = new Vector3();
	
				vector.subVectors( this.v2, this.v1 ); // diff
				vector.multiplyScalar( t );
				vector.add( this.v1 );
	
				return vector;
	
			}
	
		);
	
		/**************************************************************
		 *	Arc curve
		 **************************************************************/
	
		function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
			EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
		}
	
		ArcCurve.prototype = Object.create( EllipseCurve.prototype );
		ArcCurve.prototype.constructor = ArcCurve;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var SceneUtils = {
	
			createMultiMaterialObject: function ( geometry, materials ) {
	
				var group = new Group();
	
				for ( var i = 0, l = materials.length; i < l; i ++ ) {
	
					group.add( new Mesh( geometry, materials[ i ] ) );
	
				}
	
				return group;
	
			},
	
			detach: function ( child, parent, scene ) {
	
				child.applyMatrix( parent.matrixWorld );
				parent.remove( child );
				scene.add( child );
	
			},
	
			attach: function ( child, scene, parent ) {
	
				var matrixWorldInverse = new Matrix4();
				matrixWorldInverse.getInverse( parent.matrixWorld );
				child.applyMatrix( matrixWorldInverse );
	
				scene.remove( child );
				parent.add( child );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Face4 ( a, b, c, d, normal, color, materialIndex ) {
			console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
			return new Face3( a, b, c, normal, color, materialIndex );
		}
	
		var LineStrip = 0;
	
		var LinePieces = 1;
	
		function PointCloud ( geometry, material ) {
			console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
			return new Points( geometry, material );
		}
	
		function ParticleSystem ( geometry, material ) {
			console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
			return new Points( geometry, material );
		}
	
		function PointCloudMaterial ( parameters ) {
			console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
		}
	
		function ParticleBasicMaterial ( parameters ) {
			console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
		}
	
		function ParticleSystemMaterial ( parameters ) {
			console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
		}
	
		function Vertex ( x, y, z ) {
			console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
			return new Vector3( x, y, z );
		}
	
		//
	
		function EdgesHelper( object, hex ) {
			console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
			return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
		}
	
		function WireframeHelper( object, hex ) {
			console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
			return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
		}
	
		//
	
		Object.assign( Box2.prototype, {
			center: function ( optionalTarget ) {
				console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
			},
			empty: function () {
				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			},
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			},
			size: function ( optionalTarget ) {
				console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
			}
		} );
	
		Object.assign( Box3.prototype, {
			center: function ( optionalTarget ) {
				console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
			},
			empty: function () {
				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			},
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			},
			isIntersectionSphere: function ( sphere ) {
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			},
			size: function ( optionalTarget ) {
				console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
			}
		} );
	
		Object.assign( Line3.prototype, {
			center: function ( optionalTarget ) {
				console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
			}
		} );
	
		Object.assign( Matrix3.prototype, {
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
			},
			multiplyVector3Array: function ( a ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		} );
	
		Object.assign( Matrix4.prototype, {
			extractPosition: function ( m ) {
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
			},
			setRotationFromQuaternion: function ( q ) {
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
			},
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
				return vector.applyProjection( this );
			},
			multiplyVector4: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			},
			multiplyVector3Array: function ( a ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			},
			rotateAxis: function ( v ) {
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
			},
			crossVector: function ( vector ) {
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			},
			translate: function ( v ) {
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
			},
			rotateX: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
			},
			rotateY: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
			},
			rotateZ: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
			},
			rotateByAxis: function ( axis, angle ) {
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
			}
		} );
	
		Object.assign( Plane.prototype, {
			isIntersectionLine: function ( line ) {
				console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
				return this.intersectsLine( line );
			}
		} );
	
		Object.assign( Quaternion.prototype, {
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
				return vector.applyQuaternion( this );
			}
		} );
	
		Object.assign( Ray.prototype, {
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			},
			isIntersectionPlane: function ( plane ) {
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
			},
			isIntersectionSphere: function ( sphere ) {
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		} );
	
		Object.assign( Shape.prototype, {
			extrude: function ( options ) {
				console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
				return new ExtrudeGeometry( this, options );
			},
			makeGeometry: function ( options ) {
				console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
				return new ShapeGeometry( this, options );
			}
		} );
	
		Object.assign( Vector3.prototype, {
			setEulerFromRotationMatrix: function () {
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
			},
			setEulerFromQuaternion: function () {
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
			},
			getPositionFromMatrix: function ( m ) {
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
			},
			getScaleFromMatrix: function ( m ) {
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
			},
			getColumnFromMatrix: function ( index, matrix ) {
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( matrix, index );
			}
		} );
	
		//
	
		Object.assign( Object3D.prototype, {
			getChildByName: function ( name ) {
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
			},
			renderDepth: function ( value ) {
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
			},
			translate: function ( distance, axis ) {
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
			}
		} );
	
		Object.defineProperties( Object3D.prototype, {
			eulerOrder: {
				get: function () {
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					return this.rotation.order;
				},
				set: function ( value ) {
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					this.rotation.order = value;
				}
			},
			useQuaternion: {
				get: function () {
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
				},
				set: function ( value ) {
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
				}
			}
		} );
	
		Object.defineProperties( LOD.prototype, {
			objects: {
				get: function () {
					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;
				}
			}
		} );
	
		//
	
		PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
	
			console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
					"Use .setFocalLength and .filmGauge for a photographic setup." );
	
			if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
			this.setFocalLength( focalLength );
	
		};
	
		//
	
		Object.defineProperties( Light.prototype, {
			onlyShadow: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .onlyShadow has been removed.' );
				}
			},
			shadowCameraFov: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
					this.shadow.camera.fov = value;
				}
			},
			shadowCameraLeft: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
					this.shadow.camera.left = value;
				}
			},
			shadowCameraRight: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
					this.shadow.camera.right = value;
				}
			},
			shadowCameraTop: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
					this.shadow.camera.top = value;
				}
			},
			shadowCameraBottom: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
					this.shadow.camera.bottom = value;
				}
			},
			shadowCameraNear: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
					this.shadow.camera.near = value;
				}
			},
			shadowCameraFar: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
					this.shadow.camera.far = value;
				}
			},
			shadowCameraVisible: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
				}
			},
			shadowBias: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
					this.shadow.bias = value;
				}
			},
			shadowDarkness: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
				}
			},
			shadowMapWidth: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
					this.shadow.mapSize.width = value;
				}
			},
			shadowMapHeight: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
					this.shadow.mapSize.height = value;
				}
			}
		} );
	
		//
	
		Object.defineProperties( BufferAttribute.prototype, {
			length: {
				get: function () {
					console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
					return this.array.length;
				}
			}
		} );
	
		Object.assign( BufferGeometry.prototype, {
			addIndex: function ( index ) {
				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );
			},
			addDrawCall: function ( start, count, indexOffset ) {
				if ( indexOffset !== undefined ) {
					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );
			},
			clearDrawCalls: function () {
				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();
			},
			computeTangents: function () {
				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
			},
			computeOffsets: function () {
				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
			}
		} );
	
		Object.defineProperties( BufferGeometry.prototype, {
			drawcalls: {
				get: function () {
					console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
					return this.groups;
				}
			},
			offsets: {
				get: function () {
					console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
					return this.groups;
				}
			}
		} );
	
		//
	
		Object.defineProperties( Material.prototype, {
			wrapAround: {
				get: function () {
					console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
				},
				set: function ( value ) {
					console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
				}
			},
			wrapRGB: {
				get: function () {
					console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
					return new Color();
				}
			}
		} );
	
		Object.defineProperties( MeshPhongMaterial.prototype, {
			metal: {
				get: function () {
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
					return false;
				},
				set: function ( value ) {
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
				}
			}
		} );
	
		Object.defineProperties( ShaderMaterial.prototype, {
			derivatives: {
				get: function () {
					console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					return this.extensions.derivatives;
				},
				set: function ( value ) {
					console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					this.extensions.derivatives = value;
				}
			}
		} );
	
		//
	
		EventDispatcher.prototype = Object.assign( Object.create( {
	
			// Note: Extra base ensures these properties are not 'assign'ed.
	
			constructor: EventDispatcher,
	
			apply: function ( target ) {
	
				console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
						"just inherit or Object.assign the prototype to mix-in." );
	
				Object.assign( target, this );
	
			}
	
		} ), EventDispatcher.prototype );
	
		//
	
		Object.defineProperties( Uniform.prototype, {
			dynamic: {
				set: function ( value ) {
					console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
				}
			},
			onUpdate: {
				value: function () {
					console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
					return this;
				}
			}
		} );
	
		//
	
		Object.assign( WebGLRenderer.prototype, {
			supportsFloatTextures: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
			},
			supportsHalfFloatTextures: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
			},
			supportsStandardDerivatives: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
			},
			supportsCompressedTextureS3TC: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
			},
			supportsCompressedTexturePVRTC: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
			},
			supportsBlendMinMax: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
			},
			supportsVertexTextures: function () {
				return this.capabilities.vertexTextures;
			},
			supportsInstancedArrays: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
			},
			enableScissorTest: function ( boolean ) {
				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );
			},
			initMaterial: function () {
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
			},
			addPrePlugin: function () {
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
			},
			addPostPlugin: function () {
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
			},
			updateShadowMap: function () {
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
			}
		} );
	
		Object.defineProperties( WebGLRenderer.prototype, {
			shadowMapEnabled: {
				get: function () {
					return this.shadowMap.enabled;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					this.shadowMap.enabled = value;
				}
			},
			shadowMapType: {
				get: function () {
					return this.shadowMap.type;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					this.shadowMap.type = value;
				}
			},
			shadowMapCullFace: {
				get: function () {
					return this.shadowMap.cullFace;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
					this.shadowMap.cullFace = value;
				}
			}
		} );
	
		Object.defineProperties( WebGLShadowMap.prototype, {
			cullFace: {
				get: function () {
					return this.renderReverseSided ? CullFaceFront : CullFaceBack;
				},
				set: function ( cullFace ) {
					var value = ( cullFace !== CullFaceBack );
					console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
					this.renderReverseSided = value;
				}
			}
		} );
	
		//
	
		Object.defineProperties( WebGLRenderTarget.prototype, {
			wrapS: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					return this.texture.wrapS;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					this.texture.wrapS = value;
				}
			},
			wrapT: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					return this.texture.wrapT;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					this.texture.wrapT = value;
				}
			},
			magFilter: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					return this.texture.magFilter;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					this.texture.magFilter = value;
				}
			},
			minFilter: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					return this.texture.minFilter;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					this.texture.minFilter = value;
				}
			},
			anisotropy: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					return this.texture.anisotropy;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					this.texture.anisotropy = value;
				}
			},
			offset: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					return this.texture.offset;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					this.texture.offset = value;
				}
			},
			repeat: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					return this.texture.repeat;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					this.texture.repeat = value;
				}
			},
			format: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					return this.texture.format;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					this.texture.format = value;
				}
			},
			type: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					return this.texture.type;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					this.texture.type = value;
				}
			},
			generateMipmaps: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					return this.texture.generateMipmaps;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					this.texture.generateMipmaps = value;
				}
			}
		} );
	
		//
	
		Object.assign( Audio.prototype, {
			load: function ( file ) {
				console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
				var scope = this;
				var audioLoader = new AudioLoader();
				audioLoader.load( file, function ( buffer ) {
					scope.setBuffer( buffer );
				} );
				return this;
			}
		} );
	
		Object.assign( AudioAnalyser.prototype, {
			getData: function ( file ) {
				console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
				return this.getFrequencyData();
			}
		} );
	
		//
	
		var GeometryUtils = {
	
			merge: function ( geometry1, geometry2, materialIndexOffset ) {
	
				console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
	
				var matrix;
	
				if ( geometry2.isMesh ) {
	
					geometry2.matrixAutoUpdate && geometry2.updateMatrix();
	
					matrix = geometry2.matrix;
					geometry2 = geometry2.geometry;
	
				}
	
				geometry1.merge( geometry2, matrix, materialIndexOffset );
	
			},
	
			center: function ( geometry ) {
	
				console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
				return geometry.center();
	
			}
	
		};
	
		var ImageUtils = {
	
			crossOrigin: undefined,
	
			loadTexture: function ( url, mapping, onLoad, onError ) {
	
				console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
	
				var loader = new TextureLoader();
				loader.setCrossOrigin( this.crossOrigin );
	
				var texture = loader.load( url, onLoad, undefined, onError );
	
				if ( mapping ) texture.mapping = mapping;
	
				return texture;
	
			},
	
			loadTextureCube: function ( urls, mapping, onLoad, onError ) {
	
				console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
	
				var loader = new CubeTextureLoader();
				loader.setCrossOrigin( this.crossOrigin );
	
				var texture = loader.load( urls, onLoad, undefined, onError );
	
				if ( mapping ) texture.mapping = mapping;
	
				return texture;
	
			},
	
			loadCompressedTexture: function () {
	
				console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
	
			},
	
			loadCompressedTextureCube: function () {
	
				console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
	
			}
	
		};
	
		//
	
		function Projector () {
	
			console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );
	
			this.projectVector = function ( vector, camera ) {
	
				console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
				vector.project( camera );
	
			};
	
			this.unprojectVector = function ( vector, camera ) {
	
				console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
				vector.unproject( camera );
	
			};
	
			this.pickingRay = function ( vector, camera ) {
	
				console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );
	
			};
	
		}
	
		//
	
		function CanvasRenderer () {
	
			console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );
	
			this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			this.clear = function () {};
			this.render = function () {};
			this.setClearColor = function () {};
			this.setSize = function () {};
	
		}
	
		exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
		exports.WebGLRenderTarget = WebGLRenderTarget;
		exports.WebGLRenderer = WebGLRenderer;
		exports.ShaderLib = ShaderLib;
		exports.UniformsLib = UniformsLib;
		exports.UniformsUtils = UniformsUtils;
		exports.ShaderChunk = ShaderChunk;
		exports.FogExp2 = FogExp2;
		exports.Fog = Fog;
		exports.Scene = Scene;
		exports.LensFlare = LensFlare;
		exports.Sprite = Sprite;
		exports.LOD = LOD;
		exports.SkinnedMesh = SkinnedMesh;
		exports.Skeleton = Skeleton;
		exports.Bone = Bone;
		exports.Mesh = Mesh;
		exports.LineSegments = LineSegments;
		exports.Line = Line;
		exports.Points = Points;
		exports.Group = Group;
		exports.VideoTexture = VideoTexture;
		exports.DataTexture = DataTexture;
		exports.CompressedTexture = CompressedTexture;
		exports.CubeTexture = CubeTexture;
		exports.CanvasTexture = CanvasTexture;
		exports.DepthTexture = DepthTexture;
		exports.TextureIdCount = TextureIdCount;
		exports.Texture = Texture;
		exports.MaterialIdCount = MaterialIdCount;
		exports.CompressedTextureLoader = CompressedTextureLoader;
		exports.BinaryTextureLoader = BinaryTextureLoader;
		exports.DataTextureLoader = DataTextureLoader;
		exports.CubeTextureLoader = CubeTextureLoader;
		exports.TextureLoader = TextureLoader;
		exports.ObjectLoader = ObjectLoader;
		exports.MaterialLoader = MaterialLoader;
		exports.BufferGeometryLoader = BufferGeometryLoader;
		exports.DefaultLoadingManager = DefaultLoadingManager;
		exports.LoadingManager = LoadingManager;
		exports.JSONLoader = JSONLoader;
		exports.ImageLoader = ImageLoader;
		exports.FontLoader = FontLoader;
		exports.XHRLoader = XHRLoader;
		exports.Loader = Loader;
		exports.Cache = Cache;
		exports.AudioLoader = AudioLoader;
		exports.SpotLightShadow = SpotLightShadow;
		exports.SpotLight = SpotLight;
		exports.PointLight = PointLight;
		exports.HemisphereLight = HemisphereLight;
		exports.DirectionalLightShadow = DirectionalLightShadow;
		exports.DirectionalLight = DirectionalLight;
		exports.AmbientLight = AmbientLight;
		exports.LightShadow = LightShadow;
		exports.Light = Light;
		exports.StereoCamera = StereoCamera;
		exports.PerspectiveCamera = PerspectiveCamera;
		exports.OrthographicCamera = OrthographicCamera;
		exports.CubeCamera = CubeCamera;
		exports.Camera = Camera;
		exports.AudioListener = AudioListener;
		exports.PositionalAudio = PositionalAudio;
		exports.getAudioContext = getAudioContext;
		exports.AudioAnalyser = AudioAnalyser;
		exports.Audio = Audio;
		exports.VectorKeyframeTrack = VectorKeyframeTrack;
		exports.StringKeyframeTrack = StringKeyframeTrack;
		exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
		exports.NumberKeyframeTrack = NumberKeyframeTrack;
		exports.ColorKeyframeTrack = ColorKeyframeTrack;
		exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
		exports.PropertyMixer = PropertyMixer;
		exports.PropertyBinding = PropertyBinding;
		exports.KeyframeTrack = KeyframeTrack;
		exports.AnimationUtils = AnimationUtils;
		exports.AnimationObjectGroup = AnimationObjectGroup;
		exports.AnimationMixer = AnimationMixer;
		exports.AnimationClip = AnimationClip;
		exports.Uniform = Uniform;
		exports.InstancedBufferGeometry = InstancedBufferGeometry;
		exports.BufferGeometry = BufferGeometry;
		exports.GeometryIdCount = GeometryIdCount;
		exports.Geometry = Geometry;
		exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
		exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
		exports.InterleavedBuffer = InterleavedBuffer;
		exports.InstancedBufferAttribute = InstancedBufferAttribute;
		exports.DynamicBufferAttribute = DynamicBufferAttribute;
		exports.Float64Attribute = Float64Attribute;
		exports.Float32Attribute = Float32Attribute;
		exports.Uint32Attribute = Uint32Attribute;
		exports.Int32Attribute = Int32Attribute;
		exports.Uint16Attribute = Uint16Attribute;
		exports.Int16Attribute = Int16Attribute;
		exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
		exports.Uint8Attribute = Uint8Attribute;
		exports.Int8Attribute = Int8Attribute;
		exports.BufferAttribute = BufferAttribute;
		exports.Face3 = Face3;
		exports.Object3DIdCount = Object3DIdCount;
		exports.Object3D = Object3D;
		exports.Raycaster = Raycaster;
		exports.Layers = Layers;
		exports.EventDispatcher = EventDispatcher;
		exports.Clock = Clock;
		exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
		exports.LinearInterpolant = LinearInterpolant;
		exports.DiscreteInterpolant = DiscreteInterpolant;
		exports.CubicInterpolant = CubicInterpolant;
		exports.Interpolant = Interpolant;
		exports.Triangle = Triangle;
		exports.Spline = Spline;
		exports.Math = _Math;
		exports.Spherical = Spherical;
		exports.Plane = Plane;
		exports.Frustum = Frustum;
		exports.Sphere = Sphere;
		exports.Ray = Ray;
		exports.Matrix4 = Matrix4;
		exports.Matrix3 = Matrix3;
		exports.Box3 = Box3;
		exports.Box2 = Box2;
		exports.Line3 = Line3;
		exports.Euler = Euler;
		exports.Vector4 = Vector4;
		exports.Vector3 = Vector3;
		exports.Vector2 = Vector2;
		exports.Quaternion = Quaternion;
		exports.ColorKeywords = ColorKeywords;
		exports.Color = Color;
		exports.MorphBlendMesh = MorphBlendMesh;
		exports.ImmediateRenderObject = ImmediateRenderObject;
		exports.VertexNormalsHelper = VertexNormalsHelper;
		exports.SpotLightHelper = SpotLightHelper;
		exports.SkeletonHelper = SkeletonHelper;
		exports.PointLightHelper = PointLightHelper;
		exports.HemisphereLightHelper = HemisphereLightHelper;
		exports.GridHelper = GridHelper;
		exports.FaceNormalsHelper = FaceNormalsHelper;
		exports.DirectionalLightHelper = DirectionalLightHelper;
		exports.CameraHelper = CameraHelper;
		exports.BoundingBoxHelper = BoundingBoxHelper;
		exports.BoxHelper = BoxHelper;
		exports.ArrowHelper = ArrowHelper;
		exports.AxisHelper = AxisHelper;
		exports.ClosedSplineCurve3 = ClosedSplineCurve3;
		exports.CatmullRomCurve3 = CatmullRomCurve3;
		exports.SplineCurve3 = SplineCurve3;
		exports.CubicBezierCurve3 = CubicBezierCurve3;
		exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
		exports.LineCurve3 = LineCurve3;
		exports.ArcCurve = ArcCurve;
		exports.EllipseCurve = EllipseCurve;
		exports.SplineCurve = SplineCurve;
		exports.CubicBezierCurve = CubicBezierCurve;
		exports.QuadraticBezierCurve = QuadraticBezierCurve;
		exports.LineCurve = LineCurve;
		exports.Shape = Shape;
		exports.ShapePath = ShapePath;
		exports.Path = Path;
		exports.Font = Font;
		exports.CurvePath = CurvePath;
		exports.Curve = Curve;
		exports.ShapeUtils = ShapeUtils;
		exports.SceneUtils = SceneUtils;
		exports.CurveUtils = CurveUtils;
		exports.WireframeGeometry = WireframeGeometry;
		exports.ParametricGeometry = ParametricGeometry;
		exports.ParametricBufferGeometry = ParametricBufferGeometry;
		exports.TetrahedronGeometry = TetrahedronGeometry;
		exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
		exports.OctahedronGeometry = OctahedronGeometry;
		exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
		exports.IcosahedronGeometry = IcosahedronGeometry;
		exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
		exports.DodecahedronGeometry = DodecahedronGeometry;
		exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
		exports.PolyhedronGeometry = PolyhedronGeometry;
		exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
		exports.TubeGeometry = TubeGeometry;
		exports.TubeBufferGeometry = TubeBufferGeometry;
		exports.TorusKnotGeometry = TorusKnotGeometry;
		exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
		exports.TorusGeometry = TorusGeometry;
		exports.TorusBufferGeometry = TorusBufferGeometry;
		exports.TextGeometry = TextGeometry;
		exports.SphereBufferGeometry = SphereBufferGeometry;
		exports.SphereGeometry = SphereGeometry;
		exports.RingGeometry = RingGeometry;
		exports.RingBufferGeometry = RingBufferGeometry;
		exports.PlaneBufferGeometry = PlaneBufferGeometry;
		exports.PlaneGeometry = PlaneGeometry;
		exports.LatheGeometry = LatheGeometry;
		exports.LatheBufferGeometry = LatheBufferGeometry;
		exports.ShapeGeometry = ShapeGeometry;
		exports.ExtrudeGeometry = ExtrudeGeometry;
		exports.EdgesGeometry = EdgesGeometry;
		exports.ConeGeometry = ConeGeometry;
		exports.ConeBufferGeometry = ConeBufferGeometry;
		exports.CylinderGeometry = CylinderGeometry;
		exports.CylinderBufferGeometry = CylinderBufferGeometry;
		exports.CircleBufferGeometry = CircleBufferGeometry;
		exports.CircleGeometry = CircleGeometry;
		exports.BoxBufferGeometry = BoxBufferGeometry;
		exports.BoxGeometry = BoxGeometry;
		exports.ShadowMaterial = ShadowMaterial;
		exports.SpriteMaterial = SpriteMaterial;
		exports.RawShaderMaterial = RawShaderMaterial;
		exports.ShaderMaterial = ShaderMaterial;
		exports.PointsMaterial = PointsMaterial;
		exports.MultiMaterial = MultiMaterial;
		exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
		exports.MeshStandardMaterial = MeshStandardMaterial;
		exports.MeshPhongMaterial = MeshPhongMaterial;
		exports.MeshNormalMaterial = MeshNormalMaterial;
		exports.MeshLambertMaterial = MeshLambertMaterial;
		exports.MeshDepthMaterial = MeshDepthMaterial;
		exports.MeshBasicMaterial = MeshBasicMaterial;
		exports.LineDashedMaterial = LineDashedMaterial;
		exports.LineBasicMaterial = LineBasicMaterial;
		exports.Material = Material;
		exports.REVISION = REVISION;
		exports.MOUSE = MOUSE;
		exports.CullFaceNone = CullFaceNone;
		exports.CullFaceBack = CullFaceBack;
		exports.CullFaceFront = CullFaceFront;
		exports.CullFaceFrontBack = CullFaceFrontBack;
		exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
		exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
		exports.BasicShadowMap = BasicShadowMap;
		exports.PCFShadowMap = PCFShadowMap;
		exports.PCFSoftShadowMap = PCFSoftShadowMap;
		exports.FrontSide = FrontSide;
		exports.BackSide = BackSide;
		exports.DoubleSide = DoubleSide;
		exports.FlatShading = FlatShading;
		exports.SmoothShading = SmoothShading;
		exports.NoColors = NoColors;
		exports.FaceColors = FaceColors;
		exports.VertexColors = VertexColors;
		exports.NoBlending = NoBlending;
		exports.NormalBlending = NormalBlending;
		exports.AdditiveBlending = AdditiveBlending;
		exports.SubtractiveBlending = SubtractiveBlending;
		exports.MultiplyBlending = MultiplyBlending;
		exports.CustomBlending = CustomBlending;
		exports.BlendingMode = BlendingMode;
		exports.AddEquation = AddEquation;
		exports.SubtractEquation = SubtractEquation;
		exports.ReverseSubtractEquation = ReverseSubtractEquation;
		exports.MinEquation = MinEquation;
		exports.MaxEquation = MaxEquation;
		exports.ZeroFactor = ZeroFactor;
		exports.OneFactor = OneFactor;
		exports.SrcColorFactor = SrcColorFactor;
		exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
		exports.SrcAlphaFactor = SrcAlphaFactor;
		exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
		exports.DstAlphaFactor = DstAlphaFactor;
		exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
		exports.DstColorFactor = DstColorFactor;
		exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
		exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
		exports.NeverDepth = NeverDepth;
		exports.AlwaysDepth = AlwaysDepth;
		exports.LessDepth = LessDepth;
		exports.LessEqualDepth = LessEqualDepth;
		exports.EqualDepth = EqualDepth;
		exports.GreaterEqualDepth = GreaterEqualDepth;
		exports.GreaterDepth = GreaterDepth;
		exports.NotEqualDepth = NotEqualDepth;
		exports.MultiplyOperation = MultiplyOperation;
		exports.MixOperation = MixOperation;
		exports.AddOperation = AddOperation;
		exports.NoToneMapping = NoToneMapping;
		exports.LinearToneMapping = LinearToneMapping;
		exports.ReinhardToneMapping = ReinhardToneMapping;
		exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
		exports.CineonToneMapping = CineonToneMapping;
		exports.UVMapping = UVMapping;
		exports.CubeReflectionMapping = CubeReflectionMapping;
		exports.CubeRefractionMapping = CubeRefractionMapping;
		exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
		exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
		exports.SphericalReflectionMapping = SphericalReflectionMapping;
		exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
		exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
		exports.TextureMapping = TextureMapping;
		exports.RepeatWrapping = RepeatWrapping;
		exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
		exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
		exports.TextureWrapping = TextureWrapping;
		exports.NearestFilter = NearestFilter;
		exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
		exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
		exports.LinearFilter = LinearFilter;
		exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
		exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
		exports.TextureFilter = TextureFilter;
		exports.UnsignedByteType = UnsignedByteType;
		exports.ByteType = ByteType;
		exports.ShortType = ShortType;
		exports.UnsignedShortType = UnsignedShortType;
		exports.IntType = IntType;
		exports.UnsignedIntType = UnsignedIntType;
		exports.FloatType = FloatType;
		exports.HalfFloatType = HalfFloatType;
		exports.UnsignedShort4444Type = UnsignedShort4444Type;
		exports.UnsignedShort5551Type = UnsignedShort5551Type;
		exports.UnsignedShort565Type = UnsignedShort565Type;
		exports.UnsignedInt248Type = UnsignedInt248Type;
		exports.AlphaFormat = AlphaFormat;
		exports.RGBFormat = RGBFormat;
		exports.RGBAFormat = RGBAFormat;
		exports.LuminanceFormat = LuminanceFormat;
		exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
		exports.RGBEFormat = RGBEFormat;
		exports.DepthFormat = DepthFormat;
		exports.DepthStencilFormat = DepthStencilFormat;
		exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
		exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
		exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
		exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
		exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
		exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
		exports.RGB_ETC1_Format = RGB_ETC1_Format;
		exports.LoopOnce = LoopOnce;
		exports.LoopRepeat = LoopRepeat;
		exports.LoopPingPong = LoopPingPong;
		exports.InterpolateDiscrete = InterpolateDiscrete;
		exports.InterpolateLinear = InterpolateLinear;
		exports.InterpolateSmooth = InterpolateSmooth;
		exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
		exports.ZeroSlopeEnding = ZeroSlopeEnding;
		exports.WrapAroundEnding = WrapAroundEnding;
		exports.TrianglesDrawMode = TrianglesDrawMode;
		exports.TriangleStripDrawMode = TriangleStripDrawMode;
		exports.TriangleFanDrawMode = TriangleFanDrawMode;
		exports.LinearEncoding = LinearEncoding;
		exports.sRGBEncoding = sRGBEncoding;
		exports.GammaEncoding = GammaEncoding;
		exports.RGBEEncoding = RGBEEncoding;
		exports.LogLuvEncoding = LogLuvEncoding;
		exports.RGBM7Encoding = RGBM7Encoding;
		exports.RGBM16Encoding = RGBM16Encoding;
		exports.RGBDEncoding = RGBDEncoding;
		exports.BasicDepthPacking = BasicDepthPacking;
		exports.RGBADepthPacking = RGBADepthPacking;
		exports.CubeGeometry = BoxGeometry;
		exports.Face4 = Face4;
		exports.LineStrip = LineStrip;
		exports.LinePieces = LinePieces;
		exports.MeshFaceMaterial = MultiMaterial;
		exports.PointCloud = PointCloud;
		exports.Particle = Sprite;
		exports.ParticleSystem = ParticleSystem;
		exports.PointCloudMaterial = PointCloudMaterial;
		exports.ParticleBasicMaterial = ParticleBasicMaterial;
		exports.ParticleSystemMaterial = ParticleSystemMaterial;
		exports.Vertex = Vertex;
		exports.EdgesHelper = EdgesHelper;
		exports.WireframeHelper = WireframeHelper;
		exports.GeometryUtils = GeometryUtils;
		exports.ImageUtils = ImageUtils;
		exports.Projector = Projector;
		exports.CanvasRenderer = CanvasRenderer;
	
		Object.defineProperty(exports, '__esModule', { value: true });
	
		Object.defineProperty( exports, 'AudioContext', {
			get: function () {
				return exports.getAudioContext();
			}
		});
	
	})));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// stats.js - http://github.com/mrdoob/stats.js
	(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
	u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
	1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
	b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,t){ true?module.exports=t(__webpack_require__(1)):"function"==typeof define&&define.amd?define("physi-webpack",["three"],t):"object"==typeof exports?exports["physi-webpack"]=t(require("three")):e["physi-webpack"]=t(e.three)}(this,function(e){return function(e){function t(i){if(o[i])return o[i].exports;var n=o[i]={exports:{},id:i,loaded:!1};return e[i].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0});var r,c,_,s,a,f,l,p,u,b=o(1),d=n(b),h=o(2),m=i(h),y=!1,g=v,v={},C=new d.Vector3,w=new d.Vector3,k=new d.Matrix4,S=new d.Quaternion,P={WORLDREPORT:0,COLLISIONREPORT:1,VEHICLEREPORT:2,CONSTRAINTREPORT:3},L=14,j=5,I=9,R=6;v.scripts={},c=function(){this._eventListeners={}},c.prototype.addEventListener=function(e,t){this._eventListeners.hasOwnProperty(e)||(this._eventListeners[e]=[]),this._eventListeners[e].push(t)},c.prototype.removeEventListener=function(e,t){var o;return!!this._eventListeners.hasOwnProperty(e)&&((o=this._eventListeners[e].indexOf(t))>=0&&(this._eventListeners[e].splice(o,1),!0))},c.prototype.dispatchEvent=function(e){var t,o=Array.prototype.splice.call(arguments,1);if(this._eventListeners.hasOwnProperty(e))for(t=0;t<this._eventListeners[e].length;t++)this._eventListeners[e][t].apply(this,o)},c.make=function(e){e.prototype.addEventListener=c.prototype.addEventListener,e.prototype.removeEventListener=c.prototype.removeEventListener,e.prototype.dispatchEvent=c.prototype.dispatchEvent},_=function(){var e=1;return function(){return e++}}(),s=function(e,t,o,i){return new d.Vector3(Math.atan2(2*(e*i-t*o),i*i-e*e-t*t+o*o),Math.asin(2*(e*o+t*i)),Math.atan2(2*(o*i-e*t),i*i+e*e-t*t-o*o))},a=function(e,t,o){var i,n,r,c,_,s,a,f;return i=Math.cos(t),n=Math.sin(t),r=Math.cos(-o),c=Math.sin(-o),_=Math.cos(e),s=Math.sin(e),a=i*r,f=n*c,{w:a*_-f*s,x:a*s+f*_,y:n*r*_+i*c*s,z:i*c*_-n*r*s}},f=function(e,t){return k.identity(),k.identity().makeRotationFromQuaternion(t.quaternion),k.getInverse(k),C.copy(e),w.copy(t.position),C.sub(w).applyMatrix4(k)},v.noConflict=function(){return window.Physijs=g,v},v.createMaterial=function(e,t,o){var i=function(){};return i.prototype=e,i=new i,i._physijs={id:e.id,friction:void 0===t?.8:t,restitution:void 0===o?.2:o},i},v.PointConstraint=function(e,t,o){void 0===o&&(o=t,t=void 0),this.type="point",this.appliedImpulse=0,this.id=_(),this.objecta=e._physijs.id,this.positiona=f(o,e).clone(),t&&(this.objectb=t._physijs.id,this.positionb=f(o,t).clone())},v.PointConstraint.prototype.getDefinition=function(){return{type:this.type,id:this.id,objecta:this.objecta,objectb:this.objectb,positiona:this.positiona,positionb:this.positionb}},v.HingeConstraint=function(e,t,o,i){void 0===i&&(i=o,o=t,t=void 0),this.type="hinge",this.appliedImpulse=0,this.id=_(),this.scene=e.parent,this.objecta=e._physijs.id,this.positiona=f(o,e).clone(),this.position=o.clone(),this.axis=i,t&&(this.objectb=t._physijs.id,this.positionb=f(o,t).clone())},v.HingeConstraint.prototype.getDefinition=function(){return{type:this.type,id:this.id,objecta:this.objecta,objectb:this.objectb,positiona:this.positiona,positionb:this.positionb,axis:this.axis}},v.HingeConstraint.prototype.setLimits=function(e,t,o,i){this.scene.execute("hinge_setLimits",{constraint:this.id,low:e,high:t,bias_factor:o,relaxation_factor:i})},v.HingeConstraint.prototype.enableAngularMotor=function(e,t){this.scene.execute("hinge_enableAngularMotor",{constraint:this.id,velocity:e,acceleration:t})},v.HingeConstraint.prototype.disableMotor=function(e,t){this.scene.execute("hinge_disableMotor",{constraint:this.id})},v.SliderConstraint=function(e,t,o,i){void 0===i&&(i=o,o=t,t=void 0),this.type="slider",this.appliedImpulse=0,this.id=_(),this.scene=e.parent,this.objecta=e._physijs.id,this.positiona=f(o,e).clone(),this.axis=i,t&&(this.objectb=t._physijs.id,this.positionb=f(o,t).clone())},v.SliderConstraint.prototype.getDefinition=function(){return{type:this.type,id:this.id,objecta:this.objecta,objectb:this.objectb,positiona:this.positiona,positionb:this.positionb,axis:this.axis}},v.SliderConstraint.prototype.setLimits=function(e,t,o,i){this.scene.execute("slider_setLimits",{constraint:this.id,lin_lower:e,lin_upper:t,ang_lower:o,ang_upper:i})},v.SliderConstraint.prototype.setRestitution=function(e,t){this.scene.execute("slider_setRestitution",{constraint:this.id,linear:e,angular:t})},v.SliderConstraint.prototype.enableLinearMotor=function(e,t){this.scene.execute("slider_enableLinearMotor",{constraint:this.id,velocity:e,acceleration:t})},v.SliderConstraint.prototype.disableLinearMotor=function(){this.scene.execute("slider_disableLinearMotor",{constraint:this.id})},v.SliderConstraint.prototype.enableAngularMotor=function(e,t){this.scene.execute("slider_enableAngularMotor",{constraint:this.id,velocity:e,acceleration:t})},v.SliderConstraint.prototype.disableAngularMotor=function(){this.scene.execute("slider_disableAngularMotor",{constraint:this.id})},v.ConeTwistConstraint=function(e,t,o){if(void 0===o)throw"Both objects must be defined in a ConeTwistConstraint.";this.type="conetwist",this.appliedImpulse=0,this.id=_(),this.scene=e.parent,this.objecta=e._physijs.id,this.positiona=f(o,e).clone(),this.objectb=t._physijs.id,this.positionb=f(o,t).clone(),this.axisa={x:e.rotation.x,y:e.rotation.y,z:e.rotation.z},this.axisb={x:t.rotation.x,y:t.rotation.y,z:t.rotation.z}},v.ConeTwistConstraint.prototype.getDefinition=function(){return{type:this.type,id:this.id,objecta:this.objecta,objectb:this.objectb,positiona:this.positiona,positionb:this.positionb,axisa:this.axisa,axisb:this.axisb}},v.ConeTwistConstraint.prototype.setLimit=function(e,t,o){this.scene.execute("conetwist_setLimit",{constraint:this.id,x:e,y:t,z:o})},v.ConeTwistConstraint.prototype.enableMotor=function(){this.scene.execute("conetwist_enableMotor",{constraint:this.id})},v.ConeTwistConstraint.prototype.setMaxMotorImpulse=function(e){this.scene.execute("conetwist_setMaxMotorImpulse",{constraint:this.id,max_impulse:e})},v.ConeTwistConstraint.prototype.setMotorTarget=function(e){e instanceof d.Vector3?e=(new d.Quaternion).setFromEuler(new d.Euler(e.x,e.y,e.z)):e instanceof d.Euler?e=(new d.Quaternion).setFromEuler(e):e instanceof d.Matrix4&&(e=(new d.Quaternion).setFromRotationMatrix(e)),this.scene.execute("conetwist_setMotorTarget",{constraint:this.id,x:e.x,y:e.y,z:e.z,w:e.w})},v.ConeTwistConstraint.prototype.disableMotor=function(){this.scene.execute("conetwist_disableMotor",{constraint:this.id})},v.DOFConstraint=function(e,t,o){void 0===o&&(o=t,t=void 0),this.type="dof",this.appliedImpulse=0,this.id=_(),this.scene=e.parent,this.objecta=e._physijs.id,this.positiona=f(o,e).clone(),this.axisa={x:e.rotation.x,y:e.rotation.y,z:e.rotation.z},t&&(this.objectb=t._physijs.id,this.positionb=f(o,t).clone(),this.axisb={x:t.rotation.x,y:t.rotation.y,z:t.rotation.z})},v.DOFConstraint.prototype.getDefinition=function(){return{type:this.type,id:this.id,objecta:this.objecta,objectb:this.objectb,positiona:this.positiona,positionb:this.positionb,axisa:this.axisa,axisb:this.axisb}},v.DOFConstraint.prototype.setLinearLowerLimit=function(e){this.scene.execute("dof_setLinearLowerLimit",{constraint:this.id,x:e.x,y:e.y,z:e.z})},v.DOFConstraint.prototype.setLinearUpperLimit=function(e){this.scene.execute("dof_setLinearUpperLimit",{constraint:this.id,x:e.x,y:e.y,z:e.z})},v.DOFConstraint.prototype.setAngularLowerLimit=function(e){this.scene.execute("dof_setAngularLowerLimit",{constraint:this.id,x:e.x,y:e.y,z:e.z})},v.DOFConstraint.prototype.setAngularUpperLimit=function(e){this.scene.execute("dof_setAngularUpperLimit",{constraint:this.id,x:e.x,y:e.y,z:e.z})},v.DOFConstraint.prototype.enableAngularMotor=function(e){this.scene.execute("dof_enableAngularMotor",{constraint:this.id,which:e})},v.DOFConstraint.prototype.configureAngularMotor=function(e,t,o,i,n){this.scene.execute("dof_configureAngularMotor",{constraint:this.id,which:e,low_angle:t,high_angle:o,velocity:i,max_force:n})},v.DOFConstraint.prototype.disableAngularMotor=function(e){this.scene.execute("dof_disableAngularMotor",{constraint:this.id,which:e})},v.Scene=function(e){var t=this;c.call(this),d.Scene.call(this),this._worker=new m["default"],this._worker.transferableMessage=this._worker.webkitPostMessage||this._worker.postMessage,this._materials_ref_counts={},this._objects={},this._vehicles={},this._constraints={};var o=new ArrayBuffer(1);this._worker.transferableMessage(o,[o]),r=0===o.byteLength,this._worker.onmessage=function(e){var o,i=e.data;if(i instanceof ArrayBuffer&&1!==i.byteLength&&(i=new Float32Array(i)),i instanceof Float32Array)switch(i[0]){case P.WORLDREPORT:t._updateScene(i);break;case P.COLLISIONREPORT:t._updateCollisions(i);break;case P.VEHICLEREPORT:t._updateVehicles(i);break;case P.CONSTRAINTREPORT:t._updateConstraints(i)}else if(i.cmd)switch(i.cmd){case"objectReady":o=i.params,t._objects[o]&&t._objects[o].dispatchEvent("ready");break;case"worldReady":t.dispatchEvent("ready");break;case"vehicle":window.test=i;break;default:console.debug("Received: "+i.cmd),console.dir(i.params)}else switch(i[0]){case P.WORLDREPORT:t._updateScene(i);break;case P.COLLISIONREPORT:t._updateCollisions(i);break;case P.VEHICLEREPORT:t._updateVehicles(i);break;case P.CONSTRAINTREPORT:t._updateConstraints(i)}},e=e||{},e.ammo=v.scripts.ammo||"ammo.js",e.fixedTimeStep=e.fixedTimeStep||1/60,e.rateLimit=e.rateLimit||!0,this.execute("init",e)},v.Scene.prototype=new d.Scene,v.Scene.prototype.constructor=v.Scene,c.make(v.Scene),v.Scene.prototype._updateScene=function(e){var t,o,i,n=e[1];for(o=0;o<n;o++)i=2+o*L,t=this._objects[e[i]],void 0!==t&&(t.__dirtyPosition===!1&&t.position.set(e[i+1],e[i+2],e[i+3]),t.__dirtyRotation===!1&&t.quaternion.set(e[i+4],e[i+5],e[i+6],e[i+7]),t._physijs.linearVelocity.set(e[i+8],e[i+9],e[i+10]),t._physijs.angularVelocity.set(e[i+11],e[i+12],e[i+13]));r&&this._worker.transferableMessage(e.buffer,[e.buffer]),y=!1,this.dispatchEvent("update")},v.Scene.prototype._updateVehicles=function(e){var t,o,i,n;for(i=0;i<(e.length-1)/I;i++)n=1+i*I,t=this._vehicles[e[n]],void 0!==t&&(o=t.wheels[e[n+1]],o.position.set(e[n+2],e[n+3],e[n+4]),o.quaternion.set(e[n+5],e[n+6],e[n+7],e[n+8]));r&&this._worker.transferableMessage(e.buffer,[e.buffer])},v.Scene.prototype._updateConstraints=function(e){var t,o,i,n;for(i=0;i<(e.length-1)/R;i++)n=1+i*R,t=this._constraints[e[n]],o=this._objects[e[n+1]],void 0!==t&&void 0!==o&&(C.set(e[n+2],e[n+3],e[n+4]),k.extractRotation(o.matrix),C.applyMatrix4(k),t.positiona.addVectors(o.position,C),t.appliedImpulse=e[n+5]);r&&this._worker.transferableMessage(e.buffer,[e.buffer])},v.Scene.prototype._updateCollisions=function(e){var t,o,i,n,c,_,s,a={},f={};for(t=0;t<e[1];t++)i=2+t*j,n=e[i],c=e[i+1],f[n+"-"+c]=i+2,f[c+"-"+n]=-1*(i+2),a[n]||(a[n]=[]),a[n].push(c),a[c]||(a[c]=[]),a[c].push(n);for(_ in this._objects)if(this._objects.hasOwnProperty(_))if(n=this._objects[_],a[_]){for(o=0;o<n._physijs.touches.length;o++)a[_].indexOf(n._physijs.touches[o])===-1&&n._physijs.touches.splice(o--,1);for(o=0;o<a[_].length;o++)if(s=a[_][o],c=this._objects[s],c&&n._physijs.touches.indexOf(s)===-1){n._physijs.touches.push(s),C.subVectors(n.getLinearVelocity(),c.getLinearVelocity()),p=C.clone(),C.subVectors(n.getAngularVelocity(),c.getAngularVelocity()),u=C.clone();var l=f[n._physijs.id+"-"+c._physijs.id];l>0?C.set(-e[l],-e[l+1],-e[l+2]):(l*=-1,C.set(e[l],e[l+1],e[l+2])),n.dispatchEvent("collision",c,p,u,C)}}else n._physijs.touches.length=0;this.collisions=a,r&&this._worker.transferableMessage(e.buffer,[e.buffer])},v.Scene.prototype.addConstraint=function(e,t){if(this._constraints[e.id]=e,this.execute("addConstraint",e.getDefinition()),t){var o;switch(e.type){case"point":o=new d.Mesh(new d.SphereGeometry(1.5),new d.MeshNormalMaterial),o.position.copy(e.positiona),this._objects[e.objecta].add(o);break;case"hinge":o=new d.Mesh(new d.SphereGeometry(1.5),new d.MeshNormalMaterial),o.position.copy(e.positiona),this._objects[e.objecta].add(o);break;case"slider":o=new d.Mesh(new d.BoxGeometry(10,1,1),new d.MeshNormalMaterial),o.position.copy(e.positiona),o.rotation.set(e.axis.y,e.axis.x,e.axis.z),this._objects[e.objecta].add(o);break;case"conetwist":o=new d.Mesh(new d.SphereGeometry(1.5),new d.MeshNormalMaterial),o.position.copy(e.positiona),this._objects[e.objecta].add(o);break;case"dof":o=new d.Mesh(new d.SphereGeometry(1.5),new d.MeshNormalMaterial),o.position.copy(e.positiona),this._objects[e.objecta].add(o)}}return e},v.Scene.prototype.onSimulationResume=function(){this.execute("onSimulationResume",{})},v.Scene.prototype.removeConstraint=function(e){void 0!==this._constraints[e.id]&&(this.execute("removeConstraint",{id:e.id}),delete this._constraints[e.id])},v.Scene.prototype.execute=function(e,t){this._worker.postMessage({cmd:e,params:t})},l=function(e,t){var o;for(o=0;o<t.children.length;o++)t.children[o]._physijs&&(t.children[o].updateMatrix(),t.children[o].updateMatrixWorld(),C.setFromMatrixPosition(t.children[o].matrixWorld),S.setFromRotationMatrix(t.children[o].matrixWorld),t.children[o]._physijs.position_offset={x:C.x,y:C.y,z:C.z},t.children[o]._physijs.rotation={x:S.x,y:S.y,z:S.z,w:S.w},e._physijs.children.push(t.children[o]._physijs)),l(e,t.children[o])},v.Scene.prototype.add=function(e){if(d.Mesh.prototype.add.call(this,e),e._physijs)if(e.world=this,e instanceof v.Vehicle)this.add(e.mesh),this._vehicles[e._physijs.id]=e,this.execute("addVehicle",e._physijs);else{e.__dirtyPosition=!1,e.__dirtyRotation=!1,this._objects[e._physijs.id]=e,e.children.length&&(e._physijs.children=[],l(e,e)),e.material._physijs&&(this._materials_ref_counts.hasOwnProperty(e.material._physijs.id)?this._materials_ref_counts[e.material._physijs.id]++:(this.execute("registerMaterial",e.material._physijs),e._physijs.materialId=e.material._physijs.id,this._materials_ref_counts[e.material._physijs.id]=1)),e._physijs.position={x:e.position.x,y:e.position.y,z:e.position.z},e._physijs.rotation={x:e.quaternion.x,y:e.quaternion.y,z:e.quaternion.z,w:e.quaternion.w};new d.Vector3(1,1,1);e._physijs.width&&(e._physijs.width*=e.scale.x),e._physijs.height&&(e._physijs.height*=e.scale.y),e._physijs.depth&&(e._physijs.depth*=e.scale.z),this.execute("addObject",e._physijs)}},v.Scene.prototype.remove=function(e){if(e instanceof v.Vehicle){for(this.execute("removeVehicle",{id:e._physijs.id});e.wheels.length;)this.remove(e.wheels.pop());this.remove(e.mesh),delete this._vehicles[e._physijs.id]}else d.Mesh.prototype.remove.call(this,e),e._physijs&&(delete this._objects[e._physijs.id],this.execute("removeObject",{id:e._physijs.id}));e.material&&e.material._physijs&&this._materials_ref_counts.hasOwnProperty(e.material._physijs.id)&&(this._materials_ref_counts[e.material._physijs.id]--,0==this._materials_ref_counts[e.material._physijs.id]&&(this.execute("unRegisterMaterial",e.material._physijs),delete this._materials_ref_counts[e.material._physijs.id]))},v.Scene.prototype.setFixedTimeStep=function(e){e&&this.execute("setFixedTimeStep",e)},v.Scene.prototype.setGravity=function(e){e&&this.execute("setGravity",e)},v.Scene.prototype.simulate=function(e,t){var o,i,n;if(y)return!1;y=!0;for(o in this._objects)this._objects.hasOwnProperty(o)&&(i=this._objects[o],(i.__dirtyPosition||i.__dirtyRotation)&&(n={id:i._physijs.id},i.__dirtyPosition&&(n.pos={x:i.position.x,y:i.position.y,z:i.position.z},i.__dirtyPosition=!1),i.__dirtyRotation&&(n.quat={x:i.quaternion.x,y:i.quaternion.y,z:i.quaternion.z,w:i.quaternion.w},i.__dirtyRotation=!1),this.execute("updateTransform",n)));return this.execute("simulate",{timeStep:e,maxSubSteps:t}),!0},v.Mesh=function(e,t,o){e&&(c.call(this),d.Mesh.call(this,e,t),e.boundingBox||e.computeBoundingBox(),this._physijs={type:null,id:_(),mass:o||0,touches:[],linearVelocity:new d.Vector3,angularVelocity:new d.Vector3})},v.Mesh.prototype=new d.Mesh,v.Mesh.prototype.constructor=v.Mesh,c.make(v.Mesh),v.Mesh.prototype.__defineGetter__("mass",function(){return this._physijs.mass}),v.Mesh.prototype.__defineSetter__("mass",function(e){this._physijs.mass=e,this.world&&this.world.execute("updateMass",{id:this._physijs.id,mass:e})}),v.Mesh.prototype.applyCentralImpulse=function(e){this.world&&this.world.execute("applyCentralImpulse",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.applyImpulse=function(e,t){this.world&&this.world.execute("applyImpulse",{id:this._physijs.id,impulse_x:e.x,impulse_y:e.y,impulse_z:e.z,x:t.x,y:t.y,z:t.z})},v.Mesh.prototype.applyTorque=function(e){this.world&&this.world.execute("applyTorque",{id:this._physijs.id,torque_x:e.x,torque_y:e.y,torque_z:e.z})},v.Mesh.prototype.applyCentralForce=function(e){this.world&&this.world.execute("applyCentralForce",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.applyForce=function(e,t){this.world&&this.world.execute("applyForce",{id:this._physijs.id,force_x:e.x,force_y:e.y,force_z:e.z,x:t.x,y:t.y,z:t.z})},v.Mesh.prototype.getAngularVelocity=function(){return this._physijs.angularVelocity},v.Mesh.prototype.setAngularVelocity=function(e){this.world&&this.world.execute("setAngularVelocity",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.getLinearVelocity=function(){return this._physijs.linearVelocity},v.Mesh.prototype.setLinearVelocity=function(e){this.world&&this.world.execute("setLinearVelocity",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.setAngularFactor=function(e){this.world&&this.world.execute("setAngularFactor",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.setLinearFactor=function(e){this.world&&this.world.execute("setLinearFactor",{id:this._physijs.id,x:e.x,y:e.y,z:e.z})},v.Mesh.prototype.setDamping=function(e,t){this.world&&this.world.execute("setDamping",{id:this._physijs.id,linear:e,angular:t})},v.Mesh.prototype.setCcdMotionThreshold=function(e){this.world&&this.world.execute("setCcdMotionThreshold",{id:this._physijs.id,threshold:e})},v.Mesh.prototype.setCcdSweptSphereRadius=function(e){this.world&&this.world.execute("setCcdSweptSphereRadius",{id:this._physijs.id,radius:e})},v.PlaneMesh=function(e,t,o){var i,n;v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=e.boundingBox.max.x-e.boundingBox.min.x,n=e.boundingBox.max.y-e.boundingBox.min.y,this._physijs.type="plane",this._physijs.normal=e.faces[0].normal.clone(),this._physijs.mass="undefined"==typeof o?i*n:o},v.PlaneMesh.prototype=new v.Mesh,v.PlaneMesh.prototype.constructor=v.PlaneMesh,v.HeightfieldMesh=function(e,t,o,i,n){v.Mesh.call(this,e,t,o),this._physijs.type="heightfield",this._physijs.xsize=e.boundingBox.max.x-e.boundingBox.min.x,this._physijs.ysize=e.boundingBox.max.y-e.boundingBox.min.y,this._physijs.xpts="undefined"==typeof i?Math.sqrt(e.vertices.length):i+1,this._physijs.ypts="undefined"==typeof n?Math.sqrt(e.vertices.length):n+1,this._physijs.absMaxHeight=Math.max(e.boundingBox.max.z,Math.abs(e.boundingBox.min.z));for(var r,c,_=[],s=0;s<e.vertices.length;s++)r=s%this._physijs.xpts,c=Math.round(s/this._physijs.xpts-s%this._physijs.xpts/this._physijs.xpts),_[s]=e.vertices[r+(this._physijs.ypts-c-1)*this._physijs.ypts].z;this._physijs.points=_},v.HeightfieldMesh.prototype=new v.Mesh,v.HeightfieldMesh.prototype.constructor=v.HeightfieldMesh,v.BoxMesh=function(e,t,o){var i,n,r;v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=e.boundingBox.max.x-e.boundingBox.min.x,n=e.boundingBox.max.y-e.boundingBox.min.y,r=e.boundingBox.max.z-e.boundingBox.min.z,this._physijs.type="box",this._physijs.width=i,this._physijs.height=n,this._physijs.depth=r,this._physijs.mass="undefined"==typeof o?i*n*r:o},v.BoxMesh.prototype=new v.Mesh,v.BoxMesh.prototype.constructor=v.BoxMesh,v.SphereMesh=function(e,t,o){v.Mesh.call(this,e,t,o),e.boundingSphere||e.computeBoundingSphere(),this._physijs.type="sphere",this._physijs.radius=e.boundingSphere.radius,this._physijs.mass="undefined"==typeof o?4/3*Math.PI*Math.pow(this._physijs.radius,3):o},v.SphereMesh.prototype=new v.Mesh,v.SphereMesh.prototype.constructor=v.SphereMesh,v.CylinderMesh=function(e,t,o){var i,n,r;v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=e.boundingBox.max.x-e.boundingBox.min.x,n=e.boundingBox.max.y-e.boundingBox.min.y,r=e.boundingBox.max.z-e.boundingBox.min.z,this._physijs.type="cylinder",this._physijs.width=i,this._physijs.height=n,this._physijs.depth=r,this._physijs.mass="undefined"==typeof o?i*n*r:o},v.CylinderMesh.prototype=new v.Mesh,v.CylinderMesh.prototype.constructor=v.CylinderMesh,v.CapsuleMesh=function(e,t,o){var i,n,r;v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=e.boundingBox.max.x-e.boundingBox.min.x,n=e.boundingBox.max.y-e.boundingBox.min.y,r=e.boundingBox.max.z-e.boundingBox.min.z,this._physijs.type="capsule",this._physijs.radius=Math.max(i/2,r/2),this._physijs.height=n,this._physijs.mass="undefined"==typeof o?i*n*r:o},v.CapsuleMesh.prototype=new v.Mesh,v.CapsuleMesh.prototype.constructor=v.CapsuleMesh,v.ConeMesh=function(e,t,o){var i,n;v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=e.boundingBox.max.x-e.boundingBox.min.x,n=e.boundingBox.max.y-e.boundingBox.min.y,this._physijs.type="cone",this._physijs.radius=i/2,this._physijs.height=n,this._physijs.mass="undefined"==typeof o?i*n:o},v.ConeMesh.prototype=new v.Mesh,v.ConeMesh.prototype.constructor=v.ConeMesh,v.ConcaveMesh=function(e,t,o){var i,n,r,c,_,s,a=[];for(v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),_=e.vertices,i=0;i<e.faces.length;i++)s=e.faces[i],s instanceof d.Face3?a.push([{x:_[s.a].x,y:_[s.a].y,z:_[s.a].z},{x:_[s.b].x,y:_[s.b].y,z:_[s.b].z},{x:_[s.c].x,y:_[s.c].y,z:_[s.c].z}]):s instanceof d.Face4&&(a.push([{x:_[s.a].x,y:_[s.a].y,z:_[s.a].z},{x:_[s.b].x,y:_[s.b].y,z:_[s.b].z},{x:_[s.d].x,y:_[s.d].y,z:_[s.d].z}]),a.push([{x:_[s.b].x,y:_[s.b].y,z:_[s.b].z},{x:_[s.c].x,y:_[s.c].y,z:_[s.c].z},{x:_[s.d].x,y:_[s.d].y,z:_[s.d].z}]));n=e.boundingBox.max.x-e.boundingBox.min.x,r=e.boundingBox.max.y-e.boundingBox.min.y,c=e.boundingBox.max.z-e.boundingBox.min.z,this._physijs.type="concave",this._physijs.triangles=a,this._physijs.mass="undefined"==typeof o?n*r*c:o},v.ConcaveMesh.prototype=new v.Mesh,v.ConcaveMesh.prototype.constructor=v.ConcaveMesh,v.ConvexMesh=function(e,t,o){var i,n,r,c,_=[];for(v.Mesh.call(this,e,t,o),e.boundingBox||e.computeBoundingBox(),i=0;i<e.vertices.length;i++)_.push({x:e.vertices[i].x,y:e.vertices[i].y,z:e.vertices[i].z});n=e.boundingBox.max.x-e.boundingBox.min.x,r=e.boundingBox.max.y-e.boundingBox.min.y,c=e.boundingBox.max.z-e.boundingBox.min.z,this._physijs.type="convex",this._physijs.points=_,this._physijs.mass="undefined"==typeof o?n*r*c:o},v.ConvexMesh.prototype=new v.Mesh,v.ConvexMesh.prototype.constructor=v.ConvexMesh,v.Vehicle=function(e,t){t=t||new v.VehicleTuning,this.mesh=e,this.wheels=[],this._physijs={id:_(),rigidBody:e._physijs.id,suspension_stiffness:t.suspension_stiffness,suspension_compression:t.suspension_compression,suspension_damping:t.suspension_damping,max_suspension_travel:t.max_suspension_travel,friction_slip:t.friction_slip,max_suspension_force:t.max_suspension_force}},v.Vehicle.prototype.addWheel=function(e,t,o,i,n,r,c,_,s){var a=new d.Mesh(e,t);a.castShadow=a.receiveShadow=!0,a.position.copy(i).multiplyScalar(r/100).add(o),this.world.add(a),this.wheels.push(a),this.world.execute("addWheel",{id:this._physijs.id,connection_point:{x:o.x,y:o.y,z:o.z},wheel_direction:{x:i.x,y:i.y,z:i.z},wheel_axle:{x:n.x,y:n.y,z:n.z},suspension_rest_length:r,wheel_radius:c,is_front_wheel:_,tuning:s})},v.Vehicle.prototype.setSteering=function(e,t){if(void 0!==t&&void 0!==this.wheels[t])this.world.execute("setSteering",{id:this._physijs.id,wheel:t,steering:e});else if(this.wheels.length>0)for(var o=0;o<this.wheels.length;o++)this.world.execute("setSteering",{id:this._physijs.id,wheel:o,steering:e})},v.Vehicle.prototype.setBrake=function(e,t){if(void 0!==t&&void 0!==this.wheels[t])this.world.execute("setBrake",{id:this._physijs.id,wheel:t,brake:e});else if(this.wheels.length>0)for(var o=0;o<this.wheels.length;o++)this.world.execute("setBrake",{id:this._physijs.id,wheel:o,brake:e})},v.Vehicle.prototype.applyEngineForce=function(e,t){if(void 0!==t&&void 0!==this.wheels[t])this.world.execute("applyEngineForce",{id:this._physijs.id,wheel:t,force:e});else if(this.wheels.length>0)for(var o=0;o<this.wheels.length;o++)this.world.execute("applyEngineForce",{id:this._physijs.id,wheel:o,force:e})},v.VehicleTuning=function(e,t,o,i,n,r){this.suspension_stiffness=void 0!==e?e:5.88,this.suspension_compression=void 0!==t?t:.83,this.suspension_damping=void 0!==o?o:.88,this.max_suspension_travel=void 0!==i?i:500,this.friction_slip=void 0!==n?n:10.5,this.max_suspension_force=void 0!==r?r:6e3},t["default"]=v},function(t,o){t.exports=e},function(e,t,o){e.exports=function(){return o(3)('!function(e){function t(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p="",t(0)}([function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r,o,_,s,a,c,f,p,l,u,b,d,h,m,y,g,v,C,w,k,S,R,j,I=i(1),T=n(I),D=self.webkitPostMessage||self.postMessage,O={WORLDREPORT:0,COLLISIONREPORT:1,VEHICLEREPORT:2,CONSTRAINTREPORT:3},L={},x=0,M={},P={},W={},B={},A={},F=0,G=0,E=0,V={},N={},X={},H={},Z=14,U=5,z=9,Y=6,K=new ArrayBuffer(1);D(K,[K]);var Q=0===K.byteLength;s=function(e){return void 0!==V[e]?V[e]:null},a=function(e,t){V[e]=t},c=function(e){var t,i;switch(_.setIdentity(),e.type){case"plane":t="plane_"+e.normal.x+"_"+e.normal.y+"_"+e.normal.z,null===(i=s(t))&&(y.setX(e.normal.x),y.setY(e.normal.y),y.setZ(e.normal.z),i=new T["default"].btStaticPlaneShape(y,0),a(t,i));break;case"box":t="box_"+e.width+"_"+e.height+"_"+e.depth,null===(i=s(t))&&(y.setX(e.width/2),y.setY(e.height/2),y.setZ(e.depth/2),i=new T["default"].btBoxShape(y),a(t,i));break;case"sphere":t="sphere_"+e.radius,null===(i=s(t))&&(i=new T["default"].btSphereShape(e.radius),a(t,i));break;case"cylinder":t="cylinder_"+e.width+"_"+e.height+"_"+e.depth,null===(i=s(t))&&(y.setX(e.width/2),y.setY(e.height/2),y.setZ(e.depth/2),i=new T["default"].btCylinderShape(y),a(t,i));break;case"capsule":t="capsule_"+e.radius+"_"+e.height,null===(i=s(t))&&(i=new T["default"].btCapsuleShape(e.radius,e.height-2*e.radius),a(t,i));break;case"cone":t="cone_"+e.radius+"_"+e.height,null===(i=s(t))&&(i=new T["default"].btConeShape(e.radius,e.height),a(t,i));break;case"concave":var n,r,o=new T["default"].btTriangleMesh;if(!e.triangles.length)return!1;for(n=0;n<e.triangles.length;n++)r=e.triangles[n],y.setX(r[0].x),y.setY(r[0].y),y.setZ(r[0].z),g.setX(r[1].x),g.setY(r[1].y),g.setZ(r[1].z),v.setX(r[2].x),v.setY(r[2].y),v.setZ(r[2].z),o.addTriangle(y,g,v,!0);i=new T["default"].btBvhTriangleMeshShape(o,(!0),(!0)),X[e.id]=i;break;case"convex":var n,c,i=new T["default"].btConvexHullShape;for(n=0;n<e.points.length;n++)c=e.points[n],y.setX(c.x),y.setY(c.y),y.setZ(c.z),i.addPoint(y);X[e.id]=i;break;case"heightfield":for(var f=T["default"].allocate(4*e.xpts*e.ypts,"float",T["default"].ALLOC_NORMAL),p=0;p<e.points.length;p++)T["default"].setValue(f+p,e.points[p],"float");i=new T["default"].btHeightfieldTerrainShape(e.xpts,e.ypts,f,1,(-e.absMaxHeight),e.absMaxHeight,2,0,(!1)),y.setX(e.xsize/(e.xpts-1)),y.setY(e.ysize/(e.ypts-1)),y.setZ(1),i.setLocalScaling(y),X[e.id]=i;break;default:return}return i},L.init=function(e){_=new T["default"].btTransform,y=new T["default"].btVector3(0,0,0),g=new T["default"].btVector3(0,0,0),v=new T["default"].btVector3(0,0,0),C=new T["default"].btQuaternion(0,0,0,0),w=e.reportsize||50,Q?(k=new Float32Array(2+w*Z),S=new Float32Array(2+w*U),R=new Float32Array(2+w*z),j=new Float32Array(2+w*Y)):(k=[],S=[],R=[],j=[]),k[0]=O.WORLDREPORT,S[0]=O.COLLISIONREPORT,R[0]=O.VEHICLEREPORT,j[0]=O.CONSTRAINTREPORT;var t,i=new T["default"].btDefaultCollisionConfiguration,n=new T["default"].btCollisionDispatcher(i),r=new T["default"].btSequentialImpulseConstraintSolver;switch(e.broadphase||(e.broadphase={type:"dynamic"}),e.broadphase.type){case"sweepprune":y.setX(e.broadphase.aabbmin.x),y.setY(e.broadphase.aabbmin.y),y.setZ(e.broadphase.aabbmin.z),g.setX(e.broadphase.aabbmax.x),g.setY(e.broadphase.aabbmax.y),g.setZ(e.broadphase.aabbmax.z),t=new T["default"].btAxisSweep3(y,g);break;case"dynamic":default:t=new T["default"].btDbvtBroadphase}m=new T["default"].btDiscreteDynamicsWorld(n,t,r,i),b=e.fixedTimeStep,d=e.rateLimit,D({cmd:"worldReady"})},L.registerMaterial=function(e){B[e.id]=e},L.unRegisterMaterial=function(e){delete B[e.id]},L.setFixedTimeStep=function(e){b=e},L.setGravity=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),m.setGravity(y)},L.addObject=function(e){var t,i,n,r,o;if(i=c(e)){if(e.children){var s,a=new T["default"].btCompoundShape;for(a.addChildShape(_,i),t=0;t<e.children.length;t++){s=e.children[t];var f=new T["default"].btTransform;f.setIdentity(),y.setX(s.position_offset.x),y.setY(s.position_offset.y),y.setZ(s.position_offset.z),f.setOrigin(y),C.setX(s.rotation.x),C.setY(s.rotation.y),C.setZ(s.rotation.z),C.setW(s.rotation.w),f.setRotation(C),i=c(e.children[t]),a.addChildShape(f,i),T["default"].destroy(f)}i=a,H[e.id]=i}y.setX(0),y.setY(0),y.setZ(0),i.calculateLocalInertia(e.mass,y),_.setIdentity(),g.setX(e.position.x),g.setY(e.position.y),g.setZ(e.position.z),_.setOrigin(g),C.setX(e.rotation.x),C.setY(e.rotation.y),C.setZ(e.rotation.z),C.setW(e.rotation.w),_.setRotation(C),n=new T["default"].btDefaultMotionState(_),r=new T["default"].btRigidBodyConstructionInfo(e.mass,n,i,y),void 0!==e.materialId&&(r.set_m_friction(B[e.materialId].friction),r.set_m_restitution(B[e.materialId].restitution)),o=new T["default"].btRigidBody(r),T["default"].destroy(r),"undefined"!=typeof e.collision_flags&&o.setCollisionFlags(e.collision_flags),m.addRigidBody(o),o.id=e.id,M[o.id]=o,N[o.id]=n;var p=void 0!=o.a?o.a:o.ptr;A[p]=o.id,F++,D({cmd:"objectReady",params:o.id})}},L.addVehicle=function(e){var t,i=new T["default"].btVehicleTuning;i.set_m_suspensionStiffness(e.suspension_stiffness),i.set_m_suspensionCompression(e.suspension_compression),i.set_m_suspensionDamping(e.suspension_damping),i.set_m_maxSuspensionTravelCm(e.max_suspension_travel),i.set_m_maxSuspensionForce(e.max_suspension_force),t=new T["default"].btRaycastVehicle(i,M[e.rigidBody],new T["default"].btDefaultVehicleRaycaster(m)),t.tuning=i,M[e.rigidBody].setActivationState(4),t.setCoordinateSystem(0,1,2),m.addVehicle(t),P[e.id]=t},L.removeVehicle=function(e){delete P[e.id]},L.addWheel=function(e){if(void 0!==P[e.id]){var t=P[e.id].tuning;void 0!==e.tuning&&(t=new T["default"].btVehicleTuning,t.set_m_suspensionStiffness(e.tuning.suspension_stiffness),t.set_m_suspensionCompression(e.tuning.suspension_compression),t.set_m_suspensionDamping(e.tuning.suspension_damping),t.set_m_maxSuspensionTravelCm(e.tuning.max_suspension_travel),t.set_m_maxSuspensionForce(e.tuning.max_suspension_force)),y.setX(e.connection_point.x),y.setY(e.connection_point.y),y.setZ(e.connection_point.z),g.setX(e.wheel_direction.x),g.setY(e.wheel_direction.y),g.setZ(e.wheel_direction.z),v.setX(e.wheel_axle.x),v.setY(e.wheel_axle.y),v.setZ(e.wheel_axle.z),P[e.id].addWheel(y,g,v,e.suspension_rest_length,e.wheel_radius,t,e.is_front_wheel)}G++,Q?(R=new Float32Array(1+G*z),R[0]=O.VEHICLEREPORT):R=[O.VEHICLEREPORT]},L.setSteering=function(e){void 0!==P[e.id]&&P[e.id].setSteeringValue(e.steering,e.wheel)},L.setBrake=function(e){void 0!==P[e.id]&&P[e.id].setBrake(e.brake,e.wheel)},L.applyEngineForce=function(e){void 0!==P[e.id]&&P[e.id].applyEngineForce(e.force,e.wheel)},L.removeObject=function(e){m.removeRigidBody(M[e.id]),T["default"].destroy(M[e.id]),T["default"].destroy(N[e.id]),H[e.id]&&T["default"].destroy(H[e.id]),X[e.id]&&T["default"].destroy(X[e.id]);var t=void 0!=M[e.id].a?M[e.id].a:M[e.id].ptr;delete A[t],delete M[e.id],delete N[e.id],H[e.id]&&delete H[e.id],X[e.id]&&delete X[e.id],F--},L.updateTransform=function(e){r=M[e.id],r.getMotionState().getWorldTransform(_),e.pos&&(y.setX(e.pos.x),y.setY(e.pos.y),y.setZ(e.pos.z),_.setOrigin(y)),e.quat&&(C.setX(e.quat.x),C.setY(e.quat.y),C.setZ(e.quat.z),C.setW(e.quat.w),_.setRotation(C)),r.setWorldTransform(_),r.activate()},L.updateMass=function(e){r=M[e.id],m.removeRigidBody(r),y.setX(0),y.setY(0),y.setZ(0),r.setMassProps(e.mass,y),m.addRigidBody(r),r.activate()},L.applyCentralImpulse=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].applyCentralImpulse(y),M[e.id].activate()},L.applyImpulse=function(e){y.setX(e.impulse_x),y.setY(e.impulse_y),y.setZ(e.impulse_z),g.setX(e.x),g.setY(e.y),g.setZ(e.z),M[e.id].applyImpulse(y,g),M[e.id].activate()},L.applyTorque=function(e){y.setX(e.torque_x),y.setY(e.torque_y),y.setZ(e.torque_z),M[e.id].applyTorque(y),M[e.id].activate()},L.applyCentralForce=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].applyCentralForce(y),M[e.id].activate()},L.applyForce=function(e){y.setX(e.force_x),y.setY(e.force_y),y.setZ(e.force_z),g.setX(e.x),g.setY(e.y),g.setZ(e.z),M[e.id].applyForce(y,g),M[e.id].activate()},L.onSimulationResume=function(e){h=Date.now()},L.setAngularVelocity=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].setAngularVelocity(y),M[e.id].activate()},L.setLinearVelocity=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].setLinearVelocity(y),M[e.id].activate()},L.setAngularFactor=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].setAngularFactor(y)},L.setLinearFactor=function(e){y.setX(e.x),y.setY(e.y),y.setZ(e.z),M[e.id].setLinearFactor(y)},L.setDamping=function(e){M[e.id].setDamping(e.linear,e.angular)},L.setCcdMotionThreshold=function(e){M[e.id].setCcdMotionThreshold(e.threshold)},L.setCcdSweptSphereRadius=function(e){M[e.id].setCcdSweptSphereRadius(e.radius)},L.addConstraint=function(e){var t;switch(e.type){case"point":void 0===e.objectb?(y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),t=new T["default"].btPoint2PointConstraint(M[e.objecta],y)):(y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),g.setX(e.positionb.x),g.setY(e.positionb.y),g.setZ(e.positionb.z),t=new T["default"].btPoint2PointConstraint(M[e.objecta],M[e.objectb],y,g));break;case"hinge":void 0===e.objectb?(y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),g.setX(e.axis.x),g.setY(e.axis.y),g.setZ(e.axis.z),t=new T["default"].btHingeConstraint(M[e.objecta],y,g)):(y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),g.setX(e.positionb.x),g.setY(e.positionb.y),g.setZ(e.positionb.z),v.setX(e.axis.x),v.setY(e.axis.y),v.setZ(e.axis.z),t=new T["default"].btHingeConstraint(M[e.objecta],M[e.objectb],y,g,v,v));break;case"slider":var i,n,r;i=new T["default"].btTransform,y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),i.setOrigin(y);var r=i.getRotation();r.setEuler(e.axis.x,e.axis.y,e.axis.z),i.setRotation(r),e.objectb?(n=new T["default"].btTransform,g.setX(e.positionb.x),g.setY(e.positionb.y),g.setZ(e.positionb.z),n.setOrigin(g),r=n.getRotation(),r.setEuler(e.axis.x,e.axis.y,e.axis.z),n.setRotation(r),t=new T["default"].btSliderConstraint(M[e.objecta],M[e.objectb],i,n,(!0))):t=new T["default"].btSliderConstraint(M[e.objecta],i,(!0)),T["default"].destroy(i),void 0!=n&&T["default"].destroy(n);break;case"conetwist":var i,n;i=new T["default"].btTransform,i.setIdentity(),n=new T["default"].btTransform,n.setIdentity(),y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),g.setX(e.positionb.x),g.setY(e.positionb.y),g.setZ(e.positionb.z),i.setOrigin(y),n.setOrigin(g);var r=i.getRotation();r.setEulerZYX(-e.axisa.z,-e.axisa.y,-e.axisa.x),i.setRotation(r),r=n.getRotation(),r.setEulerZYX(-e.axisb.z,-e.axisb.y,-e.axisb.x),n.setRotation(r),t=new T["default"].btConeTwistConstraint(M[e.objecta],M[e.objectb],i,n),t.setLimit(Math.PI,0,Math.PI),T["default"].destroy(i),T["default"].destroy(n);break;case"dof":var i,n,r;i=new T["default"].btTransform,i.setIdentity(),y.setX(e.positiona.x),y.setY(e.positiona.y),y.setZ(e.positiona.z),i.setOrigin(y),r=i.getRotation(),r.setEulerZYX(-e.axisa.z,-e.axisa.y,-e.axisa.x),i.setRotation(r),e.objectb?(n=new T["default"].btTransform,n.setIdentity(),g.setX(e.positionb.x),g.setY(e.positionb.y),g.setZ(e.positionb.z),n.setOrigin(g),r=n.getRotation(),r.setEulerZYX(-e.axisb.z,-e.axisb.y,-e.axisb.x),n.setRotation(r),t=new T["default"].btGeneric6DofConstraint(M[e.objecta],M[e.objectb],i,n)):t=new T["default"].btGeneric6DofConstraint(M[e.objecta],i),T["default"].destroy(i),void 0!=n&&T["default"].destroy(n);break;default:return}m.addConstraint(t),t.enableFeedback(),W[e.id]=t,E++,Q?(j=new Float32Array(1+E*Y),j[0]=O.CONSTRAINTREPORT):j=[O.CONSTRAINTREPORT]},L.removeConstraint=function(e){var t=W[e.id];void 0!==t&&(m.removeConstraint(t),delete W[e.id],E--)},L.constraint_setBreakingImpulseThreshold=function(e){var t=W[e.id];t!==undefind&&t.setBreakingImpulseThreshold(e.threshold)},L.simulate=function(e){if(m){if(e=e||{},e.timeStep)e.timeStep<b&&(e.timeStep=b);else if(h)for(e.timeStep=0;e.timeStep+x<=b;)e.timeStep=(Date.now()-h)/1e3;else e.timeStep=b;e.maxSubSteps=e.maxSubSteps||Math.ceil(e.timeStep/b),x=Date.now(),m.stepSimulation(e.timeStep,e.maxSubSteps,b),p(),l(),u(),f(),x=(Date.now()-x)/1e3,h=Date.now()}},L.hinge_setLimits=function(e){W[e.constraint].setLimit(e.low,e.high,0,e.bias_factor,e.relaxation_factor)},L.hinge_enableAngularMotor=function(e){var t=W[e.constraint];t.enableAngularMotor(!0,e.velocity,e.acceleration),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.hinge_disableMotor=function(e){W[e.constraint].enableMotor(!1),constraint.getRigidBodyB()&&constraint.getRigidBodyB().activate()},L.slider_setLimits=function(e){var t=W[e.constraint];t.setLowerLinLimit(e.lin_lower||0),t.setUpperLinLimit(e.lin_upper||0),t.setLowerAngLimit(e.ang_lower||0),t.setUpperAngLimit(e.ang_upper||0)},L.slider_setRestitution=function(e){var t=W[e.constraint];t.setSoftnessLimLin(e.linear||0),t.setSoftnessLimAng(e.angular||0)},L.slider_enableLinearMotor=function(e){var t=W[e.constraint];t.setTargetLinMotorVelocity(e.velocity),t.setMaxLinMotorForce(e.acceleration),t.setPoweredLinMotor(!0),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.slider_disableLinearMotor=function(e){var t=W[e.constraint];t.setPoweredLinMotor(!1),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.slider_enableAngularMotor=function(e){var t=W[e.constraint];t.setTargetAngMotorVelocity(e.velocity),t.setMaxAngMotorForce(e.acceleration),t.setPoweredAngMotor(!0),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.slider_disableAngularMotor=function(e){var t=W[e.constraint];t.setPoweredAngMotor(!1),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.conetwist_setLimit=function(e){W[e.constraint].setLimit(e.z,e.y,e.x)},L.conetwist_enableMotor=function(e){var t=W[e.constraint];t.enableMotor(!0),t.getRigidBodyA().activate(),t.getRigidBodyB().activate()},L.conetwist_setMaxMotorImpulse=function(e){var t=W[e.constraint];t.setMaxMotorImpulse(e.max_impulse),t.getRigidBodyA().activate(),t.getRigidBodyB().activate()},L.conetwist_setMotorTarget=function(e){var t=W[e.constraint];C.setX(e.x),C.setY(e.y),C.setZ(e.z),C.setW(e.w),t.setMotorTarget(C),t.getRigidBodyA().activate(),t.getRigidBodyB().activate()},L.conetwist_disableMotor=function(e){var t=W[e.constraint];t.enableMotor(!1),t.getRigidBodyA().activate(),t.getRigidBodyB().activate()},L.dof_setLinearLowerLimit=function(e){var t=W[e.constraint];y.setX(e.x),y.setY(e.y),y.setZ(e.z),t.setLinearLowerLimit(y),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_setLinearUpperLimit=function(e){var t=W[e.constraint];y.setX(e.x),y.setY(e.y),y.setZ(e.z),t.setLinearUpperLimit(y),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_setAngularLowerLimit=function(e){var t=W[e.constraint];y.setX(e.x),y.setY(e.y),y.setZ(e.z),t.setAngularLowerLimit(y),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_setAngularUpperLimit=function(e){var t=W[e.constraint];y.setX(e.x),y.setY(e.y),y.setZ(e.z),t.setAngularUpperLimit(y),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_enableAngularMotor=function(e){var t=W[e.constraint],i=t.getRotationalLimitMotor(e.which);i.set_m_enableMotor(!0),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_configureAngularMotor=function(e){var t=W[e.constraint],i=t.getRotationalLimitMotor(e.which);i.set_m_loLimit(e.low_angle),i.set_m_hiLimit(e.high_angle),i.set_m_targetVelocity(e.velocity),i.set_m_maxMotorForce(e.max_force),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},L.dof_disableAngularMotor=function(e){var t=W[e.constraint],i=t.getRotationalLimitMotor(e.which);i.set_m_enableMotor(!1),t.getRigidBodyA().activate(),t.getRigidBodyB()&&t.getRigidBodyB().activate()},f=function(){var e,t,i,n,r,_=0,s=0;Q&&k.length<2+F*Z&&(k=new Float32Array(2+Math.ceil(F/w)*w*Z),k[0]=O.WORLDREPORT),k[1]=F;for(e in M)M.hasOwnProperty(e)&&(t=M[e],i=t.getCenterOfMassTransform(),n=i.getOrigin(),r=i.getRotation(),_=2+s++*Z,k[_]=t.id,k[_+1]=n.x(),k[_+2]=n.y(),k[_+3]=n.z(),k[_+4]=r.x(),k[_+5]=r.y(),k[_+6]=r.z(),k[_+7]=r.w(),o=t.getLinearVelocity(),k[_+8]=o.x(),k[_+9]=o.y(),k[_+10]=o.z(),o=t.getAngularVelocity(),k[_+11]=o.x(),k[_+12]=o.y(),k[_+13]=o.z());Q?D(k.buffer,[k.buffer]):D(k)},l=function(){var e,t,i,n,r,_,s=m.getDispatcher(),a=s.getNumManifolds();for(Q&&S.length<2+a*U&&(S=new Float32Array(2+Math.ceil(F/w)*w*U),S[0]=O.COLLISIONREPORT),S[1]=0,e=0;e<a;e++)if(i=s.getManifoldByIndexInternal(e),n=i.getNumContacts(),0!==n)for(r=0;r<n;r++){_=i.getContactPoint(r),t=2+S[1]++*U,S[t]=A[i.getBody0().ptr],S[t+1]=A[i.getBody1().ptr],o=_.get_m_normalWorldOnB(),S[t+2]=o.x(),S[t+3]=o.y(),S[t+4]=o.z();break}Q?D(S.buffer,[S.buffer]):D(S)},p=function(){var e,t,i,n,r,o=0,_=0,s=0;Q&&R.length<2+G*z&&(R=new Float32Array(2+Math.ceil(G/w)*w*z),R[0]=O.VEHICLEREPORT);for(e in P)if(P.hasOwnProperty(e))for(t=P[e],s=0;s<t.getNumWheels();s++)i=t.getWheelInfo(s).get_m_worldTransform(),n=i.getOrigin(),r=i.getRotation(),o=1+_++*z,R[o]=e,R[o+1]=s,R[o+2]=n.x(),R[o+3]=n.y(),R[o+4]=n.z(),R[o+5]=r.x(),R[o+6]=r.y(),R[o+7]=r.z(),R[o+8]=r.w();0!==s&&(Q?D(R.buffer,[R.buffer]):D(R))},u=function(){var e,t,i,n,r,o=0,_=0;Q&&j.length<2+E*Y&&(j=new Float32Array(2+Math.ceil(E/w)*w*Y),j[0]=O.CONSTRAINTREPORT);for(e in W)W.hasOwnProperty(e)&&(t=W[e],i=t.getRigidBodyA(),n=t.getFrameOffsetA(),r=n.getOrigin(),o=1+_++*Y,j[o]=e,j[o+1]=i.id,j[o+2]=r.getX(),j[o+3]=r.getY(),j[o+4]=r.getZ(),j[o+5]=t.getAppliedImpulse());0!==_&&(Q?D(j.buffer,[j.buffer]):D(j))},self.onmessage=function(e){if(e.data instanceof Float32Array)switch(e.data[0]){case O.WORLDREPORT:k=new Float32Array(e.data);break;case O.COLLISIONREPORT:S=new Float32Array(e.data);break;case O.VEHICLEREPORT:R=new Float32Array(e.data);break;case O.CONSTRAINTREPORT:j=new Float32Array(e.data)}else e.data.cmd&&L[e.data.cmd]&&L[e.data.cmd](e.data.params)}},function(e,t,i){var n,r;(function(e,o,_){!function(e,o){n=o,r="function"==typeof n?n.call(t,i,t,_):n,!(void 0!==r&&(_.exports=r))}(this,function(){var t=function(n){function r(e){st("NO_DYNAMIC_EXECUTION=1 was set, cannot eval")}function s(e,t){e||st("Assertion failed: "+t)}function a(e){var t=n["_"+e];return t||st("NO_DYNAMIC_EXECUTION=1 was set, cannot eval"),s(t,"Cannot call unknown function "+e+" (perhaps LLVM optimizations or closure removed it?)"),t}function c(e,t,i,n){switch(i=i||"i8","*"===i.charAt(i.length-1)&&(i="i32"),i){case"i1":bn[e>>0]=t;break;case"i8":bn[e>>0]=t;break;case"i16":hn[e>>1]=t;break;case"i32":yn[e>>2]=t;break;case"i64":tempI64=[t>>>0,(tempDouble=t,+En(tempDouble)>=1?tempDouble>0?(0|Hn(+Nn(tempDouble/4294967296),4294967295))>>>0:~~+Vn((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],yn[e>>2]=tempI64[0],yn[e+4>>2]=tempI64[1];break;case"float":vn[e>>2]=t;break;case"double":Cn[e>>3]=t;break;default:st("invalid type for setValue: "+i)}}function f(e,t,i){switch(t=t||"i8","*"===t.charAt(t.length-1)&&(t="i32"),t){case"i1":return bn[e>>0];case"i8":return bn[e>>0];case"i16":return hn[e>>1];case"i32":return yn[e>>2];case"i64":return yn[e>>2];case"float":return vn[e>>2];case"double":return Cn[e>>3];default:st("invalid type for setValue: "+t)}return null}function p(e,t,i,n){var r,o;"number"==typeof e?(r=!0,o=e):(r=!1,o=e.length);var _,a="string"==typeof t?t:null;if(_=i==pn?n:["function"==typeof re?re:tn.staticAlloc,tn.stackAlloc,tn.staticAlloc,tn.dynamicAlloc][void 0===i?cn:i](Math.max(o,a?1:t.length)),r){var f,n=_;for(s(0==(3&_)),f=_+(o&-4);n<f;n+=4)yn[n>>2]=0;for(f=_+o;n<f;)bn[n++>>0]=0;return _}if("i8"===a)return e.subarray||e.slice?dn.set(e,_):dn.set(new Uint8Array(e),_),_;for(var p,l,u,b=0;b<o;){var d=e[b];"function"==typeof d&&(d=tn.getFunctionIndex(d)),p=a||t[b],0!==p?("i64"==p&&(p="i32"),c(_+b,d,p),u!==p&&(l=tn.getNativeTypeSize(p),u=p),b+=l):b++}return _}function l(e){return Sn?"undefined"!=typeof le&&!le.called||!Fn?tn.dynamicAlloc(e):re(e):tn.staticAlloc(e)}function u(e,t){if(0===t||!e)return"";for(var i,r=0,o=0;;){if(i=dn[e+o>>0],r|=i,0==i&&!t)break;if(o++,t&&o==t)break}t||(t=o);var _="";if(r<128){for(var s,a=1024;t>0;)s=String.fromCharCode.apply(String,dn.subarray(e,e+Math.min(t,a))),_=_?_+s:s,e+=a,t-=a;return _}return n.UTF8ToString(e)}function b(e){for(var t="";;){var i=bn[e++>>0];if(!i)return t;t+=String.fromCharCode(i)}}function d(e,t){return H(e,t,!1)}function h(e,t){for(var i,n,r,o,_,s,a="";;){if(i=e[t++],!i)return a;if(128&i)if(n=63&e[t++],192!=(224&i))if(r=63&e[t++],224==(240&i)?i=(15&i)<<12|n<<6|r:(o=63&e[t++],240==(248&i)?i=(7&i)<<18|n<<12|r<<6|o:(_=63&e[t++],248==(252&i)?i=(3&i)<<24|n<<18|r<<12|o<<6|_:(s=63&e[t++],i=(1&i)<<30|n<<24|r<<18|o<<12|_<<6|s))),i<65536)a+=String.fromCharCode(i);else{var c=i-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}else a+=String.fromCharCode((31&i)<<6|n);else a+=String.fromCharCode(i)}}function m(e){return h(dn,e)}function y(e,t,i,n){if(!(n>0))return 0;for(var r=i,o=i+n-1,_=0;_<e.length;++_){var s=e.charCodeAt(_);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++_)),s<=127){if(i>=o)break;t[i++]=s}else if(s<=2047){if(i+1>=o)break;t[i++]=192|s>>6,t[i++]=128|63&s}else if(s<=65535){if(i+2>=o)break;t[i++]=224|s>>12,t[i++]=128|s>>6&63,t[i++]=128|63&s}else if(s<=2097151){if(i+3>=o)break;t[i++]=240|s>>18,t[i++]=128|s>>12&63,t[i++]=128|s>>6&63,t[i++]=128|63&s}else if(s<=67108863){if(i+4>=o)break;t[i++]=248|s>>24,t[i++]=128|s>>18&63,t[i++]=128|s>>12&63,t[i++]=128|s>>6&63,t[i++]=128|63&s}else{if(i+5>=o)break;t[i++]=252|s>>30,t[i++]=128|s>>24&63,t[i++]=128|s>>18&63,t[i++]=128|s>>12&63,t[i++]=128|s>>6&63,t[i++]=128|63&s}}return t[i]=0,i-r}function g(e,t,i){return y(e,dn,t,i)}function v(e){for(var t=0,i=0;i<e.length;++i){var n=e.charCodeAt(i);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++i)),n<=127?++t:t+=n<=2047?2:n<=65535?3:n<=2097151?4:n<=67108863?5:6}return t}function C(e){var t=!!n.___cxa_demangle;if(t)try{var i=re(e.length);N(e.substr(1),i);var r=re(4),o=n.___cxa_demangle(i,0,0,r);if(0===f(r,"i32")&&o)return u(o)}catch(_){return e}finally{i&&Cd(i),r&&Cd(r),o&&Cd(o)}return tn.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling"),e}function w(e){return e.replace(/__Z[\\w\\d_]+/g,function(e){var t=C(e);return e===t?e:e+" ["+t+"]"})}function k(){var e=new Error;if(!e.stack){try{throw new Error(0)}catch(t){e=t}if(!e.stack)return"(no stack trace available)"}return e.stack.toString()}function S(){return w(k())}function R(e){return e%4096>0&&(e+=4096-e%4096),e}function j(){n.HEAP8=bn=new Int8Array(un),n.HEAP16=hn=new Int16Array(un),n.HEAP32=yn=new Int32Array(un),n.HEAPU8=dn=new Uint8Array(un),n.HEAPU16=mn=new Uint16Array(un),n.HEAPU32=gn=new Uint32Array(un),n.HEAPF32=vn=new Float32Array(un),n.HEAPF64=Cn=new Float64Array(un)}function I(){st("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+Ln+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function T(){I()}function D(e){for(;e.length>0;){var t=e.shift();if("function"!=typeof t){var i=t.func;"number"==typeof i?void 0===t.arg?tn.dynCall("v",i):tn.dynCall("vi",i,[t.arg]):i(void 0===t.arg?null:t.arg)}else t()}}function O(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)W(n.preRun.shift());D(Mn)}function L(){Fn||(Fn=!0,D(Pn))}function x(){D(Wn)}function M(){D(Bn),Gn=!0}function P(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)G(n.postRun.shift());D(An)}function W(e){Mn.unshift(e)}function B(e){Pn.unshift(e)}function A(e){Wn.unshift(e)}function F(e){Bn.unshift(e)}function G(e){An.unshift(e)}function E(e,t,i){var n=i>0?i:v(e)+1,r=new Array(n),o=y(e,r,0,r.length);return t&&(r.length=o),r}function V(e){for(var t=[],i=0;i<e.length;i++){var n=e[i];n>255&&(n&=255),t.push(String.fromCharCode(n))}return t.join("")}function N(e,t,i){for(var n=E(e,i),r=0;r<n.length;){var o=n[r];bn[t+r>>0]=o,r+=1}}function X(e,t){for(var i=0;i<e.length;i++)bn[t++>>0]=e[i]}function H(e,t,i){for(var n=0;n<e.length;++n)bn[t++>>0]=e.charCodeAt(n);i||(bn[t>>0]=0)}function Z(e){Zn++,n.monitorRunDependencies&&n.monitorRunDependencies(Zn)}function U(e){if(Zn--,n.monitorRunDependencies&&n.monitorRunDependencies(Zn),0==Zn&&(null!==Un&&(clearInterval(Un),Un=null),zn)){var t=zn;zn=null,t()}}function z(e,t,i,n,r,o,_,s,a){return Yn[e](t,i,n,r,o,_,s,a)}function Y(){return!!Y.uncaught_exception}function K(e){throw Qn.last||(Qn.last=e),Qn.clearRef(Qn.deAdjust(e)),e+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function Q(){var e=Qn.last;if(!e)return 0|(nr.setTempRet0(0),0);var t=Qn.infos[e],i=t.type;if(!i)return 0|(nr.setTempRet0(0),e);var r=Array.prototype.slice.call(arguments);n.___cxa_is_pointer_type(i);Q.buffer||(Q.buffer=re(4)),yn[Q.buffer>>2]=e,e=Q.buffer;for(var o=0;o<r.length;o++)if(r[o]&&n.___cxa_can_catch(r[o],i,e))return e=yn[e>>2],t.adjusted=e,0|(nr.setTempRet0(r[o]),e);return e=yn[e>>2],0|(nr.setTempRet0(i),e)}function q(e,t,i){throw Qn.infos[e]={ptr:e,adjusted:e,type:t,destructor:i,refcount:0},Qn.last=e,"uncaught_exception"in Y?Y.uncaught_exception++:Y.uncaught_exception=1,e+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function J(){}function $(){n.abort()}function ee(e,t){ee.seen||(ee.seen={}),e in ee.seen||(tn.dynCall("v",t),ee.seen[e]=1)}function te(e){return qn[e]||0}function ie(e,t){return 0==e?$n.EINVAL:(yn[e>>2]=Jn,qn[Jn]=0,Jn++,0)}function ne(e,t){return e in qn?(qn[e]=t,0):$n.EINVAL}function re(e){var t=tn.dynamicAlloc(e+8);return t+8&4294967288}function oe(e){return re(e)}function _e(){throw on=!0,"Pure virtual function called!"}function se(e,t){Bn.push(function(){tn.dynCall("vi",e,[t])}),se.level=Bn.length}function ae(){s(se.level==Bn.length,"cannot pop if something else added meanwhile!"),Bn.pop(),se.level=Bn.length}function ce(e){return Y.uncaught_exception--,Qn.caught.push(e),Qn.addRef(Qn.deAdjust(e)),e}function fe(e,t,i){return dn.set(dn.subarray(t,t+i),e),e}function pe(e,t){tr.varargs=t;try{var i=tr.getStreamFromFD();return FS.close(i),0}catch(n){return"undefined"!=typeof FS&&n instanceof FS.ErrnoError||st(n),-n.errno}}function le(e){var t=le;t.called||(Dn=R(Dn),t.called=!0,s(tn.dynamicAlloc),t.alloc=tn.dynamicAlloc,tn.dynamicAlloc=function(){st("cannot dynamically allocate, sbrk now has control")});var i=Dn;if(0!=e){var n=t.alloc(e);if(!n)return-1>>>0}return i}function ue(e){var t=Date.now();return yn[e>>2]=t/1e3|0,yn[e+4>>2]=t%1e3*1e3|0,0}function be(){st("trap!")}function de(e,t){tr.varargs=t;try{var i=tr.getStreamFromFD(),n=tr.get(),r=tr.get(),o=tr.get(),_=tr.get(),a=r;return s(0===n),FS.llseek(i,a,_),yn[o>>2]=i.position,i.getdents&&0===a&&0===_&&(i.getdents=null),0}catch(c){return"undefined"!=typeof FS&&c instanceof FS.ErrnoError||st(c),-c.errno}}function he(e,t){tr.varargs=t;try{var i=tr.get(),r=tr.get(),o=tr.get(),_=0;he.buffer||(he.buffers=[null,[],[]],he.printChar=function(e,t){var i=he.buffers[e];s(i),0===t||10===t?((1===e?n.print:n.printErr)(h(i,0)),i.length=0):i.push(t)});for(var a=0;a<o;a++){for(var c=yn[r+8*a>>2],f=yn[r+(8*a+4)>>2],p=0;p<f;p++)he.printChar(i,dn[c+p]);_+=f}return _}catch(l){return"undefined"!=typeof FS&&l instanceof FS.ErrnoError||st(l),-l.errno}}function me(e,t,i,r,o,_){try{n.dynCall_viiiii(e,t,i,r,o,_)}catch(s){if("number"!=typeof s&&"longjmp"!==s)throw s;nr.setThrew(1,0)}}function ye(e,t,i){try{n.dynCall_vid(e,t,i)}catch(r){if("number"!=typeof r&&"longjmp"!==r)throw r;nr.setThrew(1,0)}}function ge(e,t){try{n.dynCall_vi(e,t)}catch(i){if("number"!=typeof i&&"longjmp"!==i)throw i;nr.setThrew(1,0)}}function ve(e,t,i,r,o,_,s){try{n.dynCall_viiidii(e,t,i,r,o,_,s)}catch(a){if("number"!=typeof a&&"longjmp"!==a)throw a;nr.setThrew(1,0)}}function Ce(e,t,i){try{n.dynCall_vii(e,t,i)}catch(r){if("number"!=typeof r&&"longjmp"!==r)throw r;nr.setThrew(1,0)}}function we(e,t,i,r,o,_,s,a,c,f,p){try{return n.dynCall_iiiiiiiiiii(e,t,i,r,o,_,s,a,c,f,p)}catch(l){if("number"!=typeof l&&"longjmp"!==l)throw l;nr.setThrew(1,0)}}function ke(e,t){try{return n.dynCall_ii(e,t)}catch(i){if("number"!=typeof i&&"longjmp"!==i)throw i;nr.setThrew(1,0)}}function Se(e,t,i,r,o){try{n.dynCall_viidi(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function Re(e,t,i,r,o,_,s){try{n.dynCall_viddiii(e,t,i,r,o,_,s)}catch(a){if("number"!=typeof a&&"longjmp"!==a)throw a;nr.setThrew(1,0)}}function je(e,t,i,r,o){try{n.dynCall_vidii(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function Ie(e,t,i,r,o){try{return n.dynCall_iiiii(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function Te(e,t,i,r){try{n.dynCall_vidi(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function De(e,t,i,r,o,_,s,a,c){try{return n.dynCall_diiiiiiii(e,t,i,r,o,_,s,a,c)}catch(f){if("number"!=typeof f&&"longjmp"!==f)throw f;nr.setThrew(1,0)}}function Oe(e,t,i,r,o,_,s,a,c,f,p,l){try{n.dynCall_viiiiddddiid(e,t,i,r,o,_,s,a,c,f,p,l)}catch(u){if("number"!=typeof u&&"longjmp"!==u)throw u;nr.setThrew(1,0)}}function Le(e,t,i,r,o,_){try{return n.dynCall_diiiii(e,t,i,r,o,_)}catch(s){if("number"!=typeof s&&"longjmp"!==s)throw s;nr.setThrew(1,0)}}function xe(e,t,i,r){try{return n.dynCall_iiii(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function Me(e,t,i,r,o,_,s){try{n.dynCall_viiiiii(e,t,i,r,o,_,s)}catch(a){if("number"!=typeof a&&"longjmp"!==a)throw a;nr.setThrew(1,0)}}function Pe(e,t,i,r){try{return n.dynCall_iiid(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function We(e,t){try{return n.dynCall_di(e,t)}catch(i){if("number"!=typeof i&&"longjmp"!==i)throw i;nr.setThrew(1,0)}}function Be(e,t,i,r,o,_,s){try{return n.dynCall_iiiiiii(e,t,i,r,o,_,s)}catch(a){if("number"!=typeof a&&"longjmp"!==a)throw a;nr.setThrew(1,0)}}function Ae(e,t,i,r,o,_,s){try{return n.dynCall_diiidii(e,t,i,r,o,_,s)}catch(a){if("number"!=typeof a&&"longjmp"!==a)throw a;nr.setThrew(1,0)}}function Fe(e,t,i,r,o,_){try{n.dynCall_viidii(e,t,i,r,o,_)}catch(s){if("number"!=typeof s&&"longjmp"!==s)throw s;nr.setThrew(1,0)}}function Ge(e,t,i,r,o,_,s,a){try{n.dynCall_viiiiiii(e,t,i,r,o,_,s,a)}catch(c){if("number"!=typeof c&&"longjmp"!==c)throw c;nr.setThrew(1,0)}}function Ee(e,t,i,r,o,_,s,a,c,f){try{n.dynCall_viiiiiiiii(e,t,i,r,o,_,s,a,c,f)}catch(p){if("number"!=typeof p&&"longjmp"!==p)throw p;nr.setThrew(1,0)}}function Ve(e,t,i,r,o,_,s,a,c,f,p){try{n.dynCall_viiiiiiiiii(e,t,i,r,o,_,s,a,c,f,p)}catch(l){if("number"!=typeof l&&"longjmp"!==l)throw l;nr.setThrew(1,0)}}function Ne(e,t,i){try{return n.dynCall_iii(e,t,i)}catch(r){if("number"!=typeof r&&"longjmp"!==r)throw r;nr.setThrew(1,0)}}function Xe(e,t,i,r){try{return n.dynCall_diii(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function He(e,t,i,r,o,_,s,a,c,f,p){try{return n.dynCall_diiiiiiiiii(e,t,i,r,o,_,s,a,c,f,p)}catch(l){if("number"!=typeof l&&"longjmp"!==l)throw l;nr.setThrew(1,0)}}function Ze(e,t,i,r,o,_){try{n.dynCall_viiiid(e,t,i,r,o,_)}catch(s){if("number"!=typeof s&&"longjmp"!==s)throw s;nr.setThrew(1,0)}}function Ue(e,t,i,r,o,_,s,a,c,f){try{return n.dynCall_diiiiiiiii(e,t,i,r,o,_,s,a,c,f)}catch(p){if("number"!=typeof p&&"longjmp"!==p)throw p;nr.setThrew(1,0)}}function ze(e,t,i){\ntry{return n.dynCall_did(e,t,i)}catch(r){if("number"!=typeof r&&"longjmp"!==r)throw r;nr.setThrew(1,0)}}function Ye(e,t,i,r,o,_,s,a,c,f,p,l,u){try{n.dynCall_viiiidddddidi(e,t,i,r,o,_,s,a,c,f,p,l,u)}catch(b){if("number"!=typeof b&&"longjmp"!==b)throw b;nr.setThrew(1,0)}}function Ke(e,t,i,r,o,_){try{return n.dynCall_diidii(e,t,i,r,o,_)}catch(s){if("number"!=typeof s&&"longjmp"!==s)throw s;nr.setThrew(1,0)}}function Qe(e,t,i,r,o){try{return n.dynCall_diiii(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function qe(e,t,i,r,o,_,s,a,c,f){try{return n.dynCall_iiiiiiiiii(e,t,i,r,o,_,s,a,c,f)}catch(p){if("number"!=typeof p&&"longjmp"!==p)throw p;nr.setThrew(1,0)}}function Je(e,t,i,r,o){try{n.dynCall_viiid(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function $e(e,t,i,r){try{n.dynCall_viii(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function et(e){try{n.dynCall_v(e)}catch(t){if("number"!=typeof t&&"longjmp"!==t)throw t;nr.setThrew(1,0)}}function tt(e,t,i,r){try{n.dynCall_viid(e,t,i,r)}catch(o){if("number"!=typeof o&&"longjmp"!==o)throw o;nr.setThrew(1,0)}}function it(e,t,i,r,o){try{return n.dynCall_iidid(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function nt(e,t,i,r,o){try{n.dynCall_viiii(e,t,i,r,o)}catch(_){if("number"!=typeof _&&"longjmp"!==_)throw _;nr.setThrew(1,0)}}function rt(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function ot(e){function t(){n.calledRun||(n.calledRun=!0,on||(L(),x(),n.onRuntimeInitialized&&n.onRuntimeInitialized(),n._main&&oy&&n.callMain(e),P()))}e=e||n.arguments,null===iy&&(iy=Date.now()),Zn>0||(O(),Zn>0||n.calledRun||(n.setStatus?(n.setStatus("Running..."),setTimeout(function(){setTimeout(function(){n.setStatus("")},1),t()},1)):t()))}function _t(t,i){if(!i||!n.noExitRuntime)throw n.noExitRuntime||(on=!0,_n=t,jn=ty,M(),n.onExit&&n.onExit(t)),Qi?e.exit(t):qi&&"function"==typeof quit&&quit(t),new rt(t)}function st(e){void 0!==e?(n.print(e),n.printErr(e),e=JSON.stringify(e)):e="",on=!0,_n=1;var t="\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.",i="abort("+e+") at "+S()+t;throw ry&&ry.forEach(function(t){i=t(i,e)}),i}function at(){}function ct(e){return(e||at).__cache__}function ft(e,t){var i=ct(t),n=i[e];return n?n:(n=Object.create((t||at).prototype),n.ptr=e,i[e]=n)}function pt(e,t){return ft(e.ptr,t)}function lt(e){if(!e.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";e.__destroy__(),delete ct(e.__class__)[e.ptr]}function ut(e,t){return e.ptr===t.ptr}function bt(e){return e.ptr}function dt(e){return e.__class__}function ht(){throw"cannot construct a btCollisionShape, no constructor in IDL"}function mt(){throw"cannot construct a btCollisionObject, no constructor in IDL"}function yt(){throw"cannot construct a btConcaveShape, no constructor in IDL"}function gt(){throw"cannot construct a btCollisionWorld, no constructor in IDL"}function vt(){throw"cannot construct a btTypedConstraint, no constructor in IDL"}function Ct(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=Ku(e,t),ct(Ct)[this.ptr]=this}function wt(e,t,i,n,r){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===n?(this.ptr=Bo(e,t,i),void(ct(wt)[this.ptr]=this)):void 0===r?(this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(e,t,i,n),void(ct(wt)[this.ptr]=this)):(this.ptr=Wo(e,t,i,n,r),void(ct(wt)[this.ptr]=this))}function kt(){throw"cannot construct a btStridingMeshInterface, no constructor in IDL"}function St(){throw"cannot construct a ConvexResultCallback, no constructor in IDL"}function Rt(){throw"cannot construct a btMotionState, no constructor in IDL"}function jt(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=tu(e,t),ct(jt)[this.ptr]=this}function It(){throw"cannot construct a btConvexShape, no constructor in IDL"}function Tt(){throw"cannot construct a ContactResultCallback, no constructor in IDL"}function Dt(){throw"cannot construct a btTriangleMeshShape, no constructor in IDL"}function Ot(){throw"cannot construct a btDispatcher, no constructor in IDL"}function Lt(){throw"cannot construct a btDynamicsWorld, no constructor in IDL"}function xt(){throw"cannot construct a RayResultCallback, no constructor in IDL"}function Mt(e,t,i){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===e?(this.ptr=Ou(),void(ct(Mt)[this.ptr]=this)):void 0===t?(this.ptr=_emscripten_bind_btVector3_btVector3_1(e),void(ct(Mt)[this.ptr]=this)):void 0===i?(this.ptr=_emscripten_bind_btVector3_btVector3_2(e,t),void(ct(Mt)[this.ptr]=this)):(this.ptr=Du(e,t,i),void(ct(Mt)[this.ptr]=this))}function Pt(){throw"cannot construct a btVehicleRaycaster, no constructor in IDL"}function Wt(){this.ptr=Ws(),ct(Wt)[this.ptr]=this}function Bt(){throw"cannot construct a btQuadWord, no constructor in IDL"}function At(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=Np(e),ct(At)[this.ptr]=this}function Ft(){throw"cannot construct a btActionInterface, no constructor in IDL"}function Gt(){throw"cannot construct a btMatrix3x3, no constructor in IDL"}function Et(){this.ptr=Ql(),ct(Et)[this.ptr]=this}function Vt(e,t,i){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===i?(this.ptr=cd(e,t),void(ct(Vt)[this.ptr]=this)):(this.ptr=fd(e,t,i),void(ct(Vt)[this.ptr]=this))}function Nt(){this.ptr=Bc(),ct(Nt)[this.ptr]=this}function Xt(){throw"cannot construct a VoidPtr, no constructor in IDL"}function Ht(){this.ptr=jp(),ct(Ht)[this.ptr]=this}function Zt(){throw"cannot construct a btDispatcherInfo, no constructor in IDL"}function Ut(){throw"cannot construct a btCollisionConfiguration, no constructor in IDL"}function zt(e,t,i,n,r){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===i?(this.ptr=Ys(e,t),void(ct(zt)[this.ptr]=this)):void 0===n?(this.ptr=Ks(e,t,i),void(ct(zt)[this.ptr]=this)):void 0===r?(this.ptr=Js(e,t,i,n),void(ct(zt)[this.ptr]=this)):(this.ptr=$s(e,t,i,n,r),void(ct(zt)[this.ptr]=this))}function Yt(){this.ptr=So(),ct(Yt)[this.ptr]=this}function Kt(e,t,i,n){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===n?(this.ptr=el(e,t,i),void(ct(Kt)[this.ptr]=this)):(this.ptr=il(e,t,i,n),void(ct(Kt)[this.ptr]=this))}function Qt(){throw"cannot construct a RaycastInfo, no constructor in IDL"}function qt(){throw"cannot construct a btManifoldPoint, no constructor in IDL"}function Jt(){throw"cannot construct a btBroadphaseInterface, no constructor in IDL"}function $t(e,t,i,n){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),this.ptr=fr(e,t,i,n),ct($t)[this.ptr]=this}function ei(e,t){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===t?(this.ptr=Yo(e),void(ct(ei)[this.ptr]=this)):(this.ptr=zo(e,t),void(ct(ei)[this.ptr]=this))}function ti(e,t,i,n){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===i?(this.ptr=qb(e,t),void(ct(ti)[this.ptr]=this)):void 0===n?(this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(e,t,i),void(ct(ti)[this.ptr]=this)):(this.ptr=Qb(e,t,i,n),void(ct(ti)[this.ptr]=this))}function ii(e,t,i,n,r){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===n?(this.ptr=ym(e,t,i),void(ct(ii)[this.ptr]=this)):void 0===r?(this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_4(e,t,i,n),void(ct(ii)[this.ptr]=this)):(this.ptr=mm(e,t,i,n,r),void(ct(ii)[this.ptr]=this))}function ni(e,t,i,n){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===i?(this.ptr=da(e,t),void(ct(ni)[this.ptr]=this)):void 0===n?(this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(e,t,i),void(ct(ni)[this.ptr]=this)):(this.ptr=ma(e,t,i,n),void(ct(ni)[this.ptr]=this))}function ri(e){return e&&"object"==typeof e&&(e=e.ptr),void 0===e?(this.ptr=qa(),void(ct(ri)[this.ptr]=this)):(this.ptr=db(e),void(ct(ri)[this.ptr]=this))}function oi(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=Gl(e,t),ct(oi)[this.ptr]=this}function _i(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=fa(e,t),ct(_i)[this.ptr]=this}function si(e,t){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===e?(this.ptr=Lh(),void(ct(si)[this.ptr]=this)):void 0===t?(this.ptr=xh(e),void(ct(si)[this.ptr]=this)):(this.ptr=Mh(e,t),void(ct(si)[this.ptr]=this))}function ai(){this.ptr=Ra(),ct(ai)[this.ptr]=this}function ci(){this.ptr=rb(),ct(ci)[this.ptr]=this}function fi(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=Do(e),ct(fi)[this.ptr]=this}function pi(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=ro(e),ct(pi)[this.ptr]=this}function li(){this.ptr=Zh(),ct(li)[this.ptr]=this}function ui(e){return e&&"object"==typeof e&&(e=e.ptr),void 0===e?(this.ptr=vf(),void(ct(ui)[this.ptr]=this)):(this.ptr=Cf(e),void(ct(ui)[this.ptr]=this))}function bi(){throw"cannot construct a btCollisionObjectWrapper, no constructor in IDL"}function di(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=Bs(e,t),ct(di)[this.ptr]=this}function hi(e,t){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===e?(this.ptr=Pa(),void(ct(hi)[this.ptr]=this)):void 0===t?(this.ptr=Wa(e),void(ct(hi)[this.ptr]=this)):(this.ptr=Ma(e,t),void(ct(hi)[this.ptr]=this))}function mi(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=_b(e,t),ct(mi)[this.ptr]=this}function yi(e,t,i,n,r){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===n?(this.ptr=xs(e,t,i),void(ct(yi)[this.ptr]=this)):void 0===r?(this.ptr=_emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_4(e,t,i,n),void(ct(yi)[this.ptr]=this)):(this.ptr=Jp(e,t,i,n,r),void(ct(yi)[this.ptr]=this))}function gi(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=c_(e,t),ct(gi)[this.ptr]=this}function vi(e,t,i,n){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),this.ptr=fp(e,t,i,n),ct(vi)[this.ptr]=this}function Ci(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=hm(e,t),ct(Ci)[this.ptr]=this}function wi(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=Sp(e),ct(wi)[this.ptr]=this}function ki(){throw"cannot construct a btWheelInfo, no constructor in IDL"}function Si(e,t,i,n){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===e?(this.ptr=Gm(),void(ct(Si)[this.ptr]=this)):void 0===t?(this.ptr=_emscripten_bind_btVector4_btVector4_1(e),void(ct(Si)[this.ptr]=this)):void 0===i?(this.ptr=_emscripten_bind_btVector4_btVector4_2(e,t),void(ct(Si)[this.ptr]=this)):void 0===n?(this.ptr=_emscripten_bind_btVector4_btVector4_3(e,t,i),void(ct(Si)[this.ptr]=this)):(this.ptr=Vm(e,t,i,n),void(ct(Si)[this.ptr]=this))}function Ri(e,t,i,n){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===n?(this.ptr=ic(e,t,i),void(ct(Ri)[this.ptr]=this)):(this.ptr=bb(e,t,i,n),void(ct(Ri)[this.ptr]=this))}function ji(e,t){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),this.ptr=kf(e,t),ct(ji)[this.ptr]=this}function Ii(){throw"cannot construct a btContactSolverInfo, no constructor in IDL"}function Ti(){throw"cannot construct a btOverlappingPairCache, no constructor in IDL"}function Di(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=lp(e),ct(Di)[this.ptr]=this}function Oi(){this.ptr=Yl(),ct(Oi)[this.ptr]=this}function Li(e,t,i,n,r,o,_){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),o&&"object"==typeof o&&(o=o.ptr),_&&"object"==typeof _&&(_=_.ptr),void 0===i?(this.ptr=qf(e,t),void(ct(Li)[this.ptr]=this)):void 0===n?(this.ptr=Jf(e,t,i),void(ct(Li)[this.ptr]=this)):void 0===r?(this.ptr=Xs(e,t,i,n),void(ct(Li)[this.ptr]=this)):void 0===o?(this.ptr=Qf(e,t,i,n,r),void(ct(Li)[this.ptr]=this)):void 0===_?(this.ptr=zf(e,t,i,n,r,o),void(ct(Li)[this.ptr]=this)):(this.ptr=Yf(e,t,i,n,r,o,_),void(ct(Li)[this.ptr]=this))}function xi(){this.ptr=Zd(),ct(xi)[this.ptr]=this}function Mi(){throw"cannot construct a btTranslationalLimitMotor2, no constructor in IDL"}function Pi(){throw"cannot construct a LocalShapeInfo, no constructor in IDL"}function Wi(){throw"cannot construct a btConstraintSolver, no constructor in IDL"}function Bi(e,t,i,n,r){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===n?(this.ptr=qc(e,t,i),void(ct(Bi)[this.ptr]=this)):void 0===r?(this.ptr=_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_4(e,t,i,n),void(ct(Bi)[this.ptr]=this)):(this.ptr=Kr(e,t,i,n,r),void(ct(Bi)[this.ptr]=this))}function Ai(e,t,i,n,r){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),this.ptr=fc(e,t,i,n,r),ct(Ai)[this.ptr]=this}function Fi(){throw"cannot construct a btOverlappingPairCallback, no constructor in IDL"}function Gi(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=Yd(e),ct(Gi)[this.ptr]=this}function Ei(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=rp(e),ct(Ei)[this.ptr]=this}function Vi(e){e&&"object"==typeof e&&(e=e.ptr),this.ptr=yf(e),ct(Vi)[this.ptr]=this}function Ni(e,t){return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===e?(this.ptr=k_(),void(ct(Ni)[this.ptr]=this)):void 0===t?(this.ptr=_emscripten_bind_btTransform_btTransform_1(e),void(ct(Ni)[this.ptr]=this)):(this.ptr=w_(e,t),void(ct(Ni)[this.ptr]=this))}function Xi(e,t,i){e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),this.ptr=Ga(e,t,i),ct(Xi)[this.ptr]=this}function Hi(){this.ptr=qm(),ct(Hi)[this.ptr]=this}function Zi(){throw"cannot construct a btRotationalLimitMotor2, no constructor in IDL"}n=n||{};var n;n||(n=("undefined"!=typeof t?t:null)||{});var Ui={};for(var zi in n)n.hasOwnProperty(zi)&&(Ui[zi]=n[zi]);var Yi=!1,Ki=!1,Qi=!1,qi=!1;if(n.ENVIRONMENT)if("WEB"===n.ENVIRONMENT)Yi=!0;else if("WORKER"===n.ENVIRONMENT)Ki=!0;else if("NODE"===n.ENVIRONMENT)Qi=!0;else{if("SHELL"!==n.ENVIRONMENT)throw new Error("The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");qi=!0}else Yi="object"==typeof window,Ki="function"==typeof importScripts,Qi="object"==typeof e&&!0&&!Yi&&!Ki,qi=!Yi&&!Qi&&!Ki;if(Qi){n.print||(n.print=console.log),n.printErr||(n.printErr=console.warn);var Ji,$i;n.read=function(e,t){Ji||(Ji=i(4)),$i||($i=i(5)),e=$i.normalize(e);var n=Ji.readFileSync(e);return n||e==$i.resolve(e)||(e=path.join(o,"..","src",e),n=Ji.readFileSync(e)),n&&!t&&(n=n.toString()),n},n.readBinary=function(e){var t=n.read(e,!0);return t.buffer||(t=new Uint8Array(t)),s(t.buffer),t},n.load=function(e){r(read(e))},n.thisProgram||(e.argv.length>1?n.thisProgram=e.argv[1].replace(/\\\\/g,"/"):n.thisProgram="unknown-program"),n.arguments=e.argv.slice(2),_.exports=n,e.on("uncaughtException",function(e){if(!(e instanceof rt))throw e}),n.inspect=function(){return"[Emscripten Module object]"}}else if(qi)n.print||(n.print=print),"undefined"!=typeof printErr&&(n.printErr=printErr),"undefined"!=typeof read?n.read=read:n.read=function(){throw"no read() available (jsc?)"},n.readBinary=function(e){if("function"==typeof readbuffer)return new Uint8Array(readbuffer(e));var t=read(e,"binary");return s("object"==typeof t),t},"undefined"!=typeof scriptArgs?n.arguments=scriptArgs:"undefined"!=typeof arguments&&(n.arguments=arguments);else{if(!Yi&&!Ki)throw"Unknown runtime environment. Where are we?";if(n.read=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},n.readAsync=function(e,t,i){var n=new XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):i()},n.onerror=i,n.send(null)},"undefined"!=typeof arguments&&(n.arguments=arguments),"undefined"!=typeof console)n.print||(n.print=function(e){console.log(e)}),n.printErr||(n.printErr=function(e){console.warn(e)});else{var en=!1;n.print||(n.print=en&&"undefined"!=typeof dump?function(e){dump(e)}:function(e){})}Ki&&(n.load=importScripts),"undefined"==typeof n.setWindowTitle&&(n.setWindowTitle=function(e){document.title=e})}!n.load&&n.read&&(n.load=function(e){r(n.read(e))}),n.print||(n.print=function(){}),n.printErr||(n.printErr=n.print),n.arguments||(n.arguments=[]),n.thisProgram||(n.thisProgram="./this.program"),n.print=n.print,n.printErr=n.printErr,n.preRun=[],n.postRun=[];for(var zi in Ui)Ui.hasOwnProperty(zi)&&(n[zi]=Ui[zi]);Ui=void 0;var tn={setTempRet0:function(e){tempRet0=e},getTempRet0:function(){return tempRet0},stackSave:function(){return jn},stackRestore:function(e){jn=e},getNativeTypeSize:function(e){switch(e){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:if("*"===e[e.length-1])return tn.QUANTUM_SIZE;if("i"===e[0]){var t=parseInt(e.substr(1));return s(t%8===0),t/8}return 0}},getNativeFieldSize:function(e){return Math.max(tn.getNativeTypeSize(e),tn.QUANTUM_SIZE)},STACK_ALIGN:16,prepVararg:function(e,t){return"double"===t||"i64"===t?7&e&&(s(4===(7&e)),e+=4):s(0===(3&e)),e},getAlignSize:function(e,t,i){return i||"i64"!=e&&"double"!=e?e?Math.min(t||(e?tn.getNativeFieldSize(e):0),tn.QUANTUM_SIZE):Math.min(t,8):8},dynCall:function(e,t,i){return i&&i.length?(i.splice||(i=Array.prototype.slice.call(i)),i.splice(0,0,t),n["dynCall_"+e].apply(null,i)):n["dynCall_"+e].call(null,t)},functionPointers:[],addFunction:function(e){for(var t=0;t<tn.functionPointers.length;t++)if(!tn.functionPointers[t])return tn.functionPointers[t]=e,2*(1+t);throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."},removeFunction:function(e){tn.functionPointers[(e-2)/2]=null},warnOnce:function(e){tn.warnOnce.shown||(tn.warnOnce.shown={}),tn.warnOnce.shown[e]||(tn.warnOnce.shown[e]=1,n.printErr(e))},funcWrappers:{},getFuncWrapper:function(e,t){s(t),tn.funcWrappers[t]||(tn.funcWrappers[t]={});var i=tn.funcWrappers[t];return i[e]||(i[e]=function(){return tn.dynCall(t,e,arguments)}),i[e]},getCompilerSetting:function(e){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"},stackAlloc:function(e){var t=jn;return jn=jn+e|0,jn=jn+15&-16,t},staticAlloc:function(e){var t=kn;return kn=kn+e|0,kn=kn+15&-16,t},dynamicAlloc:function(e){var t=Dn;if(Dn=Dn+e|0,Dn=Dn+15&-16,Dn>=Ln){var i=T();if(!i)return Dn=t,0}return t},alignMemory:function(e,t){var i=e=Math.ceil(e/(t?t:16))*(t?t:16);return i},makeBigInt:function(e,t,i){var n=i?+(e>>>0)+4294967296*+(t>>>0):+(e>>>0)+4294967296*+(0|t);return n},GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};n.Runtime=tn;var nn,rn,on=!1,_n=0;!function(){var e={stackSave:function(){tn.stackSave()},stackRestore:function(){tn.stackRestore()},arrayToC:function(e){var t=tn.stackAlloc(e.length);return X(e,t),t},stringToC:function(e){var t=0;return null!==e&&void 0!==e&&0!==e&&(t=tn.stackAlloc((e.length<<2)+1),N(e,t)),t}},t={string:e.stringToC,array:e.arrayToC};rn=function(e,i,n,r,o){var _=a(e),s=[],c=0;if(r)for(var f=0;f<r.length;f++){var p=t[n[f]];p?(0===c&&(c=tn.stackSave()),s[f]=p(r[f])):s[f]=r[f]}var l=_.apply(null,s);if("string"===i&&(l=u(l)),0!==c){if(o&&o.async)return void EmterpreterAsync.asyncFinalizers.push(function(){tn.stackRestore(c)});tn.stackRestore(c)}return l},nn=function(e,t,i){return function(){return rn(e,t,i,arguments)}}}(),n.ccall=rn,n.cwrap=nn,n.setValue=c,n.getValue=f;var sn=0,an=1,cn=2,fn=3,pn=4;n.ALLOC_NORMAL=sn,n.ALLOC_STACK=an,n.ALLOC_STATIC=cn,n.ALLOC_DYNAMIC=fn,n.ALLOC_NONE=pn,n.allocate=p,n.getMemory=l,n.Pointer_stringify=u,n.AsciiToString=b,n.stringToAscii=d,n.UTF8ArrayToString=h,n.UTF8ToString=m,n.stringToUTF8Array=y,n.stringToUTF8=g,n.lengthBytesUTF8=v,n.stackTrace=S;for(var ln,un,bn,dn,hn,mn,yn,gn,vn,Cn,wn=0,kn=0,Sn=!1,Rn=0,jn=0,In=0,Tn=0,Dn=0,On=n.TOTAL_STACK||5242880,Ln=n.TOTAL_MEMORY||67108864,xn=65536;xn<Ln||xn<2*On;)xn<16777216?xn*=2:xn+=16777216;if(xn!==Ln&&(Ln=xn),un=n.buffer?n.buffer:new ArrayBuffer(Ln),j(),yn[0]=255,255!==dn[0]||0!==dn[3])throw"Typed arrays 2 must be run on a little-endian system";n.HEAP=ln,n.buffer=un,n.HEAP8=bn,n.HEAP16=hn,n.HEAP32=yn,n.HEAPU8=dn,n.HEAPU16=mn,n.HEAPU32=gn,n.HEAPF32=vn,n.HEAPF64=Cn;var Mn=[],Pn=[],Wn=[],Bn=[],An=[],Fn=!1,Gn=!1;n.addOnPreRun=W,n.addOnInit=B,n.addOnPreMain=A,n.addOnExit=F,n.addOnPostRun=G,n.intArrayFromString=E,n.intArrayToString=V,n.writeStringToMemory=N,n.writeArrayToMemory=X,n.writeAsciiToMemory=H,Math.imul&&Math.imul(4294967295,5)===-5||(Math.imul=function(e,t){var i=e>>>16,n=65535&e,r=t>>>16,o=65535&t;return n*o+(i*o+n*r<<16)|0}),Math.imul=Math.imul,Math.clz32||(Math.clz32=function(e){e>>>=0;for(var t=0;t<32;t++)if(e&1<<31-t)return t;return 32}),Math.clz32=Math.clz32,Math.trunc||(Math.trunc=function(e){return e<0?Math.ceil(e):Math.floor(e)}),Math.trunc=Math.trunc;var En=Math.abs,Vn=(Math.cos,Math.sin,Math.tan,Math.acos,Math.asin,Math.atan,Math.atan2,Math.exp,Math.log,Math.sqrt,Math.ceil),Nn=Math.floor,Xn=Math.pow,Hn=(Math.imul,Math.fround,Math.min),Zn=(Math.clz32,Math.trunc,0),Un=null,zn=null;n.addRunDependency=Z,n.removeRunDependency=U,n.preloadedImages={},n.preloadedAudios={};var Yn=[function(e,t,i,r,o,_,s,a){var c=n.getCache(n.ConcreteContactResultCallback)[e];if(!c.hasOwnProperty("addSingleResult"))throw"a JSImplementation must implement all functions, you forgot ConcreteContactResultCallback::addSingleResult.";return c.addSingleResult(t,i,r,o,_,s,a)}];wn=8,kn=wn+23344,Pn.push({func:function(){Fo()}},{func:function(){Sf()}}),p([36,32,0,0,209,32,0,0,76,32,0,0,183,32,0,0,8,0,0,0,0,0,0,0,76,32,0,0,168,32,0,0,16,0,0,0,0,0,0,0,36,32,0,0,20,33,0,0,76,32,0,0,251,32,0,0,48,0,0,0,0,0,0,0,76,32,0,0,233,32,0,0,56,0,0,0,0,0,0,0,36,32,0,0,48,33,0,0,36,32,0,0,71,33,0,0,76,32,0,0,90,33,0,0,8,0,0,0,0,0,0,0,76,32,0,0,109,33,0,0,96,0,0,0,0,0,0,0,76,32,0,0,130,33,0,0,96,0,0,0,0,0,0,0,76,32,0,0,152,33,0,0,96,0,0,0,0,0,0,0,36,32,0,0,175,33,0,0,36,32,0,0,190,33,0,0,76,32,0,0,214,33,0,0,56,0,0,0,0,0,0,0,76,32,0,0,245,33,0,0,216,0,0,0,0,0,0,0,36,32,0,0,118,34,0,0,76,32,0,0,138,34,0,0,216,0,0,0,0,0,0,0,36,32,0,0,248,34,0,0,76,32,0,0,100,35,0,0,88,0,0,0,0,0,0,0,76,32,0,0,133,35,0,0,248,0,0,0,0,0,0,0,76,32,0,0,162,35,0,0,40,1,0,0,0,0,0,0,36,32,0,0,181,35,0,0,76,32,0,0,220,35,0,0,168,0,0,0,0,0,0,0,76,32,0,0,244,35,0,0,216,0,0,0,0,0,0,0,36,32,0,0,14,36,0,0,36,32,0,0,61,36,0,0,136,32,0,0,54,37,0,0,0,0,0,0,2,0,0,0,96,6,0,0,2,0,0,0,104,6,0,0,2,4,0,0,76,32,0,0,74,37,0,0,144,1,0,0,0,0,0,0,76,32,0,0,96,37,0,0,160,1,0,0,0,0,0,0,36,32,0,0,122,37,0,0,36,32,0,0,149,37,0,0,76,32,0,0,178,37,0,0,64,7,0,0,0,0,0,0,76,32,0,0,69,38,0,0,64,7,0,0,0,0,0,0,76,32,0,0,218,38,0,0,96,0,0,0,0,0,0,0,76,32,0,0,88,39,0,0,240,1,0,0,0,0,0,0,36,32,0,0,221,39,0,0,76,32,0,0,65,40,0,0,80,7,0,0,0,0,0,0,76,32,0,0,240,40,0,0,80,7,0,0,0,0,0,0,76,32,0,0,181,41,0,0,40,2,0,0,0,0,0,0,36,32,0,0,82,42,0,0,76,32,0,0,141,42,0,0,144,1,0,0,0,0,0,0,76,32,0,0,165,42,0,0,160,1,0,0,0,0,0,0,76,32,0,0,191,42,0,0,64,4,0,0,0,0,0,0,76,32,0,0,217,42,0,0,248,0,0,0,0,0,0,0,76,32,0,0,248,42,0,0,96,0,0,0,0,0,0,0,76,32,0,0,17,43,0,0,96,2,0,0,0,0,0,0,76,32,0,0,56,43,0,0,96,0,0,0,0,0,0,0,36,32,0,0,89,43,0,0,76,32,0,0,122,43,0,0,248,0,0,0,0,0,0,0,76,32,0,0,158,43,0,0,96,6,0,0,0,0,0,0,76,32,0,0,185,43,0,0,24,6,0,0,0,0,0,0,76,32,0,0,238,43,0,0,96,6,0,0,0,0,0,0,76,32,0,0,140,44,0,0,160,2,0,0,0,0,0,0,76,32,0,0,180,44,0,0,248,0,0,0,0,0,0,0,76,32,0,0,206,44,0,0,24,3,0,0,0,0,0,0,36,32,0,0,83,45,0,0,76,32,0,0,131,45,0,0,24,3,0,0,0,0,0,0,76,32,0,0,16,46,0,0,64,4,0,0,0,0,0,0,76,32,0,0,43,46,0,0,88,0,0,0,0,0,0,0,76,32,0,0,77,46,0,0,96,3,0,0,0,0,0,0,36,32,0,0,111,46,0,0,76,32,0,0,138,46,0,0,160,2,0,0,0,0,0,0,76,32,0,0,188,46,0,0,160,2,0,0,0,0,0,0,76,32,0,0,245,46,0,0,160,2,0,0,0,0,0,0,76,32,0,0,34,47,0,0,160,2,0,0,0,0,0,0,76,32,0,0,87,47,0,0,160,2,0,0,0,0,0,0,76,32,0,0,139,47,0,0,160,2,0,0,0,0,0,0,76,32,0,0,172,47,0,0,160,2,0,0,0,0,0,0,76,32,0,0,221,47,0,0,160,2,0,0,0,0,0,0,76,32,0,0,16,48,0,0,160,2,0,0,0,0,0,0,76,32,0,0,59,48,0,0,160,2,0,0,0,0,0,0,76,32,0,0,107,48,0,0,88,0,0,0,0,0,0,0,76,32,0,0,126,48,0,0,80,1,0,0,0,0,0,0,76,32,0,0,142,48,0,0,24,4,0,0,0,0,0,0,36,32,0,0,169,48,0,0,76,32,0,0,195,48,0,0,24,3,0,0,0,0,0,0,36,32,0,0,214,48,0,0,76,32,0,0,29,49,0,0,248,0,0,0,0,0,0,0,76,32,0,0,64,49,0,0,248,0,0,0,0,0,0,0,76,32,0,0,101,49,0,0,40,1,0,0,0,0,0,0,76,32,0,0,126,49,0,0,24,6,0,0,0,0,0,0,76,32,0,0,143,49,0,0,144,6,0,0,0,0,0,0,76,32,0,0,208,49,0,0,176,0,0,0,0,0,0,0,76,32,0,0,62,50,0,0,176,0,0,0,0,0,0,0,76,32,0,0,166,50,0,0,176,0,0,0,0,0,0,0,76,32,0,0,23,51,0,0,112,5,0,0,0,0,0,0,76,32,0,0,72,51,0,0,216,4,0,0,0,0,0,0,76,32,0,0,99,51,0,0,216,4,0,0,0,0,0,0,36,32,0,0,126,51,0,0,76,32,0,0,166,51,0,0,8,5,0,0,0,0,0,0,76,32,0,0,238,51,0,0,8,5,0,0,0,0,0,0,76,32,0,0,255,51,0,0,112,5,0,0,0,0,0,0,76,32,0,0,34,52,0,0,48,5,0,0,0,0,0,0,76,32,0,0,55,52,0,0,48,5,0,0,0,0,0,0,76,32,0,0,76,52,0,0,40,6,0,0,0,0,0,0,76,32,0,0,125,52,0,0,136,5,0,0,0,0,0,0,36,32,0,0,149,52,0,0,76,32,0,0,170,52,0,0,8,5,0,0,0,0,0,0,76,32,0,0,186,52,0,0,40,6,0,0,0,0,0,0,76,32,0,0,228,52,0,0,104,6,0,0,0,0,0,0,76,32,0,0,1,53,0,0,112,5,0,0,0,0,0,0,76,32,0,0,49,53,0,0,184,5,0,0,0,0,0,0,76,32,0,0,78,53,0,0,184,5,0,0,0,0,0,0,76,32,0,0,107,53,0,0,240,0,0,0,0,0,0,0,76,32,0,0,124,53,0,0,104,6,0,0,0,0,0,0,76,32,0,0,224,53,0,0,104,6,0,0,0,0,0,0,76,32,0,0,59,54,0,0,112,5,0,0,0,0,0,0,76,32,0,0,85,54,0,0,24,6,0,0,0,0,0,0,76,32,0,0,122,54,0,0,112,5,0,0,0,0,0,0,76,32,0,0,145,54,0,0,32,5,0,0,0,0,0,0,36,32,0,0,201,54,0,0,36,32,0,0,99,55,0,0,36,32,0,0,120,55,0,0,76,32,0,0,154,55,0,0,88,6,0,0,0,0,0,0,76,32,0,0,183,55,0,0,112,6,0,0,0,0,0,0,76,32,0,0,200,55,0,0,32,5,0,0,0,0,0,0,76,32,0,0,235,55,0,0,104,6,0,0,0,0,0,0,76,32,0,0,81,56,0,0,96,6,0,0,0,0,0,0,76,32,0,0,105,56,0,0,224,6,0,0,0,0,0,0,76,32,0,0,135,56,0,0,24,3,0,0,0,0,0,0,36,32,0,0,154,56,0,0,76,32,0,0,169,56,0,0,224,6,0,0,0,0,0,0,76,32,0,0,187,56,0,0,8,7,0,0,0,0,0,0,36,32,0,0,220,56,0,0,76,32,0,0,253,56,0,0,40,1,0,0,0,0,0,0,76,32,0,0,17,57,0,0,8,7,0,0,0,0,0,0,76,32,0,0,53,57,0,0,24,3,0,0,0,0,0,0,76,32,0,0,224,57,0,0,96,6,0,0,0,0,0,0,76,32,0,0,252,57,0,0,96,6,0,0,0,0,0,0,76,32,0,0,27,58,0,0,224,6,0,0,0,0,0,0,76,32,0,0,52,58,0,0,128,7,0,0,0,0,0,0,76,32,0,0,85,58,0,0,144,7,0,0,0,0,0,0,36,32,0,0,118,58,0,0,76,32,0,0,138,58,0,0,168,7,0,0,0,0,0,0,76,32,0,0,184,58,0,0,40,2,0,0,0,0,0,0,76,32,0,0,234,58,0,0,200,7,0,0,0,0,0,0,136,32,0,0,2,59,0,0,0,0,0,0,1,0,0,0,224,7,0,0,2,4,0,0,36,32,0,0,22,59,0,0,76,32,0,0,99,59,0,0,200,7,0,0,0,0,0,0,76,32,0,0,153,59,0,0,200,7,0,0,0,0,0,0,76,32,0,0,186,59,0,0,232,7,0,0,0,0,0,0,76,32,0,0,252,59,0,0,200,7,0,0,0,0,0,0,76,32,0,0,43,60,0,0,200,7,0,0,0,0,0,0,76,32,0,0,102,60,0,0,72,8,0,0,0,0,0,0,36,32,0,0,140,60,0,0,76,32,0,0,235,60,0,0,200,7,0,0,0,0,0,0,76,32,0,0,50,61,0,0,112,8,0,0,0,0,0,0,76,32,0,0,76,61,0,0,88,1,0,0,0,0,0,0,76,32,0,0,239,61,0,0,168,7,0,0,0,0,0,0,76,32,0,0,212,62,0,0,160,8,0,0,0,0,0,0,36,32,0,0,242,62,0,0,76,32,0,0,32,63,0,0,80,1,0,0,0,0,0,0,76,32,0,0,111,63,0,0,144,7,0,0,0,0,0,0,76,32,0,0,130,63,0,0,216,8,0,0,0,0,0,0,36,32,0,0,158,63,0,0,76,32,0,0,179,63,0,0,240,1,0,0,0,0,0,0,76,32,0,0,250,63,0,0,0,9,0,0,0,0,0,0,36,32,0,0,26,64,0,0,76,32,0,0,110,65,0,0,24,9,0,0,0,0,0,0,36,32,0,0,133,65,0,0,76,32,0,0,149,65,0,0,48,0,0,0,0,0,0,0,36,32,0,0,50,76,0,0,76,32,0,0,16,76,0,0,88,9,0,0,0,0,0,0,76,32,0,0,189,75,0,0,56,9,0,0,0,0,0,0,76,32,0,0,226,75,0,0,104,9,0,0,0,0,0,0,36,32,0,0,3,76,0,0,76,32,0,0,248,76,0,0,48,9,0,0,0,0,0,0,76,32,0,0,56,77,0,0,88,9,0,0,0,0,0,0,76,32,0,0,20,77,0,0,128,9,0,0,0,0,0,0,76,32,0,0,90,77,0,0,56,9,0,0,0,0,0,0,0,0,0,0,32,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,72,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,104,0,0,0,7,0,0,0,8,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,9,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,0,0,0,0,120,0,0,0,10,0,0,0,11,0,0,0,9,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,136,0,0,0,10,0,0,0,12,0,0,0,10,0,0,0,9,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,152,0,0,0,10,0,0,0,13,0,0,0,10,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,184,0,0,0,14,0,0,0,15,0,0,0,3,0,0,0,2,0,0,0,11,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,11,0,0,0,14,0,0,0,4,0,0,0,14,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,200,0,0,0,16,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,224,0,0,0,16,0,0,0,18,0,0,0,4,0,0,0,0,0,0,0,240,0,0,0,19,0,0,0,20,0,0,0,3,0,0,0,15,0,0,0,5,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,8,1,0,0,21,0,0,0,22,0,0,0,3,0,0,0,1,0,0,0,16,0,0,0,0,0,0,0,24,1,0,0,23,0,0,0,24,0,0,0,4,0,0,0,0,0,0,0,48,1,0,0,25,0,0,0,26,0,0,0,4,0,0,0,6,0,0,0,17,0,0,0,18,0,0,0,7,0,0,0,8,0,0,0,5,0,0,0,16,0,0,0,5,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,6,0,0,0,19,0,0,0,0,0,0,0,64,1,0,0,16,0,0,0,27,0,0,0,7,0,0,0,0,0,0,0,80,1,0,0,28,0,0,0,29,0,0,0,20,0,0,0,8,0,0,0,20,0,0,0,9,0,0,0,21,0,0,0,0,0,0,0,88,1,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,22,0,0,0,21,0,0,0,34,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,23,0,0,0,35,0,0,0,24,0,0,0,0,0,0,0,96,1,0,0,36,0,0,0,37,0,0,0,9,0,0,0,10,0,0,0,252,255,255,255,96,1,0,0,38,0,0,0,39,0,0,0,11,0,0,0,0,0,0,0,128,1,0,0,40,0,0,0,41,0,0,0,9,0,0,0,0,0,0,0,168,1,0,0,1,0,0,0,25,0,0,0,15,0,0,0,42,0,0,0,43,0,0,0,0,0,0,0,176,1,0,0,44,0,0,0,45,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,192,1,0,0,44,0,0,0,46,0,0,0,12,0,0,0,2,0,0,0,0,0,0,0,208,1,0,0,10,0,0,0,47,0,0,0,10,0,0,0,26,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,224,1,0,0,48,0,0,0,49,0,0,0,10,0,0,0,1,0,0,0,0,0,0,0,248,1,0,0,44,0,0,0,50,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,8,2,0,0,44,0,0,0,51,0,0,0,13,0,0,0,2,0,0,0,0,0,0,0,24,2,0,0,52,0,0,0,53,0,0,0,11,0,0,0,2,0,0,0,0,0,0,0,48,2,0,0,40,0,0,0,54,0,0,0,12,0,0,0,0,0,0,0,64,2,0,0,40,0,0,0,55,0,0,0,13,0,0,0,0,0,0,0,80,2,0,0,56,0,0,0,57,0,0,0,16,0,0,0,17,0,0,0,1,0,0,0,0,0,0,0,96,2,0,0,58,0,0,0,59,0,0,0,5,0,0,0,2,0,0,0,27,0,0,0,0,0,0,0,112,2,0,0,10,0,0,0,60,0,0,0,10,0,0,0,28,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,128,2,0,0,61,0,0,0,62,0,0,0,6,0,0,0,3,0,0,0,29,0,0,0,0,0,0,0,144,2,0,0,10,0,0,0,63,0,0,0,18,0,0,0,30,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,168,2,0,0,64,0,0,0,65,0,0,0,7,0,0,0,4,0,0,0,31,0,0,0,0,0,0,0,184,2,0,0,66,0,0,0,67,0,0,0,14,0,0,0,0,0,0,0,200,2,0,0,68,0,0,0,69,0,0,0,15,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,33,0,0,0,2,0,0,0,2,0,0,0,24,0,0,0,10,0,0,0,34,0,0,0,20,0,0,0,21,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,25,0,0,0,22,0,0,0,14,0,0,0,26,0,0,0,27,0,0,0,18,0,0,0,23,0,0,0,28,0,0,0,19,0,0,0,1,0,0,0,20,0,0,0,0,0,0,0,216,2,0,0,44,0,0,0,70,0,0,0,21,0,0,0,0,0,0,0,232,2,0,0,71,0,0,0,72,0,0,0,5,0,0,0,0,0,0,0,248,2,0,0,73,0,0,0,74,0,0,0,8,0,0,0,5,0,0,0,35,0,0,0,0,0,0,0,8,3,0,0,56,0,0,0,75,0,0,0,24,0,0,0,25,0,0,0,2,0,0,0,0,0,0,0,32,3,0,0,56,0,0,0,76,0,0,0,26,0,0,0,27,0,0,0,3,0,0,0,0,0,0,0,48,3,0,0,56,0,0,0,77,0,0,0,16,0,0,0,17,0,0,0,4,0,0,0,0,0,0,0,64,3,0,0,78,0,0,0,79,0,0,0,9,0,0,0,6,0,0,0,36,0,0,0,0,0,0,0,80,3,0,0,80,0,0,0,81,0,0,0,29,0,0,0,30,0,0,0,11,0,0,0,31,0,0,0,0,0,0,0,104,3,0,0,82,0,0,0,83,0,0,0,6,0,0,0,0,0,0,0,120,3,0,0,82,0,0,0,84,0,0,0,7,0,0,0,0,0,0,0,136,3,0,0,82,0,0,0,85,0,0,0,8,0,0,0,0,0,0,0,152,3,0,0,82,0,0,0,86,0,0,0,9,0,0,0,0,0,0,0,168,3,0,0,82,0,0,0,87,0,0,0,10,0,0,0,0,0,0,0,184,3,0,0,82,0,0,0,88,0,0,0,11,0,0,0,0,0,0,0,200,3,0,0,82,0,0,0,89,0,0,0,12,0,0,0,0,0,0,0,216,3,0,0,82,0,0,0,90,0,0,0,13,0,0,0,0,0,0,0,232,3,0,0,82,0,0,0,91,0,0,0,14,0,0,0,0,0,0,0,248,3,0,0,82,0,0,0,92,0,0,0,15,0,0,0,0,0,0,0,8,4,0,0,93,0,0,0,94,0,0,0,10,0,0,0,7,0,0,0,37,0,0,0,0,0,0,0,24,4,0,0,95,0,0,0,96,0,0,0,20,0,0,0,8,0,0,0,20,0,0,0,9,0,0,0,21,0,0,0,28,0,0,0,22,0,0,0,0,0,0,0,40,4,0,0,97,0,0,0,98,0,0,0,20,0,0,0,8,0,0,0,20,0,0,0,9,0,0,0,21,0,0,0,29,0,0,0,23,0,0,0,0,0,0,0,56,4,0,0,99,0,0,0,100,0,0,0,12,0,0,0,13,0,0,0,32,0,0,0,0,0,0,0,64,4,0,0,56,0,0,0,101,0,0,0,16,0,0,0,17,0,0,0,5,0,0,0,0,0,0,0,80,4,0,0,102,0,0,0,103,0,0,0,30,0,0,0,38,0,0,0,0,0,0,0,88,4,0,0,104,0,0,0,105,0,0,0,11,0,0,0,8,0,0,0,39,0,0,0,0,0,0,0,104,4,0,0,106,0,0,0,107,0,0,0,12,0,0,0,9,0,0,0,40,0,0,0,0,0,0,0,120,4,0,0,23,0,0,0,108,0,0,0,13,0,0,0,0,0,0,0,136,4,0,0,68,0,0,0,109,0,0,0,24,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,41,0,0,0,22,0,0,0,2,0,0,0,33,0,0,0,33,0,0,0,3,0,0,0,2,0,0,0,24,0,0,0,10,0,0,0,34,0,0,0,31,0,0,0,32,0,0,0,1,0,0,0,25,0,0,0,17,0,0,0,34,0,0,0,33,0,0,0,14,0,0,0,35,0,0,0,36,0,0,0,26,0,0,0,34,0,0,0,37,0,0,0,27,0,0,0,2,0,0,0,35,0,0,0,0,0,0,0,152,4,0,0,110,0,0,0,111,0,0,0,28,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,42,0,0,0,38,0,0,0,3,0,0,0,39,0,0,0,33,0,0,0,4,0,0,0,3,0,0,0,40,0,0,0,14,0,0,0,34,0,0,0,29,0,0,0,36,0,0,0,37,0,0,0,43,0,0,0,44,0,0,0,0,0,0,0,168,4,0,0,112,0,0,0,113,0,0,0,38,0,0,0,0,0,0,0,184,4,0,0,112,0,0,0,114,0,0,0,39,0,0,0,0,0,0,0,200,4,0,0,112,0,0,0,115,0,0,0,40,0,0,0,0,0,0,0,216,4,0,0,116,0,0,0,117,0,0,0,30,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,45,0,0,0,22,0,0,0,4,0,0,0,41,0,0,0,46,0,0,0,5,0,0,0,2,0,0,0,42,0,0,0,15,0,0,0,34,0,0,0,20,0,0,0,41,0,0,0,1,0,0,0,31,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,232,4,0,0,116,0,0,0,118,0,0,0,30,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,45,0,0,0,22,0,0,0,4,0,0,0,44,0,0,0,46,0,0,0,5,0,0,0,2,0,0,0,42,0,0,0,15,0,0,0,34,0,0,0,20,0,0,0,41,0,0,0,1,0,0,0,31,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,248,4,0,0,116,0,0,0,119,0,0,0,30,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,45,0,0,0,22,0,0,0,4,0,0,0,45,0,0,0,46,0,0,0,5,0,0,0,2,0,0,0,42,0,0,0,15,0,0,0,34,0,0,0,20,0,0,0,41,0,0,0,1,0,0,0,31,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,16,5,0,0,120,0,0,0,121,0,0,0,32,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,47,0,0,0,46,0,0,0,5,0,0,0,47,0,0,0,33,0,0,0,6,0,0,0,4,0,0,0,48,0,0,0,16,0,0,0,34,0,0,0,48,0,0,0,122,0,0,0,0,0,0,0,48,5,0,0,116,0,0,0,123,0,0,0,33,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,49,0,0,0,22,0,0,0,6,0,0,0,49,0,0,0,50,0,0,0,2,0,0,0,2,0,0,0,50,0,0,0,17,0,0,0,34,0,0,0,43,0,0,0,44,0,0,0,1,0,0,0,34,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,64,5,0,0,116,0,0,0,124,0,0,0,33,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,49,0,0,0,22,0,0,0,6,0,0,0,51,0,0,0,51,0,0,0,2,0,0,0,2,0,0,0,50,0,0,0,17,0,0,0,34,0,0,0,43,0,0,0,44,0,0,0,1,0,0,0,34,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,80,5,0,0,116,0,0,0,125,0,0,0,33,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,49,0,0,0,22,0,0,0,6,0,0,0,52,0,0,0,52,0,0,0,2,0,0,0,2,0,0,0,50,0,0,0,17,0,0,0,34,0,0,0,43,0,0,0,44,0,0,0,1,0,0,0,34,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,96,5,0,0,126,0,0,0,127,0,0,0,35,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,53,0,0,0,22,0,0,0,7,0,0,0,53,0,0,0,33,0,0,0,2,0,0,0,2,0,0,0,54,0,0,0,18,0,0,0,34,0,0,0,45,0,0,0,46,0,0,0,2,0,0,0,36,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,14,0,0,0,55,0,0,0,56,0,0,0,37,0,0,0,47,0,0,0,57,0,0,0,38,0,0,0,3,0,0,0,0,0,0,0,128,5,0,0,128,0,0,0,129,0,0,0,0,0,0,0,152,5,0,0,68,0,0,0,130,0,0,0,35,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,54,0,0,0,58,0,0,0,7,0,0,0,59,0,0,0,33,0,0,0,2,0,0,0,2,0,0,0,24,0,0,0,10,0,0,0,34,0,0,0,48,0,0,0,49,0,0,0,1,0,0,0,39,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,14,0,0,0,60,0,0,0,61,0,0,0,40,0,0,0,50,0,0,0,62,0,0,0,41,0,0,0,4,0,0,0,0,0,0,0,168,5,0,0,131,0,0,0,132,0,0,0,42,0,0,0,0,0,0,0,184,5,0,0,116,0,0,0,133,0,0,0,43,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,55,0,0,0,22,0,0,0,8,0,0,0,63,0,0,0,56,0,0,0,7,0,0,0,2,0,0,0,64,0,0,0,19,0,0,0,34,0,0,0,51,0,0,0,52,0,0,0,1,0,0,0,44,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,5,0,0,0,0,0,0,0,200,5,0,0,116,0,0,0,134,0,0,0,43,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,55,0,0,0,22,0,0,0,8,0,0,0,65,0,0,0,56,0,0,0,7,0,0,0,2,0,0,0,64,0,0,0,19,0,0,0,34,0,0,0,51,0,0,0,53,0,0,0,1,0,0,0,45,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,6,0,0,0,0,0,0,0,216,5,0,0,116,0,0,0,135,0,0,0,43,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,55,0,0,0,22,0,0,0,8,0,0,0,66,0,0,0,56,0,0,0,7,0,0,0,2,0,0,0,64,0,0,0,19,0,0,0,34,0,0,0,51,0,0,0,54,0,0,0,1,0,0,0,46,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,7,0,0,0,0,0,0,0,232,5,0,0,136,0,0,0,137,0,0,0,3,0,0,0,15,0,0,0,5,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,248,5,0,0,131,0,0,0,138,0,0,0,47,0,0,0,0,0,0,0,8,6,0,0,131,0,0,0,139,0,0,0,48,0,0,0,0,0,0,0,24,6,0,0,68,0,0,0,140,0,0,0,33,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,22,0,0,0,7,0,0,0,1,0,0,0,33,0,0,0,2,0,0,0,2,0,0,0,24,0,0,0,10,0,0,0,34,0,0,0,20,0,0,0,55,0,0,0,1,0,0,0,49,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,14,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,56,6,0,0,116,0,0,0,141,0,0,0,50,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,22,0,0,0,9,0,0,0,67,0,0,0,33,0,0,0,8,0,0,0,8,0,0,0,24,0,0,0,10,0,0,0,34,0,0,0,56,0,0,0,57,0,0,0,1,0,0,0,51,0,0,0,17,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,72,6,0,0,142,0,0,0,143,0,0,0,52,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,57,0,0,0,68,0,0,0,10,0,0,0,69,0,0,0,33,0,0,0,4,0,0,0,3,0,0,0,70,0,0,0,20,0,0,0,34,0,0,0,53,0,0,0,0,0,0,0,112,6,0,0,144,0,0,0,145,0,0,0,54,0,0,0,1,0,0,0,2,0,0,0,58,0,0,0,59,0,0,0,71,0,0,0,60,0,0,0,61,0,0,0,72,0,0,0,58,0,0,0,59,0,0,0,73,0,0,0,21,0,0,0,0,0,0,0,128,6,0,0,146,0,0,0,147,0,0,0,54,0,0,0,1,0,0,0,2,0,0,0,58,0,0,0,59,0,0,0,71,0,0,0,62,0,0,0,63,0,0,0,72,0,0,0,58,0,0,0,59,0,0,0,73,0,0,0,21,0,0,0,0,0,0,0,144,6,0,0,148,0,0,0,149,0,0,0,28,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,64,0,0,0,38,0,0,0,3,0,0,0,74,0,0,0,33,0,0,0,4,0,0,0,3,0,0,0,75,0,0,0,22,0,0,0,34,0,0,0,55,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,160,6,0,0,131,0,0,0,150,0,0,0,56,0,0,0,0,0,0,0,176,6,0,0,44,0,0,0,151,0,0,0,57,0,0,0,0,0,0,0,192,6,0,0,152,0,0,0,153,0,0,0,1,0,0,0,0,0,0,0,208,6,0,0,56,0,0,0,154,0,0,0,60,0,0,0,61,0,0,0,6,0,0,0,0,0,0,0,232,6,0,0,152,0,0,0,155,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,248,6,0,0,156,0,0,0,157,0,0,0,1,0,0,0,0,0,0,0,16,7,0,0,23,0,0,0,158,0,0,0,14,0,0,0,0,0,0,0,32,7,0,0,156,0,0,0,159,0,0,0,2,0,0,0,0,0,0,0,48,7,0,0,56,0,0,0,160,0,0,0,62,0,0,0,63,0,0,0,7,0,0,0,10,215,163,60,0,0,0,0,80,7,0,0,44,0,0,0,161,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,96,7,0,0,152,0,0,0,162,0,0,0,3,0,0,0,0,0,0,0,112,7,0,0,163,0,0,0,164,0,0,0,2,0,0,0,65,0,0,0,66,0,0,0,3,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,4,0,0,0,76,0,0,0,165,0,0,0,77,0,0,0,70,0,0,0,0,0,0,0,152,7,0,0,52,0,0,0,166,0,0,0,15,0,0,0,3,0,0,0,0,0,0,0,184,7,0,0,167,0,0,0,168,0,0,0,169,0,0,0,1,0,0,0,71,0,0,0,72,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,78,0,0,0,23,0,0,0,64,0,0,0,0,0,0,0,200,7,0,0,167,0,0,0,170,0,0,0,171,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,9,0,0,0,1,0,0,0,1,0,0,0,79,0,0,0,24,0,0,0,0,0,0,0,232,7,0,0,167,0,0,0,172,0,0,0,173,0,0,0,1,0,0,0,73,0,0,0,74,0,0,0,9,0,0,0,2,0,0,0,5,0,0,0,80,0,0,0,25,0,0,0,174,0,0,0,81,0,0,0,0,0,0,0,248,7,0,0,167,0,0,0,175,0,0,0,176,0,0,0,1,0,0,0,75,0,0,0,76,0,0,0,9,0,0,0,3,0,0,0,6,0,0,0,82,0,0,0,26,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,8,8,0,0,167,0,0,0,177,0,0,0,173,0,0,0,1,0,0,0,73,0,0,0,77,0,0,0,9,0,0,0,2,0,0,0,5,0,0,0,83,0,0,0,27,0,0,0,174,0,0,0,81,0,0,0,65,0,0,0,0,0,0,0,24,8,0,0,167,0,0,0,178,0,0,0,179,0,0,0,1,0,0,0,78,0,0,0,79,0,0,0,9,0,0,0,4,0,0,0,7,0,0,0,84,0,0,0,28,0,0,0,85,0,0,0,0,0,0,0,40,8,0,0,167,0,0,0,180,0,0,0,181,0,0,0,1,0,0,0,80,0,0,0,81,0,0,0,9,0,0,0,5,0,0,0,8,0,0,0,86,0,0,0,29,0,0,0,87,0,0,0,0,0,0,0,56,8,0,0,182,0,0,0,183,0,0,0,66,0,0,0,1,0,0,0,67,0,0,0,184,0,0,0,88,0,0,0,58,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,80,8,0,0,167,0,0,0,185,0,0,0,171,0,0,0,1,0,0,0,82,0,0,0,83,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,89,0,0,0,30,0,0,0,90,0,0,0,0,0,0,0,96,8,0,0,186,0,0,0,187,0,0,0,32,0,0,0,33,0,0,0,22,0,0,0,21,0,0,0,188,0,0,0,6,0,0,0,7,0,0,0,59,0,0,0,84,0,0,0,35,0,0,0,85,0,0,0,1,0,0,0,68,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,189,0,0,0,91,0,0,0,60,0,0,0,92,0,0,0,93,0,0,0,91,0,0,0,92,0,0,0,16,0,0,0,17,0,0,0,93,0,0,0,190,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,9,0,0,0,10,0,0,0,191,0,0,0,98,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,99,0,0,0,192,0,0,0,100,0,0,0,14,0,0,0,0,0,0,0,168,7,0,0,52,0,0,0,193,0,0,0,15,0,0,0,10,0,0,0,0,0,0,0,128,8,0,0,52,0,0,0,194,0,0,0,18,0,0,0,11,0,0,0,0,0,0,0,144,8,0,0,195,0,0,0,196,0,0,0,3,0,0,0,0,0,0,0,168,8,0,0,197,0,0,0,198,0,0,0,20,0,0,0,8,0,0,0,94,0,0,0,31,0,0,0,101,0,0,0,0,0,0,0,184,8,0,0,199,0,0,0,200,0,0,0,5,0,0,0,102,0,0,0,15,0,0,0,16,0,0,0,61,0,0,0,0,0,0,0,200,8,0,0,201,0,0,0,202,0,0,0,17,0,0,0,0,0,0,0,224,8,0,0,48,0,0,0,203,0,0,0,19,0,0,0,12,0,0,0,28,88,0,0,0,0,0,0,240,8,0,0,204,0,0,0,205,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,8,9,0,0,206,0,0,0,207,0,0,0,103,0,0,0,104,0,0,0,0,0,0,0,32,9,0,0,208,0,0,0,209,0,0,0,32,0,0,0,18,0,0,0,69,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,34,0,0,0,41,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,56,9,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,35,0,0,0,4,0,0,0,15,0,0,0,62,0,0,0,0,0,0,0,72,9,0,0,210,0,0,0,214,0,0,0,212,0,0,0,213,0,0,0,35,0,0,0,5,0,0,0,16,0,0,0,63,0,0,0,0,0,0,0,112,9,0,0,215,0,0,0,216,0,0,0,96,0,0,0,0,0,0,0,160,9,0,0,210,0,0,0,217,0,0,0,212,0,0,0,213,0,0,0,35,0,0,0,6,0,0,0,17,0,0,0,64,0,0,0,49,50,98,116,65,120,105,115,83,119,101,101,112,51,0,50,48,98,116,65,120,105,115,83,119,101,101,112,51,73,110,116,101,114,110,97,108,73,116,69,0,50,49,98,116,66,114,111,97,100,112,104,97,115,101,73,110,116,101,114,102,97,99,101,0,49,53,98,116,78,117,108,108,80,97,105,114,67,97,99,104,101,0,50,50,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,50,53,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,108,108,98,97,99,107,0,50,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,78,54,98,116,68,98,118,116,56,73,67,111,108,108,105,100,101,69,0,49,54,98,116,68,98,118,116,66,114,111,97,100,112,104,97,115,101,0,49,56,98,116,68,98,118,116,84,114,101,101,67,111,108,108,105,100,101,114,0,49,57,66,114,111,97,100,112,104,97,115,101,82,97,121,84,101,115,116,101,114,0,50,48,66,114,111,97,100,112,104,97,115,101,65,97,98,98,84,101,115,116,101,114,0,49,50,98,116,68,105,115,112,97,116,99,104,101,114,0,50,49,98,116,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,51,55,114,101,109,111,118,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,67,111,110,116,97,105,110,105,110,103,80,114,111,120,121,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,56,82,101,109,111,118,101,80,97,105,114,67,97,108,108,98,97,99,107,0,49,55,98,116,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,49,57,99,108,101,97,110,80,114,111,120,121,70,114,111,109,80,97,105,114,115,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,55,67,108,101,97,110,80,97,105,114,67,97,108,108,98,97,99,107,0,49,52,98,116,81,117,97,110,116,105,122,101,100,66,118,104,0,98,116,79,112,116,105,109,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,98,116,66,118,104,83,117,98,116,114,101,101,73,110,102,111,68,97,116,97,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,70,108,111,97,116,68,97,116,97,0,51,48,98,116,65,99,116,105,118,97,116,105,110,103,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,49,54,98,116,66,111,120,66,111,120,68,101,116,101,99,116,111,114,0,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,0,50,49,98,116,67,111,108,108,105,115,105,111,110,68,105,115,112,97,116,99,104,101,114,0,50,51,98,116,67,111,108,108,105,115,105,111,110,80,97,105,114,67,97,108,108,98,97,99,107,0,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,0,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,70,108,111,97,116,68,97,116,97,0,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,0,117,112,100,97,116,101,65,97,98,98,115,0,1,79,118,101,114,102,108,111,119,32,105,110,32,65,65,66,66,44,32,111,98,106,101,99,116,32,114,101,109,111,118,101,100,32,102,114,111,109,32,115,105,109,117,108,97,116,105,111,110,0,73,102,32,121,111,117,32,99,97,110,32,114,101,112,114,111,100,117,99,101,32,116,104,105,115,44,32,112,108,101,97,115,101,32,101,109,97,105,108,32,98,117,103,115,64,99,111,110,116,105,110,117,111,117,115,112,104,121,115,105,99,115,46,99,111,109,10,0,80,108,101,97,115,101,32,105,110,99,108,117,100,101,32,97,98,111,118,101,32,105,110,102,111,114,109,97,116,105,111,110,44,32,121,111,117,114,32,80,108,97,116,102,111,114,109,44,32,118,101,114,115,105,111,110,32,111,102,32,79,83,46,10,0,84,104,97,110,107,115,46,10,0,99,97,108,99,117,108,97,116,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,0,49,55,68,101,98,117,103,68,114,97,119,99,97,108,108,98,97,99,107,0,49,57,98,116,83,105,110,103,108,101,82,97,121,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,111,97,100,112,104,97,115,101,82,97,121,67,97,108,108,98,97,99,107,0,50,52,98,116,66,114,111,97,100,112,104,97,115,101,65,97,98,98,67,97,108,108,98,97,99,107,0,78,49,50,98,116,67,111,110,118,101,120,67,97,115,116,49,48,67,97,115,116,82,101,115,117,108,116,69,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,57,82,97,121,84,101,115,116,101,114,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,49,53,76,111,99,97,108,73,110,102,111,65,100,100,101,114,50,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,112,101,114],"i8",pn,tn.GLOBAL_BASE),\np([102,111,114,109,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,105,111,110,0,100,105,115,112,97,116,99,104,65,108,108,67,111,108,108,105,115,105,111,110,80,97,105,114,115,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,99,111,110,118,101,120,83,119,101,101,112,67,111,109,112,111,117,110,100,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,49,52,76,111,99,97,108,73,110,102,111,65,100,100,101,114,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,99,111,110,118,101,120,83,119,101,101,112,84,101,115,116,0,50,49,98,116,83,105,110,103,108,101,83,119,101,101,112,67,97,108,108,98,97,99,107,0,50,51,98,116,83,105,110,103,108,101,67,111,110,116,97,99,116,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,105,100,103,101,100,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,51,48,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,51,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,67,114,101,97,116,101,70,117,110,99,0,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,52,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,49,53,98,116,84,114,105,97,110,103,108,101,83,104,97,112,101,0,84,114,105,97,110,103,108,101,0,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,68,97,116,97,0,90,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,50,49,99,97,108,99,117,108,97,116,101,84,105,109,101,79,102,73,109,112,97,99,116,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,51,49,76,111,99,97,108,84,114,105,97,110,103,108,101,83,112,104,101,114,101,67,97,115,116,67,97,108,108,98,97,99,107,0,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,49,51,98,116,68,117,109,109,121,82,101,115,117,108,116,0,78,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,54,82,101,115,117,108,116,69,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,50,49,98,116,87,105,116,104,111,117,116,77,97,114,103,105,110,82,101,115,117,108,116,0,50,52,98,116,80,101,114,116,117,114,98,101,100,67,111,110,116,97,99,116,82,101,115,117,108,116,0,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,51,49,98,116,68,101,102,97,117,108,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,50,52,98,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,78,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,78,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,0,49,51,98,116,71,104,111,115,116,79,98,106,101,99,116,0,50,52,98,116,80,97,105,114,67,97,99,104,105,110,103,71,104,111,115,116,79,98,106,101,99,116,0,50,51,98,116,72,97,115,104,101,100,83,105,109,112,108,101,80,97,105,114,67,97,99,104,101,0,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,0,105,115,108,97,110,100,85,110,105,111,110,70,105,110,100,65,110,100,81,117,105,99,107,83,111,114,116,0,112,114,111,99,101,115,115,73,115,108,97,110,100,115,0,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,50,50,83,112,104,101,114,101,84,114,105,97,110,103,108,101,68,101,116,101,99,116,111,114,0,49,48,98,116,66,111,120,83,104,97,112,101,0,66,111,120,0,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,66,86,72,84,82,73,65,78,71,76,69,77,69,83,72,0,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,68,97,116,97,0,90,78,75,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,52,112,101,114,102,111,114,109,82,97,121,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,55,112,101,114,102,111,114,109,67,111,110,118,101,120,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,83,52,95,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,49,52,98,116,67,97,112,115,117,108,101,83,104,97,112,101,0,67,97,112,115,117,108,101,83,104,97,112,101,0,98,116,67,97,112,115,117,108,101,83,104,97,112,101,68,97,116,97,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,88,0,67,97,112,115,117,108,101,88,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,90,0,67,97,112,115,117,108,101,90,0,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,68,97,116,97,0,49,53,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,0,67,111,109,112,111,117,110,100,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,67,104,105,108,100,68,97,116,97,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,68,97,116,97,0,49,52,98,116,67,111,110,99,97,118,101,83,104,97,112,101,0,49,49,98,116,67,111,110,101,83,104,97,112,101,0,67,111,110,101,0,98,116,67,111,110,101,83,104,97,112,101,68,97,116,97,0,49,50,98,116,67,111,110,101,83,104,97,112,101,90,0,67,111,110,101,90,0,49,50,98,116,67,111,110,101,83,104,97,112,101,88,0,67,111,110,101,88,0,49,55,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,0,67,111,110,118,101,120,0,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,68,97,116,97,0,50,49,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,0,49,56,98,116,67,111,110,118,101,120,80,111,108,121,104,101,100,114,111,110,0,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,0,50,53,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,67,111,110,118,101,120,84,114,105,109,101,115,104,0,50,54,76,111,99,97,108,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,49,53,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,0,67,121,108,105,110,100,101,114,89,0,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,68,97,116,97,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,88,0,67,121,108,105,110,100,101,114,88,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,90,0,67,121,108,105,110,100,101,114,90,0,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,57,81,117,97,110,116,105,122,101,100,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,48,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,50,51,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,83,104,97,112,101,0,51,52,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,65,97,98,98,67,97,99,104,105,110,103,83,104,97,112,101,0,49,51,98,116,83,112,104,101,114,101,83,104,97,112,101,0,83,80,72,69,82,69,0,49,56,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,0,83,84,65,84,73,67,80,76,65,78,69,0,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,68,97,116,97,0,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,0,98,116,73,110,116,73,110,100,101,120,68,97,116,97,0,98,116,83,104,111,114,116,73,110,116,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,98,116,67,104,97,114,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,98,116,86,101,99,116,111,114,51,68,111,117,98,108,101,68,97,116,97,0,98,116,77,101,115,104,80,97,114,116,68,97,116,97,0,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,68,97,116,97,0,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,51,49,98,116,73,110,116,101,114,110,97,108,84,114,105,97,110,103,108,101,73,110,100,101,120,67,97,108,108,98,97,99,107,0,50,54,98,116,84,114,105,97,110,103,108,101,73,110,100,101,120,86,101,114,116,101,120,65,114,114,97,121,0,49,52,98,116,84,114,105,97,110,103,108,101,77,101,115,104,0,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,84,82,73,65,78,71,76,69,77,69,83,72,0,90,78,75,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,49,54,70,105,108,116,101,114,101,100,67,97,108,108,98,97,99,107,0,50,49,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,50,55,98,116,67,111,110,116,105,110,117,111,117,115,67,111,110,118,101,120,67,111,108,108,105,115,105,111,110,0,49,54,98,116,80,111,105,110,116,67,111,108,108,101,99,116,111,114,0,49,50,98,116,67,111,110,118,101,120,67,97,115,116,0,49,53,98,116,71,106,107,67,111,110,118,101,120,67,97,115,116,0,51,48,98,116,71,106,107,69,112,97,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,51,48,98,116,67,111,110,118,101,120,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,49,55,98,116,71,106,107,80,97,105,114,68,101,116,101,99,116,111,114,0,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,90,78,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,49,50,99,97,108,99,80,101,110,68,101,112,116,104,69,82,50,50,98,116,86,111,114,111,110,111,105,83,105,109,112,108,101,120,83,111,108,118,101,114,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,83,52,95,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,55,95,82,57,98,116,86,101,99,116,111,114,51,83,57,95,83,57,95,80,49,50,98,116,73,68,101,98,117,103,68,114,97,119,69,50,48,98,116,73,110,116,101,114,109,101,100,105,97,116,101,82,101,115,117,108,116,0,50,53,98,116,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,50,56,98,116,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,50,50,98,116,83,117,98,115,105,109,112,108,101,120,67,111,110,118,101,120,67,97,115,116,0,51,48,98,116,75,105,110,101,109,97,116,105,99,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,0,51,48,98,116,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,73,110,116,101,114,102,97,99,101,0,49,55,98,116,65,99,116,105,111,110,73,110,116,101,114,102,97,99,101,0,52,51,98,116,75,105,110,101,109,97,116,105,99,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,55,67,108,111,115,101,115,116,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,50,49,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,0,49,55,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,0,49,51,98,116,84,121,112,101,100,79,98,106,101,99,116,0,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,50,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,50,51,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,0,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,51,48,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,50,67,111,110,115,116,114,97,105,110,116,0,50,57,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,67,111,110,115,116,114,97,105,110,116,0,98,116,71,101,110,101,114,105,99,54,68,111,102,83,112,114,105,110,103,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,49,55,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,0,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,50,51,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,0,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,51,53,98,116,83,101,113,117,101,110,116,105,97,108,73,109,112,117,108,115,101,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,49,56,98,116,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,115,111,108,118,101,71,114,111,117,112,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,83,101,116,117,112,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,73,116,101,114,97,116,105,111,110,115,0,49,56,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,0,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,50,51,98,116,68,105,115,99,114,101,116,101,68,121,110,97,109,105,99,115,87,111,114,108,100,0,49,53,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,0,100,101,98,117,103,68,114,97,119,87,111,114,108,100,0,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,70,108,111,97,116,68,97,116,97,0,115,116,101,112,83,105,109,117,108,97,116,105,111,110,0,115,121,110,99,104,114,111,110,105,122,101,77,111,116,105,111,110,83,116,97,116,101,115,0,112,114,101,100,105,99,116,85,110,99,111,110,115,116,114,97,105,110,116,77,111,116,105,111,110,0,105,110,116,101,103,114,97,116,101,84,114,97,110,115,102,111,114,109,115,0,67,67,68,32,109,111,116,105,111,110,32,99,108,97,109,112,105,110,103,0,51,52,98,116,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,97,112,112,108,121,32,115,112,101,99,117,108,97,116,105,118,101,32,99,111,110,116,97,99,116,32,114,101,115,116,105,116,117,116,105,111,110,0,117,112,100,97,116,101,65,99,116,105,118,97,116,105,111,110,83,116,97,116,101,0,105,110,116,101,114,110,97,108,83,105,110,103,108,101,83,116,101,112,83,105,109,117,108,97,116,105,111,110,0,99,114,101,97,116,101,80,114,101,100,105,99,116,105,118,101,67,111,110,116,97,99,116,115,0,114,101,108,101,97,115,101,32,112,114,101,100,105,99,116,105,118,101,32,99,111,110,116,97,99,116,32,109,97,110,105,102,111,108,100,115,0,112,114,101,100,105,99,116,105,118,101,32,99,111,110,118,101,120,83,119,101,101,112,84,101,115,116,0,117,112,100,97,116,101,65,99,116,105,111,110,115,0,50,55,73,110,112,108,97,99,101,83,111,108,118,101,114,73,115,108,97,110,100,67,97,108,108,98,97,99,107,0,78,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,49,52,73,115,108,97,110,100,67,97,108,108,98,97,99,107,69,0,49,49,98,116,82,105,103,105,100,66,111,100,121,0,98,116,82,105,103,105,100,66,111,100,121,70,108,111,97,116,68,97,116,97,0,99,97,108,99,117,108,97,116,101,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,115,0,115,111,108,118,101,67,111,110,115,116,114,97,105,110,116,115,0,49,54,98,116,82,97,121,99,97,115,116,86,101,104,105,99,108,101,0,50,53,98,116,68,101,102,97,117,108,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,49,56,98,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,52,67,108,111,115,101,115,116,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,98,116,86,101,99,116,111,114,51,70,108,111,97,116,68,97,116,97,0,82,111,111,116,0,50,57,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,58,58,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,91,39,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,39,93,40,36,49,44,36,50,44,36,51,44,36,52,44,36,53,44,36,54,44,36,55,41,59,32,125,0,50,48,98,116,68,101,102,97,117,108,116,77,111,116,105,111,110,83,116,97,116,101,0,49,51,98,116,77,111,116,105,111,110,83,116,97,116,101,0,49,57,98,116,71,104,111,115,116,80,97,105,114,67,97,108,108,98,97,99,107,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0],"i8",pn,tn.GLOBAL_BASE+10240);\nvar Kn=kn;kn+=16,n._i64Subtract=Ic,n._i64Add=fb;var Qn={last:0,caught:[],infos:{},deAdjust:function(e){if(!e||Qn.infos[e])return e;for(var t in Qn.infos){var i=Qn.infos[t];if(i.adjusted===e)return t}return e},addRef:function(e){if(e){var t=Qn.infos[e];t.refcount++}},decRef:function(e){if(e){var t=Qn.infos[e];s(t.refcount>0),t.refcount--,0===t.refcount&&(t.destructor&&tn.dynCall("vi",t.destructor,[e]),delete Qn.infos[e],___cxa_free_exception(e))}},clearRef:function(e){if(e){var t=Qn.infos[e];t.refcount=0}}};n._memset=Th,n._bitshift64Shl=_f;var qn={},Jn=1,$n={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86},er=Xn;n._malloc=re,n._bitshift64Ashr=cp,n._bitshift64Lshr=Hb,n._memcpy=od;var tr={varargs:0,get:function(e){tr.varargs+=4;var t=yn[tr.varargs-4>>2];return t},getStr:function(){var e=u(tr.get());return e},get64:function(){var e=tr.get(),t=tr.get();return s(e>=0?0===t:t===-1),e},getZero:function(){s(0===tr.get())}};n._memmove=Af,n._llvm_bswap_i32=ch,n._pthread_self=q_,Bn.push(function(){var e=n._fflush;e&&e(0);var t=he.printChar;if(t){var i=he.buffers;i[1].length&&t(1,10),i[2].length&&t(2,10)}}),Rn=jn=tn.alignMemory(kn),Sn=!0,In=Rn+On,Tn=Dn=tn.alignMemory(In);var ir=p([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",fn);n.asmGlobalArg={Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array,NaN:NaN,Infinity:1/0},n.asmLibraryArg={abort:st,assert:s,invoke_viiiii:me,invoke_vid:ye,invoke_vi:ge,invoke_viiidii:ve,invoke_vii:Ce,invoke_iiiiiiiiiii:we,invoke_ii:ke,invoke_viidi:Se,invoke_viddiii:Re,invoke_vidii:je,invoke_iiiii:Ie,invoke_vidi:Te,invoke_diiiiiiii:De,invoke_viiiiddddiid:Oe,invoke_diiiii:Le,invoke_iiii:xe,invoke_viiiiii:Me,invoke_iiid:Pe,invoke_di:We,invoke_iiiiiii:Be,invoke_diiidii:Ae,invoke_viidii:Fe,invoke_viiiiiii:Ge,invoke_viiiiiiiii:Ee,invoke_viiiiiiiiii:Ve,invoke_iii:Ne,invoke_diii:Xe,invoke_diiiiiiiiii:He,invoke_viiiid:Ze,invoke_diiiiiiiii:Ue,invoke_did:ze,invoke_viiiidddddidi:Ye,invoke_diidii:Ke,invoke_diiii:Qe,invoke_iiiiiiiiii:qe,invoke_viiid:Je,invoke_viii:$e,invoke_v:et,invoke_viid:tt,invoke_iidid:it,invoke_viiii:nt,_pthread_cleanup_pop:ae,_abort:$,___gxx_personality_v0:J,___cxa_allocate_exception:oe,__ZSt18uncaught_exceptionv:Y,_sbrk:le,_llvm_pow_f32:er,___cxa_begin_catch:ce,_emscripten_memcpy_big:fe,___resumeException:K,___cxa_find_matching_catch:Q,_pthread_getspecific:te,_pthread_once:ee,_llvm_trap:be,_pthread_key_create:ie,_emscripten_asm_const_diiiiiiii:z,_pthread_setspecific:ne,___cxa_throw:q,___syscall6:pe,_pthread_cleanup_push:se,_gettimeofday:ue,___syscall140:de,___cxa_pure_virtual:_e,___syscall146:he,STACKTOP:jn,STACK_MAX:In,tempDoublePtr:Kn,ABORT:on,cttz_i8:ir};var nr=function(e,t,i){"use asm";var n=new e.Int8Array(i);var r=new e.Int16Array(i);var o=new e.Int32Array(i);var _=new e.Uint8Array(i);var s=new e.Uint16Array(i);var a=new e.Uint32Array(i);var c=new e.Float32Array(i);var f=new e.Float64Array(i);var p=t.STACKTOP|0;var l=t.STACK_MAX|0;var u=t.tempDoublePtr|0;var b=t.ABORT|0;var d=t.cttz_i8|0;var h=0;var m=0;var y=0;var g=0;var v=e.NaN,C=e.Infinity;var w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;var L=0;var x=0;var M=0;var P=0;var W=0;var B=0;var A=0;var F=0;var G=0;var E=0;var V=e.Math.floor;var N=e.Math.abs;var X=e.Math.sqrt;var H=e.Math.pow;var Z=e.Math.cos;var U=e.Math.sin;var z=e.Math.tan;var Y=e.Math.acos;var K=e.Math.asin;var Q=e.Math.atan;var q=e.Math.atan2;var J=e.Math.exp;var $=e.Math.log;var ee=e.Math.ceil;var te=e.Math.imul;var ie=e.Math.min;var ne=e.Math.clz32;var re=t.abort;var oe=t.assert;var _e=t.invoke_viiiii;var se=t.invoke_vid;var ae=t.invoke_vi;var ce=t.invoke_viiidii;var fe=t.invoke_vii;var pe=t.invoke_iiiiiiiiiii;var le=t.invoke_ii;var ue=t.invoke_viidi;var be=t.invoke_viddiii;var de=t.invoke_vidii;var he=t.invoke_iiiii;var me=t.invoke_vidi;var ye=t.invoke_diiiiiiii;var ge=t.invoke_viiiiddddiid;var ve=t.invoke_diiiii;var Ce=t.invoke_iiii;var we=t.invoke_viiiiii;var ke=t.invoke_iiid;var Se=t.invoke_di;var Re=t.invoke_iiiiiii;var je=t.invoke_diiidii;var Ie=t.invoke_viidii;var Te=t.invoke_viiiiiii;var De=t.invoke_viiiiiiiii;var Oe=t.invoke_viiiiiiiiii;var Le=t.invoke_iii;var xe=t.invoke_diii;var Me=t.invoke_diiiiiiiiii;var Pe=t.invoke_viiiid;var We=t.invoke_diiiiiiiii;var Be=t.invoke_did;var Ae=t.invoke_viiiidddddidi;var Fe=t.invoke_diidii;var Ge=t.invoke_diiii;var Ee=t.invoke_iiiiiiiiii;var Ve=t.invoke_viiid;var Ne=t.invoke_viii;var Xe=t.invoke_v;var He=t.invoke_viid;var Ze=t.invoke_iidid;var Ue=t.invoke_viiii;var ze=t._pthread_cleanup_pop;var Ye=t._abort;var Ke=t.___gxx_personality_v0;var Qe=t.___cxa_allocate_exception;var qe=t.__ZSt18uncaught_exceptionv;var Je=t._sbrk;var $e=t._llvm_pow_f32;var et=t.___cxa_begin_catch;var tt=t._emscripten_memcpy_big;var it=t.___resumeException;var nt=t.___cxa_find_matching_catch;var rt=t._pthread_getspecific;var ot=t._pthread_once;var _t=t._llvm_trap;var st=t._pthread_key_create;var at=t._emscripten_asm_const_diiiiiiii;var ct=t._pthread_setspecific;var ft=t.___cxa_throw;var pt=t.___syscall6;var lt=t._pthread_cleanup_push;var ut=t._gettimeofday;var bt=t.___syscall140;var dt=t.___cxa_pure_virtual;var ht=t.___syscall146;var mt=0;function yt(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0;y=p;p=p+16|0;o[5637]=(o[5637]|0)+1;r=Qa(1479)|0;if(!r)m=0;else{o[(r+4+15&-16)+-4>>2]=r;m=r+4+15&-16}if(!(n[19880]|0)){n[19880]=1;o[y>>2]=0;o[y+4>>2]=0;o[y+8>>2]=0;o[y+12>>2]=0;Vg(21260,0,0,0,y)}o[5366]=o[5366]|1;c[5407]=0;g=+c[5417]*0;v=+c[5418]*0;c[5412]=+c[5416]*0;c[5413]=g;c[5414]=v;c[5415]=0;o[5420]=0;o[5421]=0;o[5422]=0;o[5423]=0;v=+c[5409]*0;g=+c[5410]*0;c[5461]=+c[5408]*0;c[5462]=v;c[5463]=g;c[5464]=0;o[m+4>>2]=12;o[m+8>>2]=-1;o[m+12>>2]=-1;c[m+16>>2]=3.4028234663852886e38;n[m+20>>0]=1;n[m+21>>0]=0;o[m+24>>2]=-1;f=m+28|0;o[f>>2]=21260;l=m+32|0;o[l>>2]=e;c[m+36>>2]=0;c[m+40>>2]=.30000001192092896;o[m+44>>2]=0;o[m>>2]=7300;u=m+112|0;o[u>>2]=o[t>>2];o[u+4>>2]=o[t+4>>2];o[u+8>>2]=o[t+8>>2];o[u+12>>2]=o[t+12>>2];b=m+128|0;o[b>>2]=o[t+16>>2];o[b+4>>2]=o[t+16+4>>2];o[b+8>>2]=o[t+16+8>>2];o[b+12>>2]=o[t+16+12>>2];d=m+144|0;o[d>>2]=o[t+32>>2];o[d+4>>2]=o[t+32+4>>2];o[d+8>>2]=o[t+32+8>>2];o[d+12>>2]=o[t+32+12>>2];h=m+160|0;o[h>>2]=o[t+48>>2];o[h+4>>2]=o[t+48+4>>2];o[h+8>>2]=o[t+48+8>>2];o[h+12>>2]=o[t+48+12>>2];r=m+728|0;t=m+760|0;_=m+908|0;s=m+680|0;a=s+48|0;do{o[s>>2]=0;s=s+4|0}while((s|0)<(a|0));o[r>>2]=1045220557;o[m+732>>2]=1045220557;o[m+736>>2]=1045220557;s=m+740|0;o[s>>2]=0;o[s+4>>2]=0;o[s+8>>2]=0;o[s+12>>2]=0;o[s+16>>2]=0;o[t>>2]=1063675494;o[m+764>>2]=1063675494;o[m+768>>2]=1063675494;s=m+772|0;c[m+804>>2]=0;c[m+820>>2]=0;n[m+836>>0]=0;c[m+840>>2]=0;n[m+856>>0]=0;c[m+860>>2]=0;c[m+876>>2]=0;c[m+892>>2]=0;c[m+808>>2]=0;c[m+824>>2]=0;n[m+837>>0]=0;c[m+844>>2]=0;n[m+857>>0]=0;c[m+864>>2]=0;c[m+880>>2]=0;c[m+896>>2]=0;c[m+812>>2]=0;c[m+828>>2]=0;n[m+838>>0]=0;c[m+848>>2]=0;n[m+858>>0]=0;c[m+868>>2]=0;c[m+884>>2]=0;c[m+900>>2]=0;o[s>>2]=0;o[s+4>>2]=0;o[s+8>>2]=0;o[s+12>>2]=0;o[s+16>>2]=0;o[s+20>>2]=0;o[s+24>>2]=0;n[s+28>>0]=0;s=_;a=s+60|0;do{o[s>>2]=0;s=s+4|0}while((s|0)<(a|0));c[m+968>>2]=1;c[m+972>>2]=-1;c[m+976>>2]=0;c[m+980>>2]=.20000000298023224;c[m+984>>2]=0;c[m+988>>2]=.8999999761581421;c[m+992>>2]=0;n[m+996>>0]=0;c[m+1e3>>2]=0;c[m+1004>>2]=.10000000149011612;n[m+1008>>0]=0;c[m+1012>>2]=0;n[m+1016>>0]=0;c[m+1020>>2]=0;n[m+1024>>0]=0;c[m+1028>>2]=0;n[m+1032>>0]=0;a=m+1036|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;c[m+1056>>2]=1;c[m+1060>>2]=-1;c[m+1064>>2]=0;c[m+1068>>2]=.20000000298023224;c[m+1072>>2]=0;c[m+1076>>2]=.8999999761581421;c[m+1080>>2]=0;n[m+1084>>0]=0;c[m+1088>>2]=0;c[m+1092>>2]=.10000000149011612;n[m+1096>>0]=0;c[m+1100>>2]=0;n[m+1104>>0]=0;c[m+1108>>2]=0;n[m+1112>>0]=0;c[m+1116>>2]=0;n[m+1120>>0]=0;a=m+1124|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;c[m+1144>>2]=1;c[m+1148>>2]=-1;c[m+1152>>2]=0;c[m+1156>>2]=.20000000298023224;c[m+1160>>2]=0;c[m+1164>>2]=.8999999761581421;c[m+1168>>2]=0;n[m+1172>>0]=0;c[m+1176>>2]=0;c[m+1180>>2]=.10000000149011612;n[m+1184>>0]=0;c[m+1188>>2]=0;n[m+1192>>0]=0;c[m+1196>>2]=0;n[m+1200>>0]=0;c[m+1204>>2]=0;n[m+1208>>0]=0;a=m+1212|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[m+1232>>2]=i;o[m+1456>>2]=0;M=+c[u>>2];G=+c[e+4>>2];x=+c[b>>2];F=+c[e+8>>2];L=+c[d>>2];A=+c[e+12>>2];O=+c[m+116>>2];D=+c[m+132>>2];T=+c[m+148>>2];I=+c[m+120>>2];R=+c[m+136>>2];k=+c[m+152>>2];B=+c[e+20>>2];W=+c[e+24>>2];P=+c[e+28>>2];j=+c[e+36>>2];S=+c[e+40>>2];w=+c[e+44>>2];V=+c[h>>2];E=+c[m+164>>2];v=+c[m+168>>2];C=+c[e+52>>2]+(G*V+F*E+A*v);g=B*V+W*E+P*v+ +c[e+56>>2];v=j*V+S*E+w*v+ +c[e+60>>2];c[m+48>>2]=M*G+x*F+L*A;c[m+52>>2]=G*O+F*D+A*T;c[m+56>>2]=G*I+F*R+A*k;c[m+60>>2]=0;c[m+64>>2]=M*B+x*W+L*P;c[m+68>>2]=O*B+D*W+T*P;c[m+72>>2]=I*B+R*W+k*P;c[m+76>>2]=0;c[m+80>>2]=M*j+x*S+L*w;c[m+84>>2]=O*j+D*S+T*w;c[m+88>>2]=I*j+R*S+k*w;c[m+92>>2]=0;c[m+96>>2]=C;c[m+100>>2]=g;c[m+104>>2]=v;c[m+108>>2]=0;fT(m,(o[f>>2]|0)+4|0,(o[l>>2]|0)+4|0);p=y;return m|0}function gt(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,p=0;o[5637]=(o[5637]|0)+1;s=Qa(1479)|0;if(!s)p=0;else{o[(s+4+15&-16)+-4>>2]=s;p=s+4+15&-16}o[p+4>>2]=12;o[p+8>>2]=-1;o[p+12>>2]=-1;c[p+16>>2]=3.4028234663852886e38;n[p+20>>0]=1;n[p+21>>0]=0;o[p+24>>2]=-1;f=p+28|0;o[f>>2]=e;a=p+32|0;o[a>>2]=t;c[p+36>>2]=0;c[p+40>>2]=.30000001192092896;o[p+44>>2]=0;o[p>>2]=7300;s=p+48|0;o[s>>2]=o[i>>2];o[s+4>>2]=o[i+4>>2];o[s+8>>2]=o[i+8>>2];o[s+12>>2]=o[i+12>>2];s=p+64|0;o[s>>2]=o[i+16>>2];o[s+4>>2]=o[i+16+4>>2];o[s+8>>2]=o[i+16+8>>2];o[s+12>>2]=o[i+16+12>>2];s=p+80|0;o[s>>2]=o[i+32>>2];o[s+4>>2]=o[i+32+4>>2];o[s+8>>2]=o[i+32+8>>2];o[s+12>>2]=o[i+32+12>>2];s=p+96|0;o[s>>2]=o[i+48>>2];o[s+4>>2]=o[i+48+4>>2];o[s+8>>2]=o[i+48+8>>2];o[s+12>>2]=o[i+48+12>>2];s=p+112|0;o[s>>2]=o[r>>2];o[s+4>>2]=o[r+4>>2];o[s+8>>2]=o[r+8>>2];o[s+12>>2]=o[r+12>>2];s=p+128|0;o[s>>2]=o[r+16>>2];o[s+4>>2]=o[r+16+4>>2];o[s+8>>2]=o[r+16+8>>2];o[s+12>>2]=o[r+16+12>>2];s=p+144|0;o[s>>2]=o[r+32>>2];o[s+4>>2]=o[r+32+4>>2];o[s+8>>2]=o[r+32+8>>2];o[s+12>>2]=o[r+32+12>>2];s=p+160|0;o[s>>2]=o[r+48>>2];o[s+4>>2]=o[r+48+4>>2];o[s+8>>2]=o[r+48+8>>2];o[s+12>>2]=o[r+48+12>>2];s=p+728|0;e=p+760|0;t=p+908|0;i=p+680|0;r=i+48|0;do{o[i>>2]=0;i=i+4|0}while((i|0)<(r|0));o[s>>2]=1045220557;o[p+732>>2]=1045220557;o[p+736>>2]=1045220557;i=p+740|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[e>>2]=1063675494;o[p+764>>2]=1063675494;o[p+768>>2]=1063675494;i=p+772|0;c[p+804>>2]=0;c[p+820>>2]=0;n[p+836>>0]=0;c[p+840>>2]=0;n[p+856>>0]=0;c[p+860>>2]=0;c[p+876>>2]=0;c[p+892>>2]=0;c[p+808>>2]=0;c[p+824>>2]=0;n[p+837>>0]=0;c[p+844>>2]=0;n[p+857>>0]=0;c[p+864>>2]=0;c[p+880>>2]=0;c[p+896>>2]=0;c[p+812>>2]=0;c[p+828>>2]=0;n[p+838>>0]=0;c[p+848>>2]=0;n[p+858>>0]=0;c[p+868>>2]=0;c[p+884>>2]=0;c[p+900>>2]=0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[i+20>>2]=0;o[i+24>>2]=0;n[i+28>>0]=0;i=t;r=i+60|0;do{o[i>>2]=0;i=i+4|0}while((i|0)<(r|0));c[p+968>>2]=1;c[p+972>>2]=-1;c[p+976>>2]=0;c[p+980>>2]=.20000000298023224;c[p+984>>2]=0;c[p+988>>2]=.8999999761581421;c[p+992>>2]=0;n[p+996>>0]=0;c[p+1e3>>2]=0;c[p+1004>>2]=.10000000149011612;n[p+1008>>0]=0;c[p+1012>>2]=0;n[p+1016>>0]=0;c[p+1020>>2]=0;n[p+1024>>0]=0;c[p+1028>>2]=0;n[p+1032>>0]=0;r=p+1036|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;c[p+1056>>2]=1;c[p+1060>>2]=-1;c[p+1064>>2]=0;c[p+1068>>2]=.20000000298023224;c[p+1072>>2]=0;c[p+1076>>2]=.8999999761581421;c[p+1080>>2]=0;n[p+1084>>0]=0;c[p+1088>>2]=0;c[p+1092>>2]=.10000000149011612;n[p+1096>>0]=0;c[p+1100>>2]=0;n[p+1104>>0]=0;c[p+1108>>2]=0;n[p+1112>>0]=0;c[p+1116>>2]=0;n[p+1120>>0]=0;r=p+1124|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;c[p+1144>>2]=1;c[p+1148>>2]=-1;c[p+1152>>2]=0;c[p+1156>>2]=.20000000298023224;c[p+1160>>2]=0;c[p+1164>>2]=.8999999761581421;c[p+1168>>2]=0;n[p+1172>>0]=0;c[p+1176>>2]=0;c[p+1180>>2]=.10000000149011612;n[p+1184>>0]=0;c[p+1188>>2]=0;n[p+1192>>0]=0;c[p+1196>>2]=0;n[p+1200>>0]=0;c[p+1204>>2]=0;n[p+1208>>0]=0;r=p+1212|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[p+1232>>2]=_;o[p+1456>>2]=0;fT(p,(o[f>>2]|0)+4|0,(o[a>>2]|0)+4|0);return p|0}function vt(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function Ct(e,t,i){e=e|0;t=t|0;i=i|0;if((t|0)<3){n[e+798+t>>0]=i&1;return}else{n[e+968+((t+-3|0)*88|0)+48>>0]=i&1;return}}function wt(e){e=e|0;return+ +c[e+16>>2]}function kt(e,t){e=e|0;t=t|0;return e+968+(t*88|0)|0}function St(e){e=e|0;return e+680|0}function Rt(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+968>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+1056>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+1144|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+1144|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+1144|0;c[e>>2]=i;return}function jt(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+972>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+1060>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+1148|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+1148|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+1148|0;c[e>>2]=i;return}function It(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function Tt(e,t,i){e=e|0;t=t|0;i=+i;if((t|0)<3){c[e+840+(t<<2)>>2]=i;n[e+856+t>>0]=1;return}else{c[e+968+((t+-3|0)*88|0)+60>>2]=i;n[e+968+((t+-3|0)*88|0)+64>>0]=1;return}}function Dt(e,t){e=e|0;t=t|0;o[e+680>>2]=o[t>>2];o[e+680+4>>2]=o[t+4>>2];o[e+680+8>>2]=o[t+8>>2];o[e+680+12>>2]=o[t+12>>2];return}function Ot(e,t){e=e|0;t=t|0;o[e+696>>2]=o[t>>2];o[e+696+4>>2]=o[t+4>>2];o[e+696+8>>2]=o[t+8>>2];o[e+696+12>>2]=o[t+12>>2];return}function Lt(e,t,i){e=e|0;t=t|0;i=+i;if((t|0)<3){c[e+820+(t<<2)>>2]=i;n[e+836+t>>0]=1;return}else{c[e+968+((t+-3|0)*88|0)+52>>2]=i;n[e+968+((t+-3|0)*88|0)+56>>0]=1;return}}function xt(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Mt(e,t,i){e=e|0;t=t|0;i=i|0;var r=0;o[5637]=(o[5637]|0)+1;r=Qa(1407)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}sT(r,e,t,i);o[r>>2]=7364;o[r+4>>2]=9;n[r+1309>>0]=0;c[r+1316>>2]=0;c[r+1340>>2]=0;c[r+1364>>2]=1;n[r+1310>>0]=0;c[r+1320>>2]=0;c[r+1344>>2]=0;c[r+1368>>2]=1;n[r+1311>>0]=0;c[r+1324>>2]=0;c[r+1348>>2]=0;c[r+1372>>2]=1;n[r+1312>>0]=0;c[r+1328>>2]=0;c[r+1352>>2]=0;c[r+1376>>2]=1;n[r+1313>>0]=0;c[r+1332>>2]=0;c[r+1356>>2]=0;c[r+1380>>2]=1;n[r+1314>>0]=0;c[r+1336>>2]=0;c[r+1360>>2]=0;c[r+1384>>2]=1;return r|0}function Pt(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0;o[5637]=(o[5637]|0)+1;s=Qa(1407)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}_T(s,e,t,i,r,_);o[s>>2]=7364;o[s+4>>2]=9;n[s+1309>>0]=0;c[s+1316>>2]=0;c[s+1340>>2]=0;c[s+1364>>2]=1;n[s+1310>>0]=0;c[s+1320>>2]=0;c[s+1344>>2]=0;c[s+1368>>2]=1;n[s+1311>>0]=0;c[s+1324>>2]=0;c[s+1348>>2]=0;c[s+1372>>2]=1;n[s+1312>>0]=0;c[s+1328>>2]=0;c[s+1352>>2]=0;c[s+1376>>2]=1;n[s+1313>>0]=0;c[s+1332>>2]=0;c[s+1356>>2]=0;c[s+1380>>2]=1;n[s+1314>>0]=0;c[s+1336>>2]=0;c[s+1360>>2]=0;c[s+1384>>2]=1;return s|0}function Wt(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function Bt(e,t,i){e=e|0;t=t|0;i=i|0;n[e+1309+t>>0]=i&1;if((t|0)<3){n[e+788+t>>0]=i&1;return}else{n[e+868+(t+-3<<6)+44>>0]=i&1;return}}function At(e){e=e|0;return+ +c[e+16>>2]}function Ft(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+868>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+932>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+996|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+996|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+996|0;c[e>>2]=i;return}function Gt(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+872>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+936>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+1e3|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+1e3|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+1e3|0;c[e>>2]=i;return}function Et(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function Vt(e,t,i){e=e|0;t=t|0;i=+i;c[e+1364+(t<<2)>>2]=i;return}function Nt(e,t){e=e|0;t=t|0;o[e+680>>2]=o[t>>2];o[e+680+4>>2]=o[t+4>>2];o[e+680+8>>2]=o[t+8>>2];o[e+680+12>>2]=o[t+12>>2];return}function Xt(e,t){e=e|0;t=t|0;o[e+696>>2]=o[t>>2];o[e+696+4>>2]=o[t+4>>2];o[e+696+8>>2]=o[t+8>>2];o[e+696+12>>2]=o[t+12>>2];return}function Ht(e,t,i){e=e|0;t=t|0;i=+i;c[e+1340+(t<<2)>>2]=i;return}function Zt(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Ut(e){e=e|0;if(o[e+204>>2]&3|0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function zt(e,t){e=e|0;t=t|0;if(!t?o[e+204>>2]&3|0:0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function Yt(){var e=0,t=0;o[5637]=(o[5637]|0)+1;e=Qa(327)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}o[e+164>>2]=1065353216;o[e+168>>2]=1065353216;o[e+172>>2]=1065353216;c[e+176>>2]=0;o[e+180>>2]=0;c[e+184>>2]=0xde0b6b000000000;t=e+188|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[e+204>>2]=1;o[e+208>>2]=-1;o[e+212>>2]=-1;o[e+216>>2]=1;c[e+220>>2]=0;c[e+224>>2]=.5;c[e+228>>2]=0;c[e+232>>2]=0;o[e+240>>2]=0;o[e+244>>2]=-1;c[e+248>>2]=1;c[e+252>>2]=0;c[e+256>>2]=0;o[e+260>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[e+284>>2]=0;o[e+4>>2]=1065353216;t=e+8|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[e+24>>2]=1065353216;t=e+28|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[e+44>>2]=1065353216;t=e+48|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[t+16>>2]=0;o[e>>2]=4344;n[e+304>>0]=1;o[e+300>>2]=0;o[e+292>>2]=0;o[e+296>>2]=0;o[e+236>>2]=4;return e|0}function Kt(e,t){e=e|0;t=t|0;o[e+216>>2]=t;return}function Qt(e){e=e|0;return o[e+204>>2]|0}function qt(e){e=e|0;return o[e+192>>2]|0}function Jt(e){e=e|0;return o[e+292>>2]|0}function $t(e,t){e=e|0;t=t|0;return o[(o[e+300>>2]|0)+(t<<2)>>2]|0}function ei(e){e=e|0;return e+4|0}function ti(e){e=e|0;e=o[e+216>>2]|0;return(e|0)!=5&(e|0)!=2|0}function ii(e){e=e|0;return(o[e+204>>2]&2|0)!=0|0}function ni(e,t){e=e|0;t=t|0;if((o[e+216>>2]&-2|0)==4)return;o[e+216>>2]=t;return}function ri(e,t,i){e=e|0;t=t|0;i=i|0;o[e+164>>2]=o[t>>2];o[e+164+4>>2]=o[t+4>>2];o[e+164+8>>2]=o[t+8>>2];o[e+164+12>>2]=o[t+12>>2];if(!(+c[t>>2]!=1)?!(+c[t+4>>2]!=1):0)i=+c[t+8>>2]!=1?i:0;o[e+180>>2]=i;return}function oi(e,t){e=e|0;t=+t;c[e+256>>2]=t;return}function _i(e,t){e=e|0;t=+t;c[e+252>>2]=t;return}function si(e,t){e=e|0;t=t|0;o[e+204>>2]=t;return}function ai(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function ci(e,t){e=e|0;t=+t;c[e+184>>2]=t;return}function fi(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+224>>2]=t;return}function pi(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+228>>2]=t;return}function li(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+232>>2]=t;return}function ui(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[t+16>>2];o[e+20+4>>2]=o[t+16+4>>2];o[e+20+8>>2]=o[t+16+8>>2];o[e+20+12>>2]=o[t+16+12>>2];o[e+36>>2]=o[t+32>>2];o[e+36+4>>2]=o[t+32+4>>2];o[e+36+8>>2]=o[t+32+8>>2];o[e+36+12>>2]=o[t+32+12>>2];o[e+52>>2]=o[t+48>>2];o[e+52+4>>2]=o[t+48+4>>2];o[e+52+8>>2]=o[t+48+8>>2];o[e+52+12>>2]=o[t+48+12>>2];return}function bi(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function di(){var e=0,t=0;while(1){e=Qa(4)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){o[e>>2]=8084;return e|0}return 0}function hi(e){e=e|0;return}function mi(e){e=e|0;qa(e);return}function yi(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;n=o[t>>2]|0;e=o[i>>2]|0;e=(o[e+236>>2]|0)==4?e:0;if(!((n|0)==0?1:(o[n+236>>2]|0)!=4))EP[o[(o[n>>2]|0)+28>>2]&127](n,i,t);if(!e)return 0;EP[o[(o[e>>2]|0)+28>>2]&127](e,t,i);return 0}function gi(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=o[t>>2]|0;e=o[i>>2]|0;e=(o[e+236>>2]|0)==4?e:0;if(!((r|0)==0?1:(o[r+236>>2]|0)!=4))HP[o[(o[r>>2]|0)+32>>2]&127](r,i,n,t);if(!e)return 0;HP[o[(o[e>>2]|0)+32>>2]&127](e,t,n,i);return 0}function vi(e,t,i){e=e|0;t=t|0;i=i|0;return}function Ci(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function wi(e,t){e=e|0;t=t|0;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(787)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}TM(i,e,t,0);return i|0}function ki(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;o[5637]=(o[5637]|0)+1;n=Qa(787)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}TM(n,e,t,i);return n|0}function Si(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0;o[5637]=(o[5637]|0)+1;_=Qa(787)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}o[_+4>>2]=4;o[_+8>>2]=-1;o[_+12>>2]=-1;c[_+16>>2]=3.4028234663852886e38;n[_+20>>0]=1;n[_+21>>0]=0;o[_+24>>2]=-1;o[_+28>>2]=e;o[_+32>>2]=t;c[_+36>>2]=0;c[_+40>>2]=.30000001192092896;o[_+44>>2]=0;o[_>>2]=7428;t=_+552|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];t=_+568|0;o[t>>2]=o[i+16>>2];o[t+4>>2]=o[i+16+4>>2];o[t+8>>2]=o[i+16+8>>2];o[t+12>>2]=o[i+16+12>>2];t=_+584|0;o[t>>2]=o[i+32>>2];o[t+4>>2]=o[i+32+4>>2];o[t+8>>2]=o[i+32+8>>2];o[t+12>>2]=o[i+32+12>>2];t=_+600|0;o[t>>2]=o[i+48>>2];o[t+4>>2]=o[i+48+4>>2];o[t+8>>2]=o[i+48+8>>2];o[t+12>>2]=o[i+48+12>>2];i=_+616|0;o[i>>2]=o[r>>2];o[i+4>>2]=o[r+4>>2];o[i+8>>2]=o[r+8>>2];o[i+12>>2]=o[r+12>>2];i=_+632|0;o[i>>2]=o[r+16>>2];o[i+4>>2]=o[r+16+4>>2];o[i+8>>2]=o[r+16+8>>2];o[i+12>>2]=o[r+16+12>>2];i=_+648|0;o[i>>2]=o[r+32>>2];o[i+4>>2]=o[r+32+4>>2];o[i+8>>2]=o[r+32+8>>2];o[i+12>>2]=o[r+32+12>>2];i=_+664|0;o[i>>2]=o[r+48>>2];o[i+4>>2]=o[r+48+4>>2];o[i+8>>2]=o[r+48+8>>2];o[i+12>>2]=o[r+48+12>>2];c[_+688>>2]=0;c[_+692>>2]=-1;c[_+696>>2]=.8999999761581421;c[_+700>>2]=.30000001192092896;c[_+704>>2]=1;c[_+708>>2]=0;c[_+712>>2]=0;n[_+716>>0]=0;n[_+736>>0]=0;n[_+737>>0]=0;n[_+738>>0]=0;n[_+739>>0]=1;n[_+740>>0]=0;r=_+748|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;c[_+732>>2]=1;return _|0}function Ri(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0;o[5637]=(o[5637]|0)+1;s=Qa(787)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}o[s+4>>2]=4;o[s+8>>2]=-1;o[s+12>>2]=-1;c[s+16>>2]=3.4028234663852886e38;n[s+20>>0]=1;n[s+21>>0]=0;o[s+24>>2]=-1;o[s+28>>2]=e;o[s+32>>2]=t;c[s+36>>2]=0;c[s+40>>2]=.30000001192092896;o[s+44>>2]=0;o[s>>2]=7428;t=s+552|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];t=s+568|0;o[t>>2]=o[i+16>>2];o[t+4>>2]=o[i+16+4>>2];o[t+8>>2]=o[i+16+8>>2];o[t+12>>2]=o[i+16+12>>2];t=s+584|0;o[t>>2]=o[i+32>>2];o[t+4>>2]=o[i+32+4>>2];o[t+8>>2]=o[i+32+8>>2];o[t+12>>2]=o[i+32+12>>2];t=s+600|0;o[t>>2]=o[i+48>>2];o[t+4>>2]=o[i+48+4>>2];o[t+8>>2]=o[i+48+8>>2];o[t+12>>2]=o[i+48+12>>2];i=s+616|0;o[i>>2]=o[r>>2];o[i+4>>2]=o[r+4>>2];o[i+8>>2]=o[r+8>>2];o[i+12>>2]=o[r+12>>2];i=s+632|0;o[i>>2]=o[r+16>>2];o[i+4>>2]=o[r+16+4>>2];o[i+8>>2]=o[r+16+8>>2];o[i+12>>2]=o[r+16+12>>2];i=s+648|0;o[i>>2]=o[r+32>>2];o[i+4>>2]=o[r+32+4>>2];o[i+8>>2]=o[r+32+8>>2];o[i+12>>2]=o[r+32+12>>2];i=s+664|0;o[i>>2]=o[r+48>>2];o[i+4>>2]=o[r+48+4>>2];o[i+8>>2]=o[r+48+8>>2];o[i+12>>2]=o[r+48+12>>2];c[s+688>>2]=0;c[s+692>>2]=-1;c[s+696>>2]=.8999999761581421;c[s+700>>2]=.30000001192092896;c[s+704>>2]=1;c[s+708>>2]=0;c[s+712>>2]=0;n[s+716>>0]=0;n[s+736>>0]=0;n[s+737>>0]=0;n[s+738>>0]=0;n[s+739>>0]=1;n[s+740>>0]=_&1;r=s+748|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;c[s+732>>2]=_?-1:1;return s|0}function ji(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;var s=0;o[5637]=(o[5637]|0)+1;s=Qa(787)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}IM(s,e,t,i,n,r,_,0);return s|0}function Ii(e,t,i,n,r,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;var a=0;o[5637]=(o[5637]|0)+1;a=Qa(787)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}IM(a,e,t,i,n,r,_,s);return a|0}function Ti(e,t,i,r){e=e|0;t=t|0;i=+i;r=+r;n[e+737>>0]=t&1;c[e+680>>2]=i;c[e+684>>2]=r;return}function Di(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function Oi(e){e=e|0;return+ +c[e+16>>2]}function Li(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function xi(e,t,i,n,r){e=e|0;t=+t;i=+i;n=+n;r=+r;c[e+692>>2]=(i-t)*.5;t=+Ya((i-t)*.5+t);if(!(t<-3.1415927410125732)){if(t>3.1415927410125732)t=t+-6.2831854820251465}else t=t+6.2831854820251465;c[e+688>>2]=t;c[e+696>>2]=n;c[e+700>>2]=r;c[e+704>>2]=1;return}function Mi(e,t,i,n,r,o){e=e|0;t=+t;i=+i;n=+n;r=+r;o=+o;c[e+692>>2]=(i-t)*.5;t=+Ya((i-t)*.5+t);if(!(t<-3.1415927410125732)){if(t>3.1415927410125732)t=t+-6.2831854820251465}else t=t+6.2831854820251465;c[e+688>>2]=t;c[e+696>>2]=n;c[e+700>>2]=r;c[e+704>>2]=o;return}function Pi(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Wi(e,t,i){e=e|0;t=t|0;i=+i;var r=0,_=0;o[5637]=(o[5637]|0)+1;r=Qa(203)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[r>>2]=7044;_=r+60|0;n[r+144>>0]=1;o[r+140>>2]=0;o[r+132>>2]=0;o[r+136>>2]=0;o[r+176>>2]=1;c[r+56>>2]=.019999999552965164;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;o[_+12>>2]=0;n[r+170>>0]=1;o[r+8>>2]=e;c[r+52>>2]=i;c[r+48>>2]=0;o[r+12>>2]=t;n[r+171>>0]=1;c[r+172>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+44>>2]=29.399999618530273;c[r+24>>2]=55;c[r+28>>2]=10;n[r+168>>0]=0;n[r+169>>0]=0;n[r+180>>0]=1;c[r+36>>2]=.7853981852531433;c[r+40>>2]=.7071067690849304;c[r+108>>2]=0;n[r+181>>0]=0;n[r+182>>0]=0;return r|0}function Bi(e,t,i,r){e=e|0;t=t|0;i=+i;r=r|0;var _=0,s=0;o[5637]=(o[5637]|0)+1;_=Qa(203)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}o[_>>2]=7044;s=_+60|0;n[_+144>>0]=1;o[_+140>>2]=0;o[_+132>>2]=0;o[_+136>>2]=0;o[_+176>>2]=r;c[_+56>>2]=.019999999552965164;o[s>>2]=0;o[s+4>>2]=0;o[s+8>>2]=0;o[s+12>>2]=0;n[_+170>>0]=1;o[_+8>>2]=e;c[_+52>>2]=i;c[_+48>>2]=0;o[_+12>>2]=t;n[_+171>>0]=1;c[_+172>>2]=0;c[_+16>>2]=0;c[_+20>>2]=0;c[_+44>>2]=29.399999618530273;c[_+24>>2]=55;c[_+28>>2]=10;n[_+168>>0]=0;n[_+169>>0]=0;n[_+180>>0]=1;c[_+36>>2]=.7853981852531433;c[_+40>>2]=.7071067690849304;c[_+108>>2]=0;n[_+181>>0]=0;n[_+182>>0]=0;return _|0}function Ai(e){e=e|0;return fP[o[(o[e>>2]|0)+40>>2]&127](e)|0}function Fi(e){e=e|0;return o[e+8>>2]|0}function Gi(e){e=e|0;return+ +c[e+44>>2]}function Ei(e){e=e|0;return+ +c[e+36>>2]}function Vi(e){e=e|0;_P[o[(o[e>>2]|0)+44>>2]&255](e);return}function Ni(e){e=e|0;return fP[o[(o[e>>2]|0)+48>>2]&127](e)|0}function Xi(e,t,i){e=e|0;t=t|0;i=+i;NP[o[(o[e>>2]|0)+36>>2]&7](e,t,i);return}function Hi(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+32>>2]&127](e,t);return}function Zi(e,t){e=e|0;t=+t;c[e+24>>2]=t;return}function Ui(e,t){e=e|0;t=+t;c[e+44>>2]=t;return}function zi(e,t){e=e|0;t=+t;c[e+28>>2]=t;return}function Yi(e,t){e=e|0;t=+t;c[e+32>>2]=t;return}function Ki(e,t){e=e|0;t=+t;c[e+36>>2]=t;c[e+40>>2]=+Z(+t);return}function Qi(e,t){e=e|0;t=t|0;t=(t|0)<0?0:t;o[e+176>>2]=(t|0)>2?2:t;return}function qi(e,t){e=e|0;t=t|0;n[e+170>>0]=t&1;return}function Ji(e,t,i){e=e|0;t=t|0;i=+i;NP[o[(o[e>>2]|0)+20>>2]&7](e,t,i);return}function $i(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function en(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+28>>2]&127](e,t);return}function tn(e){e=e|0;if(!e)return;qa(e);return}function nn(e){e=e|0;return+ +c[e+80>>2]}function rn(e){e=e|0;return e+48|0}function on(e){e=e|0;return e+32|0}function _n(e){e=e|0;return e|0}function sn(e){e=e|0;return e+16|0}function an(e){e=e|0;return e+64|0}function cn(e){e=e|0;return e+48|0}function fn(e){e=e|0;return e+32|0}function pn(e,t){e=e|0;t=t|0;o[e>>2]=o[t>>2];o[e+4>>2]=o[t+4>>2];o[e+8>>2]=o[t+8>>2];o[e+12>>2]=o[t+12>>2];return}function ln(e,t){e=e|0;t=t|0;o[e+16>>2]=o[t>>2];o[e+16+4>>2]=o[t+4>>2];o[e+16+8>>2]=o[t+8>>2];o[e+16+12>>2]=o[t+12>>2];return}function un(e,t){e=e|0;t=t|0;o[e+64>>2]=o[t>>2];o[e+64+4>>2]=o[t+4>>2];o[e+64+8>>2]=o[t+8>>2];o[e+64+12>>2]=o[t+12>>2];return}function bn(e,t){e=e|0;t=t|0;o[e+48>>2]=o[t>>2];o[e+48+4>>2]=o[t+4>>2];o[e+48+8>>2]=o[t+8>>2];o[e+48+12>>2]=o[t+12>>2];return}function dn(e,t){e=e|0;t=t|0;o[e+32>>2]=o[t>>2];o[e+32+4>>2]=o[t+4>>2];o[e+32+8>>2]=o[t+8>>2];o[e+32+12>>2]=o[t+12>>2];return}function hn(e){e=e|0;if(!e)return;qa(e);return}function mn(e,t){e=e|0;t=t|0;Kw(e,t);return}function yn(e,t){e=e|0;t=t|0;if(!(n[19920]|0))n[19920]=1;o[5696]=o[e+(t<<4)>>2];o[5697]=o[e+(t<<4)+4>>2];o[5698]=o[e+(t<<4)+8>>2];o[5699]=o[e+(t<<4)+12>>2];return 22784}function gn(e,t,i,n){e=e|0;t=+t;i=+i;n=+n;var r=0,o=0,_=0;o=+Z(+t);r=+Z(+i);_=+Z(+n);t=+U(+t);i=+U(+i);n=+U(+n);c[e>>2]=r*_;c[e+4>>2]=i*(_*t)-o*n;c[e+8>>2]=o*_*i+t*n;c[e+12>>2]=0;c[e+16>>2]=r*n;c[e+20>>2]=o*_+i*(t*n);c[e+24>>2]=i*(o*n)-_*t;c[e+28>>2]=0;c[e+32>>2]=-i;c[e+36>>2]=r*t;c[e+40>>2]=o*r;c[e+44>>2]=0;return}function vn(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Cn(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function wn(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+12>>2]&127](e,t);return}function kn(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Sn(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+60>>2]&127](e,t);return}function Rn(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function jn(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function In(e){e=e|0;if(o[e+204>>2]&3|0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function Tn(e,t){e=e|0;t=t|0;if(!t?o[e+204>>2]&3|0:0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function Dn(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(331)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}DD(e);return e|0}function On(e,t){e=e|0;t=t|0;o[e+216>>2]=t;return}function Ln(e){e=e|0;return o[e+204>>2]|0}function xn(e){e=e|0;return o[e+192>>2]|0}function Mn(e){e=e|0;return o[e+292>>2]|0}function Pn(e,t){e=e|0;t=t|0;return o[(o[e+300>>2]|0)+(t<<2)>>2]|0;\n}function Wn(e){e=e|0;return e+4|0}function Bn(e){e=e|0;e=o[e+216>>2]|0;return(e|0)!=5&(e|0)!=2|0}function An(e){e=e|0;return(o[e+204>>2]&2|0)!=0|0}function Fn(e,t){e=e|0;t=t|0;if((o[e+216>>2]&-2|0)==4)return;o[e+216>>2]=t;return}function Gn(e,t,i){e=e|0;t=t|0;i=i|0;o[e+164>>2]=o[t>>2];o[e+164+4>>2]=o[t+4>>2];o[e+164+8>>2]=o[t+8>>2];o[e+164+12>>2]=o[t+12>>2];if(!(+c[t>>2]!=1)?!(+c[t+4>>2]!=1):0)i=+c[t+8>>2]!=1?i:0;o[e+180>>2]=i;return}function En(e,t){e=e|0;t=+t;c[e+256>>2]=t;return}function Vn(e,t){e=e|0;t=+t;c[e+252>>2]=t;return}function Nn(e,t){e=e|0;t=t|0;o[e+204>>2]=t;return}function Xn(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function Hn(e,t){e=e|0;t=+t;c[e+184>>2]=t;return}function Zn(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+224>>2]=t;return}function Un(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+228>>2]=t;return}function zn(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+232>>2]=t;return}function Yn(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[t+16>>2];o[e+20+4>>2]=o[t+16+4>>2];o[e+20+8>>2]=o[t+16+8>>2];o[e+20+12>>2]=o[t+16+12>>2];o[e+36>>2]=o[t+32>>2];o[e+36+4>>2]=o[t+32+4>>2];o[e+36+8>>2]=o[t+32+8>>2];o[e+36+12>>2]=o[t+32+12>>2];o[e+52>>2]=o[t+48>>2];o[e+52+4>>2]=o[t+48+4>>2];o[e+52+8>>2]=o[t+48+8>>2];o[e+52+12>>2]=o[t+48+12>>2];return}function Kn(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Qn(){var e=0,t=0;o[5637]=(o[5637]|0)+1;e=Qa(791)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}o[e>>2]=1025;o[e+116>>2]=0;n[e+120>>0]=0;t=e+124|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[t+16>>2]=0;o[t+20>>2]=0;o[t+24>>2]=0;o[t+28>>2]=0;o[e+300>>2]=0;n[e+304>>0]=0;t=e+308|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[t+16>>2]=0;o[t+20>>2]=0;o[t+24>>2]=0;o[t+28>>2]=0;o[e+484>>2]=0;n[e+488>>0]=0;t=e+492|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[t+16>>2]=0;o[t+20>>2]=0;o[t+24>>2]=0;o[t+28>>2]=0;o[e+668>>2]=0;n[e+672>>0]=0;t=e+676|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;o[t+16>>2]=0;o[t+20>>2]=0;o[t+24>>2]=0;o[t+28>>2]=0;o[e+740>>2]=0;o[e+744>>2]=0;o[e+748>>2]=0;o[e+768>>2]=0;return e|0}function qn(e){e=e|0;return o[e+740>>2]|0}function Jn(e){e=e|0;return o[e+744>>2]|0}function $n(e,t){e=e|0;t=t|0;return e+4+(t*184|0)|0}function er(e){e=e|0;return o[e+748>>2]|0}function tr(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function ir(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0;o[5637]=(o[5637]|0)+1;i=Qa(379)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}Ay(i,3,e);o[i>>2]=7484;p=i+300|0;o[p>>2]=o[t>>2];o[p+4>>2]=o[t+4>>2];o[p+8>>2]=o[t+8>>2];o[p+12>>2]=o[t+12>>2];f=+c[t>>2];a=+c[t+4>>2];s=+c[t+8>>2];_=f*+c[e+20>>2]+a*+c[e+24>>2]+s*+c[e+28>>2]+ +c[e+56>>2];r=f*+c[e+36>>2]+a*+c[e+40>>2]+s*+c[e+44>>2]+ +c[e+60>>2];c[i+316>>2]=f*+c[e+4>>2]+a*+c[e+8>>2]+s*+c[e+12>>2]+ +c[e+52>>2];c[i+320>>2]=_;c[i+324>>2]=r;c[i+328>>2]=0;o[i+332>>2]=0;n[i+344>>0]=0;c[i+348>>2]=.30000001192092896;c[i+352>>2]=1;c[i+356>>2]=0;return i|0}function nr(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0;o[5637]=(o[5637]|0)+1;_=Qa(379)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}o[_+4>>2]=3;o[_+8>>2]=-1;o[_+12>>2]=-1;c[_+16>>2]=3.4028234663852886e38;n[_+20>>0]=1;n[_+21>>0]=0;o[_+24>>2]=-1;o[_+28>>2]=e;o[_+32>>2]=t;c[_+36>>2]=0;c[_+40>>2]=.30000001192092896;o[_+44>>2]=0;o[_>>2]=7484;t=_+300|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];i=_+316|0;o[i>>2]=o[r>>2];o[i+4>>2]=o[r+4>>2];o[i+8>>2]=o[r+8>>2];o[i+12>>2]=o[r+12>>2];o[_+332>>2]=0;n[_+344>>0]=0;c[_+348>>2]=.30000001192092896;c[_+352>>2]=1;c[_+356>>2]=0;return _|0}function rr(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function or(e){e=e|0;return+ +c[e+16>>2]}function _r(e){e=e|0;return e+300|0}function sr(e){e=e|0;return e+316|0}function ar(e){e=e|0;return e+348|0}function cr(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function fr(e,t){e=e|0;t=t|0;o[e+300>>2]=o[t>>2];o[e+300+4>>2]=o[t+4>>2];o[e+300+8>>2]=o[t+8>>2];o[e+300+12>>2]=o[t+12>>2];return}function pr(e,t){e=e|0;t=t|0;o[e+316>>2]=o[t>>2];o[e+316+4>>2]=o[t+4>>2];o[e+316+8>>2]=o[t+8>>2];o[e+316+12>>2]=o[t+12>>2];return}function lr(e,t){e=e|0;t=t|0;o[e+348>>2]=o[t>>2];o[e+348+4>>2]=o[t+4>>2];o[e+348+8>>2]=o[t+8>>2];return}function ur(e){e=e|0;if(!e)return;qa(e);return}function br(e,t){e=e|0;t=+t;c[e+12>>2]=t;return}function dr(e,t){e=e|0;t=+t;c[e>>2]=t;return}function hr(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function mr(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function yr(e){e=e|0;return+ +c[e+12>>2]}function gr(e){e=e|0;return+ +c[e>>2]}function vr(e){e=e|0;return+ +c[e+4>>2]}function Cr(e){e=e|0;return+ +c[e+8>>2]}function wr(e){e=e|0;if(!e)return;qa(e);return}function kr(e,t,i,n){e=+e;t=+t;i=+i;n=+n;var r=0,_=0;while(1){r=Qa(16)|0;if(r|0){_=6;break}r=o[5831]|0;o[5831]=r+0;if(!r){_=5;break}VP[r&3]()}if((_|0)==5){_=Qe(4)|0;o[_>>2]=8308;ft(_|0,2416,215)}else if((_|0)==6){c[r>>2]=e;c[r+4>>2]=t;c[r+8>>2]=i;c[r+12>>2]=n;return r|0}return 0}function Sr(e){e=e|0;var t=0,i=0,n=0,r=0,o=0;o=+c[e>>2];r=+c[e+4>>2];n=+c[e+8>>2];i=+c[e+12>>2];t=1/+X(+(o*o+r*r+n*n+i*i));c[e>>2]=o*t;c[e+4>>2]=r*t;c[e+8>>2]=n*t;c[e+12>>2]=i*t;return}function Rr(e,t,i,n,r){e=e|0;t=+t;i=+i;n=+n;r=+r;c[e>>2]=t;c[e+4>>2]=i;c[e+8>>2]=n;c[e+12>>2]=r;return}function jr(e,t){e=e|0;t=+t;c[e+12>>2]=t;return}function Ir(e,t){e=e|0;t=+t;c[e>>2]=t;return}function Tr(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function Dr(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function Or(e){e=e|0;return+ +c[e+12>>2]}function Lr(e){e=e|0;return+ +c[e>>2]}function xr(e){e=e|0;return+ +c[e+4>>2]}function Mr(e){e=e|0;return+ +c[e+8>>2]}function Pr(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Wr(e,t,i,n,r,o,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;o=+o;_=_|0;s=s|0;return Pp(e,t,i,n,r,o,_,s)|0}function Br(e,t,i){e=e|0;t=+t;i=i|0;c[(o[e+136>>2]|0)+(i*284|0)+252>>2]=t;return}function Ar(e,t,i){e=e|0;t=t|0;i=i|0;var r=0;while(1){e=Qa(144)|0;if(e|0){r=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){r=5;break}VP[e&3]()}if((r|0)==5){i=Qe(4)|0;o[i>>2]=8308;ft(i|0,2416,215)}else if((r|0)==6){o[e>>2]=7952;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;o[e+72>>2]=0;o[e+92>>2]=i;c[e+96>>2]=0;n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;o[e+108>>2]=t;o[e+112>>2]=0;o[e+116>>2]=2;o[e+120>>2]=1;c[e+104>>2]=0;c[e+100>>2]=0;return e|0}return 0}function Fr(e){e=e|0;return o[e+128>>2]|0}function Gr(e){e=e|0;return o[e+108>>2]|0}function Er(e,t){e=e|0;t=t|0;return(o[e+136>>2]|0)+(t*284|0)|0}function Vr(e,t){e=e|0;t=t|0;return(o[e+136>>2]|0)+(t*284|0)+92|0}function Nr(e,t,i){e=e|0;t=+t;i=i|0;c[(o[e+136>>2]|0)+(i*284|0)+256>>2]=t;return}function Xr(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+24>>2]&127](e,t,i,n);return}function Hr(e,t,i){e=e|0;t=+t;i=i|0;c[(o[e+136>>2]|0)+(i*284|0)+232>>2]=t;return}function Zr(e,t,i){e=e|0;t=t|0;i=i|0;Sp(o[e+108>>2]|0,o[e+136>>2]|0,t,i);return}function Ur(e){e=e|0;if(!e)return;qa(e);return}function zr(e,t,i){e=+e;t=t|0;i=i|0;var r=0,_=0;while(1){r=Qa(140)|0;if(r|0){_=6;break}r=o[5831]|0;o[5831]=r+0;if(!r){_=5;break}VP[r&3]()}if((_|0)==5){i=Qe(4)|0;o[i>>2]=8308;ft(i|0,2416,215)}else if((_|0)==6){c[r>>2]=e;o[r+4>>2]=t;o[r+72>>2]=i;o[r+76>>2]=0;o[r+76+4>>2]=0;o[r+76+8>>2]=0;o[r+76+12>>2]=0;o[r+76+16>>2]=0;o[r+76+20>>2]=0;c[r+100>>2]=.5;c[r+104>>2]=0;c[r+108>>2]=0;c[r+112>>2]=.800000011920929;c[r+116>>2]=1;n[r+120>>0]=0;c[r+124>>2]=.004999999888241291;c[r+128>>2]=.009999999776482582;c[r+132>>2]=.009999999776482582;c[r+136>>2]=.009999999776482582;o[r+8>>2]=1065353216;o[r+12>>2]=0;o[r+12+4>>2]=0;o[r+12+8>>2]=0;o[r+12+12>>2]=0;o[r+28>>2]=1065353216;o[r+32>>2]=0;o[r+32+4>>2]=0;o[r+32+8>>2]=0;o[r+32+12>>2]=0;o[r+48>>2]=1065353216;o[r+52>>2]=0;o[r+52+4>>2]=0;o[r+52+8>>2]=0;o[r+52+12>>2]=0;o[r+52+16>>2]=0;return r|0}return 0}function Yr(e,t,i,r){e=+e;t=t|0;i=i|0;r=r|0;var _=0,s=0;while(1){_=Qa(140)|0;if(_|0){s=6;break}_=o[5831]|0;o[5831]=_+0;if(!_){s=5;break}VP[_&3]()}if((s|0)==5){r=Qe(4)|0;o[r>>2]=8308;ft(r|0,2416,215)}else if((s|0)==6){c[_>>2]=e;o[_+4>>2]=t;o[_+72>>2]=i;o[_+76>>2]=o[r>>2];o[_+76+4>>2]=o[r+4>>2];o[_+76+8>>2]=o[r+8>>2];o[_+76+12>>2]=o[r+12>>2];c[_+92>>2]=0;c[_+96>>2]=0;c[_+100>>2]=.5;c[_+104>>2]=0;c[_+108>>2]=0;c[_+112>>2]=.800000011920929;c[_+116>>2]=1;n[_+120>>0]=0;c[_+124>>2]=.004999999888241291;c[_+128>>2]=.009999999776482582;c[_+132>>2]=.009999999776482582;c[_+136>>2]=.009999999776482582;o[_+8>>2]=1065353216;o[_+12>>2]=0;o[_+12+4>>2]=0;o[_+12+8>>2]=0;o[_+12+12>>2]=0;o[_+28>>2]=1065353216;o[_+32>>2]=0;o[_+32+4>>2]=0;o[_+32+8>>2]=0;o[_+32+12>>2]=0;o[_+48>>2]=1065353216;o[_+52>>2]=0;o[_+52+4>>2]=0;o[_+52+8>>2]=0;o[_+52+12>>2]=0;o[_+52+16>>2]=0;return _|0}return 0}function Kr(e){e=e|0;return+ +c[e+136>>2]}function Qr(e){e=e|0;return+ +c[e+132>>2]}function qr(e){e=e|0;return+ +c[e+124>>2]}function Jr(e){e=e|0;return(n[e+120>>0]|0)!=0|0}function $r(e){e=e|0;return+ +c[e+128>>2]}function eo(e){e=e|0;return+ +c[e+96>>2]}function to(e){e=e|0;return+ +c[e+116>>2]}function io(e){e=e|0;return+ +c[e+100>>2]}function no(e){e=e|0;return+ +c[e+92>>2]}function ro(e){e=e|0;return+ +c[e+112>>2]}function oo(e){e=e|0;return+ +c[e+108>>2]}function _o(e){e=e|0;return+ +c[e+104>>2]}function so(e,t){e=e|0;t=+t;c[e+136>>2]=t;return}function ao(e,t){e=e|0;t=+t;c[e+132>>2]=t;return}function co(e,t){e=e|0;t=+t;c[e+124>>2]=t;return}function fo(e,t){e=e|0;t=t|0;n[e+120>>0]=t&1;return}function po(e,t){e=e|0;t=+t;c[e+128>>2]=t;return}function lo(e,t){e=e|0;t=+t;c[e+96>>2]=t;return}function uo(e,t){e=e|0;t=+t;c[e+116>>2]=t;return}function bo(e,t){e=e|0;t=+t;c[e+100>>2]=t;return}function ho(e,t){e=e|0;t=+t;c[e+92>>2]=t;return}function mo(e,t){e=e|0;t=+t;c[e+112>>2]=t;return}function yo(e,t){e=e|0;t=+t;c[e+108>>2]=t;return}function go(e,t){e=e|0;t=+t;c[e+104>>2]=t;return}function vo(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Co(e){e=e|0;if(o[e+204>>2]&3|0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function wo(e,t){e=e|0;t=t|0;if(!t?o[e+204>>2]&3|0:0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function ko(e,t){e=e|0;t=t|0;var i=0,n=0;n=+c[t+4>>2]*+c[e+376>>2];i=+c[t+8>>2]*+c[e+380>>2];c[e+436>>2]=+c[t>>2]*+c[e+372>>2]+ +c[e+436>>2];c[e+440>>2]=n+ +c[e+440>>2];c[e+444>>2]=i+ +c[e+444>>2];return}function So(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;r=+c[e+368>>2];n=+c[t+4>>2]*+c[e+376>>2]*r;i=r*(+c[t+8>>2]*+c[e+380>>2]);c[e+336>>2]=+c[t>>2]*+c[e+372>>2]*r+ +c[e+336>>2];c[e+340>>2]=n+ +c[e+340>>2];c[e+344>>2]=i+ +c[e+344>>2];return}function Ro(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0,f=0;n=+c[e+372>>2];_=+c[e+376>>2];o=+c[t+4>>2]*_;s=+c[e+380>>2];a=+c[t+8>>2]*s;c[e+436>>2]=+c[t>>2]*n+ +c[e+436>>2];c[e+440>>2]=o+ +c[e+440>>2];c[e+444>>2]=a+ +c[e+444>>2];n=n*+c[t>>2];_=_*+c[t+4>>2];s=s*+c[t+8>>2];a=+c[i+4>>2];o=+c[i+8>>2];f=+c[i>>2];r=(n*o-s*f)*+c[e+572>>2];n=(_*f-n*a)*+c[e+576>>2];c[e+452>>2]=(a*s-_*o)*+c[e+568>>2]+ +c[e+452>>2];c[e+456>>2]=r+ +c[e+456>>2];c[e+460>>2]=n+ +c[e+460>>2];return}function jo(e,t,i){e=e|0;t=t|0;i=i|0;VI(e,t,i);return}function Io(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,o=0,_=0;_=+c[t>>2];o=+c[t+4>>2];r=+c[t+8>>2];n=(_*+c[e+304>>2]+o*+c[e+308>>2]+r*+c[e+312>>2])*+c[e+572>>2];i=(_*+c[e+320>>2]+o*+c[e+324>>2]+r*+c[e+328>>2])*+c[e+576>>2];c[e+352>>2]=(+c[e+288>>2]*_+ +c[e+292>>2]*o+ +c[e+296>>2]*r)*+c[e+568>>2]+ +c[e+352>>2];c[e+356>>2]=n+ +c[e+356>>2];c[e+360>>2]=i+ +c[e+360>>2];return}function To(e,t){e=e|0;t=t|0;var i=0,n=0;n=+c[t+4>>2]*+c[e+572>>2];i=+c[t+8>>2]*+c[e+576>>2];c[e+452>>2]=+c[t>>2]*+c[e+568>>2]+ +c[e+452>>2];c[e+456>>2]=n+ +c[e+456>>2];c[e+460>>2]=i+ +c[e+460>>2];return}function Do(e){e=e|0;var t=0,i=0;o[5637]=(o[5637]|0)+1;t=Qa(659)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}o[t+164>>2]=1065353216;o[t+168>>2]=1065353216;o[t+172>>2]=1065353216;c[t+176>>2]=0;o[t+180>>2]=0;c[t+184>>2]=0xde0b6b000000000;i=t+188|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[t+204>>2]=1;o[t+208>>2]=-1;o[t+212>>2]=-1;o[t+216>>2]=1;c[t+220>>2]=0;c[t+224>>2]=.5;c[t+228>>2]=0;c[t+232>>2]=0;o[t+236>>2]=1;o[t+240>>2]=0;o[t+244>>2]=-1;c[t+248>>2]=1;c[t+252>>2]=0;c[t+256>>2]=0;o[t+260>>2]=0;n[t+280>>0]=1;o[t+276>>2]=0;o[t+268>>2]=0;o[t+272>>2]=0;o[t+284>>2]=0;o[t+4>>2]=1065353216;i=t+8|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[t+24>>2]=1065353216;i=t+28|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[t+44>>2]=1065353216;i=t+48|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[t>>2]=7916;n[t+524>>0]=1;o[t+520>>2]=0;o[t+512>>2]=0;o[t+516>>2]=0;Eg(t,e);return t|0}function Oo(e,t){e=e|0;t=t|0;o[e+216>>2]=t;return}function Lo(e){e=e|0;return e+352|0}function xo(e){e=e|0;return e+4|0}function Mo(e){e=e|0;return o[e+204>>2]|0}function Po(e){e=e|0;return o[e+192>>2]|0}function Wo(e){e=e|0;return e+336|0}function Bo(e){e=e|0;return o[e+504>>2]|0}function Ao(e){e=e|0;return e+4|0}function Fo(e){e=e|0;e=o[e+216>>2]|0;return(e|0)!=5&(e|0)!=2|0}function Go(e){e=e|0;return(o[e+204>>2]&2|0)!=0|0}function Eo(e,t){e=e|0;t=t|0;if((o[e+216>>2]&-2|0)==4)return;o[e+216>>2]=t;return}function Vo(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+568>>2]=o[t>>2];o[e+568+4>>2]=o[t+4>>2];o[e+568+8>>2]=o[t+8>>2];o[e+568+12>>2]=o[t+12>>2];return}function No(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+352>>2]=o[t>>2];o[e+352+4>>2]=o[t+4>>2];o[e+352+8>>2]=o[t+8>>2];o[e+352+12>>2]=o[t+12>>2];return}function Xo(e,t,i){e=e|0;t=t|0;i=i|0;o[e+164>>2]=o[t>>2];o[e+164+4>>2]=o[t+4>>2];o[e+164+8>>2]=o[t+8>>2];o[e+164+12>>2]=o[t+12>>2];if(!(+c[t>>2]!=1)?!(+c[t+4>>2]!=1):0)i=+c[t+8>>2]!=1?i:0;o[e+180>>2]=i;return}function Ho(e,t){e=e|0;t=+t;c[e+256>>2]=t;return}function Zo(e,t){e=e|0;t=+t;c[e+252>>2]=t;return}function Uo(e,t){e=e|0;t=t|0;Xg(e,t);return}function zo(e,t){e=e|0;t=t|0;o[e+204>>2]=t;return}function Yo(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function Ko(e,t){e=e|0;t=+t;c[e+184>>2]=t;return}function Qo(e,t,i){e=e|0;t=+t;i=+i;var n=0;n=p;p=p+32|0;c[n+20>>2]=t;c[n+16>>2]=i;c[n+12>>2]=0;c[n+8>>2]=1;o[e+468>>2]=o[(t<0?n+12|0:t>1?n+8|0:n+20|0)>>2];c[n+4>>2]=0;c[n>>2]=1;o[e+472>>2]=o[(i<0?n+4|0:i>1?n:n+16|0)>>2];p=n;return}function qo(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+224>>2]=t;return}function Jo(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;o[e+372>>2]=o[t>>2];o[e+372+4>>2]=o[t+4>>2];o[e+372+8>>2]=o[t+8>>2];o[e+372+12>>2]=o[t+12>>2];r=+c[e+368>>2];n=r*+c[e+376>>2];i=r*+c[e+380>>2];c[e+584>>2]=+c[e+372>>2]*r;c[e+588>>2]=n;c[e+592>>2]=i;c[e+596>>2]=0;return}function $o(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+336>>2]=o[t>>2];o[e+336+4>>2]=o[t+4>>2];o[e+336+8>>2]=o[t+8>>2];o[e+336+12>>2]=o[t+12>>2];return}function e_(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=o[e+204>>2]|0;if(t==0){o[e+204>>2]=n|1;_=0}else{o[e+204>>2]=n&-2;_=1/t}c[e+368>>2]=_;a=+c[e+408>>2]*t;s=+c[e+412>>2]*t;c[e+388>>2]=+c[e+404>>2]*t;c[e+392>>2]=a;c[e+396>>2]=s;c[e+400>>2]=0;t=+c[i>>2];r=t!=0?(c[u>>2]=1/t,o[u>>2]|0):0;t=+c[i+4>>2];n=t!=0?(c[u>>2]=1/t,o[u>>2]|0):0;t=+c[i+8>>2];i=t!=0?(c[u>>2]=1/t,o[u>>2]|0):0;o[e+420>>2]=r;o[e+424>>2]=n;o[e+428>>2]=i;c[e+432>>2]=0;s=_*+c[e+376>>2];a=_*+c[e+380>>2];c[e+584>>2]=+c[e+372>>2]*_;c[e+588>>2]=s;c[e+592>>2]=a;c[e+596>>2]=0;return}function t_(e,t){e=e|0;t=t|0;o[e+504>>2]=t;if(!t)return;aP[o[(o[t>>2]|0)+8>>2]&127](t,e+4|0);return}function i_(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+228>>2]=t;return}function n_(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+232>>2]=t;return}function r_(e,t,i){e=e|0;t=+t;i=+i;c[e+496>>2]=t;c[e+500>>2]=i;return}function o_(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[t+16>>2];o[e+20+4>>2]=o[t+16+4>>2];o[e+20+8>>2]=o[t+16+8>>2];o[e+20+12>>2]=o[t+16+12>>2];o[e+36>>2]=o[t+32>>2];o[e+36+4>>2]=o[t+32+4>>2];o[e+36+8>>2]=o[t+32+8>>2];o[e+36+12>>2]=o[t+32+12>>2];o[e+52>>2]=o[t+48>>2];o[e+52+4>>2]=o[t+48+4>>2];o[e+52+8>>2]=o[t+48+8>>2];o[e+52+12>>2]=o[t+48+12>>2];return}function __(e,t){e=e|0;t=t|0;return((o[t+236>>2]&2|0)==0?0:t)|0}function s_(e){e=e|0;var t=0,i=0,n=0,r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0;u=+c[e+4>>2];_=+c[e+420>>2];l=+c[e+8>>2];r=+c[e+424>>2];p=+c[e+12>>2];i=+c[e+428>>2];f=+c[e+20>>2];a=+c[e+24>>2];s=+c[e+28>>2];o=+c[e+36>>2];n=+c[e+40>>2];t=+c[e+44>>2];c[e+288>>2]=u*_*u+l*r*l+p*i*p;c[e+292>>2]=u*_*f+l*r*a+p*i*s;c[e+296>>2]=u*_*o+l*r*n+p*i*t;c[e+300>>2]=0;c[e+304>>2]=_*f*u+r*a*l+i*s*p;c[e+308>>2]=_*f*f+r*a*a+i*s*s;c[e+312>>2]=_*f*o+r*a*n+i*s*t;c[e+316>>2]=0;c[e+320>>2]=_*o*u+r*n*l+i*t*p;c[e+324>>2]=_*o*f+r*n*a+i*t*s;c[e+328>>2]=_*o*o+r*n*n+i*t*t;c[e+332>>2]=0;return}function a_(e){e=e|0;if(!e)return;qa(e);return}function c_(e){e=e|0;return+ +c[e+80>>2]}function f_(e,t){e=e|0;t=+t;c[e+80>>2]=t;return}function p_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function l_(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(223)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}o[e>>2]=7540;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;o[e+72>>2]=0;n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;n[e+160>>0]=1;o[e+156>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;n[e+180>>0]=1;o[e+176>>2]=0;o[e+168>>2]=0;o[e+172>>2]=0;o[e+192>>2]=13;o[e+196>>2]=14;o[e+200>>2]=0;return e|0}function u_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function b_(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0;_=p;p=p+16|0;o[5637]=(o[5637]|0)+1;r=Qa(1147)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}if(!(n[19880]|0)){n[19880]=1;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;o[_+12>>2]=0;Vg(21260,0,0,0,_)}o[5366]=o[5366]|1;c[5407]=0;R=+c[5417]*0;L=+c[5418]*0;c[5412]=+c[5416]*0;c[5413]=R;c[5414]=L;c[5415]=0;o[5420]=0;o[5421]=0;o[5422]=0;o[5423]=0;L=+c[5409]*0;R=+c[5410]*0;c[5461]=+c[5408]*0;c[5462]=L;c[5463]=R;c[5464]=0;o[r+4>>2]=7;o[r+8>>2]=-1;o[r+12>>2]=-1;c[r+16>>2]=3.4028234663852886e38;n[r+20>>0]=1;n[r+21>>0]=0;o[r+24>>2]=-1;a=r+28|0;o[a>>2]=21260;s=r+32|0;o[s>>2]=e;c[r+36>>2]=0;c[r+40>>2]=.30000001192092896;o[r+44>>2]=0;o[r>>2]=7600;n[r+48>>0]=0;A=r+116|0;o[A>>2]=o[t>>2];o[A+4>>2]=o[t+4>>2];o[A+8>>2]=o[t+8>>2];o[A+12>>2]=o[t+12>>2];B=r+132|0;o[B>>2]=o[t+16>>2];o[B+4>>2]=o[t+16+4>>2];o[B+8>>2]=o[t+16+8>>2];o[B+12>>2]=o[t+16+12>>2];W=r+148|0;o[W>>2]=o[t+32>>2];o[W+4>>2]=o[t+32+4>>2];o[W+8>>2]=o[t+32+8>>2];o[W+12>>2]=o[t+32+12>>2];P=r+164|0;o[P>>2]=o[t+48>>2];o[P+4>>2]=o[t+48+4>>2];o[P+8>>2]=o[t+48+8>>2];o[P+12>>2]=o[t+48+12>>2];n[r+180>>0]=i&1;R=+c[A>>2];L=+c[e+4>>2];S=+c[B>>2];O=+c[e+8>>2];k=+c[W>>2];D=+c[e+12>>2];w=+c[r+120>>2];C=+c[r+136>>2];v=+c[r+152>>2];g=+c[r+124>>2];m=+c[r+140>>2];d=+c[r+156>>2];T=+c[e+20>>2];I=+c[e+24>>2];j=+c[e+28>>2];y=+c[e+36>>2];h=+c[e+40>>2];b=+c[e+44>>2];M=+c[P>>2];x=+c[r+168>>2];f=+c[r+172>>2];u=+c[e+52>>2]+(L*M+O*x+D*f);l=T*M+I*x+j*f+ +c[e+56>>2];f=y*M+h*x+b*f+ +c[e+60>>2];c[r+52>>2]=R*L+S*O+k*D;c[r+56>>2]=L*w+O*C+D*v;c[r+60>>2]=L*g+O*m+D*d;c[r+64>>2]=0;c[r+68>>2]=R*T+S*I+k*j;c[r+72>>2]=w*T+C*I+v*j;c[r+76>>2]=g*T+m*I+d*j;c[r+80>>2]=0;c[r+84>>2]=R*y+S*h+k*b;c[r+88>>2]=w*y+C*h+v*b;c[r+92>>2]=g*y+m*h+d*b;c[r+96>>2]=0;c[r+100>>2]=u;c[r+104>>2]=l;c[r+108>>2]=f;c[r+112>>2]=0;c[r+184>>2]=1;c[r+188>>2]=-1;c[r+192>>2]=0;c[r+196>>2]=0;c[r+200>>2]=1;c[r+204>>2]=.699999988079071;c[r+208>>2]=0;c[r+212>>2]=0;c[r+216>>2]=1;c[r+220>>2]=.699999988079071;c[r+224>>2]=0;c[r+228>>2]=0;c[r+264>>2]=1;c[r+268>>2]=.699999988079071;c[r+272>>2]=1;c[r+276>>2]=0;c[r+280>>2]=1;c[r+284>>2]=.699999988079071;c[r+288>>2]=1;c[r+292>>2]=0;c[r+232>>2]=1;c[r+236>>2]=.699999988079071;c[r+240>>2]=1;c[r+244>>2]=0;c[r+248>>2]=1;c[r+252>>2]=.699999988079071;c[r+256>>2]=1;c[r+260>>2]=0;n[r+1096>>0]=0;i=r+1100|0;c[r+1116>>2]=0;c[r+1120>>2]=0;c[r+1124>>2]=0;o[r+300>>2]=0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;n[i+12>>0]=0;n[r+49>>0]=1;Oy(r,(o[a>>2]|0)+4|0,(o[s>>2]|0)+4|0);p=_;return r|0}function d_(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0;o[5637]=(o[5637]|0)+1;s=Qa(1147)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}o[s+4>>2]=7;o[s+8>>2]=-1;o[s+12>>2]=-1;c[s+16>>2]=3.4028234663852886e38;n[s+20>>0]=1;n[s+21>>0]=0;o[s+24>>2]=-1;a=s+28|0;o[a>>2]=e;e=s+32|0;o[e>>2]=t;c[s+36>>2]=0;c[s+40>>2]=.30000001192092896;o[s+44>>2]=0;o[s>>2]=7600;n[s+48>>0]=0;t=s+52|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];t=s+68|0;o[t>>2]=o[i+16>>2];o[t+4>>2]=o[i+16+4>>2];o[t+8>>2]=o[i+16+8>>2];o[t+12>>2]=o[i+16+12>>2];t=s+84|0;o[t>>2]=o[i+32>>2];o[t+4>>2]=o[i+32+4>>2];o[t+8>>2]=o[i+32+8>>2];o[t+12>>2]=o[i+32+12>>2];t=s+100|0;o[t>>2]=o[i+48>>2];o[t+4>>2]=o[i+48+4>>2];o[t+8>>2]=o[i+48+8>>2];o[t+12>>2]=o[i+48+12>>2];i=s+116|0;o[i>>2]=o[r>>2];o[i+4>>2]=o[r+4>>2];o[i+8>>2]=o[r+8>>2];o[i+12>>2]=o[r+12>>2];i=s+132|0;o[i>>2]=o[r+16>>2];o[i+4>>2]=o[r+16+4>>2];o[i+8>>2]=o[r+16+8>>2];o[i+12>>2]=o[r+16+12>>2];i=s+148|0;o[i>>2]=o[r+32>>2];o[i+4>>2]=o[r+32+4>>2];o[i+8>>2]=o[r+32+8>>2];o[i+12>>2]=o[r+32+12>>2];i=s+164|0;o[i>>2]=o[r+48>>2];o[i+4>>2]=o[r+48+4>>2];o[i+8>>2]=o[r+48+8>>2];o[i+12>>2]=o[r+48+12>>2];n[s+180>>0]=_&1;c[s+184>>2]=1;c[s+188>>2]=-1;c[s+192>>2]=0;c[s+196>>2]=0;c[s+200>>2]=1;c[s+204>>2]=.699999988079071;c[s+208>>2]=0;c[s+212>>2]=0;c[s+216>>2]=1;c[s+220>>2]=.699999988079071;c[s+224>>2]=0;c[s+228>>2]=0;c[s+264>>2]=1;c[s+268>>2]=.699999988079071;c[s+272>>2]=1;c[s+276>>2]=0;c[s+280>>2]=1;c[s+284>>2]=.699999988079071;c[s+288>>2]=1;c[s+292>>2]=0;c[s+232>>2]=1;c[s+236>>2]=.699999988079071;c[s+240>>2]=1;c[s+244>>2]=0;c[s+248>>2]=1;c[s+252>>2]=.699999988079071;c[s+256>>2]=1;c[s+260>>2]=0;n[s+1096>>0]=0;_=s+1100|0;c[s+1116>>2]=0;c[s+1120>>2]=0;c[s+1124>>2]=0;o[s+300>>2]=0;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;n[_+12>>0]=0;n[s+49>>0]=1;Oy(s,(o[a>>2]|0)+4|0,(o[e>>2]|0)+4|0);return s|0}function h_(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function m_(e){e=e|0;return+ +c[e+16>>2]}function y_(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function g_(e,t){e=e|0;t=+t;t=+Ya(t);if(!(t<-3.1415927410125732)){if(t>3.1415927410125732)t=t+-6.2831854820251465}else t=t+6.2831854820251465;c[e+192>>2]=t;return}function v_(e,t){e=e|0;t=+t;c[e+184>>2]=t;return}function C_(e,t){e=e|0;t=+t;t=+Ya(t);if(!(t<-3.1415927410125732)){if(t>3.1415927410125732)t=t+-6.2831854820251465}else t=t+6.2831854820251465;c[e+196>>2]=t;return}function w_(e,t){e=e|0;t=+t;c[e+188>>2]=t;return}function k_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function S_(e){e=+e;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(75)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}o[t+8>>2]=0;o[t+12>>2]=-1;o[t+16>>2]=1065353216;o[t+20>>2]=1065353216;o[t+24>>2]=1065353216;c[t+28>>2]=0;o[t>>2]=6380;o[t+4>>2]=8;c[t+32>>2]=e;c[t+48>>2]=e;return t|0}function R_(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function j_(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function I_(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function T_(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function D_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function O_(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0,s=0,a=0;o[5637]=(o[5637]|0)+1;i=Qa(107)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n=i+4|0;o[n>>2]=35;o[i+8>>2]=0;o[i+12>>2]=-1;c[i+16>>2]=0;o[i>>2]=6480;a=+c[e>>2];s=+c[e+4>>2];_=+c[e+8>>2];e=o[e+12>>2]|0;r=1/+X(+(a*a+s*s+_*_));c[i+52>>2]=a*r;c[i+56>>2]=s*r;c[i+60>>2]=_*r;o[i+64>>2]=e;c[i+68>>2]=t;o[i+72>>2]=1065353216;o[i+76>>2]=1065353216;o[i+80>>2]=1065353216;c[i+84>>2]=0;o[n>>2]=28;return i|0}function L_(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function x_(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function M_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function P_(e){e=e|0;if(!e)return;qa(e);return}function W_(){var e=0,t=0;while(1){e=Qa(64)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6)return e|0;return 0}function B_(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;while(1){i=Qa(64)|0;if(i|0){n=6;break}i=o[5831]|0;o[5831]=i+0;if(!i){n=5;break}VP[i&3]()}if((n|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((n|0)==6){a=+c[e>>2];_=+c[e+4>>2];l=+c[e+8>>2];f=+c[e+12>>2];s=a*(2/(a*a+_*_+l*l+f*f));r=_*(2/(a*a+_*_+l*l+f*f));p=l*(2/(a*a+_*_+l*l+f*f));c[i>>2]=1-(_*r+l*p);c[i+4>>2]=a*r-f*p;c[i+8>>2]=a*p+f*r;c[i+12>>2]=0;c[i+16>>2]=a*r+f*p;c[i+20>>2]=1-(a*s+l*p);c[i+24>>2]=_*p-f*s;c[i+28>>2]=0;c[i+32>>2]=a*p-f*r;c[i+36>>2]=_*p+f*s;c[i+40>>2]=1-(a*s+_*r);c[i+44>>2]=0;o[i+48>>2]=o[t>>2];o[i+48+4>>2]=o[t+4>>2];o[i+48+8>>2]=o[t+8>>2];o[i+48+12>>2]=o[t+12>>2];return i|0}return 0}function A_(e){e=e|0;return e|0}function F_(e){e=e|0;return e+48|0}function G_(e){e=e|0;var t=0;t=p;p=p+16|0;if(!(n[19928]|0))n[19928]=1;Kw(e,t);o[5700]=o[t>>2];o[5701]=o[t+4>>2];o[5702]=o[t+8>>2];o[5703]=o[t+12>>2];p=t;return 22800}function E_(e){e=e|0;o[e>>2]=1065353216;o[e+4>>2]=0;o[e+4+4>>2]=0;o[e+4+8>>2]=0;o[e+4+12>>2]=0;o[e+20>>2]=1065353216;o[e+24>>2]=0;o[e+24+4>>2]=0;o[e+24+8>>2]=0;o[e+24+12>>2]=0;o[e+40>>2]=1065353216;o[e+44>>2]=0;o[e+44+4>>2]=0;o[e+44+8>>2]=0;o[e+44+12>>2]=0;o[e+44+16>>2]=0;return}function V_(e,t){e=e|0;t=t|0;o[e+48>>2]=o[t>>2];o[e+48+4>>2]=o[t+4>>2];o[e+48+8>>2]=o[t+8>>2];o[e+48+12>>2]=o[t+12>>2];return}function N_(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,o=0,_=0,s=0,a=0;o=+c[t>>2];n=+c[t+4>>2];a=+c[t+8>>2];_=+c[t+12>>2];r=o*(2/(o*o+n*n+a*a+_*_));i=n*(2/(o*o+n*n+a*a+_*_));s=a*(2/(o*o+n*n+a*a+_*_));c[e>>2]=1-(n*i+a*s);c[e+4>>2]=o*i-_*s;c[e+8>>2]=o*s+_*i;c[e+12>>2]=0;c[e+16>>2]=o*i+_*s;c[e+20>>2]=1-(o*r+a*s);c[e+24>>2]=n*s-_*r;c[e+28>>2]=0;c[e+32>>2]=o*s-_*i;c[e+36>>2]=n*s+_*r;c[e+40>>2]=1-(o*r+n*i);c[e+44>>2]=0;return}function X_(e){e=e|0;if(!e)return;qa(e);return}function H_(e){e=e|0;return e+260|0}function Z_(e,t){e=e|0;t=t|0;o[e+260>>2]=o[t>>2];o[e+260+4>>2]=o[t+4>>2];o[e+260+8>>2]=o[t+8>>2];o[e+260+12>>2]=o[t+12>>2];return}function U_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function z_(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Y_(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function K_(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Q_(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=o[e+32>>2]|0;o[r>>2]=(o[r>>2]|0)+1;yv(e,gv(e,t,0)|0);yv(e,gv(e,i,0)|0);yv(e,gv(e,n,0)|0);return}function q_(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0;_=o[e+32>>2]|0;o[_>>2]=(o[_>>2]|0)+1;yv(e,gv(e,t,r)|0);yv(e,gv(e,i,r)|0);yv(e,gv(e,n,r)|0);return}function J_(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(191)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}mv(e,1,1);return e|0}function $_(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(191)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}mv(t,e,1);return t|0}function es(e,t){e=e|0;t=t|0;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(191)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}mv(i,e,t);return i|0}function ts(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function is(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function ns(e){e=e|0;return+ +c[e+16>>2]}function rs(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function os(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function _s(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(35)|0;if(!e){e=0;return e|0}o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16;return e|0}function ss(e,t,i){e=+e;t=+t;i=+i;var n=0;o[5637]=(o[5637]|0)+1;n=Qa(35)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}c[n>>2]=e;c[n+4>>2]=t;c[n+8>>2]=i;c[n+12>>2]=0;return n|0}function as(e,t){e=e|0;t=t|0;return+(+c[e>>2]*+c[t>>2]+ +c[e+4>>2]*+c[t+4>>2]+ +c[e+8>>2]*+c[t+8>>2])}function cs(e){e=e|0;var t=0,i=0,n=0;n=+c[e>>2];i=+c[e+4>>2];t=+c[e+8>>2];return+ +X(+(n*n+i*i+t*t))}function fs(e){e=e|0;var t=0,i=0,n=0,r=0;r=+c[e>>2];n=+c[e+4>>2];i=+c[e+8>>2];t=1/+X(+(r*r+n*n+i*i));c[e>>2]=r*t;c[e+4>>2]=n*t;c[e+8>>2]=i*t;return}function ps(e,t){e=e|0;t=t|0;c[e>>2]=+c[t>>2]+ +c[e>>2];c[e+4>>2]=+c[t+4>>2]+ +c[e+4>>2];c[e+8>>2]=+c[t+8>>2]+ +c[e+8>>2];return e|0}function ls(e,t){e=e|0;t=+t;c[e>>2]=+c[e>>2]*t;c[e+4>>2]=+c[e+4>>2]*t;c[e+8>>2]=+c[e+8>>2]*t;return e|0}function us(e,t){e=e|0;t=t|0;c[e>>2]=+c[e>>2]-+c[t>>2];c[e+4>>2]=+c[e+4>>2]-+c[t+4>>2];c[e+8>>2]=+c[e+8>>2]-+c[t+8>>2];return e|0}function bs(e,t,i,n){e=e|0;t=+t;i=+i;n=+n;c[e>>2]=t;c[e+4>>2]=i;c[e+8>>2]=n;c[e+12>>2]=0;return}function ds(e,t){e=e|0;t=+t;c[e>>2]=t;return}function hs(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function ms(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function ys(e){e=e|0;return+ +c[e>>2]}function gs(e){e=e|0;return+ +c[e+4>>2]}function vs(e){e=e|0;return+ +c[e+8>>2]}function Cs(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function ws(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(35)|0;if(!e){e=0;return e|0}o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16;return e|0}function ks(e,t,i,n){e=+e;t=+t;i=+i;n=+n;var r=0;o[5637]=(o[5637]|0)+1;r=Qa(35)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}c[r>>2]=e;c[r+4>>2]=t;c[r+8>>2]=i;c[r+12>>2]=n;return r|0}function Ss(e,t){e=e|0;t=t|0;return+(+c[e>>2]*+c[t>>2]+ +c[e+4>>2]*+c[t+4>>2]+ +c[e+8>>2]*+c[t+8>>2])}function Rs(e){e=e|0;var t=0,i=0,n=0;n=+c[e>>2];i=+c[e+4>>2];t=+c[e+8>>2];return+ +X(+(n*n+i*i+t*t))}function js(e){e=e|0;var t=0,i=0,n=0,r=0;r=+c[e>>2];n=+c[e+4>>2];i=+c[e+8>>2];t=1/+X(+(r*r+n*n+i*i));c[e>>2]=r*t;c[e+4>>2]=n*t;c[e+8>>2]=i*t;return}function Is(e,t){e=e|0;t=t|0;c[e>>2]=+c[t>>2]+ +c[e>>2];c[e+4>>2]=+c[t+4>>2]+ +c[e+4>>2];c[e+8>>2]=+c[t+8>>2]+ +c[e+8>>2];return e|0}function Ts(e,t){e=e|0;t=+t;c[e>>2]=+c[e>>2]*t;c[e+4>>2]=+c[e+4>>2]*t;c[e+8>>2]=+c[e+8>>2]*t;return e|0}function Ds(e,t){e=e|0;t=t|0;c[e>>2]=+c[e>>2]-+c[t>>2];c[e+4>>2]=+c[e+4>>2]-+c[t+4>>2];c[e+8>>2]=+c[e+8>>2]-+c[t+8>>2];return e|0}function Os(e,t,i,n,r){e=e|0;t=+t;i=+i;n=+n;r=+r;c[e>>2]=t;c[e+4>>2]=i;c[e+8>>2]=n;c[e+12>>2]=r;return}function Ls(e,t){e=e|0;t=+t;c[e>>2]=t;return}function xs(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function Ms(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function Ps(e){e=e|0;return+ +c[e+12>>2]}function Ws(e){e=e|0;return+ +c[e>>2]}function Bs(e){e=e|0;return+ +c[e+4>>2]}function As(e){e=e|0;return+ +c[e+8>>2]}function Fs(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Gs(){var e=0,t=0;while(1){e=Qa(24)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){c[e>>2]=5.880000114440918;c[e+4>>2]=.8299999833106995;c[e+8>>2]=.8799999952316284;c[e+12>>2]=500;c[e+16>>2]=10.5;c[e+20>>2]=6e3;return e|0}return 0}function Es(e){e=e|0;return+ +c[e+16>>2]}function Vs(e){e=e|0;return+ +c[e+20>>2]}function Ns(e){e=e|0;return+ +c[e+12>>2]}function Xs(e){e=e|0;return+ +c[e+4>>2]}function Hs(e){e=e|0;return+ +c[e+8>>2]}function Zs(e){e=e|0;return+ +c[e>>2]}function Us(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function zs(e,t){e=e|0;t=+t;c[e+20>>2]=t;return}function Ys(e,t){e=e|0;t=+t;c[e+12>>2]=t;return}function Ks(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function Qs(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function qs(e,t){e=e|0;t=+t;c[e>>2]=t;return}function Js(e){e=e|0;if(!e)return;qa(e);return}function $s(e){e=e|0;return(n[e+260>>0]|0)!=0|0}function ea(e){e=e|0;return e+156|0}function ta(e){e=e|0;return+ +c[e+252>>2]}function ia(e){e=e|0;return+ +c[e+228>>2]}function na(e){e=e|0;return+ +c[e+248>>2]}function ra(e){e=e|0;return+ +c[e+208>>2]}function oa(e){e=e|0;return e|0}function _a(e){e=e|0;return+ +c[e+244>>2]}function sa(e){e=e|0;return+ +c[e+232>>2]}function aa(e){e=e|0;return+ +c[e+204>>2]}function ca(e){e=e|0;return+ +c[e+216>>2]}function fa(e){e=e|0;return+ +c[e+220>>2]}function pa(e){e=e|0;return+ +c[e+224>>2]}function la(e){e=e|0;return+ +c[e+212>>2];\n}function ua(e){e=e|0;return+ +c[e+276>>2]}function ba(e,t){e=e|0;t=t|0;n[e+260>>0]=t&1;return}function da(e,t){e=e|0;t=t|0;o[e+156>>2]=o[t>>2];o[e+156+4>>2]=o[t+4>>2];o[e+156+8>>2]=o[t+8>>2];o[e+156+12>>2]=o[t+12>>2];return}function ha(e,t){e=e|0;t=+t;c[e+252>>2]=t;return}function ma(e,t){e=e|0;t=+t;c[e+228>>2]=t;return}function ya(e,t){e=e|0;t=+t;c[e+248>>2]=t;return}function ga(e,t){e=e|0;t=+t;c[e+208>>2]=t;return}function va(e,t){e=e|0;t=t|0;var i=0;i=e+92|0;do{o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0}while((e|0)<(i|0));return}function Ca(e,t){e=e|0;t=+t;c[e+244>>2]=t;return}function wa(e,t){e=e|0;t=+t;c[e+232>>2]=t;return}function ka(e,t){e=e|0;t=+t;c[e+204>>2]=t;return}function Sa(e,t){e=e|0;t=+t;c[e+216>>2]=t;return}function Ra(e,t){e=e|0;t=+t;c[e+220>>2]=t;return}function ja(e,t){e=e|0;t=+t;c[e+224>>2]=t;return}function Ia(e,t){e=e|0;t=+t;c[e+212>>2]=t;return}function Ta(e,t){e=e|0;t=+t;c[e+276>>2]=t;return}function Da(){return 0}function Oa(){return 1}function La(){return 2}function xa(){return 3}function Ma(){return 4}function Pa(){return 5}function Wa(e){e=e|0;var t=0,i=0;i=p;p=p+16|0;o[i>>2]=o[e+60>>2];e=pt(6,i|0)|0;if(e>>>0>4294963200){if(true)t=22816;else t=o[(Fc()|0)+64>>2]|0;o[t>>2]=0-e;e=-1}p=i;return e|0}function Ba(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0;c=p;p=p+48|0;_=o[e+28>>2]|0;o[c+32>>2]=_;_=(o[e+20>>2]|0)-_|0;o[c+32+4>>2]=_;o[c+32+8>>2]=t;o[c+32+12>>2]=i;a=c+32|0;r=2;_=_+i|0;while(1){if(true){o[c+16>>2]=o[e+60>>2];o[c+16+4>>2]=a;o[c+16+8>>2]=r;t=ht(146,c+16|0)|0;if(t>>>0>4294963200){if(true)n=22816;else n=o[(Fc()|0)+64>>2]|0;o[n>>2]=0-t;t=-1}}else{lt(218,e|0);o[c>>2]=o[e+60>>2];o[c+4>>2]=a;o[c+8>>2]=r;t=ht(146,c|0)|0;if(t>>>0>4294963200){if(!0)n=22816;else n=o[(Fc()|0)+64>>2]|0;o[n>>2]=0-t;t=-1}ze(0)}if((_|0)==(t|0)){t=13;break}if((t|0)<0){t=15;break}_=_-t|0;n=o[a+4>>2]|0;if(t>>>0<=n>>>0)if((r|0)==2){o[e+28>>2]=(o[e+28>>2]|0)+t;s=n;n=a;r=2}else{s=n;n=a}else{s=o[e+44>>2]|0;o[e+28>>2]=s;o[e+20>>2]=s;s=o[a+12>>2]|0;t=t-n|0;n=a+8|0;r=r+-1|0}o[n>>2]=(o[n>>2]|0)+t;o[n+4>>2]=s-t;a=n}if((t|0)==13){a=o[e+44>>2]|0;o[e+16>>2]=a+(o[e+48>>2]|0);o[e+28>>2]=a;o[e+20>>2]=a}else if((t|0)==15){o[e+16>>2]=0;o[e+28>>2]=0;o[e+20>>2]=0;o[e>>2]=o[e>>2]|32;if((r|0)==2)i=0;else i=i-(o[a+4>>2]|0)|0}p=c;return i|0}function Aa(e){e=e|0;return}function Fa(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;r=p;p=p+32|0;o[r>>2]=o[e+60>>2];o[r+4>>2]=0;o[r+8>>2]=t;o[r+12>>2]=r+20;o[r+16>>2]=i;t=bt(140,r|0)|0;if(t>>>0<=4294963200)if((t|0)<0)n=7;else e=o[r+20>>2]|0;else{if(true)e=22816;else e=o[(Fc()|0)+64>>2]|0;o[e>>2]=0-t;n=7}if((n|0)==7){o[r+20>>2]=-1;e=-1}p=r;return e|0}function Ga(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0;e:do if((i|0)!=0&(e&3|0)!=0){r=i;while(1){if((n[e>>0]|0)==(t&255)<<24>>24)break e;e=e+1|0;i=r+-1|0;if((i|0)!=0&(e&3|0)!=0)r=i;else{r=i;i=(i|0)!=0;_=5;break}}}else{r=i;i=(i|0)!=0;_=5}while(0);e:do if((_|0)==5)if(i){if((n[e>>0]|0)!=(t&255)<<24>>24){i=te(t&255,16843009)|0;t:do if(r>>>0>3)while(1){s=o[e>>2]^i;if((s&-2139062144^-2139062144)&s+-16843009|0)break;e=e+4|0;r=r+-4|0;if(r>>>0<=3){_=11;break t}}else _=11;while(0);if((_|0)==11)if(!r){r=0;break}while(1){if((n[e>>0]|0)==(t&255)<<24>>24)break e;e=e+1|0;r=r+-1|0;if(!r){r=0;break}}}}else r=0;while(0);return(r|0?e:0)|0}function Ea(e,t,i,s,a){e=e|0;t=t|0;i=i|0;s=s|0;a=a|0;var c=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0;E=p;p=p+624|0;B=E+536+40|0;F=E+588|0;G=E+576+12|0;A=E+588+9|0;c=0;l=0;m=0;w=t;e:while(1){do if((c|0)>-1){if((l|0)<=(2147483647-c|0)){c=l+c|0;break}if(true)c=22816;else c=o[(Fc()|0)+64>>2]|0;o[c>>2]=75;c=-1}while(0);t=n[w>>0]|0;if(!(t<<24>>24)){W=254;break}else l=w;t:while(1){switch(t<<24>>24){case 37:{t=l;W=11;break t}case 0:{t=l;break t}default:{}}P=l+1|0;t=n[P>>0]|0;l=P}t:do if((W|0)==11)while(1){W=0;if((n[t+1>>0]|0)!=37)break t;l=l+1|0;t=t+2|0;if((n[t>>0]|0)==37)W=11;else break}while(0);C=l-w|0;if(e|0?(o[e>>2]&32|0)==0:0)Va(w,C,e);if((l|0)!=(w|0)){l=C;w=t;continue}b=t+1|0;l=n[b>>0]|0;if(((l<<24>>24)+-48|0)>>>0<10){P=(n[t+2>>0]|0)==36;b=P?t+3|0:b;h=n[b>>0]|0;v=P?(l<<24>>24)+-48|0:-1;m=P?1:m}else{h=l;v=-1}t=h<<24>>24;t:do if((t&-32|0)==32){l=h;h=0;do{if(!(1<<t+-32&75913))break t;h=1<<(l<<24>>24)+-32|h;b=b+1|0;l=n[b>>0]|0;t=l<<24>>24}while((t&-32|0)==32)}else{l=h;h=0}while(0);do if(l<<24>>24==42){l=b+1|0;t=(n[l>>0]|0)+-48|0;if(t>>>0<10?(n[b+2>>0]|0)==36:0){o[a+(t<<2)>>2]=10;t=1;b=b+3|0;l=o[s+((n[l>>0]|0)+-48<<3)>>2]|0}else{if(m|0){c=-1;break e}if(!e){g=h;P=0;b=l;M=0;break}t=(o[i>>2]|0)+(4-1)&~(4-1);P=o[t>>2]|0;o[i>>2]=t+4;t=0;b=l;l=P}if((l|0)<0){g=h|8192;P=t;M=0-l|0}else{g=h;P=t;M=l}}else{t=(l<<24>>24)+-48|0;if(t>>>0<10){l=0;do{l=(l*10|0)+t|0;b=b+1|0;t=(n[b>>0]|0)+-48|0}while(t>>>0<10);if((l|0)<0){c=-1;break e}else{g=h;P=m;M=l}}else{g=h;P=m;M=0}}while(0);t:do if((n[b>>0]|0)==46){t=b+1|0;h=n[t>>0]|0;if(h<<24>>24!=42){if(((h<<24>>24)+-48|0)>>>0<10){l=0;b=(h<<24>>24)+-48|0}else{m=0;break}while(1){l=(l*10|0)+b|0;t=t+1|0;b=(n[t>>0]|0)+-48|0;if(b>>>0>=10){m=l;break t}}}t=b+2|0;l=(n[t>>0]|0)+-48|0;if(l>>>0<10?(n[b+3>>0]|0)==36:0){o[a+(l<<2)>>2]=10;m=o[s+((n[t>>0]|0)+-48<<3)>>2]|0;t=b+4|0;break}if(P|0){c=-1;break e}if(e|0){x=(o[i>>2]|0)+(4-1)&~(4-1);m=o[x>>2]|0;o[i>>2]=x+4}else m=0}else{m=-1;t=b}while(0);h=0;while(1){l=(n[t>>0]|0)+-65|0;if(l>>>0>57){c=-1;break e}x=t+1|0;l=n[16811+(h*58|0)+l>>0]|0;if(((l&255)+-1|0)>>>0<8){t=x;h=l&255}else break}if(!(l<<24>>24)){c=-1;break}b=(v|0)>-1;do if(l<<24>>24==19)if(b){c=-1;break e}else W=54;else{if(b){o[a+(v<<2)>>2]=l&255;O=s+(v<<3)|0;W=o[O+4>>2]|0;o[E>>2]=o[O>>2];o[E+4>>2]=W;W=54;break}if(!e){c=0;break e}Xa(E,l&255,i)}while(0);if((W|0)==54?(W=0,(e|0)==0):0){l=C;m=P;w=x;continue}D=n[t>>0]|0;D=(h|0)!=0&(D&15|0)==3?D&-33:D;b=g&-65537;O=(g&8192|0)==0?g:b;t:do switch(D|0){case 110:switch(h|0){case 0:{o[o[E>>2]>>2]=c;l=C;m=P;w=x;continue e}case 1:{o[o[E>>2]>>2]=c;l=C;m=P;w=x;continue e}case 2:{l=o[E>>2]|0;o[l>>2]=c;o[l+4>>2]=((c|0)<0)<<31>>31;l=C;m=P;w=x;continue e}case 3:{r[o[E>>2]>>1]=c;l=C;m=P;w=x;continue e}case 4:{n[o[E>>2]>>0]=c;l=C;m=P;w=x;continue e}case 6:{o[o[E>>2]>>2]=c;l=C;m=P;w=x;continue e}case 7:{l=o[E>>2]|0;o[l>>2]=c;o[l+4>>2]=((c|0)<0)<<31>>31;l=C;m=P;w=x;continue e}default:{l=C;m=P;w=x;continue e}}case 112:{g=O|8;m=m>>>0>8?m:8;v=120;W=66;break}case 88:case 120:{g=O;v=D;W=66;break}case 111:{l=o[E>>2]|0;b=o[E+4>>2]|0;if((l|0)==0&(b|0)==0)t=B;else{t=B;do{t=t+-1|0;n[t>>0]=l&7|48;l=Pc(l|0,b|0,3)|0;b=L}while(!((l|0)==0&(b|0)==0))}if(!(O&8)){l=O;g=0;h=17291;W=79}else{g=B-t|0;l=O;m=(m|0)>(g|0)?m:g+1|0;g=0;h=17291;W=79}break}case 105:case 100:{t=o[E>>2]|0;l=o[E+4>>2]|0;if((l|0)<0){t=Dc(0,0,t|0,l|0)|0;l=L;o[E>>2]=t;o[E+4>>2]=l;b=1;h=17291;W=78;break t}if(!(O&2048)){b=O&1;h=(O&1|0)==0?17291:17293;W=78}else{b=1;h=17292;W=78}break}case 117:{t=o[E>>2]|0;l=o[E+4>>2]|0;b=0;h=17291;W=78;break}case 99:{n[E+536+39>>0]=o[E>>2];t=E+536+39|0;v=1;w=0;C=17291;l=B;break}case 109:{if(true)t=22816;else t=o[(Fc()|0)+64>>2]|0;l=o[t>>2]|0;t=0;while(1){if((_[17301+t>>0]|0)==(l|0)){W=85;break}t=t+1|0;if((t|0)==87){l=87;t=17389;break}}if((W|0)==85)if(!t){l=17389;W=92;break t}else{l=t;t=17389}do{do{W=t;t=t+1|0}while((n[W>>0]|0)!=0);l=l+-1|0}while((l|0)!=0);l=t;W=92;break}case 115:{l=o[E>>2]|0;l=l|0?l:19193;W=92;break}case 67:{o[E+8>>2]=o[E>>2];o[E+8+4>>2]=0;o[E>>2]=E+8;t=E+8|0;m=-1;W=96;break}case 83:{t=o[E>>2]|0;if(!m){Za(e,32,M,0,O);t=0;W=107}else W=96;break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{d=+f[E>>3];o[E+16>>2]=0;f[u>>3]=d;if((o[u+4>>2]|0)>=0)if(!(O&2048)){I=O&1;T=(O&1|0)==0?19201:19206}else{I=1;T=19203}else{d=-d;I=1;T=19200}f[u>>3]=d;j=o[u+4>>2]&2146435072;do if(j>>>0<2146435072|(j|0)==2146435072&0<0){d=+za(d,E+16|0)*2;if(d!=0)o[E+16>>2]=(o[E+16>>2]|0)+-1;if((D|32|0)==97){v=(D&32|0)==0?T:T+9|0;g=I|2;t=12-m|0;do if(!(m>>>0>11|(t|0)==0)){y=8;do{t=t+-1|0;y=y*16}while((t|0)!=0);if((n[v>>0]|0)==45){d=-(y+(-d-y));break}else{d=d+y-y;break}}while(0);l=o[E+16>>2]|0;t=(l|0)<0?0-l|0:l;t=Ha(t,((t|0)<0)<<31>>31,E+576+12|0)|0;if((t|0)==(E+576+12|0)){n[E+576+11>>0]=48;t=E+576+11|0}n[t+-1>>0]=(l>>31&2)+43;h=t+-2|0;n[h>>0]=D+15;b=(m|0)<1;t=E+588|0;while(1){T=~~d;l=t+1|0;n[t>>0]=_[17275+T>>0]|D&32;d=(d-+(T|0))*16;do if((l-F|0)==1){if((O&8|0)==0&(b&d==0))break;n[l>>0]=46;l=t+2|0}while(0);if(!(d!=0))break;else t=l}t=(m|0)!=0&(-2-F+l|0)<(m|0)?G+2+m-h|0:G-F-h+l|0;Za(e,32,M,t+g|0,O);if(!(o[e>>2]&32))Va(v,g,e);Za(e,48,M,t+g|0,O^65536);if(!(o[e>>2]&32))Va(E+588|0,l-F|0,e);Za(e,48,t-(l-F+(G-h))|0,0,0);if(!(o[e>>2]&32))Va(h,G-h|0,e);Za(e,32,M,t+g|0,O^8192);t=(t+g|0)<(M|0)?M:t+g|0;break}t=(m|0)<0?6:m;if(d!=0){l=(o[E+16>>2]|0)+-28|0;o[E+16>>2]=l;d=d*268435456}else l=o[E+16>>2]|0;j=(l|0)<0?E+24|0:E+24+288|0;h=j;do{R=~~d>>>0;o[h>>2]=R;h=h+4|0;d=(d-+(R>>>0))*1e9}while(d!=0);l=o[E+16>>2]|0;if((l|0)>0){b=j;do{g=(l|0)>29?29:l;l=h+-4|0;do if(l>>>0>=b>>>0){m=0;do{S=xc(o[l>>2]|0,0,g|0)|0;S=Oc(S|0,L|0,m|0,0)|0;R=L;k=Zc(S|0,R|0,1e9,0)|0;o[l>>2]=k;m=Hc(S|0,R|0,1e9,0)|0;l=l+-4|0}while(l>>>0>=b>>>0);if(!m)break;b=b+-4|0;o[b>>2]=m}while(0);while(1){if(h>>>0<=b>>>0)break;l=h+-4|0;if(!(o[l>>2]|0))h=l;else break}l=(o[E+16>>2]|0)-g|0;o[E+16>>2]=l}while((l|0)>0)}else b=j;if((l|0)<0){do{g=0-l|0;g=(g|0)>9?9:g;do if(b>>>0<h>>>0){m=0;l=b;do{R=o[l>>2]|0;o[l>>2]=(R>>>g)+m;m=te(R&(1<<g)+-1,1e9>>>g)|0;l=l+4|0}while(l>>>0<h>>>0);l=(o[b>>2]|0)==0?b+4|0:b;if(!m){b=l;l=h;break}o[h>>2]=m;b=l;l=h+4|0}else{b=(o[b>>2]|0)==0?b+4|0:b;l=h}while(0);h=(D|32|0)==102?j:b;h=(l-h>>2|0)>(((t+25|0)/9|0)+1|0)?h+(((t+25|0)/9|0)+1<<2)|0:l;l=(o[E+16>>2]|0)+g|0;o[E+16>>2]=l}while((l|0)<0);l=b}else l=b;do if(l>>>0<h>>>0){b=(j-l>>2)*9|0;g=o[l>>2]|0;if(g>>>0<10)break;else m=10;do{m=m*10|0;b=b+1|0}while(g>>>0>=m>>>0)}else b=0;while(0);m=t-((D|32|0)!=102?b:0)+(((t|0)!=0&(D|32|0)==103)<<31>>31)|0;if((m|0)<(((h-j>>2)*9|0)+-9|0)){k=j+4+(((m+9216|0)/9|0)+-1024<<2)|0;if((((m+9216|0)%9|0)+1|0)<9){g=10;v=((m+9216|0)%9|0)+1|0;while(1){m=g*10|0;v=v+1|0;if((v|0)==9)break;else g=m}}else m=10;C=o[k>>2]|0;w=(C>>>0)%(m>>>0)|0;g=(k+4|0)==(h|0);do if(g&(w|0)==0)m=k;else{y=(((C>>>0)/(m>>>0)|0)&1|0)==0?9007199254740992:9007199254740994;v=(m|0)/2|0;if(w>>>0<v>>>0)d=.5;else d=g&(w|0)==(v|0)?1:1.5;do if(I){if((n[T>>0]|0)!=45)break;y=-y;d=-d}while(0);o[k>>2]=C-w;if(!(y+d!=y)){m=k;break}R=C-w+m|0;o[k>>2]=R;if(R>>>0>999999999){b=k;while(1){m=b+-4|0;o[b>>2]=0;if(m>>>0<l>>>0){l=l+-4|0;o[l>>2]=0}R=(o[m>>2]|0)+1|0;o[m>>2]=R;if(R>>>0>999999999)b=m;else break}}else m=k;b=(j-l>>2)*9|0;v=o[l>>2]|0;if(v>>>0<10)break;else g=10;do{g=g*10|0;b=b+1|0}while(v>>>0>=g>>>0)}while(0);S=m+4|0;R=l;l=h>>>0>S>>>0?S:h}else{R=l;l=h}v=0-b|0;S=l;while(1){if(S>>>0<=R>>>0){w=0;break}l=S+-4|0;if(!(o[l>>2]|0))S=l;else{w=1;break}}do if((D|32|0)==103){if((((t|0)!=0^1)+t|0)>(b|0)&(b|0)>-5){g=D+-1|0;t=((t|0)!=0^1)+t+-1-b|0}else{g=D+-2|0;t=((t|0)!=0^1)+t+-1|0}if(O&8|0){m=O&8;break}do if(w){l=o[S+-4>>2]|0;if(!l){h=9;break}if(!((l>>>0)%10|0)){m=10;h=0}else{h=0;break}do{m=m*10|0;h=h+1|0}while(!((l>>>0)%(m>>>0)|0|0))}else h=9;while(0);l=((S-j>>2)*9|0)+-9|0;if((g|32|0)==102){m=l-h|0;m=(m|0)<0?0:m;t=(t|0)<(m|0)?t:m;m=0;break}else{m=l+b-h|0;m=(m|0)<0?0:m;t=(t|0)<(m|0)?t:m;m=0;break}}else{g=D;m=O&8}while(0);C=t|m;h=(g|32|0)==102;if(h){l=(b|0)>0?b:0;v=0}else{l=(b|0)<0?v:b;l=Ha(l,((l|0)<0)<<31>>31,E+576+12|0)|0;if((G-l|0)<2)do{l=l+-1|0;n[l>>0]=48}while((G-l|0)<2);n[l+-1>>0]=(b>>31&2)+43;v=l+-2|0;n[v>>0]=g;l=G-v|0}k=I+1+t+((C|0)!=0&1)+l|0;Za(e,32,M,k,O);if(!(o[e>>2]&32))Va(T,I,e);Za(e,48,M,k,O^65536);do if(h){h=R>>>0>j>>>0?j:R;b=h;do{l=Ha(o[b>>2]|0,0,A)|0;do if((b|0)==(h|0)){if((l|0)!=(A|0))break;n[E+588+8>>0]=48;l=E+588+8|0}else{if(l>>>0<=(E+588|0)>>>0)break;Lc(E+588|0,48,l-F|0)|0;do l=l+-1|0;while(l>>>0>(E+588|0)>>>0)}while(0);if(!(o[e>>2]&32))Va(l,A-l|0,e);b=b+4|0}while(b>>>0<=j>>>0);do if(C|0){if(o[e>>2]&32|0)break;Va(19235,1,e)}while(0);if((t|0)>0&b>>>0<S>>>0)while(1){l=Ha(o[b>>2]|0,0,A)|0;if(l>>>0>(E+588|0)>>>0){Lc(E+588|0,48,l-F|0)|0;do l=l+-1|0;while(l>>>0>(E+588|0)>>>0)}if(!(o[e>>2]&32))Va(l,(t|0)>9?9:t,e);b=b+4|0;l=t+-9|0;if(!((t|0)>9&b>>>0<S>>>0)){t=l;break}else t=l}Za(e,48,t+9|0,9,0)}else{g=w?S:R+4|0;if((t|0)>-1){m=(m|0)==0;h=R;do{l=Ha(o[h>>2]|0,0,A)|0;if((l|0)==(A|0)){n[E+588+8>>0]=48;l=E+588+8|0}do if((h|0)==(R|0)){b=l+1|0;if(!(o[e>>2]&32))Va(l,1,e);if(m&(t|0)<1){l=b;break}if(o[e>>2]&32|0){l=b;break}Va(19235,1,e);l=b}else{if(l>>>0<=(E+588|0)>>>0)break;Lc(E+588|0,48,l+(0-F)|0)|0;do l=l+-1|0;while(l>>>0>(E+588|0)>>>0)}while(0);b=A-l|0;if(!(o[e>>2]&32))Va(l,(t|0)>(b|0)?b:t,e);t=t-b|0;h=h+4|0}while(h>>>0<g>>>0&(t|0)>-1)}Za(e,48,t+18|0,18,0);if(o[e>>2]&32|0)break;Va(v,G-v|0,e)}while(0);Za(e,32,M,k,O^8192);t=(k|0)<(M|0)?M:k}else{h=d!=d|0!=0;l=h?0:I;Za(e,32,M,l+3|0,b);t=o[e>>2]|0;if(!(t&32)){Va(T,l,e);t=o[e>>2]|0}if(!(t&32))Va(h?D&32|0?19227:19231:D&32|0?19219:19223,3,e);Za(e,32,M,l+3|0,O^8192);t=(l+3|0)<(M|0)?M:l+3|0}while(0);l=t;m=P;w=x;continue e}default:{t=w;b=O;v=m;w=0;C=17291;l=B}}while(0);t:do if((W|0)==66){l=o[E>>2]|0;b=o[E+4>>2]|0;h=v&32;if(!((l|0)==0&(b|0)==0)){t=B;do{t=t+-1|0;n[t>>0]=_[17275+(l&15)>>0]|h;l=Pc(l|0,b|0,4)|0;b=L}while(!((l|0)==0&(b|0)==0));if((g&8|0)==0|(o[E>>2]|0)==0&(o[E+4>>2]|0)==0){l=g;g=0;h=17291;W=79}else{l=g;g=2;h=17291+(v>>4)|0;W=79}}else{t=B;l=g;g=0;h=17291;W=79}}else if((W|0)==78){t=Ha(t,l,B)|0;l=O;g=b;W=79}else if((W|0)==92){W=0;O=Ga(l,0,m)|0;t=l;v=(O|0)==0?m:O-l|0;w=0;C=17291;l=(O|0)==0?l+m|0:O}else if((W|0)==96){W=0;b=0;l=0;g=t;while(1){h=o[g>>2]|0;if(!h)break;l=Ua(E+528|0,h)|0;if((l|0)<0|l>>>0>(m-b|0)>>>0)break;b=l+b|0;if(m>>>0>b>>>0)g=g+4|0;else break}if((l|0)<0){c=-1;break e}Za(e,32,M,b,O);if(!b){t=0;W=107}else{h=0;while(1){l=o[t>>2]|0;if(!l){t=b;W=107;break t}l=Ua(E+528|0,l)|0;h=l+h|0;if((h|0)>(b|0)){t=b;W=107;break t}if(!(o[e>>2]&32))Va(E+528|0,l,e);if(h>>>0>=b>>>0){t=b;W=107;break}else t=t+4|0}}}while(0);if((W|0)==107){W=0;Za(e,32,M,t,O^8192);l=(M|0)>(t|0)?M:t;m=P;w=x;continue}if((W|0)==79){W=0;b=(m|0)>-1?l&-65537:l;l=(o[E>>2]|0)!=0|(o[E+4>>2]|0)!=0;if((m|0)!=0|l){v=(l&1^1)+(B-t)|0;v=(m|0)>(v|0)?m:v;w=g;C=h;l=B}else{t=B;v=0;w=g;C=h;l=B}}g=l-t|0;h=(v|0)<(g|0)?g:v;m=w+h|0;l=(M|0)<(m|0)?m:M;Za(e,32,l,m,b);if(!(o[e>>2]&32))Va(C,w,e);Za(e,48,l,m,b^65536);Za(e,48,h,g,0);if(!(o[e>>2]&32))Va(t,g,e);Za(e,32,l,m,b^8192);m=P;w=x}e:do if((W|0)==254)if(!e)if(!m)c=0;else{c=1;while(1){t=o[a+(c<<2)>>2]|0;if(!t){t=0;break}Xa(s+(c<<3)|0,t,i);c=c+1|0;if((c|0)>=10){c=1;break e}}while(1){c=c+1|0;if(t|0){c=-1;break e}if((c|0)>=10){c=1;break e}t=o[a+(c<<2)>>2]|0}}while(0);p=E;return c|0}function Va(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0;r=o[i+16>>2]|0;if(!r){if(!(Na(i)|0)){_=o[i+16>>2]|0;s=5}}else{_=r;s=5}e:do if((s|0)==5){r=o[i+20>>2]|0;if((_-r|0)>>>0<t>>>0){gP[o[i+36>>2]&63](i,e,t)|0;break}t:do if((n[i+75>>0]|0)>-1){s=t;while(1){if(!s){_=t;break t}_=s+-1|0;if((n[e+_>>0]|0)==10)break;else s=_}if((gP[o[i+36>>2]&63](i,e,s)|0)>>>0<s>>>0)break e;_=t-s|0;e=e+s|0;r=o[i+20>>2]|0}else _=t;while(0);Wc(r|0,e|0,_|0)|0;o[i+20>>2]=(o[i+20>>2]|0)+_}while(0);return}function Na(e){e=e|0;var t=0;t=n[e+74>>0]|0;n[e+74>>0]=t+255|t;t=o[e>>2]|0;if(!(t&8)){o[e+8>>2]=0;o[e+4>>2]=0;t=o[e+44>>2]|0;o[e+28>>2]=t;o[e+20>>2]=t;o[e+16>>2]=t+(o[e+48>>2]|0);t=0}else{o[e>>2]=t|32;t=-1}return t|0}function Xa(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;e:do if(t>>>0<=20)do switch(t|0){case 9:{n=(o[i>>2]|0)+(4-1)&~(4-1);t=o[n>>2]|0;o[i>>2]=n+4;o[e>>2]=t;break e}case 10:{t=(o[i>>2]|0)+(4-1)&~(4-1);n=o[t>>2]|0;o[i>>2]=t+4;o[e>>2]=n;o[e+4>>2]=((n|0)<0)<<31>>31;break e}case 11:{t=(o[i>>2]|0)+(4-1)&~(4-1);n=o[t>>2]|0;o[i>>2]=t+4;o[e>>2]=n;o[e+4>>2]=0;break e}case 12:{r=(o[i>>2]|0)+(8-1)&~(8-1);t=o[r>>2]|0;n=o[r+4>>2]|0;o[i>>2]=r+8;o[e>>2]=t;o[e+4>>2]=n;break e}case 13:{n=(o[i>>2]|0)+(4-1)&~(4-1);r=o[n>>2]|0;o[i>>2]=n+4;o[e>>2]=(r&65535)<<16>>16;o[e+4>>2]=(((r&65535)<<16>>16|0)<0)<<31>>31;break e}case 14:{n=(o[i>>2]|0)+(4-1)&~(4-1);r=o[n>>2]|0;o[i>>2]=n+4;o[e>>2]=r&65535;o[e+4>>2]=0;break e}case 15:{n=(o[i>>2]|0)+(4-1)&~(4-1);r=o[n>>2]|0;o[i>>2]=n+4;o[e>>2]=(r&255)<<24>>24;o[e+4>>2]=(((r&255)<<24>>24|0)<0)<<31>>31;break e}case 16:{n=(o[i>>2]|0)+(4-1)&~(4-1);r=o[n>>2]|0;o[i>>2]=n+4;o[e>>2]=r&255;o[e+4>>2]=0;break e}case 17:{r=(o[i>>2]|0)+(8-1)&~(8-1);_=+f[r>>3];o[i>>2]=r+8;f[e>>3]=_;break e}case 18:{r=(o[i>>2]|0)+(8-1)&~(8-1);_=+f[r>>3];o[i>>2]=r+8;f[e>>3]=_;break e}default:break e}while(0);while(0);return}function Ha(e,t,i){e=e|0;t=t|0;i=i|0;var r=0;if(t>>>0>0|(t|0)==0&e>>>0>4294967295)while(1){r=Zc(e|0,t|0,10,0)|0;i=i+-1|0;n[i>>0]=r|48;r=e;e=Hc(e|0,t|0,10,0)|0;if(!(t>>>0>9|(t|0)==9&r>>>0>4294967295))break;else t=L}if(e)while(1){i=i+-1|0;n[i>>0]=(e>>>0)%10|0|48;if(e>>>0<10)break;else e=(e>>>0)/10|0}return i|0}function Za(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0;s=p;p=p+256|0;do if((i|0)>(n|0)&(r&73728|0)==0){Lc(s|0,t|0,((i-n|0)>>>0>256?256:i-n|0)|0)|0;r=o[e>>2]|0;if((i-n|0)>>>0>255){_=i-n|0;t=r;r=(r&32|0)==0;do{if(r){Va(s,256,e);t=o[e>>2]|0}_=_+-256|0;r=(t&32|0)==0}while(_>>>0>255);if(r)t=i-n&255;else break}else if(!(r&32))t=i-n|0;else break;Va(s,t,e)}while(0);p=s;return}function Ua(e,t){e=e|0;t=t|0;do if(!e)e=0;else{if(t>>>0<128){n[e>>0]=t;e=1;break}if(t>>>0<2048){n[e>>0]=t>>>6|192;n[e+1>>0]=t&63|128;e=2;break}if(t>>>0<55296|(t&-8192|0)==57344){n[e>>0]=t>>>12|224;n[e+1>>0]=t>>>6&63|128;n[e+2>>0]=t&63|128;e=3;break}if((t+-65536|0)>>>0<1048576){n[e>>0]=t>>>18|240;n[e+1>>0]=t>>>12&63|128;n[e+2>>0]=t>>>6&63|128;n[e+3>>0]=t&63|128;e=4;break}if(true)e=22816;else e=o[(Fc()|0)+64>>2]|0;o[e>>2]=84;e=-1}while(0);return e|0}function za(e,t){e=+e;t=t|0;var i=0,n=0,r=0;f[u>>3]=e;i=o[u>>2]|0;n=o[u+4>>2]|0;r=Pc(i|0,n|0,52)|0;switch(r&2047|0){case 0:{if(e!=0){e=+za(e*0x10000000000000000,t);i=(o[t>>2]|0)+-64|0}else i=0;o[t>>2]=i;break}case 2047:break;default:{o[t>>2]=(r&2047)+-1022;o[u>>2]=i;o[u+4>>2]=n&-2146435073|1071644672;e=+f[u>>3]}}return+e}function Ya(e){e=+e;var t=0,i=0,n=0,r=0,_=0,s=0;s=(c[u>>2]=e,o[u>>2]|0);e:do if((s>>>23&255|0)==255)e=e*6.2831854820251465/(e*6.2831854820251465);else{if(s<<1>>>0<=2173837238)return+((s<<1|0)==-2121130058?e*0:e);if(!(s>>>23&255)){if((s<<9|0)>-1){t=0;i=s<<9;do{t=t+-1|0;i=i<<1}while((i|0)>-1);i=t}else i=0;t=i;n=s<<1-i}else{t=s>>>23&255;n=s&8388607|8388608}r=n+-13176795|0;t:do if((t|0)>129){_=(r|0)>-1;i=r;while(1){if(_){if((n|0)==13176795)break}else i=n;n=i<<1;t=t+-1|0;if((t|0)>129){_=(n+-13176795|0)>-1;i=n+-13176795|0}else{i=n+-13176795|0;r=(n+-13176795|0)>-1;break t}}e=e*0;break e}else{i=r;r=(r|0)>-1}while(0);if(r){if((n|0)==13176795){e=e*0;break}}else i=n;if(i>>>0<8388608)do{i=i<<1;t=t+-1|0}while(i>>>0<8388608);if((t|0)>0)t=i+-8388608|t<<23;else t=i>>>(1-t|0);e=(o[u>>2]=t|s&-2147483648,+c[u>>2])}while(0);return+e}function Ka(e,t){e=e|0;t=t|0;var i=0,r=0,s=0;s=p;p=p+16|0;n[s>>0]=t;i=o[e+16>>2]|0;if(!i)if(!(Na(e)|0)){i=o[e+16>>2]|0;r=4}else i=-1;else r=4;do if((r|0)==4){r=o[e+20>>2]|0;if(r>>>0<i>>>0?(t&255|0)!=(n[e+75>>0]|0):0){o[e+20>>2]=r+1;n[r>>0]=t;i=t&255;break}if((gP[o[e+36>>2]&63](e,s,1)|0)==1)i=_[s>>0]|0;else i=-1}while(0);p=s;return i|0}function Qa(e){e=e|0;var t=0,i=0,n=0,r=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;L=p;p=p+16|0;do if(e>>>0<245){b=e>>>0<11?16:e+11&-8;_=o[5705]|0;if(_>>>(b>>>3)&3|0){e=22860+((_>>>(b>>>3)&1^1)+(b>>>3)<<1<<2)|0;t=o[e+8>>2]|0;i=o[t+8>>2]|0;do if((e|0)!=(i|0)){if(i>>>0<(o[5709]|0)>>>0)Ye();if((o[i+12>>2]|0)==(t|0)){o[i+12>>2]=e;o[e+8>>2]=i;break}else Ye()}else o[5705]=_&~(1<<(_>>>(b>>>3)&1^1)+(b>>>3));while(0);O=(_>>>(b>>>3)&1^1)+(b>>>3)<<3;o[t+4>>2]=O|3;o[t+O+4>>2]=o[t+O+4>>2]|1;O=t+8|0;p=L;return O|0}t=o[5707]|0;if(b>>>0>t>>>0){if(_>>>(b>>>3)|0){e=_>>>(b>>>3)<<(b>>>3)&(2<<(b>>>3)|0-(2<<(b>>>3)));r=((e&0-e)+-1|0)>>>(((e&0-e)+-1|0)>>>12&16);n=r>>>(r>>>5&8)>>>(r>>>(r>>>5&8)>>>2&4);n=(r>>>5&8|((e&0-e)+-1|0)>>>12&16|r>>>(r>>>5&8)>>>2&4|n>>>1&2|n>>>(n>>>1&2)>>>1&1)+(n>>>(n>>>1&2)>>>(n>>>(n>>>1&2)>>>1&1))|0;r=o[22860+(n<<1<<2)+8>>2]|0;e=o[r+8>>2]|0;do if((22860+(n<<1<<2)|0)!=(e|0)){if(e>>>0<(o[5709]|0)>>>0)Ye();if((o[e+12>>2]|0)==(r|0)){o[e+12>>2]=22860+(n<<1<<2);o[22860+(n<<1<<2)+8>>2]=e;s=o[5707]|0;break}else Ye()}else{o[5705]=_&~(1<<n);s=t}while(0);o[r+4>>2]=b|3;o[r+b+4>>2]=(n<<3)-b|1;o[r+b+((n<<3)-b)>>2]=(n<<3)-b;if(s|0){i=o[5710]|0;t=s>>>3;e=o[5705]|0;if(e&1<<t){e=o[22860+(t<<1<<2)+8>>2]|0;if(e>>>0<(o[5709]|0)>>>0)Ye();else{a=22860+(t<<1<<2)+8|0;c=e}}else{o[5705]=e|1<<t;a=22860+(t<<1<<2)+8|0;c=22860+(t<<1<<2)|0}o[a>>2]=i;o[c+12>>2]=i;o[i+8>>2]=c;o[i+12>>2]=22860+(t<<1<<2)}o[5707]=(n<<3)-b;o[5710]=r+b;O=r+8|0;p=L;return O|0}e=o[5706]|0;if(e){a=((e&0-e)+-1|0)>>>(((e&0-e)+-1|0)>>>12&16);c=a>>>(a>>>5&8)>>>(a>>>(a>>>5&8)>>>2&4);c=o[23124+((a>>>5&8|((e&0-e)+-1|0)>>>12&16|a>>>(a>>>5&8)>>>2&4|c>>>1&2|c>>>(c>>>1&2)>>>1&1)+(c>>>(c>>>1&2)>>>(c>>>(c>>>1&2)>>>1&1))<<2)>>2]|0;a=(o[c+4>>2]&-8)-b|0;t=c;while(1){e=o[t+16>>2]|0;if(!e){e=o[t+20>>2]|0;if(!e)break}t=(o[e+4>>2]&-8)-b|0;O=t>>>0<a>>>0;a=O?t:a;t=e;c=O?e:c}r=o[5709]|0;if(c>>>0<r>>>0)Ye();s=c+b|0;if(c>>>0>=s>>>0)Ye();_=o[c+24>>2]|0;e=o[c+12>>2]|0;do if((e|0)==(c|0)){t=c+20|0;e=o[t>>2]|0;if(!e){t=c+16|0;e=o[t>>2]|0;if(!e){f=0;break}}while(1){i=e+20|0;n=o[i>>2]|0;if(n|0){e=n;t=i;continue}i=e+16|0;n=o[i>>2]|0;if(!n)break;else{e=n;t=i}}if(t>>>0<r>>>0)Ye();else{o[t>>2]=0;f=e;break}}else{t=o[c+8>>2]|0;if(t>>>0<r>>>0)Ye();if((o[t+12>>2]|0)!=(c|0))Ye();if((o[e+8>>2]|0)==(c|0)){o[t+12>>2]=e;o[e+8>>2]=t;f=e;break}else Ye()}while(0);do if(_|0){e=o[c+28>>2]|0;if((c|0)==(o[23124+(e<<2)>>2]|0)){o[23124+(e<<2)>>2]=f;if(!f){o[5706]=o[5706]&~(1<<e);break}}else{if(_>>>0<(o[5709]|0)>>>0)Ye();if((o[_+16>>2]|0)==(c|0))o[_+16>>2]=f;else o[_+20>>2]=f;if(!f)break}t=o[5709]|0;if(f>>>0<t>>>0)Ye();o[f+24>>2]=_;e=o[c+16>>2]|0;do if(e|0)if(e>>>0<t>>>0)Ye();else{o[f+16>>2]=e;o[e+24>>2]=f;break}while(0);e=o[c+20>>2]|0;if(e|0)if(e>>>0<(o[5709]|0)>>>0)Ye();else{o[f+20>>2]=e;o[e+24>>2]=f;break}}while(0);if(a>>>0<16){O=a+b|0;o[c+4>>2]=O|3;O=c+O+4|0;o[O>>2]=o[O>>2]|1}else{o[c+4>>2]=b|3;o[s+4>>2]=a|1;o[s+a>>2]=a;t=o[5707]|0;if(t|0){i=o[5710]|0;e=o[5705]|0;if(e&1<<(t>>>3)){e=o[22860+(t>>>3<<1<<2)+8>>2]|0;if(e>>>0<(o[5709]|0)>>>0)Ye();else{l=22860+(t>>>3<<1<<2)+8|0;u=e}}else{o[5705]=e|1<<(t>>>3);l=22860+(t>>>3<<1<<2)+8|0;u=22860+(t>>>3<<1<<2)|0}o[l>>2]=i;o[u+12>>2]=i;o[i+8>>2]=u;o[i+12>>2]=22860+(t>>>3<<1<<2)}o[5707]=a;o[5710]=s}O=c+8|0;p=L;return O|0}}}else if(e>>>0<=4294967231){b=e+11&-8;a=o[5706]|0;if(a){if((e+11|0)>>>8)if(b>>>0>16777215)s=31;else{s=(e+11|0)>>>8<<((((e+11|0)>>>8)+1048320|0)>>>16&8);s=14-((s+520192|0)>>>16&4|(((e+11|0)>>>8)+1048320|0)>>>16&8|((s<<((s+520192|0)>>>16&4))+245760|0)>>>16&2)+(s<<((s+520192|0)>>>16&4)<<(((s<<((s+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;s=b>>>(s+7|0)&1|s<<1}else s=0;t=o[23124+(s<<2)>>2]|0;e:do if(!t){i=0-b|0;e=0;t=0;k=86}else{i=0-b|0;e=0;r=b<<((s|0)==31?0:25-(s>>>1)|0);_=t;t=0;while(1){n=o[_+4>>2]&-8;if((n-b|0)>>>0<i>>>0)if((n|0)==(b|0)){i=n-b|0;e=_;t=_;k=90;break e}else{i=n-b|0;t=_}n=o[_+20>>2]|0;_=o[_+16+(r>>>31<<2)>>2]|0;e=(n|0)==0|(n|0)==(_|0)?e:n;n=(_|0)==0;if(n){k=86;break}else r=r<<(n&1^1)}}while(0);if((k|0)==86){if((e|0)==0&(t|0)==0){e=2<<s;if(!(a&(e|0-e)))break;l=(a&(e|0-e)&0-(a&(e|0-e)))+-1|0;u=l>>>(l>>>12&16)>>>(l>>>(l>>>12&16)>>>5&8);e=u>>>(u>>>2&4)>>>(u>>>(u>>>2&4)>>>1&2);e=o[23124+((l>>>(l>>>12&16)>>>5&8|l>>>12&16|u>>>2&4|u>>>(u>>>2&4)>>>1&2|e>>>1&1)+(e>>>(e>>>1&1))<<2)>>2]|0}if(!e){a=i;c=t}else k=90}if((k|0)==90)while(1){k=0;u=(o[e+4>>2]&-8)-b|0;n=u>>>0<i>>>0;i=n?u:i;t=n?e:t;n=o[e+16>>2]|0;if(n|0){e=n;k=90;continue}e=o[e+20>>2]|0;if(!e){a=i;c=t;break}else k=90}if((c|0)!=0?a>>>0<((o[5707]|0)-b|0)>>>0:0){r=o[5709]|0;if(c>>>0<r>>>0)Ye();s=c+b|0;if(c>>>0>=s>>>0)Ye();_=o[c+24>>2]|0;e=o[c+12>>2]|0;do if((e|0)==(c|0)){t=c+20|0;e=o[t>>2]|0;if(!e){t=c+16|0;e=o[t>>2]|0;if(!e){h=0;break}}while(1){i=e+20|0;n=o[i>>2]|0;if(n|0){e=n;t=i;continue}i=e+16|0;n=o[i>>2]|0;if(!n)break;else{e=n;t=i}}if(t>>>0<r>>>0)Ye();else{o[t>>2]=0;h=e;break}}else{t=o[c+8>>2]|0;if(t>>>0<r>>>0)Ye();if((o[t+12>>2]|0)!=(c|0))Ye();if((o[e+8>>2]|0)==(c|0)){o[t+12>>2]=e;o[e+8>>2]=t;h=e;break}else Ye()}while(0);do if(_|0){e=o[c+28>>2]|0;if((c|0)==(o[23124+(e<<2)>>2]|0)){o[23124+(e<<2)>>2]=h;if(!h){o[5706]=o[5706]&~(1<<e);break}}else{if(_>>>0<(o[5709]|0)>>>0)Ye();if((o[_+16>>2]|0)==(c|0))o[_+16>>2]=h;else o[_+20>>2]=h;if(!h)break}t=o[5709]|0;if(h>>>0<t>>>0)Ye();o[h+24>>2]=_;e=o[c+16>>2]|0;do if(e|0)if(e>>>0<t>>>0)Ye();else{o[h+16>>2]=e;o[e+24>>2]=h;break}while(0);e=o[c+20>>2]|0;if(e|0)if(e>>>0<(o[5709]|0)>>>0)Ye();else{o[h+20>>2]=e;o[e+24>>2]=h;break}}while(0);do if(a>>>0>=16){o[c+4>>2]=b|3;o[s+4>>2]=a|1;o[s+a>>2]=a;t=a>>>3;if(a>>>0<256){e=o[5705]|0;if(e&1<<t){e=o[22860+(t<<1<<2)+8>>2]|0;if(e>>>0<(o[5709]|0)>>>0)Ye();else{m=22860+(t<<1<<2)+8|0;y=e}}else{o[5705]=e|1<<t;m=22860+(t<<1<<2)+8|0;y=22860+(t<<1<<2)|0}o[m>>2]=s;o[y+12>>2]=s;o[s+8>>2]=y;o[s+12>>2]=22860+(t<<1<<2);break}e=a>>>8;if(e)if(a>>>0>16777215)i=31;else{i=e<<((e+1048320|0)>>>16&8)<<(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4);i=14-(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4|(e+1048320|0)>>>16&8|(i+245760|0)>>>16&2)+(i<<((i+245760|0)>>>16&2)>>>15)|0;i=a>>>(i+7|0)&1|i<<1}else i=0;n=23124+(i<<2)|0;o[s+28>>2]=i;o[s+16+4>>2]=0;o[s+16>>2]=0;e=o[5706]|0;t=1<<i;if(!(e&t)){o[5706]=e|t;o[n>>2]=s;o[s+24>>2]=n;o[s+12>>2]=s;o[s+8>>2]=s;break}i=a<<((i|0)==31?0:25-(i>>>1)|0);n=o[n>>2]|0;while(1){if((o[n+4>>2]&-8|0)==(a|0)){k=148;break}t=n+16+(i>>>31<<2)|0;e=o[t>>2]|0;if(!e){k=145;break}else{i=i<<1;n=e}}if((k|0)==145)if(t>>>0<(o[5709]|0)>>>0)Ye();else{o[t>>2]=s;o[s+24>>2]=n;o[s+12>>2]=s;o[s+8>>2]=s;break}else if((k|0)==148){e=n+8|0;t=o[e>>2]|0;O=o[5709]|0;if(t>>>0>=O>>>0&n>>>0>=O>>>0){o[t+12>>2]=s;o[e>>2]=s;o[s+8>>2]=t;o[s+12>>2]=n;o[s+24>>2]=0;break}else Ye()}}else{O=a+b|0;o[c+4>>2]=O|3;O=c+O+4|0;o[O>>2]=o[O>>2]|1}while(0);O=c+8|0;p=L;return O|0}}}else b=-1;while(0);i=o[5707]|0;if(i>>>0>=b>>>0){e=i-b|0;t=o[5710]|0;if(e>>>0>15){O=t+b|0;o[5710]=O;o[5707]=e;o[O+4>>2]=e|1;o[O+e>>2]=e;o[t+4>>2]=b|3}else{o[5707]=0;o[5710]=0;o[t+4>>2]=i|3;o[t+i+4>>2]=o[t+i+4>>2]|1}O=t+8|0;p=L;return O|0}e=o[5708]|0;if(e>>>0>b>>>0){T=e-b|0;o[5708]=T;O=o[5711]|0;D=O+b|0;o[5711]=D;o[D+4>>2]=T|1;o[O+4>>2]=b|3;O=O+8|0;p=L;return O|0}if(!(o[5823]|0)){o[5825]=4096;o[5824]=4096;o[5826]=-1;o[5827]=-1;o[5828]=0;o[5816]=0;o[L>>2]=L&-16^1431655768;o[5823]=L&-16^1431655768}r=b+48|0;i=o[5825]|0;_=b+47|0;s=i+_&0-i;if(s>>>0<=b>>>0){O=0;p=L;return O|0}e=o[5815]|0;if(e|0?(y=o[5813]|0,(y+s|0)>>>0<=y>>>0|(y+s|0)>>>0>e>>>0):0){O=0;p=L;return O|0}e:do if(!(o[5816]&4)){t=o[5711]|0;t:do if(t){n=23268;while(1){e=o[n>>2]|0;if(e>>>0<=t>>>0?(d=n+4|0,(e+(o[d>>2]|0)|0)>>>0>t>>>0):0)break;e=o[n+8>>2]|0;if(!e){k=171;break t}else n=e}e=i+_-(o[5708]|0)&0-i;if(e>>>0<2147483647){t=Je(e|0)|0;if((t|0)==((o[n>>2]|0)+(o[d>>2]|0)|0)){if((t|0)!=(-1|0)){s=t;_=e;k=191;break e}}else k=181}}else k=171;while(0);do if((k|0)==171?(g=Je(0)|0,(g|0)!=(-1|0)):0){e=o[5824]|0;if(!(e+-1&g))e=s;else e=s-g+(e+-1+g&0-e)|0;t=o[5813]|0;i=t+e|0;if(e>>>0>b>>>0&e>>>0<2147483647){y=o[5815]|0;if(y|0?i>>>0<=t>>>0|i>>>0>y>>>0:0)break;t=Je(e|0)|0;if((t|0)==(g|0)){s=g;_=e;k=191;break e}else k=181}}while(0);t:do if((k|0)==181){i=0-e|0;do if(r>>>0>e>>>0&(e>>>0<2147483647&(t|0)!=(-1|0))?(v=o[5825]|0,v=_-e+v&0-v,v>>>0<2147483647):0)if((Je(v|0)|0)==(-1|0)){Je(i|0)|0;break t}else{e=v+e|0;break}while(0);if((t|0)!=(-1|0)){s=t;_=e;k=191;break e}}while(0);o[5816]=o[5816]|4;k=188}else k=188;while(0);if((((k|0)==188?s>>>0<2147483647:0)?(C=Je(s|0)|0,w=Je(0)|0,C>>>0<w>>>0&((C|0)!=(-1|0)&(w|0)!=(-1|0))):0)?(w-C|0)>>>0>(b+40|0)>>>0:0){s=C;_=w-C|0;k=191}if((k|0)==191){e=(o[5813]|0)+_|0;o[5813]=e;if(e>>>0>(o[5814]|0)>>>0)o[5814]=e;f=o[5711]|0;do if(f){r=23268;while(1){e=o[r>>2]|0;t=r+4|0;i=o[t>>2]|0;if((s|0)==(e+i|0)){k=201;break}n=o[r+8>>2]|0;if(!n)break;else r=n}if(((k|0)==201?(o[r+12>>2]&8|0)==0:0)?f>>>0<s>>>0&f>>>0>=e>>>0:0){o[t>>2]=i+_;D=(f+8&7|0)==0?0:0-(f+8)&7;O=_-D+(o[5708]|0)|0;o[5711]=f+D;o[5708]=O;o[f+D+4>>2]=O|1;o[f+D+O+4>>2]=40;o[5712]=o[5827];break}e=o[5709]|0;if(s>>>0<e>>>0){o[5709]=s;c=s}else c=e;t=s+_|0;e=23268;while(1){if((o[e>>2]|0)==(t|0)){k=209;break}e=o[e+8>>2]|0;if(!e){t=23268;break}}if((k|0)==209)if(!(o[e+12>>2]&8)){o[e>>2]=s;u=e+4|0;o[u>>2]=(o[u>>2]|0)+_;u=s+8|0;u=s+((u&7|0)==0?0:0-u&7)|0;e=t+((t+8&7|0)==0?0:0-(t+8)&7)|0;l=u+b|0;a=e-u-b|0;o[u+4>>2]=b|3;do if((e|0)!=(f|0)){if((e|0)==(o[5710]|0)){O=(o[5707]|0)+a|0;o[5707]=O;o[5710]=l;o[l+4>>2]=O|1;o[l+O>>2]=O;break}s=o[e+4>>2]|0;if((s&3|0)==1){e:do if(s>>>0>=256){_=o[e+24>>2]|0;t=o[e+12>>2]|0;do if((t|0)==(e|0)){t=o[e+16+4>>2]|0;if(!t){t=o[e+16>>2]|0;if(!t){T=0;break}else r=e+16|0}else r=e+16+4|0;while(1){i=t+20|0;n=o[i>>2]|0;if(n|0){t=n;r=i;continue}i=t+16|0;n=o[i>>2]|0;if(!n)break;else{t=n;r=i}}if(r>>>0<c>>>0)Ye();else{o[r>>2]=0;T=t;break}}else{i=o[e+8>>2]|0;if(i>>>0<c>>>0)Ye();if((o[i+12>>2]|0)!=(e|0))Ye();if((o[t+8>>2]|0)==(e|0)){o[i+12>>2]=t;o[t+8>>2]=i;T=t;break}else Ye()}while(0);if(!_)break;t=o[e+28>>2]|0;do if((e|0)!=(o[23124+(t<<2)>>2]|0)){if(_>>>0<(o[5709]|0)>>>0)Ye();if((o[_+16>>2]|0)==(e|0))o[_+16>>2]=T;else o[_+20>>2]=T;if(!T)break e}else{o[23124+(t<<2)>>2]=T;if(T|0)break;o[5706]=o[5706]&~(1<<t);break e}while(0);i=o[5709]|0;if(T>>>0<i>>>0)Ye();o[T+24>>2]=_;t=o[e+16>>2]|0;do if(t|0)if(t>>>0<i>>>0)Ye();else{o[T+16>>2]=t;o[t+24>>2]=T;break}while(0);t=o[e+16+4>>2]|0;if(!t)break;if(t>>>0<(o[5709]|0)>>>0)Ye();else{o[T+20>>2]=t;o[t+24>>2]=T;break}}else{t=o[e+8>>2]|0;i=o[e+12>>2]|0;do if((t|0)!=(22860+(s>>>3<<1<<2)|0)){if(t>>>0<c>>>0)Ye();if((o[t+12>>2]|0)==(e|0))break;Ye()}while(0);if((i|0)==(t|0)){o[5705]=o[5705]&~(1<<(s>>>3));break}do if((i|0)==(22860+(s>>>3<<1<<2)|0))j=i+8|0;else{if(i>>>0<c>>>0)Ye();if((o[i+8>>2]|0)==(e|0)){j=i+8|0;break}Ye()}while(0);o[t+12>>2]=i;o[j>>2]=t}while(0);e=e+(s&-8)|0;r=(s&-8)+a|0}else r=a;t=e+4|0;o[t>>2]=o[t>>2]&-2;o[l+4>>2]=r|1;o[l+r>>2]=r;t=r>>>3;if(r>>>0<256){e=o[5705]|0;do if(!(e&1<<t)){o[5705]=e|1<<t;D=22860+(t<<1<<2)+8|0;O=22860+(t<<1<<2)|0}else{e=o[22860+(t<<1<<2)+8>>2]|0;if(e>>>0>=(o[5709]|0)>>>0){D=22860+(t<<1<<2)+8|0;O=e;break}Ye()}while(0);o[D>>2]=l;o[O+12>>2]=l;o[l+8>>2]=O;o[l+12>>2]=22860+(t<<1<<2);break}e=r>>>8;do if(!e)i=0;else{if(r>>>0>16777215){i=31;break}i=e<<((e+1048320|0)>>>16&8)<<(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4);i=14-(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4|(e+1048320|0)>>>16&8|(i+245760|0)>>>16&2)+(i<<((i+245760|0)>>>16&2)>>>15)|0;i=r>>>(i+7|0)&1|i<<1}while(0);n=23124+(i<<2)|0;o[l+28>>2]=i;o[l+16+4>>2]=0;o[l+16>>2]=0;e=o[5706]|0;t=1<<i;if(!(e&t)){o[5706]=e|t;o[n>>2]=l;o[l+24>>2]=n;o[l+12>>2]=l;o[l+8>>2]=l;break}i=r<<((i|0)==31?0:25-(i>>>1)|0);n=o[n>>2]|0;while(1){if((o[n+4>>2]&-8|0)==(r|0)){k=279;break}t=n+16+(i>>>31<<2)|0;e=o[t>>2]|0;if(!e){k=276;break}else{i=i<<1;n=e}}if((k|0)==276)if(t>>>0<(o[5709]|0)>>>0)Ye();else{o[t>>2]=l;o[l+24>>2]=n;o[l+12>>2]=l;o[l+8>>2]=l;break}else if((k|0)==279){e=n+8|0;t=o[e>>2]|0;O=o[5709]|0;if(t>>>0>=O>>>0&n>>>0>=O>>>0){o[t+12>>2]=l;o[e>>2]=l;o[l+8>>2]=t;o[l+12>>2]=n;o[l+24>>2]=0;break}else Ye()}}else{O=(o[5708]|0)+a|0;o[5708]=O;o[5711]=l;o[l+4>>2]=O|1}while(0);O=u+8|0;p=L;return O|0}else t=23268;while(1){e=o[t>>2]|0;if(e>>>0<=f>>>0?(S=e+(o[t+4>>2]|0)|0,S>>>0>f>>>0):0)break;t=o[t+8>>2]|0}r=S+-47+((S+-47+8&7|0)==0?0:0-(S+-47+8)&7)|0;r=r>>>0<(f+16|0)>>>0?f:r;e=s+8|0;e=(e&7|0)==0?0:0-e&7;O=s+e|0;e=_+-40-e|0;o[5711]=O;o[5708]=e;o[O+4>>2]=e|1;o[O+e+4>>2]=40;o[5712]=o[5827];o[r+4>>2]=27;o[r+8>>2]=o[5817];o[r+8+4>>2]=o[5818];o[r+8+8>>2]=o[5819];o[r+8+12>>2]=o[5820];o[5817]=s;o[5818]=_;o[5820]=0;o[5819]=r+8;e=r+24|0;do{e=e+4|0;o[e>>2]=7}while((e+4|0)>>>0<S>>>0);if((r|0)!=(f|0)){o[r+4>>2]=o[r+4>>2]&-2;o[f+4>>2]=r-f|1;o[r>>2]=r-f;if((r-f|0)>>>0<256){t=22860+((r-f|0)>>>3<<1<<2)|0;e=o[5705]|0;if(e&1<<((r-f|0)>>>3)){e=o[t+8>>2]|0;if(e>>>0<(o[5709]|0)>>>0)Ye();else{R=t+8|0;I=e}}else{o[5705]=e|1<<((r-f|0)>>>3);R=t+8|0;I=t}o[R>>2]=f;o[I+12>>2]=f;o[f+8>>2]=I;o[f+12>>2]=t;break}if((r-f|0)>>>8)if((r-f|0)>>>0>16777215)i=31;else{i=(r-f|0)>>>8<<((((r-f|0)>>>8)+1048320|0)>>>16&8);i=14-((i+520192|0)>>>16&4|(((r-f|0)>>>8)+1048320|0)>>>16&8|((i<<((i+520192|0)>>>16&4))+245760|0)>>>16&2)+(i<<((i+520192|0)>>>16&4)<<(((i<<((i+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;i=(r-f|0)>>>(i+7|0)&1|i<<1}else i=0;n=23124+(i<<2)|0;o[f+28>>2]=i;o[f+20>>2]=0;o[f+16>>2]=0;e=o[5706]|0;t=1<<i;if(!(e&t)){o[5706]=e|t;o[n>>2]=f;o[f+24>>2]=n;o[f+12>>2]=f;o[f+8>>2]=f;break}i=r-f<<((i|0)==31?0:25-(i>>>1)|0);n=o[n>>2]|0;while(1){if((o[n+4>>2]&-8|0)==(r-f|0)){\nk=305;break}t=n+16+(i>>>31<<2)|0;e=o[t>>2]|0;if(!e){k=302;break}else{i=i<<1;n=e}}if((k|0)==302)if(t>>>0<(o[5709]|0)>>>0)Ye();else{o[t>>2]=f;o[f+24>>2]=n;o[f+12>>2]=f;o[f+8>>2]=f;break}else if((k|0)==305){e=n+8|0;t=o[e>>2]|0;O=o[5709]|0;if(t>>>0>=O>>>0&n>>>0>=O>>>0){o[t+12>>2]=f;o[e>>2]=f;o[f+8>>2]=t;o[f+12>>2]=n;o[f+24>>2]=0;break}else Ye()}}}else{O=o[5709]|0;if((O|0)==0|s>>>0<O>>>0)o[5709]=s;o[5817]=s;o[5818]=_;o[5820]=0;o[5714]=o[5823];o[5713]=-1;e=0;do{O=22860+(e<<1<<2)|0;o[O+12>>2]=O;o[O+8>>2]=O;e=e+1|0}while((e|0)!=32);O=s+8|0;O=(O&7|0)==0?0:0-O&7;D=s+O|0;O=_+-40-O|0;o[5711]=D;o[5708]=O;o[D+4>>2]=O|1;o[D+O+4>>2]=40;o[5712]=o[5827]}while(0);e=o[5708]|0;if(e>>>0>b>>>0){T=e-b|0;o[5708]=T;O=o[5711]|0;D=O+b|0;o[5711]=D;o[D+4>>2]=T|1;o[O+4>>2]=b|3;O=O+8|0;p=L;return O|0}}if(true)e=22816;else e=o[(Fc()|0)+64>>2]|0;o[e>>2]=12;O=0;p=L;return O|0}function qa(e){e=e|0;var t=0,i=0,n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;if(!e)return;s=o[5709]|0;if((e+-8|0)>>>0<s>>>0)Ye();t=o[e+-4>>2]|0;if((t&3|0)==1)Ye();u=e+-8+(t&-8)|0;do if(!(t&1)){n=o[e+-8>>2]|0;if(!(t&3))return;f=e+-8+(0-n)|0;c=n+(t&-8)|0;if(f>>>0<s>>>0)Ye();if((f|0)==(o[5710]|0)){e=o[u+4>>2]|0;if((e&3|0)!=3){h=f;r=c;break}o[5707]=c;o[u+4>>2]=e&-2;o[f+4>>2]=c|1;o[f+c>>2]=c;return}if(n>>>0<256){e=o[f+8>>2]|0;t=o[f+12>>2]|0;if((e|0)!=(22860+(n>>>3<<1<<2)|0)){if(e>>>0<s>>>0)Ye();if((o[e+12>>2]|0)!=(f|0))Ye()}if((t|0)==(e|0)){o[5705]=o[5705]&~(1<<(n>>>3));h=f;r=c;break}if((t|0)!=(22860+(n>>>3<<1<<2)|0)){if(t>>>0<s>>>0)Ye();if((o[t+8>>2]|0)!=(f|0))Ye();else i=t+8|0}else i=t+8|0;o[e+12>>2]=t;o[i>>2]=e;h=f;r=c;break}_=o[f+24>>2]|0;e=o[f+12>>2]|0;do if((e|0)==(f|0)){e=o[f+16+4>>2]|0;if(!e){e=o[f+16>>2]|0;if(!e){a=0;break}else n=f+16|0}else n=f+16+4|0;while(1){t=e+20|0;i=o[t>>2]|0;if(i|0){e=i;n=t;continue}t=e+16|0;i=o[t>>2]|0;if(!i)break;else{e=i;n=t}}if(n>>>0<s>>>0)Ye();else{o[n>>2]=0;a=e;break}}else{t=o[f+8>>2]|0;if(t>>>0<s>>>0)Ye();if((o[t+12>>2]|0)!=(f|0))Ye();if((o[e+8>>2]|0)==(f|0)){o[t+12>>2]=e;o[e+8>>2]=t;a=e;break}else Ye()}while(0);if(_){e=o[f+28>>2]|0;if((f|0)==(o[23124+(e<<2)>>2]|0)){o[23124+(e<<2)>>2]=a;if(!a){o[5706]=o[5706]&~(1<<e);h=f;r=c;break}}else{if(_>>>0<(o[5709]|0)>>>0)Ye();if((o[_+16>>2]|0)==(f|0))o[_+16>>2]=a;else o[_+20>>2]=a;if(!a){h=f;r=c;break}}t=o[5709]|0;if(a>>>0<t>>>0)Ye();o[a+24>>2]=_;e=o[f+16>>2]|0;do if(e|0)if(e>>>0<t>>>0)Ye();else{o[a+16>>2]=e;o[e+24>>2]=a;break}while(0);e=o[f+16+4>>2]|0;if(e)if(e>>>0<(o[5709]|0)>>>0)Ye();else{o[a+20>>2]=e;o[e+24>>2]=a;h=f;r=c;break}else{h=f;r=c}}else{h=f;r=c}}else{h=e+-8|0;r=t&-8}while(0);if(h>>>0>=u>>>0)Ye();i=o[u+4>>2]|0;if(!(i&1))Ye();if(!(i&2)){if((u|0)==(o[5711]|0)){d=(o[5708]|0)+r|0;o[5708]=d;o[5711]=h;o[h+4>>2]=d|1;if((h|0)!=(o[5710]|0))return;o[5710]=0;o[5707]=0;return}if((u|0)==(o[5710]|0)){d=(o[5707]|0)+r|0;o[5707]=d;o[5710]=h;o[h+4>>2]=d|1;o[h+d>>2]=d;return}r=(i&-8)+r|0;do if(i>>>0>=256){_=o[u+24>>2]|0;e=o[u+12>>2]|0;do if((e|0)==(u|0)){e=o[u+16+4>>2]|0;if(!e){e=o[u+16>>2]|0;if(!e){l=0;break}else n=u+16|0}else n=u+16+4|0;while(1){t=e+20|0;i=o[t>>2]|0;if(i|0){e=i;n=t;continue}t=e+16|0;i=o[t>>2]|0;if(!i)break;else{e=i;n=t}}if(n>>>0<(o[5709]|0)>>>0)Ye();else{o[n>>2]=0;l=e;break}}else{t=o[u+8>>2]|0;if(t>>>0<(o[5709]|0)>>>0)Ye();if((o[t+12>>2]|0)!=(u|0))Ye();if((o[e+8>>2]|0)==(u|0)){o[t+12>>2]=e;o[e+8>>2]=t;l=e;break}else Ye()}while(0);if(_|0){e=o[u+28>>2]|0;if((u|0)==(o[23124+(e<<2)>>2]|0)){o[23124+(e<<2)>>2]=l;if(!l){o[5706]=o[5706]&~(1<<e);break}}else{if(_>>>0<(o[5709]|0)>>>0)Ye();if((o[_+16>>2]|0)==(u|0))o[_+16>>2]=l;else o[_+20>>2]=l;if(!l)break}t=o[5709]|0;if(l>>>0<t>>>0)Ye();o[l+24>>2]=_;e=o[u+16>>2]|0;do if(e|0)if(e>>>0<t>>>0)Ye();else{o[l+16>>2]=e;o[e+24>>2]=l;break}while(0);e=o[u+16+4>>2]|0;if(e|0)if(e>>>0<(o[5709]|0)>>>0)Ye();else{o[l+20>>2]=e;o[e+24>>2]=l;break}}}else{e=o[u+8>>2]|0;t=o[u+12>>2]|0;if((e|0)!=(22860+(i>>>3<<1<<2)|0)){if(e>>>0<(o[5709]|0)>>>0)Ye();if((o[e+12>>2]|0)!=(u|0))Ye()}if((t|0)==(e|0)){o[5705]=o[5705]&~(1<<(i>>>3));break}if((t|0)!=(22860+(i>>>3<<1<<2)|0)){if(t>>>0<(o[5709]|0)>>>0)Ye();if((o[t+8>>2]|0)!=(u|0))Ye();else p=t+8|0}else p=t+8|0;o[e+12>>2]=t;o[p>>2]=e}while(0);o[h+4>>2]=r|1;o[h+r>>2]=r;if((h|0)==(o[5710]|0)){o[5707]=r;return}}else{o[u+4>>2]=i&-2;o[h+4>>2]=r|1;o[h+r>>2]=r}t=r>>>3;if(r>>>0<256){e=o[5705]|0;if(e&1<<t){e=o[22860+(t<<1<<2)+8>>2]|0;if(e>>>0<(o[5709]|0)>>>0)Ye();else{b=22860+(t<<1<<2)+8|0;d=e}}else{o[5705]=e|1<<t;b=22860+(t<<1<<2)+8|0;d=22860+(t<<1<<2)|0}o[b>>2]=h;o[d+12>>2]=h;o[h+8>>2]=d;o[h+12>>2]=22860+(t<<1<<2);return}e=r>>>8;if(e)if(r>>>0>16777215)i=31;else{i=e<<((e+1048320|0)>>>16&8)<<(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4);i=14-(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4|(e+1048320|0)>>>16&8|(i+245760|0)>>>16&2)+(i<<((i+245760|0)>>>16&2)>>>15)|0;i=r>>>(i+7|0)&1|i<<1}else i=0;n=23124+(i<<2)|0;o[h+28>>2]=i;o[h+20>>2]=0;o[h+16>>2]=0;e=o[5706]|0;t=1<<i;do if(e&t){i=r<<((i|0)==31?0:25-(i>>>1)|0);n=o[n>>2]|0;while(1){if((o[n+4>>2]&-8|0)==(r|0)){e=130;break}t=n+16+(i>>>31<<2)|0;e=o[t>>2]|0;if(!e){e=127;break}else{i=i<<1;n=e}}if((e|0)==127)if(t>>>0<(o[5709]|0)>>>0)Ye();else{o[t>>2]=h;o[h+24>>2]=n;o[h+12>>2]=h;o[h+8>>2]=h;break}else if((e|0)==130){e=n+8|0;t=o[e>>2]|0;d=o[5709]|0;if(t>>>0>=d>>>0&n>>>0>=d>>>0){o[t+12>>2]=h;o[e>>2]=h;o[h+8>>2]=t;o[h+12>>2]=n;o[h+24>>2]=0;break}else Ye()}}else{o[5706]=e|t;o[n>>2]=h;o[h+24>>2]=n;o[h+12>>2]=h;o[h+8>>2]=h}while(0);h=(o[5713]|0)+-1|0;o[5713]=h;if(!h)e=23276;else return;while(1){e=o[e>>2]|0;if(!e)break;else e=e+8|0}o[5713]=-1;return}function Ja(){var e=0,t=0,i=0,n=0;n=p;p=p+48|0;if(ot(23316,3)|0)tc(19340,n);e=rt(o[5830]|0)|0;if(e|0?(i=o[e>>2]|0,i|0):0){e=o[i+48>>2]|0;t=o[i+48+4>>2]|0;if(!((e&-256|0)==1126902528&(t|0)==1129074247)){o[n+32>>2]=19519;tc(19614,n+32|0)}if((e|0)==1126902529&(t|0)==1129074247)e=o[i+44>>2]|0;else e=i+80|0;o[n+44>>2]=e;i=o[i>>2]|0;e=o[i+4>>2]|0;if(_c(2352,i,n+44|0)|0){i=o[n+44>>2]|0;i=fP[o[(o[i>>2]|0)+8>>2]&127](i)|0;o[n+8>>2]=19519;o[n+8+4>>2]=e;o[n+8+8>>2]=i;tc(19528,n+8|0)}else{o[n+24>>2]=19519;o[n+24+4>>2]=e;tc(19573,n+24|0)}}tc(19652,n+40|0)}function $a(){var e=0;e=p;p=p+16|0;if(!(st(23320,219)|0)){p=e;return}else tc(19290,e)}function ec(e){e=e|0;var t=0;t=p;p=p+16|0;qa(e);if(!(ct(o[5830]|0,0)|0)){p=t;return}else tc(19237,t)}function tc(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;r=p;p=p+240|0;o[r+80>>2]=t;t=r+96|0;i=t+40|0;do{o[t>>2]=0;t=t+4|0}while((t|0)<(i|0));o[r+136>>2]=o[r+80>>2];if((Ea(0,e,r+136|0,r,r+96|0)|0)>=0){t=o[2026]|0;if((n[8178]|0)<1)o[2026]=t&-33;if(!(o[2038]|0)){i=o[2037]|0;o[2037]=r+152;o[2033]=r+152;o[2031]=r+152;o[2038]=80;o[2030]=r+152+80;Ea(8104,e,r+136|0,r,r+96|0)|0;if(i|0){gP[o[8140>>2]&63](8104,0,0)|0;o[2037]=i;o[2038]=0;o[2030]=0;o[2033]=0;o[2031]=0}}else Ea(8104,e,r+136|0,r,r+96|0)|0;o[2026]=o[2026]|t&32}t=(n[8179]|0)==10;do if((o[2045]|0)<0){if(!t?(_=o[2031]|0,_>>>0<(o[2030]|0)>>>0):0){o[2031]=_+1;n[_>>0]=10;break}Ka(8104,10)|0}else{if(!t?(s=o[2031]|0,s>>>0<(o[2030]|0)>>>0):0){o[2031]=s+1;n[s>>0]=10;break}Ka(8104,10)|0}while(0);Ye()}function ic(e){e=e|0;return}function nc(e){e=e|0;qa(e);return}function rc(e){e=e|0;return}function oc(e){e=e|0;return}function _c(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;_=p;p=p+64|0;if((e|0)!=(t|0))if((t|0)!=0?(r=sc(t,2360)|0,(r|0)!=0):0){t=_;n=t+56|0;do{o[t>>2]=0;t=t+4|0}while((t|0)<(n|0));o[_>>2]=r;o[_+8>>2]=e;o[_+12>>2]=-1;o[_+48>>2]=1;HP[o[(o[r>>2]|0)+28>>2]&127](r,_,o[i>>2]|0,1);if((o[_+24>>2]|0)==1){o[i>>2]=o[_+16>>2];t=1}else t=0}else t=0;else t=1;p=_;return t|0}function sc(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0;a=p;p=p+64|0;s=o[e>>2]|0;_=e+(o[s+-8>>2]|0)|0;s=o[s+-4>>2]|0;o[a>>2]=t;o[a+4>>2]=e;o[a+8>>2]=2392;e=a+12|0;i=e+40|0;do{o[e>>2]=0;e=e+4|0}while((e|0)<(i|0));r[a+12+40>>1]=0;n[a+12+42>>0]=0;e:do if((s|0)==(t|0)){o[a+48>>2]=1;vP[o[(o[t>>2]|0)+20>>2]&7](t,a,_,_,1,0);e=(o[a+24>>2]|0)==1?_:0}else{rP[o[(o[s>>2]|0)+24>>2]&31](s,a,_,1,0);switch(o[a+36>>2]|0){case 0:{e=((o[a+40>>2]|0)==1?(o[a+28>>2]|0)==1:0)&(o[a+32>>2]|0)==1?o[a+20>>2]|0:0;break e}case 1:break;default:{e=0;break e}}if((o[a+24>>2]|0)!=1?!(((o[a+40>>2]|0)==0?(o[a+28>>2]|0)==1:0)&(o[a+32>>2]|0)==1):0){e=0;break}e=o[a+16>>2]|0}while(0);p=a;return e|0}function ac(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;if((e|0)==(o[t+8>>2]|0))cc(t,i,n,r);else{e=o[e+8>>2]|0;vP[o[(o[e>>2]|0)+20>>2]&7](e,t,i,n,r,_)}return}function cc(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;n[e+53>>0]=1;do if((o[e+4>>2]|0)==(i|0)){n[e+52>>0]=1;i=o[e+16>>2]|0;if(!i){o[e+16>>2]=t;o[e+24>>2]=r;o[e+36>>2]=1;if(!((r|0)==1?(o[e+48>>2]|0)==1:0))break;n[e+54>>0]=1;break}if((i|0)!=(t|0)){o[e+36>>2]=(o[e+36>>2]|0)+1;n[e+54>>0]=1;break}i=o[e+24>>2]|0;if((i|0)==2){o[e+24>>2]=r;i=r}if((i|0)==1?(o[e+48>>2]|0)==1:0)n[e+54>>0]=1}while(0);return}function fc(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;do if((e|0)==(o[t+8>>2]|0)){if((o[t+4>>2]|0)==(i|0)?(o[t+28>>2]|0)!=1:0)o[t+28>>2]=r}else{if((e|0)!=(o[t>>2]|0)){e=o[e+8>>2]|0;rP[o[(o[e>>2]|0)+24>>2]&31](e,t,i,r,_);break}if((o[t+16>>2]|0)!=(i|0)?(o[t+20>>2]|0)!=(i|0):0){o[t+32>>2]=r;if((o[t+44>>2]|0)==4)break;n[t+52>>0]=0;n[t+53>>0]=0;e=o[e+8>>2]|0;vP[o[(o[e>>2]|0)+20>>2]&7](e,t,i,i,1,_);if(n[t+53>>0]|0)if(!(n[t+52>>0]|0)){r=1;e=13}else e=17;else{r=0;e=13}do if((e|0)==13){o[t+20>>2]=i;o[t+40>>2]=(o[t+40>>2]|0)+1;if((o[t+36>>2]|0)==1?(o[t+24>>2]|0)==2:0){n[t+54>>0]=1;if(r){e=17;break}else{r=4;break}}if(r)e=17;else r=4}while(0);if((e|0)==17)r=3;o[t+44>>2]=r;break}if((r|0)==1)o[t+32>>2]=1}while(0);return}function pc(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;do if((e|0)==(o[t+8>>2]|0)){e=o[t+16>>2]|0;if(!e){o[t+16>>2]=i;o[t+24>>2]=r;o[t+36>>2]=1;break}if((e|0)!=(i|0)){o[t+36>>2]=(o[t+36>>2]|0)+1;o[t+24>>2]=2;n[t+54>>0]=1;break}if((o[t+24>>2]|0)==2)o[t+24>>2]=r}else{e=o[e+8>>2]|0;HP[o[(o[e>>2]|0)+28>>2]&127](e,t,i,r)}while(0);return}function lc(e){e=e|0;qa(e);return}function uc(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;if((e|0)==(o[t+8>>2]|0))cc(t,i,n,r);return}function bc(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;do if((e|0)==(o[t+8>>2]|0)){if((o[t+4>>2]|0)==(i|0)?(o[t+28>>2]|0)!=1:0)o[t+28>>2]=r}else if((e|0)==(o[t>>2]|0)){if((o[t+16>>2]|0)!=(i|0)?(o[t+20>>2]|0)!=(i|0):0){o[t+32>>2]=r;o[t+20>>2]=i;o[t+40>>2]=(o[t+40>>2]|0)+1;if((o[t+36>>2]|0)==1?(o[t+24>>2]|0)==2:0)n[t+54>>0]=1;o[t+44>>2]=4;break}if((r|0)==1)o[t+32>>2]=1}while(0);return}function dc(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;do if((e|0)==(o[t+8>>2]|0)){e=o[t+16>>2]|0;if(!e){o[t+16>>2]=i;o[t+24>>2]=r;o[t+36>>2]=1;break}if((e|0)!=(i|0)){o[t+36>>2]=(o[t+36>>2]|0)+1;o[t+24>>2]=2;n[t+54>>0]=1;break}if((o[t+24>>2]|0)==2)o[t+24>>2]=r}while(0);return}function hc(e){e=e|0;return}function mc(e){e=e|0;qa(e);return}function yc(e){e=e|0;return 19717}function gc(e){e=e|0;qa(e);return}function vc(e,t,i,_,s,a){e=e|0;t=t|0;i=i|0;_=_|0;s=s|0;a=a|0;var c=0,f=0,p=0,l=0;if((e|0)==(o[t+8>>2]|0))cc(t,i,_,s);else{p=r[t+52>>1]|0;c=o[e+12>>2]|0;n[t+52>>0]=0;n[t+53>>0]=0;Cc(e+16|0,t,i,_,s,a);e:do if((c|0)>1){l=e+24|0;do{if(n[t+54>>0]|0)break e;f=r[t+52>>1]|0;if(!((f&255)<<24>>24)){if((f&65535)>=256?(o[e+8>>2]&1|0)==0:0)break e}else{if((o[t+24>>2]|0)==1)break e;if(!(o[e+8>>2]&2))break e}n[t+52>>0]=0;n[t+53>>0]=0;Cc(l,t,i,_,s,a);l=l+8|0}while(l>>>0<(e+16+(c<<3)|0)>>>0)}while(0);n[t+52>>0]=p;n[t+53>>0]=(p&65535)>>>8}return}function Cc(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;var s=0,a=0;s=o[e+4>>2]|0;if(!(s&1))a=s>>8;else a=o[(o[n>>2]|0)+(s>>8)>>2]|0;e=o[e>>2]|0;vP[o[(o[e>>2]|0)+20>>2]&7](e,t,i,n+a|0,s&2|0?r:2,_);return}function wc(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,c=0,f=0;e:do if((e|0)==(o[t+8>>2]|0)){if((o[t+4>>2]|0)==(i|0)?(o[t+28>>2]|0)!=1:0)o[t+28>>2]=r}else{if((e|0)!=(o[t>>2]|0)){a=o[e+12>>2]|0;kc(e+16|0,t,i,r,_);if((a|0)<=1)break;s=o[e+8>>2]|0;if((s&2|0)==0?(o[t+36>>2]|0)!=1:0){if(!(s&1)){s=e+24|0;while(1){if(n[t+54>>0]|0)break e;if((o[t+36>>2]|0)==1)break e;kc(s,t,i,r,_);s=s+8|0;if(s>>>0>=(e+16+(a<<3)|0)>>>0)break e}}s=e+24|0;while(1){if(n[t+54>>0]|0)break e;if((o[t+36>>2]|0)==1?(o[t+24>>2]|0)==1:0)break e;kc(s,t,i,r,_);s=s+8|0;if(s>>>0>=(e+16+(a<<3)|0)>>>0)break e}}s=e+24|0;while(1){if(n[t+54>>0]|0)break e;kc(s,t,i,r,_);s=s+8|0;if(s>>>0>=(e+16+(a<<3)|0)>>>0)break e}}if((o[t+16>>2]|0)!=(i|0)?(o[t+20>>2]|0)!=(i|0):0){o[t+32>>2]=r;if((o[t+44>>2]|0)==4)break;r=e+16+(o[e+12>>2]<<3)|0;f=0;s=0;c=e+16|0;t:while(1){if(c>>>0>=r>>>0){a=20;break}n[t+52>>0]=0;n[t+53>>0]=0;Cc(c,t,i,i,1,_);if(n[t+54>>0]|0){a=20;break}do if(n[t+53>>0]|0){if(!(n[t+52>>0]|0))if(!(o[e+8>>2]&1)){s=1;a=20;break t}else{a=f;s=1;break}if((o[t+24>>2]|0)==1){a=25;break t}if(!(o[e+8>>2]&2)){a=25;break t}else{a=1;s=1}}else a=f;while(0);f=a;c=c+8|0}do if((a|0)==20){if((!f?(o[t+20>>2]=i,o[t+40>>2]=(o[t+40>>2]|0)+1,(o[t+36>>2]|0)==1):0)?(o[t+24>>2]|0)==2:0){n[t+54>>0]=1;if(s){a=25;break}else{s=4;break}}if(s)a=25;else s=4}while(0);if((a|0)==25)s=3;o[t+44>>2]=s;break}if((r|0)==1)o[t+32>>2]=1}while(0);return}function kc(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0;_=o[e+4>>2]|0;if(!(_&1))s=_>>8;else s=o[(o[i>>2]|0)+(_>>8)>>2]|0;e=o[e>>2]|0;rP[o[(o[e>>2]|0)+24>>2]&31](e,t,i+s|0,_&2|0?n:2,r);return}function Sc(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0;e:do if((e|0)==(o[t+8>>2]|0)){_=o[t+16>>2]|0;if(!_){o[t+16>>2]=i;o[t+24>>2]=r;o[t+36>>2]=1;break}if((_|0)!=(i|0)){o[t+36>>2]=(o[t+36>>2]|0)+1;o[t+24>>2]=2;n[t+54>>0]=1;break}if((o[t+24>>2]|0)==2)o[t+24>>2]=r}else{_=o[e+12>>2]|0;Rc(e+16|0,t,i,r);if((_|0)>1){s=e+24|0;do{Rc(s,t,i,r);if(n[t+54>>0]|0)break e;s=s+8|0}while(s>>>0<(e+16+(_<<3)|0)>>>0)}}while(0);return}function Rc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0;r=o[e+4>>2]|0;if(!(r&1))_=r>>8;else _=o[(o[i>>2]|0)+(r>>8)>>2]|0;e=o[e>>2]|0;HP[o[(o[e>>2]|0)+28>>2]&127](e,t,i+_|0,r&2|0?n:2);return}function jc(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;n=p;p=p+16|0;o[n>>2]=o[i>>2];e=gP[o[(o[e>>2]|0)+16>>2]&63](e,t,n)|0;if(e)o[i>>2]=o[n>>2];p=n;return e&1|0}function Ic(e){e=e|0;if(!e)e=0;else e=(sc(e,2448)|0)!=0;return e&1|0}function Tc(){}function Dc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;n=t-n-(i>>>0>e>>>0|0)>>>0;return(L=n,e-i>>>0|0)|0}function Oc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return(L=t+n+(e+i>>>0>>>0<e>>>0|0)>>>0,e+i>>>0|0)|0}function Lc(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0;r=e+i|0;if((i|0)>=20){t=t&255;_=e&3;s=t|t<<8|t<<16|t<<24;if(_){_=e+4-_|0;while((e|0)<(_|0)){n[e>>0]=t;e=e+1|0}}while((e|0)<(r&~3|0)){o[e>>2]=s;e=e+4|0}}while((e|0)<(r|0)){n[e>>0]=t;e=e+1|0}return e-i|0}function xc(e,t,i){e=e|0;t=t|0;i=i|0;if((i|0)<32){L=t<<i|(e&(1<<i)-1<<32-i)>>>32-i;return e<<i}L=e<<i-32;return 0}function Mc(e,t,i){e=e|0;t=t|0;i=i|0;if((i|0)<32){L=t>>i;return e>>>i|(t&(1<<i)-1)<<32-i}L=(t|0)<0?-1:0;return t>>i-32|0}function Pc(e,t,i){e=e|0;t=t|0;i=i|0;if((i|0)<32){L=t>>>i;return e>>>i|(t&(1<<i)-1)<<32-i}L=0;return t>>>i-32|0}function Wc(e,t,i){e=e|0;t=t|0;i=i|0;var r=0;if((i|0)>=4096)return tt(e|0,t|0,i|0)|0;r=e|0;if((e&3)==(t&3)){while(e&3){if(!i)return r|0;n[e>>0]=n[t>>0]|0;e=e+1|0;t=t+1|0;i=i-1|0}while((i|0)>=4){o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0;i=i-4|0}}while((i|0)>0){n[e>>0]=n[t>>0]|0;e=e+1|0;t=t+1|0;i=i-1|0}return r|0}function Bc(e,t,i){e=e|0;t=t|0;i=i|0;var r=0;if((t|0)<(e|0)&(e|0)<(t+i|0)){r=e;t=t+i|0;e=e+i|0;while((i|0)>0){e=e-1|0;t=t-1|0;i=i-1|0;n[e>>0]=n[t>>0]|0}e=r}else Wc(e,t,i)|0;return e|0}function Ac(e){e=e|0;return(e&255)<<24|(e>>8&255)<<16|(e>>16&255)<<8|e>>>24|0}function Fc(){return 0}function Gc(e){e=e|0;var t=0;t=n[d+(e&255)>>0]|0;if((t|0)<8)return t|0;t=n[d+(e>>8&255)>>0]|0;if((t|0)<8)return t+8|0;t=n[d+(e>>16&255)>>0]|0;if((t|0)<8)return t+16|0;return(n[d+(e>>>24)>>0]|0)+24|0}function Ec(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;i=te(t&65535,e&65535)|0;r=(i>>>16)+(te(t&65535,e>>>16)|0)|0;n=te(t>>>16,e&65535)|0;return(L=(r>>>16)+(te(t>>>16,e>>>16)|0)+(((r&65535)+n|0)>>>16)|0,r+n<<16|i&65535|0)|0}function Vc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0;_=t>>31|((t|0)<0?-1:0)<<1;r=((t|0)<0?-1:0)>>31|((t|0)<0?-1:0)<<1;s=n>>31|((n|0)<0?-1:0)<<1;o=((n|0)<0?-1:0)>>31|((n|0)<0?-1:0)<<1;e=Dc(_^e|0,r^t|0,_|0,r|0)|0;t=L;return Dc((Uc(e,t,Dc(s^i|0,o^n|0,s|0,o|0)|0,L,0)|0)^(s^_)|0,L^(o^r)|0,s^_|0,o^r|0)|0}function Nc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,c=0;r=p;p=p+16|0;s=t>>31|((t|0)<0?-1:0)<<1;_=((t|0)<0?-1:0)>>31|((t|0)<0?-1:0)<<1;c=n>>31|((n|0)<0?-1:0)<<1;a=((n|0)<0?-1:0)>>31|((n|0)<0?-1:0)<<1;e=Dc(s^e|0,_^t|0,s|0,_|0)|0;t=L;Uc(e,t,Dc(c^i|0,a^n|0,c|0,a|0)|0,L,r|0)|0;n=Dc(o[r>>2]^s|0,o[r+4>>2]^_|0,s|0,_|0)|0;i=L;p=r;return(L=i,n)|0}function Xc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0;r=Ec(e,i)|0;o=L;return(L=(te(t,i)|0)+(te(n,e)|0)+o|o&0,r|0|0)|0}function Hc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return Uc(e,t,i,n,0)|0}function Zc(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=p;p=p+16|0;Uc(e,t,i,n,r|0)|0;p=r;return(L=o[r+4>>2]|0,o[r>>2]|0)|0}function Uc(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0;if(!t)if(!n){if(r|0){o[r>>2]=(e>>>0)%(i>>>0);o[r+4>>2]=0}n=0;r=(e>>>0)/(i>>>0)>>>0;return(L=n,r)|0}else{if(!r){n=0;r=0;return(L=n,r)|0}o[r>>2]=e|0;o[r+4>>2]=t&0;n=0;r=0;return(L=n,r)|0}do if(i){if(n|0){s=(ne(n|0)|0)-(ne(t|0)|0)|0;if(s>>>0<=31){u=s+1|0;a=e>>>((s+1|0)>>>0)&s-31>>31|t<<31-s;l=t>>>((s+1|0)>>>0)&s-31>>31;_=0;s=e<<31-s;break}if(!r){n=0;r=0;return(L=n,r)|0}o[r>>2]=e|0;o[r+4>>2]=t|t&0;n=0;r=0;return(L=n,r)|0}if(i-1&i|0){s=(ne(i|0)|0)+33-(ne(t|0)|0)|0;u=s;a=32-s-1>>31&t>>>((s-32|0)>>>0)|(t<<32-s|e>>>(s>>>0))&s-32>>31;l=s-32>>31&t>>>(s>>>0);_=e<<64-s&32-s>>31;s=(t<<64-s|e>>>((s-32|0)>>>0))&32-s>>31|e<<32-s&s-33>>31;break}if(r|0){o[r>>2]=i-1&e;o[r+4>>2]=0}if((i|0)==1){n=t|t&0;r=e|0|0;return(L=n,r)|0}else{r=Gc(i|0)|0;n=t>>>(r>>>0)|0;r=t<<32-r|e>>>(r>>>0)|0;return(L=n,r)|0}}else{if(!n){if(r|0){o[r>>2]=(t>>>0)%(i>>>0);o[r+4>>2]=0}n=0;r=(t>>>0)/(i>>>0)>>>0;return(L=n,r)|0}if(!e){if(r|0){o[r>>2]=0;o[r+4>>2]=(t>>>0)%(n>>>0)}i=0;r=(t>>>0)/(n>>>0)>>>0;return(L=i,r)|0}if(!(n-1&n)){if(r|0){o[r>>2]=e|0;o[r+4>>2]=n-1&t|t&0}i=0;r=t>>>((Gc(n|0)|0)>>>0);return(L=i,r)|0}s=(ne(n|0)|0)-(ne(t|0)|0)|0;if(s>>>0<=30){u=s+1|0;a=t<<31-s|e>>>((s+1|0)>>>0);l=t>>>((s+1|0)>>>0);_=0;s=e<<31-s;break}if(!r){n=0;r=0;return(L=n,r)|0}o[r>>2]=e|0;o[r+4>>2]=t|t&0;n=0;r=0;return(L=n,r)|0}while(0);if(!u){c=s;t=l;e=0;s=0}else{f=Oc(i|0|0,n|n&0|0,-1,-1)|0;p=L;c=s;t=l;e=u;s=0;do{d=c;c=_>>>31|c<<1;_=s|_<<1;d=a<<1|d>>>31|0;b=a>>>31|t<<1|0;Dc(f|0,p|0,d|0,b|0)|0;u=L;l=u>>31|((u|0)<0?-1:0)<<1;s=l&1;a=Dc(d|0,b|0,l&(i|0)|0,(((u|0)<0?-1:0)>>31|((u|0)<0?-1:0)<<1)&(n|n&0)|0)|0;t=L;e=e-1|0}while((e|0)!=0);e=0}if(r|0){o[r>>2]=a;o[r+4>>2]=t}b=(_|0)>>>31|c<<1|(0<<1|_>>>31)&0|e;d=(_<<1|0>>>31)&-2|s;return(L=b,d)|0}function zc(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;rP[e&31](t|0,i|0,n|0,r|0,o|0)}function Yc(e,t,i){e=e|0;t=t|0;i=+i;oP[e&31](t|0,+i)}function Kc(e,t){e=e|0;t=t|0;_P[e&255](t|0)}function Qc(e,t,i,n,r,o,_){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;o=o|0;_=_|0;sP[e&0](t|0,i|0,n|0,+r,o|0,_|0)}function qc(e,t,i){e=e|0;t=t|0;i=i|0;aP[e&127](t|0,i|0)}function Jc(e,t,i,n,r,o,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;return cP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0,f|0)|0}function $c(e,t){e=e|0;t=t|0;return fP[e&127](t|0)|0}function ef(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;pP[e&7](t|0,i|0,+n,r|0)}function tf(e,t,i,n,r,o,_){e=e|0;t=t|0;i=+i;n=+n;r=r|0;o=o|0;_=_|0;lP[e&0](t|0,+i,+n,r|0,o|0,_|0)}function nf(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=r|0;uP[e&0](t|0,+i,n|0,r|0)}function rf(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return bP[e&31](t|0,i|0,n|0,r|0)|0}function of(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;dP[e&15](t|0,+i,n|0)}function _f(e,t,i,n,r,o,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;return+hP[e&1](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0)}function sf(e,t,i,n,r,o,_,s,a,c,f,p){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;_=+_;s=+s;a=+a;c=c|0;f=f|0;p=+p;mP[e&0](t|0,i|0,n|0,r|0,+o,+_,+s,+a,c|0,f|0,+p)}function af(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;return+yP[e&15](t|0,i|0,n|0,r|0,o|0)}function cf(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return gP[e&63](t|0,i|0,n|0)|0}function ff(e,t,i,n,r,o,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;vP[e&7](t|0,i|0,n|0,r|0,o|0,_|0)}function pf(e,t,i,n){e=e|0;t=t|0;i=i|0;n=+n;return CP[e&7](t|0,i|0,+n)|0}function lf(e,t){e=e|0;t=t|0;return+wP[e&15](t|0)}function uf(e,t,i,n,r,o,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;return kP[e&3](t|0,i|0,n|0,r|0,o|0,_|0)|0}function bf(e,t,i,n,r,o,_){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;o=o|0;_=_|0;return+SP[e&3](t|0,i|0,n|0,+r,o|0,_|0)}function df(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;o=o|0;RP[e&0](t|0,i|0,+n,r|0,o|0)}function hf(e,t,i,n,r,o,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;jP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0)}function mf(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;IP[e&1](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0)}function yf(e,t,i,n,r,o,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;TP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0,f|0)}function gf(e,t,i){e=e|0;t=t|0;i=i|0;return DP[e&31](t|0,i|0)|0}function vf(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return+OP[e&15](t|0,i|0,n|0)}function Cf(e,t,i,n,r,o,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;return+LP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0,f|0)}function wf(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;xP[e&1](t|0,i|0,n|0,r|0,+o)}function kf(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;return+MP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0)}function Sf(e,t,i){e=e|0;t=t|0;i=+i;return+PP[e&1](t|0,+i)}function Rf(e,t,i,n,r,o,_,s,a,c,f,p,l){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;_=+_;s=+s;a=+a;c=+c;f=f|0;p=+p;l=l|0;WP[e&0](t|0,i|0,n|0,r|0,+o,+_,+s,+a,+c,f|0,+p,l|0)}function jf(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;o=o|0;return+BP[e&3](t|0,i|0,+n,r|0,o|0)}function If(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return+AP[e&1](t|0,i|0,n|0,r|0)}function Tf(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;return FP[e&3](t|0,i|0,n|0,r|0,o|0,_|0,s|0,a|0,c|0)|0}function Df(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;GP[e&15](t|0,i|0,n|0,+r)}function Of(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;EP[e&127](t|0,i|0,n|0)}function Lf(e){e=e|0;VP[e&3]()}function xf(e,t,i,n){e=e|0;t=t|0;i=i|0;n=+n;NP[e&7](t|0,i|0,+n)}function Mf(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=+r;return XP[e&1](t|0,+i,n|0,+r)|0}function Pf(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;HP[e&127](t|0,i|0,n|0,r|0)}function Wf(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;re(0)}function Bf(e,t){e=e|0;t=+t;re(1)}function Af(e){e=e|0;re(2)}function Ff(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;o=o|0;re(3)}function Gf(e,t){e=e|0;t=t|0;re(4)}function Ef(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;re(5);return 0}function Vf(e){e=e|0;re(6);return 0}function Nf(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;re(7)}function Xf(e,t,i,n,r,o){e=e|0;t=+t;i=+i;n=n|0;r=r|0;o=o|0;re(8)}function Hf(e,t,i,n){e=e|0;t=+t;i=i|0;n=n|0;re(9)}function Zf(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;re(10);return 0}function Uf(e,t,i){e=e|0;t=+t;i=i|0;re(11)}function zf(e,t,i,n,r,o,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;re(12);return 0}function Yf(e,t,i,n,r,o,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;o=+o;_=+_;s=+s;a=a|0;c=c|0;f=+f;re(13)}function Kf(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;re(14);return 0}function Qf(e,t,i){e=e|0;t=t|0;i=i|0;re(15);return 0}function qf(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;re(16)}function Jf(e,t,i){e=e|0;t=t|0;i=+i;re(17);return 0}function $f(e){e=e|0;re(18);return 0}function ep(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;re(19);return 0}function tp(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;o=o|0;re(20);return 0}function ip(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=r|0;re(21)}function np(e,t,i,n,r,o,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;re(22)}function rp(e,t,i,n,r,o,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;re(23)}function op(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;re(24)}function _p(e,t){e=e|0;t=t|0;re(25);return 0}function sp(e,t,i){e=e|0;t=t|0;i=i|0;re(26);return 0}function ap(e,t,i,n,r,o,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;c=c|0;re(27);return 0}function cp(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;re(28)}function fp(e,t,i,n,r,o,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;re(29);return 0}function pp(e,t){e=e|0;t=+t;re(30);return 0}function lp(e,t,i,n,r,o,_,s,a,c,f,p){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;o=+o;_=+_;s=+s;a=+a;c=c|0;f=+f;p=p|0;re(31)}function up(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=r|0;re(32);return 0}function bp(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;re(33);return 0}function dp(e,t,i,n,r,o,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;a=a|0;re(34);return 0}function hp(e,t,i,n){e=e|0;t=t|0;i=i|0;n=+n;re(35)}function mp(e,t,i){e=e|0;t=t|0;i=i|0;re(36)}function yp(){re(37)}function gp(){dt()}function vp(e,t,i){e=e|0;t=t|0;i=+i;re(38)}function Cp(e,t,i,n){e=e|0;t=+t;i=i|0;n=+n;re(39);return 0}function wp(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;re(40)}function kp(e,t){e=e|0;t=+t;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;T=p;p=p+64|0;i=o[e+128>>2]|0;if((i|0)>0){r=0;do{Sp(o[e+108>>2]|0,o[e+136>>2]|0,r,0);r=r+1|0;i=o[e+128>>2]|0}while((r|0)<(i|0))}r=o[e+108>>2]|0;g=+c[r+336>>2];v=+c[r+340>>2];_=+c[r+344>>2];_=+X(+(g*g+v*v+_*_))*3.5999999046325684;c[e+104>>2]=_;I=o[e+120>>2]|0;if(+c[r+4+(I<<2)>>2]*+c[r+336>>2]+ +c[r+20+(I<<2)>>2]*+c[r+340>>2]+ +c[r+36+(I<<2)>>2]*+c[r+344>>2]<0)c[e+104>>2]=-_;if((i|0)>0){I=0;do{j=o[e+136>>2]|0;d=j+(I*284|0)|0;Rp(r,d,0);b=j+(I*284|0)+204|0;i=j+(I*284|0)+212|0;_=+c[b>>2]+ +c[i>>2];h=j+(I*284|0)+52|0;C=j+(I*284|0)+56|0;w=j+(I*284|0)+60|0;D=j+(I*284|0)+36|0;k=j+(I*284|0)+16|0;g=_*+c[C>>2]+ +c[j+(I*284|0)+40>>2];v=_*+c[w>>2]+ +c[j+(I*284|0)+44>>2];c[j+(I*284|0)+16>>2]=+c[h>>2]*_+ +c[D>>2];S=j+(I*284|0)+20|0;c[S>>2]=g;R=j+(I*284|0)+24|0;c[R>>2]=v;c[j+(I*284|0)+28>>2]=0;c[T+32>>2]=-1;r=o[e+92>>2]|0;D=bP[o[(o[r>>2]|0)+8>>2]&31](r,D,k,T)|0;r=j+(I*284|0)+88|0;o[r>>2]=0;do if(D){_=_*+c[T+32>>2];o[d>>2]=o[T+16>>2];o[d+4>>2]=o[T+16+4>>2];o[d+8>>2]=o[T+16+8>>2];o[d+12>>2]=o[T+16+12>>2];n[j+(I*284|0)+84>>0]=1;if(!(n[19888]|0)){n[19888]=1;o[T+40>>2]=0;o[T+40+4>>2]=0;o[T+40+8>>2]=0;o[T+40+12>>2]=0;Vg(21908,0,0,0,T+40|0)}o[5528]=o[5528]|1;c[5569]=0;s=+c[5579]*0;a=+c[5580]*0;c[5574]=+c[5578]*0;c[5575]=s;c[5576]=a;c[5577]=0;o[5582]=0;o[5583]=0;o[5584]=0;o[5585]=0;a=+c[5571]*0;s=+c[5572]*0;c[5623]=+c[5570]*0;c[5624]=a;c[5625]=s;c[5626]=0;o[r>>2]=21908;_=_-+c[i>>2];i=j+(I*284|0)+32|0;c[i>>2]=_;s=+c[b>>2];a=+c[j+(I*284|0)+208>>2]*.009999999776482582;if(_<s-a){c[i>>2]=s-a;_=s-a}if(_>s+a)c[i>>2]=s+a;o[k>>2]=o[T>>2];o[k+4>>2]=o[T+4>>2];o[k+8>>2]=o[T+8>>2];o[k+12>>2]=o[T+12>>2];y=+c[d>>2];g=+c[j+(I*284|0)+4>>2];v=+c[j+(I*284|0)+8>>2];m=y*+c[h>>2]+g*+c[C>>2]+v*+c[w>>2];i=o[e+108>>2]|0;u=+c[k>>2]-+c[i+52>>2];l=+c[S>>2]-+c[i+56>>2];_=+c[R>>2]-+c[i+60>>2];s=+c[i+356>>2];a=+c[i+360>>2];f=+c[i+352>>2];if(!(m>=-.10000000149011612)){c[j+(I*284|0)+272>>2]=-1/m*(y*(s*_-l*a+ +c[i+336>>2])+g*(u*a-_*f+ +c[i+340>>2])+v*(l*f-u*s+ +c[i+344>>2]));c[j+(I*284|0)+268>>2]=-1/m;break}else{c[j+(I*284|0)+272>>2]=0;c[j+(I*284|0)+268>>2]=10;break}}else{o[j+(I*284|0)+32>>2]=o[b>>2];c[j+(I*284|0)+272>>2]=0;g=-+c[C>>2];v=-+c[w>>2];c[d>>2]=-+c[h>>2];c[j+(I*284|0)+4>>2]=g;c[j+(I*284|0)+8>>2]=v;c[j+(I*284|0)+12>>2]=0;c[j+(I*284|0)+268>>2]=1}while(0);I=I+1|0;i=o[e+128>>2]|0;r=o[e+108>>2]|0}while((I|0)<(i|0));s=1/+c[r+368>>2];if((i|0)>0){r=0;do{i=o[e+136>>2]|0;if(!(n[i+(r*284|0)+84>>0]|0))_=0;else{_=+c[i+(r*284|0)+272>>2];_=s*(+c[i+(r*284|0)+216>>2]*(+c[i+(r*284|0)+204>>2]-+c[i+(r*284|0)+32>>2])*+c[i+(r*284|0)+268>>2]-_*+c[(_<0?i+(r*284|0)+220|0:i+(r*284|0)+224|0)>>2]);_=_<0?0:_}c[i+(r*284|0)+276>>2]=_;r=r+1|0;i=o[e+128>>2]|0}while((r|0)<(i|0));if((i|0)>0){i=0;do{I=o[e+136>>2]|0;y=+c[I+(i*284|0)+276>>2];v=+c[I+(i*284|0)+248>>2];y=y>v?v:y;v=y*+c[I+(i*284|0)+4>>2]*t;g=y*+c[I+(i*284|0)+8>>2]*t;c[T+40>>2]=+c[I+(i*284|0)>>2]*y*t;c[T+40+4>>2]=v;c[T+40+8>>2]=g;c[T+40+12>>2]=0;D=o[e+108>>2]|0;g=+c[I+(i*284|0)+20>>2]-+c[D+56>>2];v=+c[I+(i*284|0)+24>>2]-+c[D+60>>2];c[T>>2]=+c[I+(i*284|0)+16>>2]-+c[D+52>>2];c[T+4>>2]=g;c[T+8>>2]=v;c[T+12>>2]=0;VI(D,T+40|0,T);i=i+1|0}while((i|0)<(o[e+128>>2]|0))}}}oP[o[(o[e>>2]|0)+20>>2]&31](e,t);r=o[e+128>>2]|0;if((r|0)<=0){p=T;return}b=o[e+136>>2]|0;d=o[e+108>>2]|0;h=0;do{_=+c[b+(h*284|0)+36>>2]-+c[d+52>>2];s=+c[b+(h*284|0)+40>>2]-+c[d+56>>2];a=+c[b+(h*284|0)+44>>2]-+c[d+60>>2];f=+c[d+356>>2];l=+c[d+360>>2];u=+c[d+352>>2];if(!(n[b+(h*284|0)+84>>0]|0)){i=b+(h*284|0)+240|0;_=+c[i>>2];D=b+(h*284|0)+236|0;c[D>>2]=_+ +c[D>>2]}else{i=o[e+120>>2]|0;L=+c[d+4+(i<<2)>>2];m=+c[d+20+(i<<2)>>2];g=+c[d+36+(i<<2)>>2];O=+c[b+(h*284|0)>>2];y=+c[b+(h*284|0)+4>>2];v=+c[b+(h*284|0)+8>>2];_=((s*u-_*f+ +c[d+344>>2])*(g-v*(L*O+m*y+g*v))+((f*a-s*l+ +c[d+336>>2])*(L-O*(L*O+m*y+g*v))+(_*l-a*u+ +c[d+340>>2])*(m-y*(L*O+m*y+g*v))))*t/+c[b+(h*284|0)+212>>2];i=b+(h*284|0)+240|0;c[i>>2]=_;D=b+(h*284|0)+236|0;c[D>>2]=+c[D>>2]+_}c[i>>2]=_*.9900000095367432;h=h+1|0}while((h|0)!=(r|0));p=T;return}function Sp(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;Rp(e,t+(i*284|0)|0,n);l=+c[t+(i*284|0)+52>>2];_=+c[t+(i*284|0)+56>>2];h=+c[t+(i*284|0)+60>>2];x=+c[t+(i*284|0)+76>>2];k=+c[t+(i*284|0)+72>>2];R=+c[t+(i*284|0)+68>>2];w=1/+X(+((k*-l-R*-_)*(k*-l-R*-_)+((x*-_-k*-h)*(x*-_-k*-h)+(R*-h-x*-l)*(R*-h-x*-l))));C=(x*-_-k*-h)*w;v=w*(R*-h-x*-l);w=w*(k*-l-R*-_);r=+c[t+(i*284|0)+232>>2]*.5;f=+U(+r)/+X(+(l*l+_*_+h*h));r=+Z(+r);p=2/(r*r+(f*-h*(f*-h)+(f*-l*(f*-l)+f*-_*(f*-_))));O=1-(f*-_*(f*-_*p)+f*-h*(f*-h*p));D=f*-l*(f*-_*p)-r*(f*-h*p);L=f*-l*(f*-h*p)+r*(f*-_*p);I=f*-l*(f*-_*p)+r*(f*-h*p);j=1-(f*-l*(f*-l*p)+f*-h*(f*-h*p));T=f*-_*(f*-h*p)-r*(f*-l*p);a=f*-l*(f*-h*p)-r*(f*-_*p);r=f*-_*(f*-h*p)+r*(f*-l*p);p=1-(f*-l*(f*-l*p)+f*-_*(f*-_*p));f=+c[t+(i*284|0)+236>>2]*-.5;S=+U(+f)/+X(+(x*x+(k*k+R*R)));f=+Z(+f);m=2/(f*f+(x*S*(x*S)+(R*S*(R*S)+k*S*(k*S))));u=1-(k*S*(k*S*m)+x*S*(x*S*m));s=R*S*(k*S*m)-f*(x*S*m);g=R*S*(x*S*m)+f*(k*S*m);b=R*S*(k*S*m)+f*(x*S*m);o=1-(R*S*(R*S*m)+x*S*(x*S*m));y=k*S*(x*S*m)-f*(R*S*m);d=R*S*(x*S*m)-f*(k*S*m);f=k*S*(x*S*m)+f*(R*S*m);m=1-(R*S*(R*S*m)+k*S*(k*S*m));S=+c[t+(i*284|0)+68>>2];k=+c[t+(i*284|0)+72>>2];R=+c[t+(i*284|0)+76>>2];c[t+(i*284|0)+92>>2]=R*(O*g+D*y+L*m)+(S*(L*d+(D*b+O*u))+k*(L*f+(O*s+D*o)));c[t+(i*284|0)+96>>2]=w*(O*g+D*y+L*m)+(C*(L*d+(D*b+O*u))+v*(L*f+(O*s+D*o)));c[t+(i*284|0)+100>>2]=(O*g+D*y+L*m)*-h+((L*d+(D*b+O*u))*-l+(L*f+(O*s+D*o))*-_);c[t+(i*284|0)+104>>2]=0;c[t+(i*284|0)+108>>2]=R*(I*g+j*y+T*m)+(S*(T*d+(j*b+I*u))+k*(T*f+(I*s+j*o)));c[t+(i*284|0)+112>>2]=w*(I*g+j*y+T*m)+(C*(T*d+(j*b+I*u))+v*(T*f+(I*s+j*o)));c[t+(i*284|0)+116>>2]=(I*g+j*y+T*m)*-h+((T*d+(j*b+I*u))*-l+(T*f+(I*s+j*o))*-_);c[t+(i*284|0)+120>>2]=0;c[t+(i*284|0)+124>>2]=R*(a*g+r*y+p*m)+(S*(p*d+(r*b+a*u))+k*(p*f+(a*s+r*o)));c[t+(i*284|0)+128>>2]=w*(a*g+r*y+p*m)+(C*(p*d+(r*b+a*u))+v*(p*f+(a*s+r*o)));c[t+(i*284|0)+132>>2]=(a*g+r*y+p*m)*-h+((p*d+(r*b+a*u))*-l+(p*f+(a*s+r*o))*-_);c[t+(i*284|0)+136>>2]=0;_=+c[t+(i*284|0)+32>>2];o=_*+c[t+(i*284|0)+56>>2]+ +c[t+(i*284|0)+40>>2];r=_*+c[t+(i*284|0)+60>>2]+ +c[t+(i*284|0)+44>>2];c[t+(i*284|0)+140>>2]=+c[t+(i*284|0)+52>>2]*_+ +c[t+(i*284|0)+36>>2];c[t+(i*284|0)+144>>2]=o;c[t+(i*284|0)+148>>2]=r;c[t+(i*284|0)+152>>2]=0;return}function Rp(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;_=p;p=p+64|0;n[t+84>>0]=0;o[_>>2]=o[e+4>>2];o[_+4>>2]=o[e+4+4>>2];o[_+8>>2]=o[e+4+8>>2];o[_+12>>2]=o[e+4+12>>2];o[_+16>>2]=o[e+20>>2];o[_+16+4>>2]=o[e+20+4>>2];o[_+16+8>>2]=o[e+20+8>>2];o[_+16+12>>2]=o[e+20+12>>2];o[_+32>>2]=o[e+36>>2];o[_+32+4>>2]=o[e+36+4>>2];o[_+32+8>>2]=o[e+36+8>>2];o[_+32+12>>2]=o[e+36+12>>2];o[_+48>>2]=o[e+52>>2];o[_+48+4>>2]=o[e+52+4>>2];o[_+48+8>>2]=o[e+52+8>>2];o[_+48+12>>2]=o[e+52+12>>2];if(i?(r=o[e+504>>2]|0,r|0):0)aP[o[(o[r>>2]|0)+8>>2]&127](r,_);w=+c[t+156>>2];v=+c[_>>2];C=+c[t+160>>2];g=+c[_+4>>2];b=+c[t+164>>2];y=+c[_+8>>2];m=+c[_+16>>2];h=+c[_+20>>2];d=+c[_+24>>2];u=+c[_+32>>2];f=+c[_+36>>2];s=+c[_+40>>2];l=w*m+C*h+b*d+ +c[_+52>>2];a=w*u+C*f+b*s+ +c[_+56>>2];c[t+36>>2]=w*v+C*g+b*y+ +c[_+48>>2];c[t+40>>2]=l;c[t+44>>2]=a;c[t+48>>2]=0;\na=+c[t+172>>2];l=+c[t+176>>2];b=+c[t+180>>2];c[t+52>>2]=v*a+g*l+y*b;c[t+56>>2]=a*m+l*h+b*d;c[t+60>>2]=a*u+l*f+b*s;c[t+64>>2]=0;b=+c[t+188>>2];l=+c[t+192>>2];a=+c[t+196>>2];c[t+68>>2]=v*b+g*l+y*a;c[t+72>>2]=b*m+l*h+a*d;c[t+76>>2]=b*u+l*f+a*s;c[t+80>>2]=0;p=_;return}function jp(e,t){e=e|0;t=+t;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0;m=p;p=p+144|0;b=o[e+128>>2]|0;if(!b){p=m;return}a=o[e+8>>2]|0;if((a|0)<(b|0)){if((o[e+12>>2]|0)<(b|0)){o[5637]=(o[5637]|0)+1;i=Qa((b<<4|3)+16|0)|0;if(!i)s=0;else{o[(i+4+15&-16)+-4>>2]=i;s=i+4+15&-16}i=o[e+8>>2]|0;if((i|0)>0){_=0;do{u=s+(_<<4)|0;y=(o[e+16>>2]|0)+(_<<4)|0;o[u>>2]=o[y>>2];o[u+4>>2]=o[y+4>>2];o[u+8>>2]=o[y+8>>2];o[u+12>>2]=o[y+12>>2];_=_+1|0}while((_|0)!=(i|0))}i=o[e+16>>2]|0;if(i|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=s;o[e+12>>2]=b;_=e+16|0}else _=e+16|0;i=a;do{y=(o[_>>2]|0)+(i<<4)|0;o[y>>2]=o[m+80>>2];o[y+4>>2]=o[m+80+4>>2];o[y+8>>2]=o[m+80+8>>2];o[y+12>>2]=o[m+80+12>>2];i=i+1|0}while((i|0)!=(b|0))}o[e+8>>2]=b;a=o[e+28>>2]|0;if((a|0)<(b|0)){if((o[e+32>>2]|0)<(b|0)){o[5637]=(o[5637]|0)+1;i=Qa((b<<4|3)+16|0)|0;if(!i)s=0;else{o[(i+4+15&-16)+-4>>2]=i;s=i+4+15&-16}i=o[e+28>>2]|0;if((i|0)>0){_=0;do{y=s+(_<<4)|0;u=(o[e+36>>2]|0)+(_<<4)|0;o[y>>2]=o[u>>2];o[y+4>>2]=o[u+4>>2];o[y+8>>2]=o[u+8>>2];o[y+12>>2]=o[u+12>>2];_=_+1|0}while((_|0)!=(i|0))}i=o[e+36>>2]|0;if(i|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=s;o[e+32>>2]=b;_=e+36|0}else _=e+36|0;i=a;do{y=(o[_>>2]|0)+(i<<4)|0;o[y>>2]=o[m+64>>2];o[y+4>>2]=o[m+64+4>>2];o[y+8>>2]=o[m+64+8>>2];o[y+12>>2]=o[m+64+12>>2];i=i+1|0}while((i|0)!=(b|0))}o[e+28>>2]=b;u=o[e+48>>2]|0;if((u|0)<(b|0)){do if((o[e+52>>2]|0)<(b|0)){o[5637]=(o[5637]|0)+1;i=Qa((b<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+48>>2]|0;s=o[e+56>>2]|0;if((_|0)<=0){if(!s){n[e+60>>0]=1;o[e+56>>2]=i;o[e+52>>2]=b;_=b<<2;break}}else{a=0;do{o[i+(a<<2)>>2]=o[s+(a<<2)>>2];a=a+1|0}while((a|0)!=(_|0))}if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}n[e+60>>0]=1;o[e+56>>2]=i;o[e+52>>2]=b;_=b<<2}else{_=b<<2;i=o[e+56>>2]|0}while(0);Lc(i+(u<<2)|0,0,_-(u<<2)|0)|0}o[e+48>>2]=b;u=o[e+68>>2]|0;if((u|0)<(b|0)){do if((o[e+72>>2]|0)<(b|0)){o[5637]=(o[5637]|0)+1;i=Qa((b<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+68>>2]|0;s=o[e+76>>2]|0;if((_|0)<=0){if(!s){n[e+80>>0]=1;o[e+76>>2]=i;o[e+72>>2]=b;_=b<<2;break}}else{a=0;do{o[i+(a<<2)>>2]=o[s+(a<<2)>>2];a=a+1|0}while((a|0)!=(_|0))}if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}n[e+80>>0]=1;o[e+76>>2]=i;o[e+72>>2]=b;_=b<<2}else{_=b<<2;i=o[e+76>>2]|0}while(0);Lc(i+(u<<2)|0,0,_-(u<<2)|0)|0}o[e+68>>2]=b;i=o[e+128>>2]|0;if((i|0)<=0){p=m;return}_=o[e+76>>2]|0;s=o[e+56>>2]|0;a=0;do{c[_+(a<<2)>>2]=0;c[s+(a<<2)>>2]=0;a=a+1|0}while((a|0)!=(i|0));a=0;do{_=o[e+136>>2]|0;s=o[_+(a*284|0)+88>>2]|0;if(s){i=_+(a*284|0)+92|0;o[m+96>>2]=o[i>>2];o[m+96+4>>2]=o[i+4>>2];o[m+96+8>>2]=o[i+8>>2];o[m+96+12>>2]=o[i+12>>2];i=_+(a*284|0)+108|0;o[m+96+16>>2]=o[i>>2];o[m+96+16+4>>2]=o[i+4>>2];o[m+96+16+8>>2]=o[i+8>>2];o[m+96+16+12>>2]=o[i+12>>2];i=_+(a*284|0)+124|0;o[m+96+32>>2]=o[i>>2];o[m+96+32+4>>2]=o[i+4>>2];o[m+96+32+8>>2]=o[i+8>>2];o[m+96+32+12>>2]=o[i+12>>2];i=o[e+36>>2]|0;k=o[e+112>>2]|0;b=o[m+96+16+(k<<2)>>2]|0;S=o[m+96+32+(k<<2)>>2]|0;o[i+(a<<4)>>2]=o[m+96+(k<<2)>>2];o[i+(a<<4)+4>>2]=b;o[i+(a<<4)+8>>2]=S;c[i+(a<<4)+12>>2]=0;i=o[e+36>>2]|0;S=i+(a<<4)|0;R=+c[S>>2];b=_+(a*284|0)|0;r=+c[b>>2];k=i+(a<<4)+4|0;w=+c[k>>2];u=_+(a*284|0)+4|0;f=+c[u>>2];i=i+(a<<4)+8|0;g=+c[i>>2];y=_+(a*284|0)+8|0;C=+c[y>>2];l=R-r*(R*r+w*f+g*C);v=w-f*(R*r+w*f+g*C);C=g-C*(R*r+w*f+g*C);g=1/+X(+(l*l+v*v+C*C));c[S>>2]=l*g;c[k>>2]=v*g;c[i>>2]=C*g;i=o[e+16>>2]|0;f=+c[u>>2];w=+c[y>>2];r=+c[b>>2];c[i+(a<<4)>>2]=f*(C*g)-w*(v*g);c[i+(a<<4)+4>>2]=w*(l*g)-C*g*r;c[i+(a<<4)+8>>2]=v*g*r-f*(l*g);c[i+(a<<4)+12>>2]=0;i=o[e+16>>2]|0;b=i+(a<<4)|0;g=+c[b>>2];y=i+(a<<4)+4|0;l=+c[y>>2];i=i+(a<<4)+8|0;f=+c[i>>2];r=1/+X(+(g*g+l*l+f*f));c[b>>2]=g*r;c[y>>2]=l*r;c[i>>2]=f*r;i=o[e+108>>2]|0;y=o[e+36>>2]|0;r=+c[y+(a<<4)>>2];f=+c[y+(a<<4)+4>>2];l=+c[y+(a<<4)+8>>2];if(r*r+f*f+l*l>1.100000023841858)r=0;else{T=+c[_+(a*284|0)+16>>2];x=T-+c[i+52>>2];O=+c[_+(a*284|0)+20>>2];P=O-+c[i+56>>2];W=+c[_+(a*284|0)+24>>2];A=W-+c[i+60>>2];T=T-+c[s+52>>2];O=O-+c[s+56>>2];W=W-+c[s+60>>2];L=+c[i+356>>2];F=+c[i+360>>2];M=+c[i+352>>2];I=+c[s+356>>2];B=+c[s+360>>2];D=+c[s+352>>2];j=(l*P-f*A)*+c[i+4>>2]+(r*A-l*x)*+c[i+20>>2]+(f*x-r*P)*+c[i+36>>2];g=(l*P-f*A)*+c[i+8>>2]+(r*A-l*x)*+c[i+24>>2]+(f*x-r*P)*+c[i+40>>2];v=(l*P-f*A)*+c[i+12>>2]+(r*A-l*x)*+c[i+28>>2]+(f*x-r*P)*+c[i+44>>2];C=(O*-l-W*-f)*+c[s+4>>2]+(W*-r-T*-l)*+c[s+20>>2]+(T*-f-O*-r)*+c[s+36>>2];w=(O*-l-W*-f)*+c[s+8>>2]+(W*-r-T*-l)*+c[s+24>>2]+(T*-f-O*-r)*+c[s+40>>2];R=(O*-l-W*-f)*+c[s+12>>2]+(W*-r-T*-l)*+c[s+28>>2]+(T*-f-O*-r)*+c[s+44>>2];r=(r*(A*L-P*F+ +c[i+336>>2]-(W*I-O*B+ +c[s+336>>2]))+f*(+c[i+340>>2]+(x*F-A*M)-(+c[s+340>>2]+(T*B-W*D)))+l*(P*M-x*L+ +c[i+344>>2]-(O*D-T*I+ +c[s+344>>2])))*-.20000000298023224*(1/(+c[s+368>>2]+(+c[i+368>>2]+(j*(j*+c[i+420>>2])+g*(g*+c[i+424>>2])+v*(v*+c[i+428>>2])))+(C*(C*+c[s+420>>2])+w*(w*+c[s+424>>2])+R*(R*+c[s+428>>2]))))}c[(o[e+76>>2]|0)+(a<<2)>>2]=r;i=o[e+128>>2]|0}a=a+1|0}while((a|0)<(i|0));if((i|0)<=0){p=m;return}_=o[e+136>>2]|0;s=0;b=0;while(1){i=o[_+(b*284|0)+88>>2]|0;if(i){r=+c[_+(b*284|0)+252>>2];if(r!=0){a=_;r=r*t}else{F=+c[_+(b*284|0)+256>>2];F=F==0?0:F;a=o[e+108>>2]|0;S=o[e+16>>2]|0;x=+c[_+(b*284|0)+16>>2];O=+c[_+(b*284|0)+20>>2];j=+c[_+(b*284|0)+24>>2];w=+c[S+(b<<4)>>2];D=+c[S+(b<<4)+4>>2];r=+c[S+(b<<4)+8>>2];E=x-+c[a+52>>2];V=O-+c[a+56>>2];f=j-+c[a+60>>2];l=+c[a+288>>2]*(V*r-f*D)+ +c[a+304>>2]*(f*w-E*r)+(E*D-V*w)*+c[a+320>>2];N=(V*r-f*D)*+c[a+292>>2]+(f*w-E*r)*+c[a+308>>2]+(E*D-V*w)*+c[a+324>>2];G=(V*r-f*D)*+c[a+296>>2]+(f*w-E*r)*+c[a+312>>2]+(E*D-V*w)*+c[a+328>>2];B=x-+c[i+52>>2];P=O-+c[i+56>>2];T=j-+c[i+60>>2];C=(D*B-w*P)*+c[i+320>>2]+(+c[i+288>>2]*(r*P-D*T)+ +c[i+304>>2]*(w*T-r*B));g=(r*P-D*T)*+c[i+292>>2]+(w*T-r*B)*+c[i+308>>2]+(D*B-w*P)*+c[i+324>>2];v=(r*P-D*T)*+c[i+296>>2]+(w*T-r*B)*+c[i+312>>2]+(D*B-w*P)*+c[i+328>>2];x=x-+c[a+52>>2];O=O-+c[a+56>>2];j=j-+c[a+60>>2];M=+c[a+356>>2];R=+c[a+360>>2];L=+c[a+352>>2];A=+c[i+356>>2];I=+c[i+360>>2];W=+c[i+352>>2];r=-(1/(+c[a+368>>2]+(r*(V*l-E*N)+(w*(f*N-V*G)+D*(E*G-f*l)))+(+c[i+368>>2]+(r*(P*C-B*g)+(w*(T*g-P*v)+D*(B*v-T*C)))))*((j*M-O*R+ +c[a+336>>2]-(T*A-P*I+ +c[i+336>>2]))*w+(+c[a+340>>2]+(x*R-j*L)-(+c[i+340>>2]+(B*I-T*W)))*D+(O*L-x*M+ +c[a+344>>2]-(P*W-B*A+ +c[i+344>>2]))*r));r=F<r?F:r;a=o[e+136>>2]|0;r=r<-F?-F:r}u=o[e+56>>2]|0;S=u+(b<<2)|0;c[S>>2]=0;i=a+(b*284|0)+280|0;c[i>>2]=1;l=+c[_+(b*284|0)+276>>2]*t*+c[_+(b*284|0)+228>>2];c[S>>2]=r;r=r*.5;f=+c[(o[e+76>>2]|0)+(b<<2)>>2];if(r*r+f*f>l*l){N=l/+X(+(r*r+f*f));c[i>>2]=N*+c[i>>2];i=1}else i=s}else{u=o[e+56>>2]|0;c[u+(b<<2)>>2]=0;c[_+(b*284|0)+280>>2]=1;a=_;i=s}b=b+1|0;s=o[e+128>>2]|0;if((b|0)>=(s|0))break;else{_=a;s=i}}if(i){if((s|0)<=0){p=m;return}i=o[e+76>>2]|0;_=0;do{if(+c[i+(_<<2)>>2]!=0?(d=a+(_*284|0)+280|0,h=+c[d>>2],h<1):0){S=u+(_<<2)|0;c[S>>2]=h*+c[S>>2];S=(o[e+76>>2]|0)+(_<<2)|0;c[S>>2]=+c[d>>2]*+c[S>>2]}_=_+1|0}while((_|0)!=(s|0))}if((s|0)<=0){p=m;return}s=u;i=0;while(1){_=o[e+108>>2]|0;u=a+(i*284|0)+16|0;f=+c[u>>2]-+c[_+52>>2];b=a+(i*284|0)+20|0;l=+c[b>>2]-+c[_+56>>2];d=a+(i*284|0)+24|0;t=+c[d>>2]-+c[_+60>>2];c[m+96>>2]=f;c[m+96+4>>2]=l;c[m+96+8>>2]=t;c[m+96+12>>2]=0;r=+c[s+(i<<2)>>2];if(r!=0){S=o[e+16>>2]|0;V=r*+c[S+(i<<4)+4>>2];N=r*+c[S+(i<<4)+8>>2];c[m+16>>2]=r*+c[S+(i<<4)>>2];c[m+16+4>>2]=V;c[m+16+8>>2]=N;c[m+16+12>>2]=0;VI(_,m+16|0,m+96|0)}r=+c[(o[e+76>>2]|0)+(i<<2)>>2];if(r!=0){S=o[(o[e+136>>2]|0)+(i*284|0)+88>>2]|0;V=+c[b>>2]-+c[S+56>>2];E=+c[d>>2]-+c[S+60>>2];c[m+48>>2]=+c[u>>2]-+c[S+52>>2];c[m+48+4>>2]=V;c[m+48+8>>2]=E;c[m+48+12>>2]=0;k=o[e+36>>2]|0;E=+c[k+(i<<4)>>2]*r;V=r*+c[k+(i<<4)+4>>2];N=r*+c[k+(i<<4)+8>>2];c[m+32>>2]=E;c[m+32+4>>2]=V;c[m+32+8>>2]=N;c[m+32+12>>2]=0;k=o[e+108>>2]|0;y=o[e+116>>2]|0;B=+c[k+4+(y<<2)>>2];A=+c[k+20+(y<<2)>>2];F=+c[k+36+(y<<2)>>2];G=(B*f+A*l+F*t)*(1-+c[a+(i*284|0)+244>>2]);c[m+96>>2]=f-B*G;c[m+96+4>>2]=l-A*G;c[m+96+8>>2]=t-F*G;VI(k,m+32|0,m+96|0);c[m>>2]=-E;c[m+4>>2]=-V;c[m+8>>2]=-N;c[m+12>>2]=0;VI(S,m,m+48|0)}i=i+1|0;if((i|0)>=(o[e+128>>2]|0))break;a=o[e+136>>2]|0;s=o[e+56>>2]|0}p=m;return}function Ip(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;o[e+112>>2]=t;o[e+116>>2]=i;o[e+120>>2]=n;return}function Tp(e){e=e|0;return}function Dp(e){e=e|0;qa(e);return}function Op(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var _=0,s=0,a=0,f=0,l=0;_=p;p=p+96|0;c[_+4>>2]=1;o[_+8>>2]=0;r[_+12>>1]=1;r[_+14>>1]=-1;o[_+16>>2]=0;o[_>>2]=8008;o[_+20>>2]=o[t>>2];o[_+20+4>>2]=o[t+4>>2];o[_+20+8>>2]=o[t+8>>2];o[_+20+12>>2]=o[t+12>>2];o[_+36>>2]=o[i>>2];o[_+36+4>>2]=o[i+4>>2];o[_+36+8>>2]=o[i+8>>2];o[_+36+12>>2]=o[i+12>>2];e=o[e+4>>2]|0;HP[o[(o[e>>2]|0)+32>>2]&127](e,t,i,_);t=o[_+8>>2]|0;if(!t){n=0;p=_;return n|0}if(!(o[t+236>>2]&2)){n=0;p=_;return n|0}if(o[t+204>>2]&4|0){n=0;p=_;return n|0}o[n>>2]=o[_+68>>2];o[n+4>>2]=o[_+68+4>>2];o[n+8>>2]=o[_+68+8>>2];o[n+12>>2]=o[_+68+12>>2];o[n+16>>2]=o[_+52>>2];o[n+16+4>>2]=o[_+52+4>>2];o[n+16+8>>2]=o[_+52+8>>2];o[n+16+12>>2]=o[_+52+12>>2];l=+c[n+16>>2];f=+c[n+20>>2];a=+c[n+24>>2];s=1/+X(+(l*l+f*f+a*a));c[n+16>>2]=l*s;c[n+20>>2]=f*s;c[n+24>>2]=a*s;o[n+32>>2]=o[_+4>>2];n=t;p=_;return n|0}function Lp(e){e=e|0;qa(e);return}function xp(e,t){e=e|0;t=t|0;t=o[t+4>>2]|0;if(!((r[e+14>>1]&(t&65535))<<16>>16)){e=0;return e|0}e=(t>>>16&65535&r[e+12>>1])<<16>>16!=0;return e|0}function Mp(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;o[e+4>>2]=o[t+24>>2];n=o[t>>2]|0;o[e+8>>2]=n;if(i){o[e+52>>2]=o[t+8>>2];o[e+52+4>>2]=o[t+8+4>>2];o[e+52+8>>2]=o[t+8+8>>2];o[e+52+12>>2]=o[t+8+12>>2]}else{f=+c[t+8>>2];a=+c[t+12>>2];s=+c[t+16>>2];_=f*+c[n+20>>2]+a*+c[n+24>>2]+s*+c[n+28>>2];r=f*+c[n+36>>2]+a*+c[n+40>>2]+s*+c[n+44>>2];c[e+52>>2]=+c[n+4>>2]*f+ +c[n+8>>2]*a+ +c[n+12>>2]*s;c[e+56>>2]=_;c[e+60>>2]=r;c[e+64>>2]=0}f=+c[t+24>>2];c[e+68>>2]=(1-f)*+c[e+20>>2]+f*+c[e+36>>2];c[e+72>>2]=(1-f)*+c[e+24>>2]+f*+c[e+40>>2];c[e+76>>2]=(1-f)*+c[e+28>>2]+f*+c[e+44>>2];return+ +c[t+24>>2]}function Pp(e,t,i,r,_,s,a,f){e=e|0;t=t|0;i=i|0;r=r|0;_=+_;s=+s;a=a|0;f=f|0;var l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;w=p;p=p+288|0;o[w+208>>2]=o[t>>2];o[w+208+4>>2]=o[t+4>>2];o[w+208+8>>2]=o[t+8>>2];o[w+208+12>>2]=o[t+12>>2];u=w+208+16|0;o[u>>2]=o[i>>2];o[u+4>>2]=o[i+4>>2];o[u+8>>2]=o[i+8>>2];o[u+12>>2]=o[i+12>>2];b=w+208+32|0;o[b>>2]=o[r>>2];o[b+4>>2]=o[r+4>>2];o[b+8>>2]=o[r+8>>2];o[b+12>>2]=o[r+12>>2];m=o[a>>2]|0;g=o[a+4>>2]|0;v=o[a+8>>2]|0;C=o[a+16>>2]|0;h=o[a+12>>2]|0;d=o[a+20>>2]|0;o[w>>2]=o[w+208>>2];o[w+4>>2]=o[w+208+4>>2];o[w+8>>2]=o[w+208+8>>2];o[w+12>>2]=o[w+208+12>>2];o[w+16>>2]=o[u>>2];o[w+16+4>>2]=o[u+4>>2];o[w+16+8>>2]=o[u+8>>2];o[w+16+12>>2]=o[u+12>>2];o[w+32>>2]=o[b>>2];o[w+32+4>>2]=o[b+4>>2];o[w+32+8>>2]=o[b+8>>2];o[w+32+12>>2]=o[b+12>>2];r=o[e+128>>2]|0;if((r|0)==(o[e+132>>2]|0)?(y=r|0?r<<1:1,(r|0)<(y|0)):0){if(!y)t=0;else{o[5637]=(o[5637]|0)+1;t=Qa((y*284|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}r=o[e+128>>2]|0}if((r|0)>0){a=0;do{i=o[e+136>>2]|0;l=t+(a*284|0)|0;u=i+(a*284|0)|0;b=l+92|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));l=t+(a*284|0)+92|0;u=i+(a*284|0)+92|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];o[l+12>>2]=o[u+12>>2];l=t+(a*284|0)+108|0;u=i+(a*284|0)+108|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];o[l+12>>2]=o[u+12>>2];l=t+(a*284|0)+124|0;u=i+(a*284|0)+124|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];o[l+12>>2]=o[u+12>>2];l=t+(a*284|0)+140|0;u=i+(a*284|0)+140|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];o[l+12>>2]=o[u+12>>2];l=t+(a*284|0)+156|0;u=i+(a*284|0)+156|0;b=l+128|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));a=a+1|0}while((a|0)!=(r|0))}r=o[e+136>>2]|0;if(r|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=t;o[e+132>>2]=y;r=o[e+128>>2]|0}t=o[e+136>>2]|0;l=t+(r*284|0)|0;u=w+48|0;b=l+92|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));l=t+(r*284|0)+92|0;o[l>>2]=o[w+192>>2];o[l+4>>2]=o[w+192+4>>2];o[l+8>>2]=o[w+192+8>>2];o[l+12>>2]=o[w+192+12>>2];l=t+(r*284|0)+108|0;o[l>>2]=o[w+176>>2];o[l+4>>2]=o[w+176+4>>2];o[l+8>>2]=o[w+176+8>>2];o[l+12>>2]=o[w+176+12>>2];l=t+(r*284|0)+124|0;o[l>>2]=o[w+160>>2];o[l+4>>2]=o[w+160+4>>2];o[l+8>>2]=o[w+160+8>>2];o[l+12>>2]=o[w+160+12>>2];l=t+(r*284|0)+140|0;o[l>>2]=o[w+144>>2];o[l+4>>2]=o[w+144+4>>2];o[l+8>>2]=o[w+144+8>>2];o[l+12>>2]=o[w+144+12>>2];t=t+(r*284|0)+156|0;l=t;u=w;b=l+48|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));c[t+48>>2]=_;o[t+52>>2]=h;c[t+56>>2]=s;o[t+60>>2]=m;o[t+64>>2]=g;o[t+68>>2]=v;o[t+72>>2]=C;c[t+76>>2]=0;c[t+80>>2]=0;c[t+84>>2]=0;c[t+88>>2]=.10000000149011612;o[t+92>>2]=d;c[t+96>>2]=0;c[t+100>>2]=0;n[t+104>>0]=f&1;l=t+105|0;u=w+256|0;b=l+23|0;do{n[l>>0]=n[u>>0]|0;l=l+1|0;u=u+1|0}while((l|0)<(b|0));f=o[e+128>>2]|0;o[e+128>>2]=f+1;f=(o[e+136>>2]|0)+(f*284|0)|0;Rp(o[e+108>>2]|0,f,0);Sp(o[e+108>>2]|0,o[e+136>>2]|0,(o[e+128>>2]|0)+-1|0,0);p=w;return f|0}function Wp(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0;n=o[e+56>>2]|0;if(!n){n=o[e+52>>2]|0;if(!n){o[5637]=(o[5637]|0)+1;n=Qa(31)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}r=o[e+60>>2]|0;o[n+4>>2]=r;_=n+8|0;o[_>>2]=0;o[5637]=(o[5637]|0)+1;r=Qa((r*24|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[n>>2]=r;o[_>>2]=o[e+48>>2];o[e+48>>2]=n}else o[e+52>>2]=o[n+8>>2];s=o[n+4>>2]|0;n=o[n>>2]|0;if((s|0)>0){r=0;_=n;do{r=r+1|0;a=_;_=_+24|0;o[a>>2]=(r|0)<(s|0)?_:0}while((r|0)!=(s|0));a=n}else a=n}else a=n;o[e+56>>2]=o[a>>2];o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;n=o[e+56>>2]|0;if(!n){n=o[e+52>>2]|0;if(!n){o[5637]=(o[5637]|0)+1;n=Qa(31)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}r=o[e+60>>2]|0;o[n+4>>2]=r;_=n+8|0;o[_>>2]=0;o[5637]=(o[5637]|0)+1;r=Qa((r*24|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[n>>2]=r;o[_>>2]=o[e+48>>2];o[e+48>>2]=n}else o[e+52>>2]=o[n+8>>2];s=o[n+4>>2]|0;n=o[n>>2]|0;if((s|0)>0){r=0;_=n;do{r=r+1|0;c=_;_=_+24|0;o[c>>2]=(r|0)<(s|0)?_:0}while((r|0)!=(s|0))}}o[e+56>>2]=o[n>>2];o[n>>2]=0;o[n+4>>2]=0;o[n+8>>2]=0;o[a+8>>2]=n;o[n+8>>2]=a;c=o[e+100>>2]|0;o[a+20>>2]=c;o[n+20>>2]=c;o[a+12>>2]=i;o[n+12>>2]=t;o[a+16>>2]=0;o[n+16>>2]=0;n=o[e+116>>2]|0;o[e+116>>2]=n+1;if((n|0)<(o[e+120>>2]|0))return a|0;o[e+120>>2]=n+1;return a|0}function Bp(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0;B=p;p=p+144|0;e:do switch(i-t|0){case 0:{o[n>>2]=0;o[n+4>>2]=0;o[n+8>>2]=0;o[n+12>>2]=0;p=B;return}case 2:{r=o[(o[e+92>>2]|0)+(t<<2)>>2]|0;c=o[r+88>>2]|0;f=o[r+200>>2]|0;a=o[r+92>>2]|0;_=o[r+204>>2]|0;if((c|0)==(f|0)){if((a|0)==(_|0))if((o[r+96>>2]|0)==(o[r+208>>2]|0))break e;else _=a;if((a|0)==(_|0)){P=(o[r+96>>2]|0)>(o[r+208>>2]|0);_=P?r+112|0:r;o[_>>2]=_;o[_+4>>2]=_;o[n>>2]=_;o[n+4>>2]=_;o[n+8>>2]=_;o[n+12>>2]=_;r=P?r:r+112|0}else{s=_;_=0;W=9}}else{s=_;_=(a|0)==(_|0);W=9}do if((W|0)==9){o[r>>2]=r+112;o[r+4>>2]=r+112;o[r+112>>2]=r;o[r+116>>2]=r;W=(a|0)<(s|0);o[n>>2]=(c|0)<(f|0)|(c|0)==(f|0)&W?r:r+112|0;o[n+4>>2]=(c|0)<(f|0)|(c|0)==(f|0)&W?r+112|0:r;if(W|(c|0)<(f|0)&_){o[n+8>>2]=r;o[n+12>>2]=r+112;_=r;r=r+112|0;break}else{o[n+8>>2]=r+112;o[n+12>>2]=r;_=r;r=r+112|0;break}}while(0);e=Wp(e,_,r)|0;o[e>>2]=e;o[e+4>>2]=e;o[_+8>>2]=e;e=o[e+8>>2]|0;o[e>>2]=e;o[e+4>>2]=e;o[r+8>>2]=e;p=B;return}case 1:{r=o[(o[e+92>>2]|0)+(t<<2)>>2]|0;break}default:{u=((i-t|0)/2|0)+t|0;s=o[e+92>>2]|0;l=o[s+(u+-1<<2)>>2]|0;a=o[l+88>>2]|0;c=o[l+92>>2]|0;l=o[l+96>>2]|0;t:do if((u|0)<(i|0)){r=u;do{_=o[s+(r<<2)>>2]|0;if((o[_+88>>2]|0)!=(a|0))break t;if((o[_+92>>2]|0)!=(c|0))break t;if((o[_+96>>2]|0)!=(l|0))break t;r=r+1|0}while((r|0)<(i|0))}else r=u;while(0);Bp(e,t,u,n);o[B+96>>2]=0;o[B+96+4>>2]=0;o[B+96+8>>2]=0;o[B+96+12>>2]=0;Bp(e,r,i,B+96|0);l=o[B+96+4>>2]|0;t:do if(l|0){j=o[n+4>>2]|0;if(!j){o[n>>2]=o[B+96>>2];o[n+4>>2]=o[B+96+4>>2];o[n+8>>2]=o[B+96+8>>2];o[n+12>>2]=o[B+96+12>>2];break}o[e+100>>2]=(o[e+100>>2]|0)+-1;s=o[n+12>>2]|0;c=o[B+96+8>>2]|0;a=o[s+88>>2]|0;i:do if((a|0)==(o[c+88>>2]|0)?(f=o[s+92>>2]|0,(f|0)==(o[c+92>>2]|0)):0){u=o[c+4>>2]|0;if((u|0)==(c|0)){r=o[c+8>>2]|0;if(r){c=o[r+12>>2]|0;f=o[c+92>>2]|0;a=o[c+88>>2]|0}_=s;x=c;r=c;u=a+1|0;i=o[c+96>>2]|0;break}s=o[c>>2]|0;o[u>>2]=s;o[s+4>>2]=u;n:do if((c|0)==(o[B+96>>2]|0)){r=o[s+88>>2]|0;_=o[u+88>>2]|0;do if((r|0)>=(_|0)){if((r|0)==(_|0)?(o[s+92>>2]|0)<(o[u+92>>2]|0):0)break;o[B+96>>2]=u;break n}while(0);o[B+96>>2]=s}while(0);if((c|0)==(l|0)){r=o[s+88>>2]|0;_=o[u+88>>2]|0;do if((r|0)<=(_|0)){if((r|0)==(_|0)?(o[s+92>>2]|0)>(o[u+92>>2]|0):0)break;o[B+96+4>>2]=u;s=u;W=39;break i}while(0);o[B+96+4>>2]=s;W=39}else{s=l;W=39}}else{s=l;W=39}while(0);if((W|0)==39){w=o[n>>2]|0;k=o[B+96>>2]|0;S=0;R=1;t=j;_=0;r=s;a=0;while(1){c=o[r+88>>2]|0;i=o[t+88>>2]|0;f=te(c-i|0,R)|0;i:do if((f|0)<=0){if((f|0)<0){C=(S|0)!=0;u=o[t+92>>2]|0;v=o[r+92>>2]|0;l=f;f=t;while(1){m=o[(C?r+4|0:r)>>2]|0;y=(m|0)==(r|0);g=r+88|0;h=l;while(1){l=f+88|0;b=v-u|0;if(!y?(I=o[m+88>>2]|0,T=te(I-c|0,R)|0,D=o[m+92>>2]|0,O=D-v|0,(O|0)>-1):0){if(!T)break;if((T|0)<0?(te(O,h)|0)<=(te(T,b)|0):0)break}d=o[(C?f+4|0:f)>>2]|0;if((d|0)==(f|0))break i;x=o[d+88>>2]|0;i=te(x-(o[l>>2]|0)|0,R)|0;t=o[d+92>>2]|0;l=t-u|0;c=o[g>>2]|0;u=h;h=te(c-x|0,R)|0;if(!((l|0)>0&(h|0)<0))break i;if(!i){u=t;f=d;continue}if((i|0)>=0)break i;if((te(l,u)|0)>=(te(i,b)|0))break i;else{u=t;f=d}}c=I;v=D;l=te(I-(o[l>>2]|0)|0,R)|0;r=m}}c=o[t+92>>2]|0;u=(S|0)!=0;n:do if(u){l=t;while(1){f=o[l>>2]|0;if((f|0)==(t|0))break n;if((o[f+88>>2]|0)!=(i|0))break n;x=c;c=o[f+92>>2]|0;if((c|0)>(x|0))break;else l=f}}else{l=t;while(1){f=o[l+4>>2]|0;if((f|0)==(t|0))break n;if((o[f+88>>2]|0)!=(i|0))break n;x=c;c=o[f+92>>2]|0;if((c|0)>(x|0))break;else l=f}}while(0);f=o[r+92>>2]|0;if(u){u=r;while(1){c=o[u+4>>2]|0;if((c|0)==(r|0)){f=l;r=u;break i}if((o[c+88>>2]|0)!=(i|0)){f=l;r=u;break i}x=f;f=o[c+92>>2]|0;if((f|0)<(x|0)){f=l;r=u;break}else u=c}}else{u=r;while(1){c=o[u>>2]|0;if((c|0)==(r|0)){f=l;r=u;break i}if((o[c+88>>2]|0)!=(i|0)){f=l;r=u;break i}x=f;f=o[c+92>>2]|0;if((f|0)<(x|0)){f=l;r=u;break}else u=c}}}else{v=(S|0)!=0;y=i;g=o[r+92>>2]|0;m=f;while(1){h=r+88|0;l=o[t+92>>2]|0;c=g-l|0;f=o[(v?t:t+4|0)>>2]|0;n:do if((f|0)!=(t|0))if(v){d=y;b=l;i=m;while(1){l=d;d=o[f+88>>2]|0;l=te(d-l|0,R)|0;u=b;b=o[f+92>>2]|0;u=b-u|0;if((u|0)>=1){b=c;f=t;break n}if(l|0){if((l|0)>=0){b=c;f=t;break n}if((te(u,i)|0)>(te(l,c)|0)){b=c;f=t;break n}}u=te((o[h>>2]|0)-d|0,R)|0;c=g-b|0;l=o[f>>2]|0;if((l|0)==(f|0)){b=c;i=u;break}else{t=f;f=l;i=u}}}else{d=y;b=l;i=m;while(1){l=d;d=o[f+88>>2]|0;l=te(d-l|0,R)|0;u=b;b=o[f+92>>2]|0;u=b-u|0;if((u|0)>=1){b=c;f=t;break n}if(l|0){if((l|0)>=0){b=c;f=t;break n}if((te(u,i)|0)>(te(l,c)|0)){b=c;f=t;break n}}u=te((o[h>>2]|0)-d|0,R)|0;c=g-b|0;l=o[f+4>>2]|0;if((l|0)==(f|0)){b=c;i=u;break}else{t=f;f=l;i=u}}}else{b=c;i=m;f=t}while(0);u=o[(v?r:r+4|0)>>2]|0;if((u|0)==(r|0))break i;m=o[u+88>>2]|0;c=te(m-(o[h>>2]|0)|0,R)|0;l=g;g=o[u+92>>2]|0;l=g-l|0;y=o[f+88>>2]|0;m=te(m-y|0,R)|0;if(!((l|0)<0&(m|0)>0))break i;if(!c){t=f;r=u;continue}if((c|0)>=0)break i;if((te(l,i)|0)>=(te(c,b)|0))break;else{t=f;r=u}}}while(0);c=(S|0)==0;a=c?r:a;_=c?f:_;r=c?k:r;t=c?w:f;S=S+1|0;if((S|0)==2)break;else R=c?-1:R}o[t+4>>2]=r;o[r>>2]=t;o[_>>2]=a;o[a+4>>2]=_;if((o[k+88>>2]|0)<(o[w+88>>2]|0))o[n>>2]=k;if((o[s+88>>2]|0)>=(o[j+88>>2]|0))o[n+4>>2]=s;o[n+12>>2]=o[B+96+12>>2];s=_;O=a;y=o[a+88>>2]|0;i=o[_+88>>2]|0;g=o[a+92>>2]|0;v=o[_+92>>2]|0;C=o[a+96>>2]|0;t=o[_+96>>2]|0;w=((g-v|0)<0)<<31>>31;k=0-(y-i)|0;S=Dc(0,0,k|0,((k|0)<0)<<31>>31|0)|0;S=Xc(C-t|0,((C-t|0)<0)<<31>>31|0,S|0,L|0)|0;R=L;j=Xc(C-t|0,((C-t|0)<0)<<31>>31|0,g-v|0,w|0)|0;I=L;b=Xc(y-i|0,((y-i|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;D=L;T=Xc(g-v|0,w|0,g-v|0,w|0)|0;T=Dc(b|0,D|0,T|0,L|0)|0;D=L;b=o[_+8>>2]|0;o[B+120>>2]=0;if(!b)d=0;else{d=Dc(0,0,g-v|0,w|0)|0;h=L;r=0;m=b;while(1){l=o[m+12>>2]|0;c=o[l+88>>2]|0;f=o[l+92>>2]|0;l=o[l+96>>2]|0;u=Xc(f-v|0,((f-v|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;x=L;n=Xc(c-i|0,((c-i|0)<0)<<31>>31|0,d|0,h|0)|0;i:do if((u|0)==(n|0)&(x|0)==(L|0)?(n=Xc(c-i|0,((c-i|0)<0)<<31>>31|0,S|0,R|0)|0,u=L,x=Xc(f-v|0,((f-v|0)<0)<<31>>31|0,j|0,I|0)|0,u=Oc(x|0,L|0,n|0,u|0)|0,n=L,x=Xc(l-t|0,((l-t|0)<0)<<31>>31|0,T|0,D|0)|0,x=Oc(u|0,n|0,x|0,L|0)|0,n=L,(n|0)>0|(n|0)==0&x>>>0>0):0){do if(r|0){u=(o[r+4>>2]|0)==(m|0);if((o[r>>2]|0)!=(m|0))if(u)break;else break i;if(!u)break i;n=o[r+12>>2]|0;A=o[(o[m+8>>2]|0)+12>>2]|0;x=o[A+88>>2]|0;u=o[A+92>>2]|0;A=o[A+96>>2]|0;F=(o[n+96>>2]|0)-A|0;u=(te(l-A|0,(o[n+92>>2]|0)-u|0)|0)-(te(F,f-u|0)|0)|0;x=(te(F,c-x|0)|0)-(te(l-A|0,(o[n+88>>2]|0)-x|0)|0)|0;u=Xc(u|0,((u|0)<0)<<31>>31|0,g-v|0,w|0)|0;n=L;x=Xc(x|0,((x|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;x=Oc(u|0,n|0,x|0,L|0)|0;n=L;if((n|0)>0|(n|0)==0&x>>>0>0)break i}while(0);o[B+120>>2]=m;r=m}while(0);m=o[m>>2]|0;if((m|0)==(b|0)){d=r;break}}}u=o[a+8>>2]|0;o[B+72>>2]=0;if(!u)r=0;else{i=Dc(0,0,g-v|0,w|0)|0;t=L;r=0;b=u;do{l=o[b+12>>2]|0;c=o[l+88>>2]|0;f=o[l+92>>2]|0;l=o[l+96>>2]|0;x=Xc(f-g|0,((f-g|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;F=L;A=Xc(c-y|0,((c-y|0)<0)<<31>>31|0,i|0,t|0)|0;do if((x|0)==(A|0)&(F|0)==(L|0)?(A=Xc(c-y|0,((c-y|0)<0)<<31>>31|0,S|0,R|0)|0,x=L,F=Xc(f-g|0,((f-g|0)<0)<<31>>31|0,j|0,I|0)|0,x=Oc(F|0,L|0,A|0,x|0)|0,A=L,F=Xc(l-C|0,((l-C|0)<0)<<31>>31|0,T|0,D|0)|0,F=Oc(x|0,A|0,F|0,L|0)|0,A=L,(A|0)>0|(A|0)==0&F>>>0>0):0){if(r|0){if((o[r>>2]|0)!=(b|0))break;if((o[r+4>>2]|0)==(b|0)?(A=o[r+12>>2]|0,n=o[(o[b+8>>2]|0)+12>>2]|0,F=o[n+88>>2]|0,x=o[n+92>>2]|0,n=o[n+96>>2]|0,m=(o[A+96>>2]|0)-n|0,x=(te(l-n|0,(o[A+92>>2]|0)-x|0)|0)-(te(m,f-x|0)|0)|0,F=(te(m,c-F|0)|0)-(te(l-n|0,(o[A+88>>2]|0)-F|0)|0)|0,x=Xc(x|0,((x|0)<0)<<31>>31|0,g-v|0,w|0)|0,A=L,F=Xc(F|0,((F|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0,F=Oc(x|0,A|0,F|0,L|0)|0,A=L,!((A|0)>0|(A|0)==0&F>>>0>0)):0)break}o[B+72>>2]=b;r=b}while(0);b=o[b>>2]|0}while((b|0)!=(u|0))}if((d|0)!=0|(r|0)!=0){Ap(e,_,a,B+120|0,B+72|0);r=o[B+120>>2]|0;if(r){s=o[r+12>>2]|0;_=s}r=o[B+72>>2]|0;if(!r)r=O;else{r=o[r+12>>2]|0;a=r}}else r=O;x=a;u=o[a+88>>2]|0;i=(o[a+96>>2]|0)+1|0;f=o[a+92>>2]|0}w=x;k=_;a=0;T=0;n=1;c=0;l=0;S=0;j=0;I=u;b=i;O=0;u=0;while(1){R=k+88|0;v=(o[w+88>>2]|0)-(o[R>>2]|0)|0;F=k+92|0;D=(o[w+92>>2]|0)-(o[F>>2]|0)|0;g=k+96|0;m=(o[w+96>>2]|0)-(o[g>>2]|0)|0;o[B+120>>2]=v;o[B+120+4>>2]=D;o[B+120+8>>2]=m;o[B+120+12>>2]=-1;R=I-(o[R>>2]|0)|0;F=f-(o[F>>2]|0)|0;g=b-(o[g>>2]|0)|0;y=(te(m,F)|0)-(te(D,g)|0)|0;g=(te(v,g)|0)-(te(m,R)|0)|0;F=(te(D,R)|0)-(te(v,F)|0)|0;o[B+72>>2]=y;o[B+72+4>>2]=((y|0)<0)<<31>>31;o[B+72+8>>2]=g;o[B+72+8+4>>2]=((g|0)<0)<<31>>31;o[B+72+16>>2]=F;o[B+72+16+4>>2]=((F|0)<0)<<31>>31;R=Xc(D|0,((D|0)<0)<<31>>31|0,F|0,((F|0)<0)<<31>>31|0)|0;A=L;C=Xc(m|0,((m|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;C=Dc(R|0,A|0,C|0,L|0)|0;A=L;m=Xc(y|0,((y|0)<0)<<31>>31|0,m|0,((m|0)<0)<<31>>31|0)|0;R=L;F=Xc(v|0,((v|0)<0)<<31>>31|0,F|0,((F|0)<0)<<31>>31|0)|0;F=Dc(m|0,R|0,F|0,L|0)|0;R=L;g=Xc(v|0,((v|0)<0)<<31>>31|0,g|0,((g|0)<0)<<31>>31|0)|0;v=L;D=Xc(y|0,((y|0)<0)<<31>>31|0,D|0,((D|0)<0)<<31>>31|0)|0;D=Dc(g|0,v|0,D|0,L|0)|0;o[B+48>>2]=C;o[B+48+4>>2]=A;o[B+48+8>>2]=F;o[B+48+8+4>>2]=R;o[B+48+16>>2]=D;o[B+48+16+4>>2]=L;o[B+24>>2]=0;o[B+24+4>>2]=0;o[B+24+8>>2]=0;o[B+24+12>>2]=0;o[B+24+16>>2]=0;D=Fp(e,0,k,B+120|0,B+72|0,B+48|0,B+24|0)|0;o[B>>2]=0;o[B+4>>2]=0;o[B+8>>2]=0;o[B+12>>2]=0;o[B+16>>2]=0;R=Fp(e,1,w,B+120|0,B+72|0,B+48|0,B)|0;do if((D|0)!=0|(R|0)!=0){i=D|0?-1:1;do if((D|0)!=0&(R|0)!=0){C=o[B+24+16>>2]|0;i=o[B+16>>2]|0;if((C|0)!=(i|0)){v=C-i|0;break}if(!C)v=0;else{F=o[B+24>>2]|0;g=o[B+24+4>>2]|0;d=o[B+8>>2]|0;G=o[B+8+4>>2]|0;t=Xc(d|0,0,F|0,0)|0;i=L;F=Xc(G|0,0,F|0,0)|0;A=L;d=Xc(d|0,0,g|0,0)|0;h=L;g=Xc(G|0,0,g|0,0)|0;G=L;d=Oc(F|0,0,d|0,0)|0;F=L;G=Oc(A|0,0,g|0,G|0)|0;h=Oc(G|0,L|0,h|0,0)|0;F=Oc(h|0,L|0,F|0,0)|0;h=L;i=Oc(0,d|0,t|0,i|0)|0;t=L;d=Oc(F|0,h|0,(t>>>0<d>>>0|(t|0)==(d|0)&i>>>0<0)&1|0,0)|0;h=L;F=o[B+24+8>>2]|0;G=o[B+24+8+4>>2]|0;g=o[B>>2]|0;A=o[B+4>>2]|0;y=Xc(g|0,0,F|0,0)|0;m=L;F=Xc(A|0,0,F|0,0)|0;E=L;g=Xc(g|0,0,G|0,0)|0;v=L;G=Xc(A|0,0,G|0,0)|0;A=L;g=Oc(F|0,0,g|0,0)|0;F=L;A=Oc(E|0,0,G|0,A|0)|0;v=Oc(A|0,L|0,v|0,0)|0;F=Oc(v|0,L|0,F|0,0)|0;v=L;m=Oc(0,g|0,y|0,m|0)|0;y=L;g=Oc(F|0,v|0,(y>>>0<g>>>0|(y|0)==(g|0)&m>>>0<0)&1|0,0)|0;v=L;if(!(h>>>0<v>>>0|(h|0)==(v|0)&d>>>0<g>>>0))if(!(h>>>0>v>>>0|(h|0)==(v|0)&d>>>0>g>>>0))if(t>>>0<y>>>0|(t|0)==(y|0)&i>>>0<m>>>0)i=-1;else i=(t>>>0>y>>>0|(t|0)==(y|0)&i>>>0>m>>>0)&1;else i=1;else i=-1;v=te(i,C)|0}}else v=i;while(0);do if(!n)if((v|0)>-1)if((o[B+16>>2]|0)<0&((o[B+8>>2]|0)==0?(o[B+8+4>>2]|0)==0:0)){t=S;g=j;break}else{W=136;break}else if((o[B+24+16>>2]|0)<0&((o[B+24+8>>2]|0)==0?(o[B+24+8+4>>2]|0)==0:0)){t=S;g=j;break}else{W=136;break}else W=136;while(0);if((W|0)==136){W=0;t=Wp(e,k,w)|0;if(!S)c=t;else o[S+4>>2]=t;o[t>>2]=S;i=o[t+8>>2]|0;if(!j)l=i;else o[j>>2]=i;o[i+4>>2]=j;g=i}o[B+116>>2]=D;o[B+112>>2]=R;if(!v){Ap(e,s,r,B+116|0,B+112|0);y=o[B+112>>2]|0}else y=R;if((v|0)>-1&(y|0)!=0){m=(u|0)!=0;if(m?(M=o[u>>2]|0,(M|0)!=(R|0)):0){d=M;do{h=d;d=o[d>>2]|0;b=o[h+8>>2]|0;i=o[b+12>>2]|0;if((d|0)==(h|0))f=0;else{o[d+4>>2]=o[h+4>>2];o[o[h+4>>2]>>2]=d;f=d}o[i+8>>2]=f;f=o[b>>2]|0;i=o[h+12>>2]|0;if((f|0)==(b|0))f=0;else{o[f+4>>2]=o[b+4>>2];o[o[b+4>>2]>>2]=f}o[i+8>>2]=f;o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0;o[h+16>>2]=0;o[h>>2]=o[e+56>>2];o[e+56>>2]=h;o[b>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;o[b+16>>2]=0;o[b>>2]=o[e+56>>2];o[e+56>>2]=b;o[e+116>>2]=(o[e+116>>2]|0)+-1}while((d|0)!=(R|0))}if(!g){u=y;f=m?T:R}else{if(m){o[u>>2]=l;i=R+4|0;f=T}else{u=o[R+4>>2]|0;o[u>>2]=l;i=R+4|0;f=l}o[l+4>>2]=u;o[g>>2]=R;o[i>>2]=g;u=o[B+112>>2]|0;l=0}S=r;r=o[u+12>>2]|0;T=f;g=0;i=o[S+88>>2]|0;b=o[S+96>>2]|0;f=o[S+92>>2]|0;S=o[u+8>>2]|0}else{i=I;S=u}y=o[B+116>>2]|0;if((v|0)<1&(y|0)!=0){m=(O|0)!=0;if(m?(P=o[O+4>>2]|0,(P|0)!=(D|0)):0){d=P;do{u=d+4|0;h=d;d=o[u>>2]|0;f=o[h>>2]|0;b=o[h+8>>2]|0;i=o[b+12>>2]|0;if((f|0)==(h|0))f=0;else{o[f+4>>2]=d;o[o[u>>2]>>2]=f}o[i+8>>2]=f;f=o[b>>2]|0;u=o[h+12>>2]|0;if((f|0)==(b|0))f=0;else{o[f+4>>2]=o[b+4>>2];o[o[b+4>>2]>>2]=f}o[u+8>>2]=f;o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0;o[h+16>>2]=0;o[h>>2]=o[e+56>>2];o[e+56>>2]=h;o[b>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;o[b+16>>2]=0;o[b>>2]=o[e+56>>2];o[e+56>>2]=b;o[e+116>>2]=(o[e+116>>2]|0)+-1}while((d|0)!=(D|0))}if(!t){u=y;a=m?a:D}else{if(m){o[O+4>>2]=c;u=D;f=O}else{f=o[D>>2]|0;o[f+4>>2]=c;u=D;a=c}o[c>>2]=f;o[u>>2]=t;o[t+4>>2]=D;u=o[B+116>>2]|0;c=0}f=s;s=o[u+12>>2]|0;v=0;w=o[f+88>>2]|0;k=o[f+96>>2]|0;f=o[f+92>>2]|0;C=o[u+8>>2]|0}else{v=t;w=i;k=b;C=O}if((s|0)==(_|0)&(r|0)==(x|0)){if(C){m=C+4|0;u=o[m>>2]|0;if((u|0)!=(a|0))do{t=u+4|0;h=u;u=o[t>>2]|0;i=o[h>>2]|0;d=o[h+8>>2]|0;b=o[d+12>>2]|0;if((i|0)==(h|0))i=0;else{o[i+4>>2]=u;o[o[t>>2]>>2]=i}o[b+8>>2]=i;i=o[d>>2]|0;t=o[h+12>>2]|0;if((i|0)==(d|0))i=0;else{o[i+4>>2]=o[d+4>>2];o[o[d+4>>2]>>2]=i}o[t+8>>2]=i;o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0;o[h+16>>2]=0;o[h>>2]=o[e+56>>2];o[e+56>>2]=h;o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d+16>>2]=0;o[d>>2]=o[e+56>>2];o[e+56>>2]=d;o[e+116>>2]=(o[e+116>>2]|0)+-1}while((u|0)!=(a|0));if(v|0){o[c>>2]=C;o[m>>2]=c;o[a>>2]=v;o[v+4>>2]=a}}else{o[c>>2]=v;o[v+4>>2]=c;o[s+8>>2]=v}if(!S){o[g>>2]=l;o[l+4>>2]=g;o[x+8>>2]=g;y=0;h=T;m=n;d=v;t=w;b=k;i=C;u=0;break}u=o[S>>2]|0;if((u|0)!=(T|0))do{d=u;u=o[u>>2]|0;b=o[d+8>>2]|0;t=o[b+12>>2]|0;if((u|0)==(d|0))i=0;else{o[u+4>>2]=o[d+4>>2];o[o[d+4>>2]>>2]=u;i=u}o[t+8>>2]=i;i=o[b>>2]|0;t=o[d+12>>2]|0;if((i|0)==(b|0))i=0;else{o[i+4>>2]=o[b+4>>2];o[o[b+4>>2]>>2]=i}o[t+8>>2]=i;o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d+16>>2]=0;o[d>>2]=o[e+56>>2];o[e+56>>2]=d;o[b>>2]=0;o[b+4>>2]=0;o[b+8>>2]=0;o[b+12>>2]=0;o[b+16>>2]=0;o[b>>2]=o[e+56>>2];o[e+56>>2]=b;o[e+116>>2]=(o[e+116>>2]|0)+-1}while((u|0)!=(T|0));if(!g){y=0;h=T;m=n;d=v;g=0;t=w;b=k;i=C;u=S}else{o[S>>2]=l;o[l+4>>2]=S;o[g>>2]=T;o[T+4>>2]=g;y=0;h=T;m=n;d=v;t=w;b=k;i=C;u=S}}else{y=1;h=T;m=0;d=v;t=w;b=k;i=C;u=S}}else{y=Wp(e,k,w)|0;o[y>>2]=y;o[y+4>>2]=y;o[k+8>>2]=y;y=o[y+8>>2]|0;o[y>>2]=y;o[y+4>>2]=y;o[r+8>>2]=y;y=0;h=T;m=n;d=S;g=j;t=I;i=O}while(0);if(!y)break t;w=r;k=s;T=h;n=m;S=d;j=g;I=t;O=i}}while(0);p=B;return}}while(0);o[r+8>>2]=0;o[r>>2]=r;o[r+4>>2]=r;o[n>>2]=r;o[n+4>>2]=r;o[n+8>>2]=r;o[n+12>>2]=r;p=B;return}function Ap(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0;U=o[n>>2]|0;oe=o[r>>2]|0;if(U|0)_=o[U+12>>2]|0;else _=t;a=o[_+88>>2]|0;c=o[_+92>>2]|0;s=o[_+96>>2]|0;if(!oe)_=i;else _=o[oe+12>>2]|0;y=o[_+88>>2]|0;u=o[_+92>>2]|0;d=o[_+96>>2]|0;J=o[t+88>>2]|0;ne=(o[i+88>>2]|0)-J|0;v=o[t+92>>2]|0;re=(o[i+92>>2]|0)-v|0;t=o[t+96>>2]|0;K=(o[i+96>>2]|0)-t|0;q=o[(U|0?U:oe)+12>>2]|0;$=(o[q+88>>2]|0)-J|0;Z=(o[q+92>>2]|0)-v|0;q=(o[q+96>>2]|0)-t|0;Q=(te(Z,K)|0)-(te(q,re)|0)|0;q=(te(q,ne)|0)-(te($,K)|0)|0;Z=(te($,re)|0)-(te(Z,ne)|0)|0;J=Xc(Q|0,((Q|0)<0)<<31>>31|0,J|0,((J|0)<0)<<31>>31|0)|0;$=L;v=Xc(q|0,((q|0)<0)<<31>>31|0,v|0,((v|0)<0)<<31>>31|0)|0;g=L;t=Xc(Z|0,((Z|0)<0)<<31>>31|0,t|0,((t|0)<0)<<31>>31|0)|0;t=Oc(J|0,$|0,t|0,L|0)|0;g=Oc(t|0,L|0,v|0,g|0)|0;v=L;t=Xc(Z|0,((Z|0)<0)<<31>>31|0,re|0,((re|0)<0)<<31>>31|0)|0;$=L;J=Xc(q|0,((q|0)<0)<<31>>31|0,K|0,((K|0)<0)<<31>>31|0)|0;J=Dc(t|0,$|0,J|0,L|0)|0;$=L;t=Xc(Q|0,((Q|0)<0)<<31>>31|0,K|0,((K|0)<0)<<31>>31|0)|0;ie=L;ee=Xc(Z|0,((Z|0)<0)<<31>>31|0,ne|0,((ne|0)<0)<<31>>31|0)|0;ee=Dc(t|0,ie|0,ee|0,L|0)|0;ie=L;t=Xc(q|0,((q|0)<0)<<31>>31|0,ne|0,((ne|0)<0)<<31>>31|0)|0;Y=L;z=Xc(Q|0,((Q|0)<0)<<31>>31|0,re|0,((re|0)<0)<<31>>31|0)|0;z=Dc(t|0,Y|0,z|0,L|0)|0;Y=L;t=Xc(J|0,$|0,a|0,((a|0)<0)<<31>>31|0)|0;H=L;_=Xc(ee|0,ie|0,c|0,((c|0)<0)<<31>>31|0)|0;H=Oc(_|0,L|0,t|0,H|0)|0;t=L;_=Xc(z|0,Y|0,s|0,((s|0)<0)<<31>>31|0)|0;_=Oc(H|0,t|0,_|0,L|0)|0;t=L;if((U|0)!=0?(o[U+12>>2]|0)!=0:0){m=U;h=a;b=c;l=s;while(1){m=o[(o[m+8>>2]|0)+4>>2]|0;c=m+12|0;a=o[c>>2]|0;i=o[a+88>>2]|0;X=Xc(i|0,((i|0)<0)<<31>>31|0,Q|0,((Q|0)<0)<<31>>31|0)|0;N=L;s=o[a+92>>2]|0;H=Xc(s|0,((s|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;N=Oc(H|0,L|0,X|0,N|0)|0;X=L;a=o[a+96>>2]|0;H=Xc(a|0,((a|0)<0)<<31>>31|0,Z|0,((Z|0)<0)<<31>>31|0)|0;H=Oc(N|0,X|0,H|0,L|0)|0;X=L;if((X|0)<(v|0)|(X|0)==(v|0)&H>>>0<g>>>0){i=h;a=b;s=l;break}if((o[m+20>>2]|0)==(o[e+100>>2]|0)){i=h;a=b;s=l;break}p=Xc(i|0,((i|0)<0)<<31>>31|0,J|0,$|0)|0;H=L;f=Xc(s|0,((s|0)<0)<<31>>31|0,ee|0,ie|0)|0;H=Oc(f|0,L|0,p|0,H|0)|0;p=L;f=Xc(a|0,((a|0)<0)<<31>>31|0,z|0,Y|0)|0;f=Oc(H|0,p|0,f|0,L|0)|0;p=L;if(!((p|0)>(t|0)|(p|0)==(t|0)&f>>>0>_>>>0)){i=h;a=b;s=l;break}o[n>>2]=m;H=o[c>>2]|0;i=o[H+88>>2]|0;a=o[H+92>>2]|0;s=o[H+96>>2]|0;if(!H){_=f;t=p;break}else{t=p;_=f;h=i;b=a;l=s}}b=o[r>>2]|0;H=a}else{b=oe;i=a;H=c}c=Xc(J|0,$|0,y|0,((y|0)<0)<<31>>31|0)|0;X=L;a=Xc(ee|0,ie|0,u|0,((u|0)<0)<<31>>31|0)|0;X=Oc(a|0,L|0,c|0,X|0)|0;c=L;a=Xc(z|0,Y|0,d|0,((d|0)<0)<<31>>31|0)|0;a=Oc(X|0,c|0,a|0,L|0)|0;c=L;e:do if(b)if(!(o[b+12>>2]|0))f=y;else{m=b;h=y;while(1){b=o[o[m+8>>2]>>2]|0;l=o[b+12>>2]|0;f=o[l+88>>2]|0;N=Xc(f|0,((f|0)<0)<<31>>31|0,Q|0,((Q|0)<0)<<31>>31|0)|0;V=L;p=o[l+92>>2]|0;X=Xc(p|0,((p|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;V=Oc(X|0,L|0,N|0,V|0)|0;N=L;l=o[l+96>>2]|0;X=Xc(l|0,((l|0)<0)<<31>>31|0,Z|0,((Z|0)<0)<<31>>31|0)|0;X=Oc(V|0,N|0,X|0,L|0)|0;N=L;if((N|0)<(v|0)|(N|0)==(v|0)&X>>>0<g>>>0){b=m;f=h;break e}if((o[b+20>>2]|0)==(o[e+100>>2]|0)){b=m;f=h;break e}X=Xc(f|0,((f|0)<0)<<31>>31|0,J|0,$|0)|0;N=L;p=Xc(p|0,((p|0)<0)<<31>>31|0,ee|0,ie|0)|0;N=Oc(p|0,L|0,X|0,N|0)|0;X=L;p=Xc(l|0,((l|0)<0)<<31>>31|0,z|0,Y|0)|0;p=Oc(N|0,X|0,p|0,L|0)|0;l=L;if(!((l|0)>(c|0)|(l|0)==(c|0)&p>>>0>a>>>0)){b=m;f=h;break e}o[r>>2]=b;X=o[b+12>>2]|0;f=o[X+88>>2]|0;u=o[X+92>>2]|0;d=o[X+96>>2]|0;if(!X){a=p;c=l;break}else{m=b;c=l;a=p;h=f}}}else{b=0;f=y}while(0);a=Dc(a|0,c|0,_|0,t|0)|0;t=L;if((t|0)>0|(t|0)==0&a>>>0>0){N=Dc(0,0,Z|0,((Z|0)<0)<<31>>31|0)|0;X=L;c=b;h=a;l=t;m=i;y=H;g=s;G=f;E=u;V=d;while(1){p=(te(E-y|0,re)|0)+(te(G-m|0,ne)|0)+(te(V-g|0,K)|0)|0;_=o[n>>2]|0;if(!_){D=p;T=p;I=((p|0)<0)<<31>>31;p=h;P=m;M=y;x=g}else{B=p;v=p;A=((p|0)<0)<<31>>31;p=h;M=m;P=y;W=g;e:while(1){\nif(!(o[_+12>>2]|0)){y=B;g=A;m=M;h=P;_=W;break}x=o[(o[_>>2]|0)+8>>2]|0;if((o[x+20>>2]|0)<=(o[e+100>>2]|0)){y=B;g=A;m=M;h=P;_=W;break}F=o[x+12>>2]|0;m=o[F+88>>2]|0;O=m-M|0;h=o[F+92>>2]|0;D=h-P|0;F=o[F+96>>2]|0;c=F-W|0;g=Xc(O|0,((O|0)<0)<<31>>31|0,J|0,$|0)|0;T=L;y=Xc(D|0,((D|0)<0)<<31>>31|0,ee|0,ie|0)|0;T=Oc(y|0,L|0,g|0,T|0)|0;g=L;y=Xc(c|0,((c|0)<0)<<31>>31|0,z|0,Y|0)|0;y=Oc(T|0,g|0,y|0,L|0)|0;g=L;c=(te(D,re)|0)+(te(O,ne)|0)+(te(c,K)|0)|0;do if((y|0)==0&(g|0)==0){if((c|0)>=0){y=B;g=A;m=M;h=P;_=W;break e}}else{if((g|0)>=0){y=B;g=A;m=M;h=P;_=W;break e}if((c|0)>0){w=1;k=c;C=((c|0)<0)<<31>>31}else{k=Dc(0,0,c|0,((c|0)<0)<<31>>31|0)|0;w=c>>31;k=(c|0)<0?k:0;C=(c|0)<0?L:0}O=0-w|0;j=Dc(0,0,y|0,g|0)|0;I=L;if((B|0)>0){c=1;T=v;D=A}else{D=(B|0)<0;T=Dc(0,0,v|0,A|0)|0;c=B>>31;T=D?T:0;D=D?L:0}if(!((l|0)>0|(l|0)==0&p>>>0>0))if((l|0)<0){y=Dc(0,0,p|0,l|0)|0;c=0-c|0;g=L}else{y=0;g=0}else{y=p;g=l}if((c|0)==(O|0)){if(!w)break;c=Xc(y|0,0,k|0,0)|0;w=L;ce=Xc(g|0,0,k|0,0)|0;ae=L;S=Xc(y|0,0,C|0,0)|0;R=L;se=Xc(g|0,0,C|0,0)|0;k=L;S=Oc(ce|0,0,S|0,0)|0;y=L;k=Oc(ae|0,0,se|0,k|0)|0;R=Oc(k|0,L|0,R|0,0)|0;y=Oc(R|0,L|0,y|0,0)|0;R=L;w=Oc(0,S|0,c|0,w|0)|0;k=L;S=Oc(y|0,R|0,(k>>>0<S>>>0|(k|0)==(S|0)&w>>>0<0)&1|0,0)|0;R=L;y=Xc(T|0,0,j|0,0)|0;c=L;se=Xc(D|0,0,j|0,0)|0;j=L;g=Xc(T|0,0,I|0,0)|0;C=L;I=Xc(D|0,0,I|0,0)|0;T=L;g=Oc(se|0,0,g|0,0)|0;D=L;T=Oc(j|0,0,I|0,T|0)|0;C=Oc(T|0,L|0,C|0,0)|0;D=Oc(C|0,L|0,D|0,0)|0;C=L;c=Oc(0,g|0,y|0,c|0)|0;y=L;g=Oc(D|0,C|0,(y>>>0<g>>>0|(y|0)==(g|0)&c>>>0<0)&1|0,0)|0;C=L;do if(R>>>0<C>>>0|(R|0)==(C|0)&S>>>0<g>>>0)c=-1;else{if(R>>>0>C>>>0|(R|0)==(C|0)&S>>>0>g>>>0){c=1;break}if(k>>>0<y>>>0|(k|0)==(y|0)&w>>>0<c>>>0){c=-1;break}c=(k>>>0>y>>>0|(k|0)==(y|0)&w>>>0>c>>>0)&1}while(0);c=te(c,O)|0}else c=O-c|0;if((c|0)<=-1){y=B;g=A;m=M;h=P;_=W;break e}}while(0);ce=G-m|0;ae=E-h|0;c=V-F|0;l=Xc(ce|0,((ce|0)<0)<<31>>31|0,J|0,$|0)|0;se=L;p=Xc(ae|0,((ae|0)<0)<<31>>31|0,ee|0,ie|0)|0;se=Oc(p|0,L|0,l|0,se|0)|0;l=L;p=Xc(c|0,((c|0)<0)<<31>>31|0,z|0,Y|0)|0;p=Oc(se|0,l|0,p|0,L|0)|0;l=L;_=(_|0)==(U|0)?0:x;o[n>>2]=_;c=(te(ae,re)|0)+(te(ce,ne)|0)+(te(c,K)|0)|0;if(!_){y=c;v=c;g=((c|0)<0)<<31>>31;_=F;break}else{B=c;v=c;A=((c|0)<0)<<31>>31;M=m;P=h;W=F}}D=y;c=o[r>>2]|0;T=v;I=g;P=m;M=h;x=_}if(!c){_=122;break}if(!(o[c+12>>2]|0)){_=122;break}O=o[o[c+8>>2]>>2]|0;if((o[O+20>>2]|0)<=(o[e+100>>2]|0)){_=122;break}m=o[O+12>>2]|0;g=o[m+88>>2]|0;h=g-G|0;y=o[m+92>>2]|0;c=y-E|0;m=o[m+96>>2]|0;_=m-V|0;ce=Xc(h|0,((h|0)<0)<<31>>31|0,Q|0,((Q|0)<0)<<31>>31|0)|0;se=L;ae=Xc(c|0,((c|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;se=Oc(ae|0,L|0,ce|0,se|0)|0;ce=L;ae=Xc(_|0,((_|0)<0)<<31>>31|0,N|0,X|0)|0;if(!((se|0)==(ae|0)&(ce|0)==(L|0))){_=122;break}C=Xc(h|0,((h|0)<0)<<31>>31|0,J|0,$|0)|0;j=L;v=Xc(c|0,((c|0)<0)<<31>>31|0,ee|0,ie|0)|0;j=Oc(v|0,L|0,C|0,j|0)|0;C=L;v=Xc(_|0,((_|0)<0)<<31>>31|0,z|0,Y|0)|0;v=Oc(j|0,C|0,v|0,L|0)|0;C=L;_=(te(c,re)|0)+(te(h,ne)|0)+(te(_,K)|0)|0;j=g-P|0;ae=y-M|0;R=m-x|0;j=Xc(j|0,((j|0)<0)<<31>>31|0,J|0,$|0)|0;ce=L;ae=Xc(ae|0,((ae|0)<0)<<31>>31|0,ee|0,ie|0)|0;ce=Oc(ae|0,L|0,j|0,ce|0)|0;j=L;R=Xc(R|0,((R|0)<0)<<31>>31|0,z|0,Y|0)|0;R=Oc(ce|0,j|0,R|0,L|0)|0;j=L;if(!((j|0)>0|(j|0)==0&R>>>0>0)){_=122;break}if((v|0)==0&(C|0)==0){if((_|0)>=0){_=122;break}}else{if((C|0)>=0){_=122;break}if((_|0)>0){m=1;y=_;h=((_|0)<0)<<31>>31}else{y=Dc(0,0,_|0,((_|0)<0)<<31>>31|0)|0;m=_>>31;y=(_|0)<0?y:0;h=(_|0)<0?L:0}S=0-m|0;w=Dc(0,0,v|0,C|0)|0;k=L;if((D|0)>0){_=1;C=T;v=I}else{v=(D|0)<0;C=Dc(0,0,T|0,I|0)|0;_=D>>31;C=v?C:0;v=v?L:0}do if((l|0)>0|(l|0)==0&p>>>0>0){c=_;_=l}else{if((l|0)>=0){c=_;p=0;_=0;break}p=Dc(0,0,p|0,l|0)|0;c=0-_|0;_=L}while(0);if((c|0)==(S|0)){if(!m){_=122;break}ce=Xc(p|0,0,y|0,0)|0;m=L;c=Xc(_|0,0,y|0,0)|0;V=L;y=Xc(p|0,0,h|0,0)|0;g=L;_=Xc(_|0,0,h|0,0)|0;h=L;y=Oc(c|0,0,y|0,0)|0;c=L;h=Oc(V|0,0,_|0,h|0)|0;g=Oc(h|0,L|0,g|0,0)|0;c=Oc(g|0,L|0,c|0,0)|0;g=L;h=Oc(0,y|0,ce|0,m|0)|0;m=L;y=Oc(c|0,g|0,(m>>>0<y>>>0|(m|0)==(y|0)&h>>>0<0)&1|0,0)|0;g=L;c=Xc(C|0,0,w|0,0)|0;_=L;ce=Xc(v|0,0,w|0,0)|0;V=L;p=Xc(C|0,0,k|0,0)|0;l=L;se=Xc(v|0,0,k|0,0)|0;ae=L;p=Oc(ce|0,0,p|0,0)|0;ce=L;ae=Oc(V|0,0,se|0,ae|0)|0;l=Oc(ae|0,L|0,l|0,0)|0;ce=Oc(l|0,L|0,ce|0,0)|0;l=L;_=Oc(0,p|0,c|0,_|0)|0;c=L;p=Oc(ce|0,l|0,(c>>>0<p>>>0|(c|0)==(p|0)&_>>>0<0)&1|0,0)|0;l=L;do if(g>>>0<l>>>0|(g|0)==(l|0)&y>>>0<p>>>0)_=-1;else{if(g>>>0>l>>>0|(g|0)==(l|0)&y>>>0>p>>>0){_=1;break}if(m>>>0<c>>>0|(m|0)==(c|0)&h>>>0<_>>>0){_=-1;break}_=(m>>>0>c>>>0|(m|0)==(c|0)&h>>>0>_>>>0)&1}while(0);_=te(_,S)|0}else _=S-c|0;if((_|0)<=0){_=122;break}}o[r>>2]=O;V=o[O+12>>2]|0;c=O;h=R;l=j;m=P;y=M;g=x;G=o[V+88>>2]|0;E=o[V+92>>2]|0;V=o[V+96>>2]|0}if((_|0)==122)return}if((t|0)>=0)return;O=Dc(0,0,Z|0,((Z|0)<0)<<31>>31|0)|0;x=L;_=H;D=f;e:while(1){T=t;I=a;R=_;t:while(1){j=(te(u-R|0,re)|0)+(te(D-i|0,ne)|0)+(te(d-s|0,K)|0)|0;do if((b|0?o[b+12>>2]|0:0)?(_e=o[(o[b+4>>2]|0)+8>>2]|0,(o[_e+20>>2]|0)>(o[e+100>>2]|0)):0){S=o[_e+12>>2]|0;w=o[S+88>>2]|0;ce=w-D|0;k=o[S+92>>2]|0;ae=k-u|0;S=o[S+96>>2]|0;_=S-d|0;a=Xc(ce|0,((ce|0)<0)<<31>>31|0,J|0,$|0)|0;se=L;t=Xc(ae|0,((ae|0)<0)<<31>>31|0,ee|0,ie|0)|0;se=Oc(t|0,L|0,a|0,se|0)|0;a=L;t=Xc(_|0,((_|0)<0)<<31>>31|0,z|0,Y|0)|0;t=Oc(se|0,a|0,t|0,L|0)|0;a=L;_=(te(ae,re)|0)+(te(ce,ne)|0)+(te(_,K)|0)|0;if((t|0)==0&(a|0)==0)if((_|0)>0)break t;else break;if((a|0)<0){if((_|0)>0){f=1;p=_;c=((_|0)<0)<<31>>31}else{p=Dc(0,0,_|0,((_|0)<0)<<31>>31|0)|0;f=_>>31;p=(_|0)<0?p:0;c=(_|0)<0?L:0}C=0-f|0;m=Dc(0,0,t|0,a|0)|0;y=L;if((j|0)>0){_=1;g=j;v=((j|0)<0)<<31>>31}else{g=Dc(0,0,j|0,((j|0)<0)<<31>>31|0)|0;_=j>>31;g=(j|0)<0?g:0;v=(j|0)<0?L:0}if(!((T|0)>0|(T|0)==0&I>>>0>0))if((T|0)<0){t=Dc(0,0,I|0,T|0)|0;_=0-_|0;a=L}else{t=0;a=0}else{t=I;a=T}if((_|0)==(C|0)){if(!f)break t;_=Xc(t|0,0,p|0,0)|0;f=L;se=Xc(a|0,0,p|0,0)|0;U=L;l=Xc(t|0,0,c|0,0)|0;h=L;ce=Xc(a|0,0,c|0,0)|0;p=L;l=Oc(se|0,0,l|0,0)|0;t=L;p=Oc(U|0,0,ce|0,p|0)|0;h=Oc(p|0,L|0,h|0,0)|0;t=Oc(h|0,L|0,t|0,0)|0;h=L;f=Oc(0,l|0,_|0,f|0)|0;p=L;l=Oc(t|0,h|0,(p>>>0<l>>>0|(p|0)==(l|0)&f>>>0<0)&1|0,0)|0;h=L;t=Xc(g|0,0,m|0,0)|0;_=L;ce=Xc(v|0,0,m|0,0)|0;U=L;a=Xc(g|0,0,y|0,0)|0;c=L;se=Xc(v|0,0,y|0,0)|0;ae=L;a=Oc(ce|0,0,a|0,0)|0;ce=L;ae=Oc(U|0,0,se|0,ae|0)|0;c=Oc(ae|0,L|0,c|0,0)|0;ce=Oc(c|0,L|0,ce|0,0)|0;c=L;_=Oc(0,a|0,t|0,_|0)|0;t=L;a=Oc(ce|0,c|0,(t>>>0<a>>>0|(t|0)==(a|0)&_>>>0<0)&1|0,0)|0;c=L;do if(h>>>0<c>>>0|(h|0)==(c|0)&l>>>0<a>>>0)_=-1;else{if(h>>>0>c>>>0|(h|0)==(c|0)&l>>>0>a>>>0){_=1;break}if(p>>>0<t>>>0|(p|0)==(t|0)&f>>>0<_>>>0){_=-1;break}_=(p>>>0>t>>>0|(p|0)==(t|0)&f>>>0>_>>>0)&1}while(0);_=te(_,C)|0}else _=C-_|0;if((_|0)<1)break t}}while(0);_=o[n>>2]|0;if(!_){_=122;break e}if(!(o[_+12>>2]|0)){_=122;break e}v=o[(o[_+8>>2]|0)+4>>2]|0;if((o[v+20>>2]|0)<=(o[e+100>>2]|0)){_=122;break e}a=o[v+12>>2]|0;f=o[a+88>>2]|0;i=f-i|0;c=o[a+92>>2]|0;t=c-R|0;a=o[a+96>>2]|0;_=a-s|0;ce=Xc(i|0,((i|0)<0)<<31>>31|0,Q|0,((Q|0)<0)<<31>>31|0)|0;se=L;ae=Xc(t|0,((t|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;se=Oc(ae|0,L|0,ce|0,se|0)|0;ce=L;ae=Xc(_|0,((_|0)<0)<<31>>31|0,O|0,x|0)|0;if(!((se|0)==(ae|0)&(ce|0)==(L|0))){_=122;break e}p=Xc(i|0,((i|0)<0)<<31>>31|0,J|0,$|0)|0;g=L;s=Xc(t|0,((t|0)<0)<<31>>31|0,ee|0,ie|0)|0;g=Oc(s|0,L|0,p|0,g|0)|0;p=L;s=Xc(_|0,((_|0)<0)<<31>>31|0,z|0,Y|0)|0;s=Oc(g|0,p|0,s|0,L|0)|0;p=L;_=(te(t,re)|0)+(te(i,ne)|0)+(te(_,K)|0)|0;g=D-f|0;ae=u-c|0;y=d-a|0;g=Xc(g|0,((g|0)<0)<<31>>31|0,J|0,$|0)|0;ce=L;ae=Xc(ae|0,((ae|0)<0)<<31>>31|0,ee|0,ie|0)|0;ce=Oc(ae|0,L|0,g|0,ce|0)|0;g=L;y=Xc(y|0,((y|0)<0)<<31>>31|0,z|0,Y|0)|0;y=Oc(ce|0,g|0,y|0,L|0)|0;g=L;if((g|0)>=0){_=122;break e}if((s|0)==0&(p|0)==0){if((_|0)<=0){_=122;break e}}else{if((p|0)>=0){_=122;break e}if((_|0)>0){c=_;f=((_|0)<0)<<31>>31;a=1}else{c=Dc(0,0,_|0,((_|0)<0)<<31>>31|0)|0;c=(_|0)<0?c:0;f=(_|0)<0?L:0;a=_>>31}m=0-a|0;b=Dc(0,0,s|0,p|0)|0;h=L;if((j|0)>0){_=1;l=j;s=((j|0)<0)<<31>>31}else{l=Dc(0,0,j|0,((j|0)<0)<<31>>31|0)|0;_=j>>31;l=(j|0)<0?l:0;s=(j|0)<0?L:0}do if((T|0)>0|(T|0)==0&I>>>0>0){i=_;t=I;_=T}else{if((T|0)>=0){i=_;t=0;_=0;break}t=Dc(0,0,I|0,T|0)|0;i=0-_|0;_=L}while(0);if((i|0)==(m|0)){if(!a){_=122;break e}ce=Xc(t|0,0,c|0,0)|0;a=L;i=Xc(_|0,0,c|0,0)|0;U=L;t=Xc(t|0,0,f|0,0)|0;p=L;_=Xc(_|0,0,f|0,0)|0;c=L;f=Oc(i|0,0,t|0,0)|0;t=L;c=Oc(U|0,0,_|0,c|0)|0;p=Oc(c|0,L|0,p|0,0)|0;t=Oc(p|0,L|0,t|0,0)|0;p=L;a=Oc(0,f|0,ce|0,a|0)|0;c=L;f=Oc(t|0,p|0,(c>>>0<f>>>0|(c|0)==(f|0)&a>>>0<0)&1|0,0)|0;p=L;t=Xc(l|0,0,b|0,0)|0;_=L;ce=Xc(s|0,0,b|0,0)|0;U=L;i=Xc(l|0,0,h|0,0)|0;ae=L;se=Xc(s|0,0,h|0,0)|0;s=L;i=Oc(ce|0,0,i|0,0)|0;ce=L;s=Oc(U|0,0,se|0,s|0)|0;s=Oc(s|0,L|0,ae|0,0)|0;ce=Oc(s|0,L|0,ce|0,0)|0;s=L;_=Oc(0,i|0,t|0,_|0)|0;t=L;i=Oc(ce|0,s|0,(t>>>0<i>>>0|(t|0)==(i|0)&_>>>0<0)&1|0,0)|0;s=L;do if(p>>>0<s>>>0|(p|0)==(s|0)&f>>>0<i>>>0)_=-1;else{if(p>>>0>s>>>0|(p|0)==(s|0)&f>>>0>i>>>0){_=1;break}if(c>>>0<t>>>0|(c|0)==(t|0)&a>>>0<_>>>0){_=-1;break}_=(c>>>0>t>>>0|(c|0)==(t|0)&a>>>0>_>>>0)&1}while(0);_=te(_,m)|0}else _=m-i|0;if((_|0)>=0){_=122;break e}}o[n>>2]=v;s=o[v+12>>2]|0;b=o[r>>2]|0;T=g;I=y;i=o[s+88>>2]|0;R=o[s+92>>2]|0;s=o[s+96>>2]|0}t=w-i|0;D=k-R|0;a=S-s|0;t=Xc(t|0,((t|0)<0)<<31>>31|0,J|0,$|0)|0;_=L;D=Xc(D|0,((D|0)<0)<<31>>31|0,ee|0,ie|0)|0;_=Oc(D|0,L|0,t|0,_|0)|0;t=L;a=Xc(a|0,((a|0)<0)<<31>>31|0,z|0,Y|0)|0;a=Oc(_|0,t|0,a|0,L|0)|0;b=(b|0)==(oe|0)?0:_e;o[r>>2]=b;t=L;_=R;D=w;u=k;d=S}if((_|0)==122)return}function Fp(e,t,i,n,r,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;var a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,x=0,M=0;a=o[i+8>>2]|0;if(!a){e=0;return e|0}c=a;T=a;a=0;do{if((o[T+20>>2]|0)>(o[e+100>>2]|0)){j=o[T+12>>2]|0;w=o[j+88>>2]|0;k=w-(o[i+88>>2]|0)|0;S=o[j+92>>2]|0;R=S-(o[i+92>>2]|0)|0;j=o[j+96>>2]|0;I=j-(o[i+96>>2]|0)|0;f=Xc(o[_>>2]|0,o[_+4>>2]|0,k|0,((k|0)<0)<<31>>31|0)|0;p=L;c=Xc(o[_+8>>2]|0,o[_+8+4>>2]|0,R|0,((R|0)<0)<<31>>31|0)|0;p=Oc(c|0,L|0,f|0,p|0)|0;f=L;c=Xc(o[_+16>>2]|0,o[_+16+4>>2]|0,I|0,((I|0)<0)<<31>>31|0)|0;c=Oc(p|0,f|0,c|0,L|0)|0;f=L;p=Xc(o[r>>2]|0,o[r+4>>2]|0,k|0,((k|0)<0)<<31>>31|0)|0;C=L;l=Xc(o[r+8>>2]|0,o[r+8+4>>2]|0,R|0,((R|0)<0)<<31>>31|0)|0;C=Oc(l|0,L|0,p|0,C|0)|0;p=L;l=Xc(o[r+16>>2]|0,o[r+16+4>>2]|0,I|0,((I|0)<0)<<31>>31|0)|0;l=Oc(C|0,p|0,l|0,L|0)|0;p=L;if((f|0)>0|(f|0)==0&c>>>0>0){C=f;f=1}else{g=Dc(0,0,c|0,f|0)|0;C=L;v=Mc(c|0,f|0,63)|0;c=(f|0)<0?g:0;C=(f|0)<0?C:0;f=v}if(!((p|0)>0|(p|0)==0&l>>>0>0)){v=Dc(0,0,l|0,p|0)|0;u=(p|0)<0?0-f|0:f;f=(p|0)<0?v:0;p=(p|0)<0?L:0;if(!((u|0)==0&((f|0)==0&(p|0)==0))){l=f;b=8}}else{u=f;b=8}e:do if((b|0)==8){b=0;if(!a){o[s>>2]=c;o[s+4>>2]=C;o[s+8>>2]=l;o[s+8+4>>2]=p;o[s+16>>2]=u;a=T;break}f=o[s+16>>2]|0;if((u|0)==(f|0)){if(u|0){d=o[s+8>>2]|0;y=o[s+8+4>>2]|0;b=Xc(d|0,0,c|0,0)|0;f=L;g=Xc(y|0,0,c|0,0)|0;m=L;d=Xc(d|0,0,C|0,0)|0;h=L;y=Xc(y|0,0,C|0,0)|0;x=L;d=Oc(g|0,0,d|0,0)|0;g=L;x=Oc(m|0,0,y|0,x|0)|0;h=Oc(x|0,L|0,h|0,0)|0;g=Oc(h|0,L|0,g|0,0)|0;h=L;f=Oc(0,d|0,b|0,f|0)|0;b=L;d=Oc(g|0,h|0,(b>>>0<d>>>0|(b|0)==(d|0)&f>>>0<0)&1|0,0)|0;h=L;g=o[s>>2]|0;x=o[s+4>>2]|0;y=Xc(g|0,0,l|0,0)|0;m=L;D=Xc(x|0,0,l|0,0)|0;M=L;g=Xc(g|0,0,p|0,0)|0;v=L;x=Xc(x|0,0,p|0,0)|0;O=L;g=Oc(D|0,0,g|0,0)|0;D=L;O=Oc(M|0,0,x|0,O|0)|0;v=Oc(O|0,L|0,v|0,0)|0;D=Oc(v|0,L|0,D|0,0)|0;v=L;m=Oc(0,g|0,y|0,m|0)|0;y=L;g=Oc(D|0,v|0,(y>>>0<g>>>0|(y|0)==(g|0)&m>>>0<0)&1|0,0)|0;v=L;if(!(h>>>0<v>>>0|(h|0)==(v|0)&d>>>0<g>>>0))if(!(h>>>0>v>>>0|(h|0)==(v|0)&d>>>0>g>>>0))if(b>>>0<y>>>0|(b|0)==(y|0)&f>>>0<m>>>0)f=-1;else f=(b>>>0>y>>>0|(b|0)==(y|0)&f>>>0>m>>>0)&1;else f=1;else f=-1;f=te(f,u)|0;b=18}}else{f=u-f|0;b=18}do if((b|0)==18){b=0;if((f|0)>=0)if(!f)break;else break e;else{o[s>>2]=c;o[s+4>>2]=C;o[s+8>>2]=l;o[s+8+4>>2]=p;o[s+16>>2]=u;a=T;break e}}while(0);c=(o[a+4>>2]|0)==(T|0);if((o[a>>2]|0)==(T|0))if(c){M=o[n+8>>2]|0;D=te(M,R)|0;v=o[n+4>>2]|0;D=D-(te(v,I)|0)|0;x=o[n>>2]|0;M=(te(x,I)|0)-(te(M,k)|0)|0;x=(te(v,k)|0)-(te(x,R)|0)|0;v=o[a+12>>2]|0;c=o[(o[T+8>>2]|0)+12>>2]|0;R=o[c+88>>2]|0;k=(o[v+88>>2]|0)-R|0;C=o[c+92>>2]|0;I=(o[v+92>>2]|0)-C|0;c=o[c+96>>2]|0;v=(o[v+96>>2]|0)-c|0;O=(te(j-c|0,I)|0)-(te(S-C|0,v)|0)|0;c=(te(w-R|0,v)|0)-(te(j-c|0,k)|0)|0;I=(te(S-C|0,k)|0)-(te(w-R|0,I)|0)|0;D=Xc(O|0,((O|0)<0)<<31>>31|0,D|0,((D|0)<0)<<31>>31|0)|0;O=L;M=Xc(c|0,((c|0)<0)<<31>>31|0,M|0,((M|0)<0)<<31>>31|0)|0;c=L;x=Xc(I|0,((I|0)<0)<<31>>31|0,x|0,((x|0)<0)<<31>>31|0)|0;x=Oc(D|0,O|0,x|0,L|0)|0;c=Oc(x|0,L|0,M|0,c|0)|0;M=L;c=(M|0)>0|(M|0)==0&c>>>0>0?2:1}else c=2;else c=c&1;a=(c|0)==2^t?a:T}while(0);c=o[i+8>>2]|0}T=o[T>>2]|0}while((T|0)!=(c|0));return a|0}function Gp(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,l=0;l=p;p=p+16|0;s=o[e+12>>2]|0;a=o[s+(((i+t|0)/2|0)<<4)>>2]|0;c=o[s+(((i+t|0)/2|0)<<4)+4>>2]|0;f=o[s+(((i+t|0)/2|0)<<4)+8>>2]|0;n=t;r=i;while(1){_=n;while(1){n=o[s+(_<<4)+4>>2]|0;if((n|0)>=(c|0)){if((n|0)!=(c|0))break;n=o[s+(_<<4)>>2]|0;if((n|0)>=(a|0)){if((n|0)!=(a|0))break;if((o[s+(_<<4)+8>>2]|0)>=(f|0))break}}_=_+1|0}while(1){n=o[s+(r<<4)+4>>2]|0;if((c|0)>=(n|0)){if((c|0)!=(n|0))break;n=o[s+(r<<4)>>2]|0;if((a|0)>=(n|0)){if((a|0)!=(n|0))break;if((f|0)>=(o[s+(r<<4)+8>>2]|0))break}}r=r+-1|0}if((_|0)>(r|0))n=_;else{n=s+(_<<4)|0;o[l>>2]=o[n>>2];o[l+4>>2]=o[n+4>>2];o[l+8>>2]=o[n+8>>2];o[l+12>>2]=o[n+12>>2];s=s+(r<<4)|0;o[n>>2]=o[s>>2];o[n+4>>2]=o[s+4>>2];o[n+8>>2]=o[s+8>>2];o[n+12>>2]=o[s+12>>2];n=(o[e+12>>2]|0)+(r<<4)|0;o[n>>2]=o[l>>2];o[n+4>>2]=o[l+4>>2];o[n+8>>2]=o[l+8>>2];o[n+12>>2]=o[l+12>>2];n=_+1|0;r=r+-1|0}if((n|0)>(r|0))break;s=o[e+12>>2]|0}if((r|0)>(t|0))Gp(e,t,r);if((n|0)>=(i|0)){p=l;return}Gp(e,n,i);p=l;return}function Ep(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0;if((n|0)>-1|(n|0)==-1&i>>>0>4294967295){r=(+(i>>>0)+4294967296*+(n>>>0))*0x10000000000000000+(+(e>>>0)+4294967296*+(t>>>0));return+r}else{_=Dc(0,0,e|0,t|0)|0;o=L;n=Oc((e|0)==0&(t|0)==0&1|0,0,~i|0,~n|0)|0;r=-+Ep(_,o,n,L);return+r}return 0}function Vp(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0;W=p;p=p+240|0;if((i|0)<1){r=o[e+12>>2]|0;if(r|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;r=o[e+32>>2]|0;if(r|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;r=o[e+52>>2]|0;if(r|0){if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+52>>2]=0}n[e+56>>0]=1;o[e+52>>2]=0;o[e+44>>2]=0;o[e+48>>2]=0;p=W;return}o[W+40+32>>2]=0;o[W+40+36>>2]=0;o[W+40+40>>2]=0;o[W+40+44>>2]=256;o[W+40+48>>2]=0;o[W+40+52>>2]=0;o[W+40+56>>2]=0;o[W+40+60>>2]=256;o[W+40+64>>2]=0;o[W+40+68>>2]=0;o[W+40+72>>2]=0;o[W+40+76>>2]=256;n[W+40+96>>0]=1;L=W+40+92|0;o[L>>2]=0;o[W+40+84>>2]=0;o[W+40+88>>2]=0;f=0;l=-246811958;C=-246811958;y=-246811958;m=1900671690;R=1900671690;v=1900671690;b=t;while(1){O=+c[b>>2];s=+c[b+4>>2];d=+c[b+8>>2];x=O<(o[u>>2]=m,+c[u>>2]);r=(c[u>>2]=O,o[u>>2]|0);m=x?r:m;x=s<(o[u>>2]=v,+c[u>>2]);_=(c[u>>2]=s,o[u>>2]|0);v=x?_:v;x=d<(o[u>>2]=R,+c[u>>2]);a=(c[u>>2]=d,o[u>>2]|0);R=x?a:R;l=(o[u>>2]=l,+c[u>>2])<O?r:l;y=(o[u>>2]=y,+c[u>>2])<s?_:y;C=(o[u>>2]=C,+c[u>>2])<d?a:C;f=f+1|0;if((f|0)==(i|0))break;else b=b+16|0}I=(o[u>>2]=l,+c[u>>2]);j=(o[u>>2]=m,+c[u>>2]);S=(o[u>>2]=y,+c[u>>2]);k=(o[u>>2]=v,+c[u>>2]);w=(o[u>>2]=C,+c[u>>2]);g=(o[u>>2]=R,+c[u>>2]);_=I-j<S-k?S-k<w-g?2:1:I-j<w-g?2:0;o[W+40+112>>2]=_;r=I-j<S-k?I-j<w-g?0:2:S-k<w-g?1:2;if((r|0)==(_|0))r=((_+1|0)>>>0)%3|0;o[W+40+104>>2]=r;x=(_^3)-r|0;o[W+40+108>>2]=x;if(((x+1|0)%3|0|0)==(_|0)){s=(I-j)*9788566967472434e-20;d=(S-k)*9788566967472434e-20;h=(w-g)*9788566967472434e-20}else{s=-((I-j)*9788566967472434e-20);d=-((S-k)*9788566967472434e-20);h=-((w-g)*9788566967472434e-20)}c[W+40>>2]=s;c[W+40+4>>2]=d;c[W+40+8>>2]=h;c[W+40+12>>2]=0;O=s!=0?1/s:s;D=d!=0?1/d:d;T=h!=0?1/h:h;c[W+40+16>>2]=(I+j)*.5;c[W+40+20>>2]=(S+k)*.5;c[W+40+24>>2]=(w+g)*.5;c[W+40+28>>2]=0;m=W+216+16|0;n[m>>0]=1;y=W+216+12|0;o[y>>2]=0;o[W+216+4>>2]=0;o[W+216+8>>2]=0;o[5637]=(o[5637]|0)+1;r=Qa((i<<4|3)+16|0)|0;if(!r)f=0;else{o[(r+4+15&-16)+-4>>2]=r;f=r+4+15&-16}_=o[W+216+4>>2]|0;a=o[y>>2]|0;if((_|0)<=0){if(a|0)P=26}else{r=0;do{P=f+(r<<4)|0;x=a+(r<<4)|0;o[P>>2]=o[x>>2];o[P+4>>2]=o[x+4>>2];o[P+8>>2]=o[x+8>>2];o[P+12>>2]=o[x+12>>2];r=r+1|0}while((r|0)!=(_|0));P=26}if((P|0)==26){if(n[m>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[y>>2]=0}n[m>>0]=1;o[y>>2]=f;o[W+216+8>>2]=i;o[f>>2]=o[W+200>>2];o[f+4>>2]=o[W+200+4>>2];o[f+8>>2]=o[W+200+8>>2];o[f+12>>2]=o[W+200+12>>2];if((i|0)!=1){r=1;do{x=(o[y>>2]|0)+(r<<4)|0;o[x>>2]=o[W+200>>2];o[x+4>>2]=o[W+200+4>>2];o[x+8>>2]=o[W+200+8>>2];o[x+12>>2]=o[W+200+12>>2];r=r+1|0}while((r|0)!=(i|0))}o[W+216+4>>2]=i;_=W+184+(o[W+40+108>>2]<<2)|0;a=o[y>>2]|0;f=W+184+(o[W+40+112>>2]<<2)|0;l=W+184+(o[W+40+104>>2]<<2)|0;s=+c[W+40+16>>2];d=+c[W+40+20>>2];h=+c[W+40+24>>2];b=0;r=t;while(1){t=o[r>>2]|0;o[W+184>>2]=t;x=o[r+4>>2]|0;o[W+184+4>>2]=x;S=(o[u>>2]=t,+c[u>>2])-s;j=D*((o[u>>2]=x,+c[u>>2])-d);I=T*(+c[r+8>>2]-h);c[W+184>>2]=O*S;c[W+184+4>>2]=j;c[W+184+8>>2]=I;c[W+184+12>>2]=0;o[a+(b<<4)>>2]=~~+c[_>>2];o[a+(b<<4)+4>>2]=~~+c[f>>2];o[a+(b<<4)+8>>2]=~~+c[l>>2];o[a+(b<<4)+12>>2]=b;b=b+1|0;if((b|0)==(i|0))break;else r=r+16|0}if((i|0)>1)Gp(W+216|0,0,i+-1|0);o[W+40+36>>2]=o[W+40+32>>2];o[W+40+40>>2]=0;o[W+40+44>>2]=i;r=o[W+40+84>>2]|0;if((r|0)<(i|0)){if((o[W+40+88>>2]|0)<(i|0)){if(!i){_=0;a=r}else{o[5637]=(o[5637]|0)+1;_=Qa((i<<2|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=o[W+40+84>>2]|0}if((a|0)>0){f=0;do{o[_+(f<<2)>>2]=o[(o[L>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(a|0))}a=o[L>>2]|0;if(a|0){if(n[W+40+96>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[L>>2]=0}n[W+40+96>>0]=1;o[L>>2]=_;o[W+40+88>>2]=i}do{o[(o[L>>2]|0)+(r<<2)>>2]=0;r=r+1|0}while((r|0)!=(i|0))}o[W+40+84>>2]=i;l=0;do{r=o[W+40+40>>2]|0;if(!r){r=o[W+40+36>>2]|0;if(!r){o[5637]=(o[5637]|0)+1;r=Qa(31)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}_=o[W+40+44>>2]|0;o[r+4>>2]=_;a=r+8|0;o[a>>2]=0;o[5637]=(o[5637]|0)+1;_=Qa((_*112|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}o[r>>2]=_;o[a>>2]=o[W+40+32>>2];o[W+40+32>>2]=r}else o[W+40+36>>2]=o[r+8>>2];f=o[r+4>>2]|0;r=o[r>>2]|0;if((f|0)>0){_=0;a=r;do{_=_+1|0;x=a;a=a+112|0;o[x>>2]=(_|0)<(f|0)?a:0}while((_|0)!=(f|0))}}o[W+40+40>>2]=o[r>>2];x=r+104|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[x>>2]=-1;o[r+8>>2]=0;t=r+88|0;R=(o[y>>2]|0)+(l<<4)|0;o[t>>2]=o[R>>2];o[t+4>>2]=o[R+4>>2];o[t+8>>2]=o[R+8>>2];o[t+12>>2]=o[R+12>>2];o[x>>2]=-1;o[(o[L>>2]|0)+(l<<2)>>2]=r;l=l+1|0}while((l|0)<(i|0));r=o[y>>2]|0;if(r|0){if(n[m>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[y>>2]=0}n[m>>0]=1;o[y>>2]=0;o[W+216+4>>2]=0;o[W+216+8>>2]=0;o[W+40+52>>2]=o[W+40+48>>2];o[W+40+56>>2]=0;o[W+40+60>>2]=i*6;o[W+40+116>>2]=0;o[W+40+120>>2]=0;o[W+40+100>>2]=-3;o[W+184>>2]=0;o[W+184+4>>2]=0;o[W+184+8>>2]=0;o[W+184+12>>2]=0;Bp(W+40|0,0,i,W+184|0);o[W+40+124>>2]=o[W+184>>2];r=o[y>>2]|0;if(r|0){if(n[m>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[y>>2]=0}r=o[e+4>>2]|0;if((r|0)<0){if((o[e+8>>2]|0)<0){_=o[e+12>>2]|0;if(_|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=0;o[e+8>>2]=0}do{x=(o[e+12>>2]|0)+(r<<4)|0;o[x>>2]=o[W+168>>2];o[x+4>>2]=o[W+168+4>>2];o[x+8>>2]=o[W+168+8>>2];o[x+12>>2]=o[W+168+12>>2];r=r+1|0}while((r|0)!=0)}o[e+4>>2]=0;o[W+24>>2]=0;o[W+24+4>>2]=0;o[W+24+8>>2]=0;r=o[e+24>>2]|0;if((r|0)<0){if((o[e+28>>2]|0)<0){_=o[e+32>>2]|0;if(_|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+28>>2]=0}do{x=(o[e+32>>2]|0)+(r*12|0)|0;o[x>>2]=o[W+24>>2];o[x+4>>2]=o[W+24+4>>2];o[x+8>>2]=o[W+24+8>>2];r=r+1|0}while((r|0)!=0)}o[e+24>>2]=0;_=o[e+44>>2]|0;if((_|0)<0){r=o[e+52>>2]|0;do if((o[e+48>>2]|0)<0){if(!r){n[e+56>>0]=1;o[e+52>>2]=0;o[e+48>>2]=0;r=0;break}if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[e+56>>0]=1;o[e+52>>2]=0;o[e+48>>2]=0;r=0}while(0);Lc(r+(_<<2)|0,0,te(_,-4)|0)|0}o[e+44>>2]=0;r=o[W+40+124>>2]|0;if((o[r+104>>2]|0)<0){o[r+104>>2]=0;o[5637]=(o[5637]|0)+1;m=Qa(23)|0;o[(m+4+15&-16)+-4>>2]=m;o[(m+4+15&-16)>>2]=r;x=0;f=1;a=1;m=m+4+15&-16;while(1){if((o[r+100>>2]|0)>-1){c[W+216+(o[W+40+108>>2]<<2)>>2]=+(o[r+88>>2]|0);c[W+216+(o[W+40+112>>2]<<2)>>2]=+(o[r+92>>2]|0);s=+(o[r+96>>2]|0)}else{i=r+24|0;t=r+32|0;s=+Ep(o[i>>2]|0,o[i+4>>2]|0,o[t>>2]|0,o[t+4>>2]|0);t=r+72|0;i=r+80|0;L=o[i>>2]|0;i=o[i+4>>2]|0;s=s/+Ep(o[t>>2]|0,o[t+4>>2]|0,L,i);c[W+216+(o[W+40+108>>2]<<2)>>2]=s;R=r+40|0;C=r+48|0;s=+Ep(o[R>>2]|0,o[R+4>>2]|0,o[C>>2]|0,o[C+4>>2]|0);s=s/+Ep(o[t>>2]|0,o[t+4>>2]|0,L,i);c[W+216+(o[W+40+112>>2]<<2)>>2]=s;C=r+56|0;R=r+64|0;s=+Ep(o[C>>2]|0,o[C+4>>2]|0,o[R>>2]|0,o[R+4>>2]|0);s=s/+Ep(o[t>>2]|0,o[t+4>>2]|0,L,i)}c[W+216+(o[W+40+104>>2]<<2)>>2]=s;s=+c[W+216>>2]*+c[W+40>>2]+ +c[W+40+16>>2];d=+c[W+216+4>>2]*+c[W+40+4>>2]+ +c[W+40+20>>2];h=+c[W+216+8>>2]*+c[W+40+8>>2]+ +c[W+40+24>>2];_=o[e+4>>2]|0;if((_|0)==(o[e+8>>2]|0)?(M=_|0?_<<1:1,(_|0)<(M|0)):0){if(!M)b=0;else{o[5637]=(o[5637]|0)+1;_=Qa((M<<4|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}b=_;_=o[e+4>>2]|0}if((_|0)>0){l=0;do{i=b+(l<<4)|0;L=(o[e+12>>2]|0)+(l<<4)|0;o[i>>2]=o[L>>2];o[i+4>>2]=o[L+4>>2];o[i+8>>2]=o[L+8>>2];o[i+12>>2]=o[L+12>>2];l=l+1|0}while((l|0)!=(_|0))}_=o[e+12>>2]|0;if(_|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=b;o[e+8>>2]=M;_=o[e+4>>2]|0}L=o[e+12>>2]|0;c[L+(_<<4)>>2]=s;c[L+(_<<4)+4>>2]=d;c[L+(_<<4)+8>>2]=h;c[L+(_<<4)+12>>2]=0;o[e+4>>2]=(o[e+4>>2]|0)+1;L=o[r+8>>2]|0;if(!L)l=m;else{i=L;r=-1;R=m;t=-1;while(1){C=i+20|0;_=o[C>>2]|0;if((_|0)<0){v=o[e+24>>2]|0;o[W+12>>2]=0;o[W+12+4>>2]=0;o[W+12+8>>2]=0;do if((v|0)==(o[e+28>>2]|0)){m=v|0?v<<1:1;if((v|0)>=(m|0)){_=v;break}if(!m){_=0;l=v}else{o[5637]=(o[5637]|0)+1;_=Qa((m*12|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}l=o[e+24>>2]|0}if((l|0)>0){b=0;do{y=_+(b*12|0)|0;B=(o[e+32>>2]|0)+(b*12|0)|0;o[y>>2]=o[B>>2];o[y+4>>2]=o[B+4>>2];o[y+8>>2]=o[B+8>>2];b=b+1|0}while((b|0)!=(l|0))}l=o[e+32>>2]|0;if(l|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=_;o[e+28>>2]=m;_=o[e+24>>2]|0}else _=v;while(0);_=(o[e+32>>2]|0)+(_*12|0)|0;o[_>>2]=o[W+12>>2];o[_+4>>2]=o[W+12+4>>2];o[_+8>>2]=o[W+12+8>>2];_=(o[e+24>>2]|0)+1|0;o[e+24>>2]=_;o[W>>2]=0;o[W+4>>2]=0;o[W+8>>2]=0;do if((_|0)==(o[e+28>>2]|0)){m=_|0?_<<1:1;if((_|0)>=(m|0))break;if(!m)b=0;else{o[5637]=(o[5637]|0)+1;_=Qa((m*12|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}b=_;_=o[e+24>>2]|0}if((_|0)>0){l=0;do{B=b+(l*12|0)|0;y=(o[e+32>>2]|0)+(l*12|0)|0;o[B>>2]=o[y>>2];o[B+4>>2]=o[y+4>>2];o[B+8>>2]=o[y+8>>2];l=l+1|0}while((l|0)!=(_|0))}_=o[e+32>>2]|0;if(_|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=b;o[e+28>>2]=m;_=o[e+24>>2]|0}while(0);y=(o[e+32>>2]|0)+(_*12|0)|0;o[y>>2]=o[W>>2];o[y+4>>2]=o[W+4>>2];o[y+8>>2]=o[W+8>>2];o[e+24>>2]=(o[e+24>>2]|0)+1;y=o[e+32>>2]|0;o[C>>2]=v;o[(o[i+8>>2]|0)+20>>2]=v+1;o[y+(v*12|0)+4>>2]=1;o[y+((v+1|0)*12|0)+4>>2]=-1;m=o[i+12>>2]|0;_=o[m+104>>2]|0;if((_|0)<0){o[m+104>>2]=a;do if((a|0)==(f|0)){b=f|0?f<<1:1;if((f|0)>=(b|0)){l=R;break}do if(!b)l=0;else{o[5637]=(o[5637]|0)+1;_=Qa((b<<2|3)+16|0)|0;if(!_){l=0;break}o[(_+4+15&-16)+-4>>2]=_;l=_+4+15&-16}while(0);if((f|0)<=0){if(!R){f=b;break}}else{_=0;do{o[l+(_<<2)>>2]=o[R+(_<<2)>>2];_=_+1|0}while((_|0)!=(f|0))}o[5638]=(o[5638]|0)+1;qa(o[R+-4>>2]|0);f=b}else l=R;while(0);o[l+(a<<2)>>2]=m;_=a;a=a+1|0}else l=R;o[y+(v*12|0)+8>>2]=_;o[y+((v+1|0)*12|0)+8>>2]=x;_=o[C>>2]|0}else l=R;if((t|0)>-1)o[(o[e+32>>2]|0)+(_*12|0)>>2]=t-_;else r=_;i=o[i>>2]|0;if((i|0)==(L|0))break;else{R=l;t=_}}o[(o[e+32>>2]|0)+(r*12|0)>>2]=_-r}_=x+1|0;if((_|0)>=(a|0))break;r=o[l+(_<<2)>>2]|0;x=_;m=l}if((x|0)>-1){C=0;while(1){y=o[(o[l+(C<<2)>>2]|0)+8>>2]|0;if(y|0){v=y;do{m=v+20|0;r=o[m>>2]|0;if((r|0)>-1){_=o[e+44>>2]|0;do if((_|0)==(o[e+48>>2]|0)){b=_|0?_<<1:1;if((_|0)>=(b|0))break;if(!b)r=0;else{o[5637]=(o[5637]|0)+1;r=Qa((b<<2|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}_=o[e+44>>2]|0}f=o[e+52>>2]|0;if((_|0)<=0){if(f)P=173}else{a=0;do{o[r+(a<<2)>>2]=o[f+(a<<2)>>2];a=a+1|0}while((a|0)!=(_|0));P=173}if((P|0)==173){P=0;if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}o[e+52>>2]=0;_=o[e+44>>2]|0}n[e+56>>0]=1;o[e+52>>2]=r;o[e+48>>2]=b;r=o[m>>2]|0}while(0);o[(o[e+52>>2]|0)+(_<<2)>>2]=r;o[e+44>>2]=(o[e+44>>2]|0)+1;r=v;do{o[r+20>>2]=-1;r=o[(o[r+8>>2]|0)+4>>2]|0}while((r|0)!=(v|0))}v=o[v>>2]|0}while((v|0)!=(y|0))}if((C|0)==(x|0))break;else C=C+1|0}}if(l|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}}Np(W+40|0);p=W;return}function Np(e){e=e|0;var t=0,i=0;t=o[e+92>>2]|0;if(t|0){if(n[e+96>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+92>>2]=0}n[e+96>>0]=1;o[e+92>>2]=0;o[e+84>>2]=0;o[e+88>>2]=0;t=o[e+64>>2]|0;if(t|0)do{o[e+64>>2]=o[t+8>>2];i=o[t>>2]|0;if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=o[e+64>>2]|0}while((t|0)!=0);t=o[e+48>>2]|0;if(t|0)do{o[e+48>>2]=o[t+8>>2];i=o[t>>2]|0;if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=o[e+48>>2]|0}while((t|0)!=0);t=o[e+32>>2]|0;if(!t)return;do{o[e+32>>2]=o[t+8>>2];i=o[t>>2]|0;if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=o[e+32>>2]|0}while((t|0)!=0);return}function Xp(){var e=0,t=0;while(1){e=Qa(8)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){o[5649]=e;ut(e|0,0)|0;o[5639]=16373;o[5640]=0;o[5641]=0;o[5642]=0;o[5643]=0;o[5644]=0;o[5645]=0;o[5646]=0;o[5647]=0;Hp(22556);return}}function Hp(e){e=e|0;var t=0;do{o[e+4>>2]=0;c[e+8>>2]=0;t=o[e+24>>2]|0;if(t|0)Hp(t);e=o[e+28>>2]|0}while((e|0)!=0);return}function Zp(e){e=e|0;var t=0,i=0,n=0,r=0;r=p;p=p+16|0;i=o[2006]|0;if((o[i>>2]|0)==(e|0))t=i;else{t=o[i+24>>2]|0;e:do if(!t)n=5;else while(1){if((o[t>>2]|0)==(e|0))break e;t=o[t+28>>2]|0;if(!t){n=5;break}}while(0);do if((n|0)==5){while(1){t=Qa(36)|0;if(t|0){n=9;break}t=o[5831]|0;o[5831]=t+0;if(!t){n=8;break}VP[t&3]();n=5}if((n|0)==8){r=Qe(4)|0;o[r>>2]=8308;ft(r|0,2416,215)}else if((n|0)==9){o[t>>2]=e;o[t+4>>2]=0;o[t+4+4>>2]=0;o[t+4+8>>2]=0;o[t+4+12>>2]=0;o[t+20>>2]=i;o[t+24>>2]=0;o[t+28>>2]=0;o[t+32>>2]=0;Hp(t);o[t+28>>2]=o[i+24>>2];o[i+24>>2]=t;break}}while(0);o[2006]=t}e=t+4|0;o[e>>2]=(o[e>>2]|0)+1;e=t+16|0;n=o[e>>2]|0;o[e>>2]=n+1;if(n|0){p=r;return}ut(r|0,0)|0;n=o[5649]|0;o[t+12>>2]=(o[r+4>>2]|0)-(o[n+4>>2]|0)+(((o[r>>2]|0)-(o[n>>2]|0)|0)*1e6|0);p=r;return}function Up(e,t){e=e|0;t=t|0;var i=0,n=0;while(1){i=Qa(80)|0;if(i|0){n=6;break}i=o[5831]|0;o[5831]=i+0;if(!i){n=5;break}VP[i&3]()}if((n|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((n|0)==6){c[i+4>>2]=1;r[i+8>>1]=1;r[i+10>>1]=-1;o[i>>2]=7848;o[i+12>>2]=o[e>>2];o[i+12+4>>2]=o[e+4>>2];o[i+12+8>>2]=o[e+8>>2];o[i+12+12>>2]=o[e+12>>2];o[i+28>>2]=o[t>>2];o[i+28+4>>2]=o[t+4>>2];o[i+28+8>>2]=o[t+8>>2];o[i+28+12>>2]=o[t+12>>2];o[i+76>>2]=0;return i|0}return 0}function zp(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Yp(e){e=e|0;return+ +c[e+4>>2]}function Kp(e){e=e|0;return r[e+8>>1]|0}function Qp(e){e=e|0;return r[e+10>>1]|0}function qp(e){e=e|0;return e+12|0}function Jp(e){e=e|0;return e+28|0}function $p(e){e=e|0;return e+44|0}function el(e){e=e|0;return e+60|0}function tl(e){e=e|0;return+c[e+4>>2]<1|0}function il(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function nl(e,t){e=e|0;t=t|0;r[e+8>>1]=t;return}function rl(e,t){e=e|0;t=t|0;r[e+10>>1]=t;return}function ol(e,t){e=e|0;t=t|0;o[e+12>>2]=o[t>>2];o[e+12+4>>2]=o[t+4>>2];o[e+12+8>>2]=o[t+8>>2];o[e+12+12>>2]=o[t+12>>2];return}function _l(e,t){e=e|0;t=t|0;o[e+28>>2]=o[t>>2];o[e+28+4>>2]=o[t+4>>2];o[e+28+8>>2]=o[t+8>>2];o[e+28+12>>2]=o[t+12>>2];return}function sl(e,t){e=e|0;t=t|0;o[e+44>>2]=o[t>>2];o[e+44+4>>2]=o[t+4>>2];o[e+44+8>>2]=o[t+8>>2];o[e+44+12>>2]=o[t+12>>2];return}function al(e,t){e=e|0;t=t|0;o[e+60>>2]=o[t>>2];o[e+60+4>>2]=o[t+4>>2];o[e+60+8>>2]=o[t+8>>2];o[e+60+12>>2]=o[t+12>>2];return}function cl(e,t){e=e|0;t=t|0;var i=0,n=0;while(1){i=Qa(84)|0;if(i|0){n=6;break}i=o[5831]|0;o[5831]=i+0;if(!i){n=5;break}VP[i&3]()}if((n|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((n|0)==6){c[i+4>>2]=1;o[i+8>>2]=0;r[i+12>>1]=1;r[i+14>>1]=-1;o[i+16>>2]=0;o[i>>2]=8008;o[i+20>>2]=o[e>>2];o[i+20+4>>2]=o[e+4>>2];o[i+20+8>>2]=o[e+8>>2];o[i+20+12>>2]=o[e+12>>2];o[i+36>>2]=o[t>>2];o[i+36+4>>2]=o[t+4>>2];o[i+36+8>>2]=o[t+8>>2];o[i+36+12>>2]=o[t+12>>2];return i|0}return 0}function fl(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function pl(e){e=e|0;return r[e+12>>1]|0}function ll(e){e=e|0;return r[e+14>>1]|0}function ul(e){e=e|0;return o[e+8>>2]|0}function bl(e){e=e|0;return e+52|0}function dl(e){e=e|0;return e+68|0}function hl(e){e=e|0;return e+20|0}function ml(e){e=e|0;return e+36|0}function yl(e){e=e|0;return(o[e+8>>2]|0)!=0|0}function gl(e,t){e=e|0;t=t|0;r[e+12>>1]=t;return}function vl(e,t){e=e|0;t=t|0;r[e+14>>1]=t;return}function Cl(e,t){e=e|0;t=t|0;o[e+8>>2]=t;return}function wl(e,t){e=e|0;t=t|0;o[e+52>>2]=o[t>>2];o[e+52+4>>2]=o[t+4>>2];o[e+52+8>>2]=o[t+8>>2];o[e+52+12>>2]=o[t+12>>2];return}function kl(e,t){e=e|0;t=t|0;o[e+68>>2]=o[t>>2];o[e+68+4>>2]=o[t+4>>2];o[e+68+8>>2]=o[t+8>>2];o[e+68+12>>2]=o[t+12>>2];return}function Sl(e,t){e=e|0;t=t|0;o[e+20>>2]=o[t>>2];o[e+20+4>>2]=o[t+4>>2];o[e+20+8>>2]=o[t+8>>2];o[e+20+12>>2]=o[t+12>>2];return}function Rl(e,t){e=e|0;t=t|0;o[e+36>>2]=o[t>>2];o[e+36+4>>2]=o[t+4>>2];o[e+36+8>>2]=o[t+8>>2];o[e+36+12>>2]=o[t+12>>2];return}function jl(){var e=0,t=0;while(1){e=Qa(8)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){o[e>>2]=0;o[e+4>>2]=0;r[e+4>>1]=1;r[e+6>>1]=-1;o[e>>2]=8036;return e|0}return 0}function Il(e){e=e|0;return}function Tl(e){e=e|0;qa(e);return}function Dl(e,t){e=e|0;t=t|0;t=o[t+4>>2]|0;if(!((r[e+6>>1]&(t&65535))<<16>>16)){e=0;return e|0}e=(t>>>16&65535&r[e+4>>1])<<16>>16!=0;return e|0}function Ol(e,t,i,n,r,o,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=o|0;_=_|0;s=s|0;return+ +at(0,e|0,t|0,i|0,n|0,r|0,o|0,_|0,s|0)}function Ll(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function xl(e,t,i,n,r,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;return+ +hP[o[(o[e>>2]|0)+12>>2]&1](e,t,i,n,r,_,s,a)}function Ml(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Pl(e,t,i,n,r,_,s,a){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;return+ +hP[o[(o[e>>2]|0)+12>>2]&1](e,t,i,n,r,_,s,a)}function Wl(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Bl(e){e=e|0;return+ +c[e+4>>2]}function Al(e){e=e|0;return r[e+8>>1]|0}function Fl(e){e=e|0;return r[e+10>>1]|0}function Gl(e){e=e|0;return+c[e+4>>2]<1|0}function El(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function Vl(e,t){e=e|0;t=t|0;r[e+8>>1]=t;return}function Nl(e,t){e=e|0;t=t|0;r[e+10>>1]=t;return}function Xl(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;var _=0,s=0;while(1){_=Qa(44)|0;if(_|0){s=6;break}_=o[5831]|0;o[5831]=_+0;if(!_){s=5;break}VP[_&3]()}if((s|0)==5){n=Qe(4)|0;o[n>>2]=8308;ft(n|0,2416,215)}else if((s|0)==6){o[_>>2]=e;o[_+4>>2]=t;o[_+8>>2]=o[i>>2];o[_+8+4>>2]=o[i+4>>2];o[_+8+8>>2]=o[i+8>>2];o[_+8+12>>2]=o[i+12>>2];o[_+24>>2]=o[n>>2];o[_+24+4>>2]=o[n+4>>2];o[_+24+8>>2]=o[n+8>>2];o[_+24+12>>2]=o[n+12>>2];c[_+40>>2]=r;return _|0}return 0}function Hl(e){e=e|0;if(!e)return;qa(e);return}function Zl(e){e=e|0;return o[e>>2]|0}function Ul(e){e=e|0;return+ +c[e+40>>2]}function zl(e){e=e|0;return e+8|0}function Yl(e){e=e|0;return e+24|0}function Kl(e){e=e|0;return o[e+4>>2]|0}function Ql(e,t){e=e|0;t=t|0;o[e>>2]=t;return}function ql(e,t){e=e|0;t=+t;c[e+40>>2]=t;return}function Jl(e,t){e=e|0;t=t|0;o[e+8>>2]=o[t>>2];o[e+8+4>>2]=o[t+4>>2];o[e+8+8>>2]=o[t+8>>2];o[e+8+12>>2]=o[t+12>>2];return}function $l(e,t){e=e|0;t=t|0;o[e+24>>2]=o[t>>2];o[e+24+4>>2]=o[t+4>>2];o[e+24+8>>2]=o[t+8>>2];o[e+24+12>>2]=o[t+12>>2];return}function eu(e,t){e=e|0;t=t|0;o[e+4>>2]=t;return}function tu(e){e=e|0;if(!e)return;qa(e);return}function iu(e){e=e|0;return o[e>>2]|0}function nu(e){e=e|0;return o[e+4>>2]|0}function ru(e,t){e=e|0;t=t|0;o[e>>2]=t;return}function ou(e,t){e=e|0;t=t|0;o[e+4>>2]=t;return}function _u(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function su(e){e=e|0;return r[e+12>>1]|0}function au(e){e=e|0;return r[e+14>>1]|0}function cu(e){e=e|0;return o[e+8>>2]|0}function fu(e){e=e|0;return(o[e+8>>2]|0)!=0|0}function pu(e,t){e=e|0;t=t|0;r[e+12>>1]=t;return}function lu(e,t){e=e|0;t=t|0;r[e+14>>1]=t;return}function uu(e,t){e=e|0;t=t|0;o[e+8>>2]=t;return;\n}function bu(e){e=e|0;if(!e)return;qa(e);return}function du(e){e=e|0;return e|0}function hu(e){e=e|0;return e+16|0}function mu(e){e=e|0;return o[e+88>>2]|0}function yu(e){e=e|0;return e+36|0}function gu(e){e=e|0;return(n[e+84>>0]|0)!=0|0}function vu(e){e=e|0;return+ +c[e+32>>2]}function Cu(e){e=e|0;return e+68|0}function wu(e){e=e|0;return e+52|0}function ku(e,t){e=e|0;t=t|0;o[e>>2]=o[t>>2];o[e+4>>2]=o[t+4>>2];o[e+8>>2]=o[t+8>>2];o[e+12>>2]=o[t+12>>2];return}function Su(e,t){e=e|0;t=t|0;o[e+16>>2]=o[t>>2];o[e+16+4>>2]=o[t+4>>2];o[e+16+8>>2]=o[t+8>>2];o[e+16+12>>2]=o[t+12>>2];return}function Ru(e,t){e=e|0;t=t|0;o[e+88>>2]=t;return}function ju(e,t){e=e|0;t=t|0;o[e+36>>2]=o[t>>2];o[e+36+4>>2]=o[t+4>>2];o[e+36+8>>2]=o[t+8>>2];o[e+36+12>>2]=o[t+12>>2];return}function Iu(e,t){e=e|0;t=t|0;n[e+84>>0]=t&1;return}function Tu(e,t){e=e|0;t=+t;c[e+32>>2]=t;return}function Du(e,t){e=e|0;t=t|0;o[e+68>>2]=o[t>>2];o[e+68+4>>2]=o[t+4>>2];o[e+68+8>>2]=o[t+8>>2];o[e+68+12>>2]=o[t+12>>2];return}function Ou(e,t){e=e|0;t=t|0;o[e+52>>2]=o[t>>2];o[e+52+4>>2]=o[t+4>>2];o[e+52+8>>2]=o[t+8>>2];o[e+52+12>>2]=o[t+12>>2];return}function Lu(e){e=e|0;if(!e)return;qa(e);return}function xu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Mu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Pu(e,t){e=e|0;t=t|0;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(135)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}QO(i,e,t,16384,0,0);return i|0}function Wu(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;o[5637]=(o[5637]|0)+1;n=Qa(135)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}QO(n,e,t,i&65535,0,0);return n|0}function Bu(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;o[5637]=(o[5637]|0)+1;r=Qa(135)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}QO(r,e,t,i&65535,n,0);return r|0}function Au(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0;o[5637]=(o[5637]|0)+1;_=Qa(135)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}QO(_,e,t,i&65535,n,r);return _|0}function Fu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Gu(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(79)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}SO(t,e);return t|0}function Eu(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Vu(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function Nu(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Xu(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function Hu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Zu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Uu(e,t){e=e|0;t=t|0;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(99)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}GO(i,e,t,1);return i|0}function zu(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;o[5637]=(o[5637]|0)+1;n=Qa(99)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}GO(n,e,t,i);return n|0}function Yu(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Ku(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Qu(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function qu(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(79)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;o[i+4>>2]=10;o[i>>2]=4976;o[i+56>>2]=0;c[i+32>>2]=t*.5;c[i+36>>2]=e;c[i+40>>2]=e;c[i+44>>2]=0;return i|0}function Ju(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function $u(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function eb(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function tb(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function ib(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function nb(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(79)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;o[i+4>>2]=10;o[i>>2]=5076;o[i+56>>2]=2;c[i+32>>2]=e;c[i+36>>2]=e;c[i+40>>2]=t*.5;c[i+44>>2]=0;return i|0}function rb(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function ob(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function _b(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function sb(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function ab(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function cb(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(79)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;o[i>>2]=4876;o[i+4>>2]=10;o[i+56>>2]=1;c[i+32>>2]=e;c[i+36>>2]=t*.5;c[i+40>>2]=e;c[i+44>>2]=0;return i|0}function fb(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function pb(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function lb(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function ub(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function bb(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function db(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function hb(e){e=e|0;var t=0,i=0;while(1){t=Qa(5260)|0;if(t|0){i=6;break}t=o[5831]|0;o[5831]=t+0;if(!t){i=5;break}VP[t&3]()}if((i|0)==5){e=Qe(4)|0;o[e>>2]=8308;ft(e|0,2416,215)}else if((i|0)==6){EC(t,e);return t|0}return 0}function mb(e,t){e=e|0;t=t|0;return DP[o[(o[e>>2]|0)+40>>2]&31](e,t)|0}function yb(e){e=e|0;return fP[o[(o[e>>2]|0)+36>>2]&127](e)|0}function gb(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function vb(e){e=e|0;if(o[e+204>>2]&3|0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function Cb(e,t){e=e|0;t=t|0;if(!t?o[e+204>>2]&3|0:0)return;if((o[e+216>>2]&-2|0)!=4)o[e+216>>2]=1;c[e+220>>2]=0;return}function wb(e,t){e=e|0;t=t|0;o[e+216>>2]=t;return}function kb(e){e=e|0;return o[e+204>>2]|0}function Sb(e){e=e|0;return o[e+192>>2]|0}function Rb(e){e=e|0;return e+4|0}function jb(e){e=e|0;e=o[e+216>>2]|0;return(e|0)!=5&(e|0)!=2|0}function Ib(e){e=e|0;return(o[e+204>>2]&2|0)!=0|0}function Tb(e,t){e=e|0;t=t|0;if((o[e+216>>2]&-2|0)==4)return;o[e+216>>2]=t;return}function Db(e,t,i){e=e|0;t=t|0;i=i|0;o[e+164>>2]=o[t>>2];o[e+164+4>>2]=o[t+4>>2];o[e+164+8>>2]=o[t+8>>2];o[e+164+12>>2]=o[t+12>>2];if(!(+c[t>>2]!=1)?!(+c[t+4>>2]!=1):0)i=+c[t+8>>2]!=1?i:0;o[e+180>>2]=i;return}function Ob(e,t){e=e|0;t=+t;c[e+256>>2]=t;return}function Lb(e,t){e=e|0;t=+t;c[e+252>>2]=t;return}function xb(e,t){e=e|0;t=t|0;o[e+204>>2]=t;return}function Mb(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function Pb(e,t){e=e|0;t=+t;c[e+184>>2]=t;return}function Wb(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+224>>2]=t;return}function Bb(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+228>>2]=t;return}function Ab(e,t){e=e|0;t=+t;o[e+284>>2]=(o[e+284>>2]|0)+1;c[e+232>>2]=t;return}function Fb(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[t+16>>2];o[e+20+4>>2]=o[t+16+4>>2];o[e+20+8>>2]=o[t+16+8>>2];o[e+20+12>>2]=o[t+16+12>>2];o[e+36>>2]=o[t+32>>2];o[e+36+4>>2]=o[t+32+4>>2];o[e+36+8>>2]=o[t+32+8>>2];o[e+36+12>>2]=o[t+32+12>>2];o[e+52>>2]=o[t+48>>2];o[e+52+4>>2]=o[t+48+4>>2];o[e+52+8>>2]=o[t+48+8>>2];o[e+52+12>>2]=o[t+48+12>>2];return}function Gb(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Eb(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Vb(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Nb(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Xb(e,t){e=e|0;t=t|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,1,-1);return}function Hb(e,t,i){e=e|0;t=t|0;i=i|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,-1);return}function Zb(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,n);return}function Ub(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;ok(e,t,i,n);return}function zb(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=p;p=p+48|0;r=o[t+192>>2]|0;HP[o[(o[r>>2]|0)+8>>2]&127](r,t+4|0,n+32|0,n+16|0);o[n>>2]=3544;o[n+4>>2]=t;o[n+8>>2]=e;o[n+12>>2]=i;e=o[e+68>>2]|0;HP[o[(o[e>>2]|0)+28>>2]&127](e,n+32|0,n+16|0,n);p=n;return}function Yb(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;zw(e,t,i,n,r,o);return}function Kb(e){e=e|0;return o[e+68>>2]|0}function Qb(e){e=e|0;return e+28|0}function qb(e){e=e|0;return o[e+24>>2]|0}function Jb(e){e=e|0;e=o[e+68>>2]|0;return fP[o[(o[e>>2]|0)+36>>2]&127](e)|0}function $b(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+32>>2]&127](e,t,i,n);return}function ed(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function td(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0;d=p;p=p+128|0;o[e+72>>2]=(o[e+72>>2]|0)+1;o[d>>2]=o[t>>2];o[d+4>>2]=o[t+4>>2];o[d+8>>2]=o[t+8>>2];o[d+12>>2]=o[t+12>>2];o[d+16>>2]=o[t+16>>2];o[d+16+4>>2]=o[t+16+4>>2];o[d+16+8>>2]=o[t+16+8>>2];o[d+16+12>>2]=o[t+16+12>>2];o[d+32>>2]=o[t+32>>2];o[d+32+4>>2]=o[t+32+4>>2];o[d+32+8>>2]=o[t+32+8>>2];o[d+32+12>>2]=o[t+32+12>>2];o[d+48>>2]=o[t+48>>2];o[d+48+4>>2]=o[t+48+4>>2];o[d+48+8>>2]=o[t+48+8>>2];o[d+48+12>>2]=o[t+48+12>>2];u=o[i+4>>2]|0;b=+wP[o[(o[i>>2]|0)+48>>2]&15](i);HP[o[(o[i>>2]|0)+8>>2]&127](i,t,d+112|0,d+96|0);r=+c[d+112>>2];if(+c[e+36>>2]>r)c[e+36>>2]=r;r=+c[d+96>>2];if(+c[e+52>>2]<r)c[e+52>>2]=r;r=+c[d+112+4>>2];if(+c[e+40>>2]>r)c[e+40>>2]=r;r=+c[d+96+4>>2];if(+c[e+56>>2]<r)c[e+56>>2]=r;r=+c[d+112+8>>2];if(+c[e+44>>2]>r)c[e+44>>2]=r;r=+c[d+96+8>>2];if(+c[e+60>>2]<r)c[e+60>>2]=r;f=o[e+68>>2]|0;if(!f){f=e+20|0;a=0}else{o[d+64>>2]=o[d+112>>2];o[d+64+4>>2]=o[d+112+4>>2];o[d+64+8>>2]=o[d+112+8>>2];o[d+64+12>>2]=o[d+112+12>>2];o[d+64+16>>2]=o[d+96>>2];o[d+64+16+4>>2]=o[d+96+4>>2];o[d+64+16+8>>2]=o[d+96+8>>2];o[d+64+16+12>>2]=o[d+96+12>>2];a=o[e+20>>2]|0;t=o[f+4>>2]|0;if(!t){o[5637]=(o[5637]|0)+1;t=Qa(63)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}_=t;s=_+44|0;do{o[_>>2]=0;_=_+4|0}while((_|0)<(s|0))}else o[f+4>>2]=0;o[t+32>>2]=0;o[t+36>>2]=a;o[t+40>>2]=0;o[t>>2]=o[d+64>>2];o[t+4>>2]=o[d+64+4>>2];o[t+8>>2]=o[d+64+8>>2];o[t+12>>2]=o[d+64+12>>2];o[t+16>>2]=o[d+64+16>>2];o[t+20>>2]=o[d+64+20>>2];o[t+24>>2]=o[d+64+24>>2];o[t+28>>2]=o[d+64+28>>2];EL(f,o[f>>2]|0,t);o[f+12>>2]=(o[f+12>>2]|0)+1;f=e+20|0;a=t}t=o[f>>2]|0;if((t|0)==(o[e+24>>2]|0)?(l=t|0?t<<1:1,(t|0)<(l|0)):0){if(!l)s=0;else{o[5637]=(o[5637]|0)+1;t=Qa((l*80|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}s=t;t=o[f>>2]|0}if((t|0)>0){_=0;do{h=s+(_*80|0)|0;m=o[e+28>>2]|0;y=m+(_*80|0)|0;o[h>>2]=o[y>>2];o[h+4>>2]=o[y+4>>2];o[h+8>>2]=o[y+8>>2];o[h+12>>2]=o[y+12>>2];h=s+(_*80|0)+16|0;y=m+(_*80|0)+16|0;o[h>>2]=o[y>>2];o[h+4>>2]=o[y+4>>2];o[h+8>>2]=o[y+8>>2];o[h+12>>2]=o[y+12>>2];h=s+(_*80|0)+32|0;y=m+(_*80|0)+32|0;o[h>>2]=o[y>>2];o[h+4>>2]=o[y+4>>2];o[h+8>>2]=o[y+8>>2];o[h+12>>2]=o[y+12>>2];h=s+(_*80|0)+48|0;y=m+(_*80|0)+48|0;o[h>>2]=o[y>>2];o[h+4>>2]=o[y+4>>2];o[h+8>>2]=o[y+8>>2];o[h+12>>2]=o[y+12>>2];h=s+(_*80|0)+64|0;m=m+(_*80|0)+64|0;o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];_=_+1|0}while((_|0)!=(t|0))}t=o[e+28>>2]|0;if(t|0){if(n[e+32>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+28>>2]=0}n[e+32>>0]=1;o[e+28>>2]=s;o[e+24>>2]=l;t=o[f>>2]|0}y=o[e+28>>2]|0;m=y+(t*80|0)|0;o[m>>2]=o[d>>2];o[m+4>>2]=o[d+4>>2];o[m+8>>2]=o[d+8>>2];o[m+12>>2]=o[d+12>>2];m=y+(t*80|0)+16|0;o[m>>2]=o[d+16>>2];o[m+4>>2]=o[d+16+4>>2];o[m+8>>2]=o[d+16+8>>2];o[m+12>>2]=o[d+16+12>>2];m=y+(t*80|0)+32|0;o[m>>2]=o[d+32>>2];o[m+4>>2]=o[d+32+4>>2];o[m+8>>2]=o[d+32+8>>2];o[m+12>>2]=o[d+32+12>>2];m=y+(t*80|0)+48|0;o[m>>2]=o[d+48>>2];o[m+4>>2]=o[d+48+4>>2];o[m+8>>2]=o[d+48+8>>2];o[m+12>>2]=o[d+48+12>>2];y=y+(t*80|0)+64|0;o[y>>2]=i;o[y+4>>2]=u;c[y+8>>2]=b;o[y+12>>2]=a;o[f>>2]=(o[f>>2]|0)+1;p=d;return}function id(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(115)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}WS(e,1,0);return e|0}function nd(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(115)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}WS(t,e,0);return t|0}function rd(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function od(e,t){e=e|0;t=t|0;return o[(o[e+28>>2]|0)+(t*80|0)+64>>2]|0}function _d(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function sd(e){e=e|0;return o[e+20>>2]|0}function ad(e,t){e=e|0;t=t|0;MS(e,t);return}function cd(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function fd(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function pd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function ld(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function ud(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function bd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function dd(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(99)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;c[i+60>>2]=e;c[i+64>>2]=t;o[i+4>>2]=11;c[i+56>>2]=e/+X(+(e*e+t*t));o[i>>2]=5456;o[i+68>>2]=1;o[i+72>>2]=0;o[i+76>>2]=2;c[i+36>>2]=e;c[i+32>>2]=t;c[i+40>>2]=e;return i|0}function hd(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function md(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function yd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function gd(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(99)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;c[i+60>>2]=e;c[i+64>>2]=t;o[i+4>>2]=11;c[i+56>>2]=e/+X(+(e*e+t*t));o[i>>2]=5356;o[i+68>>2]=0;o[i+72>>2]=2;o[i+76>>2]=1;c[i+32>>2]=e;c[i+40>>2]=t;c[i+36>>2]=e;return i|0}function vd(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Cd(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function wd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function kd(e,t){e=+e;t=+t;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(99)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+8>>2]=0;o[i+12>>2]=-1;o[i+16>>2]=1065353216;o[i+20>>2]=1065353216;o[i+24>>2]=1065353216;c[i+28>>2]=0;c[i+48>>2]=.03999999910593033;o[i>>2]=5256;c[i+60>>2]=e;c[i+64>>2]=t;o[i+4>>2]=11;o[i+68>>2]=0;o[i+72>>2]=1;o[i+76>>2]=2;c[i+32>>2]=e;c[i+36>>2]=t;c[i+40>>2]=e;c[i+56>>2]=e/+X(+(e*e+t*t));return i|0}function Sd(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Rd(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function jd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Id(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;o[5637]=(o[5637]|0)+1;i=Qa(627)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}Ay(i,5,e);o[i>>2]=7132;_=i+300|0;o[_>>2]=o[t>>2];o[_+4>>2]=o[t+4>>2];o[_+8>>2]=o[t+8>>2];o[_+12>>2]=o[t+12>>2];r=i+316|0;o[r>>2]=o[t+16>>2];o[r+4>>2]=o[t+16+4>>2];o[r+8>>2]=o[t+16+8>>2];o[r+12>>2]=o[t+16+12>>2];e=i+332|0;o[e>>2]=o[t+32>>2];o[e+4>>2]=o[t+32+4>>2];o[e+8>>2]=o[t+32+8>>2];o[e+12>>2]=o[t+32+12>>2];s=i+348|0;o[s>>2]=o[t+48>>2];o[s+4>>2]=o[t+48+4>>2];o[s+8>>2]=o[t+48+8>>2];o[s+12>>2]=o[t+48+12>>2];t=i+364|0;n[i+527>>0]=0;o[t>>2]=o[_>>2];o[t+4>>2]=o[_+4>>2];o[t+8>>2]=o[_+8>>2];o[t+12>>2]=o[_+12>>2];t=i+380|0;o[t>>2]=o[r>>2];o[t+4>>2]=o[r+4>>2];o[t+8>>2]=o[r+8>>2];o[t+12>>2]=o[r+12>>2];t=i+396|0;o[t>>2]=o[e>>2];o[t+4>>2]=o[e+4>>2];o[t+8>>2]=o[e+8>>2];o[t+12>>2]=o[e+12>>2];t=i+412|0;n[i+524>>0]=0;n[i+525>>0]=0;n[i+526>>0]=0;n[i+552>>0]=0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0;c[i+572>>2]=-1;c[i+444>>2]=0xde0b6b000000000;c[i+448>>2]=0xde0b6b000000000;c[i+452>>2]=0xde0b6b000000000;c[i+428>>2]=1;c[i+432>>2]=.30000001192092896;c[i+436>>2]=1;c[i+440>>2]=.009999999776482582;c[i+456>>2]=.05000000074505806;o[i+592>>2]=0;c[i+596>>2]=0;c[i+600>>2]=.699999988079071;c[i+604>>2]=0;return i|0}function Td(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0;o[5637]=(o[5637]|0)+1;_=Qa(627)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}o[_+4>>2]=5;o[_+8>>2]=-1;o[_+12>>2]=-1;c[_+16>>2]=3.4028234663852886e38;n[_+20>>0]=1;n[_+21>>0]=0;o[_+24>>2]=-1;o[_+28>>2]=e;o[_+32>>2]=t;c[_+36>>2]=0;c[_+40>>2]=.30000001192092896;o[_+44>>2]=0;o[_>>2]=7132;t=_+300|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];t=_+316|0;o[t>>2]=o[i+16>>2];o[t+4>>2]=o[i+16+4>>2];o[t+8>>2]=o[i+16+8>>2];o[t+12>>2]=o[i+16+12>>2];t=_+332|0;o[t>>2]=o[i+32>>2];o[t+4>>2]=o[i+32+4>>2];o[t+8>>2]=o[i+32+8>>2];o[t+12>>2]=o[i+32+12>>2];t=_+348|0;o[t>>2]=o[i+48>>2];o[t+4>>2]=o[i+48+4>>2];o[t+8>>2]=o[i+48+8>>2];o[t+12>>2]=o[i+48+12>>2];i=_+364|0;o[i>>2]=o[r>>2];o[i+4>>2]=o[r+4>>2];o[i+8>>2]=o[r+8>>2];o[i+12>>2]=o[r+12>>2];i=_+380|0;o[i>>2]=o[r+16>>2];o[i+4>>2]=o[r+16+4>>2];o[i+8>>2]=o[r+16+8>>2];o[i+12>>2]=o[r+16+12>>2];i=_+396|0;o[i>>2]=o[r+32>>2];o[i+4>>2]=o[r+32+4>>2];o[i+8>>2]=o[r+32+8>>2];o[i+12>>2]=o[r+32+12>>2];i=_+412|0;o[i>>2]=o[r+48>>2];o[i+4>>2]=o[r+48+4>>2];o[i+8>>2]=o[r+48+8>>2];o[i+12>>2]=o[r+48+12>>2];n[_+552>>0]=0;o[_+524>>2]=0;c[_+572>>2]=-1;c[_+444>>2]=0xde0b6b000000000;c[_+448>>2]=0xde0b6b000000000;c[_+452>>2]=0xde0b6b000000000;c[_+428>>2]=1;c[_+432>>2]=.30000001192092896;c[_+436>>2]=1;c[_+440>>2]=.009999999776482582;c[_+456>>2]=.05000000074505806;o[_+592>>2]=0;c[_+596>>2]=0;c[_+600>>2]=.699999988079071;c[_+604>>2]=0;return _|0}function Dd(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function Od(e,t){e=e|0;t=t|0;n[e+552>>0]=t&1;return}function Ld(e){e=e|0;return+ +c[e+16>>2]}function xd(e,t){e=e|0;t=t|0;n[e+524>>0]=t&1;return}function Md(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function Pd(e,t){e=e|0;t=+t;c[e+440>>2]=t;return}function Wd(e,t,i){e=e|0;t=t|0;i=+i;switch(t|0){case 3:{c[e+452>>2]=i;return}case 4:{c[e+448>>2]=i;return}case 5:{c[e+444>>2]=i;return}default:return}}function Bd(e,t){e=e|0;t=+t;c[e+572>>2]=t;n[e+553>>0]=1;return}function Ad(e,t){e=e|0;t=+t;c[e+572>>2]=t;n[e+553>>0]=0;return}function Fd(e,t){e=e|0;t=t|0;EI(e,t);return}function Gd(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,o=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;i=p;p=p+48|0;Kw(e+364|0,i+16|0);_=-+c[i+16>>2];r=-+c[i+16+4>>2];l=-+c[i+16+8>>2];f=+c[i+16+12>>2];o=+c[t>>2];u=+c[t+12>>2];a=+c[t+8>>2];s=+c[t+4>>2];Kw(e+300|0,i);d=+c[i>>2];h=+c[i+12>>2];n=+c[i+8>>2];b=+c[i+4>>2];c[i+32>>2]=d*(f*u-o*_-s*r-a*l)+(f*o+u*_+a*r-s*l)*h+(o*l+(u*r+f*s)-a*_)*n-(u*l+f*a+s*_-o*r)*b;c[i+32+4>>2]=d*(u*l+f*a+s*_-o*r)+(h*(o*l+(u*r+f*s)-a*_)+(f*u-o*_-s*r-a*l)*b)-(f*o+u*_+a*r-s*l)*n;c[i+32+8>>2]=h*(u*l+f*a+s*_-o*r)+(f*u-o*_-s*r-a*l)*n+(f*o+u*_+a*r-s*l)*b-d*(o*l+(u*r+f*s)-a*_);c[i+32+12>>2]=(f*u-o*_-s*r-a*l)*h-d*(f*o+u*_+a*r-s*l)-(o*l+(u*r+f*s)-a*_)*b-(u*l+f*a+s*_-o*r)*n;EI(e,i+32|0);p=i;return}function Ed(e){e=e|0;if(!e)return;qa(e);return}function Vd(){var e=0,t=0;while(1){e=Qa(12)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){c[e>>2]=.30000001192092896;c[e+4>>2]=1;c[e+8>>2]=0;return e|0}return 0}function Nd(e){e=e|0;return+ +c[e+4>>2]}function Xd(e){e=e|0;return+ +c[e+8>>2]}function Hd(e){e=e|0;return+ +c[e>>2]}function Zd(e,t){e=e|0;t=+t;c[e+4>>2]=t;return}function Ud(e,t){e=e|0;t=+t;c[e+8>>2]=t;return}function zd(e,t){e=e|0;t=+t;c[e>>2]=t;return}function Yd(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Kd(e){e=e|0;if(!e)return;qa(e);return}function Qd(e){e=e|0;return~~+c[e+48>>2]|0}function qd(e){e=e|0;return(o[e+44>>2]|0)!=0|0}function Jd(e,t){e=e|0;t=t|0;c[e+48>>2]=+(t|0);return}function $d(e,t){e=e|0;t=t|0;o[e+44>>2]=t&1;return}function eh(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function th(e,t){e=e|0;t=t|0;mR(e,t,1);return}function ih(e,t,i){e=e|0;t=t|0;i=i|0;mR(e,t,i);return}function nh(){var e=0;o[5637]=(o[5637]|0)+1;e=Qa(135)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}hR(e,0,0,16);return e|0}function rh(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function oh(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function _h(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function sh(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function ah(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function ch(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function fh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function ph(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function lh(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(119)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}ZR(t,e,1);return t|0}function uh(e,t){e=e|0;t=t|0;var i=0;o[5637]=(o[5637]|0)+1;i=Qa(119)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}ZR(i,e,t);return i|0}function bh(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function dh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function hh(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function mh(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(79)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}dj(t,e);o[t>>2]=5960;o[t+56>>2]=0;return t|0}function yh(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function gh(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function vh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Ch(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function wh(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function kh(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(79)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}dj(t,e);o[t>>2]=6064;o[t+56>>2]=2;return t|0}function Sh(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Rh(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function jh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Ih(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function Th(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Dh(e){e=e|0;var t=0;o[5637]=(o[5637]|0)+1;t=Qa(79)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}dj(t,e);return t|0}function Oh(e,t,i){e=e|0;t=+t;i=i|0;dP[o[(o[e>>2]|0)+32>>2]&15](e,t,i);return}function Lh(e){e=e|0;return+ +wP[o[(o[e>>2]|0)+48>>2]&15](e)}function xh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+24>>2]&127](e,t);return}function Mh(e,t){e=e|0;t=+t;oP[o[(o[e>>2]|0)+44>>2]&31](e,t);return}function Ph(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Wh(){var e=0,t=0;while(1){e=Qa(196)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){mx(e,0);return e|0}return 0}function Bh(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Ah(){var e=0,t=0,i=0;i=p;p=p+32|0;while(1){e=Qa(92)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){i=Qe(4)|0;o[i>>2]=8308;ft(i|0,2416,215)}else if((t|0)==6){o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=4096;o[i+12>>2]=4096;o[i+16>>2]=0;o[i+20>>2]=1;KT(e,i);p=i;return e|0}return 0}function Fh(e){e=e|0;var t=0,i=0;while(1){t=Qa(92)|0;if(t|0){i=6;break}t=o[5831]|0;o[5831]=t+0;if(!t){i=5;break}VP[t&3]()}if((i|0)==5){e=Qe(4)|0;o[e>>2]=8308;ft(e|0,2416,215)}else if((i|0)==6){KT(t,e);return t|0}return 0}function Gh(e){e=e|0;if(!e)return;qa(e);return}function Eh(){var e=0,t=0;while(1){e=Qa(24)|0;if(e|0){t=6;break}e=o[5831]|0;o[5831]=e+0;if(!e){t=5;break}VP[e&3]()}if((t|0)==5){t=Qe(4)|0;o[t>>2]=8308;ft(t|0,2416,215)}else if((t|0)==6){o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=4096;o[e+12>>2]=4096;o[e+16>>2]=0;o[e+20>>2]=1;return e|0}return 0}function Vh(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Nh(){var e=0,t=0;o[5637]=(o[5637]|0)+1;e=Qa(219)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}if(!(n[19848]|0)){n[19848]=1;if(!(n[19856]|0)){n[19856]=1;o[5017]=1065353216;o[5018]=0;o[5019]=0;o[5020]=0;o[5021]=0;o[5022]=1065353216;o[5023]=0;o[5024]=0;o[5025]=0;o[5026]=0;o[5027]=1065353216;c[5028]=0}o[5029]=o[5017];o[5030]=o[5018];o[5031]=o[5019];o[5032]=o[5020];o[5033]=o[5021];o[5034]=o[5022];o[5035]=o[5023];o[5036]=o[5024];o[5037]=o[5025];o[5038]=o[5026];o[5039]=o[5027];o[5040]=o[5028];o[5041]=0;o[5042]=0;o[5043]=0;o[5044]=0}if(!(n[19848]|0)){n[19848]=1;if(!(n[19856]|0)){n[19856]=1;o[5017]=1065353216;o[5018]=0;o[5019]=0;o[5020]=0;o[5021]=0;o[5022]=1065353216;o[5023]=0;o[5024]=0;o[5025]=0;o[5026]=0;o[5027]=1065353216;c[5028]=0}o[5029]=o[5017];o[5030]=o[5018];o[5031]=o[5019];o[5032]=o[5020];o[5033]=o[5021];o[5034]=o[5022];o[5035]=o[5023];o[5036]=o[5024];o[5037]=o[5025];o[5038]=o[5026];o[5039]=o[5027];o[5040]=o[5028];o[5041]=0;o[5042]=0;o[5043]=0;o[5044]=0}o[e>>2]=8060;t=e+4|0;o[t>>2]=o[5029];o[t+4>>2]=o[5030];o[t+8>>2]=o[5031];o[t+12>>2]=o[5032];t=e+20|0;o[t>>2]=o[5033];o[t+4>>2]=o[5034];o[t+8>>2]=o[5035];o[t+12>>2]=o[5036];t=e+36|0;o[t>>2]=o[5037];o[t+4>>2]=o[5038];o[t+8>>2]=o[5039];o[t+12>>2]=o[5040];t=e+52|0;o[t>>2]=o[5041];o[t+4>>2]=o[5042];o[t+8>>2]=o[5043];o[t+12>>2]=o[5044];t=e+68|0;o[t>>2]=o[5029];o[t+4>>2]=o[5030];o[t+8>>2]=o[5031];o[t+12>>2]=o[5032];t=e+84|0;o[t>>2]=o[5033];o[t+4>>2]=o[5034];o[t+8>>2]=o[5035];o[t+12>>2]=o[5036];t=e+100|0;o[t>>2]=o[5037];o[t+4>>2]=o[5038];o[t+8>>2]=o[5039];o[t+12>>2]=o[5040];t=e+116|0;o[t>>2]=o[5041];o[t+4>>2]=o[5042];o[t+8>>2]=o[5043];o[t+12>>2]=o[5044];t=e+132|0;o[t>>2]=o[5029];o[t+4>>2]=o[5030];o[t+8>>2]=o[5031];o[t+12>>2]=o[5032];t=e+148|0;o[t>>2]=o[5033];o[t+4>>2]=o[5034];o[t+8>>2]=o[5035];o[t+12>>2]=o[5036];t=e+164|0;o[t>>2]=o[5037];o[t+4>>2]=o[5038];o[t+8>>2]=o[5039];o[t+12>>2]=o[5040];t=e+180|0;o[t>>2]=o[5041];o[t+4>>2]=o[5042];o[t+8>>2]=o[5043];o[t+12>>2]=o[5044];o[e+196>>2]=0;return e|0}function Xh(e){e=e|0;return}function Hh(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Zh(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;m=+c[e+68>>2];b=+c[e+84>>2];p=+c[e+100>>2];h=+c[e+72>>2];u=+c[e+88>>2];a=+c[e+104>>2];d=+c[e+76>>2];l=+c[e+92>>2];_=+c[e+108>>2];R=-+c[e+116>>2];S=-+c[e+120>>2];i=-+c[e+124>>2];k=+c[e+4>>2];w=+c[e+8>>2];C=+c[e+12>>2];v=+c[e+20>>2];g=+c[e+24>>2];y=+c[e+28>>2];f=+c[e+36>>2];s=+c[e+40>>2];o=+c[e+44>>2];r=k*(m*R+b*S+p*i)+(h*R+u*S+a*i)*w+(d*R+l*S+_*i)*C+ +c[e+52>>2];n=(m*R+b*S+p*i)*v+(h*R+u*S+a*i)*g+(d*R+l*S+_*i)*y+ +c[e+56>>2];i=(m*R+b*S+p*i)*f+(h*R+u*S+a*i)*s+(d*R+l*S+_*i)*o+ +c[e+60>>2];c[t>>2]=m*k+h*w+d*C;c[t+4>>2]=b*k+u*w+l*C;c[t+8>>2]=p*k+a*w+_*C;c[t+12>>2]=0;c[t+16>>2]=m*v+h*g+d*y;c[t+20>>2]=b*v+u*g+l*y;c[t+24>>2]=p*v+a*g+_*y;c[t+28>>2]=0;c[t+32>>2]=m*f+h*s+d*o;c[t+36>>2]=b*f+u*s+l*o;c[t+40>>2]=p*f+a*s+_*o;c[t+44>>2]=0;c[t+48>>2]=r;c[t+52>>2]=n;c[t+56>>2]=i;c[t+60>>2]=0;return}function Uh(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;m=+c[e+68>>2];k=+c[t>>2];h=+c[e+84>>2];w=+c[t+4>>2];d=+c[e+100>>2];C=+c[t+8>>2];b=+c[e+72>>2];u=+c[e+88>>2];l=+c[e+104>>2];p=+c[e+76>>2];a=+c[e+92>>2];_=+c[e+108>>2];v=+c[t+16>>2];g=+c[t+20>>2];y=+c[t+24>>2];f=+c[t+32>>2];s=+c[t+36>>2];o=+c[t+40>>2];R=+c[e+116>>2];S=+c[e+120>>2];i=+c[e+124>>2];r=+c[t+48>>2]+(k*R+w*S+C*i);n=v*R+g*S+y*i+ +c[t+52>>2];i=f*R+s*S+o*i+ +c[t+56>>2];c[e+4>>2]=m*k+h*w+d*C;c[e+8>>2]=k*b+w*u+C*l;c[e+12>>2]=k*p+w*a+C*_;c[e+16>>2]=0;c[e+20>>2]=m*v+h*g+d*y;c[e+24>>2]=b*v+u*g+l*y;c[e+28>>2]=p*v+a*g+_*y;c[e+32>>2]=0;c[e+36>>2]=m*f+h*s+d*o;c[e+40>>2]=b*f+u*s+l*o;c[e+44>>2]=p*f+a*s+_*o;c[e+48>>2]=0;c[e+52>>2]=r;c[e+56>>2]=n;c[e+60>>2]=i;c[e+64>>2]=0;return}function zh(e){e=e|0;var t=0,i=0;o[5637]=(o[5637]|0)+1;t=Qa(219)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}if(!(n[19848]|0)){n[19848]=1;if(!(n[19856]|0)){n[19856]=1;o[5017]=1065353216;o[5018]=0;o[5019]=0;o[5020]=0;o[5021]=0;o[5022]=1065353216;o[5023]=0;o[5024]=0;o[5025]=0;o[5026]=0;o[5027]=1065353216;c[5028]=0}o[5029]=o[5017];o[5030]=o[5018];o[5031]=o[5019];o[5032]=o[5020];o[5033]=o[5021];o[5034]=o[5022];o[5035]=o[5023];o[5036]=o[5024];o[5037]=o[5025];o[5038]=o[5026];o[5039]=o[5027];o[5040]=o[5028];o[5041]=0;o[5042]=0;o[5043]=0;o[5044]=0}o[t>>2]=8060;i=t+4|0;o[i>>2]=o[e>>2];o[i+4>>2]=o[e+4>>2];o[i+8>>2]=o[e+8>>2];o[i+12>>2]=o[e+12>>2];i=t+20|0;o[i>>2]=o[e+16>>2];o[i+4>>2]=o[e+16+4>>2];o[i+8>>2]=o[e+16+8>>2];o[i+12>>2]=o[e+16+12>>2];i=t+36|0;o[i>>2]=o[e+32>>2];o[i+4>>2]=o[e+32+4>>2];o[i+8>>2]=o[e+32+8>>2];o[i+12>>2]=o[e+32+12>>2];i=t+52|0;o[i>>2]=o[e+48>>2];o[i+4>>2]=o[e+48+4>>2];o[i+8>>2]=o[e+48+8>>2];o[i+12>>2]=o[e+48+12>>2];i=t+68|0;o[i>>2]=o[5029];o[i+4>>2]=o[5030];o[i+8>>2]=o[5031];o[i+12>>2]=o[5032];i=t+84|0;o[i>>2]=o[5033];o[i+4>>2]=o[5034];o[i+8>>2]=o[5035];o[i+12>>2]=o[5036];i=t+100|0;o[i>>2]=o[5037];o[i+4>>2]=o[5038];o[i+8>>2]=o[5039];o[i+12>>2]=o[5040];i=t+116|0;o[i>>2]=o[5041];o[i+4>>2]=o[5042];o[i+8>>2]=o[5043];o[i+12>>2]=o[5044];i=t+132|0;o[i>>2]=o[e>>2];o[i+4>>2]=o[e+4>>2];o[i+8>>2]=o[e+8>>2];o[i+12>>2]=o[e+12>>2];i=t+148|0;o[i>>2]=o[e+16>>2];o[i+4>>2]=o[e+16+4>>2];o[i+8>>2]=o[e+16+8>>2];o[i+12>>2]=o[e+16+12>>2];i=t+164|0;o[i>>2]=o[e+32>>2];o[i+4>>2]=o[e+32+4>>2];o[i+8>>2]=o[e+32+8>>2];o[i+12>>2]=o[e+32+12>>2];i=t+180|0;o[i>>2]=o[e+48>>2];o[i+4>>2]=o[e+48+4>>2];o[i+8>>2]=o[e+48+8>>2];o[i+12>>2]=o[e+48+12>>2];o[t+196>>2]=0;return t|0}function Yh(e,t){e=e|0;t=t|0;var i=0,n=0;o[5637]=(o[5637]|0)+1;i=Qa(219)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i>>2]=8060;n=i+4|0;o[n>>2]=o[e>>2];o[n+4>>2]=o[e+4>>2];o[n+8>>2]=o[e+8>>2];o[n+12>>2]=o[e+12>>2];n=i+20|0;o[n>>2]=o[e+16>>2];o[n+4>>2]=o[e+16+4>>2];o[n+8>>2]=o[e+16+8>>2];o[n+12>>2]=o[e+16+12>>2];n=i+36|0;o[n>>2]=o[e+32>>2];o[n+4>>2]=o[e+32+4>>2];o[n+8>>2]=o[e+32+8>>2];o[n+12>>2]=o[e+32+12>>2];n=i+52|0;o[n>>2]=o[e+48>>2];o[n+4>>2]=o[e+48+4>>2];o[n+8>>2]=o[e+48+8>>2];o[n+12>>2]=o[e+48+12>>2];n=i+68|0;o[n>>2]=o[t>>2];o[n+4>>2]=o[t+4>>2];o[n+8>>2]=o[t+8>>2];o[n+12>>2]=o[t+12>>2];n=i+84|0;o[n>>2]=o[t+16>>2];o[n+4>>2]=o[t+16+4>>2];o[n+8>>2]=o[t+16+8>>2];o[n+12>>2]=o[t+16+12>>2];n=i+100|0;o[n>>2]=o[t+32>>2];o[n+4>>2]=o[t+32+4>>2];o[n+8>>2]=o[t+32+8>>2];o[n+12>>2]=o[t+32+12>>2];n=i+116|0;o[n>>2]=o[t+48>>2];o[n+4>>2]=o[t+48+4>>2];o[n+8>>2]=o[t+48+8>>2];o[n+12>>2]=o[t+48+12>>2];t=i+132|0;o[t>>2]=o[e>>2];o[t+4>>2]=o[e+4>>2];o[t+8>>2]=o[e+8>>2];o[t+12>>2]=o[e+12>>2];t=i+148|0;o[t>>2]=o[e+16>>2];o[t+4>>2]=o[e+16+4>>2];o[t+8>>2]=o[e+16+8>>2];o[t+12>>2]=o[e+16+12>>2];t=i+164|0;o[t>>2]=o[e+32>>2];o[t+4>>2]=o[e+32+4>>2];o[t+8>>2]=o[e+32+8>>2];o[t+12>>2]=o[e+32+12>>2];t=i+180|0;o[t>>2]=o[e+48>>2];o[t+4>>2]=o[e+48+4>>2];o[t+8>>2]=o[e+48+8>>2];o[t+12>>2]=o[e+48+12>>2];o[i+196>>2]=0;return i|0}function Kh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+8>>2]&127](e,t);return}function Qh(e){e=e|0;return e+4|0}function qh(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+12>>2]&127](e,t);return}function Jh(e,t){e=e|0;t=t|0;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[t+16>>2];o[e+20+4>>2]=o[t+16+4>>2];o[e+20+8>>2]=o[t+16+8>>2];o[e+20+12>>2]=o[t+16+12>>2];o[e+36>>2]=o[t+32>>2];o[e+36+4>>2]=o[t+32+4>>2];o[e+36+8>>2]=o[t+32+8>>2];o[e+36+12>>2]=o[t+32+12>>2];o[e+52>>2]=o[t+48>>2];o[e+52+4>>2]=o[t+48+4>>2];o[e+52+8>>2]=o[t+48+8>>2];o[e+52+12>>2]=o[t+48+12>>2];return}function $h(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function em(e){e=e|0;var t=0,i=0;while(1){t=Qa(8)|0;if(t|0){i=6;break}t=o[5831]|0;o[5831]=t+0;if(!t){i=5;break}VP[t&3]()}if((i|0)==5){e=Qe(4)|0;o[e>>2]=8308;ft(e|0,2416,215)}else if((i|0)==6){o[t>>2]=7988;o[t+4>>2]=e;return t|0}return 0}function tm(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function im(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+64>>2]&127](e,t);return}function nm(e,t){e=e|0;t=t|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,2,-3);return}function rm(e,t,i){e=e|0;t=t|0;i=i|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,-3);return}function om(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,n);return}function _m(e,t){e=e|0;t=t|0;EP[o[(o[e>>2]|0)+56>>2]&127](e,t,0);\nreturn}function sm(e,t,i){e=e|0;t=t|0;i=i|0;EP[o[(o[e>>2]|0)+56>>2]&127](e,t,i);return}function am(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+84>>2]&127](e,t);return}function cm(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+88>>2]&127](e,t,i,n);return}function fm(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0;o[5637]=(o[5637]|0)+1;r=Qa(343)|0;if(!r)s=0;else{o[(r+4+15&-16)+-4>>2]=r;s=r+4+15&-16}n[s+20>>0]=1;o[s+16>>2]=0;o[s+8>>2]=0;o[s+12>>2]=0;o[s+24>>2]=e;c[s+28>>2]=0;o[s+32>>2]=0;o[s+36>>2]=1;c[s+40>>2]=1;n[s+44>>0]=1;o[s+48>>2]=0;n[s+52>>0]=0;n[s+53>>0]=1;n[s+54>>0]=1;c[s+56>>2]=.03999999910593033;n[s+60>>0]=0;c[s+64>>2]=0;o[s+68>>2]=t;o[s+72>>2]=0;n[s+76>>0]=1;o[s+80>>2]=0;o[s+84>>2]=0;o[s+88>>2]=0;c[s+92>>2]=.6000000238418579;c[s+96>>2]=1;c[s+100>>2]=.30000001192092896;c[s+104>>2]=.01666666753590107;c[s+108>>2]=0;c[s+116>>2]=20;o[s+112>>2]=10;c[s+124>>2]=.20000000298023224;c[s+128>>2]=.800000011920929;c[s+132>>2]=0;c[s+120>>2]=1;o[s+136>>2]=1;c[s+140>>2]=-.03999999910593033;c[s+144>>2]=.10000000149011612;c[s+148>>2]=0;c[s+152>>2]=.8500000238418579;o[s+156>>2]=260;o[s+160>>2]=2;o[s+164>>2]=128;c[s+168>>2]=100;c[s+172>>2]=1.0000000150474662e30;o[s>>2]=7656;n[s+192>>0]=1;o[s+188>>2]=0;o[s+180>>2]=0;o[s+184>>2]=0;t=s+196|0;o[t>>2]=0;_=s+200|0;o[_>>2]=i;n[s+224>>0]=1;o[s+220>>2]=0;o[s+212>>2]=0;o[s+216>>2]=0;n[s+244>>0]=1;o[s+240>>2]=0;o[s+232>>2]=0;o[s+236>>2]=0;o[s+248>>2]=0;o[s+252>>2]=-1054867456;r=s+256|0;n[s+274>>0]=0;n[s+275>>0]=0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;n[s+292>>0]=1;o[s+288>>2]=0;o[s+280>>2]=0;o[s+284>>2]=0;o[s+296>>2]=0;n[s+300>>0]=1;n[s+320>>0]=1;o[s+316>>2]=0;o[s+308>>2]=0;o[s+312>>2]=0;if(!i){o[5637]=(o[5637]|0)+1;r=Qa(223)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[r>>2]=7540;n[r+20>>0]=1;o[r+16>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;n[r+40>>0]=1;o[r+36>>2]=0;o[r+28>>2]=0;o[r+32>>2]=0;n[r+60>>0]=1;o[r+56>>2]=0;o[r+48>>2]=0;o[r+52>>2]=0;n[r+80>>0]=1;o[r+76>>2]=0;o[r+68>>2]=0;o[r+72>>2]=0;n[r+100>>0]=1;o[r+96>>2]=0;o[r+88>>2]=0;o[r+92>>2]=0;n[r+120>>0]=1;o[r+116>>2]=0;o[r+108>>2]=0;o[r+112>>2]=0;n[r+140>>0]=1;o[r+136>>2]=0;o[r+128>>2]=0;o[r+132>>2]=0;n[r+160>>0]=1;o[r+156>>2]=0;o[r+148>>2]=0;o[r+152>>2]=0;n[r+180>>0]=1;o[r+176>>2]=0;o[r+168>>2]=0;o[r+172>>2]=0;o[r+192>>2]=13;o[r+196>>2]=14;o[r+200>>2]=0;o[_>>2]=r;n[s+273>>0]=1}else n[s+273>>0]=0;o[5637]=(o[5637]|0)+1;r=Qa(87)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[r>>2]=4488;n[r+20>>0]=1;o[r+16>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;n[r+40>>0]=1;o[r+36>>2]=0;o[r+28>>2]=0;o[r+32>>2]=0;n[r+60>>0]=1;o[r+56>>2]=0;o[r+48>>2]=0;o[r+52>>2]=0;n[r+64>>0]=1;o[s+204>>2]=r;n[s+272>>0]=1;o[5637]=(o[5637]|0)+1;r=Qa(107)|0;if(!r){i=0;r=o[_>>2]|0;o[i>>2]=7896;_=i+4|0;o[_>>2]=0;_=i+8|0;o[_>>2]=r;_=i+12|0;o[_>>2]=0;_=i+16|0;o[_>>2]=0;_=i+20|0;o[_>>2]=0;_=i+24|0;o[_>>2]=e;e=i+44|0;n[e>>0]=1;e=i+40|0;o[e>>2]=0;e=i+32|0;o[e>>2]=0;e=i+36|0;o[e>>2]=0;e=i+64|0;n[e>>0]=1;e=i+60|0;o[e>>2]=0;e=i+52|0;o[e>>2]=0;e=i+56|0;o[e>>2]=0;e=i+84|0;n[e>>0]=1;e=i+80|0;o[e>>2]=0;e=i+72|0;o[e>>2]=0;e=i+76|0;o[e>>2]=0;o[t>>2]=i;return s|0}o[(r+4+15&-16)+-4>>2]=r;i=r+4+15&-16;r=o[_>>2]|0;o[i>>2]=7896;_=i+4|0;o[_>>2]=0;_=i+8|0;o[_>>2]=r;_=i+12|0;o[_>>2]=0;_=i+16|0;o[_>>2]=0;_=i+20|0;o[_>>2]=0;_=i+24|0;o[_>>2]=e;e=i+44|0;n[e>>0]=1;e=i+40|0;o[e>>2]=0;e=i+32|0;o[e>>2]=0;e=i+36|0;o[e>>2]=0;e=i+64|0;n[e>>0]=1;e=i+60|0;o[e>>2]=0;e=i+52|0;o[e>>2]=0;e=i+56|0;o[e>>2]=0;e=i+84|0;n[e>>0]=1;e=i+80|0;o[e>>2]=0;e=i+72|0;o[e>>2]=0;e=i+76|0;o[e>>2]=0;o[t>>2]=i;return s|0}function pm(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;ok(e,t,i,n);return}function lm(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=p;p=p+48|0;r=o[t+192>>2]|0;HP[o[(o[r>>2]|0)+8>>2]&127](r,t+4|0,n+32|0,n+16|0);o[n>>2]=3544;o[n+4>>2]=t;o[n+8>>2]=e;o[n+12>>2]=i;e=o[e+68>>2]|0;HP[o[(o[e>>2]|0)+28>>2]&127](e,n+32|0,n+16|0,n);p=n;return}function um(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;zw(e,t,i,n,r,o);return}function bm(e){e=e|0;return o[e+68>>2]|0}function dm(e){e=e|0;return e+28|0}function hm(e){e=e|0;return o[e+24>>2]|0}function mm(e){e=e|0;var t=0;t=p;p=p+16|0;if(!(n[19896]|0))n[19896]=1;aP[o[(o[e>>2]|0)+76>>2]&127](t,e);o[5650]=o[t>>2];o[5651]=o[t+4>>2];o[5652]=o[t+8>>2];o[5653]=o[t+12>>2];p=t;return 22600}function ym(e){e=e|0;e=o[e+68>>2]|0;return fP[o[(o[e>>2]|0)+36>>2]&127](e)|0}function gm(e){e=e|0;var t=0,i=0;if(n[19904]|0){t=e+92|0;e=22616;i=e+84|0;do{o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0}while((e|0)<(i|0));return 22616}n[19904]=1;c[5654]=.6000000238418579;c[5655]=1;c[5656]=.30000001192092896;c[5657]=.01666666753590107;c[5658]=0;c[5660]=20;o[5659]=10;c[5662]=.20000000298023224;c[5663]=.800000011920929;c[5664]=0;c[5661]=1;o[5665]=1;c[5666]=-.03999999910593033;c[5667]=.10000000149011612;c[5668]=0;c[5669]=.8500000238418579;o[5670]=260;o[5671]=2;o[5672]=128;c[5673]=100;c[5674]=1.0000000150474662e30;t=e+92|0;e=22616;i=e+84|0;do{o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0}while((e|0)<(i|0));return 22616}function vm(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+32>>2]&127](e,t,i,n);return}function Cm(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+68>>2]&127](e,t);return}function wm(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+60>>2]&127](e,t);return}function km(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+92>>2]&127](e,t);return}function Sm(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+72>>2]&127](e,t);return}function Rm(e,t){e=e|0;t=+t;return XP[o[(o[e>>2]|0)+52>>2]&1](e,t,1,.01666666753590107)|0}function jm(e,t,i){e=e|0;t=+t;i=i|0;return XP[o[(o[e>>2]|0)+52>>2]&1](e,t,i,.01666666753590107)|0}function Im(e,t,i,n){e=e|0;t=+t;i=i|0;n=+n;return XP[o[(o[e>>2]|0)+52>>2]&1](e,t,i,n)|0}function Tm(e){e=e|0;if(!e)return;qa(e);return}function Dm(e){e=e|0;return+ +c[e+28>>2]}function Om(e){e=e|0;return+ +c[e+36>>2]}function Lm(e){e=e|0;return o[e+8>>2]|0}function xm(e){e=e|0;return(n[e+25>>0]|0)!=0|0}function Mm(e){e=e|0;return(n[e+24>>0]|0)!=0|0}function Pm(e){e=e|0;return o[e+4>>2]|0}function Wm(e){e=e|0;return+ +c[e+12>>2]}function Bm(e){e=e|0;return+ +c[e>>2]}function Am(e){e=e|0;return(n[e+16>>0]|0)!=0|0}function Fm(e){e=e|0;return(n[e+32>>0]|0)!=0|0}function Gm(e){e=e|0;return(n[e+26>>0]|0)!=0|0}function Em(e,t){e=e|0;t=+t;c[e+28>>2]=t;return}function Vm(e,t){e=e|0;t=+t;c[e+36>>2]=t;return}function Nm(e,t){e=e|0;t=t|0;o[e+8>>2]=t;return}function Xm(e,t){e=e|0;t=t|0;n[e+25>>0]=t&1;return}function Hm(e,t){e=e|0;t=t|0;n[e+24>>0]=t&1;return}function Zm(e,t){e=e|0;t=t|0;o[e+4>>2]=t;return}function Um(e,t){e=e|0;t=+t;c[e+12>>2]=t;return}function zm(e,t){e=e|0;t=+t;c[e>>2]=t;return}function Ym(e,t){e=e|0;t=t|0;n[e+16>>0]=t&1;return}function Km(e,t){e=e|0;t=t|0;n[e+32>>0]=t&1;return}function Qm(e,t){e=e|0;t=t|0;n[e+26>>0]=t&1;return}function qm(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function Jm(e,t){e=e|0;t=t|0;return DP[o[(o[e>>2]|0)+40>>2]&31](e,t)|0}function $m(e){e=e|0;return fP[o[(o[e>>2]|0)+36>>2]&127](e)|0}function ey(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function ty(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+64>>2]&127](e,t);return}function iy(e,t){e=e|0;t=t|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,1,-1);return}function ny(e,t,i){e=e|0;t=t|0;i=i|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,-1);return}function ry(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,n);return}function oy(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;ok(e,t,i,n);return}function _y(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=p;p=p+48|0;r=o[t+192>>2]|0;HP[o[(o[r>>2]|0)+8>>2]&127](r,t+4|0,n+32|0,n+16|0);o[n>>2]=3544;o[n+4>>2]=t;o[n+8>>2]=e;o[n+12>>2]=i;e=o[e+68>>2]|0;HP[o[(o[e>>2]|0)+28>>2]&127](e,n+32|0,n+16|0,n);p=n;return}function sy(e,t,i,n,r,o){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;o=+o;zw(e,t,i,n,r,o);return}function ay(e){e=e|0;return o[e+68>>2]|0}function cy(e){e=e|0;return e+28|0}function fy(e){e=e|0;return o[e+24>>2]|0}function py(e){e=e|0;e=o[e+68>>2]|0;return fP[o[(o[e>>2]|0)+36>>2]&127](e)|0}function ly(e){e=e|0;var t=0,i=0;if(n[19912]|0){t=e+92|0;e=22700;i=e+84|0;do{o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0}while((e|0)<(i|0));return 22700}n[19912]=1;c[5675]=.6000000238418579;c[5676]=1;c[5677]=.30000001192092896;c[5678]=.01666666753590107;c[5679]=0;c[5681]=20;o[5680]=10;c[5683]=.20000000298023224;c[5684]=.800000011920929;c[5685]=0;c[5682]=1;o[5686]=1;c[5687]=-.03999999910593033;c[5688]=.10000000149011612;c[5689]=0;c[5690]=.8500000238418579;o[5691]=260;o[5692]=2;o[5693]=128;c[5694]=100;c[5695]=1.0000000150474662e30;t=e+92|0;e=22700;i=e+84|0;do{o[e>>2]=o[t>>2];e=e+4|0;t=t+4|0}while((e|0)<(i|0));return 22700}function uy(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+32>>2]&127](e,t,i,n);return}function by(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+68>>2]&127](e,t);return}function dy(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function hy(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;o[5637]=(o[5637]|0)+1;n=Qa(1331)|0;if(!n)n=0;else{o[(n+4+15&-16)+-4>>2]=n;n=n+4+15&-16}sT(n,e,t,i);return n|0}function my(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0;o[5637]=(o[5637]|0)+1;_=Qa(1331)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}_T(_,e,t,i,n,r);return _|0}function yy(e,t){e=e|0;t=t|0;n[e+21>>0]=t&1;return}function gy(e){e=e|0;return+ +c[e+16>>2]}function vy(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+868>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+932>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+996|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+996|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+996|0;c[e>>2]=i;return}function Cy(e,t){e=e|0;t=t|0;var i=0;i=+Ya(+c[t>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+872>>2]=i;i=+Ya(+c[t+4>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;c[e+936>>2]=i;i=+Ya(+c[t+8>>2]);if(i<-3.1415927410125732){i=i+6.2831854820251465;e=e+1e3|0;c[e>>2]=i;return}if(!(i>3.1415927410125732)){e=e+1e3|0;c[e>>2]=i;return}i=i+-6.2831854820251465;e=e+1e3|0;c[e>>2]=i;return}function wy(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function ky(e,t){e=e|0;t=t|0;o[e+680>>2]=o[t>>2];o[e+680+4>>2]=o[t+4>>2];o[e+680+8>>2]=o[t+8>>2];o[e+680+12>>2]=o[t+12>>2];return}function Sy(e,t){e=e|0;t=t|0;o[e+696>>2]=o[t>>2];o[e+696+4>>2]=o[t+4>>2];o[e+696+8>>2]=o[t+8>>2];o[e+696+12>>2]=o[t+12>>2];return}function Ry(e){e=e|0;if(!e)return;_P[o[(o[e>>2]|0)+4>>2]&255](e);return}function jy(e,t,i,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;l=l|0;var b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0;Q=p;p=p+304|0;o[e+188>>2]=-1;Zp(15532);o[e+184>>2]=0;if((i|0)>0){l=0;do{o[(o[t+(l<<2)>>2]|0)+212>>2]=-1;l=l+1|0}while((l|0)!=(i|0))}b=o[e+12>>2]|0;if((b|0)>(i|0))d=e+8|0;else{if((i+1|0)!=0?(o[5637]=(o[5637]|0)+1,d=Qa(((i+1|0)*244|3)+16|0)|0,(d|0)!=0):0){o[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}else d=0;l=o[e+8>>2]|0;if((l|0)>0){b=0;do{z=d+(b*244|0)|0;Y=o[e+16>>2]|0;U=Y+(b*244|0)|0;o[z>>2]=o[U>>2];o[z+4>>2]=o[U+4>>2];o[z+8>>2]=o[U+8>>2];o[z+12>>2]=o[U+12>>2];z=d+(b*244|0)+16|0;U=Y+(b*244|0)+16|0;o[z>>2]=o[U>>2];o[z+4>>2]=o[U+4>>2];o[z+8>>2]=o[U+8>>2];o[z+12>>2]=o[U+12>>2];z=d+(b*244|0)+32|0;U=Y+(b*244|0)+32|0;o[z>>2]=o[U>>2];o[z+4>>2]=o[U+4>>2];o[z+8>>2]=o[U+8>>2];o[z+12>>2]=o[U+12>>2];z=d+(b*244|0)+48|0;U=Y+(b*244|0)+48|0;o[z>>2]=o[U>>2];o[z+4>>2]=o[U+4>>2];o[z+8>>2]=o[U+8>>2];o[z+12>>2]=o[U+12>>2];Wc(d+(b*244|0)+64|0,Y+(b*244|0)+64|0,180)|0;b=b+1|0}while((b|0)!=(l|0))}l=o[e+16>>2]|0;if(l|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=d;o[e+12>>2]=i+1;d=e+8|0;b=i+1|0}Lc(Q|0,0,244)|0;l=o[d>>2]|0;if((l|0)<0){if((b|0)<0){b=o[e+16>>2]|0;if(b|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[b+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=0;o[e+12>>2]=0}do{Y=o[e+16>>2]|0;z=Y+(l*244|0)|0;o[z>>2]=o[Q>>2];o[z+4>>2]=o[Q+4>>2];o[z+8>>2]=o[Q+8>>2];o[z+12>>2]=o[Q+12>>2];z=Y+(l*244|0)+16|0;o[z>>2]=o[Q+16>>2];o[z+4>>2]=o[Q+16+4>>2];o[z+8>>2]=o[Q+16+8>>2];o[z+12>>2]=o[Q+16+12>>2];z=Y+(l*244|0)+32|0;o[z>>2]=o[Q+32>>2];o[z+4>>2]=o[Q+32+4>>2];o[z+8>>2]=o[Q+32+8>>2];o[z+12>>2]=o[Q+32+12>>2];z=Y+(l*244|0)+48|0;o[z>>2]=o[Q+48>>2];o[z+4>>2]=o[Q+48+4>>2];o[z+8>>2]=o[Q+48+8>>2];o[z+12>>2]=o[Q+48+12>>2];Wc(Y+(l*244|0)+64|0,Q+64|0,180)|0;l=l+1|0}while((l|0)!=0)}o[d>>2]=0;if((i|0)>0){y=0;do{d=t+(y<<2)|0;b=zM(e,o[d>>2]|0,+c[f+12>>2])|0;d=o[d>>2]|0;if(!((d|0)==0?1:(o[d+236>>2]&2|0)==0)?+c[d+368>>2]!=0:0){h=o[e+16>>2]|0;l=o[d+528>>2]|0;if(l&2){m=+c[f+76>>2];J=+c[d+420>>2];v=+c[d+424>>2];g=+c[d+428>>2];re=+c[d+4>>2];J=J!=0?1/J:0;ne=+c[d+8>>2];v=v!=0?1/v:0;ie=+c[d+12>>2];g=g!=0?1/g:0;te=+c[d+20>>2];ee=+c[d+24>>2];$=+c[d+28>>2];q=+c[d+36>>2];I=+c[d+40>>2];w=+c[d+44>>2];k=+c[d+352>>2];S=+c[d+356>>2];C=+c[d+360>>2];R=(J*re*re+v*ne*ne+g*ie*ie)*k+(J*re*te+v*ne*ee+g*ie*$)*S+(J*re*q+v*ne*I+g*ie*w)*C;j=(J*te*re+v*ee*ne+g*$*ie)*k+(J*te*te+v*ee*ee+g*$*$)*S+(J*te*q+v*ee*I+g*$*w)*C;w=(J*q*re+v*I*ne+g*w*ie)*k+(J*q*te+v*I*ee+g*w*$)*S+(J*q*q+v*I*I+g*w*w)*C;g=(S*w-C*j)*(S*w-C*j)+(C*R-k*w)*(C*R-k*w)+(k*j-S*R)*(k*j-S*R);if(g>m*m){m=1/+X(+g)*m;v=(S*w-C*j)*m;g=m*(C*R-k*w);m=m*(k*j-S*R)}else{v=S*w-C*j;g=C*R-k*w;m=k*j-S*R}ie=+c[f+12>>2];ne=(v*+c[d+292>>2]+g*+c[d+308>>2]+m*+c[d+324>>2])*ie;re=ie*(v*+c[d+296>>2]+g*+c[d+312>>2]+m*+c[d+328>>2]);c[h+(b*244|0)+224>>2]=+c[h+(b*244|0)+224>>2]-(v*+c[d+288>>2]+g*+c[d+304>>2]+m*+c[d+320>>2])*ie;c[h+(b*244|0)+228>>2]=+c[h+(b*244|0)+228>>2]-ne;c[h+(b*244|0)+232>>2]=+c[h+(b*244|0)+232>>2]-re;l=o[d+528>>2]|0}if(l&4){I=+c[f+12>>2];ae=+c[d+420>>2];ie=+c[d+424>>2];ee=+c[d+428>>2];S=+c[d+352>>2];g=+c[d+356>>2];re=+c[d+360>>2];$=+c[d+4>>2];ae=ae!=0?1/ae:0;m=+c[d+8>>2];ie=ie!=0?1/ie:0;v=+c[d+12>>2];ee=ee!=0?1/ee:0;ce=+c[d+20>>2];J=+c[d+24>>2];k=+c[d+28>>2];te=+c[d+36>>2];q=+c[d+40>>2];se=+c[d+44>>2];C=ae*$*$+ie*m*m+ee*v*v;j=ae*$*ce+ie*m*J+ee*v*k;_e=ae*$*te+ie*m*q+ee*v*se;w=ae*ce*$+ie*J*m+ee*k*v;R=ae*ce*ce+ie*J*J+ee*k*k;oe=ae*ce*te+ie*J*q+ee*k*se;v=ae*te*$+ie*q*m+ee*se*v;k=ae*te*ce+ie*q*J+ee*se*k;se=ae*te*te+ie*q*q+ee*se*se;ee=S*C+g*j+re*_e+(g*(S*v+g*k+re*se)-re*(S*w+g*R+re*oe))*I-(I*0+(S*C+g*j+re*_e));q=S*w+g*R+re*oe+(re*(S*C+g*j+re*_e)-S*(S*v+g*k+re*se))*I-(I*0+(S*w+g*R+re*oe));ie=S*v+g*k+re*se+(S*(S*w+g*R+re*oe)-g*(S*C+g*j+re*_e))*I-(I*0+(S*v+g*k+re*se));te=j+(S*v+g*k+re*se+(g*k+(j*0+R*-re)))*I;ae=_e+(g*se+(_e*0+oe*-re)-(S*w+g*R+re*oe))*I;J=w+(v*-S+(w*0+re*C)-(S*v+g*k+re*se))*I;ce=oe+(S*C+g*j+re*_e+(se*-S+(oe*0+re*_e)))*I;m=v+(v*0+(C*-g+S*w)+(S*w+g*R+re*oe))*I;$=k+(k*0+(j*-g+S*R)-(S*C+g*j+re*_e))*I;pe=(R+(k*-S+(R*0+re*j))*I)*(se+(se*0+(_e*-g+S*oe))*I)-$*ce;fe=$*ae-te*(se+(se*0+(_e*-g+S*oe))*I);le=te*ce-(R+(k*-S+(R*0+re*j))*I)*ae;ne=m*le+((C+(g*v+(C*0+w*-re))*I)*pe+J*fe);l=+N(+ne)>1.1920928955078125e-7;ne=l?1/ne:ne;c[h+(b*244|0)+224>>2]=S-(ie*le+(ee*pe+q*fe))*ne-S+ +c[h+(b*244|0)+224>>2];c[h+(b*244|0)+228>>2]=g-(m*(ce*ee-ae*q)+((C+(g*v+(C*0+w*-re))*I)*((se+(se*0+(_e*-g+S*oe))*I)*q-ce*ie)+J*(ae*ie-(se+(se*0+(_e*-g+S*oe))*I)*ee)))*ne-g+ +c[h+(b*244|0)+228>>2];c[h+(b*244|0)+232>>2]=re-(m*(te*q-(R+(k*-S+(R*0+re*j))*I)*ee)+((C+(g*v+(C*0+w*-re))*I)*((R+(k*-S+(R*0+re*j))*I)*ie-$*q)+J*($*ee-te*ie)))*ne-re+ +c[h+(b*244|0)+232>>2];l=o[d+528>>2]|0}if(l&8|0){ae=+c[f+12>>2];j=+c[d+420>>2];I=+c[d+424>>2];k=+c[d+428>>2];ne=+c[d+352>>2];re=+c[d+356>>2];le=+c[d+360>>2];Kw(d+4|0,Q+248|0);pe=+c[Q+248>>2];oe=+c[Q+248+4>>2];_e=+c[Q+248+8>>2];q=+c[Q+248+12>>2];$=_e*(ne*-_e+re*q-le*-pe)+(pe*(-(ne*-pe)-re*-oe-le*-_e)+q*(le*-oe+ne*q-re*-_e))-oe*(re*-pe+le*q-ne*-oe);te=pe*(re*-pe+le*q-ne*-oe)+(oe*(-(ne*-pe)-re*-oe-le*-_e)+q*(ne*-_e+re*q-le*-pe))-_e*(le*-oe+ne*q-re*-_e);q=oe*(le*-oe+ne*q-re*-_e)+(_e*(-(ne*-pe)-re*-oe-le*-_e)+q*(re*-pe+le*q-ne*-oe))-pe*(ne*-_e+re*q-le*-pe);j=j!=0?1/j:0;ie=q*0+(j*$+te*0);I=I!=0?1/I:0;ee=q*0+($*0+I*te);k=k!=0?1/k:0;J=k*q+($*0+te*0);S=j+(te*0+(j*0+q*-0))*ae;R=I+($*-0+(I*0+q*0))*ae;ce=k+(k*0+(te*-0+$*0))*ae;w=R*ce-((te*-0+I*$+0-ie)*ae+0)*((q*0+0-k*$+ie)*ae+0);se=((te*-0+I*$+0-ie)*ae+0)*((k*te+(q*-0+0)-ee)*ae+0)-ce*((te*0+(0-I*q)+J)*ae+0);C=((te*0+(0-I*q)+J)*ae+0)*((q*0+0-k*$+ie)*ae+0)-R*((k*te+(q*-0+0)-ee)*ae+0);fe=(($*0-j*te+0+ee)*ae+0)*C+(S*w+(($*-0+(j*q+0)-J)*ae+0)*se);Y=+N(+fe)>1.1920928955078125e-7;fe=Y?1/fe:fe;se=$-(($*ee-te*ie)*ae*C+((te*J-q*ee)*ae*w+(q*ie-$*J)*ae*se))*fe;ce=te-((($*0-j*te+0+ee)*ae+0)*(((q*0+0-k*$+ie)*ae+0)*((te*J-q*ee)*ae)-((k*te+(q*-0+0)-ee)*ae+0)*((q*ie-$*J)*ae))+(S*(ce*((q*ie-$*J)*ae)-((q*0+0-k*$+ie)*ae+0)*(($*ee-te*ie)*ae))+(($*-0+(j*q+0)-J)*ae+0)*(((k*te+(q*-0+0)-ee)*ae+0)*(($*ee-te*ie)*ae)-ce*((te*J-q*ee)*ae))))*fe;fe=q-((($*0-j*te+0+ee)*ae+0)*(((te*0+(0-I*q)+J)*ae+0)*((q*ie-$*J)*ae)-R*((te*J-q*ee)*ae))+(S*(R*(($*ee-te*ie)*ae)-((te*-0+I*$+0-ie)*ae+0)*((q*ie-$*J)*ae))+(($*-0+(j*q+0)-J)*ae+0)*(((te*-0+I*$+0-ie)*ae+0)*((te*J-q*ee)*ae)-((te*0+(0-I*q)+J)*ae+0)*(($*ee-te*ie)*ae))))*fe;ae=+c[Q+248+12>>2];c[h+(b*244|0)+224>>2]=(_e*se+ae*ce-pe*fe)*-_e+(ae*(ae*se+oe*fe-_e*ce)+(-(pe*se)-oe*ce-_e*fe)*-pe)-(ae*fe+pe*ce-oe*se)*-oe-ne+ +c[h+(b*244|0)+224>>2];c[h+(b*244|0)+228>>2]=(ae*fe+pe*ce-oe*se)*-pe+(ae*(_e*se+ae*ce-pe*fe)+(-(pe*se)-oe*ce-_e*fe)*-oe)-(ae*se+oe*fe-_e*ce)*-_e-re+ +c[h+(b*244|0)+228>>2];c[h+(b*244|0)+232>>2]=(ae*se+oe*fe-_e*ce)*-oe+((-(pe*se)-oe*ce-_e*fe)*-_e+ae*(ae*fe+pe*ce-oe*se))-(_e*se+ae*ce-pe*fe)*-pe-le+ +c[h+(b*244|0)+232>>2]}}y=y+1|0}while((y|0)!=(i|0))}if((a|0)>0){l=0;do{Y=o[s+(l<<2)>>2]|0;_P[o[(o[Y>>2]|0)+8>>2]&255](Y);c[Y+36>>2]=0;l=l+1|0}while((l|0)<(a|0))}b=o[e+168>>2]|0;if((b|0)<(a|0)?(o[e+172>>2]|0)<(a|0):0){if(!a)l=0;else{o[5637]=(o[5637]|0)+1;l=Qa((a<<3|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}b=o[e+168>>2]|0}if((b|0)>0){d=0;do{U=(o[e+176>>2]|0)+(d<<3)|0;z=o[U+4>>2]|0;Y=l+(d<<3)|0;o[Y>>2]=o[U>>2];o[Y+4>>2]=z;d=d+1|0}while((d|0)!=(b|0))}b=o[e+176>>2]|0;if(b|0){if(n[e+180>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[b+-4>>2]|0)}o[e+176>>2]=0}n[e+180>>0]=1;o[e+176>>2]=l;o[e+172>>2]=a}o[e+168>>2]=a;if((a|0)>0){i=0;l=0;do{y=o[e+176>>2]|0;t=y+(i<<3)|0;h=s+(i<<2)|0;b=o[h>>2]|0;d=o[b+44>>2]|0;if(d){b=d+64|0;do{o[d>>2]=0;d=d+4|0}while((d|0)<(b|0));b=o[h>>2]|0}if(!(n[b+20>>0]|0)){o[t>>2]=0;o[y+(i<<3)+4>>2]=0;b=0}else{aP[o[(o[b>>2]|0)+16>>2]&127](b,t);b=o[t>>2]|0}l=b+l|0;i=i+1|0}while((i|0)<(a|0))}else l=0;d=o[e+48>>2]|0;if((d|0)<(l|0)?(o[e+52>>2]|0)<(l|0):0){if(!l)b=0;else{o[5637]=(o[5637]|0)+1;b=Qa((l*152|3)+16|0)|0;if(!b)b=0;else{o[(b+4+15&-16)+-4>>2]=b;b=b+4+15&-16}d=o[e+48>>2]|0}if((d|0)>0){h=0;do{Wc(b+(h*152|0)|0,(o[e+56>>2]|0)+(h*152|0)|0,152)|0;h=h+1|0}while((h|0)!=(d|0))}d=o[e+56>>2]|0;if(d|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[d+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=b;o[e+52>>2]=l}o[e+48>>2]=l;if((a|0)>0){l=o[e+176>>2]|0;z=0;Y=0;while(1){U=l+(Y<<3)|0;if(!(o[U>>2]|0))b=0;else{l=o[e+56>>2]|0;B=l+(z*152|0)|0;A=s+(Y<<2)|0;F=o[A>>2]|0;G=o[F+28>>2]|0;E=o[F+32>>2]|0;V=zM(e,G,+c[f+12>>2])|0;H=zM(e,E,+c[f+12>>2])|0;Z=o[e+16>>2]|0;b=o[F+24>>2]|0;b=(b|0)>0?b:o[f+20>>2]|0;if((b|0)>(o[e+184>>2]|0))o[e+184>>2]=b;if((o[U>>2]|0)>0){d=0;do{Lc(B+(d*152|0)|0,0,152)|0;c[B+(d*152|0)+120>>2]=-3.4028234663852886e38;c[B+(d*152|0)+124>>2]=3.4028234663852886e38;c[B+(d*152|0)+100>>2]=0;c[B+(d*152|0)+96>>2]=0;o[B+(d*152|0)+144>>2]=V;o[B+(d*152|0)+148>>2]=H;o[B+(d*152|0)+136>>2]=b;d=d+1|0}while((d|0)<(o[U>>2]|0))}o[Z+(V*244|0)+64>>2]=0;o[Z+(V*244|0)+64+4>>2]=0;o[Z+(V*244|0)+64+8>>2]=0;o[Z+(V*244|0)+64+12>>2]=0;o[Z+(V*244|0)+64+16>>2]=0;o[Z+(V*244|0)+64+20>>2]=0;o[Z+(V*244|0)+64+24>>2]=0;o[Z+(V*244|0)+64+28>>2]=0;o[Z+(V*244|0)+144>>2]=0;o[Z+(V*244|0)+144+4>>2]=0;o[Z+(V*244|0)+144+8>>2]=0;o[Z+(V*244|0)+144+12>>2]=0;o[Z+(V*244|0)+144+16>>2]=0;o[Z+(V*244|0)+144+20>>2]=0;o[Z+(V*244|0)+144+24>>2]=0;o[Z+(V*244|0)+144+28>>2]=0;o[Z+(H*244|0)+64>>2]=0;o[Z+(H*244|0)+64+4>>2]=0;o[Z+(H*244|0)+64+8>>2]=0;o[Z+(H*244|0)+64+12>>2]=0;o[Z+(H*244|0)+64+16>>2]=0;o[Z+(H*244|0)+64+20>>2]=0;o[Z+(H*244|0)+64+24>>2]=0;o[Z+(H*244|0)+64+28>>2]=0;o[Z+(H*244|0)+144>>2]=0;o[Z+(H*244|0)+144+4>>2]=0;o[Z+(H*244|0)+144+8>>2]=0;o[Z+(H*244|0)+144+12>>2]=0;o[Z+(H*244|0)+144+16>>2]=0;o[Z+(H*244|0)+144+20>>2]=0;o[Z+(H*244|0)+144+24>>2]=0;o[Z+(H*244|0)+144+28>>2]=0;c[Q+248>>2]=1/+c[f+12>>2];o[Q+248+4>>2]=o[f+32>>2];o[Q+248+8>>2]=l+(z*152|0)+16;o[Q+248+12>>2]=B;o[Q+248+16>>2]=l+(z*152|0)+48;o[Q+248+20>>2]=l+(z*152|0)+32;o[Q+248+24>>2]=38;o[Q+248+28>>2]=l+(z*152|0)+112;W=l+(z*152|0)+116|0;o[W>>2]=o[f+40>>2];o[Q+248+52>>2]=o[f+4>>2];o[Q+248+32>>2]=W;o[Q+248+36>>2]=l+(z*152|0)+120;o[Q+248+40>>2]=l+(z*152|0)+124;o[Q+248+48>>2]=o[f+20>>2];W=o[A>>2]|0;aP[o[(o[W>>2]|0)+20>>2]&127](W,Q+248|0);if((o[U>>2]|0)>0){W=0;do{l=B+(W*152|0)+124|0;m=+c[(o[A>>2]|0)+16>>2];if(+c[l>>2]>=m)c[l>>2]=m;l=B+(W*152|0)+120|0;if(+c[l>>2]<=-m)c[l>>2]=-m;o[B+(W*152|0)+132>>2]=F;P=B+(W*152|0)|0;l=B+(W*152|0)+64|0;b=o[F+28>>2]|0;pe=+c[P>>2];ce=+c[P+4>>2];I=+c[P+8>>2];fe=(pe*+c[b+304>>2]+ce*+c[b+308>>2]+I*+c[b+312>>2])*+c[b+572>>2];m=(pe*+c[b+320>>2]+ce*+c[b+324>>2]+I*+c[b+328>>2])*+c[b+576>>2];c[l>>2]=(+c[b+288>>2]*pe+ +c[b+292>>2]*ce+ +c[b+296>>2]*I)*+c[b+568>>2];c[l+4>>2]=fe;c[l+8>>2]=m;c[l+12>>2]=0;l=B+(W*152|0)+32|0;b=B+(W*152|0)+80|0;M=o[F+32>>2]|0;m=+c[l>>2];fe=+c[l+4>>2];I=+c[l+8>>2];ce=(m*+c[M+304>>2]+fe*+c[M+308>>2]+I*+c[M+312>>2])*+c[M+572>>2];pe=(m*+c[M+320>>2]+fe*+c[M+324>>2]+I*+c[M+328>>2])*+c[M+576>>2];c[b>>2]=(+c[M+288>>2]*m+ +c[M+292>>2]*fe+ +c[M+296>>2]*I)*+c[M+568>>2];c[b+4>>2]=ce;c[b+8>>2]=pe;c[b+12>>2]=0;b=B+(W*152|0)+16|0;pe=+c[G+368>>2];ce=+c[b>>2];fe=+c[b+4>>2];m=+c[b+8>>2];g=+c[P>>2];v=+c[P+4>>2];C=+c[P+8>>2];P=B+(W*152|0)+48|0;le=+c[E+368>>2];w=+c[P>>2];k=+c[P+4>>2];S=+c[P+8>>2];R=+c[l>>2];j=+c[l+4>>2];I=ce*(pe*ce)+fe*(pe*fe)+m*(pe*m)+(g*(+c[G+288>>2]*g+ +c[G+292>>2]*v+ +c[G+296>>2]*C)+v*(g*+c[G+304>>2]+v*+c[G+308>>2]+C*+c[G+312>>2])+C*(g*+c[G+320>>2]+v*+c[G+324>>2]+C*+c[G+328>>2]))+(w*(le*w)+k*(le*k)+S*(le*S))+(R*(+c[E+288>>2]*R+ +c[E+292>>2]*j+ +c[E+296>>2]*I)+j*(R*+c[E+304>>2]+j*+c[E+308>>2]+I*+c[E+312>>2])+I*(R*+c[E+320>>2]+j*+c[E+324>>2]+I*+c[E+328>>2]));P=+N(+I)>1.1920928955078125e-7;I=P?1/I:0;c[B+(W*152|0)+108>>2]=I;if(!(o[Z+(V*244|0)+240>>2]|0)){d=0;h=0;y=0;D=0;O=0;L=0}else{d=o[Z+(V*244|0)+208>>2]|0;h=o[Z+(V*244|0)+212>>2]|0;y=o[Z+(V*244|0)+216>>2]|0;D=o[Z+(V*244|0)+224>>2]|0;O=o[Z+(V*244|0)+228>>2]|0;L=o[Z+(V*244|0)+232>>2]|0}if(!(o[Z+(H*244|0)+240>>2]|0)){t=0;i=0;T=0;x=0;M=0;P=0}else{t=o[Z+(H*244|0)+208>>2]|0;i=o[Z+(H*244|0)+212>>2]|0;T=o[Z+(H*244|0)+216>>2]|0;x=o[Z+(H*244|0)+224>>2]|0;M=o[Z+(H*244|0)+228>>2]|0;P=o[Z+(H*244|0)+232>>2]|0}pe=(o[u>>2]=d,+c[u>>2])+ +c[G+336>>2];fe=(o[u>>2]=h,+c[u>>2])+ +c[G+340>>2];fe=pe*+c[b>>2]+fe*+c[b+4>>2]+((o[u>>2]=y,+c[u>>2])+ +c[G+344>>2])*m;pe=(o[u>>2]=D,+c[u>>2])+ +c[G+352>>2];ce=(o[u>>2]=O,+c[u>>2])+ +c[G+356>>2];ce=fe+(pe*g+ce*v+((o[u>>2]=L,+c[u>>2])+ +c[G+360>>2])*C);pe=(o[u>>2]=t,+c[u>>2])+ +c[E+336>>2];fe=(o[u>>2]=i,+c[u>>2])+ +c[E+340>>2];fe=pe*w+fe*k+((o[u>>2]=T,+c[u>>2])+ +c[E+344>>2])*S;pe=(o[u>>2]=x,+c[u>>2])+ +c[E+352>>2];le=(o[u>>2]=M,+c[u>>2])+ +c[E+356>>2];M=B+(W*152|0)+112|0;c[M>>2]=+c[M>>2]*I+I*(0-+c[Q+248+52>>2]*(ce+(fe+(pe*R+le*j+((o[u>>2]=P,+c[u>>2])+ +c[E+360>>2])*+c[l+8>>2]))));c[B+(W*152|0)+100>>2]=0;W=W+1|0}while((W|0)<(o[U>>2]|0))}l=o[e+176>>2]|0;b=o[l+(Y<<3)>>2]|0}Y=Y+1|0;if((Y|0)>=(a|0))break;else z=b+z|0}}HP[o[(o[e>>2]|0)+28>>2]&127](e,r,_,f);y=o[e+48>>2]|0;t=o[e+28>>2]|0;i=o[e+68>>2]|0;b=o[e+128>>2]|0;if((b|0)<(y|0)?(o[e+132>>2]|0)<(y|0):0){if(!y)l=0;else{o[5637]=(o[5637]|0)+1;l=Qa((y<<2|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}b=o[e+128>>2]|0}h=o[e+136>>2]|0;if((b|0)<=0)if(!h)b=e+140|0;else K=103;else{d=0;do{o[l+(d<<2)>>2]=o[h+(d<<2)>>2];d=d+1|0}while((d|0)!=(b|0));K=103}if((K|0)==103){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[e+136>>2]=0;b=e+140|0}n[b>>0]=1;o[e+136>>2]=l;o[e+132>>2]=y}o[e+128>>2]=y;if(!(o[f+64>>2]&16)){b=o[e+108>>2]|0;if((b|0)<(t|0)?(o[e+112>>2]|0)<(t|0):0){if(!t)l=0;else{o[5637]=(o[5637]|0)+1;l=Qa((t<<2|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}b=o[e+108>>2]|0}h=o[e+116>>2]|0;if((b|0)<=0)if(!h)b=e+120|0;else K=133;else{d=0;do{o[l+(d<<2)>>2]=o[h+(d<<2)>>2];d=d+1|0}while((d|0)!=(b|0));K=133}if((K|0)==133){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[e+116>>2]=0;b=e+120|0}n[b>>0]=1;o[e+116>>2]=l;o[e+112>>2]=t}o[e+108>>2]=t}else{b=o[e+108>>2]|0;if((b|0)<(t<<1|0)?(o[e+112>>2]|0)<(t<<1|0):0){if(!t)l=0;else{o[5637]=(o[5637]|0)+1;l=Qa((t<<3|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}b=o[e+108>>2]|0}h=o[e+116>>2]|0;if((b|0)<=0)if(!h)b=e+120|0;else K=118;else{d=0;do{o[l+(d<<2)>>2]=o[h+(d<<2)>>2];d=d+1|0}while((d|0)!=(b|0));K=118}if((K|0)==118){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[e+116>>2]=0;b=e+120|0}n[b>>0]=1;o[e+116>>2]=l;o[e+112>>2]=t<<1}o[e+108>>2]=t<<1}b=o[e+148>>2]|0;if((b|0)<(i|0)?(o[e+152>>2]|0)<(i|0):0){if(!i)l=0;else{o[5637]=(o[5637]|0)+1;l=Qa((i<<2|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}b=o[e+148>>2]|0}h=o[e+156>>2]|0;if((b|0)<=0)if(!h)b=e+160|0;else K=148;else{d=0;do{o[l+(d<<2)>>2]=o[h+(d<<2)>>2];d=d+1|0}while((d|0)!=(b|0));K=148}if((K|0)==148){if(n[e+160>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[e+156>>2]=0;b=e+160|0}n[b>>0]=1;o[e+156>>2]=l;o[e+152>>2]=i}o[e+148>>2]=i;if((y|0)>0){l=o[e+136>>2]|0;b=0;do{o[l+(b<<2)>>2]=b;b=b+1|0}while((b|0)!=(y|0))}if((t|0)>0){l=o[e+116>>2]|0;b=0;do{o[l+(b<<2)>>2]=b;b=b+1|0}while((b|0)!=(t|0))}if((i|0)>0){l=o[e+156>>2]|0;b=0;do{o[l+(b<<2)>>2]=b;b=b+1|0}while((b|0)!=(i|0))}l=o[2006]|0;e=(o[l+16>>2]|0)+-1|0;o[l+16>>2]=e;if(e|0){p=Q;return 0}do if(o[l+4>>2]|0){ut(Q+248|0,0)|0;e=o[5649]|0;c[l+8>>2]=+c[l+8>>2]+ +(((o[Q+248+4>>2]|0)-(o[e+4>>2]|0)+(((o[Q+248>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[l+12>>2]|0)|0)>>>0)/1e3;if(!(o[l+16>>2]|0)){l=o[2006]|0;break}else{p=Q;return 0}}while(0);o[2006]=o[l+20>>2];p=Q;return 0}function Iy(e,t,i,n,r,_,s,a,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;var l=0,u=0,b=0;b=p;p=p+16|0;Zp(15561);IP[o[(o[e>>2]|0)+32>>2]&1](e,t,i,n,r,_,s,a,f);u=o[e+184>>2]|0;l=o[a+20>>2]|0;l=(u|0)>(l|0)?u:l;if((l|0)>0){u=0;do{+LP[o[(o[e>>2]|0)+40>>2]&3](e,u,t,i,n,r,_,s,a,f);u=u+1|0}while((u|0)<(l|0))}l=o[2006]|0;e=(o[l+16>>2]|0)+-1|0;o[l+16>>2]=e;if(e|0){p=b;return 0}do if(o[l+4>>2]|0){ut(b|0,0)|0;e=o[5649]|0;c[l+8>>2]=+c[l+8>>2]+ +(((o[b+4>>2]|0)-(o[e+4>>2]|0)+(((o[b>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[l+12>>2]|0)|0)>>>0)/1e3;if(!(o[l+16>>2]|0)){l=o[2006]|0;break}else{p=b;return 0}}while(0);o[2006]=o[l+20>>2];p=b;return 0}function Ty(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Dy(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0;if(n[e+48>>0]|0){o[t>>2]=0;o[t+4>>2]=0;return}o[t>>2]=4;o[t+4>>2]=2;Oy(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);c[e+1088>>2]=0;n[e+297>>0]=0;r=+c[e+192>>2];_=+c[e+196>>2];do if(r<=_){p=+c[e+892>>2];f=+c[e+908>>2];s=+c[e+924>>2];s=+KI(+q(+(+c[e+832>>2]*p+ +c[e+848>>2]*f+ +c[e+864>>2]*s),+(+c[e+828>>2]*p+ +c[e+844>>2]*f+ +c[e+860>>2]*s)),r,_);c[e+1084>>2]=s;if(s<r){c[e+1088>>2]=s-r;n[e+297>>0]=1;a=1;break}if(s>_){c[e+1088>>2]=s-_;n[e+297>>0]=1;a=1}else a=0}else a=0;while(0);n[e+296>>0]=0;i=o[e+1032>>2]|0;o[e+1080>>2]=i;r=+c[e+184>>2];_=+c[e+188>>2];s=(o[u>>2]=i,+c[u>>2]);do if(r<=_){if(s>_){c[e+1032>>2]=s-_;n[e+296>>0]=1;i=14;break}if(s<r){c[e+1032>>2]=s-r;n[e+296>>0]=1;i=14}else i=13}else i=13;while(0);if((i|0)==13?(c[e+1032>>2]=0,n[e+1096>>0]|0):0)i=14;if((i|0)==14){o[t>>2]=(o[t>>2]|0)+1;o[t+4>>2]=(o[t+4>>2]|0)+-1}if(a<<24>>24==0?(n[e+1112>>0]|0)==0:0)return;o[t>>2]=(o[t>>2]|0)+1;o[t+4>>2]=(o[t+4>>2]|0)+-1;return}function Oy(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;if((n[e+180>>0]|0)==0?(n[e+48>>0]|0)!=0:0){w=+c[e+116>>2];s=+c[i>>2];k=+c[e+132>>2];T=+c[i+4>>2];S=+c[e+148>>2];D=+c[i+8>>2];f=+c[e+120>>2];l=+c[e+136>>2];d=+c[e+152>>2];h=+c[e+124>>2];y=+c[e+140>>2];g=+c[e+156>>2];a=+c[i+16>>2];p=+c[i+20>>2];b=+c[i+24>>2];m=+c[i+32>>2];R=+c[i+36>>2];j=+c[i+40>>2];_=+c[e+164>>2];r=+c[e+168>>2];C=+c[e+172>>2];v=+c[i+48>>2]+(s*_+T*r+D*C);I=a*_+p*r+b*C+ +c[i+52>>2];C=m*_+R*r+j*C+ +c[i+56>>2];c[e+824>>2]=w*s+k*T+S*D;c[e+828>>2]=s*f+T*l+D*d;c[e+832>>2]=s*h+T*y+D*g;c[e+836>>2]=0;c[e+840>>2]=w*a+k*p+S*b;c[e+844>>2]=f*a+l*p+d*b;c[e+848>>2]=h*a+y*p+g*b;c[e+852>>2]=0;c[e+856>>2]=w*m+k*R+S*j;c[e+860>>2]=f*m+l*R+d*j;c[e+864>>2]=h*m+y*R+g*j;c[e+868>>2]=0;c[e+872>>2]=v;c[e+876>>2]=I;c[e+880>>2]=C;c[e+884>>2]=0;C=+c[e+52>>2];I=+c[t>>2];v=+c[e+68>>2];j=+c[t+4>>2];g=+c[e+84>>2];R=+c[t+8>>2];y=+c[e+56>>2];m=+c[e+72>>2];h=+c[e+88>>2];d=+c[e+60>>2];l=+c[e+76>>2];f=+c[e+92>>2];S=+c[t+16>>2];k=+c[t+20>>2];w=+c[t+24>>2];b=+c[t+32>>2];p=+c[t+36>>2];a=+c[t+40>>2];D=+c[e+100>>2];T=+c[e+104>>2];s=+c[e+108>>2];r=+c[t+48>>2]+(I*D+j*T+R*s);_=S*D+k*T+w*s+ +c[t+52>>2];s=b*D+p*T+a*s+ +c[t+56>>2];c[e+888>>2]=C*I+v*j+g*R;c[e+892>>2]=I*y+j*m+R*h;c[e+896>>2]=I*d+j*l+R*f;c[e+900>>2]=0;c[e+904>>2]=C*S+v*k+g*w;c[e+908>>2]=y*S+m*k+h*w;c[e+912>>2]=d*S+l*k+f*w;c[e+916>>2]=0;c[e+920>>2]=C*b+v*p+g*a;c[e+924>>2]=y*b+m*p+h*a;c[e+928>>2]=d*b+l*p+f*a;c[e+932>>2]=0;c[e+936>>2]=r;c[e+940>>2]=_;c[e+944>>2]=s;c[e+948>>2]=0;t=e+856|0;i=e+840|0}else{b=+c[e+52>>2];D=+c[t>>2];l=+c[e+68>>2];_=+c[t+4>>2];p=+c[e+84>>2];r=+c[t+8>>2];R=+c[e+56>>2];k=+c[e+72>>2];C=+c[e+88>>2];v=+c[e+60>>2];y=+c[e+76>>2];m=+c[e+92>>2];j=+c[t+16>>2];S=+c[t+20>>2];w=+c[t+24>>2];g=+c[t+32>>2];f=+c[t+36>>2];a=+c[t+40>>2];T=+c[e+100>>2];I=+c[e+104>>2];d=+c[e+108>>2];h=+c[t+48>>2]+(D*T+_*I+r*d);s=j*T+S*I+w*d+ +c[t+52>>2];d=g*T+f*I+a*d+ +c[t+56>>2];c[e+824>>2]=b*D+l*_+p*r;c[e+828>>2]=D*R+_*k+r*C;c[e+832>>2]=D*v+_*y+r*m;c[e+836>>2]=0;c[e+840>>2]=b*j+l*S+p*w;c[e+844>>2]=R*j+k*S+C*w;c[e+848>>2]=v*j+y*S+m*w;c[e+852>>2]=0;c[e+856>>2]=b*g+l*f+p*a;c[e+860>>2]=R*g+k*f+C*a;c[e+864>>2]=v*g+y*f+m*a;c[e+868>>2]=0;c[e+872>>2]=h;c[e+876>>2]=s;c[e+880>>2]=d;c[e+884>>2]=0;d=+c[e+116>>2];s=+c[i>>2];h=+c[e+132>>2];a=+c[i+4>>2];m=+c[e+148>>2];f=+c[i+8>>2];y=+c[e+120>>2];g=+c[e+136>>2];v=+c[e+152>>2];C=+c[e+124>>2];k=+c[e+140>>2];R=+c[e+156>>2];p=+c[i+16>>2];l=+c[i+20>>2];b=+c[i+24>>2];w=+c[i+32>>2];S=+c[i+36>>2];j=+c[i+40>>2];r=+c[e+164>>2];_=+c[e+168>>2];D=+c[e+172>>2];I=+c[i+48>>2]+(s*r+a*_+f*D);T=p*r+l*_+b*D+ +c[i+52>>2];D=w*r+S*_+j*D+ +c[i+56>>2];c[e+888>>2]=d*s+h*a+m*f;c[e+892>>2]=s*y+a*g+f*v;c[e+896>>2]=s*C+a*k+f*R;c[e+900>>2]=0;c[e+904>>2]=d*p+h*l+m*b;c[e+908>>2]=y*p+g*l+v*b;c[e+912>>2]=C*p+k*l+R*b;c[e+916>>2]=0;c[e+920>>2]=d*w+h*S+m*j;c[e+924>>2]=y*w+g*S+v*j;c[e+928>>2]=C*w+k*S+R*j;c[e+932>>2]=0;c[e+936>>2]=I;c[e+940>>2]=T;c[e+944>>2]=D;c[e+948>>2]=0;t=e+856|0;i=e+840|0}o[e+968>>2]=o[e+872>>2];o[e+968+4>>2]=o[e+872+4>>2];o[e+968+8>>2]=o[e+872+8>>2];o[e+968+12>>2]=o[e+872+12>>2];o[e+984>>2]=o[e+936>>2];o[e+984+4>>2]=o[e+936+4>>2];o[e+984+8>>2]=o[e+936+8>>2];o[e+984+12>>2]=o[e+936+12>>2];L=o[e+824>>2]|0;O=o[i>>2]|0;i=o[t>>2]|0;o[e+952>>2]=L;o[e+956>>2]=O;o[e+960>>2]=i;c[e+964>>2]=0;r=(o[u>>2]=L,+c[u>>2]);_=(o[u>>2]=O,+c[u>>2]);s=(o[u>>2]=i,+c[u>>2]);if((n[e+180>>0]|0)==0?(n[e+48>>0]|0)==0:0){v=+c[e+968>>2];j=v-+c[e+984>>2];C=+c[e+972>>2];T=C-+c[e+988>>2];w=+c[e+976>>2];D=w-+c[e+992>>2];c[e+1016>>2]=j;c[e+1020>>2]=T;c[e+1024>>2]=D;c[e+1028>>2]=0;I=r*j;k=_*T;k=I+k;I=s*D;I=k+I;k=r*I;S=_*I;R=s*I;k=v+k;S=C+S;R=w+R;L=e+1e3|0;c[L>>2]=k;L=e+1004|0;c[L>>2]=S;L=e+1008|0;c[L>>2]=R;L=e+1012|0;c[L>>2]=0;L=e+1032|0;c[L>>2]=I;L=e+828|0;O=e+844|0;i=e+860|0;I=+c[L>>2];R=+c[O>>2];S=+c[i>>2];I=I*j;R=R*T;R=I+R;S=S*D;S=R+S;i=e+1036|0;c[i>>2]=S;i=e+832|0;O=e+848|0;L=e+864|0;S=+c[i>>2];R=+c[O>>2];I=+c[L>>2];j=S*j;T=R*T;T=j+T;D=I*D;D=T+D;L=e+1040|0;c[L>>2]=D;return}v=+c[e+968>>2];j=+c[e+984>>2]-v;C=+c[e+972>>2];T=+c[e+988>>2]-C;w=+c[e+976>>2];D=+c[e+992>>2]-w;c[e+1016>>2]=j;c[e+1020>>2]=T;c[e+1024>>2]=D;c[e+1028>>2]=0;I=r*j;k=_*T;k=I+k;I=s*D;I=k+I;k=r*I;S=_*I;R=s*I;k=v+k;S=C+S;R=w+R;L=e+1e3|0;c[L>>2]=k;L=e+1004|0;c[L>>2]=S;L=e+1008|0;c[L>>2]=R;L=e+1012|0;c[L>>2]=0;L=e+1032|0;c[L>>2]=I;L=e+828|0;O=e+844|0;i=e+860|0;I=+c[L>>2];R=+c[O>>2];S=+c[i>>2];I=I*j;R=R*T;R=I+R;S=S*D;S=R+S;i=e+1036|0;c[i>>2]=S;i=e+832|0;O=e+848|0;L=e+864|0;S=+c[i>>2];R=+c[O>>2];I=+c[L>>2];j=S*j;T=R*T;T=j+T;D=I*D;D=T+D;L=e+1040|0;c[L>>2]=D;return}function Ly(e,t){\ne=e|0;t=t|0;var i=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0;_e=p;p=p+16|0;ne=o[e+28>>2]|0;oe=o[e+32>>2]|0;J=+c[ne+368>>2];$=+c[oe+368>>2];q=o[t+24>>2]|0;re=n[e+180>>0]|0?1:-1;Y=+c[e+936>>2]-+c[e+872>>2];K=+c[e+940>>2]-+c[e+876>>2];Q=+c[e+944>>2]-+c[e+880>>2];ee=J+$>0?$/(J+$):.5;M=o[e+824>>2]|0;W=o[e+840>>2]|0;B=o[e+856>>2]|0;A=o[e+888>>2]|0;F=o[e+904>>2]|0;G=o[e+920>>2]|0;E=(n[e+49>>0]|0)==0;if(E){S=o[e+828>>2]|0;a=o[e+844>>2]|0;g=o[e+860>>2]|0;o[_e+4>>2]=a;k=o[e+832>>2]|0;D=o[e+848>>2]|0;ie=o[e+864>>2]|0;o[_e>>2]=k;w=(o[u>>2]=g,+c[u>>2]);C=(o[u>>2]=k,+c[u>>2]);h=(o[u>>2]=D,+c[u>>2]);O=ie;v=(o[u>>2]=ie,+c[u>>2]);ie=M;R=W;j=B}else{i=ee*(o[u>>2]=M,+c[u>>2]);l=ee*(o[u>>2]=W,+c[u>>2]);f=ee*(o[u>>2]=B,+c[u>>2]);s=(1-ee)*(o[u>>2]=A,+c[u>>2]);b=(1-ee)*(o[u>>2]=F,+c[u>>2]);f=f+(1-ee)*(o[u>>2]=G,+c[u>>2]);d=1/+X(+((i+s)*(i+s)+(l+b)*(l+b)+f*f));S=(c[u>>2]=(i+s)*d,o[u>>2]|0);R=(c[u>>2]=(l+b)*d,o[u>>2]|0);j=(c[u>>2]=f*d,o[u>>2]|0);if(+N(+(f*d))>.7071067690849304){P=1/+X(+(f*d*(f*d)+(l+b)*d*((l+b)*d)));c[_e+4>>2]=-(f*d*P);h=-((i+s)*d*((l+b)*d*P));m=(i+s)*d*-(f*d*P);s=(f*d*(f*d)+(l+b)*d*((l+b)*d))*P;i=(l+b)*d*P;_=0}else{m=(i+s)*d*((i+s)*d)+(l+b)*d*((l+b)*d);P=1/+X(+m);_=(c[u>>2]=-((l+b)*d*P),o[u>>2]|0);c[_e+4>>2]=(i+s)*d*P;h=f*d*-((l+b)*d*P);m=m*P;s=-(f*d*((i+s)*d*P));i=0}g=(c[u>>2]=i,o[u>>2]|0);k=(c[u>>2]=s,o[u>>2]|0);c[_e>>2]=s;D=(c[u>>2]=h,o[u>>2]|0);a=o[_e+4>>2]|0;O=(c[u>>2]=m,o[u>>2]|0);w=i;C=s;v=m;ie=S;S=_}_=o[t+12>>2]|0;o[_>>2]=S;o[_+4>>2]=a;o[_+8>>2]=g;o[_+(q<<2)>>2]=k;o[_+(q+1<<2)>>2]=D;o[_+(q+2<<2)>>2]=O;m=(o[u>>2]=S,+c[u>>2]);_=o[t+20>>2]|0;c[_>>2]=-m;y=+c[_e+4>>2];c[_+4>>2]=-y;c[_+8>>2]=-w;c[_+(q<<2)>>2]=-C;c[_+(q+1<<2)>>2]=-h;c[_+(q+2<<2)>>2]=-v;_=o[e+300>>2]|0;i=+c[e+280>>2];if(!(_&128))i=i*+c[t+4>>2];b=i*+c[t>>2];x=(o[u>>2]=W,+c[u>>2]);I=(o[u>>2]=G,+c[u>>2]);d=(o[u>>2]=B,+c[u>>2]);L=(o[u>>2]=F,+c[u>>2]);P=(o[u>>2]=A,+c[u>>2]);T=(o[u>>2]=M,+c[u>>2]);z=o[t+28>>2]|0;c[z>>2]=b*((x*I-d*L)*m+(d*P-T*I)*y+(T*L-x*P)*w);c[z+(q<<2)>>2]=b*((x*I-d*L)*C+(d*P-T*I)*h+(T*L-x*P)*v);if(_&64|0){z=o[t+32>>2]|0;o[z>>2]=o[e+292>>2];o[z+(q<<2)>>2]=o[e+292>>2]}l=+c[ne+52>>2];b=+c[ne+56>>2];d=+c[ne+60>>2];i=+c[oe+52>>2];s=+c[oe+56>>2];f=+c[oe+60>>2];if(E){H=(c[u>>2]=s-b,o[u>>2]|0);x=(s-b)*w-(f-d)*y;P=(f-d)*m-(i-l)*w;E=o[t+12>>2]|0;c[E+(q<<1<<2)>>2]=ee*x;c[E+((q<<1|1)<<2)>>2]=ee*P;c[E+((q<<1)+2<<2)>>2]=ee*((i-l)*y-(s-b)*m);E=(c[u>>2]=i-l,o[u>>2]|0);V=(c[u>>2]=f-d,o[u>>2]|0);Z=o[t+20>>2]|0;c[Z+(q<<1<<2)>>2]=(1-ee)*x;c[Z+((q<<1|1)<<2)>>2]=(1-ee)*P;c[Z+((q<<1)+2<<2)>>2]=(1-ee)*((i-l)*y-(s-b)*m);P=(s-b)*v-(f-d)*h;f=(f-d)*C-(i-l)*v;d=(i-l)*h-(s-b)*C;Z=o[t+12>>2]|0;c[Z+(q*3<<2)>>2]=ee*P;c[Z+((q*3|0)+1<<2)>>2]=ee*f;c[Z+((q*3|0)+2<<2)>>2]=ee*d;Z=o[t+20>>2]|0;c[Z+(q*3<<2)>>2]=(1-ee)*P;c[Z+((q*3|0)+1<<2)>>2]=(1-ee)*f;c[Z+((q*3|0)+2<<2)>>2]=(1-ee)*d;W=o[t+8>>2]|0;o[W+(q<<1<<2)>>2]=S;c[W+((q<<1|1)<<2)>>2]=y;c[W+((q<<1)+2<<2)>>2]=w;W=o[t+8>>2]|0;F=o[_e>>2]|0;o[W+(q*3<<2)>>2]=F;o[W+((q*3|0)+1<<2)>>2]=D;o[W+((q*3|0)+2<<2)>>2]=O;G=o[t+16>>2]|0;c[G+(q<<1<<2)>>2]=-m;d=+c[_e+4>>2];c[G+((q<<1|1)<<2)>>2]=-d;c[G+((q<<1)+2<<2)>>2]=-w;G=o[t+16>>2]|0;l=(o[u>>2]=F,+c[u>>2]);c[G+(q*3<<2)>>2]=-l;f=(o[u>>2]=D,+c[u>>2]);c[G+((q*3|0)+1<<2)>>2]=-f;s=(o[u>>2]=O,+c[u>>2]);c[G+((q*3|0)+2<<2)>>2]=-s;b=w;F=0;A=0;B=0;g=0;a=0;_=0}else{ae=+c[e+936>>2]-i;se=+c[e+940>>2]-s;L=+c[e+944>>2]-f;m=(o[u>>2]=ie,+c[u>>2]);y=(o[u>>2]=R,+c[u>>2]);h=(o[u>>2]=j,+c[u>>2]);x=+c[e+872>>2]-l;P=+c[e+876>>2]-b;f=+c[e+880>>2]-d;b=+c[e+1080>>2]-+c[e+1032>>2];v=m*(m*x+y*P+h*f)+m*b-m*(m*ae+y*se+h*L);C=y*(m*x+y*P+h*f)+y*b-y*(m*ae+y*se+h*L);b=h*(m*x+y*P+h*f)+h*b-h*(m*ae+y*se+h*L);I=x-m*(m*x+y*P+h*f)+ee*v;w=P-y*(m*x+y*P+h*f)+ee*C;T=f-h*(m*x+y*P+h*f)+ee*b;F=(c[u>>2]=I,o[u>>2]|0);A=(c[u>>2]=w,o[u>>2]|0);B=(c[u>>2]=T,o[u>>2]|0);v=ae-m*(m*ae+y*se+h*L)-(1-ee)*v;C=se-y*(m*ae+y*se+h*L)-(1-ee)*C;b=L-h*(m*ae+y*se+h*L)-(1-ee)*b;g=(c[u>>2]=v,o[u>>2]|0);k=(c[u>>2]=C,o[u>>2]|0);S=(c[u>>2]=b,o[u>>2]|0);s=ee*(ae-m*(m*ae+y*se+h*L))+(1-ee)*(x-m*(m*x+y*P+h*f));i=ee*(se-y*(m*ae+y*se+h*L))+(1-ee)*(P-y*(m*x+y*P+h*f));f=ee*(L-h*(m*ae+y*se+h*L))+(1-ee)*(f-h*(m*x+y*P+h*f));c[_e+4>>2]=i;if(f*f+(s*s+i*i)>1.1920928955078125e-7){ae=1/+X(+(f*f+(s*s+i*i)));a=(c[u>>2]=s*ae,o[u>>2]|0);c[_e+4>>2]=ae*i;P=ae*f;l=ae*i;i=s*ae;_=(c[u>>2]=ae*f,o[u>>2]|0)}else{a=o[e+828>>2]|0;z=o[e+844>>2]|0;_=o[e+860>>2]|0;o[_e+4>>2]=z;P=(o[u>>2]=_,+c[u>>2]);l=(o[u>>2]=z,+c[u>>2]);i=(o[u>>2]=a,+c[u>>2])}L=y*P-h*l;x=h*i-m*P;h=m*l-y*i;c[_e>>2]=L;z=(o[t+12>>2]|0)+(q<<1<<2)|0;c[z>>2]=w*P-T*l;c[z+4>>2]=T*i-I*P;c[z+8>>2]=I*l-w*i;z=o[t+20>>2]|0;c[z+(q<<1<<2)>>2]=-(C*P-b*l);c[z+((q<<1|1)<<2)>>2]=-(b*i-v*P);c[z+((q<<1)+2<<2)>>2]=-(v*l-C*i);if(J<1.1920928955078125e-7|$<1.1920928955078125e-7?(n[e+297>>0]|0)!=0:0){d=(1-ee)*(C*h-b*x);b=(1-ee)*(b*L-v*h);f=(1-ee)*(v*x-C*L);l=ee*(w*h-T*x);s=ee*(I*x-w*L);i=ee*(T*L-I*h)}else{d=C*h-b*x;b=b*L-v*h;f=v*x-C*L;l=w*h-T*x;s=I*x-w*L;i=T*L-I*h}Z=(o[t+12>>2]|0)+(q*3<<2)|0;c[Z>>2]=l;c[Z+4>>2]=i;c[Z+8>>2]=s;Z=o[t+20>>2]|0;c[Z+(q*3<<2)>>2]=-d;c[Z+((q*3|0)+1<<2)>>2]=-b;c[Z+((q*3|0)+2<<2)>>2]=-f;W=o[t+8>>2]|0;o[W+(q<<1<<2)>>2]=a;o[W+((q<<1|1)<<2)>>2]=o[_e+4>>2];o[W+((q<<1)+2<<2)>>2]=_;W=o[t+8>>2]|0;c[W+(q*3<<2)>>2]=L;c[W+((q*3|0)+1<<2)>>2]=x;c[W+((q*3|0)+2<<2)>>2]=h;G=o[t+16>>2]|0;m=(o[u>>2]=a,+c[u>>2]);c[G+(q<<1<<2)>>2]=-m;d=+c[_e+4>>2];c[G+((q<<1|1)<<2)>>2]=-d;c[G+((q<<1)+2<<2)>>2]=-P;G=o[t+16>>2]|0;c[G+(q*3<<2)>>2]=-L;c[G+((q*3|0)+1<<2)>>2]=-x;c[G+((q*3|0)+2<<2)>>2]=-h;b=P;l=L;f=x;s=h;E=0;V=0;H=0;a=k;_=S}U=o[e+300>>2]|0;i=+c[e+264>>2];if(!(U&32))i=i*+c[t+4>>2];ae=i*+c[t>>2];z=o[t+28>>2]|0;c[z+(q<<1<<2)>>2]=ae*(Y*m+K*d+Q*b);c[z+(q*3<<2)>>2]=ae*(Y*l+K*f+Q*s);if(U&16|0){M=o[t+32>>2]|0;o[M+(q<<1<<2)>>2]=o[e+276>>2];o[M+(q*3<<2)>>2]=o[e+276>>2]}M=r[e+296>>1]|0;if(!((M&255)<<24>>24)){O=0;v=0}else{v=re*+c[e+1032>>2];O=v>0?2:1}k=n[e+1096>>0]|0;S=(O|0)!=0;if(k&255|O){D=o[t+24>>2]<<2;o[W+(D<<2)>>2]=ie;o[W+((D|1)<<2)>>2]=R;o[W+((D|2)<<2)>>2]=j;h=(o[u>>2]=ie,+c[u>>2]);c[G+(D<<2)>>2]=-h;m=(o[u>>2]=R,+c[u>>2]);c[G+((D|1)<<2)>>2]=-m;y=(o[u>>2]=j,+c[u>>2]);c[G+((D|2)<<2)>>2]=-y;if(n[e+49>>0]|0){if(!(J<1.1920928955078125e-7|$<1.1920928955078125e-7)){$=(o[u>>2]=A,+c[u>>2]);Q=(o[u>>2]=B,+c[u>>2]);J=(o[u>>2]=F,+c[u>>2]);ae=(o[u>>2]=a,+c[u>>2]);ee=(o[u>>2]=_,+c[u>>2]);se=(o[u>>2]=g,+c[u>>2]);q=o[t+12>>2]|0;c[q+(D<<2)>>2]=y*$-m*Q;c[q+((D|1)<<2)>>2]=h*Q-y*J;c[q+((D|2)<<2)>>2]=m*J-h*$;c[Z+(D<<2)>>2]=-(y*ae-m*ee);c[Z+((D|1)<<2)>>2]=-(h*ee-y*se);c[Z+((D|2)<<2)>>2]=-(m*se-h*ae)}}else{ae=(o[u>>2]=H,+c[u>>2]);$=(o[u>>2]=V,+c[u>>2]);se=(o[u>>2]=E,+c[u>>2]);q=o[t+12>>2]|0;c[q+(D<<2)>>2]=ee*(y*ae-m*$);c[q+((D|1)<<2)>>2]=ee*(h*$-y*se);c[q+((D|2)<<2)>>2]=ee*(m*se-h*ae);c[Z+(D<<2)>>2]=(1-ee)*(y*ae-m*$);c[Z+((D|1)<<2)>>2]=(1-ee)*(h*$-y*se);c[Z+((D|2)<<2)>>2]=(1-ee)*(m*se-h*ae)}_=+c[e+184>>2]==+c[e+188>>2];c[z+(D<<2)>>2]=0;a=(o[t+36>>2]|0)+(D<<2)|0;c[a>>2]=0;g=(o[t+40>>2]|0)+(D<<2)|0;c[g>>2]=0;d=+c[((U&512|0)==0?t+4|0:e+232|0)>>2];if(!(k<<24>>24==0|S&_)){if(U&1|0)o[(o[t+32>>2]|0)+(D<<2)>>2]=o[e+212>>2];b=+c[e+1100>>2];i=+c[e+1080>>2];s=+c[e+184>>2];f=+c[e+188>>2];l=d*+c[t>>2];do if(!(s>f))if(!(s==f)){if(b/l<0)if(i>=s?s-b/l>i:0){i=(s-i)/(b/l);break}else{i=i<s?0:1;break}if(b/l>0)if(i<=f?f-b/l<i:0){i=(f-i)/(b/l);break}else{i=i>f?0:1;break}else i=0}else i=0;else i=1;while(0);c[z+(D<<2)>>2]=+c[z+(D<<2)>>2]-re*i*b;c[a>>2]=-+c[e+1104>>2]/+c[t>>2]+ +c[a>>2];c[g>>2]=+c[e+1104>>2]/+c[t>>2]+ +c[g>>2]}if(S){c[z+(D<<2)>>2]=+c[z+(D<<2)>>2]+v*(d*+c[t>>2]);if(U&256|0)o[(o[t+32>>2]|0)+(D<<2)>>2]=o[e+244>>2];do if(!_)if((O|0)==1){c[a>>2]=-3.4028234663852886e38;c[g>>2]=0;break}else{c[a>>2]=0;c[g>>2]=3.4028234663852886e38;break}else{c[a>>2]=-3.4028234663852886e38;c[g>>2]=3.4028234663852886e38}while(0);ae=1-+c[e+240>>2];s=+N(+ae);do if(!(ae!=ae|0!=0|ae==0)){i=re*(h*+c[ne+336>>2]+m*+c[ne+340>>2]+y*+c[ne+344>>2]-(h*+c[oe+336>>2]+m*+c[oe+340>>2]+y*+c[oe+344>>2]));if((O|0)==1){if(!(i<0))break;if(!(+c[z+(D<<2)>>2]<-(s*i)))break;c[z+(D<<2)>>2]=-(s*i);break}else{if(!(i>0))break;if(!(+c[z+(D<<2)>>2]>-(s*i)))break;c[z+(D<<2)>>2]=-(s*i);break}}while(0);c[z+(D<<2)>>2]=+c[e+232>>2]*+c[z+(D<<2)>>2];_=5}else _=5}else _=4;if((M&65535)<256){S=0;C=0}else{C=+c[e+1088>>2];S=C>0?1:2}a=n[e+1112>>0]|0;g=(S|0)!=0;if(!(a&255|S)){p=_e;return}k=te(o[t+24>>2]|0,_)|0;oe=o[t+12>>2]|0;o[oe+(k<<2)>>2]=ie;o[oe+(k+1<<2)>>2]=R;o[oe+(k+2<<2)>>2]=j;w=(o[u>>2]=ie,+c[u>>2]);c[Z+(k<<2)>>2]=-w;v=(o[u>>2]=R,+c[u>>2]);c[Z+(k+1<<2)>>2]=-v;y=(o[u>>2]=j,+c[u>>2]);c[Z+(k+2<<2)>>2]=-y;d=+c[e+192>>2];h=+c[e+196>>2];m=+c[((U&2048|0)==0?t+4|0:e+248|0)>>2];if(!(a<<24>>24==0|g&d==h)){if(!(U&4)){f=d;l=h}else{o[(o[t+32>>2]|0)+(k<<2)>>2]=o[e+228>>2];f=+c[e+192>>2];l=+c[e+196>>2]}i=+c[e+1084>>2];b=+c[e+1116>>2];s=m*+c[t>>2];do if(!(f>l))if(!(f==l)){if(b/s<0)if(i>=f?f-b/s>i:0){i=(f-i)/(b/s);break}else{i=i<f?0:1;break}if(b/s>0)if(i<=l?l-b/s<i:0){i=(l-i)/(b/s);break}else{i=i>l?0:1;break}else i=0}else i=0;else i=1;while(0);c[z+(k<<2)>>2]=i*b;c[(o[t+36>>2]|0)+(k<<2)>>2]=-+c[e+1120>>2]/+c[t>>2];c[(o[t+40>>2]|0)+(k<<2)>>2]=+c[e+1120>>2]/+c[t>>2]}if(!g){p=_e;return}c[z+(k<<2)>>2]=+c[z+(k<<2)>>2]+C*(m*+c[t>>2]);if(U&1024|0)o[(o[t+32>>2]|0)+(k<<2)>>2]=o[e+260>>2];do if(!(d==h)){a=(o[t+36>>2]|0)+(k<<2)|0;_=o[t+40>>2]|0;if((S|0)==1){c[a>>2]=0;c[_+(k<<2)>>2]=3.4028234663852886e38;break}else{c[a>>2]=-3.4028234663852886e38;c[_+(k<<2)>>2]=0;break}}else{c[(o[t+36>>2]|0)+(k<<2)>>2]=-3.4028234663852886e38;c[(o[t+40>>2]|0)+(k<<2)>>2]=3.4028234663852886e38}while(0);ae=1-+c[e+256>>2];s=+N(+ae);do if(!(ae!=ae|0!=0|ae==0)){oe=o[e+28>>2]|0;t=o[e+32>>2]|0;i=w*+c[oe+352>>2]+v*+c[oe+356>>2]+y*+c[oe+360>>2]-(w*+c[t+352>>2]+v*+c[t+356>>2]+y*+c[t+360>>2]);if((S|0)==1){if(!(i<0))break;if(!(+c[z+(k<<2)>>2]<-(s*i)))break;c[z+(k<<2)>>2]=-(s*i);break}else{if(!(i>0))break;if(!(+c[z+(k<<2)>>2]>-(s*i)))break;c[z+(k<<2)>>2]=-(s*i);break}}while(0);c[z+(k<<2)>>2]=+c[e+248>>2]*+c[z+(k<<2)>>2];p=_e;return}function xy(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;switch(t|0){case 2:{if((n|0)<1){c[e+232>>2]=i;o[e+300>>2]=o[e+300>>2]|512;return}if((n|0)<3){c[e+264>>2]=i;o[e+300>>2]=o[e+300>>2]|32;return}if((n|0)==3){c[e+248>>2]=i;o[e+300>>2]=o[e+300>>2]|2048;return}if((n|0)>=6)return;c[e+280>>2]=i;o[e+300>>2]=o[e+300>>2]|128;return}case 3:{if((n|0)<1){c[e+212>>2]=i;o[e+300>>2]=o[e+300>>2]|1;return}if((n|0)!=3)return;c[e+228>>2]=i;o[e+300>>2]=o[e+300>>2]|4;return}case 4:{if((n|0)<1){c[e+244>>2]=i;o[e+300>>2]=o[e+300>>2]|256;return}if((n|0)<3){c[e+276>>2]=i;o[e+300>>2]=o[e+300>>2]|16;return}if((n|0)==3){c[e+260>>2]=i;o[e+300>>2]=o[e+300>>2]|1024;return}if((n|0)>=6)return;c[e+292>>2]=i;o[e+300>>2]=o[e+300>>2]|64;return}default:return}}function My(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do switch(t|0){case 2:{if((i|0)<1){n=+c[e+232>>2];break e}if((i|0)<3){n=+c[e+264>>2];break e}if((i|0)==3){n=+c[e+248>>2];break e}if((i|0)<6)n=+c[e+280>>2];else n=3.4028234663852886e38;break}case 3:{if((i|0)<1){n=+c[e+212>>2];break e}if((i|0)==3)n=+c[e+228>>2];else n=3.4028234663852886e38;break}case 4:{if((i|0)<1){n=+c[e+244>>2];break e}if((i|0)<3){n=+c[e+276>>2];break e}if((i|0)==3){n=+c[e+260>>2];break e}if((i|0)<6)n=+c[e+292>>2];else n=3.4028234663852886e38;break}default:n=3.4028234663852886e38}while(0);return+n}function Py(e){e=e|0;return 204}function Wy(e,t,i){e=e|0;t=t|0;i=i|0;Gy(e,t,i)|0;o[t+52>>2]=o[e+52>>2];o[t+56>>2]=o[e+56>>2];o[t+60>>2]=o[e+60>>2];o[t+64>>2]=o[e+64>>2];o[t+68>>2]=o[e+68>>2];o[t+72>>2]=o[e+72>>2];o[t+76>>2]=o[e+76>>2];o[t+80>>2]=o[e+80>>2];o[t+84>>2]=o[e+84>>2];o[t+88>>2]=o[e+88>>2];o[t+92>>2]=o[e+92>>2];o[t+96>>2]=o[e+96>>2];o[t+100>>2]=o[e+100>>2];o[t+104>>2]=o[e+104>>2];o[t+108>>2]=o[e+108>>2];o[t+112>>2]=o[e+112>>2];o[t+116>>2]=o[e+116>>2];o[t+120>>2]=o[e+120>>2];o[t+124>>2]=o[e+124>>2];o[t+128>>2]=o[e+128>>2];o[t+132>>2]=o[e+132>>2];o[t+136>>2]=o[e+136>>2];o[t+140>>2]=o[e+140>>2];o[t+144>>2]=o[e+144>>2];o[t+148>>2]=o[e+148>>2];o[t+152>>2]=o[e+152>>2];o[t+156>>2]=o[e+156>>2];o[t+160>>2]=o[e+160>>2];o[t+164>>2]=o[e+164>>2];o[t+168>>2]=o[e+168>>2];o[t+172>>2]=o[e+172>>2];o[t+176>>2]=o[e+176>>2];o[t+180>>2]=o[e+188>>2];o[t+184>>2]=o[e+184>>2];o[t+188>>2]=o[e+196>>2];o[t+192>>2]=o[e+192>>2];o[t+196>>2]=_[e+180>>0];o[t+200>>2]=_[e+49>>0];return 15616}function By(e){e=e|0;return o[e+300>>2]|0}function Ay(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0;r=p;p=p+16|0;o[e+4>>2]=t;o[e>>2]=7188;o[e+8>>2]=-1;o[e+12>>2]=-1;c[e+16>>2]=3.4028234663852886e38;n[e+20>>0]=1;n[e+21>>0]=0;o[e+24>>2]=-1;o[e+28>>2]=i;if(!(n[19880]|0)){n[19880]=1;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;Vg(21260,0,0,0,r)}o[5366]=o[5366]|1;c[5407]=0;_=+c[5417]*0;s=+c[5418]*0;c[5412]=+c[5416]*0;c[5413]=_;c[5414]=s;c[5415]=0;o[5420]=0;o[5421]=0;o[5422]=0;o[5423]=0;s=+c[5409]*0;_=+c[5410]*0;c[5461]=+c[5408]*0;c[5462]=s;c[5463]=_;c[5464]=0;o[e+32>>2]=21260;c[e+36>>2]=0;c[e+40>>2]=.30000001192092896;o[e+44>>2]=0;p=r;return}function Fy(e){e=e|0;var t=0;o[e>>2]=7916;t=o[e+520>>2]|0;if(t|0){if(n[e+524>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+520>>2]=0}n[e+524>>0]=1;o[e+520>>2]=0;o[e+512>>2]=0;o[e+516>>2]=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(!t){n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}function Gy(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;o[t>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+28>>2]|0)|0;o[t+4>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+32>>2]|0)|0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t+8>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+12>>2]=o[e+4>>2];o[t+24>>2]=_[e+21>>0];o[t+40>>2]=o[e+24>>2];o[t+44>>2]=o[e+16>>2];o[t+48>>2]=_[e+20>>0];o[t+20>>2]=o[e+12>>2];o[t+16>>2]=o[e+8>>2];o[t+28>>2]=o[e+36>>2];o[t+32>>2]=o[e+40>>2];o[t+36>>2]=0;n=o[e+28>>2]|0;if((o[n+512>>2]|0)>0){i=0;do{if((o[(o[n+520>>2]|0)+(i<<2)>>2]|0)==(e|0)){o[t+36>>2]=1;n=o[e+28>>2]|0}i=i+1|0}while((i|0)<(o[n+512>>2]|0))}n=o[e+32>>2]|0;if((o[n+512>>2]|0)>0)i=0;else return 15639;do{if((o[(o[n+520>>2]|0)+(i<<2)>>2]|0)==(e|0)){o[t+36>>2]=1;n=o[e+32>>2]|0}i=i+1|0}while((i|0)<(o[n+512>>2]|0));return 15639}function Ey(e){e=e|0;var t=0,i=0,r=0;o[e>>2]=7656;if(n[e+272>>0]|0?(t=o[e+204>>2]|0,_P[o[o[t>>2]>>2]&255](t),t=o[e+204>>2]|0,t|0):0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+196>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+196>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}if(n[e+273>>0]|0?(r=o[e+200>>2]|0,_P[o[o[r>>2]>>2]&255](r),r=o[e+200>>2]|0,r|0):0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}t=o[e+316>>2]|0;if(t|0){if(n[e+320>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+316>>2]=0}n[e+320>>0]=1;o[e+316>>2]=0;o[e+308>>2]=0;o[e+312>>2]=0;t=o[e+288>>2]|0;if(t|0){if(n[e+292>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+288>>2]=0}n[e+292>>0]=1;o[e+288>>2]=0;o[e+280>>2]=0;o[e+284>>2]=0;t=o[e+240>>2]|0;if(t|0){if(n[e+244>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+240>>2]=0}n[e+244>>0]=1;o[e+240>>2]=0;o[e+232>>2]=0;o[e+236>>2]=0;t=o[e+220>>2]|0;if(t|0){if(n[e+224>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+220>>2]=0}n[e+224>>0]=1;o[e+220>>2]=0;o[e+212>>2]=0;o[e+216>>2]=0;t=o[e+188>>2]|0;if(!t){n[e+192>>0]=1;o[e+188>>2]=0;o[e+180>>2]=0;r=e+184|0;o[r>>2]=0;KC(e);return}if(n[e+192>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+188>>2]=0;n[e+192>>0]=1;o[e+188>>2]=0;o[e+180>>2]=0;r=e+184|0;o[r>>2]=0;KC(e);return}function Vy(e){e=e|0;Ey(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Ny(e){e=e|0;var t=0,i=0,n=0;n=p;p=p+16|0;Zp(15710);tw(e);e:do if(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0?(i=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0,(fP[o[(o[i>>2]|0)+56>>2]&127](i)|0)&6144|0):0){i=fP[o[(o[e>>2]|0)+104>>2]&127](e)|0;while(1){t=i+-1|0;if((i|0)<=0)break e;i=DP[o[(o[e>>2]|0)+108>>2]&31](e,t)|0;aP[o[(o[e>>2]|0)+168>>2]&127](e,i);i=t}}while(0);if((((fP[o[(o[e>>2]|0)+20>>2]&127](e)|0?(i=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0,(fP[o[(o[i>>2]|0)+56>>2]&127](i)|0)&16387|0):0)?fP[o[(o[e>>2]|0)+20>>2]&127](e)|0:0)?(i=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0,fP[o[(o[i>>2]|0)+56>>2]&127](i)|0):0)?(o[e+280>>2]|0)>0:0){t=0;do{i=o[(o[e+288>>2]|0)+(t<<2)>>2]|0;aP[o[(o[i>>2]|0)+12>>2]&127](i,o[e+72>>2]|0);t=t+1|0}while((t|0)<(o[e+280>>2]|0))}if(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0){e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;_P[o[(o[e>>2]|0)+100>>2]&255](e)}t=o[2006]|0;e=(o[t+16>>2]|0)+-1|0;o[t+16>>2]=e;if(e|0){p=n;return}do if(o[t+4>>2]|0){ut(n|0,0)|0;e=o[5649]|0;c[t+8>>2]=+c[t+8>>2]+ +(((o[n+4>>2]|0)-(o[e+4>>2]|0)+(((o[n>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[t+16>>2]|0)){t=o[2006]|0;break}else{p=n;return}}while(0);o[2006]=o[t+20>>2];p=n;return}function Xy(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;xw(e,t,i,n);return}function Hy(e,t){e=e|0;t=t|0;if((t|0)==0?1:(o[t+236>>2]&2|0)==0){Mw(e,t);return}else{aP[o[(o[e>>2]|0)+92>>2]&127](e,t);return}}function Zy(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0;_P[o[(o[t>>2]|0)+32>>2]&255](t);i=gP[o[(o[t>>2]|0)+16>>2]&63](t,104,1)|0;n=o[i+8>>2]|0;r=n;_=r+104|0;do{o[r>>2]=0;r=r+4|0}while((r|0)<(_|0));o[n+88>>2]=o[e+248>>2];o[n+92>>2]=o[e+252>>2];o[n+96>>2]=o[e+256>>2];o[n+100>>2]=o[e+260>>2];o[n>>2]=o[e+92>>2];o[n+4>>2]=o[e+96>>2];o[n+8>>2]=o[e+100>>2];o[n+12>>2]=o[e+104>>2];o[n+16>>2]=o[e+108>>2];o[n+20>>2]=o[e+116>>2];o[n+24>>2]=o[e+120>>2];o[n+28>>2]=o[e+124>>2];o[n+32>>2]=o[e+128>>2];o[n+36>>2]=o[e+132>>2];o[n+40>>2]=o[e+140>>2];o[n+44>>2]=o[e+144>>2];o[n+48>>2]=o[e+148>>2];o[n+52>>2]=o[e+152>>2];o[n+56>>2]=o[e+168>>2];o[n+60>>2]=o[e+172>>2];o[n+64>>2]=o[e+112>>2];o[n+68>>2]=o[e+156>>2];o[n+72>>2]=o[e+160>>2];o[n+76>>2]=o[e+164>>2];o[n+80>>2]=o[e+136>>2];rP[o[(o[t>>2]|0)+20>>2]&31](t,i,15725,1145853764,n);Bw(e,t);Uy(e,t);_P[o[(o[t>>2]|0)+36>>2]&255](t);return}function Uy(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0;i=o[e+8>>2]|0;if((i|0)>0){r=0;do{n=o[(o[e+16>>2]|0)+(r<<2)>>2]|0;if(o[n+236>>2]&2){_=fP[o[(o[n>>2]|0)+16>>2]&127](n)|0;_=gP[o[(o[t>>2]|0)+16>>2]&63](t,_,1)|0;i=gP[o[(o[n>>2]|0)+20>>2]&63](n,o[_+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,_,i,1497645650,n);i=o[e+8>>2]|0}r=r+1|0}while((r|0)<(i|0))}if((o[e+212>>2]|0)<=0)return;i=0;do{_=o[(o[e+220>>2]|0)+(i<<2)>>2]|0;n=fP[o[(o[_>>2]|0)+36>>2]&127](_)|0;n=gP[o[(o[t>>2]|0)+16>>2]&63](t,n,1)|0;r=gP[o[(o[_>>2]|0)+40>>2]&63](_,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,r,1397641027,_);i=i+1|0}while((i|0)<(o[e+212>>2]|0));return}function zy(e,t,i,r){e=e|0;t=+t;i=i|0;r=+r;var _=0,s=0,a=0,f=0;f=p;p=p+16|0;ut(o[5649]|0,0)|0;Hp(22556);o[5640]=(o[5640]|0)+1;a=o[5643]|0;o[5643]=a+1;if(!a){ut(f|0,0)|0;a=o[5649]|0;o[5642]=(o[f+4>>2]|0)-(o[a+4>>2]|0)+(((o[f>>2]|0)-(o[a>>2]|0)|0)*1e6|0)}o[5648]=0;ut(f|0,0)|0;Zp(15750);if(i){c[e+268>>2]=r;s=+c[e+264>>2]+t;c[e+264>>2]=s;if(!(s>=r)){t=r;a=0}else{c[e+264>>2]=s-+(~~(s/r)|0)*r;t=r;a=~~(s/r)}}else{c[e+264>>2]=n[e+300>>0]|0?0:t;c[e+268>>2]=0;a=!(+N(+t)<1.1920928955078125e-7)&1;i=a}if(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0){_=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;n[23328]=(fP[o[(o[_>>2]|0)+56>>2]&127](_)|0)>>>4&1}if(a){i=(a|0)>(i|0)?i:a;oP[o[(o[e>>2]|0)+164>>2]&31](e,t*+(i|0));_P[o[(o[e>>2]|0)+172>>2]&255](e);if((i|0)>0){_=0;do{oP[o[(o[e>>2]|0)+160>>2]&31](e,t);_P[o[(o[e>>2]|0)+80>>2]&255](e);_=_+1|0}while((_|0)<(i|0));i=e}else i=e}else{_P[o[(o[e>>2]|0)+80>>2]&255](e);i=e}_P[o[(o[i>>2]|0)+120>>2]&255](e);o[5648]=(o[5648]|0)+1;i=o[2006]|0;e=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=e;if(e|0){p=f;return a|0}do if(o[i+4>>2]|0){ut(f|0,0)|0;e=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[f+4>>2]|0)-(o[e+4>>2]|0)+(((o[f>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=f;return a|0}}while(0);o[2006]=o[i+20>>2];p=f;return a|0}function Yy(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0;r=o[e+212>>2]|0;if((r|0)==(o[e+216>>2]|0)?(a=r|0?r<<1:1,(r|0)<(a|0)):0){if(!a)s=0;else{o[5637]=(o[5637]|0)+1;r=Qa((a<<2|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}s=r;r=o[e+212>>2]|0}if((r|0)>0){_=0;do{o[s+(_<<2)>>2]=o[(o[e+220>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[e+220>>2]|0;if(_){if(n[e+224>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[e+212>>2]|0}o[e+220>>2]=0}n[e+224>>0]=1;o[e+220>>2]=s;o[e+216>>2]=a}o[(o[e+220>>2]|0)+(r<<2)>>2]=t;o[e+212>>2]=r+1;if(!i)return;Hg(o[t+28>>2]|0,t);Hg(o[t+32>>2]|0,t);return}function Ky(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0;r=o[e+212>>2]|0;e:do if((r|0)>0){_=o[e+220>>2]|0;i=0;while(1){n=_+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(r|0))break e}if((i|0)<(r|0)){o[n>>2]=o[_+(r+-1<<2)>>2];o[(o[e+220>>2]|0)+(r+-1<<2)>>2]=t;o[e+212>>2]=r+-1}}while(0);Zg(o[t+28>>2]|0,t);Zg(o[t+32>>2]|0,t);return}function Qy(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+280>>2]|0;if((i|0)==(o[e+284>>2]|0)?(s=i|0?i<<1:1,(i|0)<(s|0)):0){if(!s)_=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=i;i=o[e+280>>2]|0}if((i|0)>0){r=0;do{o[_+(r<<2)>>2]=o[(o[e+288>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(i|0))}r=o[e+288>>2]|0;if(r){if(n[e+292>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0);i=o[e+280>>2]|0}o[e+288>>2]=0}n[e+292>>0]=1;o[e+288>>2]=_;o[e+284>>2]=s}o[(o[e+288>>2]|0)+(i<<2)>>2]=t;o[e+280>>2]=i+1;return}function qy(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0;r=o[e+280>>2]|0;if((r|0)<=0)return;_=o[e+288>>2]|0;i=0;while(1){n=_+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(r|0)){s=7;break}}if((s|0)==7)return;if((i|0)>=(r|0))return;o[n>>2]=o[_+(r+-1<<2)>>2];o[(o[e+288>>2]|0)+(r+-1<<2)>>2]=t;o[e+280>>2]=r+-1;return}function Jy(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0;o[e+248>>2]=o[t>>2];o[e+248+4>>2]=o[t+4>>2];o[e+248+8>>2]=o[t+8>>2];o[e+248+12>>2]=o[t+12>>2];i=o[e+232>>2]|0;if((i|0)<=0)return;_=0;do{r=o[(o[e+240>>2]|0)+(_<<2)>>2]|0;switch(o[r+216>>2]|0){case 2:case 5:break;default:if(!(o[r+528>>2]&1)){n=+c[r+368>>2];if(n!=0){a=1/n*+c[t+4>>2];s=1/n*+c[t+8>>2];c[r+388>>2]=1/n*+c[t>>2];c[r+392>>2]=a;c[r+396>>2]=s;c[r+400>>2]=0}o[r+404>>2]=o[t>>2];o[r+404+4>>2]=o[t+4>>2];o[r+404+8>>2]=o[t+8>>2];o[r+404+12>>2]=o[t+12>>2];i=o[e+232>>2]|0}}_=_+1|0}while((_|0)<(i|0));return}function $y(e,t){e=e|0;t=t|0;o[e>>2]=o[t+248>>2];o[e+4>>2]=o[t+248+4>>2];o[e+8>>2]=o[t+248+8>>2];o[e+12>>2]=o[t+248+12>>2];return}function eg(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0;f=p;p=p+64|0;Zp(15765);e:do if(!(n[e+274>>0]|0)){t=o[e+232>>2]|0;if((t|0)>0){_=0;while(1){r=o[(o[e+240>>2]|0)+(_<<2)>>2]|0;switch(o[r+216>>2]|0){case 2:case 5:break;default:if((o[r+504>>2]|0)!=0?(o[r+204>>2]&3|0)==0:0){if((n[e+300>>0]|0)!=0?(a=+c[e+268>>2],a!=0):0)i=+c[e+264>>2]-a;else i=+c[e+264>>2]*+c[r+248>>2];Ev(r+68|0,+c[r+132>>2],+c[r+136>>2],+c[r+140>>2],r+148|0,i,f);t=o[r+504>>2]|0;aP[o[(o[t>>2]|0)+12>>2]&127](t,f);t=o[e+232>>2]|0}}_=_+1|0;if((_|0)>=(t|0))break e}}}else{t=o[e+8>>2]|0;if((t|0)>0){_=0;do{r=o[(o[e+16>>2]|0)+(_<<2)>>2]|0;if((!((r|0)==0?1:(o[r+236>>2]&2|0)==0)?(o[r+504>>2]|0)!=0:0)?(o[r+204>>2]&3|0)==0:0){if((n[e+300>>0]|0)!=0?(s=+c[e+268>>2],s!=0):0)i=+c[e+264>>2]-s;else i=+c[e+264>>2]*+c[r+248>>2];Ev(r+68|0,+c[r+132>>2],+c[r+136>>2],+c[r+140>>2],r+148|0,i,f);t=o[r+504>>2]|0;aP[o[(o[t>>2]|0)+12>>2]&127](t,f);t=o[e+8>>2]|0}_=_+1|0}while((_|0)<(t|0))}}while(0);t=o[2006]|0;e=(o[t+16>>2]|0)+-1|0;o[t+16>>2]=e;if(e|0){p=f;return}do if(o[t+4>>2]|0){ut(f|0,0)|0;e=o[5649]|0;c[t+8>>2]=+c[t+8>>2]+ +(((o[f+4>>2]|0)-(o[e+4>>2]|0)+(((o[f>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[t+16>>2]|0)){t=o[2006]|0;break}else{p=f;return}}while(0);o[2006]=o[t+20>>2];p=f;return}function tg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0;i=o[t+204>>2]|0;if((i&3|0)==0?(o[t+528>>2]&1|0)==0:0){_=+c[t+368>>2];if(_!=0){p=1/_*+c[e+252>>2];f=1/_*+c[e+256>>2];c[t+388>>2]=1/_*+c[e+248>>2];c[t+392>>2]=p;c[t+396>>2]=f;c[t+400>>2]=0}o[t+404>>2]=o[e+248>>2];o[t+404+4>>2]=o[e+248+4>>2];o[t+404+8>>2]=o[e+248+8>>2];o[t+404+12>>2]=o[e+248+12>>2]}if(!(o[t+192>>2]|0))return;if(i&1){if((o[t+216>>2]&-2|0)!=4)o[t+216>>2]=2}else{r=o[e+232>>2]|0;if((r|0)==(o[e+236>>2]|0)?(a=r|0?r<<1:1,(r|0)<(a|0)):0){if(!a)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((a<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[e+232>>2]|0}if((r|0)>0){s=0;do{o[i+(s<<2)>>2]=o[(o[e+240>>2]|0)+(s<<2)>>2];s=s+1|0}while((s|0)!=(r|0))}s=o[e+240>>2]|0;if(s){if(n[e+244>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);r=o[e+232>>2]|0}o[e+240>>2]=0}n[e+244>>0]=1;o[e+240>>2]=i;o[e+236>>2]=a;i=o[t+204>>2]|0}o[(o[e+240>>2]|0)+(r<<2)>>2]=t;o[e+232>>2]=r+1}a=(i&3|0)==0;HP[o[(o[e>>2]|0)+36>>2]&127](e,t,a?1:2,a?-1:-3);return}function ig(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,p=0,l=0,u=0;_=o[t+204>>2]|0;if((_&3|0)==0?(o[t+528>>2]&1|0)==0:0){s=+c[t+368>>2];if(s!=0){u=1/s*+c[e+252>>2];l=1/s*+c[e+256>>2];c[t+388>>2]=1/s*+c[e+248>>2];c[t+392>>2]=u;c[t+396>>2]=l;c[t+400>>2]=0}o[t+404>>2]=o[e+248>>2];o[t+404+4>>2]=o[e+248+4>>2];o[t+404+8>>2]=o[e+248+8>>2];o[t+404+12>>2]=o[e+248+12>>2]}if(!(o[t+192>>2]|0))return;if(_&1){if((o[t+216>>2]&-2|0)!=4)o[t+216>>2]=2}else{_=o[e+232>>2]|0;if((_|0)==(o[e+236>>2]|0)?(p=_|0?_<<1:1,(_|0)<(p|0)):0){if(!p)f=0;else{o[5637]=(o[5637]|0)+1;_=Qa((p<<2|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}f=_;_=o[e+232>>2]|0}if((_|0)>0){a=0;do{o[f+(a<<2)>>2]=o[(o[e+240>>2]|0)+(a<<2)>>2];a=a+1|0}while((a|0)!=(_|0))}a=o[e+240>>2]|0;if(a){if(n[e+244>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0);_=o[e+232>>2]|0}o[e+240>>2]=0}n[e+244>>0]=1;o[e+240>>2]=f;o[e+236>>2]=p}o[(o[e+240>>2]|0)+(_<<2)>>2]=t;o[e+232>>2]=_+1}HP[o[(o[e>>2]|0)+36>>2]&127](e,t,i,r);return}function ng(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0;r=o[e+232>>2]|0;e:do if((r|0)>0){_=o[e+240>>2]|0;i=0;while(1){n=_+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(r|0))break e}if((i|0)<(r|0)){o[n>>2]=o[_+(r+-1<<2)>>2];o[(o[e+240>>2]|0)+(r+-1<<2)>>2]=t;o[e+232>>2]=r+-1}}while(0);i=o[t+188>>2]|0;if(i|0){_=o[e+68>>2]|0;_=fP[o[(o[_>>2]|0)+36>>2]&127](_)|0;EP[o[(o[_>>2]|0)+40>>2]&127](_,i,o[e+24>>2]|0);_=o[e+68>>2]|0;EP[o[(o[_>>2]|0)+12>>2]&127](_,i,o[e+24>>2]|0);o[t+188>>2]=0}r=o[e+8>>2]|0;if((r|0)<=0)return;_=o[e+16>>2]|0;i=0;while(1){n=_+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(r|0)){s=15;break}}if((s|0)==15)return;if((i|0)>=(r|0))return;o[n>>2]=o[_+(r+-1<<2)>>2];o[(o[e+16>>2]|0)+(r+-1<<2)>>2]=t;o[e+8>>2]=r+-1;return}function rg(e,t){e=e|0;t=t|0;var i=0;if(n[e+273>>0]|0?(i=o[e+200>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}n[e+273>>0]=0;o[e+200>>2]=t;o[(o[e+196>>2]|0)+8>>2]=t;return}function og(e){e=e|0;return o[e+200>>2]|0}function _g(e){e=e|0;return o[e+212>>2]|0}function sg(e,t){e=e|0;t=t|0;return o[(o[e+220>>2]|0)+(t<<2)>>2]|0}function ag(e,t){e=e|0;t=t|0;return o[(o[e+220>>2]|0)+(t<<2)>>2]|0}function cg(e){e=e|0;return 2}function fg(e){e=e|0;var t=0,i=0;if((o[e+232>>2]|0)<=0)return;t=0;do{i=(o[(o[e+240>>2]|0)+(t<<2)>>2]|0)+436|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[i+20>>2]=0;o[i+24>>2]=0;o[i+28>>2]=0;t=t+1|0}while((t|0)<(o[e+232>>2]|0));return}function pg(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+64>>2]&127](e,t);return}function lg(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+68>>2]&127](e,t);return}function ug(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+64>>2]&127](e,t);return}function bg(e,t){e=e|0;t=t|0;aP[o[(o[e>>2]|0)+68>>2]&127](e,t);return}function dg(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0;_=p;p=p+16|0;Zp(15789);i=o[e+232>>2]|0;if((i|0)>0){r=0;do{n=o[(o[e+240>>2]|0)+(r<<2)>>2]|0;if(!(o[n+204>>2]&3)){Ng(n,t);Ev(n+4|0,+c[n+336>>2],+c[n+340>>2],+c[n+344>>2],n+352|0,t,n+68|0);i=o[e+232>>2]|0}r=r+1|0}while((r|0)<(i|0))}i=o[2006]|0;e=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=e;if(e|0){p=_;return}do if(o[i+4>>2]|0){ut(_|0,0)|0;e=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[_+4>>2]|0)-(o[e+4>>2]|0)+(((o[_>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=_;return}}while(0);o[2006]=o[i+20>>2];p=_;return}function hg(e,t){e=e|0;t=+t;var i=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;y=p;p=p+304|0;Zp(15815);e:do if((o[e+232>>2]|0)>0){u=y+136+48|0;b=0;while(1){l=o[(o[e+240>>2]|0)+(b<<2)>>2]|0;c[l+248>>2]=1;t:do switch(o[l+216>>2]|0){case 2:case 5:break;default:if(!(o[l+204>>2]&3)){Ev(l+4|0,+c[l+336>>2],+c[l+340>>2],+c[l+344>>2],l+352|0,t,y+136|0);_=+c[u>>2]-+c[l+52>>2];a=+c[y+136+52>>2]-+c[l+56>>2];f=+c[y+136+56>>2]-+c[l+60>>2];if(n[e+44>>0]|0?(g=+c[l+256>>2],g*g!=0?g*g<_*_+a*a+f*f:0):0){Zp(15835);if((o[(o[l+192>>2]|0)+4>>2]|0)<20){o[5475]=(o[5475]|0)+1;i=o[e+68>>2]|0;i=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0;s=o[e+24>>2]|0;c[y+200+4>>2]=1;r[y+200+8>>1]=1;r[y+200+10>>1]=-1;o[y+200>>2]=7848;o[y+200+12>>2]=o[l+52>>2];o[y+200+12+4>>2]=o[l+52+4>>2];o[y+200+12+8>>2]=o[l+52+8>>2];o[y+200+12+12>>2]=o[l+52+12>>2];o[y+200+28>>2]=o[u>>2];o[y+200+28+4>>2]=o[u+4>>2];o[y+200+28+8>>2]=o[u+8>>2];o[y+200+28+12>>2]=o[u+12>>2];o[y+200+76>>2]=0;o[y+200>>2]=7872;o[y+200+80>>2]=l;o[y+200+88>>2]=i;o[y+200+92>>2]=s;s=o[l+252>>2]|0;o[y+64+8>>2]=0;o[y+64+12>>2]=-1;o[y+64+16>>2]=1065353216;o[y+64+20>>2]=1065353216;o[y+64+24>>2]=1065353216;c[y+64+28>>2]=0;o[y+64>>2]=6380;o[y+64+4>>2]=8;o[y+64+32>>2]=s;o[y+64+48>>2]=s;o[y+200+84>>2]=o[e+56>>2];s=o[(o[l+188>>2]|0)+4>>2]|0;r[y+200+8>>1]=s;r[y+200+10>>1]=s>>>16;o[y+48>>2]=o[u>>2];o[y+48+4>>2]=o[u+4>>2];o[y+48+8>>2]=o[u+8>>2];o[y+48+12>>2]=o[u+12>>2];o[y>>2]=o[l+4>>2];o[y+4>>2]=o[l+4+4>>2];o[y+8>>2]=o[l+4+8>>2];o[y+12>>2]=o[l+4+12>>2];o[y+16>>2]=o[l+20>>2];o[y+16+4>>2]=o[l+20+4>>2];o[y+16+8>>2]=o[l+20+8>>2];o[y+16+12>>2]=o[l+20+12>>2];o[y+32>>2]=o[l+36>>2];o[y+32+4>>2]=o[l+36+4>>2];o[y+32+8>>2]=o[l+36+8>>2];o[y+32+12>>2]=o[l+36+12>>2];zw(e,y+64|0,l+4|0,y,y+200|0,0);_=+c[y+200+4>>2];if(_<1){c[l+248>>2]=_;Ev(l+4|0,+c[l+336>>2],+c[l+340>>2],+c[l+344>>2],l+352|0,_*t,y+136|0);c[l+248>>2]=0;Xg(l,y+136|0);i=4}else i=0;if(!i)d=12}else d=12;if((d|0)==12){d=0;i=0}s=o[2006]|0;v=(o[s+16>>2]|0)+-1|0;o[s+16>>2]=v;do if(!v){if(o[s+4>>2]|0){ut(y+200|0,0)|0;v=o[5649]|0;c[s+8>>2]=+c[s+8>>2]+ +(((o[y+200+4>>2]|0)-(o[v+4>>2]|0)+(((o[y+200>>2]|0)-(o[v>>2]|0)|0)*1e6|0)-(o[s+12>>2]|0)|0)>>>0)/1e3;if(o[s+16>>2]|0)break;s=o[2006]|0}o[2006]=o[s+20>>2]}while(0);if(i|0)break t}Xg(l,y+136|0)}}while(0);b=b+1|0;if((b|0)>=(o[e+232>>2]|0))break e}}while(0);do if(n[e+275>>0]|0){Zp(15892);if((o[e+308>>2]|0)>0){d=0;do{b=o[(o[e+316>>2]|0)+(d<<2)>>2]|0;l=o[b+740>>2]|0;l=(o[l+236>>2]&2|0)==0?0:l;u=o[b+744>>2]|0;u=(o[u+236>>2]&2|0)==0?0:u;i=o[b+748>>2]|0;if((i|0)>0)if(!l){s=0;do{_=+c[57]*+c[u+228>>2];if(_>0?(h=+c[b+4+(s*184|0)+120>>2],h!=0):0){f=_*(+c[b+4+(s*184|0)+64>>2]*h);t=_*(+c[b+4+(s*184|0)+68>>2]*h);g=_*(+c[b+4+(s*184|0)+72>>2]*h);_=+c[b+4+(s*184|0)+36>>2]-+c[u+56>>2];a=+c[b+4+(s*184|0)+40>>2]-+c[u+60>>2];c[y>>2]=+c[b+4+(s*184|0)+32>>2]-+c[u+52>>2];c[y+4>>2]=_;c[y+8>>2]=a;c[y+12>>2]=0;c[y+120>>2]=f;c[y+120+4>>2]=t;c[y+120+8>>2]=g;c[y+120+12>>2]=0;VI(u,y+120|0,y);i=o[b+748>>2]|0}s=s+1|0}while((s|0)<(i|0))}else{s=0;do{_=+c[l+228>>2]*+c[u+228>>2];if(_>0?(m=+c[b+4+(s*184|0)+120>>2],m!=0):0){f=_*(+c[b+4+(s*184|0)+64>>2]*m);t=_*(+c[b+4+(s*184|0)+68>>2]*m);g=_*(+c[b+4+(s*184|0)+72>>2]*m);c[y+200>>2]=-f;c[y+200+4>>2]=-t;c[y+200+8>>2]=-g;c[y+200+12>>2]=0;a=+c[b+4+(s*184|0)+52>>2]-+c[l+56>>2];_=+c[b+4+(s*184|0)+56>>2]-+c[l+60>>2];c[y+64>>2]=+c[b+4+(s*184|0)+48>>2]-+c[l+52>>2];c[y+64+4>>2]=a;c[y+64+8>>2]=_;c[y+64+12>>2]=0;_=+c[b+4+(s*184|0)+36>>2]-+c[u+56>>2];a=+c[b+4+(s*184|0)+40>>2]-+c[u+60>>2];c[y>>2]=+c[b+4+(s*184|0)+32>>2]-+c[u+52>>2];c[y+4>>2]=_;c[y+8>>2]=a;c[y+12>>2]=0;VI(l,y+200|0,y+64|0);c[y+120>>2]=f;c[y+120+4>>2]=t;c[y+120+8>>2]=g;c[y+120+12>>2]=0;VI(u,y+120|0,y);i=o[b+748>>2]|0}s=s+1|0}while((s|0)<(i|0))}d=d+1|0}while((d|0)<(o[e+308>>2]|0))}i=o[2006]|0;v=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=v;if(!v){if(o[i+4>>2]|0){ut(y+200|0,0)|0;v=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[y+200+4>>2]|0)-(o[v+4>>2]|0)+(((o[y+200>>2]|0)-(o[v>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(o[i+16>>2]|0)break;i=o[2006]|0}o[2006]=o[i+20>>2]}}while(0);i=o[2006]|0;v=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=v;if(v|0){p=y;return}do if(o[i+4>>2]|0){ut(y+200|0,0)|0;v=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[y+200+4>>2]|0)-(o[v+4>>2]|0)+(((o[y+200>>2]|0)-(o[v>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=y;return}}while(0);o[2006]=o[i+20>>2];p=y;return}function mg(e){e=e|0;qa(e);return}function yg(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;\no[e+4>>2]=o[t+40>>2];n=o[t>>2]|0;o[e+76>>2]=n;if(i){o[e+44>>2]=o[t+8>>2];o[e+44+4>>2]=o[t+8+4>>2];o[e+44+8>>2]=o[t+8+8>>2];o[e+44+12>>2]=o[t+8+12>>2];e=e+60|0;i=t+24|0;o[e>>2]=o[i>>2];o[e+4>>2]=o[i+4>>2];o[e+8>>2]=o[i+8>>2];o[e+12>>2]=o[i+12>>2];r=+c[t+40>>2];return+r}else{f=+c[t+8>>2];a=+c[t+12>>2];s=+c[t+16>>2];_=f*+c[n+20>>2]+a*+c[n+24>>2]+s*+c[n+28>>2];r=f*+c[n+36>>2]+a*+c[n+40>>2]+s*+c[n+44>>2];c[e+44>>2]=+c[n+4>>2]*f+ +c[n+8>>2]*a+ +c[n+12>>2]*s;c[e+48>>2]=_;c[e+52>>2]=r;c[e+56>>2]=0;e=e+60|0;i=t+24|0;o[e>>2]=o[i>>2];o[e+4>>2]=o[i+4>>2];o[e+8>>2]=o[i+8>>2];o[e+12>>2]=o[i+12>>2];r=+c[t+40>>2];return+r}return 0}function gg(e){e=e|0;qa(e);return}function vg(e,t){e=e|0;t=t|0;var i=0,n=0;i=o[t>>2]|0;n=o[e+80>>2]|0;if((i|0)==(n|0)){e=0;return e|0}t=o[t+4>>2]|0;if(!((r[e+10>>1]&(t&65535))<<16>>16)){e=0;return e|0}if(!((r[e+8>>1]&(t>>>16&65535))<<16>>16)){e=0;return e|0}e=o[e+92>>2]|0;e=gP[o[(o[e>>2]|0)+28>>2]&63](e,n,i)|0;return e|0}function Cg(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;n=o[t>>2]|0;if((n|0)==(o[e+80>>2]|0)){r=1;return+r}if(o[n+204>>2]&4|0){r=1;return+r}if((+c[e+28>>2]-+c[e+12>>2])*+c[t+8>>2]+(+c[e+32>>2]-+c[e+16>>2])*+c[t+12>>2]+(+c[e+36>>2]-+c[e+20>>2])*+c[t+16>>2]>=-+c[e+84>>2]){r=1;return+r}o[e+4>>2]=o[t+40>>2];o[e+76>>2]=n;if(i){o[e+44>>2]=o[t+8>>2];o[e+44+4>>2]=o[t+8+4>>2];o[e+44+8>>2]=o[t+8+8>>2];o[e+44+12>>2]=o[t+8+12>>2]}else{f=+c[t+8>>2];a=+c[t+12>>2];s=+c[t+16>>2];_=f*+c[n+20>>2]+a*+c[n+24>>2]+s*+c[n+28>>2];r=f*+c[n+36>>2]+a*+c[n+40>>2]+s*+c[n+44>>2];c[e+44>>2]=+c[n+4>>2]*f+ +c[n+8>>2]*a+ +c[n+12>>2]*s;c[e+48>>2]=_;c[e+52>>2]=r;c[e+56>>2]=0}o[e+60>>2]=o[t+24>>2];o[e+60+4>>2]=o[t+24+4>>2];o[e+60+8>>2]=o[t+24+8>>2];o[e+60+12>>2]=o[t+24+12>>2];f=+c[t+40>>2];return+f}function wg(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0;d=p;p=p+16|0;Zp(16195);f=o[e+204>>2]|0;EP[o[(o[f>>2]|0)+8>>2]&127](f,e,o[e+24>>2]|0);f=o[e+308>>2]|0;if((f|0)>0){a=o[e+316>>2]|0;l=0;do{i=o[a+(l<<2)>>2]|0;t=o[i+740>>2]|0;i=o[i+744>>2]|0;if((t|0?i|0?(o[t+204>>2]&3|0)==0:0:0)?(o[i+204>>2]&3|0)==0:0){_=o[t+208>>2]|0;t=o[i+208>>2]|0;s=o[(o[e+204>>2]|0)+16>>2]|0;i=o[s+(_<<3)>>2]|0;if((i|0)!=(_|0)){r=s+(_<<3)|0;do{_=s+(i<<3)|0;o[r>>2]=o[_>>2];_=o[_>>2]|0;r=s+(_<<3)|0;i=o[r>>2]|0}while((_|0)!=(i|0))}i=o[s+(t<<3)>>2]|0;if((i|0)!=(t|0)){r=s+(t<<3)|0;do{t=s+(i<<3)|0;o[r>>2]=o[t>>2];t=o[t>>2]|0;r=s+(t<<3)|0;i=o[r>>2]|0}while((t|0)!=(i|0))}if((_|0)!=(t|0)){o[s+(_<<3)>>2]=t;r=s+(t<<3)+4|0;o[r>>2]=(o[r>>2]|0)+(o[s+(_<<3)+4>>2]|0)}}l=l+1|0}while((l|0)!=(f|0))}f=o[e+212>>2]|0;if((f|0)>0){a=o[e+220>>2]|0;l=0;do{t=o[a+(l<<2)>>2]|0;if((n[t+20>>0]|0?(u=o[t+28>>2]|0,(o[u+204>>2]&3|0)==0):0)?(b=o[t+32>>2]|0,(o[b+204>>2]&3|0)==0):0){r=o[u+208>>2]|0;t=o[b+208>>2]|0;s=o[(o[e+204>>2]|0)+16>>2]|0;i=o[s+(r<<3)>>2]|0;if((i|0)==(r|0))_=r;else{r=s+(r<<3)|0;do{_=s+(i<<3)|0;o[r>>2]=o[_>>2];_=o[_>>2]|0;r=s+(_<<3)|0;i=o[r>>2]|0}while((_|0)!=(i|0))}i=o[s+(t<<3)>>2]|0;if((i|0)!=(t|0)){r=s+(t<<3)|0;do{t=s+(i<<3)|0;o[r>>2]=o[t>>2];t=o[t>>2]|0;r=s+(t<<3)|0;i=o[r>>2]|0}while((t|0)!=(i|0))}if((_|0)!=(t|0)){o[s+(_<<3)>>2]=t;r=s+(t<<3)+4|0;o[r>>2]=(o[r>>2]|0)+(o[s+(_<<3)+4>>2]|0)}}l=l+1|0}while((l|0)!=(f|0))}t=o[e+204>>2]|0;aP[o[(o[t>>2]|0)+12>>2]&127](t,e);t=o[2006]|0;e=(o[t+16>>2]|0)+-1|0;o[t+16>>2]=e;if(e|0){p=d;return}do if(o[t+4>>2]|0){ut(d|0,0)|0;e=o[5649]|0;c[t+8>>2]=+c[t+8>>2]+ +(((o[d+4>>2]|0)-(o[e+4>>2]|0)+(((o[d>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[t+16>>2]|0)){t=o[2006]|0;break}else{p=d;return}}while(0);o[2006]=o[t+20>>2];p=d;return}function kg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0;f=p;p=p+16|0;Zp(16222);a=o[e+212>>2]|0;s=o[e+180>>2]|0;if((s|0)<(a|0)){if((o[e+184>>2]|0)<(a|0)){if(!a){i=0;r=s}else{o[5637]=(o[5637]|0)+1;i=Qa((a<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[e+180>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[e+188>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}r=o[e+188>>2]|0;if(r|0){if(n[e+192>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+188>>2]=0}n[e+192>>0]=1;o[e+188>>2]=i;o[e+184>>2]=a;r=e+188|0}else r=e+188|0;i=s;do{o[(o[r>>2]|0)+(i<<2)>>2]=0;i=i+1|0}while((i|0)!=(a|0))}else r=e+188|0;o[e+180>>2]=a;i=0;while(1){if((i|0)>=(fP[o[(o[e>>2]|0)+104>>2]&127](e)|0))break;o[(o[r>>2]|0)+(i<<2)>>2]=o[(o[e+220>>2]|0)+(i<<2)>>2];i=i+1|0}i=o[e+180>>2]|0;if((i|0)>1)Sg(e+176|0,0,i+-1|0);if(!(fP[o[(o[e>>2]|0)+104>>2]&127](e)|0))i=0;else i=o[r>>2]|0;_=o[e+196>>2]|0;s=o[e+180>>2]|0;a=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;o[_+4>>2]=t;o[_+12>>2]=i;o[_+16>>2]=s;o[_+20>>2]=a;i=o[_+32>>2]|0;if((i|0)<0){if((o[_+36>>2]|0)<0){r=o[_+40>>2]|0;if(r|0){if(n[_+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[_+40>>2]=0}n[_+44>>0]=1;o[_+40>>2]=0;o[_+36>>2]=0}do{o[(o[_+40>>2]|0)+(i<<2)>>2]=0;i=i+1|0}while((i|0)!=0)}o[_+32>>2]=0;i=o[_+52>>2]|0;if((i|0)<0){if((o[_+56>>2]|0)<0){r=o[_+60>>2]|0;if(r|0){if(n[_+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[_+60>>2]=0}n[_+64>>0]=1;o[_+60>>2]=0;o[_+56>>2]=0}do{o[(o[_+60>>2]|0)+(i<<2)>>2]=0;i=i+1|0}while((i|0)!=0)}o[_+52>>2]=0;i=o[_+72>>2]|0;if((i|0)<0){if((o[_+76>>2]|0)<0){r=o[_+80>>2]|0;if(r|0){if(n[_+84>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[_+80>>2]=0}n[_+84>>0]=1;o[_+80>>2]=0;o[_+76>>2]=0}do{o[(o[_+80>>2]|0)+(i<<2)>>2]=0;i=i+1|0}while((i|0)!=0)}o[_+72>>2]=0;s=o[e+200>>2]|0;_=o[(o[s>>2]|0)+8>>2]|0;a=o[e+8>>2]|0;i=o[e+24>>2]|0;i=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0;EP[_&127](s,a,i);HD(o[e+204>>2]|0,o[e+24>>2]|0,e,o[e+196>>2]|0);Rg(o[e+196>>2]|0);i=o[e+200>>2]|0;EP[o[(o[i>>2]|0)+16>>2]&127](i,t,o[e+72>>2]|0);i=o[2006]|0;e=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=e;if(e|0){p=f;return}do if(o[i+4>>2]|0){ut(f|0,0)|0;e=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[f+4>>2]|0)-(o[e+4>>2]|0)+(((o[f>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=f;return}}while(0);o[2006]=o[i+20>>2];p=f;return}function Sg(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0;while(1){f=o[e+12>>2]|0;p=o[f+(((t+i|0)/2|0)<<2)>>2]|0;n=t;r=i;while(1){c=o[(o[p+28>>2]|0)+208>>2]|0;if((c|0)>-1)while(1){s=o[f+(n<<2)>>2]|0;_=o[(o[s+28>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+32>>2]|0)+208>>2]|0;if((_|0)<(c|0))n=n+1|0;else break}else{a=o[(o[p+32>>2]|0)+208>>2]|0;while(1){s=o[f+(n<<2)>>2]|0;_=o[(o[s+28>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+32>>2]|0)+208>>2]|0;if((_|0)<(a|0))n=n+1|0;else break}}if((c|0)>-1)while(1){s=o[f+(r<<2)>>2]|0;_=o[(o[s+28>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+32>>2]|0)+208>>2]|0;if((c|0)<(_|0))r=r+-1|0;else break}else{a=o[(o[p+32>>2]|0)+208>>2]|0;while(1){s=o[f+(r<<2)>>2]|0;_=o[(o[s+28>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+32>>2]|0)+208>>2]|0;if((a|0)<(_|0))r=r+-1|0;else break}}if((n|0)<=(r|0)){a=f+(n<<2)|0;c=o[a>>2]|0;o[a>>2]=o[f+(r<<2)>>2];o[(o[e+12>>2]|0)+(r<<2)>>2]=c;n=n+1|0;r=r+-1|0}if((n|0)>(r|0))break;f=o[e+12>>2]|0}if((r|0)>(t|0))Sg(e,t,r);if((n|0)<(i|0))t=n;else break}return}function Rg(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,c=0;t=o[e+32>>2]|0;if(!t)r=0;else r=o[e+40>>2]|0;a=o[e+52>>2]|0;if(!a)_=0;else _=o[e+60>>2]|0;i=o[e+72>>2]|0;if(!i)s=0;else s=o[e+80>>2]|0;c=o[e+8>>2]|0;+LP[o[(o[c>>2]|0)+12>>2]&3](c,r,t,_,a,s,i,o[e+4>>2]|0,o[e+20>>2]|0,o[e+24>>2]|0);t=o[e+32>>2]|0;if((t|0)<0){if((o[e+36>>2]|0)<0){i=o[e+40>>2]|0;if(i|0){if(n[e+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+40>>2]=0}n[e+44>>0]=1;o[e+40>>2]=0;o[e+36>>2]=0}do{o[(o[e+40>>2]|0)+(t<<2)>>2]=0;t=t+1|0}while((t|0)!=0)}o[e+32>>2]=0;t=o[e+52>>2]|0;if((t|0)<0){if((o[e+56>>2]|0)<0){i=o[e+60>>2]|0;if(i|0){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+60>>2]=0}n[e+64>>0]=1;o[e+60>>2]=0;o[e+56>>2]=0}do{o[(o[e+60>>2]|0)+(t<<2)>>2]=0;t=t+1|0}while((t|0)!=0)}o[e+52>>2]=0;t=o[e+72>>2]|0;if((t|0)>=0){o[e+72>>2]=0;return}if((o[e+76>>2]|0)<0){i=o[e+80>>2]|0;if(i|0){if(n[e+84>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+80>>2]=0}n[e+84>>0]=1;o[e+80>>2]=0;o[e+76>>2]=0}do{o[(o[e+80>>2]|0)+(t<<2)>>2]=0;t=t+1|0}while((t|0)!=0);o[e+72>>2]=0;return}function jg(e,t){e=e|0;t=+t;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;l=p;p=p+16|0;Zp(15930);i=o[e+232>>2]|0;if((i|0)>0){f=(n[23328]|0)==0;a=0;do{s=o[(o[e+240>>2]|0)+(a<<2)>>2]|0;e:do if(s){r=o[s+216>>2]|0;t:do switch(r|0){case 4:case 2:{if((r|0)==4)break e;break}default:{h=+c[s+336>>2];d=+c[s+340>>2];b=+c[s+344>>2];u=+c[s+496>>2];if(h*h+d*d+b*b<u*u?(u=+c[s+352>>2],b=+c[s+356>>2],d=+c[s+360>>2],h=+c[s+500>>2],u*u+b*b+d*d<h*h):0){c[s+220>>2]=+c[s+220>>2]+t;break t}c[s+220>>2]=0;if((r&-2|0)!=4){o[s+216>>2]=0;r=0}}}while(0);_=r&-2;do if(f){if((_|0)!=2?!(+c[s+220>>2]>2):0)break;if(o[s+204>>2]&3|0){if((_|0)==4)break e;o[s+216>>2]=2;break e}if((r|0)==1){if((_|0)==4)break e;o[s+216>>2]=3;break e}else{if((r|0)!=2)break e;i=(o[s+284>>2]|0)+2|0;o[s+352>>2]=0;o[s+352+4>>2]=0;o[s+352+8>>2]=0;o[s+352+12>>2]=0;o[s+284>>2]=i;o[s+336>>2]=0;o[s+336+4>>2]=0;o[s+336+8>>2]=0;o[s+336+12>>2]=0;i=o[e+232>>2]|0;break e}}while(0);if((_|0)!=4)o[s+216>>2]=1}while(0);a=a+1|0}while((a|0)<(i|0))}i=o[2006]|0;e=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=e;if(e|0){p=l;return}do if(o[i+4>>2]|0){ut(l|0,0)|0;e=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[l+4>>2]|0)-(o[e+4>>2]|0)+(((o[l>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=l;return}}while(0);o[2006]=o[i+20>>2];p=l;return}function Ig(e,t){e=e|0;t=+t;var i=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0;I=p;p=p+464|0;Zp(15952);i=o[e+84>>2]|0;if(i|0)oP[i&31](e,t);oP[o[(o[e>>2]|0)+140>>2]&31](e,t);c[e+28>>2]=t;o[e+32>>2]=0;o[e+48>>2]=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;Zp(15981);Zp(16006);i=o[e+316>>2]|0;if((o[e+308>>2]|0)>0){_=0;do{y=o[e+24>>2]|0;aP[o[(o[y>>2]|0)+16>>2]&127](y,o[i+(_<<2)>>2]|0);_=_+1|0;i=o[e+316>>2]|0}while((_|0)<(o[e+308>>2]|0))}if(i|0){if(n[e+320>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+316>>2]=0}n[e+320>>0]=1;o[e+316>>2]=0;o[e+308>>2]=0;o[e+312>>2]=0;i=o[2006]|0;y=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=y;do if(!y){if(o[i+4>>2]|0){ut(I+368|0,0)|0;y=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[I+368+4>>2]|0)-(o[y+4>>2]|0)+(((o[I+368>>2]|0)-(o[y>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(o[i+16>>2]|0)break;i=o[2006]|0}o[2006]=o[i+20>>2]}while(0);e:do if((o[e+232>>2]|0)>0){h=I+304+48|0;m=I+368+44|0;y=0;while(1){a=o[(o[e+240>>2]|0)+(y<<2)>>2]|0;c[a+248>>2]=1;t:do switch(o[a+216>>2]|0){case 2:case 5:break;default:if(((o[a+204>>2]&3|0)==0?(Ev(a+4|0,+c[a+336>>2],+c[a+340>>2],+c[a+344>>2],a+352|0,t,I+304|0),g=+c[h>>2],v=g-+c[a+52>>2],C=+c[I+304+52>>2],w=C-+c[a+56>>2],k=+c[I+304+56>>2],S=k-+c[a+60>>2],n[e+44>>0]|0):0)?(b=+c[a+256>>2],b*b!=0?b*b<v*v+w*w+S*S:0):0){Zp(16043);if((o[(o[a+192>>2]|0)+4>>2]|0)<20?(o[5475]=(o[5475]|0)+1,s=o[e+68>>2]|0,s=fP[o[(o[s>>2]|0)+36>>2]&127](s)|0,d=o[e+24>>2]|0,c[I+368+4>>2]=1,r[I+368+8>>1]=1,r[I+368+10>>1]=-1,o[I+368>>2]=7848,o[I+368+12>>2]=o[a+52>>2],o[I+368+12+4>>2]=o[a+52+4>>2],o[I+368+12+8>>2]=o[a+52+8>>2],o[I+368+12+12>>2]=o[a+52+12>>2],o[I+368+28>>2]=o[h>>2],o[I+368+28+4>>2]=o[h+4>>2],o[I+368+28+8>>2]=o[h+8>>2],o[I+368+28+12>>2]=o[h+12>>2],o[I+368+76>>2]=0,o[I+368>>2]=7872,o[I+368+80>>2]=a,o[I+368+88>>2]=s,o[I+368+92>>2]=d,d=o[a+252>>2]|0,o[I+248+8>>2]=0,o[I+248+12>>2]=-1,o[I+248+16>>2]=1065353216,o[I+248+20>>2]=1065353216,o[I+248+24>>2]=1065353216,c[I+248+28>>2]=0,o[I+248>>2]=6380,o[I+248+4>>2]=8,o[I+248+32>>2]=d,o[I+248+48>>2]=d,o[I+368+84>>2]=o[e+56>>2],d=o[(o[a+188>>2]|0)+4>>2]|0,r[I+368+8>>1]=d,r[I+368+10>>1]=d>>>16,o[I+184+48>>2]=o[h>>2],o[I+184+48+4>>2]=o[h+4>>2],o[I+184+48+8>>2]=o[h+8>>2],o[I+184+48+12>>2]=o[h+12>>2],o[I+184>>2]=o[a+4>>2],o[I+184+4>>2]=o[a+4+4>>2],o[I+184+8>>2]=o[a+4+8>>2],o[I+184+12>>2]=o[a+4+12>>2],o[I+184+16>>2]=o[a+20>>2],o[I+184+16+4>>2]=o[a+20+4>>2],o[I+184+16+8>>2]=o[a+20+8>>2],o[I+184+16+12>>2]=o[a+20+12>>2],o[I+184+32>>2]=o[a+36>>2],o[I+184+32+4>>2]=o[a+36+4>>2],o[I+184+32+8>>2]=o[a+36+8>>2],o[I+184+32+12>>2]=o[a+36+12>>2],zw(e,I+248|0,a+4|0,I+184|0,I+368|0,0),R=+c[I+368+4>>2],R<1):0){f=R*(g-+c[a+52>>2]);l=R*(C-+c[a+56>>2]);u=R*(k-+c[a+60>>2]);b=-(l*+c[I+368+48>>2])-f*+c[m>>2]-u*+c[I+368+52>>2];d=o[e+24>>2]|0;d=gP[o[(o[d>>2]|0)+12>>2]&63](d,a,o[I+368+76>>2]|0)|0;i=o[e+308>>2]|0;if((i|0)==(o[e+312>>2]|0)?(j=i|0?i<<1:1,(i|0)<(j|0)):0){if(!j)s=0;else{o[5637]=(o[5637]|0)+1;i=Qa((j<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}s=i;i=o[e+308>>2]|0}if((i|0)>0){_=0;do{o[s+(_<<2)>>2]=o[(o[e+316>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0))}_=o[e+316>>2]|0;if(_){if(n[e+320>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);i=o[e+308>>2]|0}o[e+316>>2]=0}n[e+320>>0]=1;o[e+316>>2]=s;o[e+312>>2]=j}o[(o[e+316>>2]|0)+(i<<2)>>2]=d;o[e+308>>2]=i+1;f=f+ +c[a+52>>2];l=l+ +c[a+56>>2];u=u+ +c[a+60>>2];s=o[I+368+76>>2]|0;G=+c[s+4>>2];F=+c[s+20>>2];A=+c[s+36>>2];B=+c[s+8>>2];W=+c[s+24>>2];P=+c[s+40>>2];M=+c[s+12>>2];L=+c[s+28>>2];D=+c[s+44>>2];x=-+c[s+52>>2];O=-+c[s+56>>2];T=-+c[s+60>>2];o[I>>2]=0;o[I+4>>2]=0;o[I+8>>2]=0;o[I+12>>2]=0;c[I+16>>2]=f*G+l*F+u*A+(G*x+F*O+A*T);c[I+20>>2]=f*B+l*W+u*P+(B*x+W*O+P*T);c[I+24>>2]=f*M+l*L+u*D+(M*x+L*O+D*T);c[I+28>>2]=0;o[I+64>>2]=o[m>>2];o[I+64+4>>2]=o[m+4>>2];o[I+64+8>>2]=o[m+8>>2];o[I+64+12>>2]=o[m+12>>2];c[I+80>>2]=b;c[I+84>>2]=0;c[I+88>>2]=0;c[I+92>>2]=0;o[I+112>>2]=0;n[I+116>>0]=0;o[I+120>>2]=0;o[I+120+4>>2]=0;o[I+120+8>>2]=0;o[I+120+12>>2]=0;o[I+120+16>>2]=0;o[I+120+20>>2]=0;o[I+120+24>>2]=0;o[I+120+28>>2]=0;s=pC(d,I)|0;c[d+4+(s*184|0)+92>>2]=0;b=+c[a+224>>2]*+c[(o[I+368+76>>2]|0)+224>>2];b=b<-10?-10:b;c[d+4+(s*184|0)+84>>2]=b>10?10:b;o[d+4+(s*184|0)+48>>2]=o[a+52>>2];o[d+4+(s*184|0)+48+4>>2]=o[a+52+4>>2];o[d+4+(s*184|0)+48+8>>2]=o[a+52+8>>2];o[d+4+(s*184|0)+48+12>>2]=o[a+52+12>>2];c[d+4+(s*184|0)+32>>2]=f;c[d+4+(s*184|0)+36>>2]=l;c[d+4+(s*184|0)+40>>2]=u;c[d+4+(s*184|0)+44>>2]=0}i=o[2006]|0;d=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=d;if(!d){if(o[i+4>>2]|0){ut(I+368|0,0)|0;d=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[I+368+4>>2]|0)-(o[d+4>>2]|0)+(((o[I+368>>2]|0)-(o[d>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(o[i+16>>2]|0)break t;i=o[2006]|0}o[2006]=o[i+20>>2]}}}while(0);y=y+1|0;if((y|0)>=(o[e+232>>2]|0))break e}}while(0);i=o[2006]|0;j=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=j;do if(!j){if(o[i+4>>2]|0){ut(I+368|0,0)|0;j=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[I+368+4>>2]|0)-(o[j+4>>2]|0)+(((o[I+368>>2]|0)-(o[j>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(o[i+16>>2]|0)break;i=o[2006]|0}o[2006]=o[i+20>>2]}while(0);_P[o[(o[e>>2]|0)+44>>2]&255](e);_P[o[(o[e>>2]|0)+148>>2]&255](e);c[e+104>>2]=t;aP[o[(o[e>>2]|0)+152>>2]&127](e,e+92|0);oP[o[(o[e>>2]|0)+144>>2]&31](e,t);Zp(16070);if((o[e+280>>2]|0)>0){i=0;do{j=o[(o[e+288>>2]|0)+(i<<2)>>2]|0;NP[o[(o[j>>2]|0)+8>>2]&7](j,e,t);i=i+1|0}while((i|0)<(o[e+280>>2]|0))}i=o[2006]|0;j=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=j;do if(!j){if(o[i+4>>2]|0){ut(I+368|0,0)|0;j=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[I+368+4>>2]|0)-(o[j+4>>2]|0)+(((o[I+368>>2]|0)-(o[j>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(o[i+16>>2]|0)break;i=o[2006]|0}o[2006]=o[i+20>>2]}while(0);oP[o[(o[e>>2]|0)+156>>2]&31](e,t);i=o[e+80>>2]|0;if(i|0)oP[i&31](e,t);i=o[2006]|0;e=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=e;if(e|0){p=I;return}do if(o[i+4>>2]|0){ut(I+368|0,0)|0;e=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[I+368+4>>2]|0)-(o[e+4>>2]|0)+(((o[I+368>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=I;return}}while(0);o[2006]=o[i+20>>2];p=I;return}function Tg(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0,s=0,a=0,f=0;_=p;p=p+32|0;i=o[e+8>>2]|0;if((i|0)<=0){p=_;return}r=0;do{n=o[(o[e+16>>2]|0)+(r<<2)>>2]|0;if((!((n|0)==0?1:(o[n+236>>2]&2|0)==0)?(o[n+216>>2]|0)!=2:0)?!(t==0?1:(o[n+204>>2]&2|0)==0):0){i=o[n+504>>2]|0;if(!i)i=n+4|0;else{aP[o[(o[i>>2]|0)+8>>2]&127](i,n+4|0);i=n+4|0}a=1/t*(+c[n+56>>2]-+c[n+120>>2]);f=1/t*(+c[n+60>>2]-+c[n+124>>2]);c[n+336>>2]=1/t*(+c[n+52>>2]-+c[n+116>>2]);c[n+340>>2]=a;c[n+344>>2]=f;c[n+348>>2]=0;Yw(n+68|0,i,_+8|0,_);f=+c[_>>2];a=1/t*(f*+c[_+8+4>>2]);s=1/t*(f*+c[_+8+8>>2]);c[n+352>>2]=1/t*(+c[_+8>>2]*f);c[n+356>>2]=a;c[n+360>>2]=s;c[n+364>>2]=0;o[n+132>>2]=o[n+336>>2];o[n+132+4>>2]=o[n+336+4>>2];o[n+132+8>>2]=o[n+336+8>>2];o[n+132+12>>2]=o[n+336+12>>2];o[n+148>>2]=o[n+352>>2];o[n+148+4>>2]=o[n+352+4>>2];o[n+148+8>>2]=o[n+352+8>>2];o[n+148+12>>2]=o[n+352+12>>2];o[n+68>>2]=o[i>>2];o[n+68+4>>2]=o[i+4>>2];o[n+68+8>>2]=o[i+8>>2];o[n+68+12>>2]=o[i+12>>2];o[n+84>>2]=o[n+20>>2];o[n+84+4>>2]=o[n+20+4>>2];o[n+84+8>>2]=o[n+20+8>>2];o[n+84+12>>2]=o[n+20+12>>2];o[n+100>>2]=o[n+36>>2];o[n+100+4>>2]=o[n+36+4>>2];o[n+100+8>>2]=o[n+36+8>>2];o[n+100+12>>2]=o[n+36+12>>2];o[n+116>>2]=o[n+52>>2];o[n+116+4>>2]=o[n+52+4>>2];o[n+116+8>>2]=o[n+52+8>>2];o[n+116+12>>2]=o[n+52+12>>2];i=o[e+8>>2]|0}r=r+1|0}while((r|0)<(i|0));p=_;return}function Dg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0,z=0,Y=0,K=0,Q=0;A=p;p=p+384|0;T=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;T=(fP[o[(o[T>>2]|0)+56>>2]&127](T)|0)>>>11;W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;W=(fP[o[(o[W>>2]|0)+56>>2]&127](W)|0)>>>12;B=+c[t+40>>2];if(B<=0){p=A;return}switch(o[t+4>>2]|0){case 3:{o[A+320>>2]=1065353216;o[A+320+4>>2]=0;o[A+320+4+4>>2]=0;o[A+320+4+8>>2]=0;o[A+320+4+12>>2]=0;o[A+320+20>>2]=1065353216;o[A+320+24>>2]=0;o[A+320+24+4>>2]=0;o[A+320+24+8>>2]=0;o[A+320+24+12>>2]=0;o[A+320+40>>2]=1065353216;W=A+320+44|0;o[W>>2]=0;o[W+4>>2]=0;o[W+8>>2]=0;o[W+12>>2]=0;o[W+16>>2]=0;I=+c[t+300>>2];j=+c[t+304>>2];R=+c[t+308>>2];W=o[t+28>>2]|0;S=I*+c[W+20>>2]+j*+c[W+24>>2]+R*+c[W+28>>2]+ +c[W+56>>2];k=I*+c[W+36>>2]+j*+c[W+40>>2]+R*+c[W+44>>2]+ +c[W+60>>2];c[A+320+48>>2]=I*+c[W+4>>2]+j*+c[W+8>>2]+R*+c[W+12>>2]+ +c[W+52>>2];c[A+320+52>>2]=S;c[A+320+56>>2]=k;c[A+320+60>>2]=0;W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[W>>2]|0)+64>>2]&7](W,A+320|0,B);k=+c[t+316>>2];S=+c[t+320>>2];R=+c[t+324>>2];t=o[t+32>>2]|0;j=k*+c[t+20>>2]+S*+c[t+24>>2]+R*+c[t+28>>2]+ +c[t+56>>2];I=k*+c[t+36>>2]+S*+c[t+40>>2]+R*+c[t+44>>2]+ +c[t+60>>2];c[A+320+48>>2]=k*+c[t+4>>2]+S*+c[t+8>>2]+R*+c[t+12>>2]+ +c[t+52>>2];c[A+320+52>>2]=j;c[A+320+56>>2]=I;c[A+320+60>>2]=0;if(T&1|0){e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[e>>2]|0)+64>>2]&7](e,A+320|0,B)}p=A;return}case 4:{P=o[t+28>>2]|0;F=+c[t+552>>2];H=+c[P+4>>2];i=+c[t+552+16>>2];X=+c[P+8>>2];r=+c[t+552+32>>2];N=+c[P+12>>2];f=+c[t+552+4>>2];l=+c[t+552+20>>2];y=+c[t+552+36>>2];g=+c[t+552+8>>2];C=+c[t+552+24>>2];k=+c[t+552+40>>2];V=+c[P+20>>2];E=+c[P+24>>2];G=+c[P+28>>2];v=+c[P+36>>2];w=+c[P+40>>2];S=+c[P+44>>2];Y=+c[t+552+48>>2];z=+c[t+552+52>>2];I=+c[t+552+56>>2];R=+c[P+52>>2]+(H*Y+X*z+N*I);j=V*Y+E*z+G*I+ +c[P+56>>2];I=v*Y+w*z+S*I+ +c[P+60>>2];c[A+320>>2]=F*H+i*X+r*N;c[A+320+4>>2]=H*f+X*l+N*y;c[A+320+8>>2]=H*g+X*C+N*k;c[A+320+12>>2]=0;c[A+320+16>>2]=F*V+i*E+r*G;c[A+320+20>>2]=f*V+l*E+y*G;c[A+320+24>>2]=g*V+C*E+k*G;c[A+320+28>>2]=0;c[A+320+32>>2]=F*v+i*w+r*S;c[A+320+36>>2]=f*v+l*w+y*S;c[A+320+40>>2]=g*v+C*w+k*S;c[A+320+44>>2]=0;c[A+320+48>>2]=R;c[A+320+52>>2]=j;c[A+320+56>>2]=I;c[A+320+60>>2]=0;if(!(T&1)){P=o[t+32>>2]|0;w=+c[t+616>>2];f=+c[P+4>>2];k=+c[t+616+16>>2];l=+c[P+8>>2];S=+c[t+616+32>>2];y=+c[P+12>>2];R=+c[t+616+4>>2];j=+c[t+616+20>>2];I=+c[t+616+36>>2];F=+c[t+616+8>>2];E=+c[t+616+24>>2];N=+c[t+616+40>>2];g=+c[P+20>>2];v=+c[P+24>>2];C=+c[P+28>>2];G=+c[P+36>>2];V=+c[P+40>>2];X=+c[P+44>>2];i=+c[t+616+48>>2];r=+c[t+616+52>>2];Y=+c[t+616+56>>2];H=+c[P+52>>2]+(f*i+l*r+y*Y);z=g*i+v*r+C*Y+ +c[P+56>>2];Y=G*i+V*r+X*Y+ +c[P+60>>2];c[A+320>>2]=w*f+k*l+S*y;c[A+320+4>>2]=f*R+l*j+y*I;c[A+320+8>>2]=f*F+l*E+y*N;c[A+320+12>>2]=0;c[A+320+16>>2]=w*g+k*v+S*C;c[A+320+20>>2]=R*g+j*v+I*C;c[A+320+24>>2]=F*g+E*v+N*C;c[A+320+28>>2]=0;c[A+320+32>>2]=w*G+k*V+S*X;c[A+320+36>>2]=R*G+j*V+I*X;c[A+320+40>>2]=F*G+E*V+N*X;c[A+320+44>>2]=0;c[A+320+48>>2]=H;c[A+320+52>>2]=z;c[A+320+56>>2]=Y;c[A+320+60>>2]=0}else{P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B);P=o[t+32>>2]|0;w=+c[t+616>>2];f=+c[P+4>>2];k=+c[t+616+16>>2];l=+c[P+8>>2];S=+c[t+616+32>>2];y=+c[P+12>>2];R=+c[t+616+4>>2];j=+c[t+616+20>>2];I=+c[t+616+36>>2];F=+c[t+616+8>>2];E=+c[t+616+24>>2];N=+c[t+616+40>>2];g=+c[P+20>>2];v=+c[P+24>>2];C=+c[P+28>>2];G=+c[P+36>>2];V=+c[P+40>>2];X=+c[P+44>>2];i=+c[t+616+48>>2];r=+c[t+616+52>>2];Y=+c[t+616+56>>2];H=+c[P+52>>2]+(f*i+l*r+y*Y);z=g*i+v*r+C*Y+ +c[P+56>>2];Y=G*i+V*r+X*Y+ +c[P+60>>2];c[A+320>>2]=w*f+k*l+S*y;c[A+320+4>>2]=f*R+l*j+y*I;c[A+320+8>>2]=f*F+l*E+y*N;c[A+320+12>>2]=0;c[A+320+16>>2]=w*g+k*v+S*C;c[A+320+20>>2]=R*g+j*v+I*C;c[A+320+24>>2]=F*g+E*v+N*C;c[A+320+28>>2]=0;c[A+320+32>>2]=w*G+k*V+S*X;c[A+320+36>>2]=R*G+j*V+I*X;c[A+320+40>>2]=F*G+E*V+N*X;c[A+320+44>>2]=0;c[A+320+48>>2]=H;c[A+320+52>>2]=z;c[A+320+56>>2]=Y;c[A+320+60>>2]=0;P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B)}f=+c[t+688>>2];l=+c[t+688+4>>2];i=+Ya(f-l);if(!(i<-3.1415927410125732))if(i>3.1415927410125732)r=i+-6.2831854820251465;else r=i;else r=i+6.2831854820251465;i=+Ya(f+l);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;if(!(r==i)?W&1|0:0){o[A+304>>2]=o[A+320+8>>2];o[A+304+4>>2]=o[A+320+24>>2];o[A+304+8>>2]=o[A+320+40>>2];c[A+304+12>>2]=0;o[A+272>>2]=o[A+320>>2];o[A+272+4>>2]=o[A+320+16>>2];o[A+272+8>>2]=o[A+320+32>>2];c[A+272+12>>2]=0;e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;t=o[(o[e>>2]|0)+68>>2]|0;o[A+288>>2]=0;o[A+288+4>>2]=0;o[A+288+8>>2]=0;o[A+288+12>>2]=0;mP[t&0](e,A+320+48|0,A+304|0,A+272|0,B,B,l>0?r:0,l>0?i:6.2831854820251465,A+288|0,l>0,10)}p=A;return}case 5:{a=o[t+28>>2]|0;w=+c[t+300>>2];f=+c[a+4>>2];k=+c[t+300+16>>2];l=+c[a+8>>2];S=+c[t+300+32>>2];y=+c[a+12>>2];R=+c[t+300+4>>2];j=+c[t+300+20>>2];I=+c[t+300+36>>2];F=+c[t+300+8>>2];E=+c[t+300+24>>2];N=+c[t+300+40>>2];g=+c[a+20>>2];v=+c[a+24>>2];C=+c[a+28>>2];G=+c[a+36>>2];V=+c[a+40>>2];X=+c[a+44>>2];i=+c[t+300+48>>2];r=+c[t+300+52>>2];Y=+c[t+300+56>>2];H=+c[a+52>>2]+(f*i+l*r+y*Y);z=g*i+v*r+C*Y+ +c[a+56>>2];Y=G*i+V*r+X*Y+ +c[a+60>>2];c[A+320>>2]=w*f+k*l+S*y;a=A+320+4|0;c[a>>2]=f*R+l*j+y*I;b=A+320+8|0;c[b>>2]=f*F+l*E+y*N;c[A+320+12>>2]=0;d=A+320+16|0;c[d>>2]=w*g+k*v+S*C;h=A+320+20|0;c[h>>2]=R*g+j*v+I*C;m=A+320+24|0;c[m>>2]=F*g+E*v+N*C;c[A+320+28>>2]=0;D=A+320+32|0;c[D>>2]=w*G+k*V+S*X;O=A+320+36|0;c[O>>2]=R*G+j*V+I*X;L=A+320+40|0;c[L>>2]=F*G+E*V+N*X;c[A+320+44>>2]=0;x=A+320+48|0;c[x>>2]=H;M=A+320+52|0;c[M>>2]=z;P=A+320+56|0;c[P>>2]=Y;c[A+320+60>>2]=0;if(!(T&1)){T=o[t+32>>2]|0;w=+c[t+364>>2];f=+c[T+4>>2];k=+c[t+364+16>>2];l=+c[T+8>>2];S=+c[t+364+32>>2];y=+c[T+12>>2];R=+c[t+364+4>>2];j=+c[t+364+20>>2];I=+c[t+364+36>>2];F=+c[t+364+8>>2];E=+c[t+364+24>>2];N=+c[t+364+40>>2];g=+c[T+20>>2];v=+c[T+24>>2];C=+c[T+28>>2];G=+c[T+36>>2];V=+c[T+40>>2];X=+c[T+44>>2];i=+c[t+364+48>>2];r=+c[t+364+52>>2];Y=+c[t+364+56>>2];H=+c[T+52>>2]+(f*i+l*r+y*Y);z=g*i+v*r+C*Y+ +c[T+56>>2];Y=G*i+V*r+X*Y+ +c[T+60>>2];c[A+320>>2]=w*f+k*l+S*y;c[a>>2]=f*R+l*j+y*I;c[b>>2]=f*F+l*E+y*N;c[A+320+12>>2]=0;c[d>>2]=w*g+k*v+S*C;c[h>>2]=R*g+j*v+I*C;c[m>>2]=F*g+E*v+N*C;c[A+320+28>>2]=0;c[D>>2]=w*G+k*V+S*X;c[O>>2]=R*G+j*V+I*X;c[L>>2]=F*G+E*V+N*X;c[A+320+44>>2]=0;c[x>>2]=H;c[M>>2]=z;c[P>>2]=Y;c[A+320+60>>2]=0}else{T=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[T>>2]|0)+64>>2]&7](T,A+320|0,B);T=o[t+32>>2]|0;w=+c[t+364>>2];f=+c[T+4>>2];k=+c[t+364+16>>2];l=+c[T+8>>2];S=+c[t+364+32>>2];y=+c[T+12>>2];R=+c[t+364+4>>2];j=+c[t+364+20>>2];I=+c[t+364+36>>2];F=+c[t+364+8>>2];E=+c[t+364+24>>2];N=+c[t+364+40>>2];g=+c[T+20>>2];v=+c[T+24>>2];C=+c[T+28>>2];G=+c[T+36>>2];V=+c[T+40>>2];X=+c[T+44>>2];i=+c[t+364+48>>2];r=+c[t+364+52>>2];Y=+c[t+364+56>>2];H=+c[T+52>>2]+(f*i+l*r+y*Y);z=g*i+v*r+C*Y+ +c[T+56>>2];Y=G*i+V*r+X*Y+ +c[T+60>>2];c[A+320>>2]=w*f+k*l+S*y;c[a>>2]=f*R+l*j+y*I;c[b>>2]=f*F+l*E+y*N;c[A+320+12>>2]=0;c[d>>2]=w*g+k*v+S*C;c[h>>2]=R*g+j*v+I*C;c[m>>2]=F*g+E*v+N*C;c[A+320+28>>2]=0;c[D>>2]=w*G+k*V+S*X;c[O>>2]=R*G+j*V+I*X;c[L>>2]=F*G+E*V+N*X;c[A+320+44>>2]=0;c[x>>2]=H;c[M>>2]=z;c[P>>2]=Y;c[A+320+60>>2]=0;T=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[T>>2]|0)+64>>2]&7](T,A+320|0,B)}if(W&1|0){GI(A+304|0,t,6.0868353843688965,B);N=+c[A+304>>2];X=+c[A+304+4>>2];H=+c[A+304+8>>2];z=N*+c[d>>2]+X*+c[h>>2]+H*+c[m>>2]+ +c[M>>2];Y=N*+c[D>>2]+X*+c[O>>2]+H*+c[L>>2]+ +c[P>>2];c[A+304>>2]=N*+c[A+320>>2]+X*+c[a>>2]+H*+c[b>>2]+ +c[x>>2];c[A+304+4>>2]=z;c[A+304+8>>2]=Y;c[A+304+12>>2]=0;s=A+320+48|0;_=0;do{GI(A+272|0,t,+(_|0)*6.283185005187988*.03125,B);N=+c[A+272>>2];X=+c[A+272+4>>2];H=+c[A+272+8>>2];z=N*+c[d>>2]+X*+c[h>>2]+H*+c[m>>2]+ +c[M>>2];Y=N*+c[D>>2]+X*+c[O>>2]+H*+c[L>>2]+ +c[P>>2];c[A+272>>2]=N*+c[A+320>>2]+X*+c[a>>2]+H*+c[b>>2]+ +c[x>>2];c[A+272+4>>2]=z;c[A+272+8>>2]=Y;c[A+272+12>>2]=0;W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;T=o[(o[W>>2]|0)+16>>2]|0;o[A+256>>2]=0;o[A+256+4>>2]=0;o[A+256+8>>2]=0;o[A+256+12>>2]=0;HP[T&127](W,A+304|0,A+272|0,A+256|0);if(!(_&3)){W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;T=o[(o[W>>2]|0)+16>>2]|0;o[A+240>>2]=0;o[A+240+4>>2]=0;o[A+240+8>>2]=0;o[A+240+12>>2]=0;HP[T&127](W,s,A+272|0,A+240|0)}o[A+304>>2]=o[A+272>>2];o[A+304+4>>2]=o[A+272+4>>2];o[A+304+8>>2]=o[A+272+8>>2];o[A+304+12>>2]=o[A+272+12>>2];_=_+1|0}while((_|0)!=32);j=+c[t+452>>2];I=+c[t+512>>2];_=o[t+32>>2]|0;if(+c[_+368>>2]>0){N=+c[t+364>>2];X=+c[_+4>>2];H=+c[t+364+16>>2];z=+c[_+8>>2];Y=+c[t+364+32>>2];k=+c[_+12>>2];E=+c[t+364+4>>2];V=+c[t+364+20>>2];w=+c[t+364+36>>2];F=+c[t+364+8>>2];G=+c[t+364+24>>2];C=+c[t+364+40>>2];Q=+c[_+20>>2];K=+c[_+24>>2];v=+c[_+28>>2];g=+c[_+36>>2];y=+c[_+40>>2];l=+c[_+44>>2];f=+c[t+364+48>>2];r=+c[t+364+52>>2];i=+c[t+364+56>>2];S=g*f+y*r+l*i+ +c[_+60>>2];R=Q*f+K*r+v*i+ +c[_+56>>2];i=+c[_+52>>2]+(X*f+z*r+k*i);r=F*g+G*y+C*l;f=E*g+V*y+w*l;l=N*g+H*y+Y*l;y=F*Q+G*K+C*v;g=E*Q+V*K+w*v;v=N*Q+H*K+Y*v;C=X*F+z*G+k*C;w=X*E+z*V+k*w;k=N*X+H*z+Y*k}else{W=o[t+28>>2]|0;H=+c[t+300>>2];z=+c[W+4>>2];Y=+c[t+300+16>>2];K=+c[W+8>>2];Q=+c[t+300+32>>2];k=+c[W+12>>2];N=+c[t+300+4>>2];X=+c[t+300+20>>2];w=+c[t+300+36>>2];E=+c[t+300+8>>2];V=+c[t+300+24>>2];C=+c[t+300+40>>2];F=+c[W+20>>2];G=+c[W+24>>2];v=+c[W+28>>2];g=+c[W+36>>2];y=+c[W+40>>2];l=+c[W+44>>2];f=+c[t+300+48>>2];r=+c[t+300+52>>2];i=+c[t+300+56>>2];S=g*f+y*r+l*i+ +c[W+60>>2];R=F*f+G*r+v*i+ +c[W+56>>2];i=+c[W+52>>2]+(z*f+K*r+k*i);r=E*g+V*y+C*l;f=N*g+X*y+w*l;l=H*g+Y*y+Q*l;y=E*F+V*G+C*v;g=N*F+X*G+w*v;v=H*F+Y*G+Q*v;C=z*E+K*V+k*C;w=z*N+K*X+k*w;k=H*z+Y*K+Q*k}c[A+320>>2]=k;c[a>>2]=w;c[b>>2]=C;c[A+320+12>>2]=0;c[d>>2]=v;c[h>>2]=g;c[m>>2]=y;c[A+320+28>>2]=0;c[D>>2]=l;c[O>>2]=f;c[L>>2]=r;c[A+320+44>>2]=0;c[x>>2]=i;c[M>>2]=R;c[P>>2]=S;c[A+320+60>>2]=0;o[A+272>>2]=o[s>>2];o[A+272+4>>2]=o[s+4>>2];o[A+272+8>>2]=o[s+8>>2];o[A+272+12>>2]=o[s+12>>2];c[A+208>>2]=k;c[A+208+4>>2]=v;c[A+208+8>>2]=l;c[A+208+12>>2]=0;c[A+176>>2]=w;c[A+176+4>>2]=g;c[A+176+8>>2]=f;c[A+176+12>>2]=0;e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;t=o[(o[e>>2]|0)+68>>2]|0;o[A+224>>2]=0;o[A+224+4>>2]=0;o[A+224+8>>2]=0;o[A+224+12>>2]=0;mP[t&0](e,A+272|0,A+208|0,A+176|0,B,B,-I-j,j-I,A+224|0,1,10)}p=A;return}case 6:case 9:{o[A+320>>2]=o[t+1064>>2];o[A+320+4>>2]=o[t+1064+4>>2];o[A+320+8>>2]=o[t+1064+8>>2];o[A+320+12>>2]=o[t+1064+12>>2];s=A+320+16|0;a=t+1064+16|0;o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];b=A+320+32|0;d=t+1064+32|0;o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];h=A+320+48|0;m=t+1064+48|0;o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];if(!(T&1)){o[A+320>>2]=o[t+1128>>2];o[A+320+4>>2]=o[t+1128+4>>2];o[A+320+8>>2]=o[t+1128+8>>2];o[A+320+12>>2]=o[t+1128+12>>2];o[s>>2]=o[t+1128+16>>2];o[s+4>>2]=o[t+1128+16+4>>2];o[s+8>>2]=o[t+1128+16+8>>2];o[s+12>>2]=o[t+1128+16+12>>2];o[b>>2]=o[t+1128+32>>2];o[b+4>>2]=o[t+1128+32+4>>2];o[b+8>>2]=o[t+1128+32+8>>2];o[b+12>>2]=o[t+1128+32+12>>2];o[h>>2]=o[t+1128+48>>2];o[h+4>>2]=o[t+1128+48+4>>2];o[h+8>>2]=o[t+1128+48+8>>2];o[h+12>>2]=o[t+1128+48+12>>2]}else{P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B);o[A+320>>2]=o[t+1128>>2];o[A+320+4>>2]=o[t+1128+4>>2];o[A+320+8>>2]=o[t+1128+8>>2];o[A+320+12>>2]=o[t+1128+12>>2];o[s>>2]=o[t+1128+16>>2];o[s+4>>2]=o[t+1128+16+4>>2];o[s+8>>2]=o[t+1128+16+8>>2];o[s+12>>2]=o[t+1128+16+12>>2];o[b>>2]=o[t+1128+32>>2];o[b+4>>2]=o[t+1128+32+4>>2];o[b+8>>2]=o[t+1128+32+8>>2];o[b+12>>2]=o[t+1128+32+12>>2];o[h>>2]=o[t+1128+48>>2];o[h+4>>2]=o[t+1128+48+4>>2];o[h+8>>2]=o[t+1128+48+8>>2];o[h+12>>2]=o[t+1128+48+12>>2];P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B)}if(W&1|0){o[A+320>>2]=o[t+1064>>2];o[A+320+4>>2]=o[t+1064+4>>2];o[A+320+8>>2]=o[t+1064+8>>2];o[A+320+12>>2]=o[t+1064+12>>2];o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];_=t+1128+48|0;o[A+304>>2]=o[A+320+8>>2];o[A+304+4>>2]=o[A+320+24>>2];o[A+304+8>>2]=o[A+320+40>>2];c[A+304+12>>2]=0;o[A+272>>2]=o[A+320>>2];o[A+272+4>>2]=o[A+320+16>>2];o[A+272+8>>2]=o[A+320+32>>2];c[A+272+12>>2]=0;H=+c[t+932>>2];i=+c[t+932+4>>2];K=+c[t+996>>2];Y=+c[t+996+4>>2];M=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[M>>2]|0)+72>>2]|0;o[A+192>>2]=0;o[A+192+4>>2]=0;o[A+192+8>>2]=0;o[A+192+12>>2]=0;WP[P&0](M,_,A+304|0,A+272|0,B*.8999999761581421,H,i,K,Y,A+192|0,10,1);M=o[A+320+4>>2]|0;P=o[A+320+20>>2]|0;W=o[A+320+36>>2]|0;o[A+272>>2]=M;o[A+272+4>>2]=P;o[A+272+8>>2]=W;c[A+272+12>>2]=0;Y=+c[t+1196>>2];K=+c[t+1200>>2];i=+Z(+Y);Y=+U(+Y);H=+Z(+K);K=+U(+K);z=(o[u>>2]=M,+c[u>>2]);Q=(o[u>>2]=P,+c[u>>2]);r=(o[u>>2]=W,+c[u>>2]);c[A+208>>2]=i*H*z+i*K*Q-Y*r;c[A+208+4>>2]=H*Q-K*z;c[A+208+8>>2]=Y*H*z+Y*K*Q+i*r;o[A+320>>2]=o[t+1128>>2];o[A+320+4>>2]=o[t+1128+4>>2];o[A+320+8>>2]=o[t+1128+8>>2];o[A+320+12>>2]=o[t+1128+12>>2];o[s>>2]=o[t+1128+16>>2];o[s+4>>2]=o[t+1128+16+4>>2];o[s+8>>2]=o[t+1128+16+8>>2];o[s+12>>2]=o[t+1128+16+12>>2];o[b>>2]=o[t+1128+32>>2];o[b+4>>2]=o[t+1128+32+4>>2];o[b+8>>2]=o[t+1128+32+8>>2];o[b+12>>2]=o[t+1128+32+12>>2];o[h>>2]=o[_>>2];o[h+4>>2]=o[_+4>>2];o[h+8>>2]=o[_+8>>2];o[h+12>>2]=o[_+12>>2];r=-+c[A+320+16>>2];i=-+c[A+320+32>>2];c[A+176>>2]=-+c[A+320>>2];c[A+176+4>>2]=r;c[A+176+8>>2]=i;c[A+176+12>>2]=0;i=+c[t+868>>2];r=+c[t+868+4>>2];if(!(i>r)){if(i<r){W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[W>>2]|0)+68>>2]|0;o[A+144>>2]=0;o[A+144+4>>2]=0;o[A+144+8>>2]=0;o[A+144+12>>2]=0;mP[P&0](W,_,A+176|0,A+208|0,B,B,i,r,A+144|0,1,10)}}else{W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[W>>2]|0)+68>>2]|0;o[A+160>>2]=0;o[A+160+4>>2]=0;o[A+160+8>>2]=0;o[A+160+12>>2]=0;mP[P&0](W,_,A+176|0,A+208|0,B,B,-3.1415927410125732,3.1415927410125732,A+160|0,0,10)}o[A+320>>2]=o[t+1064>>2];o[A+320+4>>2]=o[t+1064+4>>2];o[A+320+8>>2]=o[t+1064+8>>2];o[A+320+12>>2]=o[t+1064+12>>2];o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];o[A+96>>2]=o[t+680>>2];o[A+96+4>>2]=o[t+680+4>>2];o[A+96+8>>2]=o[t+680+8>>2];o[A+96+12>>2]=o[t+680+12>>2];o[A+64>>2]=o[t+680+16>>2];o[A+64+4>>2]=o[t+680+16+4>>2];o[A+64+8>>2]=o[t+680+16+8>>2];o[A+64+12>>2]=o[t+680+16+12>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;t=o[(o[e>>2]|0)+80>>2]|0;o[A+128>>2]=0;o[A+128+4>>2]=0;o[A+128+8>>2]=0;o[A+128+12>>2]=0;rP[t&31](e,A+96|0,A+64|0,A+320|0,A+128|0)}p=A;return}case 12:{o[A+320>>2]=o[t+1236>>2];o[A+320+4>>2]=o[t+1236+4>>2];o[A+320+8>>2]=o[t+1236+8>>2];o[A+320+12>>2]=o[t+1236+12>>2];s=A+320+16|0;a=t+1236+16|0;o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];b=A+320+32|0;d=t+1236+32|0;o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];h=A+320+48|0;m=t+1236+48|0;o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];if(!(T&1)){o[A+320>>2]=o[t+1300>>2];o[A+320+4>>2]=o[t+1300+4>>2];o[A+320+8>>2]=o[t+1300+8>>2];o[A+320+12>>2]=o[t+1300+12>>2];o[s>>2]=o[t+1300+16>>2];o[s+4>>2]=o[t+1300+16+4>>2];o[s+8>>2]=o[t+1300+16+8>>2];o[s+12>>2]=o[t+1300+16+12>>2];o[b>>2]=o[t+1300+32>>2];o[b+4>>2]=o[t+1300+32+4>>2];o[b+8>>2]=o[t+1300+32+8>>2];o[b+12>>2]=o[t+1300+32+12>>2];o[h>>2]=o[t+1300+48>>2];o[h+4>>2]=o[t+1300+48+4>>2];o[h+8>>2]=o[t+1300+48+8>>2];o[h+12>>2]=o[t+1300+48+12>>2]}else{P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B);o[A+320>>2]=o[t+1300>>2];o[A+320+4>>2]=o[t+1300+4>>2];o[A+320+8>>2]=o[t+1300+8>>2];\no[A+320+12>>2]=o[t+1300+12>>2];o[s>>2]=o[t+1300+16>>2];o[s+4>>2]=o[t+1300+16+4>>2];o[s+8>>2]=o[t+1300+16+8>>2];o[s+12>>2]=o[t+1300+16+12>>2];o[b>>2]=o[t+1300+32>>2];o[b+4>>2]=o[t+1300+32+4>>2];o[b+8>>2]=o[t+1300+32+8>>2];o[b+12>>2]=o[t+1300+32+12>>2];o[h>>2]=o[t+1300+48>>2];o[h+4>>2]=o[t+1300+48+4>>2];o[h+8>>2]=o[t+1300+48+8>>2];o[h+12>>2]=o[t+1300+48+12>>2];P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B)}if(W&1|0){o[A+320>>2]=o[t+1236>>2];o[A+320+4>>2]=o[t+1236+4>>2];o[A+320+8>>2]=o[t+1236+8>>2];o[A+320+12>>2]=o[t+1236+12>>2];o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];_=t+1300+48|0;o[A+304>>2]=o[A+320+8>>2];o[A+304+4>>2]=o[A+320+24>>2];o[A+304+8>>2]=o[A+320+40>>2];c[A+304+12>>2]=0;o[A+272>>2]=o[A+320>>2];o[A+272+4>>2]=o[A+320+16>>2];o[A+272+8>>2]=o[A+320+32>>2];c[A+272+12>>2]=0;H=+c[t+1056>>2];i=+c[t+1060>>2];K=+c[t+1144>>2];Y=+c[t+1144+4>>2];M=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[M>>2]|0)+72>>2]|0;o[A+112>>2]=0;o[A+112+4>>2]=0;o[A+112+8>>2]=0;o[A+112+12>>2]=0;WP[P&0](M,_,A+304|0,A+272|0,B*.8999999761581421,H,i,K,Y,A+112|0,10,1);M=o[A+320+4>>2]|0;P=o[A+320+20>>2]|0;W=o[A+320+36>>2]|0;o[A+272>>2]=M;o[A+272+4>>2]=P;o[A+272+8>>2]=W;c[A+272+12>>2]=0;Y=+c[t+1368>>2];K=+c[t+1372>>2];i=+Z(+Y);Y=+U(+Y);H=+Z(+K);K=+U(+K);z=(o[u>>2]=M,+c[u>>2]);Q=(o[u>>2]=P,+c[u>>2]);r=(o[u>>2]=W,+c[u>>2]);c[A+208>>2]=i*H*z+i*K*Q-Y*r;c[A+208+4>>2]=H*Q-K*z;c[A+208+8>>2]=Y*H*z+Y*K*Q+i*r;o[A+320>>2]=o[t+1300>>2];o[A+320+4>>2]=o[t+1300+4>>2];o[A+320+8>>2]=o[t+1300+8>>2];o[A+320+12>>2]=o[t+1300+12>>2];o[s>>2]=o[t+1300+16>>2];o[s+4>>2]=o[t+1300+16+4>>2];o[s+8>>2]=o[t+1300+16+8>>2];o[s+12>>2]=o[t+1300+16+12>>2];o[b>>2]=o[t+1300+32>>2];o[b+4>>2]=o[t+1300+32+4>>2];o[b+8>>2]=o[t+1300+32+8>>2];o[b+12>>2]=o[t+1300+32+12>>2];o[h>>2]=o[_>>2];o[h+4>>2]=o[_+4>>2];o[h+8>>2]=o[_+8>>2];o[h+12>>2]=o[_+12>>2];r=-+c[A+320+16>>2];i=-+c[A+320+32>>2];c[A+176>>2]=-+c[A+320>>2];c[A+176+4>>2]=r;c[A+176+8>>2]=i;c[A+176+12>>2]=0;i=+c[t+968>>2];r=+c[t+968+4>>2];if(!(i>r)){if(i<r){W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[W>>2]|0)+68>>2]|0;o[A+48>>2]=0;o[A+48+4>>2]=0;o[A+48+8>>2]=0;o[A+48+12>>2]=0;mP[P&0](W,_,A+176|0,A+208|0,B,B,i,r,A+48|0,1,10)}}else{W=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;P=o[(o[W>>2]|0)+68>>2]|0;o[A+80>>2]=0;o[A+80+4>>2]=0;o[A+80+8>>2]=0;o[A+80+12>>2]=0;mP[P&0](W,_,A+176|0,A+208|0,B,B,-3.1415927410125732,3.1415927410125732,A+80|0,0,10)}o[A+320>>2]=o[t+1236>>2];o[A+320+4>>2]=o[t+1236+4>>2];o[A+320+8>>2]=o[t+1236+8>>2];o[A+320+12>>2]=o[t+1236+12>>2];o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];o[b>>2]=o[d>>2];o[b+4>>2]=o[d+4>>2];o[b+8>>2]=o[d+8>>2];o[b+12>>2]=o[d+12>>2];o[h>>2]=o[m>>2];o[h+4>>2]=o[m+4>>2];o[h+8>>2]=o[m+8>>2];o[h+12>>2]=o[m+12>>2];o[A+96>>2]=o[t+680>>2];o[A+96+4>>2]=o[t+680+4>>2];o[A+96+8>>2]=o[t+680+8>>2];o[A+96+12>>2]=o[t+680+12>>2];o[A+64>>2]=o[t+680+16>>2];o[A+64+4>>2]=o[t+680+16+4>>2];o[A+64+8>>2]=o[t+680+16+8>>2];o[A+64+12>>2]=o[t+680+16+12>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;t=o[(o[e>>2]|0)+80>>2]|0;o[A+32>>2]=0;o[A+32+4>>2]=0;o[A+32+8>>2]=0;o[A+32+12>>2]=0;rP[t&31](e,A+96|0,A+64|0,A+320|0,A+32|0)}p=A;return}case 7:{o[A+320>>2]=o[t+824>>2];o[A+320+4>>2]=o[t+824+4>>2];o[A+320+8>>2]=o[t+824+8>>2];o[A+320+12>>2]=o[t+824+12>>2];_=A+320+16|0;o[_>>2]=o[t+824+16>>2];o[_+4>>2]=o[t+824+16+4>>2];o[_+8>>2]=o[t+824+16+8>>2];o[_+12>>2]=o[t+824+16+12>>2];s=A+320+32|0;o[s>>2]=o[t+824+32>>2];o[s+4>>2]=o[t+824+32+4>>2];o[s+8>>2]=o[t+824+32+8>>2];o[s+12>>2]=o[t+824+32+12>>2];a=A+320+48|0;o[a>>2]=o[t+824+48>>2];o[a+4>>2]=o[t+824+48+4>>2];o[a+8>>2]=o[t+824+48+8>>2];o[a+12>>2]=o[t+824+48+12>>2];if(!(T&1)){o[A+320>>2]=o[t+888>>2];o[A+320+4>>2]=o[t+888+4>>2];o[A+320+8>>2]=o[t+888+8>>2];o[A+320+12>>2]=o[t+888+12>>2];o[_>>2]=o[t+888+16>>2];o[_+4>>2]=o[t+888+16+4>>2];o[_+8>>2]=o[t+888+16+8>>2];o[_+12>>2]=o[t+888+16+12>>2];o[s>>2]=o[t+888+32>>2];o[s+4>>2]=o[t+888+32+4>>2];o[s+8>>2]=o[t+888+32+8>>2];o[s+12>>2]=o[t+888+32+12>>2];o[a>>2]=o[t+888+48>>2];o[a+4>>2]=o[t+888+48+4>>2];o[a+8>>2]=o[t+888+48+8>>2];o[a+12>>2]=o[t+888+48+12>>2]}else{P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B);o[A+320>>2]=o[t+888>>2];o[A+320+4>>2]=o[t+888+4>>2];o[A+320+8>>2]=o[t+888+8>>2];o[A+320+12>>2]=o[t+888+12>>2];o[_>>2]=o[t+888+16>>2];o[_+4>>2]=o[t+888+16+4>>2];o[_+8>>2]=o[t+888+16+8>>2];o[_+12>>2]=o[t+888+16+12>>2];o[s>>2]=o[t+888+32>>2];o[s+4>>2]=o[t+888+32+4>>2];o[s+8>>2]=o[t+888+32+8>>2];o[s+12>>2]=o[t+888+32+12>>2];o[a>>2]=o[t+888+48>>2];o[a+4>>2]=o[t+888+48+4>>2];o[a+8>>2]=o[t+888+48+8>>2];o[a+12>>2]=o[t+888+48+12>>2];P=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[P>>2]|0)+64>>2]&7](P,A+320|0,B)}if(W&1|0){D=n[t+180>>0]|0?t+824|0:t+888|0;O=o[D>>2]|0;M=o[D+4>>2]|0;L=o[D+16>>2]|0;P=o[D+20>>2]|0;x=o[D+32>>2]|0;W=o[D+36>>2]|0;j=+c[D+48>>2];E=+c[D+52>>2];H=+c[D+56>>2];K=+c[t+184>>2];G=(o[u>>2]=O,+c[u>>2]);F=(o[u>>2]=M,+c[u>>2])*0;I=+c[D+8>>2]*0;X=(o[u>>2]=L,+c[u>>2]);N=(o[u>>2]=P,+c[u>>2])*0;V=+c[D+24>>2]*0;Q=(o[u>>2]=x,+c[u>>2]);Y=(o[u>>2]=W,+c[u>>2])*0;z=+c[D+40>>2]*0;c[A+304>>2]=j+(I+(F+G*K));c[A+304+4>>2]=E+(V+(N+X*K));c[A+304+8>>2]=H+(z+(Y+Q*K));c[A+304+12>>2]=0;K=+c[t+188>>2];c[A+272>>2]=j+(I+(F+G*K));c[A+272+4>>2]=E+(V+(N+X*K));c[A+272+8>>2]=H+(z+(Y+Q*K));c[A+272+12>>2]=0;D=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;T=o[(o[D>>2]|0)+16>>2]|0;o[A+16>>2]=0;o[A+16+4>>2]=0;o[A+16+8>>2]=0;o[A+16+12>>2]=0;HP[T&127](D,A+304|0,A+272|0,A+16|0);o[A+208>>2]=O;o[A+208+4>>2]=L;o[A+208+8>>2]=x;c[A+208+12>>2]=0;o[A+176>>2]=M;o[A+176+4>>2]=P;o[A+176+8>>2]=W;c[A+176+12>>2]=0;K=+c[t+192>>2];Q=+c[t+196>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;W=o[(o[e>>2]|0)+68>>2]|0;o[A>>2]=0;o[A+4>>2]=0;o[A+8>>2]=0;o[A+12>>2]=0;mP[W&0](e,t+888+48|0,A+208|0,A+176|0,B,B,K,Q,A,1,10)}p=A;return}default:{p=A;return}}}function Og(e){e=e|0;var t=0,i=0,n=0,r=0,_=0;n=o[e+232>>2]|0;if((n|0)<=0)return;e=o[e+240>>2]|0;i=0;do{t=o[e+(i<<2)>>2]|0;switch(o[t+216>>2]|0){case 2:case 5:break;default:if(!(o[t+204>>2]&3)){_=+c[t+392>>2]*+c[t+376>>2];r=+c[t+396>>2]*+c[t+380>>2];c[t+436>>2]=+c[t+388>>2]*+c[t+372>>2]+ +c[t+436>>2];c[t+440>>2]=_+ +c[t+440>>2];c[t+444>>2]=r+ +c[t+444>>2]}}i=i+1|0}while((i|0)!=(n|0));return}function Lg(e,t){e=e|0;t=t|0;return}function xg(e,t){e=e|0;t=+t;var i=0,n=0,r=0;n=p;p=p+16|0;Zp(16070);if((o[e+280>>2]|0)>0){i=0;do{r=o[(o[e+288>>2]|0)+(i<<2)>>2]|0;NP[o[(o[r>>2]|0)+8>>2]&7](r,e,t);i=i+1|0}while((i|0)<(o[e+280>>2]|0))}i=o[2006]|0;r=(o[i+16>>2]|0)+-1|0;o[i+16>>2]=r;if(r|0){p=n;return}do if(o[i+4>>2]|0){ut(n|0,0)|0;r=o[5649]|0;c[i+8>>2]=+c[i+8>>2]+ +(((o[n+4>>2]|0)-(o[r+4>>2]|0)+(((o[n>>2]|0)-(o[r>>2]|0)|0)*1e6|0)-(o[i+12>>2]|0)|0)>>>0)/1e3;if(!(o[i+16>>2]|0)){i=o[2006]|0;break}else{p=n;return}}while(0);o[2006]=o[i+20>>2];p=n;return}function Mg(e){e=e|0;var t=0;o[e>>2]=7896;t=o[e+80>>2]|0;if(t|0){if(n[e+84>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+80>>2]=0}n[e+84>>0]=1;o[e+80>>2]=0;o[e+72>>2]=0;o[e+76>>2]=0;t=o[e+60>>2]|0;if(t|0){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+60>>2]=0}n[e+64>>0]=1;o[e+60>>2]=0;o[e+52>>2]=0;o[e+56>>2]=0;t=o[e+40>>2]|0;if(!t){n[e+44>>0]=1;o[e+40>>2]=0;o[e+32>>2]=0;e=e+36|0;o[e>>2]=0;return}if(n[e+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+40>>2]=0;n[e+44>>0]=1;o[e+40>>2]=0;o[e+32>>2]=0;e=e+36|0;o[e>>2]=0;return}function Pg(e){e=e|0;Mg(e);qa(e);return}function Wg(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;var a=0,c=0,f=0,p=0,l=0,u=0,b=0;if((s|0)<0){b=o[e+8>>2]|0;+LP[o[(o[b>>2]|0)+12>>2]&3](b,t,i,r,_,o[e+12>>2]|0,o[e+16>>2]|0,o[e+4>>2]|0,o[e+20>>2]|0,o[e+24>>2]|0);return}u=o[e+16>>2]|0;e:do if((u|0)>0){l=o[e+12>>2]|0;a=0;while(1){p=l+(a<<2)|0;f=o[p>>2]|0;c=o[(o[f+28>>2]|0)+208>>2]|0;if((c|0)<=-1)c=o[(o[f+32>>2]|0)+208>>2]|0;if((c|0)==(s|0)){b=p;break e}a=a+1|0;if((a|0)>=(u|0)){b=0;break}}}else{a=0;b=0}while(0);if((a|0)<(u|0)){l=o[e+12>>2]|0;c=0;do{p=o[l+(a<<2)>>2]|0;f=o[(o[p+28>>2]|0)+208>>2]|0;if((f|0)<=-1)f=o[(o[p+32>>2]|0)+208>>2]|0;c=((f|0)==(s|0)&1)+c|0;a=a+1|0}while((a|0)!=(u|0));s=c}else s=0;a=o[e+4>>2]|0;if((o[a+72>>2]|0)<2){u=o[e+8>>2]|0;+LP[o[(o[u>>2]|0)+12>>2]&3](u,t,i,r,_,b,s,a,o[e+20>>2]|0,o[e+24>>2]|0);return}if((i|0)>0){a=o[e+32>>2]|0;c=o[e+36>>2]|0;u=0;do{l=t+(u<<2)|0;if((a|0)==(c|0)){p=c|0?c<<1:1;if((c|0)<(p|0)){if(!p)a=0;else{o[5637]=(o[5637]|0)+1;a=Qa((p<<2|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}c=o[e+32>>2]|0}if((c|0)>0){f=0;do{o[a+(f<<2)>>2]=o[(o[e+40>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(c|0))}f=o[e+40>>2]|0;if(f){if(n[e+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0);c=o[e+32>>2]|0}o[e+40>>2]=0}n[e+44>>0]=1;o[e+40>>2]=a;o[e+36>>2]=p;a=c;c=p}else a=c}o[(o[e+40>>2]|0)+(a<<2)>>2]=o[l>>2];a=a+1|0;o[e+32>>2]=a;u=u+1|0}while((u|0)!=(i|0))}if((_|0)>0){a=o[e+52>>2]|0;c=o[e+56>>2]|0;u=0;do{l=r+(u<<2)|0;if((a|0)==(c|0)){p=c|0?c<<1:1;if((c|0)<(p|0)){if(!p)a=0;else{o[5637]=(o[5637]|0)+1;a=Qa((p<<2|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}c=o[e+52>>2]|0}if((c|0)>0){f=0;do{o[a+(f<<2)>>2]=o[(o[e+60>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(c|0))}f=o[e+60>>2]|0;if(f){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0);c=o[e+52>>2]|0}o[e+60>>2]=0}n[e+64>>0]=1;o[e+60>>2]=a;o[e+56>>2]=p;a=c;c=p}else a=c}o[(o[e+60>>2]|0)+(a<<2)>>2]=o[l>>2];a=a+1|0;o[e+52>>2]=a;u=u+1|0}while((u|0)!=(_|0))}if((s|0)>0){a=o[e+72>>2]|0;c=o[e+76>>2]|0;u=0;do{l=b+(u<<2)|0;if((a|0)==(c|0)){p=c|0?c<<1:1;if((c|0)<(p|0)){if(!p){f=0;a=c}else{o[5637]=(o[5637]|0)+1;a=Qa((p<<2|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}f=a;a=o[e+72>>2]|0}if((a|0)>0){c=0;do{o[f+(c<<2)>>2]=o[(o[e+80>>2]|0)+(c<<2)>>2];c=c+1|0}while((c|0)!=(a|0))}c=o[e+80>>2]|0;if(c){if(n[e+84>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[c+-4>>2]|0);a=o[e+72>>2]|0}o[e+80>>2]=0}n[e+84>>0]=1;o[e+80>>2]=f;o[e+76>>2]=p;c=p}else a=c}o[(o[e+80>>2]|0)+(a<<2)>>2]=o[l>>2];a=a+1|0;o[e+72>>2]=a;u=u+1|0}while((u|0)!=(s|0))}else a=o[e+72>>2]|0;if(((o[e+52>>2]|0)+a|0)<=(o[(o[e+4>>2]|0)+72>>2]|0))return;Rg(e);return}function Bg(e){e=e|0;var t=0;o[e>>2]=7916;t=o[e+520>>2]|0;if(t|0){if(n[e+524>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+520>>2]=0}n[e+524>>0]=1;o[e+520>>2]=0;o[e+512>>2]=0;o[e+516>>2]=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(t|0){if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0}n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Ag(e){e=e|0;return 488}function Fg(e,t,i){e=e|0;t=t|0;i=i|0;zC(e,t,i)|0;o[t+256>>2]=o[e+288>>2];o[t+260>>2]=o[e+292>>2];o[t+264>>2]=o[e+296>>2];o[t+268>>2]=o[e+300>>2];o[t+272>>2]=o[e+304>>2];o[t+276>>2]=o[e+308>>2];o[t+280>>2]=o[e+312>>2];o[t+284>>2]=o[e+316>>2];o[t+288>>2]=o[e+320>>2];o[t+292>>2]=o[e+324>>2];o[t+296>>2]=o[e+328>>2];o[t+300>>2]=o[e+332>>2];o[t+304>>2]=o[e+336>>2];o[t+308>>2]=o[e+340>>2];o[t+312>>2]=o[e+344>>2];o[t+316>>2]=o[e+348>>2];o[t+320>>2]=o[e+352>>2];o[t+324>>2]=o[e+356>>2];o[t+328>>2]=o[e+360>>2];o[t+332>>2]=o[e+364>>2];o[t+448>>2]=o[e+368>>2];o[t+336>>2]=o[e+568>>2];o[t+340>>2]=o[e+572>>2];o[t+344>>2]=o[e+576>>2];o[t+348>>2]=o[e+580>>2];o[t+352>>2]=o[e+372>>2];o[t+356>>2]=o[e+376>>2];o[t+360>>2]=o[e+380>>2];o[t+364>>2]=o[e+384>>2];o[t+368>>2]=o[e+388>>2];o[t+372>>2]=o[e+392>>2];o[t+376>>2]=o[e+396>>2];o[t+380>>2]=o[e+400>>2];o[t+384>>2]=o[e+404>>2];o[t+388>>2]=o[e+408>>2];o[t+392>>2]=o[e+412>>2];o[t+396>>2]=o[e+416>>2];o[t+400>>2]=o[e+420>>2];o[t+404>>2]=o[e+424>>2];o[t+408>>2]=o[e+428>>2];o[t+412>>2]=o[e+432>>2];o[t+416>>2]=o[e+436>>2];o[t+420>>2]=o[e+440>>2];o[t+424>>2]=o[e+444>>2];o[t+428>>2]=o[e+448>>2];o[t+432>>2]=o[e+452>>2];o[t+436>>2]=o[e+456>>2];o[t+440>>2]=o[e+460>>2];o[t+444>>2]=o[e+464>>2];o[t+452>>2]=o[e+468>>2];o[t+456>>2]=o[e+472>>2];o[t+484>>2]=_[e+476>>0];o[t+460>>2]=o[e+480>>2];o[t+464>>2]=o[e+484>>2];o[t+468>>2]=o[e+488>>2];o[t+472>>2]=o[e+492>>2];o[t+476>>2]=o[e+496>>2];o[t+480>>2]=o[e+500>>2];return 16174}function Gg(e,t){e=e|0;t=t|0;var i=0,n=0;i=o[(o[t>>2]|0)+16>>2]|0;n=fP[o[(o[e>>2]|0)+16>>2]&127](e)|0;n=gP[i&63](t,n,1)|0;i=gP[o[(o[e>>2]|0)+20>>2]&63](e,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,i,1497645650,e);return}function Eg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;l=p;p=p+32|0;o[e+236>>2]=2;o[e+336>>2]=0;o[e+336+4>>2]=0;o[e+336+8>>2]=0;o[e+336+12>>2]=0;o[e+336+16>>2]=0;o[e+336+20>>2]=0;o[e+336+24>>2]=0;o[e+336+28>>2]=0;o[e+568>>2]=1065353216;o[e+572>>2]=1065353216;o[e+576>>2]=1065353216;c[e+580>>2]=0;o[e+372>>2]=1065353216;o[e+376>>2]=1065353216;o[e+380>>2]=1065353216;i=e+384|0;_=i+36|0;do{o[i>>2]=0;i=i+4|0}while((i|0)<(_|0));o[e+436>>2]=0;o[e+436+4>>2]=0;o[e+436+8>>2]=0;o[e+436+12>>2]=0;o[e+436+16>>2]=0;o[e+436+20>>2]=0;o[e+436+24>>2]=0;o[e+436+28>>2]=0;r=+c[t+92>>2];f=+c[t+96>>2];c[l+20>>2]=r;c[l+16>>2]=f;c[l+12>>2]=0;c[l+8>>2]=1;o[e+468>>2]=o[(r<0?l+12|0:r>1?l+8|0:l+20|0)>>2];c[l+4>>2]=0;c[l>>2]=1;o[e+472>>2]=o[(f<0?l+4|0:f>1?l:l+16|0)>>2];o[e+496>>2]=o[t+112>>2];o[e+500>>2]=o[t+116>>2];i=o[t+4>>2]|0;o[e+504>>2]=i;o[e+632>>2]=0;o[e+636>>2]=0;n[e+476>>0]=n[t+120>>0]|0;o[e+480>>2]=o[t+124>>2];o[e+484>>2]=o[t+128>>2];o[e+488>>2]=o[t+132>>2];o[e+492>>2]=o[t+136>>2];if(!i){o[e+4>>2]=o[t+8>>2];o[e+4+4>>2]=o[t+8+4>>2];o[e+4+8>>2]=o[t+8+8>>2];o[e+4+12>>2]=o[t+8+12>>2];o[e+20>>2]=o[t+24>>2];o[e+20+4>>2]=o[t+24+4>>2];o[e+20+8>>2]=o[t+24+8>>2];o[e+20+12>>2]=o[t+24+12>>2];o[e+36>>2]=o[t+40>>2];o[e+36+4>>2]=o[t+40+4>>2];o[e+36+8>>2]=o[t+40+8>>2];o[e+36+12>>2]=o[t+40+12>>2];o[e+52>>2]=o[t+56>>2];o[e+52+4>>2]=o[t+56+4>>2];o[e+52+8>>2]=o[t+56+8>>2];o[e+52+12>>2]=o[t+56+12>>2];i=e+4|0;_=e+20|0;s=e+36|0;a=e+52|0}else{aP[o[(o[i>>2]|0)+8>>2]&127](i,e+4|0);i=e+4|0;_=e+20|0;s=e+36|0;a=e+52|0}o[e+68>>2]=o[i>>2];o[e+68+4>>2]=o[i+4>>2];o[e+68+8>>2]=o[i+8>>2];o[e+68+12>>2]=o[i+12>>2];o[e+84>>2]=o[_>>2];o[e+84+4>>2]=o[_+4>>2];o[e+84+8>>2]=o[_+8>>2];o[e+84+12>>2]=o[_+12>>2];o[e+100>>2]=o[s>>2];o[e+100+4>>2]=o[s+4>>2];o[e+100+8>>2]=o[s+8>>2];o[e+100+12>>2]=o[s+12>>2];o[e+116>>2]=o[a>>2];o[e+116+4>>2]=o[a+4>>2];o[e+116+8>>2]=o[a+8>>2];o[e+116+12>>2]=o[a+12>>2];o[e+132>>2]=0;o[e+132+4>>2]=0;o[e+132+8>>2]=0;o[e+132+12>>2]=0;o[e+132+16>>2]=0;o[e+132+20>>2]=0;o[e+132+24>>2]=0;o[e+132+28>>2]=0;o[e+224>>2]=o[t+100>>2];o[e+232>>2]=o[t+104>>2];o[e+228>>2]=o[t+108>>2];aP[o[(o[e>>2]|0)+8>>2]&127](e,o[t+72>>2]|0);i=o[5476]|0;o[5476]=i+1;o[e+532>>2]=i;r=+c[t>>2];i=o[e+204>>2]|0;if(r==0){o[e+204>>2]=i|1;f=0}else{o[e+204>>2]=i&-2;f=1/r}c[e+368>>2]=f;d=r*+c[e+408>>2];b=r*+c[e+412>>2];c[e+388>>2]=r*+c[e+404>>2];c[e+392>>2]=d;c[e+396>>2]=b;c[e+400>>2]=0;r=+c[t+76>>2];_=r!=0?(c[u>>2]=1/r,o[u>>2]|0):0;r=+c[t+80>>2];i=r!=0?(c[u>>2]=1/r,o[u>>2]|0):0;r=+c[t+84>>2];t=r!=0?(c[u>>2]=1/r,o[u>>2]|0):0;o[e+420>>2]=_;o[e+424>>2]=i;o[e+428>>2]=t;c[e+432>>2]=0;m=f*+c[e+376>>2];k=f*+c[e+380>>2];c[e+584>>2]=f*+c[e+372>>2];c[e+588>>2]=m;c[e+592>>2]=k;c[e+596>>2]=0;k=+c[e+4>>2];m=(o[u>>2]=_,+c[u>>2]);w=+c[e+8>>2];r=(o[u>>2]=i,+c[u>>2]);C=+c[e+12>>2];b=(o[u>>2]=t,+c[u>>2]);v=+c[e+20>>2];g=+c[e+24>>2];y=+c[e+28>>2];h=+c[e+36>>2];d=+c[e+40>>2];f=+c[e+44>>2];c[e+288>>2]=k*(k*m)+w*(w*r)+C*(C*b);c[e+292>>2]=k*m*v+w*r*g+C*b*y;c[e+296>>2]=k*m*h+w*r*d+C*b*f;c[e+300>>2]=0;c[e+304>>2]=k*(m*v)+w*(r*g)+C*(b*y);c[e+308>>2]=v*(m*v)+g*(r*g)+y*(b*y);c[e+312>>2]=m*v*h+r*g*d+b*y*f;c[e+316>>2]=0;c[e+320>>2]=k*(m*h)+w*(r*d)+C*(b*f);c[e+324>>2]=v*(m*h)+g*(r*d)+y*(b*f);c[e+328>>2]=h*(m*h)+d*(r*d)+f*(b*f);c[e+332>>2]=0;o[e+528>>2]=8;o[e+536>>2]=0;o[e+536+4>>2]=0;o[e+536+8>>2]=0;o[e+536+12>>2]=0;o[e+536+16>>2]=0;o[e+536+20>>2]=0;o[e+536+24>>2]=0;o[e+536+28>>2]=0;f=+c[e+368>>2];b=f*+c[e+376>>2];d=f*+c[e+380>>2];c[e+584>>2]=+c[e+372>>2]*f;c[e+588>>2]=b;c[e+592>>2]=d;i=e+596|0;_=i+36|0;do{o[i>>2]=0;i=i+4|0}while((i|0)<(_|0));p=l;return}function Vg(e,t,i,r,_){e=e|0;t=+t;i=i|0;r=r|0;_=_|0;var s=0;s=p;p=p+144|0;o[e+164>>2]=1065353216;o[e+168>>2]=1065353216;o[e+172>>2]=1065353216;c[e+176>>2]=0;o[e+180>>2]=0;c[e+184>>2]=0xde0b6b000000000;o[e+188>>2]=0;o[e+188+4>>2]=0;o[e+188+8>>2]=0;o[e+188+12>>2]=0;o[e+204>>2]=1;o[e+208>>2]=-1;o[e+212>>2]=-1;o[e+216>>2]=1;c[e+220>>2]=0;c[e+224>>2]=.5;c[e+228>>2]=0;c[e+232>>2]=0;o[e+236>>2]=1;o[e+240>>2]=0;o[e+244>>2]=-1;c[e+248>>2]=1;c[e+252>>2]=0;c[e+256>>2]=0;o[e+260>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[e+284>>2]=0;o[e+4>>2]=1065353216;o[e+8>>2]=0;o[e+8+4>>2]=0;o[e+8+8>>2]=0;o[e+8+12>>2]=0;o[e+24>>2]=1065353216;o[e+28>>2]=0;o[e+28+4>>2]=0;o[e+28+8>>2]=0;o[e+28+12>>2]=0;o[e+44>>2]=1065353216;o[e+48>>2]=0;o[e+48+4>>2]=0;o[e+48+8>>2]=0;o[e+48+12>>2]=0;o[e+48+16>>2]=0;o[e>>2]=7916;n[e+524>>0]=1;o[e+520>>2]=0;o[e+512>>2]=0;o[e+516>>2]=0;c[s>>2]=t;o[s+4>>2]=i;o[s+72>>2]=r;o[s+76>>2]=o[_>>2];o[s+76+4>>2]=o[_+4>>2];o[s+76+8>>2]=o[_+8>>2];o[s+76+12>>2]=o[_+12>>2];c[s+92>>2]=0;c[s+96>>2]=0;c[s+100>>2]=.5;c[s+104>>2]=0;c[s+108>>2]=0;c[s+112>>2]=.800000011920929;c[s+116>>2]=1;n[s+120>>0]=0;c[s+124>>2]=.004999999888241291;c[s+128>>2]=.009999999776482582;c[s+132>>2]=.009999999776482582;c[s+136>>2]=.009999999776482582;o[s+8>>2]=1065353216;o[s+12>>2]=0;o[s+12+4>>2]=0;o[s+12+8>>2]=0;o[s+12+12>>2]=0;o[s+28>>2]=1065353216;o[s+32>>2]=0;o[s+32+4>>2]=0;o[s+32+8>>2]=0;o[s+32+12>>2]=0;o[s+48>>2]=1065353216;o[s+52>>2]=0;o[s+52+4>>2]=0;o[s+52+8>>2]=0;o[s+52+12>>2]=0;o[s+52+16>>2]=0;Eg(e,s);p=s;return}function Ng(e,t){e=e|0;t=+t;var i=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0;p=+c[e+468>>2];s=+H(+(1-p),+t);i=s*+c[e+336>>2];c[e+336>>2]=i;_=s*+c[e+340>>2];c[e+340>>2]=_;s=s*+c[e+344>>2];c[e+344>>2]=s;l=+c[e+472>>2];r=+H(+(1-l),+t);t=r*+c[e+352>>2];c[e+352>>2]=t;a=r*+c[e+356>>2];c[e+356>>2]=a;r=r*+c[e+360>>2];c[e+360>>2]=r;if(!(n[e+476>>0]|0))return;if(r*r+(t*t+a*a)<+c[e+488>>2]?i*i+_*_+s*s<+c[e+484>>2]:0){u=+c[e+480>>2];c[e+352>>2]=t*u;c[e+356>>2]=u*a;c[e+360>>2]=u*r;c[e+336>>2]=u*i;c[e+340>>2]=u*_;c[e+344>>2]=u*s;i=u*i;_=u*_;s=u*s;f=t*u;a=u*a;r=u*r}else f=t;t=+X(+(i*i+_*_+s*s));do if(t<p)if(t>.004999999888241291){c[e+336>>2]=i-i*(1/t)*.004999999888241291;c[e+340>>2]=_-_*(1/t)*.004999999888241291;c[e+344>>2]=s-s*(1/t)*.004999999888241291;break}else{o[e+336>>2]=0;o[e+336+4>>2]=0;o[e+336+8>>2]=0;o[e+336+12>>2]=0;break}while(0);t=+X(+(f*f+a*a+r*r));if(!(t<l))return;if(t>.004999999888241291){c[e+352>>2]=f-f*(1/t)*.004999999888241291;c[e+356>>2]=a-a*(1/t)*.004999999888241291;c[e+360>>2]=r-r*(1/t)*.004999999888241291;return}else{o[e+352>>2]=0;o[e+352+4>>2]=0;o[e+352+8>>2]=0;o[e+352+12>>2]=0;return}}function Xg(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;if(!(o[e+204>>2]&2)){o[e+68>>2]=o[t>>2];o[e+68+4>>2]=o[t+4>>2];o[e+68+8>>2]=o[t+8>>2];o[e+68+12>>2]=o[t+12>>2];o[e+84>>2]=o[t+16>>2];o[e+84+4>>2]=o[t+16+4>>2];o[e+84+8>>2]=o[t+16+8>>2];o[e+84+12>>2]=o[t+16+12>>2];o[e+100>>2]=o[t+32>>2];o[e+100+4>>2]=o[t+32+4>>2];o[e+100+8>>2]=o[t+32+8>>2];o[e+100+12>>2]=o[t+32+12>>2];o[e+116>>2]=o[t+48>>2];o[e+116+4>>2]=o[t+48+4>>2];o[e+116+8>>2]=o[t+48+8>>2];o[e+116+12>>2]=o[t+48+12>>2];i=e+20|0;n=t+16|0;r=e+36|0;_=t+32|0;s=e+52|0;a=t+48|0;f=e+4|0}else{o[e+68>>2]=o[e+4>>2];o[e+68+4>>2]=o[e+4+4>>2];o[e+68+8>>2]=o[e+4+8>>2];o[e+68+12>>2]=o[e+4+12>>2];o[e+84>>2]=o[e+20>>2];o[e+84+4>>2]=o[e+20+4>>2];o[e+84+8>>2]=o[e+20+8>>2];o[e+84+12>>2]=o[e+20+12>>2];o[e+100>>2]=o[e+36>>2];o[e+100+4>>2]=o[e+36+4>>2];o[e+100+8>>2]=o[e+36+8>>2];o[e+100+12>>2]=o[e+36+12>>2];o[e+116>>2]=o[e+52>>2];o[e+116+4>>2]=o[e+52+4>>2];o[e+116+8>>2]=o[e+52+8>>2];o[e+116+12>>2]=o[e+52+12>>2];i=e+20|0;n=t+16|0;r=e+36|0;_=t+32|0;s=e+52|0;a=t+48|0;f=e+4|0}o[e+132>>2]=o[e+336>>2];o[e+132+4>>2]=o[e+336+4>>2];o[e+132+8>>2]=o[e+336+8>>2];o[e+132+12>>2]=o[e+336+12>>2];o[e+148>>2]=o[e+352>>2];o[e+148+4>>2]=o[e+352+4>>2];o[e+148+8>>2]=o[e+352+8>>2];o[e+148+12>>2]=o[e+352+12>>2];o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];o[i>>2]=o[n>>2];o[i+4>>2]=o[n+4>>2];o[i+8>>2]=o[n+8>>2];o[i+12>>2]=o[n+12>>2];o[r>>2]=o[_>>2];o[r+4>>2]=o[_+4>>2];o[r+8>>2]=o[_+8>>2];o[r+12>>2]=o[_+12>>2];o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];w=+c[e+4>>2];h=+c[e+420>>2];C=+c[e+8>>2];b=+c[e+424>>2];v=+c[e+12>>2];l=+c[e+428>>2];g=+c[e+20>>2];y=+c[e+24>>2];m=+c[e+28>>2];d=+c[e+36>>2];u=+c[e+40>>2];p=+c[e+44>>2];c[e+288>>2]=w*(w*h)+C*(C*b)+v*(v*l);c[e+292>>2]=w*h*g+C*b*y+v*l*m;c[e+296>>2]=w*h*d+C*b*u+v*l*p;c[e+300>>2]=0;c[e+304>>2]=w*(h*g)+C*(b*y)+v*(l*m);c[e+308>>2]=g*(h*g)+y*(b*y)+m*(l*m);c[e+312>>2]=h*g*d+b*y*u+l*m*p;c[e+316>>2]=0;c[e+320>>2]=w*(h*d)+C*(b*u)+v*(l*p);c[e+324>>2]=g*(h*d)+y*(b*u)+m*(l*p);c[e+328>>2]=d*(h*d)+u*(b*u)+p*(l*p);c[e+332>>2]=0;return}function Hg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0;i=o[e+512>>2]|0;e:do if((i|0)>0){_=o[e+520>>2]|0;r=0;while(1){if((o[_+(r<<2)>>2]|0)==(t|0))break;r=r+1|0;if((r|0)>=(i|0))break e}if((r|0)!=(i|0))return}while(0);if((i|0)==(o[e+516>>2]|0)?(s=i|0?i<<1:1,(i|0)<(s|0)):0){if(!s)_=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=i;i=o[e+512>>2]|0}if((i|0)>0){r=0;do{o[_+(r<<2)>>2]=o[(o[e+520>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(i|0))}r=o[e+520>>2]|0;if(r){if(n[e+524>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0);i=o[e+512>>2]|0}o[e+520>>2]=0}n[e+524>>0]=1;o[e+520>>2]=_;o[e+516>>2]=s}o[(o[e+520>>2]|0)+(i<<2)>>2]=t;o[e+512>>2]=i+1;s=o[t+28>>2]|0;t=o[t+32>>2]|0;if((s|0)==(e|0)){i=o[e+268>>2]|0;if((i|0)==(o[e+272>>2]|0)?(c=i|0?i<<1:1,(i|0)<(c|0)):0){if(!c)_=0;else{o[5637]=(o[5637]|0)+1;i=Qa((c<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=i;i=o[e+268>>2]|0}if((i|0)>0){r=0;do{o[_+(r<<2)>>2]=o[(o[e+276>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(i|0))}r=o[e+276>>2]|0;if(r){if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0);i=o[e+268>>2]|0}o[e+276>>2]=0}n[e+280>>0]=1;o[e+276>>2]=_;o[e+272>>2]=c}o[(o[e+276>>2]|0)+(i<<2)>>2]=t;o[e+268>>2]=i+1;o[e+260>>2]=i>>>31^1;return}else{i=o[t+268>>2]|0;if((i|0)==(o[t+272>>2]|0)?(a=i|0?i<<1:1,(i|0)<(a|0)):0){if(!a)_=0;else{o[5637]=(o[5637]|0)+1;i=Qa((a<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=i;i=o[t+268>>2]|0}if((i|0)>0){r=0;do{o[_+(r<<2)>>2]=o[(o[t+276>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(i|0))}r=o[t+276>>2]|0;if(r){if(n[t+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0);i=o[t+268>>2]|0}o[t+276>>2]=0}n[t+280>>0]=1;o[t+276>>2]=_;o[t+272>>2]=a}o[(o[t+276>>2]|0)+(i<<2)>>2]=s;o[t+268>>2]=i+1;o[t+260>>2]=i>>>31^1;return}}function Zg(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0;_=o[e+512>>2]|0;if((_|0)<=0)return;s=o[e+520>>2]|0;i=0;while(1){if((o[s+(i<<2)>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(_|0)){a=25;break}}if((a|0)==25)return;if((i|0)<(_|0))r=0;else return;while(1){i=s+(r<<2)|0;if((o[i>>2]|0)==(t|0)){a=8;break}n=r+1|0;if((n|0)<(_|0))r=n;else break}if((a|0)==8?(r|0)<(_|0):0){o[i>>2]=o[s+(_+-1<<2)>>2];o[(o[e+520>>2]|0)+(_+-1<<2)>>2]=t;o[e+512>>2]=_+-1}s=o[t+28>>2]|0;a=o[t+32>>2]|0;if((s|0)==(e|0)){i=o[e+268>>2]|0;e:do if((i|0)>0){_=o[e+276>>2]|0;n=0;while(1){r=_+(n<<2)|0;if((o[r>>2]|0)==(a|0))break;n=n+1|0;if((n|0)>=(i|0))break e}if((n|0)<(i|0)){o[r>>2]=o[_+(i+-1<<2)>>2];o[(o[e+276>>2]|0)+(i+-1<<2)>>2]=a;o[e+268>>2]=i+-1;i=i+-1|0}}while(0);o[e+260>>2]=(i|0)>0&1;return}else{i=o[a+268>>2]|0;e:do if((i|0)>0){_=o[a+276>>2]|0;n=0;while(1){r=_+(n<<2)|0;if((o[r>>2]|0)==(s|0))break;n=n+1|0;if((n|0)>=(i|0))break e}if((n|0)<(i|0)){o[r>>2]=o[_+(i+-1<<2)>>2];o[(o[a+276>>2]|0)+(i+-1<<2)>>2]=s;o[a+268>>2]=i+-1;i=i+-1|0}}while(0);o[a+260>>2]=(i|0)>0&1;return}}function Ug(e){e=e|0;var t=0;o[e>>2]=7952;t=o[e+136>>2]|0;if(t|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;t=o[e+76>>2]|0;if(t|0){if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+76>>2]=0}n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;o[e+72>>2]=0;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function zg(e){e=e|0;Ug(e);qa(e);return}function Yg(e,t,i){e=e|0;t=t|0;i=+i;oP[o[(o[e>>2]|0)+16>>2]&31](e,i);return}function Kg(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0;r=p;p=p+48|0;if((o[e+128>>2]|0)<=0){p=r;return}i=0;do{l=o[e+136>>2]|0;o[r+32>>2]=(n[l+(i*284|0)+84>>0]|0)==0?1065353216:0;o[r+32+4>>2]=0;o[r+32+8>>2]=1065353216;c[r+32+12>>2]=0;f=l+(i*284|0)+140|0;o[r+16>>2]=o[f>>2];o[r+16+4>>2]=o[f+4>>2];o[r+16+8>>2]=o[f+8>>2];o[r+16+12>>2]=o[f+12>>2];f=o[e+112>>2]|0;_=o[(o[t>>2]|0)+16>>2]|0;a=+c[l+(i*284|0)+108+(f<<2)>>2]+ +c[r+16+4>>2];s=+c[l+(i*284|0)+124+(f<<2)>>2]+ +c[r+16+8>>2];c[r>>2]=+c[l+(i*284|0)+92+(f<<2)>>2]+ +c[r+16>>2];c[r+4>>2]=a;c[r+8>>2]=s;c[r+12>>2]=0;HP[_&127](t,r+16|0,r,r+32|0);HP[o[(o[t>>2]|0)+16>>2]&127](t,r+16|0,(o[e+136>>2]|0)+(i*284|0)+16|0,r+32|0);i=i+1|0}while((i|0)<(o[e+128>>2]|0));p=r;return}function Qg(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,a=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;b=p;p=p+80|0;i=fP[o[(o[e>>2]|0)+28>>2]&127](e)|0;r=+c[e+4>>2];a=+c[e+8>>2];l=+c[e+12>>2];if((i|0)<=0){p=b;return}u=0;do{TP[o[(o[e>>2]|0)+16>>2]&3](e,b+76|0,b+52|0,b+64|0,b+56|0,b+72|0,b+68|0,b+48|0,b+60|0,u);e:do switch(o[b+64>>2]|0){case 0:{switch(o[b+60>>2]|0){case 2:{if((o[b+48>>2]|0)>0)n=0;else break e;do{m=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;g=o[b+76>>2]|0;y=o[b+56>>2]|0;v=g+(te(y,o[m>>2]|0)|0)|0;h=a*+c[v+4>>2];d=l*+c[v+8>>2];c[b>>2]=r*+c[v>>2];c[b+4>>2]=h;c[b+8>>2]=d;c[b+12>>2]=0;v=g+(te(y,o[m+4>>2]|0)|0)|0;d=a*+c[v+4>>2];h=l*+c[v+8>>2];c[b+16>>2]=r*+c[v>>2];c[b+20>>2]=d;c[b+24>>2]=h;c[b+28>>2]=0;m=g+(te(y,o[m+8>>2]|0)|0)|0;h=a*+c[m+4>>2];d=l*+c[m+8>>2];c[b+32>>2]=r*+c[m>>2];c[b+36>>2]=h;c[b+40>>2]=d;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}case 3:{if((o[b+48>>2]|0)>0)n=0;else break e;do{g=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;y=o[b+76>>2]|0;v=o[b+56>>2]|0;m=y+(te(s[g>>1]|0,v)|0)|0;d=a*+c[m+4>>2];h=l*+c[m+8>>2];c[b>>2]=r*+c[m>>2];c[b+4>>2]=d;c[b+8>>2]=h;c[b+12>>2]=0;m=y+(te(s[g+2>>1]|0,v)|0)|0;h=a*+c[m+4>>2];d=l*+c[m+8>>2];c[b+16>>2]=r*+c[m>>2];c[b+20>>2]=h;c[b+24>>2]=d;c[b+28>>2]=0;v=y+(te(s[g+4>>1]|0,v)|0)|0;d=a*+c[v+4>>2];h=l*+c[v+8>>2];c[b+32>>2]=r*+c[v>>2];c[b+36>>2]=d;c[b+40>>2]=h;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}case 5:{if((o[b+48>>2]|0)>0)n=0;else break e;do{g=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;y=o[b+76>>2]|0;v=o[b+56>>2]|0;m=y+(te(_[g>>0]|0,v)|0)|0;d=a*+c[m+4>>2];h=l*+c[m+8>>2];c[b>>2]=r*+c[m>>2];c[b+4>>2]=d;c[b+8>>2]=h;c[b+12>>2]=0;m=y+(te(_[g+1>>0]|0,v)|0)|0;h=a*+c[m+4>>2];d=l*+c[m+8>>2];c[b+16>>2]=r*+c[m>>2];c[b+20>>2]=h;c[b+24>>2]=d;c[b+28>>2]=0;v=y+(te(_[g+2>>0]|0,v)|0)|0;d=a*+c[v+4>>2];h=l*+c[v+8>>2];c[b+32>>2]=r*+c[v>>2];c[b+36>>2]=d;c[b+40>>2]=h;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}default:break e}break}case 1:{switch(o[b+60>>2]|0){case 2:{if((o[b+48>>2]|0)>0)n=0;else break e;do{v=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;y=o[b+76>>2]|0;g=o[b+56>>2]|0;m=y+(te(g,o[v>>2]|0)|0)|0;d=a*+f[m+8>>3];h=l*+f[m+16>>3];c[b>>2]=r*+f[m>>3];c[b+4>>2]=d;c[b+8>>2]=h;c[b+12>>2]=0;m=y+(te(g,o[v+4>>2]|0)|0)|0;h=a*+f[m+8>>3];d=l*+f[m+16>>3];c[b+16>>2]=r*+f[m>>3];c[b+20>>2]=h;c[b+24>>2]=d;c[b+28>>2]=0;v=y+(te(g,o[v+8>>2]|0)|0)|0;d=a*+f[v+8>>3];h=l*+f[v+16>>3];c[b+32>>2]=r*+f[v>>3];c[b+36>>2]=d;c[b+40>>2]=h;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}case 3:{if((o[b+48>>2]|0)>0)n=0;else break e;do{g=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;y=o[b+76>>2]|0;v=o[b+56>>2]|0;m=y+(te(s[g>>1]|0,v)|0)|0;d=a*+f[m+8>>3];h=l*+f[m+16>>3];c[b>>2]=r*+f[m>>3];c[b+4>>2]=d;c[b+8>>2]=h;c[b+12>>2]=0;m=y+(te(s[g+2>>1]|0,v)|0)|0;h=a*+f[m+8>>3];d=l*+f[m+16>>3];c[b+16>>2]=r*+f[m>>3];c[b+20>>2]=h;c[b+24>>2]=d;c[b+28>>2]=0;v=y+(te(s[g+4>>1]|0,v)|0)|0;d=a*+f[v+8>>3];h=l*+f[v+16>>3];c[b+32>>2]=r*+f[v>>3];c[b+36>>2]=d;c[b+40>>2]=h;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}case 5:{if((o[b+48>>2]|0)>0)n=0;else break e;do{g=(o[b+72>>2]|0)+(te(o[b+68>>2]|0,n)|0)|0;y=o[b+76>>2]|0;v=o[b+56>>2]|0;m=y+(te(_[g>>0]|0,v)|0)|0;d=a*+f[m+8>>3];h=l*+f[m+16>>3];c[b>>2]=r*+f[m>>3];c[b+4>>2]=d;c[b+8>>2]=h;c[b+12>>2]=0;m=y+(te(_[g+1>>0]|0,v)|0)|0;h=a*+f[m+8>>3];d=l*+f[m+16>>3];c[b+16>>2]=r*+f[m>>3];c[b+20>>2]=h;c[b+24>>2]=d;c[b+28>>2]=0;v=y+(te(_[g+2>>0]|0,v)|0)|0;d=a*+f[v+8>>3];h=l*+f[v+16>>3];c[b+32>>2]=r*+f[v>>3];c[b+36>>2]=d;c[b+40>>2]=h;c[b+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b,u,n);n=n+1|0}while((n|0)<(o[b+48>>2]|0));break}default:break e}break}default:{}}while(0);aP[o[(o[e>>2]|0)+24>>2]&127](e,u);u=u+1|0}while((u|0)!=(i|0));p=b;return}function qg(e){e=e|0;return 28}function Jg(e,t,i){e=e|0;t=t|0;i=i|0;var _=0,s=0,a=0,c=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;g=p;p=p+32|0;_=fP[o[(o[e>>2]|0)+28>>2]&127](e)|0;o[t+20>>2]=_;o[t>>2]=0;if(!_){y=e+4|0;i=t+4|0;y=o[y>>2]|0;o[i>>2]=y;i=e+8|0;i=o[i>>2]|0;y=t+8|0;o[y>>2]=i;y=e+12|0;y=o[y>>2]|0;i=t+12|0;o[i>>2]=y;i=e+16|0;i=o[i>>2]|0;e=t+16|0;o[e>>2]=i;p=g;return 14151}y=gP[o[(o[i>>2]|0)+16>>2]&63](i,32,_)|0;_=o[y+8>>2]|0;o[t>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,_)|0;m=fP[o[(o[e>>2]|0)+28>>2]&127](e)|0;e:do if((m|0)>0){h=0;while(1){TP[o[(o[e>>2]|0)+16>>2]&3](e,g+28|0,g+4|0,g+16|0,g+8|0,g+24|0,g+20|0,g,g+12|0,h);o[_+24>>2]=o[g>>2];o[_+28>>2]=o[g+4>>2];a=_+12|0;l=_+16|0;d=_+4|0;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;o[_+12>>2]=0;o[_+16>>2]=0;o[_+20>>2]=0;switch(o[g+12>>2]|0){case 2:{s=o[g>>2]|0;if(s|0){s=gP[o[(o[i>>2]|0)+16>>2]&63](i,4,s*3|0)|0;a=o[s+8>>2]|0;o[_+8>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,a)|0;if((o[g>>2]|0)>0){c=o[g+24>>2]|0;l=0;do{u=c+(te(o[g+20>>2]|0,l)|0)|0;b=l*3|0;o[a+(b<<2)>>2]=o[u>>2];o[a+(b+1<<2)>>2]=o[u+4>>2];o[a+(b+2<<2)>>2]=o[u+8>>2];l=l+1|0}while((l|0)<(o[g>>2]|0))}rP[o[(o[i>>2]|0)+20>>2]&31](i,s,14051,1497453121,o[s+8>>2]|0)}break}case 3:{s=o[g>>2]|0;if(s|0){u=gP[o[(o[i>>2]|0)+16>>2]&63](i,8,s)|0;b=o[u+8>>2]|0;o[a>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,b)|0;s=o[g>>2]|0;if((s|0)>0){a=o[g+24>>2]|0;c=o[g+20>>2]|0;l=0;do{v=a+(te(c,l)|0)|0;r[b+(l<<3)>>1]=r[v>>1]|0;r[b+(l<<3)+2>>1]=r[v+2>>1]|0;r[b+(l<<3)+4>>1]=r[v+4>>1]|0;l=l+1|0}while((l|0)!=(s|0))}rP[o[(o[i>>2]|0)+20>>2]&31](i,u,14066,1497453121,o[u+8>>2]|0)}break}case 5:{s=o[g>>2]|0;if(s|0){a=gP[o[(o[i>>2]|0)+16>>2]&63](i,4,s)|0;c=o[a+8>>2]|0;o[l>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,c)|0;if((o[g>>2]|0)>0){s=0;do{v=(o[g+24>>2]|0)+(te(o[g+20>>2]|0,s)|0)|0;n[c+(s<<2)>>0]=n[v>>0]|0;n[c+(s<<2)+1>>0]=n[v+1>>0]|0;n[c+(s<<2)+2>>0]=n[v+2>>0]|0;s=s+1|0}while((s|0)<(o[g>>2]|0))}rP[o[(o[i>>2]|0)+20>>2]&31](i,a,14093,1497453121,o[a+8>>2]|0)}break}default:{}}switch(o[g+16>>2]|0){case 0:{s=o[g+4>>2]|0;if(s|0){s=gP[o[(o[i>>2]|0)+16>>2]&63](i,16,s)|0;a=o[s+8>>2]|0;o[_>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,a)|0;c=o[g+4>>2]|0;if((c|0)>0){l=o[g+28>>2]|0;u=o[g+8>>2]|0;b=0;do{v=l+(te(u,b)|0)|0;o[a+(b<<4)>>2]=o[v>>2];o[a+(b<<4)+4>>2]=o[v+4>>2];o[a+(b<<4)+8>>2]=o[v+8>>2];b=b+1|0}while((b|0)!=(c|0))}rP[o[(o[i>>2]|0)+20>>2]&31](i,s,16354,1497453121,o[s+8>>2]|0)}break}case 1:{s=o[g+4>>2]|0;if(s|0){u=gP[o[(o[i>>2]|0)+16>>2]&63](i,32,s)|0;b=o[u+8>>2]|0;o[d>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,b)|0;s=o[g+4>>2]|0;if((s|0)>0){a=o[g+28>>2]|0;c=o[g+8>>2]|0;l=0;do{v=a+(te(c,l)|0)|0;f[b+(l<<5)>>3]=+f[v>>3];f[b+(l<<5)+8>>3]=+f[v+8>>3];f[b+(l<<5)+16>>3]=+f[v+16>>3];l=l+1|0}while((l|0)!=(s|0))}rP[o[(o[i>>2]|0)+20>>2]&31](i,u,14116,1497453121,o[u+8>>2]|0)}break}default:{}}aP[o[(o[e>>2]|0)+24>>2]&127](e,h);h=h+1|0;if((h|0)==(m|0)){_=i;break e}else _=_+32|0}}else _=i;while(0);rP[o[(o[_>>2]|0)+20>>2]&31](i,y,14136,1497453121,o[y+8>>2]|0);i=e+4|0;v=t+4|0;i=o[i>>2]|0;o[v>>2]=i;v=e+8|0;v=o[v>>2]|0;i=t+8|0;o[i>>2]=v;i=e+12|0;i=o[i>>2]|0;v=t+12|0;o[v>>2]=i;e=e+16|0;e=o[e>>2]|0;v=t+16|0;o[v>>2]=e;p=g;return 14151}function $g(e){e=e|0;return}function ev(e){e=e|0;return}function tv(e){e=e|0;var t=0;o[e>>2]=6556;t=o[e+32>>2]|0;if(t|0){if(n[e+36>>0]|0){\no[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;return}function iv(e){e=e|0;var t=0;o[e>>2]=6556;t=o[e+32>>2]|0;if(t|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function nv(e,t,i,n,r,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;e=o[e+32>>2]|0;o[i>>2]=o[e+(f<<5)+12>>2];o[t>>2]=o[e+(f<<5)+16>>2];o[n>>2]=o[e+(f<<5)+28>>2];o[r>>2]=o[e+(f<<5)+20>>2];o[a>>2]=o[e+(f<<5)>>2];o[_>>2]=o[e+(f<<5)+4>>2];o[s>>2]=o[e+(f<<5)+8>>2];o[c>>2]=o[e+(f<<5)+24>>2];return}function rv(e,t,i,n,r,_,s,a,c,f){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;e=o[e+32>>2]|0;o[i>>2]=o[e+(f<<5)+12>>2];o[t>>2]=o[e+(f<<5)+16>>2];o[n>>2]=o[e+(f<<5)+28>>2];o[r>>2]=o[e+(f<<5)+20>>2];o[a>>2]=o[e+(f<<5)>>2];o[_>>2]=o[e+(f<<5)+4>>2];o[s>>2]=o[e+(f<<5)+8>>2];o[c>>2]=o[e+(f<<5)+24>>2];return}function ov(e,t){e=e|0;t=t|0;return}function _v(e,t){e=e|0;t=t|0;return}function sv(e){e=e|0;return o[e+24>>2]|0}function av(e,t){e=e|0;t=t|0;return}function cv(e,t){e=e|0;t=t|0;return}function fv(e){e=e|0;return(o[e+48>>2]|0)==1|0}function pv(e,t,i){e=e|0;t=t|0;i=i|0;o[e+52>>2]=o[t>>2];o[e+52+4>>2]=o[t+4>>2];o[e+52+8>>2]=o[t+8>>2];o[e+52+12>>2]=o[t+12>>2];o[e+68>>2]=o[i>>2];o[e+68+4>>2]=o[i+4>>2];o[e+68+8>>2]=o[i+8>>2];o[e+68+12>>2]=o[i+12>>2];o[e+48>>2]=1;return}function lv(e,t,i){e=e|0;t=t|0;i=i|0;o[t>>2]=o[e+52>>2];o[t+4>>2]=o[e+52+4>>2];o[t+8>>2]=o[e+52+8>>2];o[t+12>>2]=o[e+52+12>>2];o[i>>2]=o[e+68>>2];o[i+4>>2]=o[e+68+4>>2];o[i+8>>2]=o[e+68+8>>2];o[i+12>>2]=o[e+68+12>>2];return}function uv(e){e=e|0;var t=0;o[e>>2]=6624;t=o[e+156>>2]|0;if(t|0){if(n[e+160>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+156>>2]=0}n[e+160>>0]=1;o[e+156>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;t=o[e+136>>2]|0;if(t|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;t=o[e+116>>2]|0;if(t|0){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+116>>2]=0}n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;t=o[e+96>>2]|0;if(t|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;o[e>>2]=6556;t=o[e+32>>2]|0;if(!t){n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;e=e+28|0;o[e>>2]=0;return}if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0;n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;e=e+28|0;o[e>>2]=0;return}function bv(e){e=e|0;uv(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function dv(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0;if(n[e+165>>0]|0){if((o[e+92>>2]|0)>=(t|0))return;if((t|0)!=0?(o[5637]=(o[5637]|0)+1,i=Qa((t<<4|3)+16|0)|0,(i|0)!=0):0){o[(i+4+15&-16)+-4>>2]=i;_=i+4+15&-16}else _=0;i=o[e+88>>2]|0;if((i|0)>0){r=0;do{a=_+(r<<4)|0;s=(o[e+96>>2]|0)+(r<<4)|0;o[a>>2]=o[s>>2];o[a+4>>2]=o[s+4>>2];o[a+8>>2]=o[s+8>>2];o[a+12>>2]=o[s+12>>2];r=r+1|0}while((r|0)!=(i|0))}i=o[e+96>>2]|0;if(i|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=_;o[e+92>>2]=t;return}if((o[e+112>>2]|0)>=(t|0))return;if((t|0)!=0?(o[5637]=(o[5637]|0)+1,r=Qa((t<<2|3)+16|0)|0,(r|0)!=0):0){o[(r+4+15&-16)+-4>>2]=r;s=r+4+15&-16}else s=0;r=o[e+108>>2]|0;_=o[e+116>>2]|0;if((r|0)<=0)if(!_)i=e+120|0;else a=21;else{i=0;do{o[s+(i<<2)>>2]=o[_+(i<<2)>>2];i=i+1|0}while((i|0)!=(r|0));a=21}if((a|0)==21){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+116>>2]=0;i=e+120|0}n[i>>0]=1;o[e+116>>2]=s;o[e+112>>2]=t;return}function hv(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0,c=0;if(!(n[e+164>>0]|0)){if((o[e+152>>2]|0)>=(t|0))return;if((t|0)!=0?(o[5637]=(o[5637]|0)+1,_=Qa((t<<1)+19|0)|0,(_|0)!=0):0){o[(_+4+15&-16)+-4>>2]=_;a=_+4+15&-16}else a=0;_=o[e+148>>2]|0;s=o[e+156>>2]|0;if((_|0)<=0)if(!s)i=e+160|0;else c=22;else{i=0;do{r[a+(i<<1)>>1]=r[s+(i<<1)>>1]|0;i=i+1|0}while((i|0)!=(_|0));c=22}if((c|0)==22){if(n[e+160>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+156>>2]=0;i=e+160|0}n[i>>0]=1;o[e+156>>2]=a;o[e+152>>2]=t;return}else{if((o[e+132>>2]|0)>=(t|0))return;if((t|0)!=0?(o[5637]=(o[5637]|0)+1,i=Qa((t<<2|3)+16|0)|0,(i|0)!=0):0){o[(i+4+15&-16)+-4>>2]=i;a=i+4+15&-16}else a=0;_=o[e+128>>2]|0;s=o[e+136>>2]|0;if((_|0)<=0)if(!s)i=e+140|0;else c=10;else{i=0;do{o[a+(i<<2)>>2]=o[s+(i<<2)>>2];i=i+1|0}while((i|0)!=(_|0));c=10}if((c|0)==10){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+136>>2]=0;i=e+140|0}n[i>>0]=1;o[e+136>>2]=a;o[e+132>>2]=t;return}}function mv(e,t,i){e=e|0;t=t|0;i=i|0;var _=0,s=0,a=0;o[e+4>>2]=1065353216;o[e+8>>2]=1065353216;o[e+12>>2]=1065353216;c[e+16>>2]=0;n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;o[e+48>>2]=0;o[e>>2]=6624;n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;n[e+160>>0]=1;o[e+156>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;n[e+164>>0]=t&1;n[e+165>>0]=i&1;c[e+168>>2]=0;o[5637]=(o[5637]|0)+1;t=Qa(51)|0;if(!t)_=0;else{o[(t+4+15&-16)+-4>>2]=t;_=t+4+15&-16}t=o[e+24>>2]|0;if((t|0)>0){i=0;do{s=_+(i<<5)|0;a=(o[e+32>>2]|0)+(i<<5)|0;o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];o[s+16>>2]=o[a+16>>2];o[s+20>>2]=o[a+20>>2];o[s+24>>2]=o[a+24>>2];o[s+28>>2]=o[a+28>>2];i=i+1|0}while((i|0)!=(t|0))}t=o[e+32>>2]|0;if(t|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=_;o[e+28>>2]=1;t=o[e+24>>2]|0;o[_+(t<<5)>>2]=0;o[_+(t<<5)+4>>2]=0;o[_+(t<<5)+8>>2]=12;o[_+(t<<5)+12>>2]=0;o[_+(t<<5)+16>>2]=0;o[_+(t<<5)+20>>2]=16;o[_+(t<<5)+24>>2]=2;o[_+(t<<5)+28>>2]=0;o[e+24>>2]=(o[e+24>>2]|0)+1;t=r[e+164>>1]|0;if(!((t&255)<<24>>24)){i=o[e+32>>2]|0;o[i>>2]=(o[e+148>>2]|0)/3|0;o[i+4>>2]=0;o[i+24>>2]=3;o[i+8>>2]=6}else{i=o[e+32>>2]|0;o[i>>2]=(o[e+128>>2]|0)/3|0;o[i+4>>2]=0;o[i+24>>2]=2;o[i+8>>2]=12}if((t&65535)<256){s=12;e=(o[e+108>>2]|0)/3|0;a=i+12|0;o[a>>2]=e;a=i+16|0;o[a>>2]=0;a=i+20|0;o[a>>2]=s;return}else{s=16;e=o[e+88>>2]|0;a=i+12|0;o[a>>2]=e;a=i+16|0;o[a>>2]=0;a=i+20|0;o[a>>2]=s;return}}function yv(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0,c=0,f=0;if(!(n[e+164>>0]|0)){i=o[e+148>>2]|0;if((i|0)==(o[e+152>>2]|0)?(f=i|0?i<<1:1,(i|0)<(f|0)):0){if(!f)a=0;else{o[5637]=(o[5637]|0)+1;i=Qa((f<<1)+19|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}a=i;i=o[e+148>>2]|0}s=o[e+156>>2]|0;if((i|0)<=0)if(!s)i=e+160|0;else _=27;else{_=0;do{r[a+(_<<1)>>1]=r[s+(_<<1)>>1]|0;_=_+1|0}while((_|0)!=(i|0));_=27}if((_|0)==27){if(n[e+160>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+156>>2]=0;i=e+160|0}n[i>>0]=1;o[e+156>>2]=a;o[e+152>>2]=f;i=o[e+148>>2]|0}f=o[e+156>>2]|0;r[f+(i<<1)>>1]=t;o[e+148>>2]=i+1;o[(o[e+32>>2]|0)+4>>2]=f;return}else{i=o[e+128>>2]|0;if((i|0)==(o[e+132>>2]|0)?(c=i|0?i<<1:1,(i|0)<(c|0)):0){if(!c)a=0;else{o[5637]=(o[5637]|0)+1;i=Qa((c<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}a=i;i=o[e+128>>2]|0}s=o[e+136>>2]|0;if((i|0)<=0)if(!s)i=e+140|0;else _=12;else{_=0;do{o[a+(_<<2)>>2]=o[s+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0));_=12}if((_|0)==12){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+136>>2]=0;i=e+140|0}n[i>>0]=1;o[e+136>>2]=a;o[e+132>>2]=c;i=o[e+128>>2]|0}f=o[e+136>>2]|0;o[f+(i<<2)>>2]=t;o[e+128>>2]=(o[e+128>>2]|0)+1;o[(o[e+32>>2]|0)+4>>2]=f;return}}function gv(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0;if(n[e+165>>0]|0){r=o[e+88>>2]|0;e:do if((r|0)>0&i){_=o[e+96>>2]|0;l=+c[t>>2];a=+c[t+4>>2];f=+c[t+8>>2];p=+c[e+168>>2];i=0;while(1){m=+c[_+(i<<4)>>2]-l;h=+c[_+(i<<4)+4>>2]-a;d=+c[_+(i<<4)+8>>2]-f;if(m*m+h*h+d*d<=p)break;i=i+1|0;if((i|0)>=(r|0))break e}return i|0}while(0);b=(o[e+32>>2]|0)+12|0;o[b>>2]=(o[b>>2]|0)+1;if((r|0)==(o[e+92>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[e+88>>2]|0}if((r|0)>0){_=0;do{b=i+(_<<4)|0;u=(o[e+96>>2]|0)+(_<<4)|0;o[b>>2]=o[u>>2];o[b+4>>2]=o[u+4>>2];o[b+8>>2]=o[u+8>>2];o[b+12>>2]=o[u+12>>2];_=_+1|0}while((_|0)!=(r|0))}r=o[e+96>>2]|0;if(r|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=i;o[e+92>>2]=s;i=o[e+88>>2]|0}else i=r;b=(o[e+96>>2]|0)+(i<<4)|0;o[b>>2]=o[t>>2];o[b+4>>2]=o[t+4>>2];o[b+8>>2]=o[t+8>>2];o[b+12>>2]=o[t+12>>2];t=o[e+88>>2]|0;o[e+88>>2]=t+1;o[(o[e+32>>2]|0)+16>>2]=o[e+96>>2];return t|0}_=o[e+108>>2]|0;e:do if((_|0)>0&i){i=o[e+116>>2]|0;a=+c[t>>2];f=+c[t+4>>2];p=+c[t+8>>2];l=+c[e+168>>2];s=0;while(1){d=+c[i+(s<<2)>>2]-a;h=+c[i+(s+1<<2)>>2]-f;m=+c[i+(s+2<<2)>>2]-p;r=s+3|0;if(d*d+h*h+m*m<=l)break;if((r|0)<(_|0))s=r;else break e}t=(s|0)/3|0;return t|0}while(0);i=o[e+112>>2]|0;if((_|0)==(i|0)){u=_|0?_<<1:1;if((_|0)<(u|0)){if(!u)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((u<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+108>>2]|0}s=o[e+116>>2]|0;if((_|0)<=0)if(!s)r=e+120|0;else b=34;else{r=0;do{o[i+(r<<2)>>2]=o[s+(r<<2)>>2];r=r+1|0}while((r|0)!=(_|0));b=34}if((b|0)==34){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+116>>2]=0;r=e+120|0}n[r>>0]=1;o[e+116>>2]=i;o[e+112>>2]=u;r=o[e+108>>2]|0;_=u}else r=_}else{r=_;_=i}o[(o[e+116>>2]|0)+(r<<2)>>2]=o[t>>2];i=r+1|0;o[e+108>>2]=i;if((i|0)==(_|0)){u=_|0?_<<1:1;if((_|0)<(u|0)){if(!u)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((u<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+108>>2]|0}s=o[e+116>>2]|0;if((_|0)<=0)if(!s)r=e+120|0;else b=48;else{r=0;do{o[i+(r<<2)>>2]=o[s+(r<<2)>>2];r=r+1|0}while((r|0)!=(_|0));b=48}if((b|0)==48){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+116>>2]=0;r=e+120|0}n[r>>0]=1;o[e+116>>2]=i;o[e+112>>2]=u;i=o[e+108>>2]|0;_=u}else i=_}o[(o[e+116>>2]|0)+(i<<2)>>2]=o[t+4>>2];i=i+1|0;o[e+108>>2]=i;if((i|0)==(_|0)){u=_|0?_<<1:1;if((_|0)<(u|0)){if(!u)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((u<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+108>>2]|0}s=o[e+116>>2]|0;if((_|0)<=0)if(!s)r=e+120|0;else b=62;else{r=0;do{o[i+(r<<2)>>2]=o[s+(r<<2)>>2];r=r+1|0}while((r|0)!=(_|0));b=62}if((b|0)==62){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+116>>2]=0;r=e+120|0}n[r>>0]=1;o[e+116>>2]=i;o[e+112>>2]=u;i=o[e+108>>2]|0}else i=_}b=o[e+116>>2]|0;o[b+(i<<2)>>2]=o[t+8>>2];t=i+1|0;o[e+108>>2]=t;e=o[e+32>>2]|0;o[e+12>>2]=(o[e+12>>2]|0)+1;o[e+16>>2]=b;t=((t|0)/3|0)+-1|0;return t|0}function vv(e){e=e|0;return}function Cv(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function wv(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;b=(+c[e+36>>2]-+c[e+20>>2])*.5;p=(+c[e+40>>2]-+c[e+24>>2])*.5;s=(+c[e+44>>2]-+c[e+28>>2])*.5;u=+wP[o[(o[e>>2]|0)+48>>2]&15](e);f=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=s+ +wP[o[(o[e>>2]|0)+48>>2]&15](e);I=(+c[e+36>>2]+ +c[e+20>>2])*.5;R=(+c[e+40>>2]+ +c[e+24>>2])*.5;k=(+c[e+44>>2]+ +c[e+28>>2])*.5;L=+c[t>>2];w=+N(+L);O=+c[t+4>>2];C=+N(+O);g=+c[t+8>>2];v=+N(+g);D=+c[t+16>>2];y=+N(+D);T=+c[t+20>>2];m=+N(+T);d=+c[t+24>>2];h=+N(+d);j=+c[t+32>>2];l=+N(+j);S=+c[t+36>>2];a=+N(+S);r=+c[t+40>>2];_=+N(+r);g=I*L+R*O+k*g+ +c[t+48>>2];d=I*D+R*T+k*d+ +c[t+52>>2];r=I*j+R*S+k*r+ +c[t+56>>2];c[i>>2]=g-((b+u)*w+(p+f)*C+s*v);c[i+4>>2]=d-((b+u)*y+(p+f)*m+s*h);c[i+8>>2]=r-((b+u)*l+(p+f)*a+s*_);c[i+12>>2]=0;c[n>>2]=(b+u)*w+(p+f)*C+s*v+g;c[n+4>>2]=(b+u)*y+(p+f)*m+s*h+d;c[n+8>>2]=(b+u)*l+(p+f)*a+s*_+r;c[n+12>>2]=0;return}function kv(e,t){e=e|0;t=t|0;var i=0,n=0;i=p;p=p+48|0;n=(o[e+52>>2]|0)+4|0;o[n>>2]=o[t>>2];o[n+4>>2]=o[t+4>>2];o[n+8>>2]=o[t+8>>2];o[n+12>>2]=o[t+12>>2];o[i+32>>2]=0;o[i+32+4>>2]=0;o[i+32+8>>2]=0;o[i+32+12>>2]=0;c[i+32>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](i+16|0,e,i+32|0);c[e+36>>2]=+c[i+16>>2]+ +c[e+16>>2];c[i+32>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](i,e,i+32|0);o[i+16>>2]=o[i>>2];o[i+16+4>>2]=o[i+4>>2];o[i+16+8>>2]=o[i+8>>2];o[i+16+12>>2]=o[i+12>>2];c[e+20>>2]=+c[i+16>>2]-+c[e+16>>2];o[i+32>>2]=0;o[i+32+4>>2]=0;o[i+32+8>>2]=0;o[i+32+12>>2]=0;c[i+32+4>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](i+16|0,e,i+32|0);c[e+40>>2]=+c[i+16+4>>2]+ +c[e+16>>2];c[i+32+4>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](i,e,i+32|0);o[i+16>>2]=o[i>>2];o[i+16+4>>2]=o[i+4>>2];o[i+16+8>>2]=o[i+8>>2];o[i+16+12>>2]=o[i+12>>2];c[e+24>>2]=+c[i+16+4>>2]-+c[e+16>>2];o[i+32>>2]=0;o[i+32+4>>2]=0;o[i+32+8>>2]=0;o[i+32+12>>2]=0;c[i+32+8>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](i+16|0,e,i+32|0);c[e+44>>2]=+c[i+16+8>>2]+ +c[e+16>>2];c[i+32+8>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](i,e,i+32|0);o[i+16>>2]=o[i>>2];o[i+16+4>>2]=o[i+4>>2];o[i+16+8>>2]=o[i+8>>2];o[i+16+12>>2]=o[i+12>>2];c[e+28>>2]=+c[i+16+8>>2]-+c[e+16>>2];p=i;return}function Sv(e){e=e|0;return(o[e+52>>2]|0)+4|0}function Rv(e,t,i){e=e|0;t=+t;i=i|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;return}function jv(e){e=e|0;return 14302}function Iv(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=p;p=p+48|0;o[r>>2]=6776;o[r+4>>2]=t;o[r+8>>2]=o[i>>2];o[r+8+4>>2]=o[i+4>>2];o[r+8+8>>2]=o[i+8>>2];o[r+8+12>>2]=o[i+12>>2];o[r+24>>2]=o[n>>2];o[r+24+4>>2]=o[n+4>>2];o[r+24+8>>2]=o[n+8>>2];o[r+24+12>>2]=o[n+12>>2];e=o[e+52>>2]|0;HP[o[(o[e>>2]|0)+8>>2]&127](e,r,i,n);p=r;return}function Tv(e){e=e|0;qa(e);return}function Dv(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0;r=+c[t>>2];_=+c[t+16>>2];a=r<_?r:_;s=+c[t+32>>2];if((a<s?a:s)>+c[e+24>>2])return;f=r>_?t:t+16|0;if(+c[(+c[f>>2]>s?f:t+32|0)>>2]<+c[e+8>>2])return;r=+c[t+8>>2];_=+c[t+24>>2];a=r<_?r:_;s=+c[t+40>>2];if((a<s?a:s)>+c[e+32>>2])return;f=r>_?t+8|0:t+24|0;if(+c[(+c[f>>2]>s?f:t+40|0)>>2]<+c[e+16>>2])return;r=+c[t+4>>2];_=+c[t+20>>2];a=r<_?r:_;s=+c[t+36>>2];if((a<s?a:s)>+c[e+28>>2])return;f=r>_?t+4|0:t+20|0;if(+c[(+c[f>>2]>s?f:t+36|0)>>2]<+c[e+12>>2])return;f=o[e+4>>2]|0;HP[o[(o[f>>2]|0)+8>>2]&127](f,t,i,n);return}function Ov(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=p;p=p+160|0;o[n+136>>2]=0;o[n+136+4>>2]=0;o[n+136+8>>2]=0;o[n+136+12>>2]=0;o[n+136+16>>2]=0;o[n+32>>2]=6796;r=n+32+4|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[n+32+20>>2]=1065353216;o[n+32+24>>2]=0;o[n+32+24+4>>2]=0;o[n+32+24+8>>2]=0;o[n+32+24+12>>2]=0;o[n+32+40>>2]=1065353216;o[n+32+44>>2]=0;o[n+32+44+4>>2]=0;o[n+32+44+8>>2]=0;o[n+32+44+12>>2]=0;o[n+32+60>>2]=1065353216;o[n+32+64>>2]=0;o[n+32+68>>2]=o[n+136+4>>2];o[n+32+68+4>>2]=o[n+136+4+4>>2];o[n+32+68+8>>2]=o[n+136+4+8>>2];o[n+32+68+12>>2]=o[n+136+4+12>>2];c[n+32+84>>2]=-0xde0b6b000000000;a=+c[i>>2];s=+c[i+4>>2];_=+c[i+8>>2];c[n+32+88>>2]=a+s*0+_*0;c[n+32+92>>2]=a*0+s+_*0;c[n+32+96>>2]=a*0+s*0+_;c[n+32+100>>2]=0;o[n+16>>2]=1566444395;o[n+16+4>>2]=1566444395;o[n+16+8>>2]=1566444395;c[n+16+12>>2]=0;i=o[(o[t>>2]|0)+64>>2]|0;c[n>>2]=-0xde0b6b000000000;c[n+4>>2]=-0xde0b6b000000000;c[n+8>>2]=-0xde0b6b000000000;c[n+12>>2]=0;HP[i&127](t,n+32|0,n,n+16|0);o[e>>2]=o[r>>2];o[e+4>>2]=o[r+4>>2];o[e+8>>2]=o[r+8>>2];o[e+12>>2]=o[r+12>>2];p=n;return}function Lv(e){e=e|0;qa(e);return}function xv(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0;a=+c[e+88>>2];f=+c[e+92>>2];s=+c[e+96>>2];r=a*+c[t>>2]+f*+c[t+4>>2]+s*+c[t+8>>2];_=+c[e+84>>2];if(r>_){c[e+84>>2]=r;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2]}else r=_;_=a*+c[t+16>>2]+f*+c[t+20>>2]+s*+c[t+24>>2];if(_>r){c[e+84>>2]=_;o[e+4>>2]=o[t+16>>2];o[e+4+4>>2]=o[t+16+4>>2];o[e+4+8>>2]=o[t+16+8>>2];o[e+4+12>>2]=o[t+16+12>>2]}else _=r;r=a*+c[t+32>>2]+f*+c[t+36>>2]+s*+c[t+40>>2];if(!(r>_))return;c[e+84>>2]=r;o[e+4>>2]=o[t+32>>2];o[e+4+4>>2]=o[t+32+4>>2];o[e+4+8>>2]=o[t+32+8>>2];o[e+4+12>>2]=o[t+32+12>>2];return}function Mv(e){e=e|0;qa(e);return}function Pv(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0;T=p;p=p+304|0;I=+c[i+48>>2]-+c[t+48>>2];R=+c[i+52>>2]-+c[t+52>>2];j=+c[i+56>>2]-+c[t+56>>2];Yw(t,i,T+288|0,T+240|0);C=+c[T+240>>2];g=+c[T+288>>2]*C;v=C*+c[T+288+4>>2];C=C*+c[T+288+8>>2];c[T+224>>2]=g;c[T+224+4>>2]=v;c[T+224+8>>2]=C;c[T+224+12>>2]=0;w=+c[_+48>>2]-+c[r+48>>2];k=+c[_+52>>2]-+c[r+52>>2];S=+c[_+56>>2]-+c[r+56>>2];Yw(r,_,T+288|0,T+240|0);m=+c[T+240>>2];d=+c[T+288>>2]*m;h=m*+c[T+288+4>>2];m=m*+c[T+288+8>>2];c[T+192>>2]=d;c[T+192+4>>2]=h;c[T+192+8>>2]=m;c[T+192+12>>2]=0;i=o[e+12>>2]|0;y=+wP[o[(o[i>>2]|0)+16>>2]&15](i);i=o[e+16>>2]|0;if(!i)f=0;else f=+wP[o[(o[i>>2]|0)+16>>2]&15](i);y=y*+X(+(g*g+v*v+C*C))+f*+X(+(d*d+h*h+m*m));if(y+ +X(+((w-I)*(w-I)+(k-R)*(k-R)+(S-j)*(S-j)))==0){s=0;p=T;return s|0}o[T+240>>2]=6836;c[T+240+36>>2]=0xde0b6b000000000;n[T+240+40>>0]=0;Gv(e,t,r,T+240|0);_=(n[T+240+40>>0]|0)==0;o[T+288>>2]=o[T+240+20>>2];o[T+288+4>>2]=o[T+240+20+4>>2];o[T+288+8>>2]=o[T+240+20+8>>2];o[T+288+12>>2]=o[T+240+20+12>>2];e:do if(!_?(b=o[T+240+4>>2]|0,a=o[T+240+8>>2]|0,l=o[T+240+12>>2]|0,C=(w-I)*(o[u>>2]=b,+c[u>>2]),C=C+(k-R)*(o[u>>2]=a,+c[u>>2]),!(y+(C+(S-j)*(o[u>>2]=l,+c[u>>2]))<=1.1920928955078125e-7)):0){f=+c[T+240+16>>2];d=+c[T+240+36>>2]+ +c[s+172>>2];t:do if(d>.0010000000474974513){h=d;m=0;_=0;while(1){i=o[s+168>>2]|0;if(i|0){D=o[(o[i>>2]|0)+28>>2]|0;o[T+208>>2]=1065353216;o[T+208+4>>2]=1065353216;o[T+208+8>>2]=1065353216;c[T+208+12>>2]=0;pP[D&7](i,T+288|0,.20000000298023224,T+208|0)}f=(w-I)*(o[u>>2]=b,+c[u>>2]);f=f+(k-R)*(o[u>>2]=a,+c[u>>2]);f=y+(f+(S-j)*(o[u>>2]=l,+c[u>>2]));if(f<=1.1920928955078125e-7){a=0;break e}d=m+h/f;if(!(!(d<=m)&(!(d<0)&!(d>1)))){a=0;break e}Ev(t,I,R,j,T+224|0,d,T+112|0);Ev(r,w,k,S,T+192|0,d,T+48|0);a=o[s+168>>2]|0;if(a|0){D=o[(o[a>>2]|0)+28>>2]|0;o[T+176>>2]=1065353216;o[T+176+4>>2]=0;o[T+176+8>>2]=0;c[T+176+12>>2]=0;pP[D&7](a,T+112+48|0,.20000000298023224,T+176|0)}oP[o[o[s>>2]>>2]&31](s,d);o[T>>2]=6836;c[T+36>>2]=0xde0b6b000000000;n[T+40>>0]=0;Gv(e,T+112|0,T+48|0,T);if(!(n[T+40>>0]|0)){a=15;break}f=+c[T+36>>2];h=+c[s+172>>2];o[T+288>>2]=o[T+20>>2];o[T+288+4>>2]=o[T+20+4>>2];o[T+288+8>>2]=o[T+20+8>>2];o[T+288+12>>2]=o[T+20+12>>2];i=_+1|0;if((_|0)>63){a=16;break}l=o[T+12>>2]|0;a=o[T+8>>2]|0;b=o[T+4>>2]|0;h=f+h;if(!(h>.0010000000474974513)){f=+c[T+16>>2];break t}else{m=d;_=i}}if((a|0)==15)EP[o[(o[s>>2]|0)+8>>2]&127](s,-1,_);else if((a|0)==16)EP[o[(o[s>>2]|0)+8>>2]&127](s,-2,i);a=0;break e}else d=0;while(0);c[s+164>>2]=d;o[s+132>>2]=b;o[s+136>>2]=a;o[s+140>>2]=l;c[s+144>>2]=f;o[s+148>>2]=o[T+288>>2];o[s+148+4>>2]=o[T+288+4>>2];o[s+148+8>>2]=o[T+288+8>>2];o[s+148+12>>2]=o[T+288+12>>2];a=1}else a=0;while(0);D=a;p=T;return D|0}function Wv(e){e=e|0;qa(e);return}function Bv(e,t,i){e=e|0;t=t|0;i=i|0;return}function Av(e,t,i){e=e|0;t=t|0;i=i|0;return}function Fv(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;if(!(+c[e+36>>2]>r))return;n[e+40>>0]=1;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[i>>2];o[e+20+4>>2]=o[i+4>>2];o[e+20+8>>2]=o[i+8>>2];o[e+20+12>>2]=o[i+12>>2];c[e+36>>2]=r;return}function Gv(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0;_=p;p=p+256|0;if(!(o[e+16>>2]|0)){B=o[e+12>>2]|0;e=o[e+20>>2]|0;u=+c[t>>2];h=+c[t+4>>2];v=+c[t+8>>2];a=+c[t+16>>2];m=+c[t+20>>2];s=+c[t+24>>2];l=+c[t+32>>2];y=+c[t+36>>2];f=+c[t+40>>2];L=+c[t+48>>2];O=+c[t+52>>2];D=+c[t+56>>2];W=+c[i>>2];P=+c[i+16>>2];S=+c[i+32>>2];M=+c[i+4>>2];x=+c[i+20>>2];w=+c[i+36>>2];C=+c[i+8>>2];R=+c[i+24>>2];k=+c[i+40>>2];T=-+c[i+48>>2];I=-+c[i+52>>2];d=-+c[i+56>>2];t=o[(o[B>>2]|0)+64>>2]|0;j=-+c[e+52>>2];g=-+c[e+56>>2];b=-+c[e+60>>2];c[_+16>>2]=(u*W+a*P+l*S)*j+(u*M+a*x+l*w)*g+(u*C+a*R+l*k)*b;c[_+16+4>>2]=(h*W+m*P+y*S)*j+(h*M+m*x+y*w)*g+(h*C+m*R+y*k)*b;c[_+16+8>>2]=(v*W+s*P+f*S)*j+(v*M+s*x+f*w)*g+(v*C+s*R+f*k)*b;c[_+16+12>>2]=0;EP[t&127](_+168|0,B,_+16|0);b=+c[_+168>>2];g=+c[_+168+4>>2];j=+c[_+168+8>>2];S=L*W+O*P+D*S+(W*T+P*I+S*d)+((u*W+a*P+l*S)*b+(h*W+m*P+y*S)*g+(v*W+s*P+f*S)*j);w=L*M+O*x+D*w+(M*T+x*I+w*d)+((u*M+a*x+l*w)*b+(h*M+m*x+y*w)*g+(v*M+s*x+f*w)*j);j=L*C+O*R+D*k+(C*T+R*I+k*d)+((u*C+a*R+l*k)*b+(h*C+m*R+y*k)*g+(v*C+s*R+f*k)*j);k=+c[e+52>>2];f=+c[e+56>>2];R=+c[e+60>>2];s=R*j+(k*S+f*w)-+c[e+68>>2];C=+c[i>>2];v=+c[i+4>>2];g=+c[i+8>>2];y=+c[i+16>>2];m=+c[i+20>>2];h=+c[i+24>>2];b=+c[i+32>>2];l=+c[i+36>>2];a=+c[i+40>>2];u=(S-k*s)*y+(w-f*s)*m+(j-R*s)*h+ +c[i+52>>2];d=(S-k*s)*b+(w-f*s)*l+(j-R*s)*a+ +c[i+56>>2];c[_+32>>2]=g*(j-R*s)+(C*(S-k*s)+v*(w-f*s))+ +c[i+48>>2];c[_+32+4>>2]=u;c[_+32+8>>2]=d;c[_+32+12>>2]=0;d=+c[e+52>>2];u=+c[e+56>>2];f=+c[e+60>>2];c[_>>2]=C*d+v*u+g*f;c[_+4>>2]=d*y+u*m+f*h;c[_+8>>2]=d*b+u*l+f*a;c[_+12>>2]=0;GP[o[(o[r>>2]|0)+16>>2]&15](r,_,_+32|0,s);p=_;return}else{G=o[e+4>>2]|0;n[G+312>>0]=0;o[G>>2]=0;n[G+356>>0]=1;o[G+292>>2]=1566444395;o[G+296>>2]=1566444395;o[G+300>>2]=1566444395;c[G+304>>2]=0;o[G+336>>2]=0;o[G+336+4>>2]=0;o[G+336+8>>2]=0;o[G+336+12>>2]=0;n[G+336+16>>0]=0;n[G+332>>0]=n[G+332>>0]&-16;G=o[e+12>>2]|0;F=o[e+16>>2]|0;A=o[G+4>>2]|0;B=o[F+4>>2]|0;P=+wP[o[(o[G>>2]|0)+48>>2]&15](G);E=o[e+16>>2]|0;W=+wP[o[(o[E>>2]|0)+48>>2]&15](E);E=o[e+4>>2]|0;e=o[e+8>>2]|0;o[_+168>>2]=6928;o[_+168+4>>2]=0;o[_+168+8>>2]=1065353216;o[_+168+12>>2]=0;c[_+168+16>>2]=0;o[_+168+20>>2]=e;o[_+168+24>>2]=E;o[_+168+28>>2]=G;o[_+168+32>>2]=F;o[_+168+36>>2]=A;o[_+168+40>>2]=B;c[_+168+44>>2]=P;c[_+168+48>>2]=W;n[_+168+52>>0]=0;o[_+168+60>>2]=-1;o[_+168+72>>2]=1;o[_+168+76>>2]=1;c[_+32+128>>2]=0xde0b6b000000000;o[_+32>>2]=o[t>>2];o[_+32+4>>2]=o[t+4>>2];o[_+32+8>>2]=o[t+8>>2];o[_+32+12>>2]=o[t+12>>2];o[_+32+16>>2]=o[t+16>>2];o[_+32+16+4>>2]=o[t+16+4>>2];o[_+32+16+8>>2]=o[t+16+8>>2];o[_+32+16+12>>2]=o[t+16+12>>2];o[_+32+32>>2]=o[t+32>>2];o[_+32+32+4>>2]=o[t+32+4>>2];o[_+32+32+8>>2]=o[t+32+8>>2];o[_+32+32+12>>2]=o[t+32+12>>2];o[_+32+48>>2]=o[t+48>>2];o[_+32+48+4>>2]=o[t+48+4>>2];o[_+32+48+8>>2]=o[t+48+8>>2];o[_+32+48+12>>2]=o[t+48+12>>2];o[_+32+64>>2]=o[i>>2];o[_+32+64+4>>2]=o[i+4>>2];o[_+32+64+8>>2]=o[i+8>>2];o[_+32+64+12>>2]=o[i+12>>2];o[_+32+80>>2]=o[i+16>>2];o[_+32+80+4>>2]=o[i+16+4>>2];o[_+32+80+8>>2]=o[i+16+8>>2];o[_+32+80+12>>2]=o[i+16+12>>2];o[_+32+96>>2]=o[i+32>>2];o[_+32+96+4>>2]=o[i+32+4>>2];o[_+32+96+8>>2]=o[i+32+8>>2];o[_+32+96+12>>2]=o[i+32+12>>2];o[_+32+112>>2]=o[i+48>>2];o[_+32+112+4>>2]=o[i+48+4>>2];o[_+32+112+8>>2]=o[i+48+8>>2];o[_+32+112+12>>2]=o[i+48+12>>2];nC(_+168|0,_+32|0,r,0,0);p=_;return}}function Ev(e,t,i,n,r,o,_){e=e|0;t=+t;i=+i;n=+n;r=r|0;o=+o;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;f=p;p=p+16|0;a=i*o+ +c[e+52>>2];s=n*o+ +c[e+56>>2];c[_+48>>2]=t*o+ +c[e+48>>2];c[_+52>>2]=a;c[_+56>>2]=s;c[_+60>>2]=0;s=+c[r>>2];a=+c[r+4>>2];i=+c[r+8>>2];n=+X(+(s*s+a*a+i*i));n=n*o>.7853981852531433?.7853981852531433/o:n;if(n<.0010000000474974513)t=o*.5-n*(o*o*o*.02083333395421505*n);else t=+U(+(n*.5*o))/n;b=s*t;u=a*t;s=i*t;h=+Z(+(n*o*.5));Kw(e,f);t=+c[f>>2];d=+c[f+12>>2];i=+c[f+8>>2];o=+c[f+4>>2];m=1/+X(+((h*d-b*t-u*o-s*i)*(h*d-b*t-u*o-s*i)+((s*d+h*i+b*o-u*t)*(s*d+h*i+b*o-u*t)+((h*t+b*d+u*i-s*o)*(h*t+b*d+u*i-s*o)+(s*t+(u*d+h*o)-b*i)*(s*t+(u*d+h*o)-b*i)))));n=(h*t+b*d+u*i-s*o)*m;a=m*(s*t+(u*d+h*o)-b*i);l=m*(s*d+h*i+b*o-u*t);i=m*(h*d-b*t-u*o-s*i);s=n*(2/(i*i+(l*l+(n*n+a*a))));o=a*(2/(i*i+(l*l+(n*n+a*a))));t=l*(2/(i*i+(l*l+(n*n+a*a))));c[_>>2]=1-(a*o+l*t);c[_+4>>2]=n*o-i*t;c[_+8>>2]=n*t+i*o;c[_+12>>2]=0;c[_+16>>2]=n*o+i*t;c[_+20>>2]=1-(n*s+l*t);c[_+24>>2]=a*t-i*s;c[_+28>>2]=0;c[_+32>>2]=n*t-i*o;c[_+36>>2]=a*t+i*s;c[_+40>>2]=1-(n*s+a*o);c[_+44>>2]=0;p=f;return}function Vv(e){e=e|0;return}function Nv(e){e=e|0;qa(e);return}function Xv(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;v=p;p=p+288|0;h=o[e+4>>2]|0;n[h+312>>0]=0;o[h>>2]=0;n[h+356>>0]=1;o[h+292>>2]=1566444395;o[h+296>>2]=1566444395;o[h+300>>2]=1566444395;c[h+304>>2]=0;o[h+336>>2]=0;o[h+336+4>>2]=0;o[h+336+8>>2]=0;o[h+336+12>>2]=0;n[h+336+16>>0]=0;n[h+332>>0]=n[h+332>>0]&-16;m=+c[i+48>>2]-+c[t+48>>2]-(+c[_+48>>2]-+c[r+48>>2]);y=+c[i+52>>2]-+c[t+52>>2]-(+c[_+52>>2]-+c[r+52>>2]);g=+c[i+56>>2]-+c[t+56>>2]-(+c[_+56>>2]-+c[r+56>>2]);o[v+216>>2]=6836;c[v+216+36>>2]=0xde0b6b000000000;n[v+216+40>>0]=0;h=o[e+8>>2]|0;d=o[e+12>>2]|0;b=o[e+4>>2]|0;o[v+136>>2]=6928;o[v+136+4>>2]=0;o[v+136+8>>2]=1065353216;o[v+136+12>>2]=0;c[v+136+16>>2]=0;o[v+136+20>>2]=0;o[v+136+24>>2]=b;o[v+136+28>>2]=h;o[v+136+32>>2]=d;o[v+136+36>>2]=o[h+4>>2];o[v+136+40>>2]=o[d+4>>2];c[v+136+44>>2]=+wP[o[(o[h>>2]|0)+48>>2]&15](h);c[v+136+48>>2]=+wP[o[(o[d>>2]|0)+48>>2]&15](d);n[v+136+52>>0]=0;o[v+136+60>>2]=-1;o[v+136+72>>2]=1;o[v+136+76>>2]=1;c[v+128>>2]=0xde0b6b000000000;o[v>>2]=o[t>>2];o[v+4>>2]=o[t+4>>2];o[v+8>>2]=o[t+8>>2];o[v+12>>2]=o[t+12>>2];o[v+16>>2]=o[t+16>>2];o[v+16+4>>2]=o[t+16+4>>2];o[v+16+8>>2]=o[t+16+8>>2];o[v+16+12>>2]=o[t+16+12>>2];o[v+32>>2]=o[t+32>>2];o[v+32+4>>2]=o[t+32+4>>2];o[v+32+8>>2]=o[t+32+8>>2];o[v+32+12>>2]=o[t+32+12>>2];o[v+48>>2]=o[t+48>>2];o[v+48+4>>2]=o[t+48+4>>2];o[v+48+8>>2]=o[t+48+8>>2];o[v+48+12>>2]=o[t+48+12>>2];o[v+64>>2]=o[r>>2];o[v+64+4>>2]=o[r+4>>2];o[v+64+8>>2]=o[r+8>>2];o[v+64+12>>2]=o[r+12>>2];o[v+80>>2]=o[r+16>>2];o[v+80+4>>2]=o[r+16+4>>2];o[v+80+8>>2]=o[r+16+8>>2];o[v+80+12>>2]=o[r+16+12>>2];o[v+96>>2]=o[r+32>>2];o[v+96+4>>2]=o[r+32+4>>2];o[v+96+8>>2]=o[r+32+8>>2];o[v+96+12>>2]=o[r+32+12>>2];o[v+112>>2]=o[r+48>>2];o[v+112+4>>2]=o[r+48+4>>2];o[v+112+8>>2]=o[r+48+8>>2];o[v+112+12>>2]=o[r+48+12>>2];nC(v+136|0,v,v+216|0,0,0);d=(n[v+216+40>>0]|0)==0;h=v+216+20|0;o[v+264>>2]=o[h>>2];o[v+264+4>>2]=o[h+4>>2];o[v+264+8>>2]=o[h+8>>2];o[v+264+12>>2]=o[h+12>>2];if(d){s=0;p=v;return s|0}l=+c[v+216+36>>2];a=+c[v+216+16>>2];e=o[v+216+12>>2]|0;f=o[v+216+8>>2]|0;b=o[v+216+4>>2]|0;do if(l>.0010000000474974513){a=0;d=0;while(1){if((d|0)>31){e=0;d=13;break}w=m*(o[u>>2]=b,+c[u>>2]);w=y*(o[u>>2]=f,+c[u>>2])+w;C=a;a=a-l/(g*(o[u>>2]=e,+c[u>>2])+w);if(!(!(a<=C)&(!(a<0)&!(a>1)))){e=0;d=13;break}oP[o[o[s>>2]>>2]&31](s,a);w=1-a;c[v+48>>2]=w*+c[t+48>>2]+a*+c[i+48>>2];c[v+52>>2]=w*+c[t+52>>2]+a*+c[i+52>>2];c[v+56>>2]=w*+c[t+56>>2]+a*+c[i+56>>2];c[v+112>>2]=w*+c[r+48>>2]+a*+c[_+48>>2];c[v+116>>2]=w*+c[r+52>>2]+a*+c[_+52>>2];c[v+120>>2]=w*+c[r+56>>2]+a*+c[_+56>>2];nC(v+136|0,v,v+216|0,0,0);if(!(n[v+216+40>>0]|0)){e=0;d=13;break}l=+c[v+216+36>>2];if(l<0){d=8;break}o[v+264>>2]=o[h>>2];o[v+264+4>>2]=o[h+4>>2];o[v+264+8>>2]=o[h+8>>2];o[v+264+12>>2]=o[h+12>>2];e=o[v+216+12>>2]|0;f=o[v+216+8>>2]|0;b=o[v+216+4>>2]|0;if(!(l>.0010000000474974513)){d=10;break}else d=d+1|0}if((d|0)==8){c[s+164>>2]=a;r=o[v+216+8>>2]|0;i=o[v+216+12>>2]|0;_=o[v+216+16>>2]|0;o[s+132>>2]=o[v+216+4>>2];o[s+136>>2]=r;o[s+140>>2]=i;o[s+144>>2]=_;o[s+148>>2]=o[h>>2];o[s+148+4>>2]=o[h+4>>2];o[s+148+8>>2]=o[h+8>>2];o[s+148+12>>2]=o[h+12>>2];s=1;p=v;return s|0}else if((d|0)==10){l=a;a=+c[v+216+16>>2];break}else if((d|0)==13){p=v;return e|0}}else l=0;while(0);w=m*(o[u>>2]=b,+c[u>>2]);w=y*(o[u>>2]=f,+c[u>>2])+w;if(g*(o[u>>2]=e,+c[u>>2])+w>=-+c[s+172>>2]){s=0;p=v;return s|0}c[s+164>>2]=l;o[s+132>>2]=b;o[s+136>>2]=f;o[s+140>>2]=e;c[s+144>>2]=a;o[s+148>>2]=o[v+264>>2];o[s+148+4>>2]=o[v+264+4>>2];o[s+148+8>>2]=o[v+264+8>>2];o[s+148+12>>2]=o[v+264+12>>2];s=1;p=v;return s|0}function Hv(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;C=p;p=p+560|0;a=_;f=a+36|0;do{o[a>>2]=0;a=a+4|0}while((a|0)<(f|0));o[C+400>>2]=e;o[C+400+4>>2]=i;b=+c[n>>2];O=+c[t>>2];u=+c[n+16>>2];s=+c[t+16>>2];l=+c[n+32>>2];L=+c[t+32>>2];w=+c[t+4>>2];x=+c[t+20>>2];k=+c[t+36>>2];g=+c[t+8>>2];m=+c[t+24>>2];d=+c[t+40>>2];D=+c[n+4>>2];T=+c[n+20>>2];I=+c[n+36>>2];j=+c[n+8>>2];R=+c[n+24>>2];S=+c[n+40>>2];c[C+400+8>>2]=b*O+u*s+l*L;c[C+400+12>>2]=b*w+u*x+l*k;c[C+400+16>>2]=b*g+u*m+l*d;c[C+400+20>>2]=0;c[C+400+24>>2]=O*D+s*T+L*I;c[C+400+28>>2]=w*D+x*T+k*I;c[C+400+32>>2]=g*D+m*T+d*I;c[C+400+36>>2]=0;c[C+400+40>>2]=O*j+s*R+L*S;c[C+400+44>>2]=w*j+x*R+k*S;c[C+400+48>>2]=g*j+m*R+d*S;c[C+400+52>>2]=0;d=+c[n+48>>2]-+c[t+48>>2];m=+c[n+52>>2]-+c[t+52>>2];g=+c[n+56>>2]-+c[t+56>>2];k=+c[t>>2];x=+c[n>>2];w=+c[t+16>>2];L=+c[n+16>>2];s=+c[t+32>>2];O=+c[n+32>>2];l=+c[t+4>>2];u=+c[t+20>>2];b=+c[t+36>>2];h=+c[t+8>>2];y=+c[t+24>>2];v=+c[t+40>>2];c[C+400+56>>2]=k*x+w*L+s*O;c[C+400+60>>2]=k*D+w*T+s*I;c[C+400+64>>2]=k*j+w*R+s*S;c[C+400+68>>2]=0;c[C+400+72>>2]=x*l+L*u+O*b;c[C+400+76>>2]=D*l+T*u+I*b;c[C+400+80>>2]=j*l+R*u+S*b;c[C+400+84>>2]=0;c[C+400+88>>2]=x*h+L*y+O*v;c[C+400+92>>2]=D*h+T*y+I*v;c[C+400+96>>2]=j*h+R*y+S*v;c[C+400+100>>2]=0;c[C+400+104>>2]=d*k+m*w+g*s;c[C+400+108>>2]=d*l+m*u+g*b;c[C+400+112>>2]=d*h+m*y+g*v;c[C+400+116>>2]=0;o[C+400+120>>2]=71;o[C+400+124>>2]=0;o[C+16+364>>2]=0;o[C+16+128>>2]=0;o[C+16+128+4>>2]=0;o[C+16+128+8>>2]=0;o[C+16+128+12>>2]=0;o[C+16+376>>2]=2;o[C+16+368>>2]=0;c[C+16+144>>2]=0;r=Zv(C+16|0,C+400|0,r)|0;if(r|0){o[_>>2]=(r|0)==1?1:2;t=0;p=C;return t|0}r=o[C+16+372>>2]|0;if(!(o[r+32>>2]|0)){h=0;d=0;b=0;u=0;l=0;s=0}else{n=0;h=0;d=0;b=0;u=0;l=0;s=0;do{v=+c[r+16+(n<<2)>>2];e=o[C+400+120>>2]|0;f=o[C+400+124>>2]|0;i=(o[C+400>>2]|0)+(f>>1)|0;if(f&1)e=o[(o[i>>2]|0)+e>>2]|0;EP[e&127](C,i,o[r+(n<<2)>>2]|0);h=h+v*+c[C>>2];b=b+v*+c[C+4>>2];d=d+v*+c[C+8>>2];r=o[(o[C+16+372>>2]|0)+(n<<2)>>2]|0;m=-+c[r>>2];y=-+c[r+4>>2];g=-+c[r+8>>2];r=o[C+400+120>>2]|0;f=o[C+400+124>>2]|0;e=(o[C+400+4>>2]|0)+(f>>1)|0;if(f&1)r=o[(o[e>>2]|0)+r>>2]|0;L=+c[C+400+24>>2]*m+ +c[C+400+28>>2]*y+ +c[C+400+32>>2]*g;O=+c[C+400+40>>2]*m+ +c[C+400+44>>2]*y+ +c[C+400+48>>2]*g;c[C+528>>2]=+c[C+400+8>>2]*m+ +c[C+400+12>>2]*y+ +c[C+400+16>>2]*g;c[C+528+4>>2]=L;c[C+528+8>>2]=O;c[C+528+12>>2]=0;EP[r&127](C+544|0,e,C+528|0);O=+c[C+544>>2];L=+c[C+544+4>>2];x=+c[C+544+8>>2];u=u+v*(O*+c[C+400+56>>2]+L*+c[C+400+60>>2]+x*+c[C+400+64>>2]+ +c[C+400+104>>2]);s=s+v*(O*+c[C+400+72>>2]+L*+c[C+400+76>>2]+x*+c[C+400+80>>2]+ +c[C+400+108>>2]);l=l+v*(O*+c[C+400+88>>2]+L*+c[C+400+92>>2]+x*+c[C+400+96>>2]+ +c[C+400+112>>2]);n=n+1|0;r=o[C+16+372>>2]|0}while(n>>>0<(o[r+32>>2]|0)>>>0)}D=h*+c[t+16>>2]+b*+c[t+20>>2]+d*+c[t+24>>2]+ +c[t+52>>2];O=h*+c[t+32>>2]+b*+c[t+36>>2]+d*+c[t+40>>2]+ +c[t+56>>2];c[_+4>>2]=h*+c[t>>2]+b*+c[t+4>>2]+d*+c[t+8>>2]+ +c[t+48>>2];c[_+8>>2]=D;c[_+12>>2]=O;c[_+16>>2]=0;O=u*+c[t+16>>2]+s*+c[t+20>>2]+l*+c[t+24>>2]+ +c[t+52>>2];D=u*+c[t+32>>2]+s*+c[t+36>>2]+l*+c[t+40>>2]+ +c[t+56>>2];c[_+20>>2]=u*+c[t>>2]+s*+c[t+4>>2]+l*+c[t+8>>2]+ +c[t+48>>2];c[_+24>>2]=O;c[_+28>>2]=D;c[_+32>>2]=0;D=h-u;O=b-s;x=d-l;c[_+48>>2]=0;L=+X(+(D*D+O*O+x*x));c[_+52>>2]=L;L=L>9999999747378752e-20?1/L:1;c[_+36>>2]=L*D;c[_+40>>2]=L*O;c[_+44>>2]=L*x;t=1;p=C;return t|0}function Zv(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;j=p;p=p+176|0;o[e+348>>2]=e+220;o[e+352>>2]=e+252;o[e+356>>2]=e+284;o[e+360>>2]=e+316;o[e+364>>2]=4;o[e+368>>2]=0;o[e+376>>2]=0;k=o[t+4>>2]|0;o[e>>2]=o[t>>2];o[e+4>>2]=k;o[e+8>>2]=o[t+8>>2];o[e+8+4>>2]=o[t+8+4>>2];o[e+8+8>>2]=o[t+8+8>>2];o[e+8+12>>2]=o[t+8+12>>2];o[e+24>>2]=o[t+24>>2];o[e+24+4>>2]=o[t+24+4>>2];o[e+24+8>>2]=o[t+24+8>>2];o[e+24+12>>2]=o[t+24+12>>2];o[e+40>>2]=o[t+40>>2];o[e+40+4>>2]=o[t+40+4>>2];o[e+40+8>>2]=o[t+40+8>>2];o[e+40+12>>2]=o[t+40+12>>2];o[e+56>>2]=o[t+56>>2];o[e+56+4>>2]=o[t+56+4>>2];o[e+56+8>>2]=o[t+56+8>>2];o[e+56+12>>2]=o[t+56+12>>2];o[e+72>>2]=o[t+72>>2];o[e+72+4>>2]=o[t+72+4>>2];o[e+72+8>>2]=o[t+72+8>>2];o[e+72+12>>2]=o[t+72+12>>2];o[e+88>>2]=o[t+88>>2];o[e+88+4>>2]=o[t+88+4>>2];o[e+88+8>>2]=o[t+88+8>>2];o[e+88+12>>2]=o[t+88+12>>2];o[e+104>>2]=o[t+104>>2];o[e+104+4>>2]=o[t+104+4>>2];o[e+104+8>>2]=o[t+104+8>>2];o[e+104+12>>2]=o[t+104+12>>2];k=o[t+124>>2]|0;o[e+120>>2]=o[t+120>>2];o[e+124>>2]=k;c[e+144>>2]=0;o[e+180>>2]=0;o[e+128>>2]=o[i>>2];o[e+128+4>>2]=o[i+4>>2];o[e+128+8>>2]=o[i+8>>2];o[e+128+12>>2]=o[i+12>>2];n=+c[e+128>>2];_=+c[e+132>>2];s=+c[e+136>>2];if(n*n+_*_+s*s>0){i=(c[u>>2]=-n,o[u>>2]|0);t=(c[u>>2]=-_,o[u>>2]|0);r=(c[u>>2]=-s,o[u>>2]|0)}else{i=1065353216;t=0;r=0}c[e+164>>2]=0;o[e+364>>2]=3;o[e+148>>2]=e+316;o[e+180>>2]=1;g=(o[u>>2]=i,+c[u>>2]);C=(o[u>>2]=t,+c[u>>2]);Uv(e,g,C,(o[u>>2]=r,+c[u>>2]),e+316|0);c[e+164>>2]=1;w=(o[e+148>>2]|0)+16|0;o[e+128>>2]=o[w>>2];o[e+128+4>>2]=o[w+4>>2];o[e+128+8>>2]=o[w+8>>2];o[e+128+12>>2]=o[w+12>>2];o[j+24+48>>2]=o[w>>2];o[j+24+48+4>>2]=o[w+4>>2];o[j+24+48+8>>2]=o[w+8>>2];o[j+24+48+12>>2]=o[w+12>>2];o[j+24+32>>2]=o[w>>2];o[j+24+32+4>>2]=o[w+4>>2];o[j+24+32+8>>2]=o[w+8>>2];o[j+24+32+12>>2]=o[w+12>>2];o[j+24+16>>2]=o[w>>2];o[j+24+16+4>>2]=o[w+4>>2];o[j+24+16+8>>2]=o[w+8>>2];\no[j+24+16+12>>2]=o[w+12>>2];o[j+24>>2]=o[w>>2];o[j+24+4>>2]=o[w+4>>2];o[j+24+8>>2]=o[w+8>>2];o[j+24+12>>2]=o[w+12>>2];C=0;w=0;k=0;n=n*n+_*_+s*s;e:do{v=o[e+368>>2]|0;a=+c[e+128>>2];_=+c[e+132>>2];s=+c[e+136>>2];b=+X(+(a*a+_*_+s*s));if(b<9999999747378752e-20){R=5;break}c[e+148+(v*36|0)+16+(o[e+148+(v*36|0)+32>>2]<<2)>>2]=0;i=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=i;o[e+148+(v*36|0)+(o[e+148+(v*36|0)+32>>2]<<2)>>2]=o[e+348+(i<<2)>>2];i=o[e+148+(v*36|0)+32>>2]|0;o[e+148+(v*36|0)+32>>2]=i+1;Uv(e,-a,-_,-s,o[e+148+(v*36|0)+(i<<2)>>2]|0);i=o[e+148+(v*36|0)+32>>2]|0;t=o[e+148+(v*36|0)+(i+-1<<2)>>2]|0;_=+c[t+16>>2];s=+c[t+20>>2];a=+c[t+24>>2];h=_-+c[j+24>>2];m=s-+c[j+24+4>>2];g=a-+c[j+24+8>>2];if(h*h+m*m+g*g<9999999747378752e-20){R=8;break}h=_-+c[j+24+16>>2];m=s-+c[j+24+20>>2];g=a-+c[j+24+24>>2];if(h*h+m*m+g*g<9999999747378752e-20){R=8;break}h=_-+c[j+24+32>>2];m=s-+c[j+24+36>>2];g=a-+c[j+24+40>>2];if(h*h+m*m+g*g<9999999747378752e-20){R=8;break}h=_-+c[j+24+48>>2];m=s-+c[j+24+52>>2];g=a-+c[j+24+56>>2];if(h*h+m*m+g*g<9999999747378752e-20){R=8;break}w=w+1&3;y=j+24+(w<<4)|0;o[y>>2]=o[t+16>>2];o[y+4>>2]=o[t+16+4>>2];o[y+8>>2]=o[t+16+8>>2];o[y+12>>2]=o[t+16+12>>2];g=(+c[e+128>>2]*_+ +c[e+132>>2]*s+ +c[e+136>>2]*a)/b;C=g>C?g:C;if(b-C-b*9999999747378752e-20<=0){R=9;break}o[j>>2]=0;t:do switch(i|0){case 2:{y=o[e+148+(v*36|0)>>2]|0;l=o[e+148+(v*36|0)+4>>2]|0;n=+c[l+16>>2];_=+c[y+16>>2];s=+c[l+20>>2];a=+c[y+20>>2];b=+c[l+24>>2];d=+c[y+24>>2];if(!((n-_)*(n-_)+(s-a)*(s-a)+(b-d)*(b-d)>0)){R=39;break e}h=-(_*(n-_)+a*(s-a)+d*(b-d))/((n-_)*(n-_)+(s-a)*(s-a)+(b-d)*(b-d));if(h>=1){c[j+8>>2]=0;c[j+8+4>>2]=1;o[j>>2]=2;n=n*n+s*s+b*b;break t}if(!(h<=0)){c[j+8+4>>2]=h;c[j+8>>2]=1-h;o[j>>2]=3;n=((n-_)*h+_)*((n-_)*h+_)+((s-a)*h+a)*((s-a)*h+a)+((b-d)*h+d)*((b-d)*h+d);break t}else{c[j+8>>2]=1;c[j+8+4>>2]=0;o[j>>2]=1;n=_*_+a*a+d*d;break t}}case 3:{n=+zv((o[e+148+(v*36|0)>>2]|0)+16|0,(o[e+148+(v*36|0)+4>>2]|0)+16|0,(o[e+148+(v*36|0)+8>>2]|0)+16|0,j+8|0,j);break}case 4:{r=o[e+148+(v*36|0)>>2]|0;f=o[e+148+(v*36|0)+4>>2]|0;l=o[e+148+(v*36|0)+8>>2]|0;y=o[e+148+(v*36|0)+12>>2]|0;o[j+152>>2]=r+16;o[j+152+4>>2]=f+16;o[j+152+8>>2]=l+16;o[j+152+12>>2]=y+16;s=+c[r+16>>2];a=+c[y+16>>2];n=+c[r+20>>2];b=+c[y+20>>2];_=+c[r+24>>2];d=+c[y+24>>2];c[j+104>>2]=s-a;c[j+104+4>>2]=n-b;c[j+104+8>>2]=_-d;c[j+104+12>>2]=0;I=+c[f+16>>2];D=+c[f+20>>2];m=+c[f+24>>2];c[j+104+16>>2]=I-a;c[j+104+20>>2]=D-b;c[j+104+24>>2]=m-d;c[j+104+28>>2]=0;h=+c[l+16>>2];O=+c[l+20>>2];T=+c[l+24>>2];c[j+104+32>>2]=h-a;c[j+104+36>>2]=O-b;c[j+104+40>>2]=T-d;c[j+104+44>>2]=0;g=(n-b)*(m-d)*(h-a)+(_-d)*(I-a)*(O-b)-(O-b)*((m-d)*(s-a))-(n-b)*(I-a)*(T-d)+(T-d)*((s-a)*(D-b))-(h-a)*((_-d)*(D-b));if(g!=g|0!=0|g==0|!(g*(_*((I-h)*(n-D)-(D-O)*(s-I))+(s*((D-O)*(_-m)-(m-T)*(n-D))+n*((m-T)*(s-I)-(I-h)*(_-m))))<=0))n=-1;else{o[j+92>>2]=0;o[j+92+4>>2]=0;o[j+92+8>>2]=0;o[j+88>>2]=0;m=n-b;h=_-d;_=s-a;i=0;n=-1;while(1){t=o[6876+(i<<2)>>2]|0;T=+c[j+104+(t<<4)+8>>2];D=+c[j+104+(t<<4)+4>>2];O=+c[j+104+(t<<4)>>2];if(g*((m*T-h*D)*a+b*(h*O-T*_)+(D*_-m*O)*d)>0?(S=+zv(o[j+152+(i<<2)>>2]|0,o[j+152+(t<<2)>>2]|0,y+16|0,j+92|0,j+88|0),n<0|S<n):0){L=o[j+88>>2]|0;o[j>>2]=(L&2|0?1<<t:0)+(L<<1&8)+(L&1|0?1<<i:0);o[j+8+(i<<2)>>2]=o[j+92>>2];o[j+8+(t<<2)>>2]=o[j+92+4>>2];c[j+8+(o[6876+(t<<2)>>2]<<2)>>2]=0;o[j+8+12>>2]=o[j+92+8>>2];n=S}i=i+1|0;if((i|0)==3)break;m=+c[j+104+(i<<4)+4>>2];h=+c[j+104+(i<<4)+8>>2];_=+c[j+104+(i<<4)>>2];a=+c[y+16>>2];b=+c[y+20>>2];d=+c[y+24>>2]}if(n<0){o[j>>2]=15;a=+c[l+20>>2];O=+c[f+24>>2];D=+c[y+16>>2];_=+c[l+24>>2];T=+c[f+16>>2];b=+c[y+20>>2];s=+c[l+16>>2];I=+c[y+24>>2];h=+c[f+20>>2];c[j+8>>2]=(a*O*D+_*T*b-b*(O*s)-a*T*I+I*(s*h)-D*(_*h))/g;n=+c[r+20>>2];d=+c[r+24>>2];m=+c[r+16>>2];c[j+8+4>>2]=(n*_*D+d*s*b-b*(_*m)-n*s*I+I*(m*a)-D*(d*a))/g;c[j+8+8>>2]=(h*d*D+O*m*b-b*(d*T)-h*m*I+I*(T*n)-D*(O*n))/g;c[j+8+12>>2]=1-((a*O*D+_*T*b-b*(O*s)-a*T*I+I*(s*h)-D*(_*h))/g+(n*_*D+d*s*b-b*(_*m)-n*s*I+I*(m*a)-D*(d*a))/g+(h*d*D+O*m*b-b*(d*T)-h*m*I+I*(T*n)-D*(O*n))/g);n=0}}break}default:{}}while(0);if(!(n>=0)){R=39;break}o[e+148+((1-v|0)*36|0)+32>>2]=0;o[e+128>>2]=0;o[e+128+4>>2]=0;o[e+128+8>>2]=0;o[e+128+12>>2]=0;o[e+368>>2]=1-v;i=o[e+148+(v*36|0)+32>>2]|0;t=o[j>>2]|0;if(i|0){l=0;do{r=e+148+(v*36|0)+(l<<2)|0;f=o[r>>2]|0;if(!(t&1<<l)){L=o[e+364>>2]|0;o[e+364>>2]=L+1;o[e+348+(L<<2)>>2]=f}else{o[e+148+((1-v|0)*36|0)+(o[e+148+((1-v|0)*36|0)+32>>2]<<2)>>2]=f;y=o[j+8+(l<<2)>>2]|0;L=o[e+148+((1-v|0)*36|0)+32>>2]|0;o[e+148+((1-v|0)*36|0)+32>>2]=L+1;o[e+148+((1-v|0)*36|0)+16+(L<<2)>>2]=y;L=o[r>>2]|0;T=(o[u>>2]=y,+c[u>>2]);D=T*+c[L+20>>2];O=T*+c[L+24>>2];c[e+128>>2]=+c[L+16>>2]*T+ +c[e+128>>2];c[e+132>>2]=D+ +c[e+132>>2];c[e+136>>2]=O+ +c[e+136>>2]}l=l+1|0}while((l|0)!=(i|0))}if((t|0)==15)o[e+376>>2]=1;k=k+1|0;if(k>>>0>=128){R=38;break}}while(!(o[e+376>>2]|0));if((R|0)==5)o[e+376>>2]=1;else if((R|0)==8){L=o[e+368>>2]|0;R=(o[e+148+(L*36|0)+32>>2]|0)+-1|0;o[e+148+(L*36|0)+32>>2]=R;R=o[e+148+(L*36|0)+(R<<2)>>2]|0;L=o[e+364>>2]|0;o[e+364>>2]=L+1;o[e+348+(L<<2)>>2]=R}else if((R|0)==9){L=o[e+368>>2]|0;R=(o[e+148+(L*36|0)+32>>2]|0)+-1|0;o[e+148+(L*36|0)+32>>2]=R;R=o[e+148+(L*36|0)+(R<<2)>>2]|0;L=o[e+364>>2]|0;o[e+364>>2]=L+1;o[e+348+(L<<2)>>2]=R}else if((R|0)==38)o[e+376>>2]=2;else if((R|0)==39){L=o[e+368>>2]|0;R=(o[e+148+(L*36|0)+32>>2]|0)+-1|0;o[e+148+(L*36|0)+32>>2]=R;R=o[e+148+(L*36|0)+(R<<2)>>2]|0;L=o[e+364>>2]|0;o[e+364>>2]=L+1;o[e+348+(L<<2)>>2]=R}o[e+372>>2]=e+148+((o[e+368>>2]|0)*36|0);i=o[e+376>>2]|0;switch(i|0){case 0:{T=+c[e+128>>2];D=+c[e+132>>2];O=+c[e+136>>2];c[e+144>>2]=+X(+(T*T+D*D+O*O));p=j;return i|0}case 1:{c[e+144>>2]=0;p=j;return i|0}default:{p=j;return i|0}}return 0}function Uv(e,t,i,n,r){e=e|0;t=+t;i=+i;n=+n;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0;a=p;p=p+48|0;l=1/+X(+(t*t+i*i+n*n));c[r>>2]=l*t;c[r+4>>2]=l*i;c[r+8>>2]=l*n;c[r+12>>2]=0;_=o[e+120>>2]|0;f=o[e+124>>2]|0;s=(o[e>>2]|0)+(f>>1)|0;if(f&1)_=o[(o[s>>2]|0)+_>>2]|0;EP[_&127](a,s,r);t=-+c[r>>2];i=-+c[r+4>>2];n=-+c[r+8>>2];_=o[e+120>>2]|0;f=o[e+124>>2]|0;s=(o[e+4>>2]|0)+(f>>1)|0;if(f&1)_=o[(o[s>>2]|0)+_>>2]|0;l=+c[e+24>>2]*t+ +c[e+28>>2]*i+ +c[e+32>>2]*n;u=+c[e+40>>2]*t+ +c[e+44>>2]*i+ +c[e+48>>2]*n;c[a+16>>2]=+c[e+8>>2]*t+ +c[e+12>>2]*i+ +c[e+16>>2]*n;c[a+16+4>>2]=l;c[a+16+8>>2]=u;c[a+16+12>>2]=0;EP[_&127](a+32|0,s,a+16|0);u=+c[a+32>>2];t=+c[a+32+4>>2];i=+c[a+32+8>>2];n=+c[a+4>>2]-(u*+c[e+72>>2]+t*+c[e+76>>2]+i*+c[e+80>>2]+ +c[e+108>>2]);l=+c[a+8>>2]-(u*+c[e+88>>2]+t*+c[e+92>>2]+i*+c[e+96>>2]+ +c[e+112>>2]);c[r+16>>2]=+c[a>>2]-(u*+c[e+56>>2]+t*+c[e+60>>2]+i*+c[e+64>>2]+ +c[e+104>>2]);c[r+20>>2]=n;c[r+24>>2]=l;c[r+28>>2]=0;p=a;return}function zv(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0;A=p;p=p+64|0;o[A+48>>2]=e;o[A+48+4>>2]=t;o[A+48+8>>2]=i;T=+c[e>>2];L=+c[t>>2];W=+c[e+4>>2];B=+c[t+4>>2];R=+c[e+8>>2];j=+c[t+8>>2];c[A>>2]=T-L;c[A+4>>2]=W-B;c[A+8>>2]=R-j;c[A+12>>2]=0;I=+c[i>>2];D=+c[i+4>>2];O=+c[i+8>>2];c[A+16>>2]=L-I;c[A+20>>2]=B-D;c[A+24>>2]=j-O;c[A+28>>2]=0;c[A+32>>2]=I-T;c[A+36>>2]=D-W;c[A+40>>2]=O-R;c[A+44>>2]=0;x=(W-B)*(j-O)-(R-j)*(B-D);M=(R-j)*(L-I)-(j-O)*(T-L);P=(B-D)*(T-L)-(W-B)*(L-I);if(P*P+(x*x+M*M)>0){b=W-B;d=R-j;h=T-L;C=T;w=W;k=R;f=0;S=-1;l=0;_=0;s=0}else{B=-1;p=A;return+B}while(1){if(C*(P*b-M*d)+w*(x*d-P*h)+(M*h-x*b)*k>0){v=o[6876+(f<<2)>>2]|0;F=o[A+48+(v<<2)>>2]|0;a=+c[F>>2];d=a-C;h=+c[F+4>>2];m=h-w;y=+c[F+8>>2];g=y-k;do if(d*d+m*m+g*g>0){b=-(C*d+w*m+k*g)/(d*d+m*m+g*g);if(b>=1){a=a*a+h*h+y*y;l=2;_=0;s=1065353216;break}if(!(b<=0)){s=(c[u>>2]=b,o[u>>2]|0);C=C+d*b;a=w+m*b;k=k+g*b;a=k*k+(C*C+a*a);l=3;_=(c[u>>2]=1-b,o[u>>2]|0);break}else{a=C*C+w*w+k*k;l=1;_=1065353216;s=0;break}}else a=-1;while(0);if(S<0|a<S){o[r>>2]=(l&1|0?1<<f:0)+(l&2|0?1<<v:0);o[n+(f<<2)>>2]=_;o[n+(v<<2)>>2]=s;c[n+(o[6876+(v<<2)>>2]<<2)>>2]=0}else a=S}else a=S;f=f+1|0;if((f|0)==3)break;F=o[A+48+(f<<2)>>2]|0;b=+c[A+(f<<4)+4>>2];d=+c[A+(f<<4)+8>>2];h=+c[A+(f<<4)>>2];C=+c[F>>2];w=+c[F+4>>2];k=+c[F+8>>2];S=a}if(!(a<0)){B=a;p=A;return+B}k=+X(+(P*P+(x*x+M*M)));S=(x*+c[e>>2]+M*+c[e+4>>2]+P*+c[e+8>>2])/(P*P+(x*x+M*M));o[r>>2]=7;C=+c[t>>2]-x*S;g=+c[t+4>>2]-M*S;w=+c[t+8>>2]-P*S;B=+X(+((g*(L-I)-C*(B-D))*(g*(L-I)-C*(B-D))+(((B-D)*w-g*(j-O))*((B-D)*w-g*(j-O))+(C*(j-O)-w*(L-I))*(C*(j-O)-w*(L-I)))))/k;c[n>>2]=B;j=+c[i>>2]-x*S;w=+c[i+4>>2]-M*S;L=+c[i+8>>2]-P*S;W=+X(+((w*(I-T)-j*(D-W))*(w*(I-T)-j*(D-W))+(((D-W)*L-w*(O-R))*((D-W)*L-w*(O-R))+(j*(O-R)-L*(I-T))*(j*(O-R)-L*(I-T)))))/k;c[n+4>>2]=W;c[n+8>>2]=1-(W+B);B=P*S*(P*S)+(x*S*(x*S)+M*S*(M*S));p=A;return+B}function Yv(e,t,i,r,s,a,f){e=e|0;t=t|0;i=i|0;r=r|0;s=s|0;a=a|0;f=f|0;var l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0;I=p;p=p+9856|0;h=a;m=h+36|0;do{o[h>>2]=0;h=h+4|0}while((h|0)<(m|0));o[I+9712>>2]=e;o[I+9712+4>>2]=i;O=+c[r>>2];N=+c[t>>2];L=+c[r+16>>2];M=+c[t+16>>2];x=+c[r+32>>2];H=+c[t+32>>2];P=+c[t+4>>2];Z=+c[t+20>>2];W=+c[t+36>>2];y=+c[t+8>>2];l=+c[t+24>>2];D=+c[t+40>>2];V=+c[r+4>>2];E=+c[r+20>>2];G=+c[r+36>>2];F=+c[r+8>>2];A=+c[r+24>>2];B=+c[r+40>>2];c[I+9712+8>>2]=O*N+L*M+x*H;c[I+9712+12>>2]=O*P+L*Z+x*W;c[I+9712+16>>2]=O*y+L*l+x*D;c[I+9712+20>>2]=0;c[I+9712+24>>2]=N*V+M*E+H*G;c[I+9712+28>>2]=P*V+Z*E+W*G;c[I+9712+32>>2]=y*V+l*E+D*G;c[I+9712+36>>2]=0;c[I+9712+40>>2]=N*F+M*A+H*B;c[I+9712+44>>2]=P*F+Z*A+W*B;c[I+9712+48>>2]=y*F+l*A+D*B;c[I+9712+52>>2]=0;D=+c[r+48>>2]-+c[t+48>>2];l=+c[r+52>>2]-+c[t+52>>2];y=+c[r+56>>2]-+c[t+56>>2];W=+c[t>>2];Z=+c[r>>2];P=+c[t+16>>2];H=+c[r+16>>2];M=+c[t+32>>2];N=+c[r+32>>2];x=+c[t+4>>2];L=+c[t+20>>2];O=+c[t+36>>2];T=+c[t+8>>2];b=+c[t+24>>2];d=+c[t+40>>2];c[I+9712+56>>2]=W*Z+P*H+M*N;c[I+9712+60>>2]=W*V+P*E+M*G;c[I+9712+64>>2]=W*F+P*A+M*B;c[I+9712+68>>2]=0;c[I+9712+72>>2]=Z*x+H*L+N*O;c[I+9712+76>>2]=V*x+E*L+G*O;c[I+9712+80>>2]=F*x+A*L+B*O;c[I+9712+84>>2]=0;c[I+9712+88>>2]=Z*T+H*b+N*d;c[I+9712+92>>2]=V*T+E*b+G*d;c[I+9712+96>>2]=F*T+A*b+B*d;c[I+9712+100>>2]=0;c[I+9712+104>>2]=D*W+l*P+y*M;c[I+9712+108>>2]=D*x+l*L+y*O;c[I+9712+112>>2]=D*T+l*b+y*d;c[I+9712+116>>2]=0;o[I+9712+120>>2]=f?72:71;o[I+9712+124>>2]=0;o[I+9328+364>>2]=0;o[I+9328+128>>2]=0;o[I+9328+128+4>>2]=0;o[I+9328+128+8>>2]=0;o[I+9328+128+12>>2]=0;o[I+9328+376>>2]=2;o[I+9328+368>>2]=0;c[I+9328+144>>2]=0;d=-+c[s+4>>2];y=-+c[s+8>>2];c[I+16>>2]=-+c[s>>2];c[I+16+4>>2]=d;c[I+16+8>>2]=y;c[I+16+12>>2]=0;switch(Zv(I+9328|0,I+9712|0,I+16|0)|0){case 1:{w=I+32+9280|0;k=I+32+9288|0;S=I+32+9292|0;o[w>>2]=0;o[w+4>>2]=0;o[w+8>>2]=0;o[w+12>>2]=0;o[I+32>>2]=9;j=I+32+40|0;o[I+32+9276>>2]=0;o[j>>2]=0;o[j+4>>2]=0;o[j+8>>2]=0;o[j+12>>2]=0;o[j+16>>2]=0;f=0;do{e=128-f+-1|0;o[I+32+2108+(e*56|0)+44>>2]=0;i=o[k>>2]|0;o[I+32+2108+(e*56|0)+48>>2]=i;if(i|0)o[i+44>>2]=I+32+2108+(e*56|0);o[k>>2]=I+32+2108+(e*56|0);o[S>>2]=(o[S>>2]|0)+1;f=f+1|0}while((f|0)!=128);d=+c[s>>2];y=+c[s+4>>2];b=+c[s+8>>2];g=o[I+9328+372>>2]|0;do if((o[g+32>>2]|0)>>>0>1?Kv(I+9328|0)|0:0){C=I+32+9280|0;e=o[C>>2]|0;if(e|0){h=o[I+32+9284>>2]|0;m=o[S>>2]|0;do{i=e+44|0;r=e+48|0;f=o[r>>2]|0;if(f|0)o[f+44>>2]=o[i>>2];i=o[i>>2]|0;if(i|0)o[i+48>>2]=o[r>>2];if((o[C>>2]|0)==(e|0))o[C>>2]=o[r>>2];h=h+-1|0;o[e+44>>2]=0;o[r>>2]=o[k>>2];i=o[k>>2]|0;if(i|0)o[i+44>>2]=e;o[k>>2]=e;m=m+1|0;e=o[C>>2]|0}while((e|0)!=0);o[I+32+9284>>2]=h;o[S>>2]=m}o[I+32>>2]=0;o[I+32+9276>>2]=0;e=o[g>>2]|0;i=o[g+12>>2]|0;Z=+c[i+16>>2];B=+c[e+16>>2]-Z;F=+c[i+20>>2];G=+c[e+20>>2]-F;V=+c[i+24>>2];N=+c[e+24>>2]-V;i=o[g+4>>2]|0;E=+c[i+16>>2]-Z;H=+c[i+20>>2]-F;A=+c[i+24>>2]-V;f=o[g+8>>2]|0;Z=+c[f+16>>2]-Z;F=+c[f+20>>2]-F;V=+c[f+24>>2]-V;if(B*H*V+(G*A*Z+N*E*F-B*A*F-G*E*V)-N*H*Z<0){o[g>>2]=i;o[g+4>>2]=e;r=o[g+16>>2]|0;o[g+16>>2]=o[g+20>>2];o[g+20>>2]=r;r=i}else{r=e;e=i}r=Qv(I+32|0,r,e,f,1)|0;h=Qv(I+32|0,o[g+4>>2]|0,o[g>>2]|0,o[g+12>>2]|0,1)|0;m=Qv(I+32|0,o[g+8>>2]|0,o[g+4>>2]|0,o[g+12>>2]|0,1)|0;s=Qv(I+32|0,o[g>>2]|0,o[g+8>>2]|0,o[g+12>>2]|0,1)|0;if((o[I+32+9284>>2]|0)==4){e=o[w>>2]|0;l=+c[e+16>>2];i=o[e+48>>2]|0;if(i){b=l*l;while(1){l=+c[i+16>>2];f=l*l<b;e=f?i:e;i=o[i+48>>2]|0;if(!i)break;else b=f?l*l:b}}y=+c[e>>2];d=+c[e+4>>2];b=+c[e+8>>2];l=+c[e+12>>2];v=o[e+16>>2]|0;U=o[e+20>>2]|0;i=o[e+24>>2]|0;f=o[e+28>>2]|0;n[r+52>>0]=0;o[r+32>>2]=h;n[h+52>>0]=0;o[h+32>>2]=r;n[r+53>>0]=0;o[r+36>>2]=m;n[m+52>>0]=1;o[m+32>>2]=r;n[r+54>>0]=0;o[r+40>>2]=s;n[s+52>>0]=2;o[s+32>>2]=r;n[h+53>>0]=2;o[h+36>>2]=s;n[s+54>>0]=1;o[s+40>>2]=h;n[h+54>>0]=1;o[h+40>>2]=m;n[m+53>>0]=2;o[m+36>>2]=h;n[m+54>>0]=1;o[m+40>>2]=s;n[s+53>>0]=2;o[s+36>>2]=m;o[I+32>>2]=0;g=e;m=U;s=i;h=f;e=v;v=0;while(1){i=o[I+32+9276>>2]|0;if(i>>>0>=64){R=43;break}o[I+9840>>2]=0;o[I+9840+4>>2]=0;o[I+9840+8>>2]=0;o[I+32+9276>>2]=i+1;v=v+1|0;n[g+55>>0]=v;r=g+4|0;U=g+8|0;Uv(I+9328|0,+c[g>>2],+c[r>>2],+c[U>>2],I+32+60+(i<<5)|0);if(+c[g>>2]*+c[I+32+60+(i<<5)+16>>2]+ +c[r>>2]*+c[I+32+60+(i<<5)+20>>2]+ +c[U>>2]*+c[I+32+60+(i<<5)+24>>2]-+c[g+16>>2]>9999999747378752e-20)r=0;else{i=7;R=42;break}do{f=Jv(I+32|0,v,I+32+60+(i<<5)|0,o[g+32+(r<<2)>>2]|0,_[g+52+r>>0]|0,I+9840|0)|0;r=r+1|0}while(f&r>>>0<3);if(!(f&(o[I+9840+8>>2]|0)>>>0>2)){i=4;R=42;break}f=o[I+9840>>2]|0;e=o[I+9840+4>>2]|0;n[f+53>>0]=2;o[f+36>>2]=e;n[e+54>>0]=1;o[e+40>>2]=f;e=g+44|0;f=g+48|0;i=o[f>>2]|0;if(i|0)o[i+44>>2]=o[e>>2];e=o[e>>2]|0;if(e|0)o[e+48>>2]=o[f>>2];if((o[C>>2]|0)==(g|0))o[C>>2]=o[f>>2];o[I+32+9284>>2]=(o[I+32+9284>>2]|0)+-1;o[g+44>>2]=0;o[f>>2]=o[k>>2];e=o[k>>2]|0;if(e|0)o[e+44>>2]=g;o[k>>2]=g;o[S>>2]=(o[S>>2]|0)+1;i=o[w>>2]|0;l=+c[i+16>>2];e=o[i+48>>2]|0;if(e){b=l*l;while(1){l=+c[e+16>>2];f=l*l<b;i=f?e:i;e=o[e+48>>2]|0;if(!e)break;else b=f?l*l:b}}y=+c[i>>2];d=+c[i+4>>2];b=+c[i+8>>2];l=+c[i+12>>2];e=o[i+16>>2]|0;f=o[i+20>>2]|0;r=o[i+24>>2]|0;h=o[i+28>>2]|0;if(v>>>0>=255){i=h;break}else{g=i;m=f;s=r}}if((R|0)==42){o[I+32>>2]=i;f=m;r=s;i=h}else if((R|0)==43){o[I+32>>2]=6;f=m;r=s;i=h}N=(o[u>>2]=e,+c[u>>2]);E=y*N;F=d*N;N=b*N;c[I+32+40>>2]=y;c[I+32+44>>2]=d;c[I+32+48>>2]=b;c[I+32+52>>2]=l;o[I+32+56>>2]=e;o[I+32+36>>2]=3;o[I+32+4>>2]=f;o[I+32+8>>2]=r;o[I+32+12>>2]=i;U=r;V=+c[U+16>>2]-E;B=+c[U+20>>2]-F;G=+c[U+24>>2]-N;S=i;W=+c[S+16>>2]-E;A=+c[S+20>>2]-F;H=+c[S+24>>2]-N;H=+X(+((V*A-B*W)*(V*A-B*W)+((B*H-G*A)*(B*H-G*A)+(G*W-V*H)*(G*W-V*H))));c[I+32+20>>2]=H;V=+c[S+16>>2]-E;W=+c[S+20>>2]-F;G=+c[S+24>>2]-N;S=f;A=+c[S+16>>2]-E;B=+c[S+20>>2]-F;Z=+c[S+24>>2]-N;Z=+X(+((V*B-W*A)*(V*B-W*A)+((W*Z-G*B)*(W*Z-G*B)+(G*A-V*Z)*(G*A-V*Z))));c[I+32+24>>2]=Z;V=+c[S+16>>2]-E;A=+c[S+20>>2]-F;G=+c[S+24>>2]-N;E=+c[U+16>>2]-E;F=+c[U+20>>2]-F;N=+c[U+24>>2]-N;N=+X(+((V*F-A*E)*(V*F-A*E)+((A*N-G*F)*(A*N-G*F)+(G*E-V*N)*(G*E-V*N))));c[I+32+20>>2]=H/(N+(H+Z));c[I+32+24>>2]=Z/(N+(H+Z));c[I+32+28>>2]=N/(N+(H+Z));if((o[I+32>>2]|0)!=9)if(!(o[I+32+36>>2]|0)){d=0;b=0;l=0;break}else{r=I+32+36|0;R=51;break}o[a>>2]=3;U=0;p=I;return U|0}else R=45}else R=45;while(0);if((R|0)==45){o[I+32>>2]=8;c[I+32+40>>2]=d;c[I+32+44>>2]=y;c[I+32+48>>2]=b;c[I+32+52>>2]=0;l=+X(+(d*d+y*y+b*b));if(l>0){c[I+32+40>>2]=1/l*d;c[I+32+44>>2]=1/l*y;c[I+32+48>>2]=1/l*b}else{o[j>>2]=1065353216;o[I+32+44>>2]=0;o[I+32+48>>2]=0}c[I+32+52>>2]=0;c[I+32+56>>2]=0;o[I+32+36>>2]=1;o[I+32+4>>2]=o[g>>2];c[I+32+20>>2]=1;r=I+32+36|0;R=51}if((R|0)==51){f=0;d=0;b=0;l=0;do{e=o[I+9712+120>>2]|0;U=o[I+9712+124>>2]|0;i=(o[I+9712>>2]|0)+(U>>1)|0;if(U&1)e=o[(o[i>>2]|0)+e>>2]|0;EP[e&127](I,i,o[I+32+4+(f<<2)>>2]|0);Z=+c[I+32+20+(f<<2)>>2];d=d+ +c[I>>2]*Z;l=l+Z*+c[I+4>>2];b=b+Z*+c[I+8>>2];f=f+1|0}while(f>>>0<(o[r>>2]|0)>>>0)}o[a>>2]=1;Z=d*+c[t+16>>2]+l*+c[t+20>>2]+b*+c[t+24>>2]+ +c[t+52>>2];V=d*+c[t+32>>2]+l*+c[t+36>>2]+b*+c[t+40>>2]+ +c[t+56>>2];c[a+4>>2]=d*+c[t>>2]+l*+c[t+4>>2]+b*+c[t+8>>2]+ +c[t+48>>2];c[a+8>>2]=Z;c[a+12>>2]=V;c[a+16>>2]=0;V=+c[j>>2];Z=+c[I+32+56>>2];N=+c[I+32+44>>2];H=+c[I+32+48>>2];B=d-V*Z;A=l-Z*N;F=b-Z*H;G=B*+c[t+16>>2]+A*+c[t+20>>2]+F*+c[t+24>>2]+ +c[t+52>>2];E=B*+c[t+32>>2]+A*+c[t+36>>2]+F*+c[t+40>>2]+ +c[t+56>>2];c[a+20>>2]=B*+c[t>>2]+A*+c[t+4>>2]+F*+c[t+8>>2]+ +c[t+48>>2];c[a+24>>2]=G;c[a+28>>2]=E;c[a+32>>2]=0;c[a+36>>2]=-V;c[a+40>>2]=-N;c[a+44>>2]=-H;c[a+48>>2]=0;c[a+52>>2]=-Z;U=1;p=I;return U|0}case 2:{o[a>>2]=2;U=0;p=I;return U|0}default:{U=0;p=I;return U|0}}return 0}function Kv(e){e=e|0;var t=0,i=0,n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;u=p;p=p+16|0;l=o[e+372>>2]|0;e:do switch(o[l+32>>2]|0){case 1:{i=1;t=0;while(1){o[u>>2]=0;o[u+4>>2]=0;o[u+8>>2]=0;o[u+12>>2]=0;c[u+(t<<2)>>2]=1;b=l+32|0;c[l+16+(i<<2)>>2]=0;i=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=i;o[l+(o[b>>2]<<2)>>2]=o[e+348+(i<<2)>>2];i=o[b>>2]|0;o[b>>2]=i+1;n=+c[u>>2];r=+c[u+4>>2];_=+c[u+8>>2];Uv(e,n,r,_,o[l+(i<<2)>>2]|0);if(Kv(e)|0)break;l=o[e+372>>2]|0;b=(o[l+32>>2]|0)+-1|0;o[l+32>>2]=b;b=o[l+(b<<2)>>2]|0;l=o[e+364>>2]|0;o[e+364>>2]=l+1;o[e+348+(l<<2)>>2]=b;l=o[e+372>>2]|0;c[l+16+(o[l+32>>2]<<2)>>2]=0;b=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=b;o[l+(o[l+32>>2]<<2)>>2]=o[e+348+(b<<2)>>2];b=o[l+32>>2]|0;o[l+32>>2]=b+1;Uv(e,-n,-r,-_,o[l+(b<<2)>>2]|0);if(Kv(e)|0)break;b=o[e+372>>2]|0;l=(o[b+32>>2]|0)+-1|0;o[b+32>>2]=l;l=o[b+(l<<2)>>2]|0;b=o[e+364>>2]|0;o[e+364>>2]=b+1;o[e+348+(b<<2)>>2]=l;t=t+1|0;if(t>>>0>=3)break e;l=o[e+372>>2]|0;i=o[l+32>>2]|0}b=1;p=u;return b|0}case 2:{b=o[l+4>>2]|0;t=o[l>>2]|0;n=+c[b+16>>2]-+c[t+16>>2];r=+c[b+20>>2]-+c[t+20>>2];_=+c[b+24>>2]-+c[t+24>>2];t=0;while(1){o[u>>2]=0;o[u+4>>2]=0;o[u+8>>2]=0;o[u+12>>2]=0;c[u+(t<<2)>>2]=1;s=+c[u+8>>2];a=+c[u+4>>2];f=+c[u>>2];if((r*s-_*a)*(r*s-_*a)+(_*f-n*s)*(_*f-n*s)+(n*a-r*f)*(n*a-r*f)>0){l=o[e+372>>2]|0;c[l+16+(o[l+32>>2]<<2)>>2]=0;b=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=b;o[l+(o[l+32>>2]<<2)>>2]=o[e+348+(b<<2)>>2];b=o[l+32>>2]|0;o[l+32>>2]=b+1;Uv(e,r*s-_*a,_*f-n*s,n*a-r*f,o[l+(b<<2)>>2]|0);if(Kv(e)|0)break;l=o[e+372>>2]|0;b=(o[l+32>>2]|0)+-1|0;o[l+32>>2]=b;b=o[l+(b<<2)>>2]|0;l=o[e+364>>2]|0;o[e+364>>2]=l+1;o[e+348+(l<<2)>>2]=b;l=o[e+372>>2]|0;c[l+16+(o[l+32>>2]<<2)>>2]=0;b=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=b;o[l+(o[l+32>>2]<<2)>>2]=o[e+348+(b<<2)>>2];b=o[l+32>>2]|0;o[l+32>>2]=b+1;Uv(e,-(r*s-_*a),-(_*f-n*s),-(n*a-r*f),o[l+(b<<2)>>2]|0);if(Kv(e)|0)break;b=o[e+372>>2]|0;l=(o[b+32>>2]|0)+-1|0;o[b+32>>2]=l;l=o[b+(l<<2)>>2]|0;b=o[e+364>>2]|0;o[e+364>>2]=b+1;o[e+348+(b<<2)>>2]=l}t=t+1|0;if(t>>>0>=3)break e}b=1;p=u;return b|0}case 3:{b=o[l+4>>2]|0;i=o[l>>2]|0;s=+c[i+16>>2];n=+c[b+16>>2]-s;a=+c[i+20>>2];r=+c[b+20>>2]-a;f=+c[i+24>>2];_=+c[b+24>>2]-f;b=o[l+8>>2]|0;s=+c[b+16>>2]-s;a=+c[b+20>>2]-a;f=+c[b+24>>2]-f;if((r*f-_*a)*(r*f-_*a)+(_*s-n*f)*(_*s-n*f)+(n*a-r*s)*(n*a-r*s)>0){c[l+28>>2]=0;b=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=b;o[l+12>>2]=o[e+348+(b<<2)>>2];b=o[l+32>>2]|0;o[l+32>>2]=b+1;Uv(e,r*f-_*a,_*s-n*f,n*a-r*s,o[l+(b<<2)>>2]|0);if(Kv(e)|0){b=1;p=u;return b|0}l=o[e+372>>2]|0;b=(o[l+32>>2]|0)+-1|0;o[l+32>>2]=b;b=o[l+(b<<2)>>2]|0;l=o[e+364>>2]|0;o[e+364>>2]=l+1;o[e+348+(l<<2)>>2]=b;l=o[e+372>>2]|0;c[l+16+(o[l+32>>2]<<2)>>2]=0;b=(o[e+364>>2]|0)+-1|0;o[e+364>>2]=b;o[l+(o[l+32>>2]<<2)>>2]=o[e+348+(b<<2)>>2];b=o[l+32>>2]|0;o[l+32>>2]=b+1;Uv(e,-(r*f-_*a),-(_*s-n*f),-(n*a-r*s),o[l+(b<<2)>>2]|0);if(Kv(e)|0){b=1;p=u;return b|0}else{b=o[e+372>>2]|0;l=(o[b+32>>2]|0)+-1|0;o[b+32>>2]=l;l=o[b+(l<<2)>>2]|0;b=o[e+364>>2]|0;o[e+364>>2]=b+1;o[e+348+(b<<2)>>2]=l;break e}}break}case 4:{b=o[l>>2]|0;e=o[l+12>>2]|0;f=+c[e+16>>2];m=+c[b+16>>2]-f;d=+c[e+20>>2];n=+c[b+20>>2]-d;_=+c[e+24>>2];s=+c[b+24>>2]-_;b=o[l+4>>2]|0;r=+c[b+16>>2]-f;a=+c[b+20>>2]-d;h=+c[b+24>>2]-_;b=o[l+8>>2]|0;f=+c[b+16>>2]-f;d=+c[b+20>>2]-d;_=+c[b+24>>2]-_;if(!((false?1:m*a*_+(n*h*f+s*r*d-m*h*d-n*r*_)-s*a*f!=m*a*_+(n*h*f+s*r*d-m*h*d-n*r*_)-s*a*f)|m*a*_+(n*h*f+s*r*d-m*h*d-n*r*_)-s*a*f==0)){b=1;p=u;return b|0}break}default:{}}while(0);b=0;p=u;return b|0}function Qv(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;h=o[e+9288>>2]|0;if(!h){o[e>>2]=5;e=0;return e|0}s=o[h+48>>2]|0;if(s|0)o[s+44>>2]=o[h+44>>2];s=o[h+44>>2]|0;if(s|0)o[s+48>>2]=o[h+48>>2];if((o[e+9288>>2]|0)==(h|0))o[e+9288>>2]=o[h+48>>2];o[e+9292>>2]=(o[e+9292>>2]|0)+-1;o[h+44>>2]=0;o[h+48>>2]=o[e+9280>>2];s=o[e+9280>>2]|0;if(s|0)o[s+44>>2]=h;o[e+9280>>2]=h;o[e+9284>>2]=(o[e+9284>>2]|0)+1;n[h+55>>0]=0;o[h+20>>2]=t;o[h+24>>2]=i;o[h+28>>2]=r;l=+c[t+16>>2];a=+c[i+16>>2]-l;u=+c[t+20>>2];f=+c[i+20>>2]-u;b=+c[t+24>>2];p=+c[i+24>>2]-b;l=+c[r+16>>2]-l;u=+c[r+20>>2]-u;b=+c[r+24>>2]-b;c[h>>2]=f*b-p*u;c[h+4>>2]=p*l-a*b;c[h+8>>2]=a*u-f*l;c[h+12>>2]=0;d=+X(+((f*b-p*u)*(f*b-p*u)+(p*l-a*b)*(p*l-a*b)+(a*u-f*l)*(a*u-f*l)));do if(d>9999999747378752e-20){if((!(qv(f*b-p*u,p*l-a*b,a*u-f*l,+c[t+16>>2],+c[t+20>>2],+c[t+24>>2],+c[i+16>>2],+c[i+20>>2],+c[i+24>>2],h+16|0)|0)?!(qv(+c[h>>2],+c[h+4>>2],+c[h+8>>2],+c[i+16>>2],+c[i+20>>2],+c[i+24>>2],+c[r+16>>2],+c[r+20>>2],+c[r+24>>2],h+16|0)|0):0)?!(qv(+c[h>>2],+c[h+4>>2],+c[h+8>>2],+c[r+16>>2],+c[r+20>>2],+c[r+24>>2],+c[t+16>>2],+c[t+20>>2],+c[t+24>>2],h+16|0)|0):0)c[h+16>>2]=(+c[t+16>>2]*+c[h>>2]+ +c[t+20>>2]*+c[h+4>>2]+ +c[t+24>>2]*+c[h+8>>2])/d;c[h>>2]=1/d*+c[h>>2];c[h+4>>2]=1/d*+c[h+4>>2];c[h+8>>2]=1/d*+c[h+8>>2];if(_){e=h;return e|0}if(!(+c[h+16>>2]>=-9999999747378752e-21)){o[e>>2]=3;break}else{e=h;return e|0}}else o[e>>2]=2;while(0);s=o[h+48>>2]|0;if(s|0)o[s+44>>2]=o[h+44>>2];s=o[h+44>>2]|0;if(s|0)o[s+48>>2]=o[h+48>>2];if((o[e+9280>>2]|0)==(h|0))o[e+9280>>2]=o[h+48>>2];o[e+9284>>2]=(o[e+9284>>2]|0)+-1;o[h+44>>2]=0;o[h+48>>2]=o[e+9288>>2];s=o[e+9288>>2]|0;if(s|0)o[s+44>>2]=h;o[e+9288>>2]=h;o[e+9292>>2]=(o[e+9292>>2]|0)+1;e=0;return e|0}function qv(e,t,i,n,r,o,_,s,a,f){e=+e;t=+t;i=+i;n=+n;r=+r;o=+o;_=+_;s=+s;a=+a;f=f|0;if(!(((_-n)*t-(s-r)*e)*o+(((s-r)*i-(a-o)*t)*n+((a-o)*e-(_-n)*i)*r)<0)){f=0;return f|0}if((_-n)*n+(s-r)*r+(a-o)*o>0){c[f>>2]=+X(+(n*n+r*r+o*o));f=1;return f|0}if((_-n)*_+(s-r)*s+(a-o)*a<0){c[f>>2]=+X(+(_*_+s*s+a*a));f=1;return f|0}else{i=((_*_+s*s+a*a)*(n*n+r*r+o*o)-(_*n+s*r+a*o)*(_*n+s*r+a*o))/((_-n)*(_-n)+(s-r)*(s-r)+(a-o)*(a-o));c[f>>2]=+X(+(i>0?i:0));f=1;return f|0}return 0}function Jv(e,t,i,r,s,a){e=e|0;t=t|0;i=i|0;r=r|0;s=s|0;a=a|0;var f=0;if((_[r+55>>0]|0|0)==(t|0)){r=0;return r|0}f=o[6876+(s<<2)>>2]|0;if(+c[r>>2]*+c[i+16>>2]+ +c[r+4>>2]*+c[i+20>>2]+ +c[r+8>>2]*+c[i+24>>2]-+c[r+16>>2]<-9999999747378752e-21){f=Qv(e,o[r+20+(f<<2)>>2]|0,o[r+20+(s<<2)>>2]|0,i,0)|0;if(!f){r=0;return r|0}n[f+52>>0]=s;o[f+32>>2]=r;n[r+52+s>>0]=0;o[r+32+(s<<2)>>2]=f;s=o[a>>2]|0;if(!s)o[a+4>>2]=f;else{n[s+53>>0]=2;o[s+36>>2]=f;n[f+54>>0]=1;o[f+40>>2]=s}o[a>>2]=f;o[a+8>>2]=(o[a+8>>2]|0)+1;r=1;return r|0}s=o[6888+(s<<2)>>2]|0;n[r+55>>0]=t;if(!(Jv(e,t,i,o[r+32+(f<<2)>>2]|0,_[r+52+f>>0]|0,a)|0)){r=0;return r|0}if(!(Jv(e,t,i,o[r+32+(s<<2)>>2]|0,_[r+52+s>>0]|0,a)|0)){r=0;return r|0}s=o[r+48>>2]|0;if(s|0)o[s+44>>2]=o[r+44>>2];s=o[r+44>>2]|0;if(s|0)o[s+48>>2]=o[r+48>>2];if((o[e+9280>>2]|0)==(r|0))o[e+9280>>2]=o[r+48>>2];o[e+9284>>2]=(o[e+9284>>2]|0)+-1;o[r+44>>2]=0;o[r+48>>2]=o[e+9288>>2];s=o[e+9288>>2]|0;if(s|0)o[s+44>>2]=r;o[e+9288>>2]=r;o[e+9292>>2]=(o[e+9292>>2]|0)+1;r=1;return r|0}function $v(e){e=e|0;return}function eC(e){e=e|0;qa(e);return}function tC(e,t,i,n,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;l=l|0;var u=0,b=0;l=p;p=p+80|0;b=+c[_+52>>2]-+c[r+52>>2];u=+c[_+56>>2]-+c[r+56>>2];c[l+56>>2]=+c[_+48>>2]-+c[r+48>>2];c[l+56+4>>2]=b;c[l+56+8>>2]=u;c[l+56+12>>2]=0;if(Yv(i,r,n,_,l+56|0,l,1)|0){o[a>>2]=o[l+4>>2];o[a+4>>2]=o[l+4+4>>2];o[a+8>>2]=o[l+4+8>>2];o[a+12>>2]=o[l+4+12>>2];o[f>>2]=o[l+20>>2];o[f+4>>2]=o[l+20+4>>2];o[f+8>>2]=o[l+20+8>>2];o[f+12>>2]=o[l+20+12>>2];o[s>>2]=o[l+36>>2];o[s+4>>2]=o[l+36+4>>2];o[s+8>>2]=o[l+36+8>>2];o[s+12>>2]=o[l+36+12>>2];f=1;p=l;return f|0}if(!(Hv(i,r,n,_,l+56|0,l)|0)){f=0;p=l;return f|0}o[a>>2]=o[l+4>>2];o[a+4>>2]=o[l+4+4>>2];o[a+8>>2]=o[l+4+8>>2];o[a+12>>2]=o[l+4+12>>2];o[f>>2]=o[l+20>>2];o[f+4>>2]=o[l+20+4>>2];o[f+8>>2]=o[l+20+8>>2];o[f+12>>2]=o[l+20+12>>2];o[s>>2]=o[l+36>>2];o[s+4>>2]=o[l+36+4>>2];o[s+8>>2]=o[l+36+8>>2];o[s+12>>2]=o[l+36+12>>2];f=0;p=l;return f|0}function iC(e){e=e|0;qa(e);return}function nC(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0;N=p;p=p+256|0;c[e+56>>2]=0;P=N+240+4|0;W=N+240+8|0;o[N+240>>2]=0;o[N+240+4>>2]=0;o[N+240+8>>2]=0;o[N+240+12>>2]=0;o[N+176>>2]=o[t>>2];o[N+176+4>>2]=o[t+4>>2];o[N+176+8>>2]=o[t+8>>2];o[N+176+12>>2]=o[t+12>>2];o[N+176+16>>2]=o[t+16>>2];o[N+176+16+4>>2]=o[t+16+4>>2];o[N+176+16+8>>2]=o[t+16+8>>2];o[N+176+16+12>>2]=o[t+16+12>>2];o[N+176+32>>2]=o[t+32>>2];o[N+176+32+4>>2]=o[t+32+4>>2];o[N+176+32+8>>2]=o[t+32+8>>2];o[N+176+32+12>>2]=o[t+32+12>>2];R=N+176+48|0;o[R>>2]=o[t+48>>2];o[R+4>>2]=o[t+48+4>>2];o[R+8>>2]=o[t+48+8>>2];o[R+12>>2]=o[t+48+12>>2];o[N+112>>2]=o[t+64>>2];o[N+112+4>>2]=o[t+64+4>>2];o[N+112+8>>2]=o[t+64+8>>2];o[N+112+12>>2]=o[t+64+12>>2];o[N+112+16>>2]=o[t+80>>2];o[N+112+16+4>>2]=o[t+80+4>>2];o[N+112+16+8>>2]=o[t+80+8>>2];o[N+112+16+12>>2]=o[t+80+12>>2];o[N+112+32>>2]=o[t+96>>2];o[N+112+32+4>>2]=o[t+96+4>>2];o[N+112+32+8>>2]=o[t+96+8>>2];o[N+112+32+12>>2]=o[t+96+12>>2];j=N+112+48|0;o[j>>2]=o[t+112>>2];o[j+4>>2]=o[t+112+4>>2];o[j+8>>2]=o[t+112+8>>2];o[j+12>>2]=o[t+112+12>>2];B=+c[R>>2];A=+c[j>>2];O=N+176+52|0;F=+c[O>>2];L=N+112+52|0;G=+c[L>>2];x=N+176+56|0;E=+c[x>>2];M=N+112+56|0;V=+c[M>>2];c[R>>2]=B-(B+A)*.5;c[O>>2]=F-(F+G)*.5;c[x>>2]=E-(E+V)*.5;c[j>>2]=A-(B+A)*.5;c[L>>2]=G-(F+G)*.5;c[M>>2]=V-(E+V)*.5;if(((o[(o[e+28>>2]|0)+4>>2]|0)+-17|0)>>>0<2)R=((o[(o[e+32>>2]|0)+4>>2]|0)+-17|0)>>>0<2;else R=0;C=+c[e+44>>2];v=+c[e+48>>2];o[5046]=(o[5046]|0)+1;j=n[e+52>>0]|0;o[e+64>>2]=0;o[e+4>>2]=0;o[e+8>>2]=1065353216;o[e+12>>2]=0;c[e+16>>2]=0;o[e+68>>2]=0;o[e+60>>2]=-1;y=o[e+24>>2]|0;n[y+312>>0]=0;o[y>>2]=0;n[y+356>>0]=1;o[y+292>>2]=1566444395;o[y+296>>2]=1566444395;o[y+300>>2]=1566444395;c[y+304>>2]=0;o[y+336>>2]=0;o[y+336+4>>2]=0;o[y+336+8>>2]=0;o[y+336+12>>2]=0;n[y+336+16>>0]=0;n[y+332>>0]=n[y+332>>0]&-16;y=0;l=0xde0b6b000000000;do{d=+c[e+4>>2];b=+c[e+8>>2];a=+c[e+12>>2];f=+c[t+4>>2]*-d+ +c[t+20>>2]*-b+ +c[t+36>>2]*-a;u=+c[t+8>>2]*-d+ +c[t+24>>2]*-b+ +c[t+40>>2]*-a;c[N+96>>2]=+c[t>>2]*-d+ +c[t+16>>2]*-b+ +c[t+32>>2]*-a;c[N+96+4>>2]=f;c[N+96+8>>2]=u;c[N+96+12>>2]=0;u=d*+c[t+68>>2]+b*+c[t+84>>2]+a*+c[t+100>>2];f=d*+c[t+72>>2]+b*+c[t+88>>2]+a*+c[t+104>>2];c[N+80>>2]=+c[t+64>>2]*d+ +c[t+80>>2]*b+ +c[t+96>>2]*a;c[N+80+4>>2]=u;c[N+80+8>>2]=f;c[N+80+12>>2]=0;IR(N+64|0,o[e+28>>2]|0,N+96|0);IR(N+48|0,o[e+32>>2]|0,N+80|0);f=+c[N+64>>2];u=+c[N+64+4>>2];a=+c[N+64+8>>2];b=f*+c[N+176>>2]+u*+c[N+176+4>>2]+a*+c[N+176+8>>2]+ +c[N+176+48>>2];d=f*+c[N+176+16>>2]+u*+c[N+176+20>>2]+a*+c[N+176+24>>2]+ +c[O>>2];a=f*+c[N+176+32>>2]+u*+c[N+176+36>>2]+a*+c[N+176+40>>2]+ +c[x>>2];u=+c[N+48>>2];f=+c[N+48+4>>2];g=+c[N+48+8>>2];h=u*+c[N+112>>2]+f*+c[N+112+4>>2]+g*+c[N+112+8>>2]+ +c[N+112+48>>2];m=u*+c[N+112+16>>2]+f*+c[N+112+20>>2]+g*+c[N+112+24>>2]+ +c[L>>2];g=u*+c[N+112+32>>2]+f*+c[N+112+36>>2]+g*+c[N+112+40>>2]+ +c[M>>2];f=R?0:g;u=R?0:a;g=(R?0:a)-(R?0:g);a=+c[e+4>>2]*(b-h)+ +c[e+8>>2]*(d-m)+ +c[e+12>>2]*g;if(a>0?a*a>l*+c[t+128>>2]:0){o[e+68>>2]=10;_=0;y=1}else H=7;do if((H|0)==7){H=0;w=o[e+24>>2]|0;k=o[w>>2]|0;e:do if((k|0)>0){s=+c[w+308>>2];_=0;while(1){S=b-h-+c[w+4+(_<<4)>>2];I=d-m-+c[w+4+(_<<4)+4>>2];T=g-+c[w+4+(_<<4)+8>>2];_=_+1|0;if(S*S+I*I+T*T<=s){_=1;break e}if((_|0)>=(k|0)){_=0;break}}}else _=0;while(0);if((+c[w+304>>2]==0?g==+c[w+300>>2]:0)?d-m==+c[w+296>>2]:0){if(b-h==+c[w+292>>2]|_)H=16}else H=15;if((H|0)==15?(H=0,_):0)H=16;if((H|0)==16){H=0;o[e+68>>2]=1;_=0;y=1;break}s=l-a;if(s<=l*9.999999974752427e-7){o[e+68>>2]=!(s<=0)?11:2;_=0;y=1;break}c[w+292>>2]=b-h;c[w+296>>2]=d-m;c[w+300>>2]=g;c[w+304>>2]=0;n[w+356>>0]=1;c[w+4+(k<<4)>>2]=b-h;c[w+4+(k<<4)+4>>2]=d-m;c[w+4+(k<<4)+8>>2]=g;c[w+4+(k<<4)+12>>2]=0;_=o[w>>2]|0;c[w+84+(_<<4)>>2]=b;c[w+84+(_<<4)+4>>2]=d;c[w+84+(_<<4)+8>>2]=u;c[w+84+(_<<4)+12>>2]=0;_=o[w>>2]|0;c[w+164+(_<<4)>>2]=h;c[w+164+(_<<4)+4>>2]=m;c[w+164+(_<<4)+8>>2]=f;c[w+164+(_<<4)+12>>2]=0;o[w>>2]=(o[w>>2]|0)+1;_=o[e+24>>2]|0;k=vC(_)|0;s=+c[_+276>>2];a=+c[_+280>>2];f=+c[_+284>>2];_=o[_+288>>2]|0;if(!k){o[e+68>>2]=3;_=0;y=1;break}if(s*s+a*a+f*f<9.999999974752427e-7){c[e+4>>2]=s;c[e+8>>2]=a;c[e+12>>2]=f;o[e+16>>2]=_;o[e+68>>2]=6;_=0;y=1;break}if(l-(s*s+a*a+f*f)<=l*1.1920928955078125e-7){o[e+68>>2]=12;_=0;y=1;l=s*s+a*a+f*f;break}c[e+4>>2]=s;c[e+8>>2]=a;c[e+12>>2]=f;o[e+16>>2]=_;k=o[e+64>>2]|0;o[e+64>>2]=k+1;if((k|0)<=1e3)if((o[o[e+24>>2]>>2]|0)==4){o[e+68>>2]=13;_=0;l=s*s+a*a+f*f}else{_=1;l=s*s+a*a+f*f}else{_=0;l=s*s+a*a+f*f}}while(0)}while(_);v=j<<24>>24==0?v:0;g=(j<<24>>24==0?C:0)+v;do if(y){j=o[e+24>>2]|0;vC(j)|0;f=+c[j+260>>2];a=+c[j+264>>2];b=+c[j+268>>2];o[N+240>>2]=o[e+4>>2];o[N+240+4>>2]=o[e+4+4>>2];o[N+240+8>>2]=o[e+4+8>>2];o[N+240+12>>2]=o[e+4+12>>2];s=+c[e+4>>2];u=+c[e+8>>2];d=+c[e+12>>2];if(s*s+u*u+d*d<1e-4)o[e+68>>2]=5;if(s*s+u*u+d*d>1.4210854715202004e-14){T=1/+X(+(s*s+u*u+d*d));c[N+240>>2]=T*+c[N+240>>2];c[P>>2]=T*+c[P>>2];c[W>>2]=T*+c[W>>2];I=v/+X(+l);o[e+60>>2]=1;l=1/T-g;w=1;f=I*s+f;T=I*u+a;I=I*d+b;break}else{o[e+60>>2]=2;l=0;w=0;T=a;I=b;break}}else{l=0;w=0;f=0;T=0;I=0}while(0);if(((o[e+72>>2]|0)!=0?(o[e+20>>2]|0)!=0:0)?(o[e+68>>2]|0)!=0:0)_=g+l<.01;else _=0;y=w^1;do if(_|y?(D=o[e+20>>2]|0,(D|0)!=0):0){o[5045]=(o[5045]|0)+1;o[e+4>>2]=0;o[e+4+4>>2]=0;o[e+4+8>>2]=0;o[e+4+12>>2]=0;if(!(cP[o[(o[D>>2]|0)+8>>2]&3](D,o[e+24>>2]|0,o[e+28>>2]|0,o[e+32>>2]|0,N+176|0,N+112|0,e+4|0,N+96|0,N+80|0,r)|0)){a=+c[e+4>>2];b=+c[e+8>>2];h=+c[e+12>>2];if(!(a*a+b*b+h*h>0)){if(w){a=T;s=I;break}p=N;return}u=+c[N+80>>2];C=+c[N+96>>2]-u;d=+c[N+80+4>>2];S=+c[N+96+4>>2]-d;m=+c[N+80+8>>2];s=+c[N+96+8>>2]-m;s=+X(+(C*C+S*S+s*s))-g;if(s<l|y){o[N+240>>2]=o[e+4>>2];o[N+240+4>>2]=o[e+4+4>>2];o[N+240+8>>2]=o[e+4+8>>2];o[N+240+12>>2]=o[e+4+12>>2];I=+c[N+240>>2];T=+c[P>>2];f=+c[W>>2];l=1/+X(+(I*I+T*T+f*f));c[N+240>>2]=I*l;c[P>>2]=T*l;c[W>>2]=f*l;o[e+60>>2]=6;l=s;f=v*a+u;a=v*b+d;s=v*h+m;break}o[e+60>>2]=5;if(w){a=T;s=I;break}p=N;return}S=+c[N+80>>2];b=+c[N+96>>2];a=+c[N+80+4>>2];d=+c[N+96+4>>2];s=+c[N+80+8>>2];h=+c[N+96+8>>2];if(!((S-b)*(S-b)+(a-d)*(a-d)+(s-h)*(s-h)<=1.4210854715202004e-14)){u=(S-b)*(S-b)+(a-d)*(a-d)+(s-h)*(s-h);m=S-b;g=s-h;v=0;C=a-d}else{m=+c[e+4>>2];C=+c[e+8>>2];g=+c[e+12>>2];u=m*m+C*C+g*g;v=+c[e+16>>2]}if(!(u>1.4210854715202004e-14)){o[e+60>>2]=9;if(w){a=T;s=I;break}p=N;return}u=1/+X(+u);b=-+X(+((b-S)*(b-S)+(d-a)*(d-a)+(h-s)*(h-s)));o[e+60>>2]=3;if(!(l>b|y)){o[e+60>>2]=8;if(w){a=T;s=I;break}p=N;return}T=g*u;g=C*u;m=m*u;c[N+240>>2]=m;c[P>>2]=g;c[W>>2]=T;c[N+240+12>>2]=v;l=m*+c[t+4>>2]+g*+c[t+20>>2]+T*+c[t+36>>2];f=m*+c[t+8>>2]+g*+c[t+24>>2]+T*+c[t+40>>2];c[N+64>>2]=+c[t>>2]*m+ +c[t+16>>2]*g+ +c[t+32>>2]*T;c[N+64+4>>2]=l;c[N+64+8>>2]=f;c[N+64+12>>2]=0;f=+c[t+68>>2]*-m+ +c[t+84>>2]*-g+ +c[t+100>>2]*-T;l=+c[t+72>>2]*-m+ +c[t+88>>2]*-g+ +c[t+104>>2]*-T;c[N+48>>2]=+c[t+64>>2]*-m+ +c[t+80>>2]*-g+ +c[t+96>>2]*-T;c[N+48+4>>2]=f;c[N+48+8>>2]=l;c[N+48+12>>2]=0;IR(N+32|0,o[e+28>>2]|0,N+64|0);IR(N+16|0,o[e+32>>2]|0,N+48|0);l=+c[N+32>>2];f=+c[N+32+4>>2];T=+c[N+32+8>>2];g=+c[N+16>>2];m=+c[N+16+4>>2];h=+c[N+16+8>>2];I=+c[N+240>>2];C=+c[P>>2];v=+c[W>>2];h=-((l*+c[N+176+16>>2]+f*+c[N+176+20>>2]+T*+c[N+176+24>>2]+ +c[O>>2]-(g*+c[N+112+16>>2]+m*+c[N+112+20>>2]+h*+c[N+112+24>>2]+ +c[L>>2]))*C)-(l*+c[N+176>>2]+f*+c[N+176+4>>2]+T*+c[N+176+8>>2]+ +c[N+176+48>>2]-(g*+c[N+112>>2]+m*+c[N+112+4>>2]+h*+c[N+112+8>>2]+ +c[N+112+48>>2]))*I-(l*+c[N+176+32>>2]+f*+c[N+176+36>>2]+T*+c[N+176+40>>2]+ +c[x>>2]-(g*+c[N+112+32>>2]+m*+c[N+112+36>>2]+h*+c[N+112+40>>2]+ +c[M>>2]))*v;m=+c[t+4>>2]*-I+ +c[t+20>>2]*-C+ +c[t+36>>2]*-v;g=+c[t+8>>2]*-I+ +c[t+24>>2]*-C+ +c[t+40>>2]*-v;c[N+64>>2]=+c[t>>2]*-I+ +c[t+16>>2]*-C+ +c[t+32>>2]*-v;c[N+64+4>>2]=m;c[N+64+8>>2]=g;c[N+64+12>>2]=0;g=I*+c[t+68>>2]+C*+c[t+84>>2]+v*+c[t+100>>2];m=I*+c[t+72>>2]+C*+c[t+88>>2]+v*+c[t+104>>2];c[N+48>>2]=+c[t+64>>2]*I+ +c[t+80>>2]*C+ +c[t+96>>2]*v;c[N+48+4>>2]=g;c[N+48+8>>2]=m;c[N+48+12>>2]=0;IR(N+32|0,o[e+28>>2]|0,N+64|0);IR(N+16|0,o[e+32>>2]|0,N+48|0);m=+c[N+32>>2];g=+c[N+32+4>>2];v=+c[N+32+8>>2];C=+c[N+16>>2];I=+c[N+16+4>>2];T=+c[N+16+8>>2];f=+c[N+240>>2];l=+c[P>>2];u=+c[W>>2];if(h>(m*+c[N+176>>2]+g*+c[N+176+4>>2]+v*+c[N+176+8>>2]+ +c[N+176+48>>2]-(C*+c[N+112>>2]+I*+c[N+112+4>>2]+T*+c[N+112+8>>2]+ +c[N+112+48>>2]))*f+(m*+c[N+176+16>>2]+g*+c[N+176+20>>2]+v*+c[N+176+24>>2]+ +c[O>>2]-(C*+c[N+112+16>>2]+I*+c[N+112+20>>2]+T*+c[N+112+24>>2]+ +c[L>>2]))*l+(m*+c[N+176+32>>2]+g*+c[N+176+36>>2]+v*+c[N+176+40>>2]+ +c[x>>2]-(C*+c[N+112+32>>2]+I*+c[N+112+36>>2]+T*+c[N+112+40>>2]+ +c[M>>2]))*u){o[e+60>>2]=10;c[N+240>>2]=-f;c[P>>2]=-l;c[W>>2]=-u}l=b;f=S}else H=56;while(0);if((H|0)==56)if(w){a=T;s=I}else{p=N;return;\n}if(!(l<0)?!(l*l<+c[t+128>>2]):0){p=N;return}o[e+4>>2]=o[N+240>>2];o[e+4+4>>2]=o[N+240+4>>2];o[e+4+8>>2]=o[N+240+8>>2];o[e+4+12>>2]=o[N+240+12>>2];c[e+56>>2]=l;H=o[(o[i>>2]|0)+16>>2]|0;c[N>>2]=(B+A)*.5+f;c[N+4>>2]=(F+G)*.5+a;c[N+8>>2]=(E+V)*.5+s;c[N+12>>2]=0;GP[H&15](i,N+240|0,N,l);p=N;return}function rC(e){e=e|0;qa(e);return}function oC(e,t,i,r,_,s,a,f,l,b){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;l=l|0;b=b|0;var d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;I=p;p=p+4224|0;if(((o[i+4>>2]|0)+-17|0)>>>0<2)j=((o[r+4>>2]|0)+-17|0)>>>0<2;else j=0;e=0;do{_C();g=+c[20188+(e<<4)>>2];v=+c[20188+(e<<4)+4>>2];C=+c[20188+(e<<4)+8>>2];S=+c[_+4>>2]*-g+ +c[_+20>>2]*-v+ +c[_+36>>2]*-C;w=+c[_+8>>2]*-g+ +c[_+24>>2]*-v+ +c[_+40>>2]*-C;c[I+1248+(e<<4)>>2]=+c[_>>2]*-g+ +c[_+16>>2]*-v+ +c[_+32>>2]*-C;c[I+1248+(e<<4)+4>>2]=S;c[I+1248+(e<<4)+8>>2]=w;c[I+1248+(e<<4)+12>>2]=0;w=g*+c[s+4>>2]+v*+c[s+20>>2]+C*+c[s+36>>2];S=g*+c[s+8>>2]+v*+c[s+24>>2]+C*+c[s+40>>2];c[I+256+(e<<4)>>2]=g*+c[s>>2]+v*+c[s+16>>2]+C*+c[s+32>>2];c[I+256+(e<<4)+4>>2]=w;c[I+256+(e<<4)+8>>2]=S;c[I+256+(e<<4)+12>>2]=0;e=e+1|0}while((e|0)!=42);e=fP[o[(o[i>>2]|0)+84>>2]&127](i)|0;if((e|0)>0){h=0;m=42;while(1){EP[o[(o[i>>2]|0)+88>>2]&127](i,h,I+176|0);w=+c[I+176>>2];S=+c[I+176+4>>2];C=+c[I+176+8>>2];v=w*+c[_+16>>2]+S*+c[_+20>>2]+C*+c[_+24>>2];g=w*+c[_+32>>2]+S*+c[_+36>>2]+C*+c[_+40>>2];c[I+176>>2]=+c[_>>2]*w+ +c[_+4>>2]*S+ +c[_+8>>2]*C;c[I+176+4>>2]=v;c[I+176+8>>2]=g;c[I+176+12>>2]=0;_C();R=20188+(m<<4)|0;o[R>>2]=o[I+176>>2];o[R+4>>2]=o[I+176+4>>2];o[R+8>>2]=o[I+176+8>>2];o[R+12>>2]=o[I+176+12>>2];g=+c[I+176>>2];v=+c[I+176+4>>2];C=+c[I+176+8>>2];S=+c[_+4>>2]*-g+ +c[_+20>>2]*-v+ +c[_+36>>2]*-C;w=+c[_+8>>2]*-g+ +c[_+24>>2]*-v+ +c[_+40>>2]*-C;c[I+1248+(m<<4)>>2]=+c[_>>2]*-g+ +c[_+16>>2]*-v+ +c[_+32>>2]*-C;c[I+1248+(m<<4)+4>>2]=S;c[I+1248+(m<<4)+8>>2]=w;c[I+1248+(m<<4)+12>>2]=0;w=g*+c[s+4>>2]+v*+c[s+20>>2]+C*+c[s+36>>2];S=g*+c[s+8>>2]+v*+c[s+24>>2]+C*+c[s+40>>2];c[I+256+(m<<4)>>2]=+c[s>>2]*g+ +c[s+16>>2]*v+ +c[s+32>>2]*C;c[I+256+(m<<4)+4>>2]=w;c[I+256+(m<<4)+8>>2]=S;c[I+256+(m<<4)+12>>2]=0;h=h+1|0;if((h|0)==(e|0))break;else m=m+1|0}m=e+42|0}else m=42;e=fP[o[(o[r>>2]|0)+84>>2]&127](r)|0;if((e|0)>0){h=0;y=m;while(1){EP[o[(o[r>>2]|0)+88>>2]&127](r,h,I+176|0);w=+c[I+176>>2];S=+c[I+176+4>>2];C=+c[I+176+8>>2];v=w*+c[s+16>>2]+S*+c[s+20>>2]+C*+c[s+24>>2];g=w*+c[s+32>>2]+S*+c[s+36>>2]+C*+c[s+40>>2];c[I+176>>2]=+c[s>>2]*w+ +c[s+4>>2]*S+ +c[s+8>>2]*C;c[I+176+4>>2]=v;c[I+176+8>>2]=g;c[I+176+12>>2]=0;_C();R=20188+(y<<4)|0;o[R>>2]=o[I+176>>2];o[R+4>>2]=o[I+176+4>>2];o[R+8>>2]=o[I+176+8>>2];o[R+12>>2]=o[I+176+12>>2];g=+c[I+176>>2];v=+c[I+176+4>>2];C=+c[I+176+8>>2];S=+c[_+4>>2]*-g+ +c[_+20>>2]*-v+ +c[_+36>>2]*-C;w=+c[_+8>>2]*-g+ +c[_+24>>2]*-v+ +c[_+40>>2]*-C;c[I+1248+(y<<4)>>2]=+c[_>>2]*-g+ +c[_+16>>2]*-v+ +c[_+32>>2]*-C;c[I+1248+(y<<4)+4>>2]=S;c[I+1248+(y<<4)+8>>2]=w;c[I+1248+(y<<4)+12>>2]=0;w=g*+c[s+4>>2]+v*+c[s+20>>2]+C*+c[s+36>>2];S=g*+c[s+8>>2]+v*+c[s+24>>2]+C*+c[s+40>>2];c[I+256+(y<<4)>>2]=+c[s>>2]*g+ +c[s+16>>2]*v+ +c[s+32>>2]*C;c[I+256+(y<<4)+4>>2]=w;c[I+256+(y<<4)+8>>2]=S;c[I+256+(y<<4)+12>>2]=0;h=h+1|0;if((h|0)==(e|0))break;else y=y+1|0}m=e+m|0}HP[o[(o[i>>2]|0)+76>>2]&127](i,I+1248|0,I+3232|0,m);HP[o[(o[r>>2]|0)+76>>2]&127](r,I+256|0,I+2240|0,m);if((m|0)>0){R=0;e=0;h=0;y=0;w=0;v=0xde0b6b000000000;while(1){_C();d=+c[20188+(R<<4)>>2];g=+c[20188+(R<<4)+4>>2];S=+c[20188+(R<<4)+12>>2];C=j?0:+c[20188+(R<<4)+8>>2];if(d*d+g*g+C*C>.01?(D=+c[I+3232+(R<<4)>>2],T=+c[I+3232+(R<<4)+4>>2],k=+c[I+3232+(R<<4)+8>>2],x=+c[I+2240+(R<<4)>>2],L=+c[I+2240+(R<<4)+4>>2],O=+c[I+2240+(R<<4)+8>>2],k=d*(x*+c[s>>2]+L*+c[s+4>>2]+O*+c[s+8>>2]+ +c[s+48>>2]-(D*+c[_>>2]+T*+c[_+4>>2]+k*+c[_+8>>2]+ +c[_+48>>2]))+g*(x*+c[s+16>>2]+L*+c[s+20>>2]+O*+c[s+24>>2]+ +c[s+52>>2]-(D*+c[_+16>>2]+T*+c[_+20>>2]+k*+c[_+24>>2]+ +c[_+52>>2]))+C*((j?0:x*+c[s+32>>2]+L*+c[s+36>>2]+O*+c[s+40>>2]+ +c[s+56>>2])-(j?0:D*+c[_+32>>2]+T*+c[_+36>>2]+k*+c[_+40>>2]+ +c[_+56>>2])),k<v):0){e=(c[u>>2]=d,o[u>>2]|0);h=(c[u>>2]=g,o[u>>2]|0);y=(c[u>>2]=C,o[u>>2]|0);v=k}else S=w;R=R+1|0;if((R|0)==(m|0)){R=e;m=y;break}else w=S}}else{R=0;h=0;m=0;S=0;v=0xde0b6b000000000}switch(o[i+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+wP[o[(o[i>>2]|0)+48>>2]&15](i)}C=(o[u>>2]=R,+c[u>>2]);w=(o[u>>2]=h,+c[u>>2]);k=(o[u>>2]=m,+c[u>>2]);switch(o[r+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+wP[o[(o[r>>2]|0)+48>>2]&15](r)}if(v<0){a=0;p=I;return a|0}switch(o[i+4>>2]|0){case 8:{d=+c[i+32>>2]*+c[i+16>>2];break}case 0:{d=+c[i+48>>2];break}case 1:{d=+c[i+48>>2];break}case 13:{d=+c[i+48>>2];break}case 11:{d=+c[i+48>>2];break}case 10:{d=+c[i+48>>2];break}case 4:case 5:{d=+c[i+48>>2];break}default:d=+wP[o[(o[i>>2]|0)+48>>2]&15](i)}e=o[r+4>>2]|0;switch(e|0){case 8:{g=+c[r+32>>2]*+c[r+16>>2];e=8;break}case 0:{g=+c[r+48>>2];e=0;break}case 1:{g=+c[r+48>>2];e=1;break}case 13:{g=+c[r+48>>2];e=13;break}case 11:{g=+c[r+48>>2];e=11;break}case 10:{g=+c[r+48>>2];e=10;break}case 4:case 5:{g=+c[r+48>>2];break}default:{g=+wP[o[(o[r>>2]|0)+48>>2]&15](r);e=o[r+4>>2]|0}}d=v+(d+g+.5);o[I+176>>2]=6928;o[I+176+4>>2]=0;o[I+176+8>>2]=1065353216;o[I+176+12>>2]=0;c[I+176+16>>2]=0;o[I+176+20>>2]=0;o[I+176+24>>2]=t;o[I+176+28>>2]=i;o[I+176+32>>2]=r;o[I+176+36>>2]=o[i+4>>2];o[I+176+40>>2]=e;c[I+176+44>>2]=+wP[o[(o[i>>2]|0)+48>>2]&15](i);c[I+176+48>>2]=+wP[o[(o[r>>2]|0)+48>>2]&15](r);n[I+176+52>>0]=0;o[I+176+60>>2]=-1;o[I+176+72>>2]=1;o[I+176+76>>2]=1;O=C*d+ +c[_+48>>2];L=w*d+ +c[_+52>>2];x=k*d+ +c[_+56>>2];o[I+44>>2]=o[_>>2];o[I+44+4>>2]=o[_+4>>2];o[I+44+8>>2]=o[_+8>>2];o[I+44+12>>2]=o[_+12>>2];o[I+44+16>>2]=o[_+16>>2];o[I+44+16+4>>2]=o[_+16+4>>2];o[I+44+16+8>>2]=o[_+16+8>>2];o[I+44+16+12>>2]=o[_+16+12>>2];o[I+44+32>>2]=o[_+32>>2];o[I+44+32+4>>2]=o[_+32+4>>2];o[I+44+32+8>>2]=o[_+32+8>>2];o[I+44+32+12>>2]=o[_+32+12>>2];c[I+44+48>>2]=O;c[I+44+52>>2]=L;c[I+44+56>>2]=x;c[I+44+60>>2]=0;o[I+44+64>>2]=o[s>>2];o[I+44+64+4>>2]=o[s+4>>2];o[I+44+64+8>>2]=o[s+8>>2];o[I+44+64+12>>2]=o[s+12>>2];o[I+44+80>>2]=o[s+16>>2];o[I+44+80+4>>2]=o[s+16+4>>2];o[I+44+80+8>>2]=o[s+16+8>>2];o[I+44+80+12>>2]=o[s+16+12>>2];o[I+44+96>>2]=o[s+32>>2];o[I+44+96+4>>2]=o[s+32+4>>2];o[I+44+96+8>>2]=o[s+32+8>>2];o[I+44+96+12>>2]=o[s+32+12>>2];o[I+44+112>>2]=o[s+48>>2];o[I+44+112+4>>2]=o[s+48+4>>2];o[I+44+112+8>>2]=o[s+48+8>>2];o[I+44+112+12>>2]=o[s+48+12>>2];c[I+44+128>>2]=0xde0b6b000000000;o[I>>2]=6968;n[I+40>>0]=0;c[I+176+4>>2]=-C;c[I+176+8>>2]=-w;c[I+176+12>>2]=-k;c[I+176+16>>2]=0;nC(I+176|0,I+44|0,I,b,0);d=d-+c[I+36>>2];e=n[I+40>>0]|0;if(e<<24>>24){L=+c[I+24>>2]-w*d;x=+c[I+28>>2]-k*d;c[f>>2]=+c[I+20>>2]-C*d;c[f+4>>2]=L;c[f+8>>2]=x;c[f+12>>2]=0;o[l>>2]=o[I+20>>2];o[l+4>>2]=o[I+20+4>>2];o[l+8>>2]=o[I+20+8>>2];o[l+12>>2]=o[I+20+12>>2];o[a>>2]=R;o[a+4>>2]=h;o[a+8>>2]=m;c[a+12>>2]=S}a=e<<24>>24!=0;p=I;return a|0}function _C(){if(n[19864]|0)return;n[19864]=1;o[5047]=0;o[5048]=-2147483648;o[5049]=-1082130432;c[5050]=0;o[5051]=1060716128;o[5052]=-1090087446;o[5053]=-1092290076;c[5054]=0;o[5055]=-1098022214;o[5056]=-1084636126;o[5057]=-1092290076;c[5058]=0;o[5059]=-1083901670;o[5060]=-2147483648;o[5061]=-1092290177;c[5062]=0;o[5063]=-1098022214;o[5064]=1062847522;o[5065]=-1092290043;c[5066]=0;o[5067]=1060716128;o[5068]=1057396202;o[5069]=-1092290076;c[5070]=0;o[5071]=1049461434;o[5072]=-1084636126;o[5073]=1055193605;c[5074]=0;o[5075]=-1086767520;o[5076]=-1090087446;o[5077]=1055193572;c[5078]=0;o[5079]=-1086767520;o[5080]=1057396202;o[5081]=1055193572;c[5082]=0;o[5083]=1049461434;o[5084]=1062847522;o[5085]=1055193572;c[5086]=0;o[5087]=1063581978;o[5088]=0;o[5089]=1055193471;c[5090]=0;o[5091]=-2147483648;o[5092]=0;o[5093]=1065353216;c[5094]=0;o[5095]=1054458864;o[5096]=-1096927567;o[5097]=-1084636042;c[5098]=0;o[5099]=-1104782626;o[5100]=-1090519208;o[5101]=-1084636042;c[5102]=0;o[5103]=1049007812;o[5104]=-1085334679;o[5105]=-1090087228;c[5106]=0;o[5107]=1054458864;o[5108]=1050556081;o[5109]=-1084636042;c[5110]=0;o[5111]=1062847505;o[5112]=-2147483648;o[5113]=-1090087262;c[5114]=0;o[5115]=-1090087362;o[5116]=-2147483648;o[5117]=-1084636076;c[5118]=0;o[5119]=-1087361736;o[5120]=-1090519141;o[5121]=-1090087262;c[5122]=0;o[5123]=-1104782626;o[5124]=1056964440;o[5125]=-1084636042;c[5126]=0;o[5127]=-1087361736;o[5128]=1056964507;o[5129]=-1090087262;c[5130]=0;o[5131]=1049007812;o[5132]=1062148969;o[5133]=-1090087228;c[5134]=0;o[5135]=1064532105;o[5136]=1050556148;o[5137]=0;c[5138]=0;o[5139]=1064532105;o[5140]=-1096927500;o[5141]=0;c[5142]=0;o[5143]=1058437413;o[5144]=-1085334595;o[5145]=0;c[5146]=0;o[5147]=0;o[5148]=-1082130432;o[5149]=0;c[5150]=0;o[5151]=-1089046235;o[5152]=-1085334595;o[5153]=0;c[5154]=0;o[5155]=-1082951543;o[5156]=-1096927500;o[5157]=-2147483648;c[5158]=0;o[5159]=-1082951543;o[5160]=1050556148;o[5161]=-2147483648;c[5162]=0;o[5163]=-1089046235;o[5164]=1062149053;o[5165]=-2147483648;c[5166]=0;o[5167]=-2147483648;o[5168]=1065353216;o[5169]=-2147483648;c[5170]=0;o[5171]=1058437413;o[5172]=1062149053;o[5173]=-2147483648;c[5174]=0;o[5175]=1060121912;o[5176]=-1090519141;o[5177]=1057396386;c[5178]=0;o[5179]=-1098475836;o[5180]=-1085334679;o[5181]=1057396420;c[5182]=0;o[5183]=-1084636143;o[5184]=0;o[5185]=1057396386;c[5186]=0;o[5187]=-1098475836;o[5188]=1062148969;o[5189]=1057396420;c[5190]=0;o[5191]=1060121912;o[5192]=1056964507;o[5193]=1057396386;c[5194]=0;o[5195]=1057396286;o[5196]=0;o[5197]=1062847572;c[5198]=0;o[5199]=1042701022;o[5200]=-1090519208;o[5201]=1062847606;c[5202]=0;o[5203]=-1093024784;o[5204]=-1096927567;o[5205]=1062847606;c[5206]=0;o[5207]=-1093024784;o[5208]=1050556081;o[5209]=1062847606;c[5210]=0;o[5211]=1042701022;o[5212]=1056964440;o[5213]=1062847606;c[5214]=0;return}function sC(e){e=e|0;qa(e);return}function aC(e,t,i){e=e|0;t=t|0;i=i|0;return}function cC(e,t,i){e=e|0;t=t|0;i=i|0;return}function fC(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2];o[e+20>>2]=o[i>>2];o[e+20+4>>2]=o[i+4>>2];o[e+20+8>>2]=o[i+8>>2];o[e+20+12>>2]=o[i+12>>2];c[e+36>>2]=r;n[e+40>>0]=1;return}function pC(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;i=o[e+748>>2]|0;if((i|0)!=4){o[e+748>>2]=i+1;k=i;w=(k|0)<0;k=w?0:k;e=e+4+(k*184|0)|0;Wc(e|0,t|0,184)|0;return k|0}S=+c[t+80>>2];C=+c[e+84>>2];v=C<S?C:S;g=+c[e+268>>2];y=g<v?g:v;m=+c[e+452>>2];w=+c[e+636>>2]<(m<y?m:y);i=w?3:m<y?2:g<v?1:(C<S^1)<<31>>31;S=+c[t>>2];if(i){n=+c[e+188>>2];d=+c[t+4>>2];p=+c[e+192>>2];s=+c[t+8>>2];a=+c[e+196>>2];b=+c[e+556>>2];v=+c[e+372>>2];m=+c[e+560>>2];C=+c[e+376>>2];g=+c[e+564>>2];l=+c[e+380>>2];_=(c[u>>2]=((S-n)*(m-C)-(d-p)*(b-v))*((S-n)*(m-C)-(d-p)*(b-v))+(((d-p)*(g-l)-(s-a)*(m-C))*((d-p)*(g-l)-(s-a)*(m-C))+((s-a)*(b-v)-(S-n)*(g-l))*((s-a)*(b-v)-(S-n)*(g-l))),o[u>>2]|0);if((i|0)==1){f=+c[e+8>>2];h=+c[e+12>>2];y=m;m=+c[e+4>>2];r=0;k=7}else{y=m;k=6}}else{n=+c[e+188>>2];p=+c[e+192>>2];a=+c[e+196>>2];d=+c[t+4>>2];s=+c[t+8>>2];b=+c[e+556>>2];v=+c[e+372>>2];y=+c[e+560>>2];C=+c[e+376>>2];g=+c[e+564>>2];l=+c[e+380>>2];_=0;k=6}if((k|0)==6){m=+c[e+4>>2];f=+c[e+8>>2];D=d-f;h=+c[e+12>>2];I=s-h;j=b-v;T=y-C;R=g-l;r=(c[u>>2]=((S-m)*T-D*j)*((S-m)*T-D*j)+((D*R-I*T)*(D*R-I*T)+(I*j-(S-m)*R)*(I*j-(S-m)*R)),o[u>>2]|0);if((i|0)==2){y=v;b=C;i=0;k=8}else k=7}if((k|0)==7){T=S-m;O=d-f;j=s-h;I=b-n;R=y-p;D=g-a;i=(c[u>>2]=(T*R-O*I)*(T*R-O*I)+((O*D-j*R)*(O*D-j*R)+(j*I-T*D)*(j*I-T*D)),o[u>>2]|0);if(w)n=0;else{y=v;b=C;k=8}}if((k|0)==8){O=S-m;j=d-f;T=s-h;D=y-n;I=b-p;n=l-a;n=(O*I-j*D)*(O*I-j*D)+((j*n-T*I)*(j*n-T*I)+(T*D-O*n)*(T*D-O*n))}O=+N(+(o[u>>2]=_,+c[u>>2]));T=+N(+(o[u>>2]=r,+c[u>>2]));j=+N(+(o[u>>2]=i,+c[u>>2]));R=+N(+n);D=O>-0xde0b6b000000000?O:-0xde0b6b000000000;I=T>D?T:D;k=R>(j>I?j:I)?3:j>I?2:T>D?1:(O>-0xde0b6b000000000^1)<<31>>31;w=(k|0)<0;k=w?0:k;e=e+4+(k*184|0)|0;Wc(e|0,t|0,184)|0;return k|0}function lC(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;r=o[e+748>>2]|0;if((r|0)<=0)return;do{f=r;r=r+-1|0;d=+c[e+4+(r*184|0)>>2];h=+c[e+4+(r*184|0)+4>>2];_=+c[e+4+(r*184|0)+8>>2];b=d*+c[t>>2]+h*+c[t+4>>2]+_*+c[t+8>>2]+ +c[t+48>>2];l=d*+c[t+16>>2]+h*+c[t+20>>2]+_*+c[t+24>>2]+ +c[t+52>>2];_=d*+c[t+32>>2]+h*+c[t+36>>2]+_*+c[t+40>>2]+ +c[t+56>>2];c[e+4+(r*184|0)+48>>2]=b;c[e+4+(r*184|0)+52>>2]=l;c[e+4+(r*184|0)+56>>2]=_;c[e+4+(r*184|0)+60>>2]=0;h=+c[e+4+(r*184|0)+16>>2];d=+c[e+4+(r*184|0)+20>>2];s=+c[e+4+(r*184|0)+24>>2];u=h*+c[i>>2]+d*+c[i+4>>2]+s*+c[i+8>>2]+ +c[i+48>>2];p=h*+c[i+16>>2]+d*+c[i+20>>2]+s*+c[i+24>>2]+ +c[i+52>>2];s=h*+c[i+32>>2]+d*+c[i+36>>2]+s*+c[i+40>>2]+ +c[i+56>>2];c[e+4+(r*184|0)+32>>2]=u;c[e+4+(r*184|0)+36>>2]=p;c[e+4+(r*184|0)+40>>2]=s;c[e+4+(r*184|0)+44>>2]=0;c[e+4+(r*184|0)+80>>2]=(b-u)*+c[e+4+(r*184|0)+64>>2]+(l-p)*+c[e+4+(r*184|0)+68>>2]+(_-s)*+c[e+4+(r*184|0)+72>>2];a=e+4+(r*184|0)+148|0;o[a>>2]=(o[a>>2]|0)+1}while((f|0)>1);r=o[e+748>>2]|0;if((r|0)<=0)return;i=r;a=r;while(1){f=a;a=a+-1|0;t=e+4+(a*184|0)|0;_=+c[e+4+(a*184|0)+80>>2];s=+c[e+752>>2];if(_<=s){b=+c[e+4+(a*184|0)+32>>2]-(+c[e+4+(a*184|0)+48>>2]-+c[e+4+(a*184|0)+64>>2]*_);d=+c[e+4+(a*184|0)+36>>2]-(+c[e+4+(a*184|0)+52>>2]-_*+c[e+4+(a*184|0)+68>>2]);h=+c[e+4+(a*184|0)+40>>2]-(+c[e+4+(a*184|0)+56>>2]-_*+c[e+4+(a*184|0)+72>>2]);if(b*b+d*d+h*h>s*s){r=i+-1|0;if((r|0)==(a|0))r=i;else{Wc(t|0,e+4+(r*184|0)|0,184)|0;o[e+4+(r*184|0)+112>>2]=0;c[e+4+(r*184|0)+120>>2]=0;n[e+4+(r*184|0)+116>>0]=0;c[e+4+(r*184|0)+124>>2]=0;c[e+4+(r*184|0)+128>>2]=0;o[e+4+(r*184|0)+148>>2]=0;r=o[e+748>>2]|0}r=r+-1|0;o[e+748>>2]=r}else r=i}else{r=i+-1|0;if((r|0)==(a|0))r=i;else{Wc(t|0,e+4+(r*184|0)|0,184)|0;o[e+4+(r*184|0)+112>>2]=0;c[e+4+(r*184|0)+120>>2]=0;n[e+4+(r*184|0)+116>>0]=0;c[e+4+(r*184|0)+124>>2]=0;c[e+4+(r*184|0)+128>>2]=0;o[e+4+(r*184|0)+148>>2]=0;r=o[e+748>>2]|0}r=r+-1|0;o[e+748>>2]=r}if((f|0)<=1)break;else i=r}return}function uC(e,t,i,n,r,o,_,s,a,f,p){e=e|0;t=t|0;i=+i;n=+n;r=+r;o=+o;_=+_;s=+s;a=a|0;f=f|0;p=+p;var l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;k=+c[e>>2]*o+ +c[e+16>>2]*_+ +c[e+32>>2]*s;C=+c[e+4>>2]*o+ +c[e+20>>2]*_+ +c[e+36>>2]*s;g=+c[e+8>>2]*o+ +c[e+24>>2]*_+ +c[e+40>>2]*s;y=+c[t>>2]*o+ +c[t+16>>2]*_+ +c[t+32>>2]*s;h=+c[t+4>>2]*o+ +c[t+20>>2]*_+ +c[t+36>>2]*s;b=+c[t+8>>2]*o+ +c[t+24>>2]*_+ +c[t+40>>2]*s;w=+c[a+80>>2];v=+c[a+84>>2];d=+c[a+88>>2];m=+c[f+80>>2];l=+c[f+84>>2];u=+c[f+88>>2];d=k*(k<0?-w:w)+C*(C<0?-v:v)+g*(g<0?-d:d);u=y*(y<0?-m:m)+h*(h<0?-l:l)+b*(b<0?-u:u);b=+c[a+96>>2];l=+c[f+96>>2];l=(d>b?d:b)+(u>l?u:l);return!((i*o+n*_+r*s+l<l-(i*o+n*_+r*s)?i*o+n*_+r*s+l:l-(i*o+n*_+r*s))>p)|0}function bC(e,t,i,r,_,s,a){e=e|0;t=t|0;i=i|0;r=r|0;_=+_;s=+s;a=a|0;var f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0;K=p;p=p+64|0;n[K+32+16>>0]=1;Y=K+32+12|0;o[Y>>2]=0;o[K+32+4>>2]=0;o[K+32+8>>2]=0;h=o[r+4>>2]|0;if((h|0)>0){o[5637]=(o[5637]|0)+1;f=Qa((h<<4|3)+16|0)|0;if(!f)b=0;else{o[(f+4+15&-16)+-4>>2]=f;b=f+4+15&-16}f=o[K+32+4>>2]|0;if((f|0)>0){l=0;do{z=b+(l<<4)|0;U=(o[Y>>2]|0)+(l<<4)|0;o[z>>2]=o[U>>2];o[z+4>>2]=o[U+4>>2];o[z+8>>2]=o[U+8>>2];o[z+12>>2]=o[U+12>>2];l=l+1|0}while((l|0)!=(f|0))}f=o[Y>>2]|0;if(f|0){if(n[K+32+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}o[Y>>2]=0}n[K+32+16>>0]=1;o[Y>>2]=b;o[K+32+8>>2]=h}f=o[t+28>>2]|0;if((f|0)>0){U=o[t+36>>2]|0;j=+c[i>>2];I=+c[i+4>>2];O=+c[i+8>>2];L=+c[i+16>>2];x=+c[i+20>>2];y=+c[i+24>>2];m=+c[i+32>>2];d=+c[i+36>>2];u=+c[i+40>>2];g=+c[e>>2];v=+c[e+4>>2];C=+c[e+8>>2];z=-1;R=3.4028234663852886e38;b=0;while(1){w=+c[U+(b*36|0)+20>>2];k=+c[U+(b*36|0)+24>>2];S=+c[U+(b*36|0)+28>>2];l=(w*j+k*I+S*O)*g+(w*L+k*x+S*y)*v+(w*m+k*d+S*u)*C<R;z=l?b:z;b=b+1|0;if((b|0)==(f|0))break;else R=l?(w*j+k*I+S*O)*g+(w*L+k*x+S*y)*v+(w*m+k*d+S*u)*C:R}if((z|0)>=0){A=o[U+(z*36|0)+4>>2]|0;if((A|0)>0){F=U+(z*36|0)+12|0;G=U+(z*36|0)+20|0;E=U+(z*36|0)+24|0;V=U+(z*36|0)+28|0;g=j;k=I;w=O;C=L;v=x;B=0;W=r;r=K+32|0;while(1){P=o[F>>2]|0;f=o[P+(B<<2)>>2]|0;M=o[t+16>>2]|0;B=B+1|0;P=o[P+(((B|0)==(A|0)?0:B)<<2)>>2]|0;q=+c[M+(f<<4)>>2];J=q-+c[M+(P<<4)>>2];Q=+c[M+(f<<4)+4>>2];$=Q-+c[M+(P<<4)+4>>2];S=+c[M+(f<<4)+8>>2];I=S-+c[M+(P<<4)+8>>2];R=J*g+$*k+I*w;j=J*C+$*v+I*y;I=J*m+$*d+I*u;$=+c[G>>2];J=+c[E>>2];x=+c[V>>2];O=g*$+k*J+w*x;L=C*$+v*J+y*x;x=m*$+d*J+u*x;v=(q*g+Q*k+S*w+ +c[i+48>>2])*-(j*x-I*L)+(q*C+Q*v+S*y+ +c[i+52>>2])*-(I*O-R*x)+(q*m+Q*d+S*u+ +c[i+56>>2])*-(R*L-j*O);P=W;M=r;f=o[P+4>>2]|0;if((f|0)>=2){b=o[P+12>>2]|0;d=+c[b+(f+-1<<4)>>2];m=+c[b+(f+-1<<4)+4>>2];y=+c[b+(f+-1<<4)+8>>2];u=d*-(j*x-I*L)+m*-(I*O-R*x)+y*-(R*L-j*O)-v;D=0;while(1){C=+c[b+(D<<4)>>2];w=+c[b+(D<<4)+4>>2];k=+c[b+(D<<4)+8>>2];T=o[b+(D<<4)+12>>2]|0;S=C*-(j*x-I*L)+w*-(I*O-R*x)+k*-(R*L-j*O)-v;do if(u<0)if(S<0){l=o[M+4>>2]|0;if((l|0)==(o[M+8>>2]|0)?(N=l|0?l<<1:1,(l|0)<(N|0)):0){if(!N)h=0;else{o[5637]=(o[5637]|0)+1;l=Qa((N<<4|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}h=l;l=o[M+4>>2]|0}if((l|0)>0){b=0;do{ee=h+(b<<4)|0;te=(o[M+12>>2]|0)+(b<<4)|0;o[ee>>2]=o[te>>2];o[ee+4>>2]=o[te+4>>2];o[ee+8>>2]=o[te+8>>2];o[ee+12>>2]=o[te+12>>2];b=b+1|0}while((b|0)!=(l|0))}l=o[M+12>>2]|0;if(l|0){if(n[M+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[M+12>>2]=0}n[M+16>>0]=1;o[M+12>>2]=h;o[M+8>>2]=N;l=o[M+4>>2]|0}te=o[M+12>>2]|0;c[te+(l<<4)>>2]=C;c[te+(l<<4)+4>>2]=w;c[te+(l<<4)+8>>2]=k;o[te+(l<<4)+12>>2]=T;o[M+4>>2]=(o[M+4>>2]|0)+1;break}else{u=u/(u-S);g=d+(C-d)*u;d=m+(w-m)*u;u=y+(k-y)*u;l=o[M+4>>2]|0;if((l|0)==(o[M+8>>2]|0)?(X=l|0?l<<1:1,(l|0)<(X|0)):0){if(!X)h=0;else{o[5637]=(o[5637]|0)+1;l=Qa((X<<4|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}h=l;l=o[M+4>>2]|0}if((l|0)>0){b=0;do{te=h+(b<<4)|0;ee=(o[M+12>>2]|0)+(b<<4)|0;o[te>>2]=o[ee>>2];o[te+4>>2]=o[ee+4>>2];o[te+8>>2]=o[ee+8>>2];o[te+12>>2]=o[ee+12>>2];b=b+1|0}while((b|0)!=(l|0))}l=o[M+12>>2]|0;if(l|0){if(n[M+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[M+12>>2]=0}n[M+16>>0]=1;o[M+12>>2]=h;o[M+8>>2]=X;l=o[M+4>>2]|0}te=o[M+12>>2]|0;c[te+(l<<4)>>2]=g;c[te+(l<<4)+4>>2]=d;c[te+(l<<4)+8>>2]=u;c[te+(l<<4)+12>>2]=0;o[M+4>>2]=(o[M+4>>2]|0)+1;break}else if(S<0){u=u/(u-S);g=d+(C-d)*u;d=m+(w-m)*u;u=y+(k-y)*u;l=o[M+4>>2]|0;if((l|0)==(o[M+8>>2]|0)?(H=l|0?l<<1:1,(l|0)<(H|0)):0){if(!H)h=0;else{o[5637]=(o[5637]|0)+1;l=Qa((H<<4|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}h=l;l=o[M+4>>2]|0}if((l|0)>0){b=0;do{te=h+(b<<4)|0;ee=(o[M+12>>2]|0)+(b<<4)|0;o[te>>2]=o[ee>>2];o[te+4>>2]=o[ee+4>>2];o[te+8>>2]=o[ee+8>>2];o[te+12>>2]=o[ee+12>>2];b=b+1|0}while((b|0)!=(l|0))}l=o[M+12>>2]|0;if(l|0){if(n[M+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[M+12>>2]=0}n[M+16>>0]=1;o[M+12>>2]=h;o[M+8>>2]=H;l=o[M+4>>2]|0}te=o[M+12>>2]|0;c[te+(l<<4)>>2]=g;c[te+(l<<4)+4>>2]=d;c[te+(l<<4)+8>>2]=u;c[te+(l<<4)+12>>2]=0;l=(o[M+4>>2]|0)+1|0;o[M+4>>2]=l;if((l|0)==(o[M+8>>2]|0)?(Z=l|0?l<<1:1,(l|0)<(Z|0)):0){if(!Z)h=0;else{o[5637]=(o[5637]|0)+1;l=Qa((Z<<4|3)+16|0)|0;if(!l)l=0;else{o[(l+4+15&-16)+-4>>2]=l;l=l+4+15&-16}h=l;l=o[M+4>>2]|0}if((l|0)>0){b=0;do{te=h+(b<<4)|0;ee=(o[M+12>>2]|0)+(b<<4)|0;o[te>>2]=o[ee>>2];o[te+4>>2]=o[ee+4>>2];o[te+8>>2]=o[ee+8>>2];o[te+12>>2]=o[ee+12>>2];b=b+1|0}while((b|0)!=(l|0))}l=o[M+12>>2]|0;if(l|0){if(n[M+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[M+12>>2]=0}n[M+16>>0]=1;o[M+12>>2]=h;o[M+8>>2]=Z;l=o[M+4>>2]|0}te=o[M+12>>2]|0;c[te+(l<<4)>>2]=C;c[te+(l<<4)+4>>2]=w;c[te+(l<<4)+8>>2]=k;o[te+(l<<4)+12>>2]=T;o[M+4>>2]=(o[M+4>>2]|0)+1}while(0);l=D+1|0;if((l|0)==(f|0))break;b=o[P+12>>2]|0;u=S;d=C;y=k;m=w;D=l}f=o[P+4>>2]|0}if((f|0)<0){if((o[P+8>>2]|0)<0){l=o[P+12>>2]|0;if(l|0){if(n[P+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[P+12>>2]=0}n[P+16>>0]=1;o[P+12>>2]=0;o[P+8>>2]=0}do{te=(o[P+12>>2]|0)+(f<<4)|0;o[te>>2]=o[K>>2];o[te+4>>2]=o[K+4>>2];o[te+8>>2]=o[K+8>>2];o[te+12>>2]=o[K+12>>2];f=f+1|0}while((f|0)!=0)}o[P+4>>2]=0;g=+c[i>>2];k=+c[i+4>>2];w=+c[i+8>>2];C=+c[i+16>>2];v=+c[i+20>>2];y=+c[i+24>>2];m=+c[i+32>>2];d=+c[i+36>>2];u=+c[i+40>>2];if((B|0)>=(A|0)){b=G;l=E;f=V;T=i+48|0;D=i+52|0;h=i+56|0;break}else{te=r;r=W;W=te}}}else{b=U+(z*36|0)+20|0;l=U+(z*36|0)+24|0;f=U+(z*36|0)+28|0;T=i+48|0;D=i+52|0;h=i+56|0;g=j;k=I;w=O;C=L;v=x}q=+c[b>>2];J=+c[l>>2];$=+c[f>>2];g=q*g+J*k+$*w;y=q*C+J*v+$*y;m=q*m+J*d+$*u;d=+c[U+(z*36|0)+32>>2]-(g*+c[T>>2]+y*+c[D>>2]+m*+c[h>>2]);f=o[r+4>>2]|0;if((f|0)>0){b=0;do{l=o[r+12>>2]|0;u=d+(g*+c[l+(b<<4)>>2]+y*+c[l+(b<<4)+4>>2]+m*+c[l+(b<<4)+8>>2]);u=u<=_?_:u;if(u<=s){f=l+(b<<4)|0;o[K+16>>2]=o[f>>2];o[K+16+4>>2]=o[f+4>>2];o[K+16+8>>2]=o[f+8>>2];o[K+16+12>>2]=o[f+12>>2];GP[o[(o[a>>2]|0)+16>>2]&15](a,e,K+16|0,u);f=o[r+4>>2]|0}b=b+1|0}while((b|0)<(f|0))}}}f=o[Y>>2]|0;if(!f){p=K;return}if(n[K+32+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}o[Y>>2]=0;p=K;return}function dC(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0;M=p;p=p+32|0;a=+c[t+16>>2];r=+c[t>>2];f=+c[t+20>>2];_=+c[t+4>>2];u=+c[t+24>>2];s=+c[t+8>>2];m=+c[t+32>>2];C=+c[t+36>>2];w=+c[t+40>>2];I=(f-_)*(w-s)-(u-s)*(C-_);T=(u-s)*(m-r)-(a-r)*(w-s);D=(a-r)*(C-_)-(f-_)*(m-r);c[M+16>>2]=I;c[M+16+4>>2]=T;c[M+16+8>>2]=D;c[M+16+12>>2]=0;b=+c[e+4>>2];y=+c[e+8>>2];k=+c[e+12>>2];O=I*b+T*y+D*k-(r*I+_*T+s*D);d=+c[e+20>>2];g=+c[e+24>>2];S=+c[e+28>>2];if(O*(I*d+T*g+D*S-(r*I+_*T+s*D))>=0){p=M;return}L=o[e+36>>2]|0;if(O<=0&(L&1|0)!=0){p=M;return}x=O/(O-(I*d+T*g+D*S-(r*I+_*T+s*D)));if(!(x<+c[e+40>>2])){p=M;return}j=(I*I+T*T+D*D)*-9999999747378752e-20;R=r-(d*x+b*(1-x));v=_-(g*x+y*(1-x));h=s-(S*x+k*(1-x));l=a-(d*x+b*(1-x));f=f-(g*x+y*(1-x));a=u-(S*x+k*(1-x));if(!(D*(R*f-v*l)+(I*(v*a-h*f)+T*(h*l-R*a))>=j)){p=M;return}s=m-(d*x+b*(1-x));_=C-(g*x+y*(1-x));r=w-(S*x+k*(1-x));if(!(D*(l*_-f*s)+(I*(f*r-a*_)+T*(a*s-l*r))>=j)){p=M;return}if(!(D*(v*s-R*_)+(I*(h*_-v*r)+T*(R*r-h*s))>=j)){p=M;return}r=1/+X(+(I*I+T*T+D*D));c[M+16>>2]=I*r;c[M+16+4>>2]=T*r;c[M+16+8>>2]=D*r;t=o[(o[e>>2]|0)+12>>2]|0;if(O<=0&(L&2|0)==0){c[M>>2]=-(I*r);c[M+4>>2]=-(T*r);c[M+8>>2]=-(D*r);c[M+12>>2]=0;c[e+40>>2]=+BP[t&3](e,M,x,i,n);p=M;return}else{c[e+40>>2]=+BP[t&3](e,M+16|0,x,i,n);p=M;return}}function hC(e){e=e|0;qa(e);return}function mC(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0;l=p;p=p+688|0;o[l+568+8>>2]=0;o[l+568+12>>2]=-1;o[l+568+16>>2]=1065353216;o[l+568+20>>2]=1065353216;o[l+568+24>>2]=1065353216;c[l+568+28>>2]=0;o[l+568+56>>2]=0;o[l+568>>2]=3768;o[l+568+4>>2]=1;o[l+568+60>>2]=o[t>>2];o[l+568+60+4>>2]=o[t+4>>2];o[l+568+60+8>>2]=o[t+8>>2];o[l+568+60+12>>2]=o[t+12>>2];o[l+568+76>>2]=o[t+16>>2];o[l+568+76+4>>2]=o[t+16+4>>2];o[l+568+76+8>>2]=o[t+16+8>>2];o[l+568+76+12>>2]=o[t+16+12>>2];o[l+568+92>>2]=o[t+32>>2];o[l+568+92+4>>2]=o[t+32+4>>2];o[l+568+92+8>>2]=o[t+32+8>>2];o[l+568+92+12>>2]=o[t+32+12>>2];o[l+568+48>>2]=o[e+204>>2];c[l+208+308>>2]=9999999747378752e-20;n[l+208+332>>0]=0;o[l+200>>2]=6908;t=o[e+4>>2]|0;o[l+176>>2]=6816;o[l+176+4>>2]=l+208;o[l+176+8>>2]=l+200;o[l+176+12>>2]=t;o[l+176+16>>2]=l+568;o[l+176+20>>2]=0;o[l>>2]=3316;o[l+168>>2]=0;c[l+164>>2]=1;o[l+172>>2]=o[e+208>>2];if((Pv(l+176|0,e+8|0,e+72|0,e+136|0,e+136|0,l)|0?(_=+c[l+132>>2],s=+c[l+136>>2],a=+c[l+140>>2],_*_+s*s+a*a>9999999747378752e-20):0)?(f=+c[l+164>>2],f<+c[e+200>>2]):0){u=1/+X(+(_*_+s*s+a*a));c[l+132>>2]=_*u;c[l+136>>2]=s*u;c[l+140>>2]=a*u;+SP[o[(o[e>>2]|0)+12>>2]&3](e,l+132|0,l+148|0,f,i,r)}o[l+568>>2]=6248;i=o[l+568+56>>2]|0;if(!i){p=l;return}_P[o[o[i>>2]>>2]&255](i);i=o[l+568+56>>2]|0;if(!i){p=l;return}o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);p=l;return}function yC(e){e=e|0;qa(e);return}function gC(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0;_e=p;p=p+128|0;B=o[e+4>>2]|0;n[B+312>>0]=0;o[B>>2]=0;n[B+356>>0]=1;o[B+292>>2]=1566444395;o[B+296>>2]=1566444395;o[B+300>>2]=1566444395;c[B+304>>2]=0;o[B+336>>2]=0;o[B+336+4>>2]=0;o[B+336+8>>2]=0;o[B+336+12>>2]=0;n[B+336+16>>0]=0;n[B+332>>0]=n[B+332>>0]&-16;f=+c[t+48>>2];l=+c[t+52>>2];b=+c[t+56>>2];d=+c[r+48>>2];g=+c[r+52>>2];v=+c[r+56>>2];A=+c[t>>2];F=+c[t+4>>2];G=+c[t+8>>2];E=+c[t+16>>2];V=+c[t+20>>2];N=+c[t+24>>2];H=+c[t+32>>2];Z=+c[t+36>>2];U=+c[t+40>>2];z=+c[r>>2];Y=+c[r+4>>2];K=+c[r+8>>2];Q=+c[r+16>>2];q=+c[r+20>>2];J=+c[r+24>>2];$=+c[r+32>>2];ee=+c[r+36>>2];te=+c[r+40>>2];ne=+c[i+48>>2]-f-(+c[_+48>>2]-d);re=+c[i+52>>2]-l-(+c[_+52>>2]-g);oe=+c[i+56>>2]-b-(+c[_+56>>2]-v);B=o[e+8>>2]|0;T=o[(o[B>>2]|0)+64>>2]|0;c[_e+96>>2]=A*-ne+E*-re+H*-oe;c[_e+96+4>>2]=F*-ne+V*-re+Z*-oe;c[_e+96+8>>2]=G*-ne+N*-re+U*-oe;c[_e+96+12>>2]=0;EP[T&127](_e+112|0,B,_e+96|0);P=+c[_e+112>>2];W=+c[_e+112+4>>2];M=+c[_e+112+8>>2];C=P*+c[t>>2]+W*+c[t+4>>2]+M*+c[t+8>>2]+ +c[t+48>>2];j=P*+c[t+16>>2]+W*+c[t+20>>2]+M*+c[t+24>>2]+ +c[t+52>>2];M=P*+c[t+32>>2]+W*+c[t+36>>2]+M*+c[t+40>>2]+ +c[t+56>>2];B=o[e+12>>2]|0;T=o[(o[B>>2]|0)+64>>2]|0;W=ne*+c[r+4>>2]+re*+c[r+20>>2]+oe*+c[r+36>>2];P=ne*+c[r+8>>2]+re*+c[r+24>>2]+oe*+c[r+40>>2];c[_e+64>>2]=ne*+c[r>>2]+re*+c[r+16>>2]+oe*+c[r+32>>2];c[_e+64+4>>2]=W;c[_e+64+8>>2]=P;c[_e+64+12>>2]=0;EP[T&127](_e+80|0,B,_e+64|0);P=+c[_e+80>>2];W=+c[_e+80+4>>2];k=+c[_e+80+8>>2];C=C-(P*+c[r>>2]+W*+c[r+4>>2]+k*+c[r+8>>2]+ +c[r+48>>2]);j=j-(P*+c[r+16>>2]+W*+c[r+20>>2]+k*+c[r+24>>2]+ +c[r+52>>2]);k=M-(P*+c[r+32>>2]+W*+c[r+36>>2]+k*+c[r+40>>2]+ +c[r+56>>2]);e:do if(C*C+j*j+k*k>9999999747378752e-20){W=f;f=0;B=32;m=0;y=0;h=0;a=0;R=0;while(1){if(!B)break e;B=B+-1|0;w=o[e+8>>2]|0;S=o[(o[w>>2]|0)+64>>2]|0;L=-C;se=-j;I=-k;c[_e+32>>2]=A*L+E*se+H*I;c[_e+32+4>>2]=F*L+V*se+Z*I;c[_e+32+8>>2]=G*L+N*se+U*I;c[_e+32+12>>2]=0;EP[S&127](_e+48|0,w,_e+32|0);I=+c[_e+48>>2];se=+c[_e+48+4>>2];L=+c[_e+48+8>>2];D=W+(A*I+F*se+G*L);O=l+(E*I+V*se+N*L);L=b+(H*I+Z*se+U*L);w=o[e+12>>2]|0;S=o[(o[w>>2]|0)+64>>2]|0;c[_e>>2]=z*C+Q*j+$*k;c[_e+4>>2]=Y*C+q*j+ee*k;c[_e+8>>2]=K*C+J*j+te*k;c[_e+12>>2]=0;EP[S&127](_e+16|0,w,_e);se=+c[_e+16>>2];I=+c[_e+16+4>>2];P=+c[_e+16+8>>2];x=d+(z*se+Y*I+K*P);M=g+(Q*se+q*I+J*P);P=v+($*se+ee*I+te*P);I=C*(D-x)+j*(O-M)+k*(L-P);w=(c[u>>2]=C,o[u>>2]|0);S=(c[u>>2]=j,o[u>>2]|0);T=(c[u>>2]=k,o[u>>2]|0);if(f>1){a=0;ie=25;break}if(I>0){l=ne*C+re*j+oe*k;if(l>=-1.4210854715202004e-14){a=0;ie=25;break}f=f-I/l;I=(1-f)*+c[t+48>>2]+f*+c[i+48>>2];l=(1-f)*+c[t+52>>2]+f*+c[i+52>>2];b=(1-f)*+c[t+56>>2]+f*+c[i+56>>2];d=(1-f)*+c[r+48>>2]+f*+c[_+48>>2];g=(1-f)*+c[r+52>>2]+f*+c[_+52>>2];v=(1-f)*+c[r+56>>2]+f*+c[_+56>>2];m=w;y=R;h=S;a=T}else I=W;S=o[e+4>>2]|0;R=o[S>>2]|0;t:do if((R|0)>0){C=+c[S+308>>2];w=0;while(1){j=D-x-+c[S+4+(w<<4)>>2];W=O-M-+c[S+4+(w<<4)+4>>2];se=L-P-+c[S+4+(w<<4)+8>>2];w=w+1|0;if(j*j+W*W+se*se<=C){w=1;break t}if((w|0)>=(R|0)){w=0;break}}}else w=0;while(0);if((+c[S+304>>2]==0?L-P==+c[S+300>>2]:0)?O-M==+c[S+296>>2]:0){if(!(D-x==+c[S+292>>2]|w))ie=17}else if(!w)ie=17;if((ie|0)==17){ie=0;c[S+292>>2]=D-x;c[S+296>>2]=O-M;c[S+300>>2]=L-P;c[S+304>>2]=0;n[S+356>>0]=1;c[S+4+(R<<4)>>2]=D-x;c[S+4+(R<<4)+4>>2]=O-M;c[S+4+(R<<4)+8>>2]=L-P;c[S+4+(R<<4)+12>>2]=0;T=o[S>>2]|0;c[S+84+(T<<4)>>2]=D;c[S+84+(T<<4)+4>>2]=O;c[S+84+(T<<4)+8>>2]=L;c[S+84+(T<<4)+12>>2]=0;T=o[S>>2]|0;c[S+164+(T<<4)>>2]=x;c[S+164+(T<<4)+4>>2]=M;c[S+164+(T<<4)+8>>2]=P;c[S+164+(T<<4)+12>>2]=0;o[S>>2]=(o[S>>2]|0)+1;S=o[e+4>>2]|0}T=vC(S)|0;C=+c[S+276>>2];j=+c[S+280>>2];k=+c[S+284>>2];if(!T)break e;if(!(C*C+j*j+k*k>9999999747378752e-20))break e;else{W=I;R=o[S+288>>2]|0}}if((ie|0)==25){p=_e;return a|0}}else{f=0;m=0;y=0;h=0;a=0}while(0);c[s+164>>2]=f;f=(o[u>>2]=m,+c[u>>2]);l=(o[u>>2]=h,+c[u>>2]);d=(o[u>>2]=a,+c[u>>2]);if(!(f*f+l*l+d*d>=1.4210854715202004e-14)){o[s+132>>2]=0;o[s+132+4>>2]=0;o[s+132+8>>2]=0;o[s+132+12>>2]=0;b=0;l=0;f=0}else{se=1/+X(+(f*f+l*l+d*d));c[s+132>>2]=f*se;c[s+136>>2]=l*se;c[s+140>>2]=d*se;o[s+144>>2]=y;b=f*se;l=l*se;f=d*se}if(ne*b+re*l+oe*f>=-+c[s+172>>2]){e=0;p=_e;return e|0}e=o[e+4>>2]|0;vC(e)|0;Bc(s+148|0,e+260|0,16)|0;e=1;p=_e;return e|0}function vC(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0,Z=0,U=0,z=0,Y=0;P=p;p=p+64|0;if(!(n[e+356>>0]|0)){e=n[e+312>>0]|0;e=e<<24>>24!=0;p=P;return e|0}o[e+336>>2]=0;o[e+336+4>>2]=0;o[e+336+8>>2]=0;o[e+336+12>>2]=0;n[e+336+16>>0]=0;_=n[e+332>>0]|0;n[e+332>>0]=_&-16;n[e+356>>0]=0;switch(o[e>>2]|0){case 0:{n[e+312>>0]=0;e=0;e=e<<24>>24!=0;p=P;return e|0}case 1:{o[e+244>>2]=o[e+84>>2];o[e+244+4>>2]=o[e+84+4>>2];o[e+244+8>>2]=o[e+84+8>>2];o[e+244+12>>2]=o[e+84+12>>2];o[e+260>>2]=o[e+164>>2];o[e+260+4>>2]=o[e+164+4>>2];o[e+260+8>>2]=o[e+164+8>>2];o[e+260+12>>2]=o[e+164+12>>2];O=+c[e+248>>2]-+c[e+264>>2];L=+c[e+252>>2]-+c[e+268>>2];c[e+276>>2]=+c[e+244>>2]-+c[e+260>>2];c[e+280>>2]=O;c[e+284>>2]=L;c[e+288>>2]=0;o[e+336>>2]=0;o[e+336+4>>2]=0;o[e+336+8>>2]=0;o[e+336+12>>2]=0;n[e+336+16>>0]=0;n[e+332>>0]=_&-16;c[e+336>>2]=1;c[e+340>>2]=0;c[e+344>>2]=0;c[e+348>>2]=0;n[e+312>>0]=1;e=1;e=e<<24>>24!=0;p=P;return e|0}case 2:{i=+c[e+4>>2];r=+c[e+8>>2];s=+c[e+12>>2];a=+c[e+20>>2]-i;f=+c[e+24>>2]-r;l=+c[e+28>>2]-s;do if((0-i)*a+(0-r)*f+(0-s)*l>0)if((0-i)*a+(0-r)*f+(0-s)*l<a*a+f*f+l*l){n[e+332>>0]=_&-16|3;_=_&-16|3;r=((0-i)*a+(0-r)*f+(0-s)*l)/(a*a+f*f+l*l);break}else{n[e+332>>0]=_&-16|2;_=_&-16|2;r=1;break}else{n[e+332>>0]=_&-16|1;_=_&-16|1;r=0}while(0);i=1-r;c[e+336>>2]=i;c[e+340>>2]=r;c[e+344>>2]=0;c[e+348>>2]=0;j=+c[e+84>>2];T=+c[e+88>>2];O=+c[e+92>>2];j=j+r*(+c[e+100>>2]-j);T=T+r*(+c[e+104>>2]-T);O=O+r*(+c[e+108>>2]-O);c[e+244>>2]=j;c[e+248>>2]=T;c[e+252>>2]=O;c[e+256>>2]=0;I=+c[e+164>>2];D=+c[e+168>>2];L=+c[e+172>>2];I=I+r*(+c[e+180>>2]-I);D=D+r*(+c[e+184>>2]-D);L=L+r*(+c[e+188>>2]-L);c[e+260>>2]=I;c[e+264>>2]=D;c[e+268>>2]=L;c[e+272>>2]=0;c[e+276>>2]=j-I;c[e+280>>2]=T-D;c[e+284>>2]=O-L;c[e+288>>2]=0;if(!(_&2)){o[e>>2]=1;t=0}else t=1;if(!(_&1)){o[e>>2]=t;M=e+4+(t<<4)|0;o[e+4>>2]=o[M>>2];o[e+4+4>>2]=o[M+4>>2];o[e+4+8>>2]=o[M+8>>2];o[e+4+12>>2]=o[M+12>>2];M=e+84+(t<<4)|0;o[e+84>>2]=o[M>>2];o[e+84+4>>2]=o[M+4>>2];o[e+84+8>>2]=o[M+8>>2];o[e+84+12>>2]=o[M+12>>2];M=e+164+(t<<4)|0;o[e+164>>2]=o[M>>2];o[e+164+4>>2]=o[M+4>>2];o[e+164+8>>2]=o[M+8>>2];o[e+164+12>>2]=o[M+12>>2]}M=(!(i>=0)|!(r>=0))&1^1;n[e+312>>0]=M;e=M;e=e<<24>>24!=0;p=P;return e|0}case 3:{o[P+16>>2]=0;o[P+16+4>>2]=0;o[P+16+8>>2]=0;o[P+16+12>>2]=0;eI(P+16|0,e+4|0,e+20|0,e+36|0,e+316|0);L=+c[e+336>>2];i=+c[e+340>>2];r=+c[e+344>>2];j=+c[e+84>>2]*L+ +c[e+100>>2]*i+ +c[e+116>>2]*r;T=L*+c[e+88>>2]+i*+c[e+104>>2]+r*+c[e+120>>2];O=L*+c[e+92>>2]+i*+c[e+108>>2]+r*+c[e+124>>2];c[e+244>>2]=j;c[e+248>>2]=T;c[e+252>>2]=O;c[e+256>>2]=0;I=+c[e+164>>2]*L+ +c[e+180>>2]*i+ +c[e+196>>2]*r;D=L*+c[e+168>>2]+i*+c[e+184>>2]+r*+c[e+200>>2];L=L*+c[e+172>>2]+i*+c[e+188>>2]+r*+c[e+204>>2];c[e+260>>2]=I;c[e+264>>2]=D;c[e+268>>2]=L;c[e+272>>2]=0;c[e+276>>2]=j-I;c[e+280>>2]=T-D;c[e+284>>2]=O-L;c[e+288>>2]=0;_=o[e>>2]|0;do if((_|0)>3){t=n[e+332>>0]|0;if(!(t&8)){o[e>>2]=_+-1;M=e+4+(_+-1<<4)|0;o[e+52>>2]=o[M>>2];o[e+52+4>>2]=o[M+4>>2];o[e+52+8>>2]=o[M+8>>2];o[e+52+12>>2]=o[M+12>>2];M=e+84+(_+-1<<4)|0;o[e+132>>2]=o[M>>2];o[e+132+4>>2]=o[M+4>>2];o[e+132+8>>2]=o[M+8>>2];o[e+132+12>>2]=o[M+12>>2];M=e+164+(_+-1<<4)|0;o[e+212>>2]=o[M>>2];o[e+212+4>>2]=o[M+4>>2];o[e+212+8>>2]=o[M+8>>2];o[e+212+12>>2]=o[M+12>>2];_=_+-1|0;M=21}else M=21}else{if((_|0)>2){t=n[e+332>>0]|0;_=3;M=21;break}if((_|0)>1){t=n[e+332>>0]|0;_=2;M=25;break}if((_|0)>0){b=n[e+332>>0]|0;u=1;M=29}}while(0);if((M|0)==21)if(!(t&4)){_=_+-1|0;o[e>>2]=_;o[e+36>>2]=o[e+4+(_<<4)>>2];o[e+36+4>>2]=o[e+4+(_<<4)+4>>2];o[e+36+8>>2]=o[e+4+(_<<4)+8>>2];o[e+36+12>>2]=o[e+4+(_<<4)+12>>2];o[e+116>>2]=o[e+84+(_<<4)>>2];o[e+116+4>>2]=o[e+84+(_<<4)+4>>2];o[e+116+8>>2]=o[e+84+(_<<4)+8>>2];o[e+116+12>>2]=o[e+84+(_<<4)+12>>2];o[e+196>>2]=o[e+164+(_<<4)>>2];o[e+196+4>>2]=o[e+164+(_<<4)+4>>2];o[e+196+8>>2]=o[e+164+(_<<4)+8>>2];o[e+196+12>>2]=o[e+164+(_<<4)+12>>2];M=25}else M=25;if((M|0)==25)if(!(t&2)){u=_+-1|0;o[e>>2]=u;o[e+20>>2]=o[e+4+(u<<4)>>2];o[e+20+4>>2]=o[e+4+(u<<4)+4>>2];o[e+20+8>>2]=o[e+4+(u<<4)+8>>2];o[e+20+12>>2]=o[e+4+(u<<4)+12>>2];o[e+100>>2]=o[e+84+(u<<4)>>2];o[e+100+4>>2]=o[e+84+(u<<4)+4>>2];o[e+100+8>>2]=o[e+84+(u<<4)+8>>2];o[e+100+12>>2]=o[e+84+(u<<4)+12>>2];o[e+180>>2]=o[e+164+(u<<4)>>2];o[e+180+4>>2]=o[e+164+(u<<4)+4>>2];o[e+180+8>>2]=o[e+164+(u<<4)+8>>2];o[e+180+12>>2]=o[e+164+(u<<4)+12>>2];b=t;M=29}else{\nb=t;u=_;M=29}if((M|0)==29?(b&1)==0:0){M=u+-1|0;o[e>>2]=M;o[e+4>>2]=o[e+4+(M<<4)>>2];o[e+4+4>>2]=o[e+4+(M<<4)+4>>2];o[e+4+8>>2]=o[e+4+(M<<4)+8>>2];o[e+4+12>>2]=o[e+4+(M<<4)+12>>2];o[e+84>>2]=o[e+84+(M<<4)>>2];o[e+84+4>>2]=o[e+84+(M<<4)+4>>2];o[e+84+8>>2]=o[e+84+(M<<4)+8>>2];o[e+84+12>>2]=o[e+84+(M<<4)+12>>2];o[e+164>>2]=o[e+164+(M<<4)>>2];o[e+164+4>>2]=o[e+164+(M<<4)+4>>2];o[e+164+8>>2]=o[e+164+(M<<4)+8>>2];o[e+164+12>>2]=o[e+164+(M<<4)+12>>2]}if((i>=0?!(+c[e+336>>2]>=0):1)|!(r>=0))t=0;else t=+c[e+348>>2]>=0&1;n[e+312>>0]=t;e=t;e=e<<24>>24!=0;p=P;return e|0}case 4:{o[P>>2]=0;o[P+4>>2]=0;o[P+8>>2]=0;o[P+12>>2]=0;h=P+16+16|0;n[h>>0]=0;o[e+316>>2]=0;o[e+316+4>>2]=0;o[e+316+8>>2]=0;o[e+316+12>>2]=0;n[e+332>>0]=_|15;B=+c[e+20>>2];Z=+c[e+4>>2];N=+c[e+24>>2];W=+c[e+8>>2];F=+c[e+28>>2];U=+c[e+12>>2];V=+c[e+36>>2];X=+c[e+40>>2];G=+c[e+44>>2];A=+c[e+52>>2];H=+c[e+56>>2];E=+c[e+60>>2];z=((N-W)*(G-U)-(F-U)*(X-W))*(A-Z)+((F-U)*(V-Z)-(B-Z)*(G-U))*(H-W)+((B-Z)*(X-W)-(N-W)*(V-Z))*(E-U);_=z*z<9.99999905104687e-9?-1:((0-Z)*((N-W)*(G-U)-(F-U)*(X-W))+(0-W)*((F-U)*(V-Z)-(B-Z)*(G-U))+((B-Z)*(X-W)-(N-W)*(V-Z))*(0-U))*z<0&1;z=(F-U)*((V-Z)*(H-W)-(X-W)*(A-Z))+((B-Z)*((X-W)*(E-U)-(G-U)*(H-W))+(N-W)*((G-U)*(A-Z)-(V-Z)*(E-U)));u=z*z<9.99999905104687e-9?-1:((0-U)*((V-Z)*(H-W)-(X-W)*(A-Z))+((0-Z)*((X-W)*(E-U)-(G-U)*(H-W))+(0-W)*((G-U)*(A-Z)-(V-Z)*(E-U))))*z<0&1;z=(G-U)*((N-W)*(A-Z)-(B-Z)*(H-W))+((V-Z)*((F-U)*(H-W)-(N-W)*(E-U))+(X-W)*((B-Z)*(E-U)-(F-U)*(A-Z)));b=z*z<9.99999905104687e-9?-1:((0-U)*((N-W)*(A-Z)-(B-Z)*(H-W))+((0-Z)*((F-U)*(H-W)-(N-W)*(E-U))+(0-W)*((B-Z)*(E-U)-(F-U)*(A-Z))))*z<0&1;W=(U-F)*((X-N)*(A-B)-(V-B)*(H-N))+((Z-B)*((G-F)*(H-N)-(X-N)*(E-F))+(W-N)*((V-B)*(E-F)-(G-F)*(A-B)));d=W*W<9.99999905104687e-9?-1:((0-F)*((X-N)*(A-B)-(V-B)*(H-N))+((0-B)*((G-F)*(H-N)-(X-N)*(E-F))+(0-N)*((V-B)*(E-F)-(G-F)*(A-B))))*W<0&1;do if((u|_|b|d|0)<0){n[e+352>>0]=1;t=e+312|0;M=70}else{if(!(u|_|b|d)){if(n[e+352>>0]|0){t=e+312|0;M=70;break}n[e+312>>0]=1;o[e+276>>2]=0;o[e+276+4>>2]=0;o[e+276+8>>2]=0;o[e+276+12>>2]=0;t=1;break}if((_|0)!=0?(eI(P,e+4|0,e+20|0,e+36|0,P+16|0),i=+c[P+16>>2],r=+c[P+16+4>>2],s=+c[P+16+8>>2],a=i-+c[P>>2],f=r-+c[P+4>>2],l=s-+c[P+8>>2],a*a+f*f+l*l<3.4028234663852886e38):0){Y=o[P+16+12>>2]|0;c[e+316>>2]=i;c[e+320>>2]=r;c[e+324>>2]=s;o[e+328>>2]=Y;Y=n[h>>0]|0;n[e+332>>0]=Y&1|n[e+332>>0]&-16|Y&2|Y&4;Y=o[P+16+24>>2]|0;_=o[P+16+28>>2]|0;o[e+336>>2]=o[P+16+20>>2];o[e+340>>2]=Y;o[e+344>>2]=_;c[e+348>>2]=0;i=a*a+f*f+l*l}else i=3.4028234663852886e38;if((u|0)!=0?(eI(P,e+4|0,e+36|0,e+52|0,P+16|0),m=+c[P+16>>2],y=+c[P+16+4>>2],g=+c[P+16+8>>2],v=m-+c[P>>2],C=y-+c[P+4>>2],w=g-+c[P+8>>2],v*v+C*C+w*w<i):0){u=o[P+16+12>>2]|0;c[e+316>>2]=m;c[e+320>>2]=y;c[e+324>>2]=g;o[e+328>>2]=u;u=n[h>>0]|0;n[e+332>>0]=u<<1&8|(u&1|n[e+332>>0]&-16|u<<1&4);u=o[P+16+24>>2]|0;Y=o[P+16+28>>2]|0;o[e+336>>2]=o[P+16+20>>2];c[e+340>>2]=0;o[e+344>>2]=u;o[e+348>>2]=Y;i=v*v+C*C+w*w}if((b|0)!=0?(eI(P,e+4|0,e+52|0,e+20|0,P+16|0),k=+c[P+16>>2],S=+c[P+16+4>>2],R=+c[P+16+8>>2],j=k-+c[P>>2],I=S-+c[P+4>>2],T=R-+c[P+8>>2],j*j+I*I+T*T<i):0){b=o[P+16+12>>2]|0;c[e+316>>2]=k;c[e+320>>2]=S;c[e+324>>2]=R;o[e+328>>2]=b;b=n[h>>0]|0;n[e+332>>0]=b<<2&8|(b&1|n[e+332>>0]&-16|(b&255)>>>1&2);b=o[P+16+28>>2]|0;Y=o[P+16+24>>2]|0;o[e+336>>2]=o[P+16+20>>2];o[e+340>>2]=b;c[e+344>>2]=0;o[e+348>>2]=Y;i=j*j+I*I+T*T}if(d|0?(eI(P,e+20|0,e+52|0,e+36|0,P+16|0),D=+c[P+16>>2],O=+c[P+16+4>>2],L=+c[P+16+8>>2],Z=D-+c[P>>2],U=O-+c[P+4>>2],z=L-+c[P+8>>2],Z*Z+U*U+z*z<i):0){d=o[P+16+12>>2]|0;c[e+316>>2]=D;c[e+320>>2]=O;c[e+324>>2]=L;o[e+328>>2]=d;d=n[h>>0]|0;n[e+332>>0]=d&4|n[e+332>>0]&-16|d<<1&2|d<<2&8;d=o[P+16+20>>2]|0;h=o[P+16+28>>2]|0;Y=o[P+16+24>>2]|0;c[e+336>>2]=0;o[e+340>>2]=d;o[e+344>>2]=h;o[e+348>>2]=Y}E=+c[e+336>>2];V=+c[e+340>>2];z=+c[e+344>>2];i=+c[e+348>>2];N=+c[e+84>>2]*E+ +c[e+100>>2]*V+ +c[e+116>>2]*z+ +c[e+132>>2]*i;H=E*+c[e+88>>2]+V*+c[e+104>>2]+z*+c[e+120>>2]+i*+c[e+136>>2];U=E*+c[e+92>>2]+V*+c[e+108>>2]+z*+c[e+124>>2]+i*+c[e+140>>2];c[e+244>>2]=N;c[e+248>>2]=H;c[e+252>>2]=U;c[e+256>>2]=0;X=+c[e+164>>2]*E+ +c[e+180>>2]*V+ +c[e+196>>2]*z+ +c[e+212>>2]*i;Z=E*+c[e+168>>2]+V*+c[e+184>>2]+z*+c[e+200>>2]+i*+c[e+216>>2];z=E*+c[e+172>>2]+V*+c[e+188>>2]+z*+c[e+204>>2]+i*+c[e+220>>2];c[e+260>>2]=X;c[e+264>>2]=Z;c[e+268>>2]=z;c[e+272>>2]=0;c[e+276>>2]=N-X;c[e+280>>2]=H-Z;c[e+284>>2]=U-z;c[e+288>>2]=0;_=o[e>>2]|0;do if((_|0)>3){t=n[e+332>>0]|0;if(!(t&8)){o[e>>2]=_+-1;M=e+4+(_+-1<<4)|0;o[e+52>>2]=o[M>>2];o[e+52+4>>2]=o[M+4>>2];o[e+52+8>>2]=o[M+8>>2];o[e+52+12>>2]=o[M+12>>2];M=e+84+(_+-1<<4)|0;o[e+132>>2]=o[M>>2];o[e+132+4>>2]=o[M+4>>2];o[e+132+8>>2]=o[M+8>>2];o[e+132+12>>2]=o[M+12>>2];M=e+164+(_+-1<<4)|0;o[e+212>>2]=o[M>>2];o[e+212+4>>2]=o[M+4>>2];o[e+212+8>>2]=o[M+8>>2];o[e+212+12>>2]=o[M+12>>2];_=_+-1|0;M=54}else M=54}else{if((_|0)>2){t=n[e+332>>0]|0;_=3;M=54;break}if((_|0)>1){t=n[e+332>>0]|0;_=2;M=58;break}if((_|0)>0){t=n[e+332>>0]|0;x=1;M=62}}while(0);if((M|0)==54)if(!(t&4)){_=_+-1|0;o[e>>2]=_;o[e+36>>2]=o[e+4+(_<<4)>>2];o[e+36+4>>2]=o[e+4+(_<<4)+4>>2];o[e+36+8>>2]=o[e+4+(_<<4)+8>>2];o[e+36+12>>2]=o[e+4+(_<<4)+12>>2];o[e+116>>2]=o[e+84+(_<<4)>>2];o[e+116+4>>2]=o[e+84+(_<<4)+4>>2];o[e+116+8>>2]=o[e+84+(_<<4)+8>>2];o[e+116+12>>2]=o[e+84+(_<<4)+12>>2];o[e+196>>2]=o[e+164+(_<<4)>>2];o[e+196+4>>2]=o[e+164+(_<<4)+4>>2];o[e+196+8>>2]=o[e+164+(_<<4)+8>>2];o[e+196+12>>2]=o[e+164+(_<<4)+12>>2];M=58}else M=58;if((M|0)==58)if(!(t&2)){x=_+-1|0;o[e>>2]=x;o[e+20>>2]=o[e+4+(x<<4)>>2];o[e+20+4>>2]=o[e+4+(x<<4)+4>>2];o[e+20+8>>2]=o[e+4+(x<<4)+8>>2];o[e+20+12>>2]=o[e+4+(x<<4)+12>>2];o[e+100>>2]=o[e+84+(x<<4)>>2];o[e+100+4>>2]=o[e+84+(x<<4)+4>>2];o[e+100+8>>2]=o[e+84+(x<<4)+8>>2];o[e+100+12>>2]=o[e+84+(x<<4)+12>>2];o[e+180>>2]=o[e+164+(x<<4)>>2];o[e+180+4>>2]=o[e+164+(x<<4)+4>>2];o[e+180+8>>2]=o[e+164+(x<<4)+8>>2];o[e+180+12>>2]=o[e+164+(x<<4)+12>>2];M=62}else{x=_;M=62}if((M|0)==62?(t&1)==0:0){Y=x+-1|0;o[e>>2]=Y;o[e+4>>2]=o[e+4+(Y<<4)>>2];o[e+4+4>>2]=o[e+4+(Y<<4)+4>>2];o[e+4+8>>2]=o[e+4+(Y<<4)+8>>2];o[e+4+12>>2]=o[e+4+(Y<<4)+12>>2];o[e+84>>2]=o[e+84+(Y<<4)>>2];o[e+84+4>>2]=o[e+84+(Y<<4)+4>>2];o[e+84+8>>2]=o[e+84+(Y<<4)+8>>2];o[e+84+12>>2]=o[e+84+(Y<<4)+12>>2];o[e+164>>2]=o[e+164+(Y<<4)>>2];o[e+164+4>>2]=o[e+164+(Y<<4)+4>>2];o[e+164+8>>2]=o[e+164+(Y<<4)+8>>2];o[e+164+12>>2]=o[e+164+(Y<<4)+12>>2]}if((+c[e+336>>2]>=0?+c[e+340>>2]>=0:0)?+c[e+344>>2]>=0:0)t=i>=0&1;else t=0;n[e+312>>0]=t}while(0);if((M|0)==70){n[t>>0]=0;t=0}Y=t;Y=Y<<24>>24!=0;p=P;return Y|0}default:{n[e+312>>0]=0;Y=0;Y=Y<<24>>24!=0;p=P;return Y|0}}return 0}function CC(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0,de=0,he=0,me=0,ye=0,ge=0,ve=0,Ce=0,we=0,ke=0,Se=0,Re=0,je=0,Ie=0,Te=0,De=0,Oe=0,Le=0;Le=p;p=p+592|0;o[Le+48>>2]=o[t>>2];o[Le>>2]=o[t+64>>2];O=Le+48+4|0;o[O>>2]=o[t+4>>2];o[Le+4>>2]=o[t+68>>2];o[Le+48+8>>2]=o[t+8>>2];o[Le+8>>2]=o[t+72>>2];o[Le+48+16>>2]=o[t+16>>2];o[Le+16>>2]=o[t+80>>2];o[Le+48+20>>2]=o[t+20>>2];o[Le+20>>2]=o[t+84>>2];o[Le+48+24>>2]=o[t+24>>2];o[Le+24>>2]=o[t+88>>2];o[Le+48+32>>2]=o[t+32>>2];o[Le+32>>2]=o[t+96>>2];o[Le+48+36>>2]=o[t+36>>2];o[Le+36>>2]=o[t+100>>2];o[Le+48+40>>2]=o[t+40>>2];o[Le+40>>2]=o[t+104>>2];Te=o[e+4>>2]|0;ae=+c[Te+32>>2];ce=+c[Te+36>>2];le=+c[Te+40>>2];fe=+wP[o[(o[Te>>2]|0)+48>>2]&15](Te);pe=+wP[o[(o[Te>>2]|0)+48>>2]&15](Te);le=(le+ +wP[o[(o[Te>>2]|0)+48>>2]&15](Te))*2;Te=o[e+8>>2]|0;he=+c[Te+32>>2];me=+c[Te+36>>2];we=+c[Te+40>>2];ye=+wP[o[(o[Te>>2]|0)+48>>2]&15](Te);de=+wP[o[(o[Te>>2]|0)+48>>2]&15](Te);we=(we+ +wP[o[(o[Te>>2]|0)+48>>2]&15](Te))*2;D=+c[t+112>>2]-+c[t+48>>2];F=+c[t+116>>2]-+c[t+52>>2];G=+c[t+120>>2]-+c[t+56>>2];ie=+c[Le+48>>2];ee=+c[Le+48+16>>2];te=+c[Le+48+32>>2];$=+c[O>>2];Y=+c[Le+48+20>>2];Q=+c[Le+48+36>>2];oe=+c[Le+48+8>>2];se=+c[Le+48+24>>2];ue=+c[Le+48+40>>2];c[Le+484>>2]=(ae+fe)*2*.5;c[Le+484+4>>2]=(ce+pe)*2*.5;c[Le+484+8>>2]=le*.5;c[Le+472>>2]=(he+ye)*2*.5;c[Le+472+4>>2]=(me+de)*2*.5;c[Le+472+8>>2]=we*.5;Re=+c[Le>>2];ge=+c[Le+16>>2];Ce=+c[Le+32>>2];Se=+c[Le+4>>2];be=+c[Le+20>>2];ve=+c[Le+36>>2];ke=+c[Le+8>>2];De=+c[Le+24>>2];Oe=+c[Le+40>>2];S=+N(+(ie*Re+ee*ge+te*Ce));j=+N(+(ie*Se+ee*be+te*ve));V=+N(+(ie*ke+ee*De+te*Oe));R=+N(+(Re*$+ge*Y+Ce*Q));I=+N(+(Se*$+be*Y+ve*Q));H=+N(+(ke*$+De*Y+Oe*Q));Z=+N(+(Re*oe+ge*se+Ce*ue));U=+N(+(Se*oe+be*se+ve*ue));T=+N(+(ke*oe+De*se+Oe*ue));_=+N(+(D*ie+F*ee+G*te))-(we*.5*V+((ae+fe)*2*.5+S*((he+ye)*2*.5)+j*((me+de)*2*.5)));if(_>0){p=Le;return}if(_>-3.4028234663852886e38){l=1;a=D*ie+F*ee+G*te<0&1;n=Le+48|0}else{l=0;a=0;n=0;_=-3.4028234663852886e38}s=+N(+(D*$+F*Y+G*Q))-((ce+pe)*2*.5+R*((he+ye)*2*.5)+I*((me+de)*2*.5)+H*(we*.5));if(s>0){p=Le;return}if(s>_){l=2;a=D*$+F*Y+G*Q<0&1;n=O;_=s}s=+N(+(D*oe+F*se+G*ue))-(le*.5+Z*((he+ye)*2*.5)+U*((me+de)*2*.5)+T*(we*.5));if(s>0){p=Le;return}if(s>_){l=3;a=D*oe+F*se+G*ue<0&1;n=Le+48+8|0;_=s}s=+N(+(D*Re+F*ge+G*Ce))-((he+ye)*2*.5+(S*((ae+fe)*2*.5)+R*((ce+pe)*2*.5)+Z*(le*.5)));if(s>0){p=Le;return}if(s>_){l=4;a=D*Re+F*ge+G*Ce<0&1;n=Le;_=s}s=+N(+(D*Se+F*be+G*ve))-((me+de)*2*.5+(j*((ae+fe)*2*.5)+I*((ce+pe)*2*.5)+U*(le*.5)));if(s>0){p=Le;return}if(s>_){l=5;a=D*Se+F*be+G*ve<0&1;n=Le+4|0}else s=_;_=+N(+(D*ke+F*De+G*Oe))-(we*.5+(V*((ae+fe)*2*.5)+H*((ce+pe)*2*.5)+T*(le*.5)));if(_>0){p=Le;return}if(_>s){l=6;a=D*ke+F*De+G*Oe<0&1;v=Le+8|0}else{v=n;_=s}s=(D*oe+F*se+G*ue)*(Re*$+ge*Y+Ce*Q)-(D*$+F*Y+G*Q)*(Re*oe+ge*se+Ce*ue);f=+N(+s)-((Z+9999999747378752e-21)*((ce+pe)*2*.5)+(R+9999999747378752e-21)*(le*.5)+(V+9999999747378752e-21)*((me+de)*2*.5)+(j+9999999747378752e-21)*(we*.5));if(f>1.1920928955078125e-7){p=Le;return}d=(Re*oe+ge*se+Ce*ue)*(Re*oe+ge*se+Ce*ue)+0;C=(Re*$+ge*Y+Ce*Q)*(Re*$+ge*Y+Ce*Q);b=+X(+(C+d));if(b>1.1920928955078125e-7?f/b*1.0499999523162842>_:0){e=(c[u>>2]=0/b,o[u>>2]|0);r=(c[u>>2]=-(Re*oe+ge*se+Ce*ue)/b,o[u>>2]|0);l=7;a=s<0&1;n=(c[u>>2]=(Re*$+ge*Y+Ce*Q)/b,o[u>>2]|0);v=0;_=f/b}else{e=0;r=0;n=0}s=(D*oe+F*se+G*ue)*(Se*$+be*Y+ve*Q)-(D*$+F*Y+G*Q)*(Se*oe+be*se+ve*ue);f=+N(+s)-((U+9999999747378752e-21)*((ce+pe)*2*.5)+(I+9999999747378752e-21)*(le*.5)+(V+9999999747378752e-21)*((he+ye)*2*.5)+(S+9999999747378752e-21)*(we*.5));if(f>1.1920928955078125e-7){p=Le;return}h=(Se*oe+be*se+ve*ue)*(Se*oe+be*se+ve*ue)+0;w=(Se*$+be*Y+ve*Q)*(Se*$+be*Y+ve*Q);b=+X(+(w+h));if(b>1.1920928955078125e-7?f/b*1.0499999523162842>_:0){e=(c[u>>2]=0/b,o[u>>2]|0);r=(c[u>>2]=-(Se*oe+be*se+ve*ue)/b,o[u>>2]|0);l=8;a=s<0&1;n=(c[u>>2]=(Se*$+be*Y+ve*Q)/b,o[u>>2]|0);v=0;_=f/b}s=(D*oe+F*se+G*ue)*(ke*$+De*Y+Oe*Q)-(D*$+F*Y+G*Q)*(ke*oe+De*se+Oe*ue);f=+N(+s)-((T+9999999747378752e-21)*((ce+pe)*2*.5)+(H+9999999747378752e-21)*(le*.5)+(j+9999999747378752e-21)*((he+ye)*2*.5)+(S+9999999747378752e-21)*((me+de)*2*.5));if(f>1.1920928955078125e-7){p=Le;return}y=(ke*oe+De*se+Oe*ue)*(ke*oe+De*se+Oe*ue)+0;k=(ke*$+De*Y+Oe*Q)*(ke*$+De*Y+Oe*Q);b=+X(+(k+y));if(b>1.1920928955078125e-7?f/b*1.0499999523162842>_:0){e=(c[u>>2]=0/b,o[u>>2]|0);r=(c[u>>2]=-(ke*oe+De*se+Oe*ue)/b,o[u>>2]|0);l=9;a=s<0&1;n=(c[u>>2]=(ke*$+De*Y+Oe*Q)/b,o[u>>2]|0);v=0;_=f/b}s=(D*ie+F*ee+G*te)*(Re*oe+ge*se+Ce*ue)-(D*oe+F*se+G*ue)*(ie*Re+ee*ge+te*Ce);b=+N(+s)-((Z+9999999747378752e-21)*((ae+fe)*2*.5)+(S+9999999747378752e-21)*(le*.5)+(H+9999999747378752e-21)*((me+de)*2*.5)+(I+9999999747378752e-21)*(we*.5));if(b>1.1920928955078125e-7){p=Le;return}g=(ie*Re+ee*ge+te*Ce)*(ie*Re+ee*ge+te*Ce);f=+X(+(g+d));do if(f>1.1920928955078125e-7){if(!(b/f*1.0499999523162842>_))break;e=(c[u>>2]=(Re*oe+ge*se+Ce*ue)/f,o[u>>2]|0);r=(c[u>>2]=0/f,o[u>>2]|0);l=10;a=s<0&1;n=(c[u>>2]=-(ie*Re+ee*ge+te*Ce)/f,o[u>>2]|0);v=0;_=b/f}while(0);s=(D*ie+F*ee+G*te)*(Se*oe+be*se+ve*ue)-(D*oe+F*se+G*ue)*(ie*Se+ee*be+te*ve);b=+N(+s)-((U+9999999747378752e-21)*((ae+fe)*2*.5)+(j+9999999747378752e-21)*(le*.5)+(H+9999999747378752e-21)*((he+ye)*2*.5)+(R+9999999747378752e-21)*(we*.5));if(b>1.1920928955078125e-7){p=Le;return}m=(ie*Se+ee*be+te*ve)*(ie*Se+ee*be+te*ve);f=+X(+(m+h));do if(f>1.1920928955078125e-7){if(!(b/f*1.0499999523162842>_))break;e=(c[u>>2]=(Se*oe+be*se+ve*ue)/f,o[u>>2]|0);r=(c[u>>2]=0/f,o[u>>2]|0);l=11;a=s<0&1;n=(c[u>>2]=-(ie*Se+ee*be+te*ve)/f,o[u>>2]|0);v=0;_=b/f}while(0);s=(D*ie+F*ee+G*te)*(ke*oe+De*se+Oe*ue)-(D*oe+F*se+G*ue)*(ie*ke+ee*De+te*Oe);b=+N(+s)-((T+9999999747378752e-21)*((ae+fe)*2*.5)+(V+9999999747378752e-21)*(le*.5)+(I+9999999747378752e-21)*((he+ye)*2*.5)+(R+9999999747378752e-21)*((me+de)*2*.5));if(b>1.1920928955078125e-7){p=Le;return}d=(ie*ke+ee*De+te*Oe)*(ie*ke+ee*De+te*Oe);f=+X(+(d+y));do if(f>1.1920928955078125e-7){if(!(b/f*1.0499999523162842>_))break;e=(c[u>>2]=(ke*oe+De*se+Oe*ue)/f,o[u>>2]|0);r=(c[u>>2]=0/f,o[u>>2]|0);l=12;a=s<0&1;n=(c[u>>2]=-(ie*ke+ee*De+te*Oe)/f,o[u>>2]|0);v=0;_=b/f}while(0);s=(D*$+F*Y+G*Q)*(ie*Re+ee*ge+te*Ce)-(D*ie+F*ee+G*te)*(Re*$+ge*Y+Ce*Q);b=+N(+s)-((R+9999999747378752e-21)*((ae+fe)*2*.5)+(S+9999999747378752e-21)*((ce+pe)*2*.5)+(T+9999999747378752e-21)*((me+de)*2*.5)+(U+9999999747378752e-21)*(we*.5));if(b>1.1920928955078125e-7){p=Le;return}f=+X(+(g+C+0));do if(f>1.1920928955078125e-7){if(!(b/f*1.0499999523162842>_))break;e=(c[u>>2]=-(Re*$+ge*Y+Ce*Q)/f,o[u>>2]|0);r=(c[u>>2]=(ie*Re+ee*ge+te*Ce)/f,o[u>>2]|0);l=13;a=s<0&1;n=(c[u>>2]=0/f,o[u>>2]|0);v=0;_=b/f}while(0);s=(D*$+F*Y+G*Q)*(ie*Se+ee*be+te*ve)-(D*ie+F*ee+G*te)*(Se*$+be*Y+ve*Q);b=+N(+s)-((I+9999999747378752e-21)*((ae+fe)*2*.5)+(j+9999999747378752e-21)*((ce+pe)*2*.5)+(T+9999999747378752e-21)*((he+ye)*2*.5)+(Z+9999999747378752e-21)*(we*.5));if(b>1.1920928955078125e-7){p=Le;return}f=+X(+(m+w+0));do if(f>1.1920928955078125e-7){if(!(b/f*1.0499999523162842>_))break;e=(c[u>>2]=-(Se*$+be*Y+ve*Q)/f,o[u>>2]|0);r=(c[u>>2]=(ie*Se+ee*be+te*ve)/f,o[u>>2]|0);l=14;a=s<0&1;n=(c[u>>2]=0/f,o[u>>2]|0);v=0;_=b/f}while(0);f=(D*$+F*Y+G*Q)*(ie*ke+ee*De+te*Oe)-(D*ie+F*ee+G*te)*(ke*$+De*Y+Oe*Q);b=+N(+f)-((H+9999999747378752e-21)*((ae+fe)*2*.5)+(V+9999999747378752e-21)*((ce+pe)*2*.5)+(U+9999999747378752e-21)*((he+ye)*2*.5)+(Z+9999999747378752e-21)*((me+de)*2*.5));if(b>1.1920928955078125e-7){p=Le;return}s=+X(+(d+k+0));do if(s>1.1920928955078125e-7){if(!(b/s*1.0499999523162842>_)){je=55;break}e=(c[u>>2]=-(ke*$+De*Y+Oe*Q)/s,o[u>>2]|0);r=(c[u>>2]=(ie*ke+ee*De+te*Oe)/s,o[u>>2]|0);l=15;a=f<0&1;n=(c[u>>2]=0/s,o[u>>2]|0);_=b/s;je=58}else je=55;while(0);do if((je|0)==55){if(!l){p=Le;return}if(!v){je=58;break}n=o[v>>2]|0;e=o[v+16>>2]|0;Te=o[v+32>>2]|0;s=(o[u>>2]=n,+c[u>>2]);f=(o[u>>2]=e,+c[u>>2]);b=(o[u>>2]=Te,+c[u>>2]);r=a;a=Te;D=_}while(0);if((je|0)==58){ie=(o[u>>2]=e,+c[u>>2]);b=(o[u>>2]=r,+c[u>>2]);D=(o[u>>2]=n,+c[u>>2]);s=ie*+c[Le+48>>2]+b*+c[O>>2]+D*oe;n=(c[u>>2]=s,o[u>>2]|0);f=ie*+c[Le+48+16>>2]+b*+c[Le+48+20>>2]+D*se;e=(c[u>>2]=f,o[u>>2]|0);D=ie*+c[Le+48+32>>2]+b*+c[Le+48+36>>2]+D*ue;b=D;r=a;a=(c[u>>2]=D,o[u>>2]|0);D=_}if(!r){Ie=e;Te=a}else{n=(c[u>>2]=-s,o[u>>2]|0);Ie=(c[u>>2]=-f,o[u>>2]|0);Te=(c[u>>2]=-b,o[u>>2]|0)}if((l|0)>6){T=(o[u>>2]=n,+c[u>>2]);I=(o[u>>2]=Ie,+c[u>>2]);j=(o[u>>2]=Te,+c[u>>2]);s=+c[Le+48>>2];g=+c[Le+48+16>>2];w=+c[Le+48+32>>2];C=(T*s+I*g+j*w>0?1:-1)*((ae+fe)*2*.5);R=+c[O>>2];S=+c[Le+48+20>>2];_=+c[Le+48+36>>2];y=(T*R+I*S+j*_>0?1:-1)*((ce+pe)*2*.5);k=(T*oe+I*se+j*ue>0?1:-1)*(le*.5);R=+c[t+48>>2]+C*s+y*R+k*oe;S=+c[t+52>>2]+C*g+y*S+k*se;k=+c[t+56>>2]+C*w+y*_+k*ue;o[Le+528>>2]=o[t+112>>2];o[Le+528+4>>2]=o[t+112+4>>2];o[Le+528+8>>2]=o[t+112+8>>2];_=(T*Re+I*ge+j*Ce>0?-1:1)*((he+ye)*2*.5);y=(T*Se+I*be+j*ve>0?-1:1)*((me+de)*2*.5);w=+c[Le+528+4>>2]+_*ge+y*be;C=+c[Le+528+8>>2]+_*Ce+y*ve;g=(T*ke+I*De+j*Oe>0?-1:1)*(we*.5);y=+c[Le+528>>2]+_*Re+y*Se+g*ke;c[Le+528>>2]=y;c[Le+528+4>>2]=w+g*De;c[Le+528+8>>2]=C+g*Oe;Te=l+-7|0;_=+c[Le+48+(((Te|0)/3|0)<<2)>>2];s=+c[Le+48+(((Te|0)/3|0)+4<<2)>>2];f=+c[Le+48+(((Te|0)/3|0)+8<<2)>>2];d=+c[Le+(((Te|0)%3|0)<<2)>>2];h=+c[Le+(((Te|0)%3|0)+4<<2)>>2];m=+c[Le+(((Te|0)%3|0)+8<<2)>>2];b=1-(_*d+s*h+f*m)*(_*d+s*h+f*m);if(!(b<=9999999747378752e-20))_=(((y-R)*_+(w+g*De-S)*s+(C+g*Oe-k)*f)*(_*d+s*h+f*m)-((y-R)*d+(w+g*De-S)*h+(C+g*Oe-k)*m))*(1/b);else _=0;c[Le+528>>2]=y+_*d;c[Le+528+4>>2]=w+g*De+_*h;c[Le+528+8>>2]=C+g*Oe+_*m;Te=o[(o[i>>2]|0)+16>>2]|0;c[Le+456>>2]=-T;c[Le+456+4>>2]=-I;c[Le+456+8>>2]=-j;c[Le+456+12>>2]=0;GP[Te&15](i,Le+456|0,Le+528|0,D);p=Le;return}ne=(l|0)<4;oe=(o[u>>2]=n,+c[u>>2]);if(ne){a=Le+48|0;J=Le;E=Le+484|0;v=Le+472|0;ie=oe;r=Te;n=Ie;_e=t+48|0;e=t+112|0}else{n=(c[u>>2]=-(o[u>>2]=Ie,+c[u>>2]),o[u>>2]|0);a=Le;J=Le+48|0;E=Le+472|0;v=Le+484|0;ie=-oe;r=(c[u>>2]=-(o[u>>2]=Te,+c[u>>2]),o[u>>2]|0);_e=t+112|0;e=t+48|0}te=(o[u>>2]=n,+c[u>>2]);ee=(o[u>>2]=r,+c[u>>2]);_=ie*+c[J>>2]+te*+c[J+16>>2]+ee*+c[J+32>>2];c[Le+440>>2]=_;s=ie*+c[J+4>>2]+te*+c[J+20>>2]+ee*+c[J+36>>2];c[Le+440+4>>2]=s;d=ie*+c[J+8>>2]+te*+c[J+24>>2]+ee*+c[J+40>>2];c[Le+440+8>>2]=d;_=+N(+_);s=+N(+s);d=+N(+d);n=s>_?s>d?1:2:_>d?0:2;z=s>_?0:_>d&1;K=(s>_?s>d:_>d)?2:1;d=+c[v+(n<<2)>>2];_=+c[e>>2]-+c[_e>>2];s=d*+c[J+(n<<2)>>2];f=+c[e+4>>2];re=_e+4|0;b=+c[re>>2];if(+c[Le+440+(n<<2)>>2]<0){$=_+s;Q=f-b+d*+c[J+((n|4)<<2)>>2];Y=+c[e+8>>2]-+c[_e+8>>2]+d*+c[J+((n|8)<<2)>>2]}else{$=_-s;Q=f-b-d*+c[J+((n|4)<<2)>>2];Y=+c[e+8>>2]-+c[_e+8>>2]-d*+c[J+((n|8)<<2)>>2]}B=(ne?-1:-4)+l|0;switch(B|0){case 0:{n=1;r=2;break}case 1:{n=0;r=2;break}default:{n=0;r=1}}W=a+(n<<2)|0;Z=+c[W>>2];V=+c[W+16>>2];H=+c[W+32>>2];U=$*Z+Q*V+Y*H;W=a+(r<<2)|0;F=+c[W>>2];j=+c[W+16>>2];I=+c[W+32>>2];G=$*F+Q*j+Y*I;W=J+(z<<2)|0;D=+c[W>>2];S=+c[W+16>>2];R=+c[W+32>>2];A=J+(K<<2)|0;T=+c[A>>2];w=+c[A+16>>2];k=+c[A+32>>2];De=+c[v+(z<<2)>>2];Oe=+c[v+(K<<2)>>2];Re=(Z*T+V*w+H*k)*Oe;Oe=(F*T+j*w+I*k)*Oe;c[Le+408>>2]=U-(Z*D+V*S+H*R)*De-Re;c[Le+408+4>>2]=G-(F*D+j*S+I*R)*De-Oe;c[Le+408+8>>2]=U-(Z*D+V*S+H*R)*De+Re;c[Le+408+12>>2]=G-(F*D+j*S+I*R)*De+Oe;c[Le+408+16>>2]=U+(Z*D+V*S+H*R)*De+Re;c[Le+408+20>>2]=G+(F*D+j*S+I*R)*De+Oe;c[Le+408+24>>2]=U+(Z*D+V*S+H*R)*De-Re;c[Le+408+28>>2]=G+(F*D+j*S+I*R)*De-Oe;o[Le+400>>2]=o[E+(n<<2)>>2];o[Le+400+4>>2]=o[E+(r<<2)>>2];P=0;r=4;t=Le+408|0;M=Le+336|0;e:while(1){L=Le+400+(P<<2)|0;x=1-P|0;do if((r|0)>0){e=0;O=t;n=M;while(1){a=O+(P<<2)|0;_=+c[a>>2];s=+c[L>>2];if(s>-_){o[n>>2]=o[O>>2];o[n+4>>2]=o[O+4>>2];e=e+1|0;if(e&8|0){r=e;n=M;break e}_=+c[a>>2];s=+c[L>>2];l=n+8|0}else l=n;v=(r|0)>1;a=O;O=O+8|0;n=v?O:t;f=+c[n+(P<<2)>>2];if(s>-_^s>-f){Oe=+c[a+(x<<2)>>2];c[l+(x<<2)>>2]=Oe+(-s-_)*((+c[n+(x<<2)>>2]-Oe)/(f-_));c[l+(P<<2)>>2]=-+c[L>>2];n=e+1|0;if(!(n&8)){e=n;n=l+8|0}else{r=n;n=M;break e}}else n=l;if(!v)break;else r=r+-1|0}n=(M|0)==(Le+336|0)?Le+528|0:Le+336|0;if((e|0)<=0){r=0;break}O=e;r=0;t=M;e=n;while(1){a=t+(P<<2)|0;_=+c[a>>2];s=+c[L>>2];if(_<s){o[e>>2]=o[t>>2];o[e+4>>2]=o[t+4>>2];r=r+1|0;if(r&8|0)break e;_=+c[a>>2];s=+c[L>>2];e=e+8|0}v=(O|0)>1;l=t;t=t+8|0;a=v?t:M;f=+c[a+(P<<2)>>2];if(_<s^f<s){Oe=+c[l+(x<<2)>>2];c[e+(x<<2)>>2]=Oe+(s-_)*((+c[a+(x<<2)>>2]-Oe)/(f-_));o[e+(P<<2)>>2]=o[L>>2];r=r+1|0;if(!(r&8))e=e+8|0;else break e}if(!v)break;else O=O+-1|0}}else{n=(M|0)==(Le+336|0)?Le+528|0:Le+336|0;r=0}while(0);P=P+1|0;if((P|0)>=2)break;else{t=n;M=(n|0)==(Le+336|0)?Le+528|0:Le+336|0}}if((n|0)!=(Le+336|0))Wc(Le+336|0,n|0,r<<3|0)|0;if((r|0)>=1){C=1/((Z*D+V*S+H*R)*(F*T+j*w+I*k)-(F*D+j*S+I*R)*(Z*T+V*w+H*k));g=+c[E+(B<<2)>>2];y=+c[W>>2];d=+c[A>>2];h=+c[J+((z|4)<<2)>>2];m=+c[J+((K|4)<<2)>>2];b=+c[J+((z|8)<<2)>>2];f=+c[J+((K|8)<<2)>>2];e=0;n=0;do{J=n<<1;_=+c[Le+336+(J<<2)>>2];s=+c[Le+336+((J|1)<<2)>>2];Se=(F*T+j*w+I*k)*C*(_-U)-(Z*T+V*w+H*k)*C*(s-G);Oe=(Z*D+V*S+H*R)*C*(s-G)-(F*D+j*S+I*R)*C*(_-U);J=e*3|0;Re=$+Se*y+Oe*d;c[Le+240+(J<<2)>>2]=Re;De=Q+Se*h+Oe*m;c[Le+240+(J+1<<2)>>2]=De;Oe=Y+Se*b+Oe*f;c[Le+240+(J+2<<2)>>2]=Oe;Oe=g-(ie*Re+te*De+ee*Oe);c[Le+208+(e<<2)>>2]=Oe;if(Oe>=0){J=e<<1;c[Le+336+(J<<2)>>2]=_;c[Le+336+((J|1)<<2)>>2]=s;e=e+1|0}n=n+1|0}while((n|0)!=(r|0));e:do if((e|0)>=1){O=(e|0)<4?e:4;O=(O|0)<1?1:O;if((e|0)<=(O|0))if(ne){r=_e+8|0;s=-(o[u>>2]=Ie,+c[u>>2]);_=-(o[u>>2]=Te,+c[u>>2]);n=0;while(1){Te=n*3|0;c[Le+528>>2]=+c[Le+240+(Te<<2)>>2]+ +c[_e>>2];c[Le+528+4>>2]=+c[Le+240+(Te+1<<2)>>2]+ +c[re>>2];c[Le+528+8>>2]=+c[Le+240+(Te+2<<2)>>2]+ +c[r>>2];Te=o[(o[i>>2]|0)+16>>2]|0;c[Le+192>>2]=-oe;c[Le+192+4>>2]=s;c[Le+192+8>>2]=_;c[Le+192+12>>2]=0;GP[Te&15](i,Le+192|0,Le+528|0,-+c[Le+208+(n<<2)>>2]);n=n+1|0;if((n|0)==(e|0))break e}}else{r=_e+8|0;s=(o[u>>2]=Ie,+c[u>>2]);_=(o[u>>2]=Te,+c[u>>2]);n=0;while(1){Te=n*3|0;Oe=+c[Le+208+(n<<2)>>2];c[Le+528>>2]=+c[Le+240+(Te<<2)>>2]+ +c[_e>>2]-oe*Oe;c[Le+528+4>>2]=+c[Le+240+(Te+1<<2)>>2]+ +c[re>>2]-s*Oe;c[Le+528+8>>2]=+c[Le+240+(Te+2<<2)>>2]+ +c[r>>2]-_*Oe;Te=o[(o[i>>2]|0)+16>>2]|0;c[Le+176>>2]=-oe;c[Le+176+4>>2]=-s;c[Le+176+8>>2]=-_;c[Le+176+12>>2]=0;GP[Te&15](i,Le+176|0,Le+528|0,-Oe);n=n+1|0;if((n|0)==(e|0))break e}}t:do if((e|0)>1){r=1;a=0;s=+c[Le+208>>2];while(1){_=+c[Le+208+(r<<2)>>2];n=_>s;a=n?r:a;r=r+1|0;if((r|0)==(e|0))break;else s=n?_:s}switch(e|0){case 1:{n=Le+144|0;r=Le+144|0;e=1;je=111;break t}case 2:{n=Le+144|0;r=Le+144|0;e=2;s=(+c[Le+336>>2]+ +c[Le+336+8>>2])*.5;_=(+c[Le+336+4>>2]+ +c[Le+336+12>>2])*.5;je=116;break t}default:{}}n=e+-1|0;_=0;s=0;m=0;r=0;do{J=r<<1;Se=+c[Le+336+(J<<2)>>2];Re=+c[Le+336+(J+3<<2)>>2];De=+c[Le+336+(J+2<<2)>>2];Oe=+c[Le+336+((J|1)<<2)>>2];_=_+(Se*Re-De*Oe);s=s+(Se+De)*(Se*Re-De*Oe);m=m+(Re+Oe)*(Se*Re-De*Oe);r=r+1|0}while((r|0)!=(n|0));J=e<<1;f=+c[Le+336+(J+-2<<2)>>2];b=+c[Le+336+4>>2];d=+c[Le+336>>2];h=+c[Le+336+(J+-1<<2)>>2];_=_+(f*b-d*h);if(+N(+_)>1.1920928955078125e-7)_=1/(_*3);else _=0xde0b6b000000000;if((e|0)>0){v=Le+144|0;r=Le+144|0;l=Le+528|0;s=_*(s+(f*b-d*h)*(f+d));_=_*(m+(f*b-d*h)*(h+b));je=119;break}n=Le+144|0;r=0;v=e}else{n=Le+144|0;r=Le+144|0;a=0;je=111}while(0);if((je|0)==111){s=+c[Le+336>>2];_=+c[Le+336+4>>2];je=116}if((je|0)==116){v=n;l=Le+528|0;je=119}if((je|0)==119){n=0;do{je=n<<1;c[Le+528+(n<<2)>>2]=+q(+(+c[Le+336+((je|1)<<2)>>2]-_),+(+c[Le+336+(je<<2)>>2]-s));n=n+1|0}while((n|0)!=(e|0));n=0;do{o[Le+496+(n<<2)>>2]=1;n=n+1|0}while((n|0)!=(e|0));n=v;r=1;v=e}e=Le+496+(a<<2)|0;o[e>>2]=0;o[n>>2]=a;t:do if((O|0)>1){b=+c[Le+528+(a<<2)>>2];if(r){r=Le+144+4|0;l=1}else{n=Le+144+4|0;r=1;while(1){o[n>>2]=a;o[e>>2]=0;r=r+1|0;if((r|0)==(O|0))break t;else n=n+4|0}}while(1){f=6.2831854820251465/+(O|0)*+(l|0)+b;f=f>3.1415927410125732?f+-6.2831854820251465:f;o[r>>2]=a;n=a;e=0;s=1e9;while(1){do if(!(o[Le+496+(e<<2)>>2]|0))_=s;else{_=+N(+(+c[Le+528+(e<<2)>>2]-f));_=_>3.1415927410125732?6.2831854820251465-_:_;if(!(_<s)){_=s;break}o[r>>2]=e;n=e}while(0);e=e+1|0;if((e|0)==(v|0))break;else s=_}o[Le+496+(n<<2)>>2]=0;l=l+1|0;if((l|0)==(O|0))break;else r=r+4|0}}while(0);if((O|0)>0){r=_e+8|0;s=(o[u>>2]=Ie,+c[u>>2]);_=(o[u>>2]=Te,+c[u>>2]);if(ne){n=0;do{Te=o[Le+144+(n<<2)>>2]|0;c[Le+528>>2]=+c[Le+240+(Te*3<<2)>>2]+ +c[_e>>2];c[Le+528+4>>2]=+c[Le+240+((Te*3|0)+1<<2)>>2]+ +c[re>>2];c[Le+528+8>>2]=+c[Le+240+((Te*3|0)+2<<2)>>2]+ +c[r>>2];Ie=o[(o[i>>2]|0)+16>>2]|0;c[Le+128>>2]=-oe;c[Le+128+4>>2]=-s;c[Le+128+8>>2]=-_;c[Le+128+12>>2]=0;GP[Ie&15](i,Le+128|0,Le+528|0,-+c[Le+208+(Te<<2)>>2]);n=n+1|0}while((n|0)<(O|0))}else{n=0;do{Ie=o[Le+144+(n<<2)>>2]|0;Se=+c[Le+240+(Ie*3<<2)>>2]+ +c[_e>>2];c[Le+528>>2]=Se;Re=+c[Le+240+((Ie*3|0)+1<<2)>>2]+ +c[re>>2];c[Le+528+4>>2]=Re;De=+c[Le+240+((Ie*3|0)+2<<2)>>2]+ +c[r>>2];c[Le+528+8>>2]=De;Te=o[(o[i>>2]|0)+16>>2]|0;c[Le+112>>2]=-oe;c[Le+112+4>>2]=-s;c[Le+112+8>>2]=-_;c[Le+112+12>>2]=0;Oe=+c[Le+208+(Ie<<2)>>2];c[Le+96>>2]=Se-oe*Oe;c[Le+96+4>>2]=Re-Oe*s;c[Le+96+8>>2]=De-Oe*_;c[Le+96+12>>2]=0;GP[Te&15](i,Le+112|0,Le+96|0,-Oe);n=n+1|0}while((n|0)<(O|0))}}}while(0)}p=Le;return}function wC(e){e=e|0;var t=0;o[e>>2]=3064;t=o[e+20>>2]|0;if(t|0){if(n[e+24>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+20>>2]=0}n[e+24>>0]=1;o[e+20>>2]=0;o[e+12>>2]=0;o[e+16>>2]=0;return}function kC(e){e=e|0;var t=0;o[e>>2]=3064;t=o[e+20>>2]|0;if(!t){qa(e);return}if(!(n[e+24>>0]|0)){qa(e);return}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);qa(e);return}function SC(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=p;p=p+16|0;o[r>>2]=e;o[r+4>>2]=n;e=o[e+72+((o[(o[t+4>>2]|0)+4>>2]|0)*144|0)+(o[(o[i+4>>2]|0)+4>>2]<<2)>>2]|0;e=bP[o[(o[e>>2]|0)+8>>2]&31](e,r,t,i)|0;p=r;return e|0}function RC(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0;u=p;p=p+16|0;o[4989]=(o[4989]|0)+1;if(!(o[e+4>>2]&2))r=6988;else{r=o[t+192>>2]|0;b=+PP[o[(o[r>>2]|0)+20>>2]&1](r,.019999999552965164);c[u+4>>2]=b;r=o[i+192>>2]|0;a=+PP[o[(o[r>>2]|0)+20>>2]&1](r,.019999999552965164);c[u>>2]=a;r=b<a?u+4|0:u}s=o[r>>2]|0;b=+c[t+184>>2];a=+c[i+184>>2];a=b<a?b:a;r=o[e+68>>2]|0;_=o[r+8>>2]|0;if(!_){if(o[e+4>>2]&4|0){e=0;p=u;return e|0}o[5637]=(o[5637]|0)+1;r=Qa(791)|0;if(!r)f=0;else{o[(r+4+15&-16)+-4>>2]=r;f=r+4+15&-16}}else{f=o[r+12>>2]|0;o[r+12>>2]=o[f>>2];o[r+8>>2]=_+-1}o[f>>2]=1025;o[f+116>>2]=0;n[f+120>>0]=0;r=f+124|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[r+20>>2]=0;o[r+24>>2]=0;o[r+28>>2]=0;o[f+300>>2]=0;n[f+304>>0]=0;r=f+308|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[r+20>>2]=0;o[r+24>>2]=0;o[r+28>>2]=0;o[f+484>>2]=0;n[f+488>>0]=0;r=f+492|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[r+20>>2]=0;o[r+24>>2]=0;o[r+28>>2]=0;o[f+668>>2]=0;n[f+672>>0]=0;r=f+676|0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;o[r+16>>2]=0;o[r+20>>2]=0;o[r+24>>2]=0;o[r+28>>2]=0;o[f+740>>2]=t;o[f+744>>2]=i;o[f+748>>2]=0;o[f+752>>2]=s;c[f+756>>2]=a;t=f;r=o[e+12>>2]|0;o[f+768>>2]=r;if((r|0)==(o[e+16>>2]|0)?(l=r|0?r<<1:1,(r|0)<(l|0)):0){if(!l)s=0;else{o[5637]=(o[5637]|0)+1;r=Qa((l<<2|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}s=r;r=o[e+12>>2]|0}if((r|0)>0){_=0;do{o[s+(_<<2)>>2]=o[(o[e+20>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[e+20>>2]|0;if(_){if(n[e+24>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[e+12>>2]|0}o[e+20>>2]=0}n[e+24>>0]=1;o[e+20>>2]=s;o[e+16>>2]=l}o[(o[e+20>>2]|0)+(r<<2)>>2]=t;o[e+12>>2]=r+1;e=f;p=u;return e|0}function jC(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0;o[4989]=(o[4989]|0)+-1;aP[o[(o[e>>2]|0)+20>>2]&127](e,t);n=o[t+768>>2]|0;i=(o[e+12>>2]|0)+-1|0;_=o[e+20>>2]|0;r=o[_+(n<<2)>>2]|0;o[_+(n<<2)>>2]=o[_+(i<<2)>>2];o[(o[e+20>>2]|0)+(i<<2)>>2]=r;o[(o[(o[e+20>>2]|0)+(n<<2)>>2]|0)+768>>2]=n;o[e+12>>2]=i;e=o[e+68>>2]|0;if(!t)return;_=o[e+16>>2]|0;if(_>>>0<=t>>>0?(_+(te(o[e>>2]|0,o[e+4>>2]|0)|0)|0)>>>0>t>>>0:0){o[t>>2]=o[e+12>>2];o[e+12>>2]=t;o[e+8>>2]=(o[e+8>>2]|0)+1;return}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function IC(e,t){e=e|0;t=t|0;o[t+748>>2]=0;return}function TC(e,t,i){e=e|0;t=t|0;i=i|0;e:do switch(o[t+216>>2]|0){case 2:case 5:{switch(o[i+216>>2]|0){case 2:case 5:{t=0;break}default:break e}return t|0}default:{}}while(0);if(!((o[t+260>>2]|0)!=0?!(DP[o[(o[t>>2]|0)+12>>2]&31](t,i)|0):0)){if(!(o[i+260>>2]|0)){e=1;return e|0}if(DP[o[(o[i>>2]|0)+12>>2]&31](i,t)|0){e=1;return e|0}}e=0;return e|0}function DC(e,t,i){e=e|0;t=t|0;i=i|0;e=o[t+204>>2]|0;if(e&4|0){i=0;return i|0}t=o[i+204>>2]|0;if(t&4|0){i=0;return i|0}if(!(e&3)){i=1;return i|0}i=(t&3|0)==0;return i|0}function OC(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=p;p=p+16|0;o[r>>2]=3136;o[r+4>>2]=i;o[r+8>>2]=e;EP[o[(o[t>>2]|0)+48>>2]&127](t,r,n);p=r;return}function LC(e){e=e|0;qa(e);return}function xC(e,t){e=e|0;t=t|0;var i=0;i=o[e+8>>2]|0;EP[o[i+60>>2]&127](t,i,o[e+4>>2]|0);return 0}function MC(e){e=e|0;return o[e+12>>2]|0}function PC(e,t){e=e|0;t=t|0;return o[(o[e+20>>2]|0)+(t<<2)>>2]|0}function WC(e){e=e|0;if(!(o[e+12>>2]|0)){e=0;return e|0}e=o[e+20>>2]|0;return e|0}function BC(e){e=e|0;return o[e+68>>2]|0}function AC(e){e=e|0;return o[e+68>>2]|0}function FC(e,t){e=e|0;t=t|0;var i=0;e=o[e+64>>2]|0;i=o[e+8>>2]|0;if(i|0){t=o[e+12>>2]|0;o[e+12>>2]=o[t>>2];o[e+8>>2]=i+-1;return t|0}o[5637]=(o[5637]|0)+1;e=Qa(t+19|0)|0;if(!e){t=0;return t|0}o[(e+4+15&-16)+-4>>2]=e;t=e+4+15&-16;return t|0}function GC(e,t){e=e|0;t=t|0;var i=0;e=o[e+64>>2]|0;if(!t)return;i=o[e+16>>2]|0;if(i>>>0<=t>>>0?(i+(te(o[e>>2]|0,o[e+4>>2]|0)|0)|0)>>>0>t>>>0:0){o[t>>2]=o[e+12>>2];o[e+12>>2]=t;o[e+8>>2]=(o[e+8>>2]|0)+1;return}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function EC(e,t){e=e|0;t=t|0;var i=0,r=0;o[e>>2]=3064;o[e+4>>2]=2;n[e+24>>0]=1;o[e+20>>2]=0;o[e+12>>2]=0;o[e+16>>2]=0;o[e+28>>2]=4460;o[e+5256>>2]=t;o[e+60>>2]=70;o[e+64>>2]=fP[o[(o[t>>2]|0)+12>>2]&127](t)|0;o[e+68>>2]=fP[o[(o[t>>2]|0)+8>>2]&127](t)|0;t=0;do{i=0;do{r=o[e+5256>>2]|0;o[e+72+(t*144|0)+(i<<2)>>2]=gP[o[(o[r>>2]|0)+16>>2]&63](r,t,i)|0;i=i+1|0}while((i|0)<36);t=t+1|0}while((t|0)<36);return}function VC(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;f=p;p=p+80|0;_=o[o[e>>2]>>2]|0;s=o[o[e+4>>2]>>2]|0;if(!(gP[o[(o[t>>2]|0)+24>>2]&63](t,_,s)|0)){p=f;return}r=o[_+192>>2]|0;o[f+56>>2]=0;o[f+56+4>>2]=r;o[f+56+8>>2]=_;o[f+56+12>>2]=_+4;o[f+56+16>>2]=-1;o[f+56+20>>2]=-1;r=o[s+192>>2]|0;o[f+32>>2]=0;o[f+32+4>>2]=r;o[f+32+8>>2]=s;o[f+32+12>>2]=s+4;o[f+32+16>>2]=-1;o[f+32+20>>2]=-1;r=o[e+8>>2]|0;if(!r){r=bP[o[(o[t>>2]|0)+8>>2]&31](t,f+56|0,f+32|0,0)|0;o[e+8>>2]=r;if(r|0)a=4}else a=4;if((a|0)==4){o[f>>2]=4460;o[f+4>>2]=0;o[f+8>>2]=f+56;o[f+12>>2]=f+32;if((o[i+8>>2]|0)!=1){n=+yP[o[(o[r>>2]|0)+12>>2]&15](r,_,s,i,f);if(+c[i+12>>2]>n)c[i+12>>2]=n}else rP[o[(o[r>>2]|0)+8>>2]&31](r,f+56|0,f+32|0,i,f)}p=f;return}function NC(e){e=e|0;var t=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(t|0){if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0}n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;return}function XC(e){e=e|0;var t=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(t|0){if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0}n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function HC(e,t){e=e|0;t=t|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+192>>2]=t;o[e+200>>2]=t;return}function ZC(e,t){e=e|0;t=t|0;var i=0,n=0;n=o[e+268>>2]|0;e:do if((n|0)>0){i=o[e+276>>2]|0;e=0;while(1){if((o[i+(e<<2)>>2]|0)==(t|0))break e;e=e+1|0;if((e|0)>=(n|0)){e=n;break}}}else e=n;while(0);return(e|0)>=(n|0)|0}function UC(e){e=e|0;return 256}function zC(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;o[t+16>>2]=o[e+4>>2];o[t+20>>2]=o[e+8>>2];o[t+24>>2]=o[e+12>>2];o[t+28>>2]=o[e+16>>2];o[t+32>>2]=o[e+20>>2];o[t+36>>2]=o[e+24>>2];o[t+40>>2]=o[e+28>>2];o[t+44>>2]=o[e+32>>2];o[t+48>>2]=o[e+36>>2];o[t+52>>2]=o[e+40>>2];o[t+56>>2]=o[e+44>>2];o[t+60>>2]=o[e+48>>2];o[t+64>>2]=o[e+52>>2];o[t+68>>2]=o[e+56>>2];o[t+72>>2]=o[e+60>>2];o[t+76>>2]=o[e+64>>2];o[t+80>>2]=o[e+68>>2];o[t+84>>2]=o[e+72>>2];o[t+88>>2]=o[e+76>>2];o[t+92>>2]=o[e+80>>2];o[t+96>>2]=o[e+84>>2];o[t+100>>2]=o[e+88>>2];o[t+104>>2]=o[e+92>>2];o[t+108>>2]=o[e+96>>2];o[t+112>>2]=o[e+100>>2];o[t+116>>2]=o[e+104>>2];o[t+120>>2]=o[e+108>>2];o[t+124>>2]=o[e+112>>2];o[t+128>>2]=o[e+116>>2];o[t+132>>2]=o[e+120>>2];o[t+136>>2]=o[e+124>>2];o[t+140>>2]=o[e+128>>2];o[t+144>>2]=o[e+132>>2];o[t+148>>2]=o[e+136>>2];o[t+152>>2]=o[e+140>>2];o[t+156>>2]=o[e+144>>2];o[t+160>>2]=o[e+148>>2];o[t+164>>2]=o[e+152>>2];o[t+168>>2]=o[e+156>>2];o[t+172>>2]=o[e+160>>2];o[t+176>>2]=o[e+164>>2];o[t+180>>2]=o[e+168>>2];o[t+184>>2]=o[e+172>>2];o[t+188>>2]=o[e+176>>2];o[t+224>>2]=o[e+180>>2];o[t+192>>2]=o[e+184>>2];o[t>>2]=0;o[t+4>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+192>>2]|0)|0;o[t+8>>2]=0;o[t+228>>2]=o[e+204>>2];o[t+232>>2]=o[e+208>>2];o[t+236>>2]=o[e+212>>2];o[t+240>>2]=o[e+216>>2];o[t+196>>2]=o[e+220>>2];o[t+200>>2]=o[e+224>>2];o[t+204>>2]=o[e+232>>2];o[t+208>>2]=o[e+228>>2];o[t+244>>2]=o[e+236>>2];n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t+12>>2]=r;if(!r){i=e+248|0;i=o[i>>2]|0;r=t+212|0;o[r>>2]=i;r=e+252|0;r=o[r>>2]|0;i=t+216|0;o[i>>2]=r;i=e+256|0;i=o[i>>2]|0;r=t+220|0;o[r>>2]=i;e=e+260|0;e=o[e>>2]|0;r=t+248|0;o[r>>2]=e;return 9250}aP[o[(o[i>>2]|0)+48>>2]&127](i,n);i=e+248|0;i=o[i>>2]|0;r=t+212|0;o[r>>2]=i;r=e+252|0;r=o[r>>2]|0;i=t+216|0;o[i>>2]=r;i=e+256|0;i=o[i>>2]|0;r=t+220|0;o[r>>2]=i;e=e+260|0;e=o[e>>2]|0;r=t+248|0;o[r>>2]=e;return 9250}function YC(e,t){e=e|0;t=t|0;var i=0,n=0;n=fP[o[(o[e>>2]|0)+16>>2]&127](e)|0;n=gP[o[(o[t>>2]|0)+16>>2]&63](t,n,1)|0;i=gP[o[(o[e>>2]|0)+20>>2]&63](e,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,i,1245859651,e);return}function KC(e){e=e|0;var t=0,i=0,r=0,_=0,s=0;o[e>>2]=3192;i=o[e+8>>2]|0;t=o[e+16>>2]|0;if((i|0)>0){s=0;do{r=(o[t+(s<<2)>>2]|0)+188|0;_=o[r>>2]|0;if(_){i=o[e+68>>2]|0;i=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0;EP[o[(o[i>>2]|0)+40>>2]&127](i,_,o[e+24>>2]|0);i=o[e+68>>2]|0;EP[o[(o[i>>2]|0)+12>>2]&127](i,_,o[e+24>>2]|0);o[r>>2]=0;i=o[e+8>>2]|0;t=o[e+16>>2]|0}s=s+1|0}while((s|0)<(i|0))}if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;\nreturn}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function QC(e){e=e|0;KC(e);qa(e);return}function qC(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0;y=p;p=p+64|0;Zp(9296);t=o[e+8>>2]|0;if((t|0)>0){d=0;do{b=o[(o[e+16>>2]|0)+(d<<2)>>2]|0;if(!(n[e+76>>0]|0))switch(o[b+216>>2]|0){case 2:case 5:break;default:m=11}else m=11;if((m|0)==11){m=0;t=o[b+192>>2]|0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b+4|0,y+48|0,y+32|0);a=+c[y+48>>2]+-.019999999552965164;c[y+48>>2]=a;f=+c[y+48+4>>2]+-.019999999552965164;c[y+48+4>>2]=f;s=+c[y+48+8>>2]+-.019999999552965164;c[y+48+8>>2]=s;i=+c[y+32>>2]+.019999999552965164;c[y+32>>2]=i;r=+c[y+32+4>>2]+.019999999552965164;c[y+32+4>>2]=r;_=+c[y+32+8>>2]+.019999999552965164;c[y+32+8>>2]=_;if(((n[e+44>>0]|0)!=0?(o[b+236>>2]|0)==2:0)?(o[b+204>>2]&3|0)==0:0){t=o[b+192>>2]|0;HP[o[(o[t>>2]|0)+8>>2]&127](t,b+68|0,y+16|0,y);a=+c[y+16>>2]+-.019999999552965164;c[y+16>>2]=a;f=+c[y+16+4>>2]+-.019999999552965164;c[y+16+4>>2]=f;r=+c[y+16+8>>2]+-.019999999552965164;c[y+16+8>>2]=r;_=+c[y>>2]+.019999999552965164;c[y>>2]=_;s=+c[y+4>>2]+.019999999552965164;c[y+4>>2]=s;l=+c[y+8>>2]+.019999999552965164;c[y+8>>2]=l;i=+c[y+48>>2];if(a<i)c[y+48>>2]=a;else a=i;i=+c[y+48+4>>2];if(f<i)c[y+48+4>>2]=f;else f=i;i=+c[y+48+8>>2];if(r<i){c[y+48+8>>2]=r;u=r}else u=i;i=+c[y+16+12>>2];if(i<+c[y+48+12>>2])c[y+48+12>>2]=i;i=+c[y+32>>2];if(i<_){c[y+32>>2]=_;i=_}r=+c[y+32+4>>2];if(r<s){c[y+32+4>>2]=s;r=s}_=+c[y+32+8>>2];if(_<l){c[y+32+8>>2]=l;_=l}s=+c[y+12>>2];if(+c[y+32+12>>2]<s)c[y+32+12>>2]=s;s=u}t=o[e+68>>2]|0;if((o[b+204>>2]&1|0)==0?(a=i-a,l=r-f,u=_-s,!(a*a+l*l+u*u<999999995904)):0){if((o[b+216>>2]&-2|0)!=4)o[b+216>>2]=5;if(n[9308]|0?(h=o[e+72>>2]|0,h|0):0){n[9308]=0;aP[o[(o[h>>2]|0)+44>>2]&127](h,9309);b=o[e+72>>2]|0;aP[o[(o[b>>2]|0)+44>>2]&127](b,9358);b=o[e+72>>2]|0;aP[o[(o[b>>2]|0)+44>>2]&127](b,9426);b=o[e+72>>2]|0;aP[o[(o[b>>2]|0)+44>>2]&127](b,9491)}}else rP[o[(o[t>>2]|0)+16>>2]&31](t,o[b+188>>2]|0,y+48|0,y+32|0,o[e+24>>2]|0);t=o[e+8>>2]|0}d=d+1|0}while((d|0)<(t|0))}t=o[2006]|0;m=(o[t+16>>2]|0)+-1|0;o[t+16>>2]=m;if(m|0){p=y;return}do if(o[t+4>>2]|0){ut(y+48|0,0)|0;m=o[5649]|0;c[t+8>>2]=+c[t+8>>2]+ +(((o[y+48+4>>2]|0)-(o[m+4>>2]|0)+(((o[y+48>>2]|0)-(o[m>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[t+16>>2]|0)){t=o[2006]|0;break}else{p=y;return}}while(0);o[2006]=o[t+20>>2];p=y;return}function JC(e){e=e|0;var t=0,i=0;t=p;p=p+16|0;Zp(9500);i=o[e+68>>2]|0;aP[o[(o[i>>2]|0)+32>>2]&127](i,o[e+24>>2]|0);e=o[2006]|0;i=(o[e+16>>2]|0)+-1|0;o[e+16>>2]=i;if(i|0){p=t;return}do if(o[e+4>>2]|0){ut(t|0,0)|0;i=o[5649]|0;c[e+8>>2]=+c[e+8>>2]+ +(((o[t+4>>2]|0)-(o[i+4>>2]|0)+(((o[t>>2]|0)-(o[i>>2]|0)|0)*1e6|0)-(o[e+12>>2]|0)|0)>>>0)/1e3;if(!(o[e+16>>2]|0)){e=o[2006]|0;break}else{p=t;return}}while(0);o[2006]=o[e+20>>2];p=t;return}function $C(e,t){e=e|0;t=t|0;o[e+72>>2]=t;return}function ew(e){e=e|0;return o[e+72>>2]|0}function tw(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;h=p;p=p+192|0;if(!(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0)){p=h;return}s=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;aP[o[(o[s>>2]|0)+8>>2]&127](h+80|0,s);s=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;if(((fP[o[(o[s>>2]|0)+56>>2]&127](s)|0)&8|0?(i=o[e+24>>2]|0,i|0):0)?(a=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0,(a|0)>0):0){_=0;do{i=o[e+24>>2]|0;i=DP[o[(o[i>>2]|0)+40>>2]&31](i,_)|0;r=o[i+748>>2]|0;if((r|0)>0){s=0;do{m=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;sP[o[(o[m>>2]|0)+40>>2]&0](m,i+4+(s*184|0)+32|0,i+4+(s*184|0)+64|0,+c[i+4+(s*184|0)+80>>2],o[i+4+(s*184|0)+148>>2]|0,h+80+96|0);s=s+1|0}while((s|0)!=(r|0))}_=_+1|0}while((_|0)!=(a|0))}m=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;if((fP[o[(o[m>>2]|0)+56>>2]&127](m)|0)&3|0?(o[e+8>>2]|0)>0:0){_=0;do{r=o[(o[e+16>>2]|0)+(_<<2)>>2]|0;if(!(o[r+204>>2]&32)){if(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0?(m=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0,(fP[o[(o[m>>2]|0)+56>>2]&127](m)|0)&1|0):0){o[h+64>>2]=1053609165;o[h+64+4>>2]=1053609165;o[h+64+8>>2]=1053609165;c[h+64+12>>2]=0;switch(o[r+216>>2]|0){case 1:{o[h+64>>2]=o[h+80>>2];o[h+64+4>>2]=o[h+80+4>>2];o[h+64+8>>2]=o[h+80+8>>2];o[h+64+12>>2]=o[h+80+12>>2];break}case 2:{o[h+64>>2]=o[h+80+16>>2];o[h+64+4>>2]=o[h+80+16+4>>2];o[h+64+8>>2]=o[h+80+16+8>>2];o[h+64+12>>2]=o[h+80+16+12>>2];break}case 3:{o[h+64>>2]=o[h+80+32>>2];o[h+64+4>>2]=o[h+80+32+4>>2];o[h+64+8>>2]=o[h+80+32+8>>2];o[h+64+12>>2]=o[h+80+32+12>>2];break}case 4:{o[h+64>>2]=o[h+80+48>>2];o[h+64+4>>2]=o[h+80+48+4>>2];o[h+64+8>>2]=o[h+80+48+8>>2];o[h+64+12>>2]=o[h+80+48+12>>2];break}case 5:{o[h+64>>2]=o[h+80+64>>2];o[h+64+4>>2]=o[h+80+64+4>>2];o[h+64+8>>2]=o[h+80+64+8>>2];o[h+64+12>>2]=o[h+80+64+12>>2];break}default:{o[h+64>>2]=1050253722;o[h+64+4>>2]=1050253722;o[h+64+8>>2]=1050253722;c[h+64+12>>2]=0}}HP[o[(o[e>>2]|0)+28>>2]&127](e,r+4|0,o[r+192>>2]|0,h+64|0)}i=o[e+72>>2]|0;if(i|0?(fP[o[(o[i>>2]|0)+56>>2]&127](i)|0)&2|0:0){o[h+32>>2]=o[h+80+80>>2];o[h+32+4>>2]=o[h+80+80+4>>2];o[h+32+8>>2]=o[h+80+80+8>>2];o[h+32+12>>2]=o[h+80+80+12>>2];m=o[r+192>>2]|0;HP[o[(o[m>>2]|0)+8>>2]&127](m,r+4|0,h+64|0,h+48|0);c[h+64>>2]=+c[h+64>>2]+-.019999999552965164;c[h+64+4>>2]=+c[h+64+4>>2]+-.019999999552965164;c[h+64+8>>2]=+c[h+64+8>>2]+-.019999999552965164;c[h+48>>2]=+c[h+48>>2]+.019999999552965164;c[h+48+4>>2]=+c[h+48+4>>2]+.019999999552965164;c[h+48+8>>2]=+c[h+48+8>>2]+.019999999552965164;do if((n[e+44>>0]|0?(o[r+236>>2]|0)==2:0)?(o[r+204>>2]&3|0)==0:0){m=o[r+192>>2]|0;HP[o[(o[m>>2]|0)+8>>2]&127](m,r+68|0,h+16|0,h);t=+c[h+16>>2]+-.019999999552965164;c[h+16>>2]=t;f=+c[h+16+4>>2]+-.019999999552965164;c[h+16+4>>2]=f;l=+c[h+16+8>>2]+-.019999999552965164;c[h+16+8>>2]=l;u=+c[h>>2]+.019999999552965164;c[h>>2]=u;b=+c[h+4>>2]+.019999999552965164;c[h+4>>2]=b;d=+c[h+8>>2]+.019999999552965164;c[h+8>>2]=d;if(t<+c[h+64>>2])c[h+64>>2]=t;if(f<+c[h+64+4>>2])c[h+64+4>>2]=f;if(l<+c[h+64+8>>2])c[h+64+8>>2]=l;t=+c[h+16+12>>2];if(t<+c[h+64+12>>2])c[h+64+12>>2]=t;if(+c[h+48>>2]<u)c[h+48>>2]=u;if(+c[h+48+4>>2]<b)c[h+48+4>>2]=b;if(+c[h+48+8>>2]<d)c[h+48+8>>2]=d;t=+c[h+12>>2];if(!(+c[h+48+12>>2]<t))break;c[h+48+12>>2]=t}while(0);m=o[e+72>>2]|0;HP[o[(o[m>>2]|0)+60>>2]&127](m,h+64|0,h+48|0,h+32|0)}}_=_+1|0}while((_|0)<(o[e+8>>2]|0))}p=h;return}function iw(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0;v=p;p=p+368|0;if(fP[o[(o[e>>2]|0)+20>>2]&127](e)|0?(y=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0,(fP[o[(o[y>>2]|0)+56>>2]&127](y)|0)&32768|0):0){y=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;NP[o[(o[y>>2]|0)+64>>2]&7](y,t,1)}r=o[i+4>>2]|0;switch(r|0){case 31:{r=o[i+20>>2]|0;if((r|0)<=0){p=v;return}do{g=r;r=r+-1|0;y=o[i+28>>2]|0;W=+c[y+(r*80|0)>>2];x=+c[y+(r*80|0)+4>>2];D=+c[y+(r*80|0)+8>>2];P=+c[y+(r*80|0)+16>>2];L=+c[y+(r*80|0)+20>>2];I=+c[y+(r*80|0)+24>>2];M=+c[y+(r*80|0)+32>>2];O=+c[y+(r*80|0)+36>>2];R=+c[y+(r*80|0)+40>>2];X=+c[y+(r*80|0)+48>>2];N=+c[y+(r*80|0)+52>>2];C=+c[y+(r*80|0)+56>>2];y=o[y+(r*80|0)+64>>2]|0;m=o[(o[e>>2]|0)+28>>2]|0;V=+c[t>>2];E=+c[t+4>>2];G=+c[t+8>>2];F=+c[t+16>>2];A=+c[t+20>>2];B=+c[t+24>>2];T=+c[t+32>>2];j=+c[t+36>>2];S=+c[t+40>>2];k=X*V+N*E+C*G+ +c[t+48>>2];w=X*F+N*A+C*B+ +c[t+52>>2];C=X*T+N*j+C*S+ +c[t+56>>2];c[v+304>>2]=W*V+P*E+M*G;c[v+304+4>>2]=x*V+L*E+O*G;c[v+304+8>>2]=D*V+I*E+R*G;c[v+304+12>>2]=0;c[v+304+16>>2]=W*F+P*A+M*B;c[v+304+20>>2]=x*F+L*A+O*B;c[v+304+24>>2]=D*F+I*A+R*B;c[v+304+28>>2]=0;c[v+304+32>>2]=W*T+P*j+M*S;c[v+304+36>>2]=x*T+L*j+O*S;c[v+304+40>>2]=D*T+I*j+R*S;c[v+304+44>>2]=0;c[v+304+48>>2]=k;c[v+304+52>>2]=w;c[v+304+56>>2]=C;c[v+304+60>>2]=0;HP[m&127](e,v+304|0,y,n)}while((g|0)>1);p=v;return}case 0:{o[v+288>>2]=o[i+32>>2];o[v+288+4>>2]=o[i+32+4>>2];o[v+288+8>>2]=o[i+32+8>>2];o[v+288+12>>2]=o[i+32+12>>2];V=+wP[o[(o[i>>2]|0)+48>>2]&15](i);N=+wP[o[(o[i>>2]|0)+48>>2]&15](i);X=+wP[o[(o[i>>2]|0)+48>>2]&15](i);V=V+ +c[v+288>>2];c[v+288>>2]=V;N=N+ +c[v+288+4>>2];c[v+288+4>>2]=N;X=X+ +c[v+288+8>>2];c[v+288+8>>2]=X;e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;i=o[(o[e>>2]|0)+80>>2]|0;c[v+272>>2]=-V;c[v+272+4>>2]=-N;c[v+272+8>>2]=-X;c[v+272+12>>2]=0;rP[i&31](e,v+272|0,v+288|0,t,n);p=v;return}case 8:{X=+wP[o[(o[i>>2]|0)+48>>2]&15](i);e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;uP[o[(o[e>>2]|0)+24>>2]&0](e,X,t,n);p=v;return}case 9:{r=o[i+96>>2]|0;if((r|0)<=0){p=v;return}do{g=r;r=r+-1|0;y=o[i+104>>2]|0;D=+c[y+(r<<4)>>2];O=+c[y+(r<<4)+4>>2];N=+c[y+(r<<4)+8>>2];y=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;m=o[(o[y>>2]|0)+24>>2]|0;X=+c[(o[i+124>>2]|0)+(r<<2)>>2];x=+c[t>>2];M=+c[t+4>>2];L=+c[t+8>>2];W=+c[t+16>>2];B=+c[t+20>>2];P=+c[t+24>>2];F=+c[t+32>>2];G=+c[t+36>>2];A=+c[t+40>>2];E=D*x+O*M+N*L+ +c[t+48>>2];V=D*W+O*B+N*P+ +c[t+52>>2];N=D*F+O*G+N*A+ +c[t+56>>2];c[v+192>>2]=x+M*0+L*0;c[v+192+4>>2]=x*0+M+L*0;c[v+192+8>>2]=L+(x*0+M*0);c[v+192+12>>2]=0;c[v+192+16>>2]=W+B*0+P*0;c[v+192+20>>2]=W*0+B+P*0;c[v+192+24>>2]=P+(W*0+B*0);c[v+192+28>>2]=0;c[v+192+32>>2]=F+G*0+A*0;c[v+192+36>>2]=F*0+G+A*0;c[v+192+40>>2]=A+(F*0+G*0);c[v+192+44>>2]=0;c[v+192+48>>2]=E;c[v+192+52>>2]=V;c[v+192+56>>2]=N;c[v+192+60>>2]=0;uP[m&0](y,X,v+192|0,n)}while((g|0)>1);p=v;return}case 10:{g=o[i+56>>2]|0;N=+c[i+32+(((g+2|0)%3|0)<<2)>>2];X=+c[i+32+(g<<2)>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;lP[o[(o[e>>2]|0)+84>>2]&0](e,N,X,g,t,n);p=v;return}case 11:{N=+c[i+60>>2];X=+c[i+64>>2];i=o[i+72>>2]|0;e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;lP[o[(o[e>>2]|0)+92>>2]&0](e,N,X,i,t,n);p=v;return}case 13:{g=o[i+56>>2]|0;N=+wP[o[(o[i>>2]|0)+92>>2]&15](i);o[v+176>>2]=o[i+32>>2];o[v+176+4>>2]=o[i+32+4>>2];o[v+176+8>>2]=o[i+32+8>>2];o[v+176+12>>2]=o[i+32+12>>2];E=+wP[o[(o[i>>2]|0)+48>>2]&15](i);V=+wP[o[(o[i>>2]|0)+48>>2]&15](i);X=+wP[o[(o[i>>2]|0)+48>>2]&15](i);c[v+176>>2]=E+ +c[v+176>>2];c[v+176+4>>2]=V+ +c[v+176+4>>2];c[v+176+8>>2]=X+ +c[v+176+8>>2];X=+c[v+176+(g<<2)>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;lP[o[(o[e>>2]|0)+88>>2]&0](e,N,X,g,t,n);p=v;return}case 28:{X=+c[i+68>>2];e=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;RP[o[(o[e>>2]|0)+96>>2]&0](e,i+52|0,X,t,n);p=v;return}default:{e:do if((r|0)<7){h=o[i+56>>2]|0;if(!h){if((fP[o[(o[i>>2]|0)+100>>2]&127](i)|0)<=0)break;r=0;while(1){HP[o[(o[i>>2]|0)+104>>2]&127](i,r,v+288|0,v+256|0);V=+c[v+288>>2];D=+c[t>>2];G=+c[v+288+4>>2];O=+c[t+4>>2];A=+c[v+288+8>>2];L=+c[t+8>>2];M=+c[t+16>>2];P=+c[t+20>>2];W=+c[t+24>>2];F=+c[t+32>>2];E=+c[t+36>>2];N=+c[t+40>>2];x=+c[t+48>>2];B=+c[t+52>>2];X=+c[t+56>>2];c[v+80>>2]=V*D+G*O+A*L+x;c[v+80+4>>2]=V*M+G*P+A*W+B;c[v+80+8>>2]=V*F+G*E+A*N+X;c[v+80+12>>2]=0;A=+c[v+256>>2];G=+c[v+256+4>>2];V=+c[v+256+8>>2];c[v+48>>2]=A*D+G*O+V*L+x;c[v+48+4>>2]=A*M+G*P+V*W+B;c[v+48+8>>2]=A*F+G*E+V*N+X;c[v+48+12>>2]=0;g=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;HP[o[(o[g>>2]|0)+16>>2]&127](g,v+80|0,v+48|0,n);r=r+1|0;if((r|0)>=(fP[o[(o[i>>2]|0)+100>>2]&127](i)|0))break e}}if((o[h+28>>2]|0)>0){y=0;do{r=o[h+36>>2]|0;m=o[r+(y*36|0)+4>>2]|0;t:do if((m|0)!=0?(g=o[r+(y*36|0)+12>>2]|0,(m|0)>0):0){f=g;s=0;_=0;r=0;b=o[g+(m+-1<<2)>>2]|0;a=0;while(1){d=o[f+(a<<2)>>2]|0;l=o[h+16>>2]|0;s=(c[u>>2]=(o[u>>2]=s,+c[u>>2])+ +c[l+(d<<4)>>2],o[u>>2]|0);r=(c[u>>2]=(o[u>>2]=r,+c[u>>2])+ +c[l+(d<<4)+4>>2],o[u>>2]|0);_=(c[u>>2]=(o[u>>2]=_,+c[u>>2])+ +c[l+(d<<4)+8>>2],o[u>>2]|0);l=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;f=o[(o[l>>2]|0)+16>>2]|0;H=o[h+16>>2]|0;V=+c[H+(b<<4)>>2];D=+c[t>>2];G=+c[H+(b<<4)+4>>2];O=+c[t+4>>2];A=+c[H+(b<<4)+8>>2];L=+c[t+8>>2];M=+c[t+16>>2];P=+c[t+20>>2];W=+c[t+24>>2];F=+c[t+32>>2];E=+c[t+36>>2];N=+c[t+40>>2];x=+c[t+48>>2];B=+c[t+52>>2];X=+c[t+56>>2];c[v+64>>2]=V*D+G*O+A*L+x;c[v+64+4>>2]=V*M+G*P+A*W+B;c[v+64+8>>2]=V*F+G*E+A*N+X;c[v+64+12>>2]=0;A=+c[H+(d<<4)>>2];G=+c[H+(d<<4)+4>>2];V=+c[H+(d<<4)+8>>2];c[v+32>>2]=A*D+G*O+V*L+x;c[v+32+4>>2]=A*M+G*P+V*W+B;c[v+32+8>>2]=A*F+G*E+V*N+X;c[v+32+12>>2]=0;HP[f&127](l,v+64|0,v+32|0,n);l=a+1|0;a=o[h+36>>2]|0;if((l|0)>=(o[a+(y*36|0)+4>>2]|0))break t;f=o[a+(y*36|0)+12>>2]|0;b=d;a=l}}else{s=0;_=0;r=0}while(0);H=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;if((fP[o[(o[H>>2]|0)+56>>2]&127](H)|0)&16384|0){E=1/+(m|0)*(o[u>>2]=_,+c[u>>2]);A=1/+(m|0)*(o[u>>2]=r,+c[u>>2]);P=1/+(m|0)*(o[u>>2]=s,+c[u>>2]);o[v+288>>2]=1065353216;o[v+288+4>>2]=1065353216;o[v+288+8>>2]=0;c[v+288+12>>2]=0;H=o[h+36>>2]|0;W=+c[H+(y*36|0)+20>>2];F=+c[H+(y*36|0)+24>>2];V=+c[H+(y*36|0)+28>>2];H=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;m=o[(o[H>>2]|0)+16>>2]|0;j=+c[t>>2];I=+c[t+4>>2];T=+c[t+8>>2];O=+c[t+16>>2];L=+c[t+20>>2];x=+c[t+24>>2];B=+c[t+32>>2];G=+c[t+36>>2];N=+c[t+40>>2];D=+c[t+48>>2];M=+c[t+52>>2];X=+c[t+56>>2];c[v+16>>2]=P*j+A*I+E*T+D;c[v+16+4>>2]=P*O+A*L+E*x+M;c[v+16+8>>2]=P*B+A*G+E*N+X;c[v+16+12>>2]=0;c[v>>2]=(P+W)*j+(A+F)*I+(E+V)*T+D;c[v+4>>2]=(P+W)*O+(A+F)*L+(E+V)*x+M;c[v+8>>2]=(P+W)*B+(A+F)*G+(E+V)*N+X;c[v+12>>2]=0;HP[m&127](H,v+16|0,v,v+288|0)}y=y+1|0}while((y|0)<(o[h+28>>2]|0))}}while(0);r=o[i+4>>2]|0;if((r+-21|0)>>>0<9){o[v+288>>2]=1566444395;o[v+288+4>>2]=1566444395;o[v+288+8>>2]=1566444395;c[v+288+12>>2]=0;o[v+256>>2]=-581039253;o[v+256+4>>2]=-581039253;o[v+256+8>>2]=-581039253;c[v+256+12>>2]=0;r=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;o[v+80>>2]=3252;o[v+80+4>>2]=3276;o[v+80+8>>2]=r;o[v+80+12>>2]=o[n>>2];o[v+80+12+4>>2]=o[n+4>>2];o[v+80+12+8>>2]=o[n+8>>2];o[v+80+12+12>>2]=o[n+12>>2];o[v+80+28>>2]=o[t>>2];o[v+80+28+4>>2]=o[t+4>>2];o[v+80+28+8>>2]=o[t+8>>2];o[v+80+28+12>>2]=o[t+12>>2];o[v+80+44>>2]=o[t+16>>2];o[v+80+44+4>>2]=o[t+16+4>>2];o[v+80+44+8>>2]=o[t+16+8>>2];o[v+80+44+12>>2]=o[t+16+12>>2];o[v+80+60>>2]=o[t+32>>2];o[v+80+60+4>>2]=o[t+32+4>>2];o[v+80+60+8>>2]=o[t+32+8>>2];o[v+80+60+12>>2]=o[t+32+12>>2];o[v+80+76>>2]=o[t+48>>2];o[v+80+76+4>>2]=o[t+48+4>>2];o[v+80+76+8>>2]=o[t+48+8>>2];o[v+80+76+12>>2]=o[t+48+12>>2];HP[o[(o[i>>2]|0)+64>>2]&127](i,v+80|0,v+256|0,v+288|0);r=o[i+4>>2]|0}if((r|0)!=3){p=v;return}o[v+288>>2]=1566444395;o[v+288+4>>2]=1566444395;o[v+288+8>>2]=1566444395;c[v+288+12>>2]=0;o[v+256>>2]=-581039253;o[v+256+4>>2]=-581039253;o[v+256+8>>2]=-581039253;c[v+256+12>>2]=0;H=fP[o[(o[e>>2]|0)+20>>2]&127](e)|0;o[v+80>>2]=3252;o[v+80+4>>2]=3276;o[v+80+8>>2]=H;o[v+80+12>>2]=o[n>>2];o[v+80+12+4>>2]=o[n+4>>2];o[v+80+12+8>>2]=o[n+8>>2];o[v+80+12+12>>2]=o[n+12>>2];o[v+80+28>>2]=o[t>>2];o[v+80+28+4>>2]=o[t+4>>2];o[v+80+28+8>>2]=o[t+8>>2];o[v+80+28+12>>2]=o[t+12>>2];o[v+80+44>>2]=o[t+16>>2];o[v+80+44+4>>2]=o[t+16+4>>2];o[v+80+44+8>>2]=o[t+16+8>>2];o[v+80+44+12>>2]=o[t+16+12>>2];o[v+80+60>>2]=o[t+32>>2];o[v+80+60+4>>2]=o[t+32+4>>2];o[v+80+60+8>>2]=o[t+32+8>>2];o[v+80+60+12>>2]=o[t+32+12>>2];o[v+80+76>>2]=o[t+48>>2];o[v+80+76+4>>2]=o[t+48+4>>2];o[v+80+76+8>>2]=o[t+48+8>>2];o[v+80+76+12>>2]=o[t+48+12>>2];H=o[i+96>>2]|0;HP[o[(o[H>>2]|0)+8>>2]&127](H,v+80+4|0,v+256|0,v+288|0);p=v;return}}}function nw(e){e=e|0;return}function rw(e){e=e|0;qa(e);return}function ow(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0;i=p;p=p+96|0;f=+c[t>>2];y=+c[e+28>>2];I=+c[t+4>>2];D=+c[e+32>>2];l=+c[t+8>>2];u=+c[e+36>>2];b=+c[e+44>>2];d=+c[e+48>>2];h=+c[e+52>>2];m=+c[e+60>>2];g=+c[e+64>>2];v=+c[e+68>>2];C=+c[e+76>>2];w=+c[e+80>>2];k=+c[e+84>>2];c[i+80>>2]=f*y+I*D+l*u+C;c[i+80+4>>2]=f*b+I*d+l*h+w;c[i+80+8>>2]=f*m+I*g+l*v+k;c[i+80+12>>2]=0;S=+c[t+16>>2];R=+c[t+20>>2];j=+c[t+24>>2];c[i+64>>2]=S*y+R*D+j*u+C;c[i+64+4>>2]=S*b+R*d+j*h+w;c[i+64+8>>2]=S*m+R*g+j*v+k;c[i+64+12>>2]=0;T=+c[t+32>>2];O=+c[t+36>>2];a=+c[t+40>>2];c[i+48>>2]=T*y+O*D+a*u+C;c[i+48+4>>2]=T*b+O*d+a*h+w;c[i+48+8>>2]=T*m+O*g+a*v+k;c[i+48+12>>2]=0;r=(f*y+I*D+l*u+C+(S*y+R*D+j*u+C)+(T*y+O*D+a*u+C))*.3333333432674408;_=(f*b+I*d+l*h+w+(S*b+R*d+j*h+w)+(T*b+O*d+a*h+w))*.3333333432674408;s=(f*m+I*g+l*v+k+(S*m+R*g+j*v+k)+(T*m+O*g+a*v+k))*.3333333432674408;c[i+32>>2]=r;c[i+32+4>>2]=_;c[i+32+8>>2]=s;c[i+32+12>>2]=0;t=o[e+8>>2]|0;if(!((fP[o[(o[t>>2]|0)+56>>2]&127](t)|0)&16384)){n=o[e+8>>2]|0;L=o[n>>2]|0;L=L+16|0;L=o[L>>2]|0;t=e+12|0;HP[L&127](n,i+80|0,i+64|0,t);n=o[e+8>>2]|0;L=o[n>>2]|0;L=L+16|0;L=o[L>>2]|0;HP[L&127](n,i+64|0,i+48|0,t);e=o[e+8>>2]|0;n=o[e>>2]|0;n=n+16|0;n=o[n>>2]|0;HP[n&127](e,i+48|0,i+80|0,t);p=i;return}P=+c[i+80>>2];M=S*b+R*d+j*h+w-(f*b+I*d+l*h+w);x=S*m+R*g+j*v+k-(f*m+I*g+l*v+k);w=T*b+O*d+a*h+w-(f*b+I*d+l*h+w);k=T*m+O*g+a*v+k-(f*m+I*g+l*v+k);I=x*(T*y+O*D+a*u+C-P)-(S*y+R*D+j*u+C-P)*k;O=(S*y+R*D+j*u+C-P)*w-M*(T*y+O*D+a*u+C-P);D=1/+X(+(O*O+((M*k-x*w)*(M*k-x*w)+I*I)));o[i+16>>2]=1065353216;o[i+16+4>>2]=1065353216;o[i+16+8>>2]=0;c[i+16+12>>2]=0;t=o[e+8>>2]|0;n=o[(o[t>>2]|0)+16>>2]|0;c[i>>2]=D*(M*k-x*w)+r;c[i+4>>2]=D*I+_;c[i+8>>2]=D*O+s;c[i+12>>2]=0;HP[n&127](t,i+32|0,i,i+16|0);t=o[e+8>>2]|0;n=o[t>>2]|0;n=n+16|0;n=o[n>>2]|0;L=e+12|0;HP[n&127](t,i+80|0,i+64|0,L);t=o[e+8>>2]|0;n=o[t>>2]|0;n=n+16|0;n=o[n>>2]|0;HP[n&127](t,i+64|0,i+48|0,L);e=o[e+8>>2]|0;t=o[e>>2]|0;t=t+16|0;t=o[t>>2]|0;HP[t&127](e,i+48|0,i+80|0,L);p=i;return}function _w(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+8>>2]&127](e,t,i,n);return}function sw(e){e=e|0;return}function aw(e){e=e|0;qa(e+-4|0);return}function cw(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e+-4>>2]|0)+8>>2]&127](e+-4|0,t,i,n);return}function fw(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;r=p;p=p+256|0;o[r+32>>2]=3296;f=r+32+36|0;o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];l=r+32+52|0;o[l>>2]=o[i>>2];o[l+4>>2]=o[i+4>>2];o[l+8>>2]=o[i+8>>2];o[l+12>>2]=o[i+12>>2];o[r+32+212>>2]=e;o[r+32+216>>2]=n;o[r+32+68>>2]=1065353216;o[r+32+72>>2]=0;o[r+32+72+4>>2]=0;o[r+32+72+8>>2]=0;o[r+32+72+12>>2]=0;o[r+32+88>>2]=1065353216;o[r+32+92>>2]=0;o[r+32+92+4>>2]=0;o[r+32+92+8>>2]=0;o[r+32+92+12>>2]=0;o[r+32+108>>2]=1065353216;o[r+32+112>>2]=0;o[r+32+116>>2]=o[f>>2];o[r+32+116+4>>2]=o[f+4>>2];o[r+32+116+8>>2]=o[f+8>>2];o[r+32+116+12>>2]=o[f+12>>2];o[r+32+132>>2]=1065353216;o[r+32+136>>2]=0;o[r+32+136+4>>2]=0;o[r+32+136+8>>2]=0;o[r+32+136+12>>2]=0;o[r+32+152>>2]=1065353216;o[r+32+156>>2]=0;o[r+32+156+4>>2]=0;o[r+32+156+8>>2]=0;o[r+32+156+12>>2]=0;o[r+32+172>>2]=1065353216;o[r+32+176>>2]=0;o[r+32+180>>2]=o[i>>2];o[r+32+180+4>>2]=o[i+4>>2];o[r+32+180+8>>2]=o[i+8>>2];o[r+32+180+12>>2]=o[i+12>>2];u=+c[i>>2]-+c[t>>2];a=+c[i+4>>2]-+c[t+4>>2];s=+c[i+8>>2]-+c[t+8>>2];_=1/+X(+(u*u+a*a+s*s));h=u*_==0?0xde0b6b000000000:1/(u*_);c[r+32+4>>2]=h;d=a*_==0?0xde0b6b000000000:1/(a*_);c[r+32+8>>2]=d;b=s*_==0?0xde0b6b000000000:1/(s*_);c[r+32+12>>2]=b;o[r+32+20>>2]=h<0&1;o[r+32+24>>2]=d<0&1;o[r+32+28>>2]=b<0&1;c[r+32+32>>2]=u*_*(+c[l>>2]-+c[f>>2])+a*_*(+c[r+32+56>>2]-+c[r+32+40>>2])+s*_*(+c[r+32+60>>2]-+c[r+32+44>>2]);e=o[e+68>>2]|0;n=o[(o[e>>2]|0)+24>>2]|0;o[r+16>>2]=0;o[r+16+4>>2]=0;o[r+16+8>>2]=0;o[r+16+12>>2]=0;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;vP[n&7](e,t,i,r+32|0,r+16|0,r);p=r;return}function pw(e){e=e|0;return}function lw(e){e=e|0;qa(e);return}function uw(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;n=p;p=p+32|0;i=o[e+216>>2]|0;if(+c[i+4>>2]==0){e=0;p=n;return e|0}t=o[t>>2]|0;if(!(DP[o[(o[i>>2]|0)+8>>2]&31](i,o[t+188>>2]|0)|0)){e=1;p=n;return e|0}r=o[t+192>>2]|0;i=o[e+216>>2]|0;o[n>>2]=0;o[n+4>>2]=r;o[n+8>>2]=t;o[n+12>>2]=t+4;o[n+16>>2]=-1;o[n+20>>2]=-1;bw(e+68|0,e+132|0,n,i);e=1;p=n;return e|0}function bw(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;y=p;p=p+752|0;o[y+136+8>>2]=0;o[y+136+12>>2]=-1;o[y+136+16>>2]=1065353216;o[y+136+20>>2]=1065353216;o[y+136+24>>2]=1065353216;c[y+136+28>>2]=0;o[y+136>>2]=6380;o[y+136+4>>2]=8;c[y+136+32>>2]=0;c[y+136+48>>2]=0;h=o[i+4>>2]|0;m=o[i+12>>2]|0;_=o[h+4>>2]|0;if((_|0)<20){o[y+568>>2]=3316;o[y+568+168>>2]=0;c[y+568+172>>2]=0;o[y+568+164>>2]=o[r+4>>2];c[y+208+308>>2]=9999999747378752e-20;n[y+208+332>>0]=0;o[y+192>>2]=7024;o[y+192+4>>2]=y+208;o[y+192+8>>2]=y+136;o[y+192+12>>2]=h;o[y+120>>2]=6864;o[y+120+4>>2]=y+208;o[y+120+8>>2]=y+136;o[y+120+12>>2]=h;h=(o[r+16>>2]&8|0)==0?y+192|0:y+120|0;if((kP[o[(o[h>>2]|0)+8>>2]&3](h,e,t,m,m,y+568|0)|0?(s=y+568+132|0,a=+c[s>>2],f=+c[y+568+136>>2],l=+c[y+568+140>>2],a*a+f*f+l*l>9999999747378752e-20):0)?(u=+c[y+568+164>>2],u<+c[r+4>>2]):0){d=1/+X(+(a*a+f*f+l*l));c[s>>2]=a*d;c[y+568+136>>2]=f*d;c[y+568+140>>2]=l*d;o[y>>2]=o[i+8>>2];o[y+4>>2]=0;o[y+8>>2]=o[s>>2];o[y+8+4>>2]=o[s+4>>2];o[y+8+8>>2]=o[s+8>>2];o[y+8+12>>2]=o[s+12>>2];c[y+24>>2]=u;+OP[o[(o[r>>2]|0)+12>>2]&15](r,y,1)}p=y;return}if((_+-21|0)>>>0>=9){if((_|0)!=31){p=y;return}_=o[h+68>>2]|0;i=o[i+8>>2]|0;o[y+568>>2]=3392;o[y+568+4>>2]=i;o[y+568+8>>2]=h;o[y+568+12>>2]=m;o[y+568+16>>2]=e;o[y+568+20>>2]=t;o[y+568+24>>2]=r;if(!_){_=o[h+20>>2]|0;if((_|0)>0){s=0;do{jw(y+568|0,s);s=s+1|0}while((s|0)<(_|0))}}else{a=+c[m+48>>2];I=+c[e+48>>2]-a;l=+c[m+52>>2];j=+c[e+52>>2]-l;b=+c[m+56>>2];R=+c[e+56>>2]-b;S=+c[m>>2];k=+c[m+16>>2];w=+c[m+32>>2];C=+c[m+4>>2];v=+c[m+20>>2];g=+c[m+36>>2];f=+c[m+8>>2];u=+c[m+24>>2];d=+c[m+40>>2];c[y+208>>2]=I*S+j*k+R*w;c[y+208+4>>2]=I*C+j*v+R*g;c[y+208+8>>2]=I*f+j*u+R*d;c[y+208+12>>2]=0;a=+c[t+48>>2]-a;l=+c[t+52>>2]-l;b=+c[t+56>>2]-b;Lw(o[_>>2]|0,y+208|0,a*S+l*k+b*w,a*C+l*v+b*g,a*f+l*u+b*d,y+568|0)}p=y;return}O=+c[m>>2];D=+c[m+16>>2];u=+c[m+32>>2];T=+c[m+4>>2];g=+c[m+20>>2];b=+c[m+36>>2];k=+c[m+8>>2];R=+c[m+24>>2];I=+c[m+40>>2];v=-+c[m+48>>2];C=-+c[m+52>>2];w=-+c[m+56>>2];j=+c[e+48>>2];S=+c[e+52>>2];l=+c[e+56>>2];a=O*v+D*C+u*w+(O*j+D*S+u*l);f=T*v+g*C+b*w+(T*j+g*S+b*l);l=k*v+R*C+I*w+(k*j+R*S+I*l);c[y+120>>2]=a;c[y+120+4>>2]=f;c[y+120+8>>2]=l;c[y+120+12>>2]=0;S=+c[t+48>>2];j=+c[t+52>>2];d=+c[t+56>>2];u=O*v+D*C+u*w+(O*S+D*j+u*d);b=T*v+g*C+b*w+(T*S+g*j+b*d);d=k*v+R*C+I*w+(k*S+R*j+I*d);if((o[h+4>>2]|0)==21){_=o[i+8>>2]|0;i=o[r+16>>2]|0;o[y+4>>2]=o[y+120>>2];o[y+4+4>>2]=o[y+120+4>>2];o[y+4+8>>2]=o[y+120+8>>2];o[y+4+12>>2]=o[y+120+12>>2];c[y+20>>2]=u;c[y+24>>2]=b;c[y+28>>2]=d;c[y+32>>2]=0;o[y+36>>2]=i;c[y+40>>2]=1;o[y>>2]=3344;o[y+44>>2]=r;o[y+48>>2]=_;o[y+52>>2]=h;o[y+56>>2]=o[m>>2];o[y+56+4>>2]=o[m+4>>2];o[y+56+8>>2]=o[m+8>>2];o[y+56+12>>2]=o[m+12>>2];o[y+72>>2]=o[m+16>>2];o[y+72+4>>2]=o[m+16+4>>2];o[y+72+8>>2]=o[m+16+8>>2];o[y+72+12>>2]=o[m+16+12>>2];o[y+88>>2]=o[m+32>>2];o[y+88+4>>2]=o[m+32+4>>2];o[y+88+8>>2]=o[m+32+8>>2];o[y+88+12>>2]=o[m+32+12>>2];o[y+104>>2]=o[m+48>>2];o[y+104+4>>2]=o[m+48+4>>2];o[y+104+8>>2]=o[m+48+8>>2];o[y+104+12>>2]=o[m+48+12>>2];o[y+40>>2]=o[r+4>>2];_=o[h+52>>2]|0;o[y+192>>2]=4836;o[y+192+4>>2]=_;o[y+192+8>>2]=y;_=o[h+56>>2]|0;o[y+568>>2]=0;o[y+568+4>>2]=0;o[y+568+8>>2]=0;o[y+568+12>>2]=0;o[y+208>>2]=0;o[y+208+4>>2]=0;o[y+208+8>>2]=0;o[y+208+12>>2]=0;if(!(n[_+60>>0]|0))$x(_,y+192|0,y+120|0,u,b,d,y+568|0,y+208|0);else eM(_,y+192|0,y+120|0,u,b,d,y+568|0,y+208|0,o[_+56>>2]|0)}else{i=o[i+8>>2]|0;t=o[r+16>>2]|0;c[y+568+4>>2]=a;c[y+568+8>>2]=f;c[y+568+12>>2]=l;c[y+568+16>>2]=0;c[y+568+20>>2]=u;c[y+568+24>>2]=b;c[y+568+28>>2]=d;c[y+568+32>>2]=0;o[y+568+36>>2]=t;c[y+568+40>>2]=1;o[y+568>>2]=3368;o[y+568+44>>2]=r;o[y+568+48>>2]=i;o[y+568+52>>2]=h;o[y+568+56>>2]=o[m>>2];o[y+568+56+4>>2]=o[m+4>>2];o[y+568+56+8>>2]=o[m+8>>2];o[y+568+56+12>>2]=o[m+12>>2];o[y+568+72>>2]=o[m+16>>2];o[y+568+72+4>>2]=o[m+16+4>>2];o[y+568+72+8>>2]=o[m+16+8>>2];o[y+568+72+12>>2]=o[m+16+12>>2];o[y+568+88>>2]=o[m+32>>2];o[y+568+88+4>>2]=o[m+32+4>>2];o[y+568+88+8>>2]=o[m+32+8>>2];o[y+568+88+12>>2]=o[m+32+12>>2];o[y+568+104>>2]=o[m+48>>2];o[y+568+104+4>>2]=o[m+48+4>>2];o[y+568+104+8>>2]=o[m+48+8>>2];o[y+568+104+12>>2]=o[m+48+12>>2];o[y+568+40>>2]=o[r+4>>2];c[y+208>>2]=a;c[y+208+4>>2]=f;c[y+208+8>>2]=l;c[y+208+12>>2]=0;if(u<a)c[y+208>>2]=u;if(b<f)c[y+208+4>>2]=b;if(d<l)c[y+208+8>>2]=d;c[y+192>>2]=a;c[y+192+4>>2]=f;c[y+192+8>>2]=l;c[y+192+12>>2]=0;if(a<u)c[y+192>>2]=u;if(f<b)c[y+192+4>>2]=b;if(l<d)c[y+192+8>>2]=d;HP[o[(o[h>>2]|0)+64>>2]&127](h,y+568|0,y+208|0,y+192|0)}p=y;return}function dw(e,t){e=e|0;t=+t;return}function hw(e,t){e=e|0;t=t|0;return}function mw(e,t,i){e=e|0;t=t|0;i=i|0;return}function yw(e){e=e|0;return}function gw(e){e=e|0;qa(e);return}function vw(e){e=e|0;qa(e);return}function Cw(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0;_=p;p=p+48|0;o[_+32>>2]=n;o[_+32+4>>2]=r;u=+c[t>>2];l=+c[t+4>>2];s=+c[t+8>>2];f=+c[e+56>>2]*u+ +c[e+60>>2]*l+ +c[e+64>>2]*s;a=u*+c[e+72>>2]+l*+c[e+76>>2]+s*+c[e+80>>2];s=u*+c[e+88>>2]+l*+c[e+92>>2]+s*+c[e+96>>2];o[_>>2]=o[e+48>>2];o[_+4>>2]=_+32;c[_+8>>2]=f;c[_+12>>2]=a;c[_+16>>2]=s;c[_+20>>2]=0;c[_+24>>2]=i;r=o[e+44>>2]|0;i=+OP[o[(o[r>>2]|0)+12>>2]&15](r,_,1);p=_;return+i}function ww(e){e=e|0;qa(e);return}function kw(e,t,i,n,r){e=e|0;t=t|0;i=+i;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0;_=p;p=p+48|0;o[_+32>>2]=n;o[_+32+4>>2]=r;u=+c[t>>2];l=+c[t+4>>2];s=+c[t+8>>2];f=+c[e+56>>2]*u+ +c[e+60>>2]*l+ +c[e+64>>2]*s;a=u*+c[e+72>>2]+l*+c[e+76>>2]+s*+c[e+80>>2];s=u*+c[e+88>>2]+l*+c[e+92>>2]+s*+c[e+96>>2];o[_>>2]=o[e+48>>2];o[_+4>>2]=_+32;c[_+8>>2]=f;c[_+12>>2]=a;c[_+16>>2]=s;c[_+20>>2]=0;c[_+24>>2]=i;r=o[e+44>>2]|0;i=+OP[o[(o[r>>2]|0)+12>>2]&15](r,_,1);p=_;return+i}function Sw(e){e=e|0;qa(e);return}function Rw(e,t){e=e|0;t=t|0;jw(e,o[t+36>>2]|0);return}function jw(e,t){e=e|0;t=t|0;var i=0,n=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;i=p;p=p+128|0;x=o[(o[e+8>>2]|0)+28>>2]|0;_=o[x+(t*80|0)+64>>2]|0;n=o[e+12>>2]|0;k=+c[x+(t*80|0)>>2];D=+c[n>>2];w=+c[x+(t*80|0)+16>>2];T=+c[n+4>>2];C=+c[x+(t*80|0)+32>>2];I=+c[n+8>>2];v=+c[x+(t*80|0)+4>>2];g=+c[x+(t*80|0)+20>>2];y=+c[x+(t*80|0)+36>>2];m=+c[x+(t*80|0)+8>>2];d=+c[x+(t*80|0)+24>>2];u=+c[x+(t*80|0)+40>>2];j=+c[n+16>>2];R=+c[n+20>>2];S=+c[n+24>>2];h=+c[n+32>>2];b=+c[n+36>>2];l=+c[n+40>>2];L=+c[x+(t*80|0)+48>>2];O=+c[x+(t*80|0)+52>>2];s=+c[x+(t*80|0)+56>>2];f=+c[n+48>>2]+(D*L+T*O+I*s);a=j*L+R*O+S*s+ +c[n+52>>2];s=h*L+b*O+l*s+ +c[n+56>>2];c[i+56>>2]=k*D+w*T+C*I;c[i+56+4>>2]=D*v+T*g+I*y;c[i+56+8>>2]=D*m+T*d+I*u;c[i+56+12>>2]=0;c[i+56+16>>2]=k*j+w*R+C*S;c[i+56+20>>2]=v*j+g*R+y*S;c[i+56+24>>2]=m*j+d*R+u*S;c[i+56+28>>2]=0;c[i+56+32>>2]=k*h+w*b+C*l;c[i+56+36>>2]=v*h+g*b+y*l;c[i+56+40>>2]=m*h+d*b+u*l;c[i+56+44>>2]=0;c[i+56+48>>2]=f;c[i+56+52>>2]=a;c[i+56+56>>2]=s;c[i+56+60>>2]=0;n=o[e+4>>2]|0;o[i+32>>2]=0;o[i+32+4>>2]=_;o[i+32+8>>2]=n;o[i+32+12>>2]=i+56;o[i+32+16>>2]=-1;o[i+32+20>>2]=t;n=o[e+24>>2]|0;c[i+4>>2]=1;o[i+8>>2]=0;r[i+12>>1]=1;r[i+14>>1]=-1;o[i+16>>2]=0;o[i>>2]=3428;o[i+20>>2]=n;o[i+24>>2]=t;o[i+4>>2]=o[n+4>>2];o[i+16>>2]=o[n+16>>2];bw(o[e+16>>2]|0,o[e+20>>2]|0,i+32|0,i);p=i;return}function Iw(e){e=e|0;return}function Tw(e){e=e|0;qa(e);return}function Dw(e,t){e=e|0;t=t|0;e=o[e+20>>2]|0;return DP[o[(o[e>>2]|0)+8>>2]&31](e,t)|0}function Ow(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;n=p;p=p+16|0;o[n>>2]=-1;o[n+4>>2]=o[e+24>>2];if(!(o[t+4>>2]|0))o[t+4>>2]=n;_=o[e+20>>2]|0;r=+OP[o[(o[_>>2]|0)+12>>2]&15](_,t,i);o[e+4>>2]=o[(o[e+20>>2]|0)+4>>2];p=n;return+r}function Lw(e,t,i,n,r,_){e=e|0;t=t|0;i=+i;n=+n;r=+r;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0;D=p;p=p+32|0;if(!e){p=D;return}k=i-+c[t>>2];w=n-+c[t+4>>2];C=r-+c[t+8>>2];m=1/+X(+(k*k+w*w+C*C));y=k*m==0?0xde0b6b000000000:1/(k*m);g=w*m==0?0xde0b6b000000000:1/(w*m);v=C*m==0?0xde0b6b000000000:1/(C*m);o[5637]=(o[5637]|0)+1;s=Qa(531)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}Lc(s|0,0,512)|0;o[s>>2]=e;h=1;e=128;l=128;a=126;while(1){u=h+-1|0;d=o[s+(u<<2)>>2]|0;o[D>>2]=o[d>>2];o[D+4>>2]=o[d+4>>2];o[D+8>>2]=o[d+8>>2];o[D+12>>2]=o[d+12>>2];o[D+16>>2]=o[d+16>>2];o[D+16+4>>2]=o[d+16+4>>2];o[D+16+8>>2]=o[d+16+8>>2];o[D+16+12>>2]=o[d+16+12>>2];n=+c[t>>2];i=y*(+c[D+((y<0&1)<<4)>>2]-n);n=y*(+c[D+((y<0^1)<<4)>>2]-n);f=+c[t+4>>2];r=g*(+c[D+((g<0&1)<<4)+4>>2]-f);f=g*(+c[D+((g<0^1)<<4)+4>>2]-f);do if((!(r>n|i>f)?(S=r>i?r:i,I=f<n?f:n,j=+c[t+8>>2],R=v*(+c[D+((v<0&1)<<4)+8>>2]-j),j=v*(+c[D+((v<0^1)<<4)+8>>2]-j),!(R>I|S>j)):0)?(j<I?j:I)>0?(R>S?R:S)<k*m*k+w*m*w+C*m*C:0:0){if(!(o[d+40>>2]|0)){aP[o[(o[_>>2]|0)+12>>2]&127](_,d);break}if((u|0)>(a|0)){b=l<<1;if((l|0)<(b|0)){do if((e|0)<(b|0)){if(l){o[5637]=(o[5637]|0)+1;e=Qa((l<<3|3)+16|0)|0;if(!e)e=0;else{o[(e+4+15&-16)+-4>>2]=e;e=e+4+15&-16}if((l|0)>0){a=0;do{o[e+(a<<2)>>2]=o[s+(a<<2)>>2];a=a+1|0}while((a|0)!=(l|0))}else T=17}else{e=0;T=17}if((T|0)==17){T=0;if(!s){a=b;s=e;break}}o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);a=b;s=e}else a=e;while(0);Lc(s+(l<<2)|0,0,l<<2|0)|0;e=a}l=b;a=b+-2|0}o[s+(u<<2)>>2]=o[d+36>>2];o[s+(h<<2)>>2]=o[d+40>>2];u=h+1|0}while(0);if(!u)break;else h=u}if(!s){p=D;return}o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);p=D;return}function xw(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,c=0,f=0;f=p;p=p+96|0;_=o[e+8>>2]|0;if((_|0)==(o[e+12>>2]|0)?(c=_|0?_<<1:1,(_|0)<(c|0)):0){if(!c)a=0;else{o[5637]=(o[5637]|0)+1;_=Qa((c<<2|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=_;_=o[e+8>>2]|0}if((_|0)>0){s=0;do{o[a+(s<<2)>>2]=o[(o[e+16>>2]|0)+(s<<2)>>2];s=s+1|0}while((s|0)!=(_|0))}s=o[e+16>>2]|0;if(s){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);_=o[e+8>>2]|0}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=a;o[e+12>>2]=c}o[(o[e+16>>2]|0)+(_<<2)>>2]=t;o[e+8>>2]=_+1;o[f+32>>2]=o[t+4>>2];o[f+32+4>>2]=o[t+4+4>>2];o[f+32+8>>2]=o[t+4+8>>2];o[f+32+12>>2]=o[t+4+12>>2];o[f+32+16>>2]=o[t+20>>2];o[f+32+16+4>>2]=o[t+20+4>>2];o[f+32+16+8>>2]=o[t+20+8>>2];o[f+32+16+12>>2]=o[t+20+12>>2];o[f+32+32>>2]=o[t+36>>2];o[f+32+32+4>>2]=o[t+36+4>>2];o[f+32+32+8>>2]=o[t+36+8>>2];o[f+32+32+12>>2]=o[t+36+12>>2];o[f+32+48>>2]=o[t+52>>2];o[f+32+48+4>>2]=o[t+52+4>>2];o[f+32+48+8>>2]=o[t+52+8>>2];o[f+32+48+12>>2]=o[t+52+12>>2];c=o[t+192>>2]|0;HP[o[(o[c>>2]|0)+8>>2]&127](c,f+32|0,f+16|0,f);c=o[e+68>>2]|0;o[t+188>>2]=FP[o[(o[c>>2]|0)+8>>2]&3](c,f+16|0,f,o[(o[t+192>>2]|0)+4>>2]|0,t,i,r,o[e+24>>2]|0,0)|0;p=f;return}function Mw(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0;i=o[t+188>>2]|0;if(i|0){_=o[e+68>>2]|0;_=fP[o[(o[_>>2]|0)+36>>2]&127](_)|0;EP[o[(o[_>>2]|0)+40>>2]&127](_,i,o[e+24>>2]|0);_=o[e+68>>2]|0;EP[o[(o[_>>2]|0)+12>>2]&127](_,i,o[e+24>>2]|0);o[t+188>>2]=0}r=o[e+8>>2]|0;if((r|0)<=0)return;_=o[e+16>>2]|0;i=0;while(1){n=_+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(r|0)){s=9;break}}if((s|0)==9)return;if((i|0)>=(r|0))return;o[n>>2]=o[_+(r+-1<<2)>>2];o[(o[e+16>>2]|0)+(r+-1<<2)>>2]=t;o[e+8>>2]=r+-1;return}function Pw(e){e=e|0;var t=0,i=0,n=0,r=0;i=p;p=p+16|0;Zp(10245);_P[o[(o[e>>2]|0)+8>>2]&255](e);_P[o[(o[e>>2]|0)+12>>2]&255](e);t=o[e+24>>2]|0;Zp(10279);if(t|0){r=o[(o[t>>2]|0)+32>>2]|0;n=o[e+68>>2]|0;n=fP[o[(o[n>>2]|0)+36>>2]&127](n)|0;HP[r&127](t,n,e+28|0,o[e+24>>2]|0)}e=o[2006]|0;r=(o[e+16>>2]|0)+-1|0;o[e+16>>2]=r;do if(!r){if(o[e+4>>2]|0){ut(i|0,0)|0;t=o[5649]|0;c[e+8>>2]=+c[e+8>>2]+ +(((o[i+4>>2]|0)-(o[t+4>>2]|0)+(((o[i>>2]|0)-(o[t>>2]|0)|0)*1e6|0)-(o[e+12>>2]|0)|0)>>>0)/1e3;t=o[2006]|0;if(o[e+16>>2]|0)break}else t=e;t=o[t+20>>2]|0;o[2006]=t}else t=e;while(0);e=t+16|0;r=(o[e>>2]|0)+-1|0;o[e>>2]=r;if(r|0){p=i;return}do if(o[t+4>>2]|0){ut(i|0,0)|0;n=o[5649]|0;r=t+8|0;c[r>>2]=+c[r>>2]+ +(((o[i+4>>2]|0)-(o[n+4>>2]|0)+(((o[i>>2]|0)-(o[n>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[e>>2]|0)){t=o[2006]|0;break}else{p=i;return}}while(0);o[2006]=o[t+20>>2];p=i;return}function Ww(e,t){e=e|0;t=t|0;_P[o[(o[t>>2]|0)+32>>2]&255](t);Bw(e,t);_P[o[(o[t>>2]|0)+36>>2]&255](t);return}function Bw(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;k=p;p=p+80|0;n[k+16>>0]=1;o[k+12>>2]=0;o[k+4>>2]=0;o[k+8>>2]=0;n[k+36>>0]=1;o[k+32>>2]=0;o[k+24>>2]=0;o[k+28>>2]=0;n[k+56>>0]=1;o[k+52>>2]=0;o[k+44>>2]=0;o[k+48>>2]=0;n[k+76>>0]=1;o[k+72>>2]=0;o[k+64>>2]=0;o[k+68>>2]=0;i=o[e+8>>2]|0;if((i|0)<=0){Aw(k);p=k;return}a=0;c=0;_=0;r=0;m=0;while(1){h=o[(o[(o[e+16>>2]|0)+(m<<2)>>2]|0)+192>>2]|0;d=(h+~(h<<15)>>10^h+~(h<<15))*9|0;d=(d>>6^d)+~((d>>6^d)<<11)>>16^(d>>6^d)+~((d>>6^d)<<11);b=d&a+-1;f=b>>>0<c>>>0;e:do if(f){s=o[_+(b<<2)>>2]|0;if((s|0)!=-1){l=o[k+72>>2]|0;while(1){if((h|0)==(o[l+(s<<3)>>2]|0)){u=9;break}c=o[r+(s<<2)>>2]|0;if((c|0)==-1)break;else s=c}if((u|0)==9?(u=0,(o[k+52>>2]|0)+(s<<2)|0):0)break;if(!f){u=16;break}}i=o[_+(b<<2)>>2]|0;if((i|0)!=-1){s=o[k+72>>2]|0;while(1){if((h|0)==(o[s+(i<<3)>>2]|0))break;i=o[r+(i<<2)>>2]|0;if((i|0)==-1){u=16;break e}}o[(o[k+52>>2]|0)+(i<<2)>>2]=h;i=a;u=78}else u=16}else u=16;while(0);if((u|0)==16){f=o[k+44>>2]|0;if((f|0)==(a|0)){i=a|0?a<<1:1;if((a|0)<(i|0)){if((i|0)!=0?(o[5637]=(o[5637]|0)+1,w=Qa((i<<2|3)+16|0)|0,(w|0)!=0):0){o[(w+4+15&-16)+-4>>2]=w;_=w+4+15&-16}else _=0;if((a|0)>0){r=0;do{o[_+(r<<2)>>2]=o[(o[k+52>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(a|0))}r=o[k+52>>2]|0;if(r|0){if(n[k+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0);\n}o[k+52>>2]=0}n[k+56>>0]=1;o[k+52>>2]=_;o[k+48>>2]=i;r=a}else{r=a;i=a}}else{r=f;i=a}o[(o[k+52>>2]|0)+(r<<2)>>2]=h;o[k+44>>2]=r+1;r=o[k+64>>2]|0;if((r|0)==(o[k+68>>2]|0)?(y=r|0?r<<1:1,(r|0)<(y|0)):0){if((y|0)!=0?(o[5637]=(o[5637]|0)+1,g=Qa((y<<3|3)+16|0)|0,(g|0)!=0):0){o[(g+4+15&-16)+-4>>2]=g;_=g+4+15&-16}else _=0;if((r|0)>0){i=0;do{c=(o[k+72>>2]|0)+(i<<3)|0;l=o[c+4>>2]|0;u=_+(i<<3)|0;o[u>>2]=o[c>>2];o[u+4>>2]=l;i=i+1|0}while((i|0)!=(r|0))}i=o[k+72>>2]|0;if(i|0){if(n[k+76>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[k+72>>2]=0}n[k+76>>0]=1;o[k+72>>2]=_;o[k+68>>2]=y;r=o[k+64>>2]|0;i=o[k+48>>2]|0}u=(o[k+72>>2]|0)+(r<<3)|0;o[u>>2]=h;o[u+4>>2]=0;o[k+64>>2]=r+1;if((a|0)<(i|0)){c=o[k+4>>2]|0;do if((i|0)>(c|0)){if((i|0)>=(c|0)){do if((o[k+8>>2]|0)<(i|0)){if((i|0)!=0?(o[5637]=(o[5637]|0)+1,v=Qa((i<<2|3)+16|0)|0,(v|0)!=0):0){o[(v+4+15&-16)+-4>>2]=v;r=v+4+15&-16}else r=0;_=o[k+12>>2]|0;if((c|0)<=0){if(!_){n[k+16>>0]=1;o[k+12>>2]=r;o[k+8>>2]=i;break}}else{s=0;do{o[r+(s<<2)>>2]=o[_+(s<<2)>>2];s=s+1|0}while((s|0)!=(c|0))}if(n[k+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}n[k+16>>0]=1;o[k+12>>2]=r;o[k+8>>2]=i}else r=o[k+12>>2]|0;while(0);Lc(r+(c<<2)|0,0,i-c<<2|0)|0}o[k+4>>2]=i;a=o[k+24>>2]|0;if((i|0)>(a|0)){do if((o[k+28>>2]|0)<(i|0)){if((i|0)!=0?(o[5637]=(o[5637]|0)+1,C=Qa((i<<2|3)+16|0)|0,(C|0)!=0):0){o[(C+4+15&-16)+-4>>2]=C;r=C+4+15&-16}else r=0;_=o[k+32>>2]|0;if((a|0)<=0){if(!_){n[k+36>>0]=1;o[k+32>>2]=r;o[k+28>>2]=i;break}}else{s=0;do{o[r+(s<<2)>>2]=o[_+(s<<2)>>2];s=s+1|0}while((s|0)!=(a|0))}if(n[k+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}n[k+36>>0]=1;o[k+32>>2]=r;o[k+28>>2]=i}else r=o[k+32>>2]|0;while(0);Lc(r+(a<<2)|0,0,i-a<<2|0)|0}o[k+24>>2]=i;if((i|0)>0){b=i<<2;Lc(o[k+12>>2]|0,-1,b|0)|0;Lc(o[k+32>>2]|0,-1,b|0)|0}if((c|0)<=0){i=o[k+48>>2]|0;break}r=o[k+72>>2]|0;_=o[k+12>>2]|0;s=o[k+32>>2]|0;i=o[k+48>>2]|0;a=0;do{b=o[r+(a<<3)>>2]|0;b=(b+~(b<<15)>>10^b+~(b<<15))*9|0;b=_+((((b>>6^b)+~((b>>6^b)<<11)>>16^(b>>6^b)+~((b>>6^b)<<11))&i+-1)<<2)|0;o[s+(a<<2)>>2]=o[b>>2];o[b>>2]=a;a=a+1|0}while((a|0)!=(c|0))}while(0);r=i;i=d&i+-1}else{r=i;i=b}_=o[k+12>>2]|0;i=_+(i<<2)|0;u=o[k+32>>2]|0;o[u+(f<<2)>>2]=o[i>>2];o[i>>2]=f;i=r;r=u;u=78}if((u|0)==78){u=0;aP[o[(o[h>>2]|0)+60>>2]&127](h,t);a=i;i=o[e+8>>2]|0}s=m+1|0;if((s|0)>=(i|0))break;c=o[k+4>>2]|0;m=s}if((i|0)>0)_=0;else{Aw(k);p=k;return}do{r=o[(o[e+16>>2]|0)+(_<<2)>>2]|0;switch(o[r+236>>2]|0){case 64:case 1:{aP[o[(o[r>>2]|0)+24>>2]&127](r,t);i=o[e+8>>2]|0;break}default:{}}_=_+1|0}while((_|0)<(i|0));Aw(k);p=k;return}function Aw(e){e=e|0;var t=0;t=o[e+72>>2]|0;if(t|0){if(n[e+76>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+72>>2]=0}n[e+76>>0]=1;o[e+72>>2]=0;o[e+64>>2]=0;o[e+68>>2]=0;t=o[e+52>>2]|0;if(t|0){if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+52>>2]=0}n[e+56>>0]=1;o[e+52>>2]=0;o[e+44>>2]=0;o[e+48>>2]=0;t=o[e+32>>2]|0;if(t|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;t=o[e+12>>2]|0;if(!t){n[e+16>>0]=1;o[e+12>>2]=0;o[e+4>>2]=0;e=e+8|0;o[e>>2]=0;return}if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+12>>2]=0;n[e+16>>0]=1;o[e+12>>2]=0;o[e+4>>2]=0;e=e+8|0;o[e>>2]=0;return}function Fw(e,t,i,_,s,a){e=e|0;t=t|0;i=i|0;_=_|0;s=s|0;a=+a;var f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0;L=p;p=p+896|0;O=o[_+4>>2]|0;D=o[_+12>>2]|0;w=o[O+4>>2]|0;if((w|0)<20){o[L+712>>2]=3316;o[L+712+168>>2]=0;c[L+712+172>>2]=a;o[L+712+164>>2]=o[s+4>>2];c[L+352+308>>2]=9999999747378752e-20;n[L+352+332>>0]=0;o[L+288>>2]=6908;o[L+64>>2]=6816;o[L+64+4>>2]=L+352;o[L+64+8>>2]=L+288;o[L+64+12>>2]=e;o[L+64+16>>2]=O;o[L+64+20>>2]=0;if((Pv(L+64|0,t,i,D,D,L+712|0)|0?(f=L+712+132|0,l=+c[f>>2],u=+c[L+712+136>>2],d=+c[L+712+140>>2],l*l+u*u+d*d>9999999747378752e-20):0)?(g=+c[L+712+164>>2],g<+c[s+4>>2]):0){a=1/+X(+(l*l+u*u+d*d));c[f>>2]=l*a;c[L+712+136>>2]=u*a;c[L+712+140>>2]=d*a;o[L+16>>2]=o[_+8>>2];o[L+16+4>>2]=0;o[L+16+8>>2]=o[f>>2];o[L+16+8+4>>2]=o[f+4>>2];o[L+16+8+8>>2]=o[f+8>>2];o[L+16+8+12>>2]=o[f+12>>2];o[L+16+24>>2]=o[L+712+148>>2];o[L+16+24+4>>2]=o[L+712+148+4>>2];o[L+16+24+8>>2]=o[L+712+148+8>>2];o[L+16+24+12>>2]=o[L+712+148+12>>2];c[L+16+40>>2]=g;+OP[o[(o[s>>2]|0)+12>>2]&15](s,L+16|0,1)}p=L;return}if((w+-21|0)>>>0>=9){if((w|0)!=31){p=L;return}Zp(10657);if((o[O+20>>2]|0)>0){f=0;do{v=o[O+28>>2]|0;l=+c[v+(f*80|0)>>2];d=+c[v+(f*80|0)+4>>2];y=+c[v+(f*80|0)+8>>2];u=+c[v+(f*80|0)+16>>2];h=+c[v+(f*80|0)+20>>2];C=+c[v+(f*80|0)+24>>2];b=+c[v+(f*80|0)+32>>2];m=+c[v+(f*80|0)+36>>2];S=+c[v+(f*80|0)+40>>2];G=+c[v+(f*80|0)+48>>2];F=+c[v+(f*80|0)+52>>2];T=+c[v+(f*80|0)+56>>2];v=o[v+(f*80|0)+64>>2]|0;A=+c[D>>2];B=+c[D+4>>2];W=+c[D+8>>2];P=+c[D+16>>2];M=+c[D+20>>2];x=+c[D+24>>2];g=+c[D+32>>2];k=+c[D+36>>2];R=+c[D+40>>2];j=G*A+F*B+T*W+ +c[D+48>>2];I=G*P+F*M+T*x+ +c[D+52>>2];T=G*g+F*k+T*R+ +c[D+56>>2];c[L+712>>2]=l*A+u*B+b*W;c[L+712+4>>2]=d*A+h*B+m*W;c[L+712+8>>2]=y*A+C*B+S*W;c[L+712+12>>2]=0;c[L+712+16>>2]=l*P+u*M+b*x;c[L+712+20>>2]=d*P+h*M+m*x;c[L+712+24>>2]=y*P+C*M+S*x;c[L+712+28>>2]=0;c[L+712+32>>2]=l*g+u*k+b*R;c[L+712+36>>2]=d*g+h*k+m*R;c[L+712+40>>2]=y*g+C*k+S*R;c[L+712+44>>2]=0;c[L+712+48>>2]=j;c[L+712+52>>2]=I;c[L+712+56>>2]=T;c[L+712+60>>2]=0;r[L+352+8>>1]=1;r[L+352+10>>1]=-1;o[L+352>>2]=3500;o[L+352+12>>2]=s;o[L+352+16>>2]=f;o[L+352+4>>2]=o[s+4>>2];w=o[_+8>>2]|0;o[L+288>>2]=_;o[L+288+4>>2]=v;o[L+288+8>>2]=w;o[L+288+12>>2]=L+712;o[L+288+16>>2]=-1;o[L+288+20>>2]=f;Fw(e,t,i,L+288|0,L+352|0,a);f=f+1|0}while((f|0)<(o[O+20>>2]|0))}f=o[2006]|0;O=(o[f+16>>2]|0)+-1|0;o[f+16>>2]=O;if(O|0){p=L;return}do if(o[f+4>>2]|0){ut(L+712|0,0)|0;O=o[5649]|0;c[f+8>>2]=+c[f+8>>2]+ +(((o[L+712+4>>2]|0)-(o[O+4>>2]|0)+(((o[L+712>>2]|0)-(o[O>>2]|0)|0)*1e6|0)-(o[f+12>>2]|0)|0)>>>0)/1e3;if(!(o[f+16>>2]|0)){f=o[2006]|0;break}else{p=L;return}}while(0);o[2006]=o[f+20>>2];p=L;return}switch(w|0){case 21:{d=+c[D>>2];h=+c[D+16>>2];m=+c[D+32>>2];y=+c[D+4>>2];g=+c[D+20>>2];C=+c[D+36>>2];k=+c[D+8>>2];S=+c[D+24>>2];R=+c[D+40>>2];j=-+c[D+48>>2];I=-+c[D+52>>2];T=-+c[D+56>>2];b=+c[t+48>>2];u=+c[t+52>>2];l=+c[t+56>>2];c[L+352>>2]=d*j+h*I+m*T+(d*b+h*u+m*l);c[L+352+4>>2]=y*j+g*I+C*T+(y*b+g*u+C*l);c[L+352+8>>2]=k*j+S*I+R*T+(k*b+S*u+R*l);c[L+352+12>>2]=0;l=+c[i+48>>2];u=+c[i+52>>2];b=+c[i+56>>2];E=+c[i>>2];x=+c[i+16>>2];M=+c[i+32>>2];P=+c[i+4>>2];W=+c[i+20>>2];B=+c[i+36>>2];A=+c[i+8>>2];F=+c[i+24>>2];G=+c[i+40>>2];c[L+288>>2]=d*E+h*x+m*M;c[L+288+4>>2]=d*P+h*W+m*B;c[L+288+8>>2]=d*A+h*F+m*G;c[L+288+12>>2]=0;c[L+288+16>>2]=y*E+g*x+C*M;c[L+288+20>>2]=y*P+g*W+C*B;c[L+288+24>>2]=y*A+g*F+C*G;c[L+288+28>>2]=0;c[L+288+32>>2]=k*E+S*x+R*M;c[L+288+36>>2]=k*P+S*W+R*B;c[L+288+40>>2]=k*A+S*F+R*G;f=L+288+44|0;o[f>>2]=0;o[f+4>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[f+16>>2]=0;f=o[_+8>>2]|0;G=+wP[o[(o[O>>2]|0)+48>>2]&15](O);o[L+64>>2]=7e3;o[L+64+4>>2]=e;o[L+64+8>>2]=o[t>>2];o[L+64+8+4>>2]=o[t+4>>2];o[L+64+8+8>>2]=o[t+8>>2];o[L+64+8+12>>2]=o[t+12>>2];o[L+64+24>>2]=o[t+16>>2];o[L+64+24+4>>2]=o[t+16+4>>2];o[L+64+24+8>>2]=o[t+16+8>>2];o[L+64+24+12>>2]=o[t+16+12>>2];o[L+64+40>>2]=o[t+32>>2];o[L+64+40+4>>2]=o[t+32+4>>2];o[L+64+40+8>>2]=o[t+32+8>>2];o[L+64+40+12>>2]=o[t+32+12>>2];o[L+64+56>>2]=o[t+48>>2];o[L+64+56+4>>2]=o[t+48+4>>2];o[L+64+56+8>>2]=o[t+48+8>>2];o[L+64+56+12>>2]=o[t+48+12>>2];o[L+64+72>>2]=o[i>>2];o[L+64+72+4>>2]=o[i+4>>2];o[L+64+72+8>>2]=o[i+8>>2];o[L+64+72+12>>2]=o[i+12>>2];o[L+64+88>>2]=o[i+16>>2];o[L+64+88+4>>2]=o[i+16+4>>2];o[L+64+88+8>>2]=o[i+16+8>>2];o[L+64+88+12>>2]=o[i+16+12>>2];o[L+64+104>>2]=o[i+32>>2];o[L+64+104+4>>2]=o[i+32+4>>2];o[L+64+104+8>>2]=o[i+32+8>>2];o[L+64+104+12>>2]=o[i+32+12>>2];o[L+64+120>>2]=o[i+48>>2];o[L+64+120+4>>2]=o[i+48+4>>2];o[L+64+120+8>>2]=o[i+48+8>>2];o[L+64+120+12>>2]=o[i+48+12>>2];o[L+64+136>>2]=o[D>>2];o[L+64+136+4>>2]=o[D+4>>2];o[L+64+136+8>>2]=o[D+8>>2];o[L+64+136+12>>2]=o[D+12>>2];o[L+64+152>>2]=o[D+16>>2];o[L+64+152+4>>2]=o[D+16+4>>2];o[L+64+152+8>>2]=o[D+16+8>>2];o[L+64+152+12>>2]=o[D+16+12>>2];o[L+64+168>>2]=o[D+32>>2];o[L+64+168+4>>2]=o[D+32+4>>2];o[L+64+168+8>>2]=o[D+32+8>>2];o[L+64+168+12>>2]=o[D+32+12>>2];o[L+64+184>>2]=o[D+48>>2];o[L+64+184+4>>2]=o[D+48+4>>2];o[L+64+184+8>>2]=o[D+48+8>>2];o[L+64+184+12>>2]=o[D+48+12>>2];c[L+64+204>>2]=G;o[L+64>>2]=3452;o[L+64+212>>2]=s;o[L+64+216>>2]=f;o[L+64+220>>2]=O;o[L+64+200>>2]=o[s+4>>2];c[L+64+208>>2]=a;HP[o[(o[e>>2]|0)+8>>2]&127](e,L+288|0,L+16|0,L);f=o[O+52>>2]|0;o[L+712>>2]=4856;o[L+712+4>>2]=f;o[L+712+8>>2]=L+64;f=o[O+56>>2]|0;if(!(n[f+60>>0]|0))$x(f,L+712|0,L+352|0,d*j+h*I+m*T+(d*l+h*u+m*b),y*j+g*I+C*T+(y*l+g*u+C*b),k*j+S*I+R*T+(k*l+S*u+R*b),L+16|0,L);else eM(f,L+712|0,L+352|0,d*j+h*I+m*T+(d*l+h*u+m*b),y*j+g*I+C*T+(y*l+g*u+C*b),k*j+S*I+R*T+(k*l+S*u+R*b),L+16|0,L,o[f+56>>2]|0);p=L;return}case 28:{o[L+712>>2]=3316;o[L+712+168>>2]=0;c[L+712+172>>2]=a;o[L+712+164>>2]=o[s+4>>2];o[L+352>>2]=6816;o[L+352+4>>2]=0;o[L+352+8>>2]=0;o[L+352+12>>2]=e;o[L+352+16>>2]=0;o[L+352+20>>2]=O;if((Pv(L+352|0,t,i,D,D,L+712|0)|0?(v=L+712+132|0,b=+c[v>>2],h=+c[L+712+136>>2],m=+c[L+712+140>>2],b*b+h*h+m*m>9999999747378752e-20):0)?(y=+c[L+712+164>>2],y<+c[s+4>>2]):0){E=1/+X(+(b*b+h*h+m*m));c[v>>2]=b*E;c[L+712+136>>2]=h*E;c[L+712+140>>2]=m*E;o[L+288>>2]=o[_+8>>2];o[L+288+4>>2]=0;o[L+288+8>>2]=o[v>>2];o[L+288+8+4>>2]=o[v+4>>2];o[L+288+8+8>>2]=o[v+8>>2];o[L+288+8+12>>2]=o[v+12>>2];o[L+288+24>>2]=o[L+712+148>>2];o[L+288+24+4>>2]=o[L+712+148+4>>2];o[L+288+24+8>>2]=o[L+712+148+8>>2];o[L+288+24+12>>2]=o[L+712+148+12>>2];c[L+288+40>>2]=y;+OP[o[(o[s>>2]|0)+12>>2]&15](s,L+288|0,1)}p=L;return}default:{d=+c[D>>2];h=+c[D+16>>2];m=+c[D+32>>2];k=+c[D+4>>2];S=+c[D+20>>2];R=+c[D+36>>2];W=+c[D+8>>2];A=+c[D+24>>2];G=+c[D+40>>2];M=-+c[D+48>>2];x=-+c[D+52>>2];T=-+c[D+56>>2];j=+c[t+48>>2];I=+c[t+52>>2];l=+c[t+56>>2];b=d*M+h*x+m*T+(d*j+h*I+m*l);u=k*M+S*x+R*T+(k*j+S*I+R*l);l=W*M+A*x+G*T+(W*j+A*I+G*l);I=+c[i+48>>2];j=+c[i+52>>2];C=+c[i+56>>2];y=d*M+h*x+m*T+(d*I+h*j+m*C);g=k*M+S*x+R*T+(k*I+S*j+R*C);C=W*M+A*x+G*T+(W*I+A*j+G*C);j=+c[i>>2];I=+c[i+16>>2];T=+c[i+32>>2];x=+c[i+4>>2];M=+c[i+20>>2];P=+c[i+36>>2];B=+c[i+8>>2];F=+c[i+24>>2];E=+c[i+40>>2];c[L+712>>2]=d*j+h*I+m*T;c[L+712+4>>2]=d*x+h*M+m*P;c[L+712+8>>2]=d*B+h*F+m*E;c[L+712+12>>2]=0;c[L+712+16>>2]=k*j+S*I+R*T;c[L+712+20>>2]=k*x+S*M+R*P;c[L+712+24>>2]=k*B+S*F+R*E;c[L+712+28>>2]=0;c[L+712+32>>2]=W*j+A*I+G*T;c[L+712+36>>2]=W*x+A*M+G*P;c[L+712+40>>2]=W*B+A*F+G*E;w=L+712+44|0;o[w>>2]=0;o[w+4>>2]=0;o[w+8>>2]=0;o[w+12>>2]=0;o[w+16>>2]=0;_=o[_+8>>2]|0;E=+wP[o[(o[O>>2]|0)+48>>2]&15](O);o[L+352>>2]=7e3;o[L+352+4>>2]=e;o[L+352+8>>2]=o[t>>2];o[L+352+8+4>>2]=o[t+4>>2];o[L+352+8+8>>2]=o[t+8>>2];o[L+352+8+12>>2]=o[t+12>>2];o[L+352+24>>2]=o[t+16>>2];o[L+352+24+4>>2]=o[t+16+4>>2];o[L+352+24+8>>2]=o[t+16+8>>2];o[L+352+24+12>>2]=o[t+16+12>>2];o[L+352+40>>2]=o[t+32>>2];o[L+352+40+4>>2]=o[t+32+4>>2];o[L+352+40+8>>2]=o[t+32+8>>2];o[L+352+40+12>>2]=o[t+32+12>>2];o[L+352+56>>2]=o[t+48>>2];o[L+352+56+4>>2]=o[t+48+4>>2];o[L+352+56+8>>2]=o[t+48+8>>2];o[L+352+56+12>>2]=o[t+48+12>>2];o[L+352+72>>2]=o[i>>2];o[L+352+72+4>>2]=o[i+4>>2];o[L+352+72+8>>2]=o[i+8>>2];o[L+352+72+12>>2]=o[i+12>>2];o[L+352+88>>2]=o[i+16>>2];o[L+352+88+4>>2]=o[i+16+4>>2];o[L+352+88+8>>2]=o[i+16+8>>2];o[L+352+88+12>>2]=o[i+16+12>>2];o[L+352+104>>2]=o[i+32>>2];o[L+352+104+4>>2]=o[i+32+4>>2];o[L+352+104+8>>2]=o[i+32+8>>2];o[L+352+104+12>>2]=o[i+32+12>>2];o[L+352+120>>2]=o[i+48>>2];o[L+352+120+4>>2]=o[i+48+4>>2];o[L+352+120+8>>2]=o[i+48+8>>2];o[L+352+120+12>>2]=o[i+48+12>>2];o[L+352+136>>2]=o[D>>2];o[L+352+136+4>>2]=o[D+4>>2];o[L+352+136+8>>2]=o[D+8>>2];o[L+352+136+12>>2]=o[D+12>>2];o[L+352+152>>2]=o[D+16>>2];o[L+352+152+4>>2]=o[D+16+4>>2];o[L+352+152+8>>2]=o[D+16+8>>2];o[L+352+152+12>>2]=o[D+16+12>>2];o[L+352+168>>2]=o[D+32>>2];o[L+352+168+4>>2]=o[D+32+4>>2];o[L+352+168+8>>2]=o[D+32+8>>2];o[L+352+168+12>>2]=o[D+32+12>>2];o[L+352+184>>2]=o[D+48>>2];o[L+352+184+4>>2]=o[D+48+4>>2];o[L+352+184+8>>2]=o[D+48+8>>2];o[L+352+184+12>>2]=o[D+48+12>>2];c[L+352+204>>2]=E;o[L+352>>2]=3476;o[L+352+212>>2]=s;o[L+352+216>>2]=_;o[L+352+220>>2]=O;o[L+352+200>>2]=o[s+4>>2];c[L+352+208>>2]=a;HP[o[(o[e>>2]|0)+8>>2]&127](e,L+712|0,L+288|0,L+64|0);c[L+16>>2]=b;c[L+16+4>>2]=u;c[L+16+8>>2]=l;c[L+16+12>>2]=0;if(y<b){c[L+16>>2]=y;d=y}else d=b;if(g<u){c[L+16+4>>2]=g;h=g}else h=u;if(C<l){c[L+16+8>>2]=C;m=C}else m=l;c[L>>2]=b;c[L+4>>2]=u;c[L+8>>2]=l;c[L+12>>2]=0;if(b<y){c[L>>2]=y;b=y}if(u<g){c[L+4>>2]=g;u=g}if(l<C){c[L+8>>2]=C;l=C}c[L+16>>2]=+c[L+288>>2]+d;c[L+16+4>>2]=+c[L+288+4>>2]+h;c[L+16+8>>2]=+c[L+288+8>>2]+m;c[L>>2]=+c[L+64>>2]+b;c[L+4>>2]=+c[L+64+4>>2]+u;c[L+8>>2]=+c[L+64+8>>2]+l;HP[o[(o[O>>2]|0)+64>>2]&127](O,L+352|0,L+16|0,L);p=L;return}}}function Gw(e){e=e|0;qa(e);return}function Ew(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;_=_|0;var s=0;s=p;p=p+64|0;o[s+48>>2]=r;o[s+48+4>>2]=_;r=o[e+212>>2]|0;if(!(+c[r+4>>2]>=n)){p=s;return+n}o[s>>2]=o[e+216>>2];o[s+4>>2]=s+48;o[s+8>>2]=o[t>>2];o[s+8+4>>2]=o[t+4>>2];o[s+8+8>>2]=o[t+8>>2];o[s+8+12>>2]=o[t+12>>2];o[s+24>>2]=o[i>>2];o[s+24+4>>2]=o[i+4>>2];o[s+24+8>>2]=o[i+8>>2];o[s+24+12>>2]=o[i+12>>2];c[s+40>>2]=n;n=+OP[o[(o[r>>2]|0)+12>>2]&15](r,s,1);p=s;return+n}function Vw(e){e=e|0;qa(e);return}function Nw(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=+n;r=r|0;_=_|0;var s=0;s=p;p=p+64|0;o[s+48>>2]=r;o[s+48+4>>2]=_;r=o[e+212>>2]|0;if(!(+c[r+4>>2]>=n)){p=s;return+n}o[s>>2]=o[e+216>>2];o[s+4>>2]=s+48;o[s+8>>2]=o[t>>2];o[s+8+4>>2]=o[t+4>>2];o[s+8+8>>2]=o[t+8>>2];o[s+8+12>>2]=o[t+12>>2];o[s+24>>2]=o[i>>2];o[s+24+4>>2]=o[i+4>>2];o[s+24+8>>2]=o[i+8>>2];o[s+24+12>>2]=o[i+12>>2];c[s+40>>2]=n;n=+OP[o[(o[r>>2]|0)+12>>2]&15](r,s,1);p=s;return+n}function Xw(e){e=e|0;return}function Hw(e){e=e|0;qa(e);return}function Zw(e,t){e=e|0;t=t|0;e=o[e+12>>2]|0;return DP[o[(o[e>>2]|0)+8>>2]&31](e,t)|0}function Uw(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;n=p;p=p+16|0;o[n>>2]=-1;o[n+4>>2]=o[e+16>>2];if(!(o[t+4>>2]|0))o[t+4>>2]=n;_=o[e+12>>2]|0;r=+OP[o[(o[_>>2]|0)+12>>2]&15](_,t,i);o[e+4>>2]=o[(o[e+12>>2]|0)+4>>2];p=n;return+r}function zw(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=+_;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0;s=p;p=p+464|0;Zp(10877);o[s+128>>2]=o[i>>2];o[s+128+4>>2]=o[i+4>>2];o[s+128+8>>2]=o[i+8>>2];o[s+128+12>>2]=o[i+12>>2];o[s+128+16>>2]=o[i+16>>2];o[s+128+16+4>>2]=o[i+16+4>>2];o[s+128+16+8>>2]=o[i+16+8>>2];o[s+128+16+12>>2]=o[i+16+12>>2];o[s+128+32>>2]=o[i+32>>2];o[s+128+32+4>>2]=o[i+32+4>>2];o[s+128+32+8>>2]=o[i+32+8>>2];o[s+128+32+12>>2]=o[i+32+12>>2];f=s+128+48|0;o[f>>2]=o[i+48>>2];o[f+4>>2]=o[i+48+4>>2];o[f+8>>2]=o[i+48+8>>2];o[f+12>>2]=o[i+48+12>>2];o[s+64>>2]=o[n>>2];o[s+64+4>>2]=o[n+4>>2];o[s+64+8>>2]=o[n+8>>2];o[s+64+12>>2]=o[n+12>>2];o[s+64+16>>2]=o[n+16>>2];o[s+64+16+4>>2]=o[n+16+4>>2];o[s+64+16+8>>2]=o[n+16+8>>2];o[s+64+16+12>>2]=o[n+16+12>>2];o[s+64+32>>2]=o[n+32>>2];o[s+64+32+4>>2]=o[n+32+4>>2];o[s+64+32+8>>2]=o[n+32+8>>2];o[s+64+32+12>>2]=o[n+32+12>>2];a=s+64+48|0;o[a>>2]=o[n+48>>2];o[a+4>>2]=o[n+48+4>>2];o[a+8>>2]=o[n+48+8>>2];o[a+12>>2]=o[n+48+12>>2];Yw(s+128|0,s+64|0,s+256|0,s+192|0);g=+c[s+192>>2];l=g*+c[s+256+4>>2];m=g*+c[s+256+8>>2];c[s+16>>2]=+c[s+256>>2]*g;c[s+16+4>>2]=l;c[s+16+8>>2]=m;c[s+16+12>>2]=0;o[s+256>>2]=0;o[s+256+4>>2]=0;o[s+256+8>>2]=0;o[s+256+12>>2]=0;o[s+192+4>>2]=0;o[s+192+4+4>>2]=0;o[s+192+24>>2]=0;o[s+192+24+4>>2]=0;y=s+192+44|0;o[y>>2]=0;o[y+4>>2]=0;o[y+8>>2]=0;o[y+12>>2]=0;o[y+16>>2]=0;Kw(s+128|0,s);m=+c[s>>2];l=+c[s+4>>2];g=+c[s+8>>2];h=+c[s+12>>2];b=m*(2/(m*m+l*l+g*g+h*h));u=l*(2/(m*m+l*l+g*g+h*h));d=g*(2/(m*m+l*l+g*g+h*h));c[s+192>>2]=1-(l*u+g*d);c[s+192+4>>2]=m*u-h*d;c[s+192+8>>2]=m*d+h*u;c[s+192+12>>2]=0;c[s+192+16>>2]=m*u+h*d;c[s+192+20>>2]=1-(m*b+g*d);c[s+192+24>>2]=l*d-h*b;c[s+192+28>>2]=0;c[s+192+32>>2]=m*d-h*u;c[s+192+36>>2]=l*d+h*b;c[s+192+40>>2]=1-(m*b+l*u);c[y>>2]=0;vS(t,s+192|0,s+256|0,s+16|0,s+48|0,s+32|0);o[s+256>>2]=3524;o[s+256+36>>2]=o[i>>2];o[s+256+36+4>>2]=o[i+4>>2];o[s+256+36+8>>2]=o[i+8>>2];o[s+256+36+12>>2]=o[i+12>>2];o[s+256+52>>2]=o[i+16>>2];o[s+256+52+4>>2]=o[i+16+4>>2];o[s+256+52+8>>2]=o[i+16+8>>2];o[s+256+52+12>>2]=o[i+16+12>>2];o[s+256+68>>2]=o[i+32>>2];o[s+256+68+4>>2]=o[i+32+4>>2];o[s+256+68+8>>2]=o[i+32+8>>2];o[s+256+68+12>>2]=o[i+32+12>>2];y=s+256+84|0;o[y>>2]=o[i+48>>2];o[y+4>>2]=o[i+48+4>>2];o[y+8>>2]=o[i+48+8>>2];o[y+12>>2]=o[i+48+12>>2];o[s+256+100>>2]=o[n>>2];o[s+256+100+4>>2]=o[n+4>>2];o[s+256+100+8>>2]=o[n+8>>2];o[s+256+100+12>>2]=o[n+12>>2];o[s+256+116>>2]=o[n+16>>2];o[s+256+116+4>>2]=o[n+16+4>>2];o[s+256+116+8>>2]=o[n+16+8>>2];o[s+256+116+12>>2]=o[n+16+12>>2];o[s+256+132>>2]=o[n+32>>2];o[s+256+132+4>>2]=o[n+32+4>>2];o[s+256+132+8>>2]=o[n+32+8>>2];o[s+256+132+12>>2]=o[n+32+12>>2];i=s+256+148|0;o[i>>2]=o[n+48>>2];o[i+4>>2]=o[n+48+4>>2];o[i+8>>2]=o[n+48+8>>2];o[i+12>>2]=o[n+48+12>>2];o[s+256+180>>2]=e;o[s+256+184>>2]=r;c[s+256+188>>2]=_;o[s+256+192>>2]=t;u=+c[i>>2]-+c[y>>2];l=+c[s+256+152>>2]-+c[s+256+88>>2];b=+c[s+256+156>>2]-+c[s+256+92>>2];_=1/+X(+(u*u+l*l+b*b));m=u*_==0?0xde0b6b000000000:1/(u*_);c[s+256+4>>2]=m;h=l*_==0?0xde0b6b000000000:1/(l*_);c[s+256+8>>2]=h;d=b*_==0?0xde0b6b000000000:1/(b*_);c[s+256+12>>2]=d;o[s+256+20>>2]=m<0&1;o[s+256+24>>2]=h<0&1;o[s+256+28>>2]=d<0&1;c[s+256+32>>2]=b*(b*_)+(u*(u*_)+l*(l*_));t=o[e+68>>2]|0;vP[o[(o[t>>2]|0)+24>>2]&7](t,f,a,s+256|0,s+48|0,s+32|0);t=o[2006]|0;e=(o[t+16>>2]|0)+-1|0;o[t+16>>2]=e;if(e|0){p=s;return}do if(o[t+4>>2]|0){ut(s+256|0,0)|0;y=o[5649]|0;c[t+8>>2]=+c[t+8>>2]+ +(((o[s+256+4>>2]|0)-(o[y+4>>2]|0)+(((o[s+256>>2]|0)-(o[y>>2]|0)|0)*1e6|0)-(o[t+12>>2]|0)|0)>>>0)/1e3;if(!(o[t+16>>2]|0)){t=o[2006]|0;break}else{p=s;return}}while(0);o[2006]=o[t+20>>2];p=s;return}function Yw(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0;f=p;p=p+64|0;u=+c[e+20>>2];v=+c[e+40>>2];d=+c[e+24>>2];y=+c[e+36>>2];g=+c[e+32>>2];l=+c[e+16>>2];a=+c[e>>2];s=+c[e+4>>2];h=+c[e+8>>2];_=1/((u*v-d*y)*a+s*(d*g-v*l)+(y*l-u*g)*h);R=+c[t>>2];S=+c[t+4>>2];j=+c[t+8>>2];k=+c[t+16>>2];w=+c[t+20>>2];C=+c[t+24>>2];m=+c[t+32>>2];b=+c[t+36>>2];r=+c[t+40>>2];c[f+16>>2]=j*((y*l-u*g)*_)+(R*((u*v-d*y)*_)+S*((d*g-v*l)*_));c[f+16+4>>2]=j*((g*s-y*a)*_)+(R*((y*h-v*s)*_)+S*((v*a-g*h)*_));c[f+16+8>>2]=j*((u*a-l*s)*_)+(R*((d*s-u*h)*_)+S*((l*h-d*a)*_));c[f+16+12>>2]=0;c[f+16+16>>2]=(u*v-d*y)*_*k+(d*g-v*l)*_*w+(y*l-u*g)*_*C;c[f+16+20>>2]=(y*h-v*s)*_*k+(v*a-g*h)*_*w+(g*s-y*a)*_*C;c[f+16+24>>2]=(d*s-u*h)*_*k+(l*h-d*a)*_*w+(u*a-l*s)*_*C;c[f+16+28>>2]=0;c[f+16+32>>2]=(u*v-d*y)*_*m+(d*g-v*l)*_*b+(y*l-u*g)*_*r;c[f+16+36>>2]=(y*h-v*s)*_*m+(v*a-g*h)*_*b+(g*s-y*a)*_*r;c[f+16+40>>2]=(d*s-u*h)*_*m+(l*h-d*a)*_*b+(u*a-l*s)*_*r;c[f+16+44>>2]=0;Kw(f+16|0,f);r=+c[f>>2];_=+c[f+4>>2];s=+c[f+8>>2];l=+c[f+12>>2];a=1/+X(+(r*r+_*_+s*s+l*l));c[f>>2]=r*a;c[f+4>>2]=_*a;c[f+8>>2]=s*a;c[f+12>>2]=l*a;l=l*a<-1?-1:l*a;c[n>>2]=+Y(+(l>1?1:l))*2;c[i>>2]=r*a;c[i+4>>2]=_*a;c[i+8>>2]=s*a;c[i+12>>2]=0;if(r*a*(r*a)+_*a*(_*a)+s*a*(s*a)<1.4210854715202004e-14){o[i>>2]=1065353216;o[i+4>>2]=0;o[i+8>>2]=0;c[i+12>>2]=0;p=f;return}else{j=1/+X(+(r*a*(r*a)+_*a*(_*a)+s*a*(s*a)));c[i>>2]=r*a*j;c[i+4>>2]=j*(_*a);c[i+8>>2]=j*(s*a);p=f;return}}function Kw(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,l=0;_=p;p=p+16|0;i=+c[e>>2];n=+c[e+20>>2];r=+c[e+40>>2];if(i+n+r>0){r=+X(+(i+n+r+1));c[_+12>>2]=r*.5;l=.5/r*(+c[e+36>>2]-+c[e+24>>2]);c[_>>2]=l;i=.5/r*(+c[e+8>>2]-+c[e+32>>2]);c[_+4>>2]=i;n=.5/r*(+c[e+16>>2]-+c[e+4>>2]);c[_+8>>2]=n;e=(c[u>>2]=l,o[u>>2]|0);f=(c[u>>2]=i,o[u>>2]|0);a=(c[u>>2]=n,o[u>>2]|0);s=(c[u>>2]=r*.5,o[u>>2]|0);o[t>>2]=e;e=t+4|0;o[e>>2]=f;e=t+8|0;o[e>>2]=a;e=t+12|0;o[e>>2]=s;p=_;return}else{f=i<n?n<r?2:1:i<r?2:0;l=+X(+(+c[e+(f<<4)+(f<<2)>>2]-+c[e+((((f+1|0)>>>0)%3|0)<<4)+((((f+1|0)>>>0)%3|0)<<2)>>2]-+c[e+((((f+2|0)>>>0)%3|0)<<4)+((((f+2|0)>>>0)%3|0)<<2)>>2]+1));c[_+(f<<2)>>2]=l*.5;c[_+12>>2]=.5/l*(+c[e+((((f+2|0)>>>0)%3|0)<<4)+((((f+1|0)>>>0)%3|0)<<2)>>2]-+c[e+((((f+1|0)>>>0)%3|0)<<4)+((((f+2|0)>>>0)%3|0)<<2)>>2]);c[_+((((f+1|0)>>>0)%3|0)<<2)>>2]=.5/l*(+c[e+((((f+1|0)>>>0)%3|0)<<4)+(f<<2)>>2]+ +c[e+(f<<4)+((((f+1|0)>>>0)%3|0)<<2)>>2]);c[_+((((f+2|0)>>>0)%3|0)<<2)>>2]=.5/l*(+c[e+((((f+2|0)>>>0)%3|0)<<4)+(f<<2)>>2]+ +c[e+(f<<4)+((((f+2|0)>>>0)%3|0)<<2)>>2]);f=o[_>>2]|0;e=o[_+4>>2]|0;s=o[_+8>>2]|0;a=o[_+12>>2]|0;o[t>>2]=f;f=t+4|0;o[f>>2]=e;f=t+8|0;o[f>>2]=s;f=t+12|0;o[f>>2]=a;p=_;return}}function Qw(e){e=e|0;qa(e);return}function qw(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0;n=p;p=p+32|0;i=o[e+184>>2]|0;if(+c[i+4>>2]==0){e=0;p=n;return e|0}t=o[t>>2]|0;if(!(DP[o[(o[i>>2]|0)+8>>2]&31](i,o[t+188>>2]|0)|0)){e=1;p=n;return e|0}_=o[e+192>>2]|0;s=o[t+192>>2]|0;i=o[e+184>>2]|0;r=+c[e+188>>2];o[n>>2]=0;o[n+4>>2]=s;o[n+8>>2]=t;o[n+12>>2]=t+4;o[n+16>>2]=-1;o[n+20>>2]=-1;Fw(_,e+36|0,e+100|0,n,i,r);e=1;p=n;return e|0}function Jw(e){e=e|0;qa(e);return}function $w(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;i=p;p=p+96|0;t=o[t>>2]|0;if((t|0)==(o[e+4>>2]|0)){p=i;return 1}n=o[e+12>>2]|0;if(!(DP[o[(o[n>>2]|0)+8>>2]&31](n,o[t+188>>2]|0)|0)){p=i;return 1}n=o[e+4>>2]|0;r=o[n+192>>2]|0;o[i+64>>2]=0;o[i+64+4>>2]=r;o[i+64+8>>2]=n;o[i+64+12>>2]=n+4;o[i+64+16>>2]=-1;o[i+64+20>>2]=-1;n=o[t+192>>2]|0;o[i+40>>2]=0;o[i+40+4>>2]=n;o[i+40+8>>2]=t;o[i+40+12>>2]=t+4;o[i+40+16>>2]=-1;o[i+40+20>>2]=-1;t=o[(o[e+8>>2]|0)+24>>2]|0;t=bP[o[(o[t>>2]|0)+8>>2]&31](t,i+64|0,i+40|0,0)|0;if(t|0){r=o[e+12>>2]|0;o[i+4>>2]=0;o[i+8>>2]=i+64;o[i+12>>2]=i+40;o[i>>2]=3564;o[i+32>>2]=r;rP[o[(o[t>>2]|0)+8>>2]&31](t,i+64|0,i+40|0,(o[e+8>>2]|0)+28|0,i);_P[o[o[t>>2]>>2]&255](t);r=o[(o[e+8>>2]|0)+24>>2]|0;aP[o[(o[r>>2]|0)+60>>2]&127](r,t)}p=i;return 1}function ek(e){e=e|0;return}function tk(e){e=e|0;qa(e);return}function ik(e,t,i){e=e|0;t=t|0;i=i|0;o[e+16>>2]=t;o[e+24>>2]=i;return}function nk(e,t,i){e=e|0;t=t|0;i=i|0;o[e+20>>2]=t;o[e+28>>2]=i;return}function rk(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0;S=p;p=p+192|0;w=o[(o[e+4>>2]|0)+740>>2]|0;k=o[(o[e+8>>2]|0)+8>>2]|0;s=+c[i>>2];g=+c[t>>2]*r+s;a=+c[i+4>>2];v=+c[t+4>>2]*r+a;_=+c[i+8>>2];C=+c[t+8>>2]*r+_;f=o[(o[e+12>>2]|0)+8>>2]|0;l=+c[f+52>>2];u=+c[f+56>>2];if((w|0)!=(k|0)){h=C-+c[f+60>>2];s=s-+c[k+52>>2];a=a-+c[k+56>>2];_=_-+c[k+60>>2];b=(g-l)*+c[f+4>>2]+(v-u)*+c[f+20>>2]+h*+c[f+36>>2];d=(g-l)*+c[f+8>>2]+(v-u)*+c[f+24>>2]+h*+c[f+40>>2];h=(g-l)*+c[f+12>>2]+(v-u)*+c[f+28>>2]+h*+c[f+44>>2];m=s*+c[k+4>>2]+a*+c[k+20>>2]+_*+c[k+36>>2];y=s*+c[k+8>>2]+a*+c[k+24>>2]+_*+c[k+40>>2];_=s*+c[k+12>>2]+a*+c[k+28>>2]+_*+c[k+44>>2]}else{y=g-+c[w+52>>2];m=v-+c[w+56>>2];h=C-+c[w+60>>2];_=_-+c[f+60>>2];b=y*+c[w+4>>2]+m*+c[w+20>>2]+h*+c[w+36>>2];d=y*+c[w+8>>2]+m*+c[w+24>>2]+h*+c[w+40>>2];h=y*+c[w+12>>2]+m*+c[w+28>>2]+h*+c[w+44>>2];m=(s-l)*+c[f+4>>2]+(a-u)*+c[f+20>>2]+_*+c[f+36>>2];y=(s-l)*+c[f+8>>2]+(a-u)*+c[f+24>>2]+_*+c[f+40>>2];_=(s-l)*+c[f+12>>2]+(a-u)*+c[f+28>>2]+_*+c[f+44>>2]}c[S>>2]=b;c[S+4>>2]=d;c[S+8>>2]=h;c[S+12>>2]=0;c[S+16>>2]=m;c[S+20>>2]=y;c[S+24>>2]=_;c[S+28>>2]=0;o[S+64>>2]=o[t>>2];o[S+64+4>>2]=o[t+4>>2];o[S+64+8>>2]=o[t+8>>2];o[S+64+12>>2]=o[t+12>>2];c[S+80>>2]=r;c[S+84>>2]=0;c[S+88>>2]=0;c[S+92>>2]=0;o[S+112>>2]=0;n[S+116>>0]=0;o[S+120>>2]=0;o[S+120+4>>2]=0;o[S+120+8>>2]=0;o[S+120+12>>2]=0;o[S+120+16>>2]=0;o[S+120+20>>2]=0;o[S+120+24>>2]=0;o[S+120+28>>2]=0;c[S+48>>2]=g;c[S+52>>2]=v;c[S+56>>2]=C;c[S+60>>2]=0;o[S+32>>2]=o[i>>2];o[S+32+4>>2]=o[i+4>>2];o[S+32+8>>2]=o[i+8>>2];o[S+32+12>>2]=o[i+12>>2];t=o[e+20>>2]|0;f=o[e+16>>2]|0;i=o[e+28>>2]|0;j=o[e+24>>2]|0;R=(w|0)!=(k|0)?t:f;t=(w|0)!=(k|0)?f:t;f=(w|0)!=(k|0)?i:j;i=(w|0)!=(k|0)?j:i;o[S+96>>2]=R;o[S+100>>2]=t;o[S+104>>2]=f;o[S+108>>2]=i;j=o[e+32>>2]|0;+hP[o[(o[j>>2]|0)+12>>2]&1](j,S,o[((w|0)!=(k|0)?e+12|0:e+8|0)>>2]|0,R,f,o[((w|0)!=(k|0)?e+8|0:e+12|0)>>2]|0,t,i);p=S;return}function ok(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0;r=p;p=p+96|0;_=o[t+192>>2]|0;o[r+64>>2]=0;o[r+64+4>>2]=_;o[r+64+8>>2]=t;o[r+64+12>>2]=t+4;o[r+64+16>>2]=-1;o[r+64+20>>2]=-1;t=o[i+192>>2]|0;o[r+40>>2]=0;o[r+40+4>>2]=t;o[r+40+8>>2]=i;o[r+40+12>>2]=i+4;o[r+40+16>>2]=-1;o[r+40+20>>2]=-1;t=o[e+24>>2]|0;t=bP[o[(o[t>>2]|0)+8>>2]&31](t,r+64|0,r+40|0,0)|0;if(!t){p=r;return}o[r+4>>2]=0;o[r+8>>2]=r+64;o[r+12>>2]=r+40;o[r>>2]=3564;o[r+32>>2]=n;rP[o[(o[t>>2]|0)+8>>2]&31](t,r+64|0,r+40|0,e+28|0,r);_P[o[o[t>>2]>>2]&255](t);_=o[e+24>>2]|0;aP[o[(o[_>>2]|0)+60>>2]&127](_,t);p=r;return}function _k(e){e=e|0;var t=0,i=0,r=0;o[e>>2]=3592;t=o[e+12>>2]|0;if((t|0)>0){r=0;do{i=o[(o[e+20>>2]|0)+(r<<2)>>2]|0;if(i|0){_P[o[o[i>>2]>>2]&255](i);i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+60>>2]&127](i,o[(o[e+20>>2]|0)+(r<<2)>>2]|0)}r=r+1|0}while((r|0)!=(t|0))}t=o[e+20>>2]|0;if(!t){n[e+24>>0]=1;o[e+20>>2]=0;o[e+12>>2]=0;e=e+16|0;o[e>>2]=0;return}if(n[e+24>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+20>>2]=0;n[e+24>>0]=1;o[e+20>>2]=0;o[e+12>>2]=0;e=e+16|0;o[e>>2]=0;return}function sk(e){e=e|0;_k(e);qa(e);return}function ak(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0;y=p;p=p+224|0;h=(n[e+28>>0]|0)!=0;d=h?i:t;h=h?t:i;m=o[d+4>>2]|0;if((o[m+72>>2]|0)!=(o[e+40>>2]|0)){s=o[e+12>>2]|0;if((s|0)>0){f=0;do{a=o[(o[e+20>>2]|0)+(f<<2)>>2]|0;if(a|0){_P[o[o[a>>2]>>2]&255](a);u=o[e+4>>2]|0;aP[o[(o[u>>2]|0)+60>>2]&127](u,o[(o[e+20>>2]|0)+(f<<2)>>2]|0)}f=f+1|0}while((f|0)!=(s|0))}ck(e,t,i);o[e+40>>2]=o[m+72>>2]}s=o[e+12>>2]|0;if(!s){p=y;return}u=o[m+68>>2]|0;f=o[e+4>>2]|0;a=o[e+20>>2]|0;l=o[e+32>>2]|0;o[y+192>>2]=3620;o[y+192+4>>2]=d;o[y+192+8>>2]=h;o[y+192+12>>2]=f;o[y+192+16>>2]=r;o[y+192+20>>2]=_;o[y+192+24>>2]=a;o[y+192+28>>2]=l;n[y+128+16>>0]=1;l=y+128+12|0;o[l>>2]=0;o[y+128+4>>2]=0;o[y+128+8>>2]=0;if((s|0)>0){t=a;r=0;while(1){a=o[t+(r<<2)>>2]|0;if(a){aP[o[(o[a>>2]|0)+16>>2]&127](a,y+128|0);s=o[y+128+4>>2]|0;if((s|0)>0){f=0;do{i=o[(o[l>>2]|0)+(f<<2)>>2]|0;if(o[i+748>>2]|0){o[_+4>>2]=i;s=o[i+740>>2]|0;a=o[(o[_+8>>2]|0)+8>>2]|0;t=o[(o[_+12>>2]|0)+8>>2]|0;if((s|0)==(a|0))lC(i,s+4|0,t+4|0);else lC(i,t+4|0,a+4|0);o[_+4>>2]=0;s=o[y+128+4>>2]|0}f=f+1|0}while((f|0)<(s|0))}if((s|0)<0){if((o[y+128+8>>2]|0)<0){a=o[l>>2]|0;if(a|0){if(n[y+128+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[l>>2]=0}n[y+128+16>>0]=1;o[l>>2]=0;o[y+128+8>>2]=0}do{o[(o[l>>2]|0)+(s<<2)>>2]=0;s=s+1|0}while((s|0)!=0)}o[y+128+4>>2]=0;s=o[e+12>>2]|0}a=r+1|0;if((a|0)>=(s|0))break;t=o[e+20>>2]|0;r=a}s=o[l>>2]|0;if(s|0){if(n[y+128+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[l>>2]=0}}if(!u){a=o[e+12>>2]|0;if((a|0)>0){s=0;do{lk(y+192|0,o[(o[m+28>>2]|0)+(s*80|0)+64>>2]|0,s);s=s+1|0}while((s|0)<(a|0));b=39}}else{b=o[d+12>>2]|0;M=+c[b>>2];x=+c[b+16>>2];L=+c[b+32>>2];O=+c[b+4>>2];D=+c[b+20>>2];T=+c[b+36>>2];S=+c[b+8>>2];w=+c[b+24>>2];v=+c[b+40>>2];I=-+c[b+48>>2];j=-+c[b+52>>2];R=-+c[b+56>>2];b=o[h+12>>2]|0;N=+c[b>>2];V=+c[b+16>>2];E=+c[b+32>>2];G=+c[b+4>>2];F=+c[b+20>>2];A=+c[b+36>>2];B=+c[b+8>>2];W=+c[b+24>>2];P=+c[b+40>>2];k=+c[b+48>>2];C=+c[b+52>>2];g=+c[b+56>>2];c[y+48>>2]=M*N+x*V+L*E;c[y+48+4>>2]=M*G+x*F+L*A;c[y+48+8>>2]=M*B+x*W+L*P;c[y+48+12>>2]=0;c[y+48+16>>2]=O*N+D*V+T*E;c[y+48+20>>2]=O*G+D*F+T*A;c[y+48+24>>2]=O*B+D*W+T*P;c[y+48+28>>2]=0;c[y+48+32>>2]=S*N+w*V+v*E;c[y+48+36>>2]=S*G+w*F+v*A;c[y+48+40>>2]=S*B+w*W+v*P;c[y+48+44>>2]=0;c[y+48+48>>2]=M*I+x*j+L*R+(M*k+x*C+L*g);c[y+48+52>>2]=O*I+D*j+T*R+(O*k+D*C+T*g);c[y+48+56>>2]=S*I+w*j+v*R+(S*k+w*C+v*g);c[y+48+60>>2]=0;b=o[h+4>>2]|0;HP[o[(o[b>>2]|0)+8>>2]&127](b,y+48|0,y+128|0,y+112|0);o[y+16>>2]=o[y+128>>2];o[y+16+4>>2]=o[y+128+4>>2];o[y+16+8>>2]=o[y+128+8>>2];o[y+16+12>>2]=o[y+128+12>>2];o[y+16+16>>2]=o[y+112>>2];o[y+16+16+4>>2]=o[y+112+4>>2];o[y+16+16+8>>2]=o[y+112+8>>2];o[y+16+16+12>>2]=o[y+112+12>>2];$L(o[u>>2]|0,y+16|0,y+192|0);b=39}if((b|0)==39)a=o[e+12>>2]|0;if((a|0)>0){t=0;do{do if(o[(o[e+20>>2]|0)+(t<<2)>>2]|0){u=o[m+28>>2]|0;b=o[u+(t*80|0)+64>>2]|0;_=o[d+12>>2]|0;w=+c[_>>2];k=+c[_+4>>2];S=+c[_+8>>2];R=+c[_+16>>2];j=+c[_+20>>2];I=+c[_+24>>2];P=+c[_+32>>2];B=+c[_+36>>2];F=+c[_+40>>2];T=+c[u+(t*80|0)>>2];D=+c[u+(t*80|0)+16>>2];O=+c[u+(t*80|0)+32>>2];L=+c[u+(t*80|0)+4>>2];x=+c[u+(t*80|0)+20>>2];M=+c[u+(t*80|0)+36>>2];W=+c[u+(t*80|0)+8>>2];A=+c[u+(t*80|0)+24>>2];G=+c[u+(t*80|0)+40>>2];v=+c[u+(t*80|0)+48>>2];C=+c[u+(t*80|0)+52>>2];N=+c[u+(t*80|0)+56>>2];E=+c[_+48>>2]+(w*v+k*C+S*N);V=+c[_+52>>2]+(R*v+j*C+I*N);N=+c[_+56>>2]+(P*v+B*C+F*N);c[y+128>>2]=w*T+k*D+S*O;c[y+128+4>>2]=w*L+k*x+S*M;c[y+128+8>>2]=w*W+k*A+S*G;c[y+128+12>>2]=0;c[y+128+16>>2]=R*T+j*D+I*O;c[y+128+20>>2]=R*L+j*x+I*M;c[y+128+24>>2]=R*W+j*A+I*G;c[y+128+28>>2]=0;c[y+128+32>>2]=P*T+B*D+F*O;c[y+128+36>>2]=P*L+B*x+F*M;c[y+128+40>>2]=P*W+B*A+F*G;c[y+128+44>>2]=0;c[y+128+48>>2]=E;c[y+128+52>>2]=V;c[y+128+56>>2]=N;c[y+128+60>>2]=0;HP[o[(o[b>>2]|0)+8>>2]&127](b,y+128|0,y+112|0,y+48|0);b=o[h+4>>2]|0;HP[o[(o[b>>2]|0)+8>>2]&127](b,o[h+12>>2]|0,y+16|0,y);if(!(+c[y+112>>2]>+c[y>>2])?!(+c[y+48>>2]<+c[y+16>>2]):0)s=1;else s=0;if(!(!(+c[y+112+8>>2]>+c[y+8>>2])?!(+c[y+48+8>>2]<+c[y+16+8>>2]):0))s=0;if(!(+c[y+112+4>>2]>+c[y+4>>2])?!(+c[y+48+4>>2]<+c[y+16+4>>2]|s^1):0)break;b=o[(o[e+20>>2]|0)+(t<<2)>>2]|0;_P[o[o[b>>2]>>2]&255](b);b=o[e+4>>2]|0;aP[o[(o[b>>2]|0)+60>>2]&127](b,o[(o[e+20>>2]|0)+(t<<2)>>2]|0);o[(o[e+20>>2]|0)+(t<<2)>>2]=0}while(0);t=t+1|0}while((t|0)<(a|0))}p=y;return}function ck(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,c=0,f=0,l=0;l=p;p=p+32|0;s=(n[e+28>>0]|0)!=0;f=s?i:t;s=s?t:i;a=o[f+4>>2]|0;c=o[a+20>>2]|0;_=o[e+12>>2]|0;if((_|0)<(c|0)){if((o[e+16>>2]|0)<(c|0)){if(!c){t=0;i=_}else{o[5637]=(o[5637]|0)+1;t=Qa((c<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+12>>2]|0}if((i|0)>0){r=0;do{o[t+(r<<2)>>2]=o[(o[e+20>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(i|0))}i=o[e+20>>2]|0;if(i|0){if(n[e+24>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+20>>2]=0}n[e+24>>0]=1;o[e+20>>2]=t;o[e+16>>2]=c;i=e+20|0}else i=e+20|0;t=_;do{o[(o[i>>2]|0)+(t<<2)>>2]=0;t=t+1|0}while((t|0)!=(c|0))}o[e+12>>2]=c;if((c|0)<=0){p=l;return}t=0;do{if(!(o[a+68>>2]|0)){i=o[(o[a+28>>2]|0)+(t*80|0)+64>>2]|0;r=o[f+8>>2]|0;_=o[f+12>>2]|0;o[l>>2]=f;o[l+4>>2]=i;o[l+8>>2]=r;o[l+12>>2]=_;o[l+16>>2]=-1;o[l+20>>2]=t;_=o[e+4>>2]|0;_=bP[o[(o[_>>2]|0)+8>>2]&31](_,l,s,o[e+32>>2]|0)|0;o[(o[e+20>>2]|0)+(t<<2)>>2]=_}else o[(o[e+20>>2]|0)+(t<<2)>>2]=0;t=t+1|0}while((t|0)!=(c|0));p=l;return}function fk(e){e=e|0;qa(e);return}function pk(e,t){e=e|0;t=t|0;t=o[t+36>>2]|0;lk(e,o[(o[(o[(o[e+4>>2]|0)+4>>2]|0)+28>>2]|0)+(t*80|0)+64>>2]|0,t);return}function lk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;_=p;p=p+160|0;n=o[e+4>>2]|0;r=o[n+12>>2]|0;D=+c[r>>2];T=+c[r+4>>2];I=+c[r+8>>2];j=+c[r+16>>2];R=+c[r+20>>2];S=+c[r+24>>2];m=+c[r+32>>2];d=+c[r+36>>2];u=+c[r+40>>2];n=o[(o[n+4>>2]|0)+28>>2]|0;k=+c[n+(i*80|0)>>2];w=+c[n+(i*80|0)+16>>2];C=+c[n+(i*80|0)+32>>2];v=+c[n+(i*80|0)+4>>2];g=+c[n+(i*80|0)+20>>2];y=+c[n+(i*80|0)+36>>2];h=+c[n+(i*80|0)+8>>2];b=+c[n+(i*80|0)+24>>2];l=+c[n+(i*80|0)+40>>2];L=+c[n+(i*80|0)+48>>2];O=+c[n+(i*80|0)+52>>2];s=+c[n+(i*80|0)+56>>2];f=+c[r+48>>2]+(D*L+T*O+I*s);a=+c[r+52>>2]+(j*L+R*O+S*s);s=+c[r+56>>2]+(m*L+d*O+u*s);c[_+88>>2]=D*k+T*w+I*C;c[_+88+4>>2]=D*v+T*g+I*y;c[_+88+8>>2]=D*h+T*b+I*l;c[_+88+12>>2]=0;c[_+88+16>>2]=j*k+R*w+S*C;c[_+88+20>>2]=j*v+R*g+S*y;c[_+88+24>>2]=j*h+R*b+S*l;c[_+88+28>>2]=0;c[_+88+32>>2]=m*k+d*w+u*C;c[_+88+36>>2]=m*v+d*g+u*y;c[_+88+40>>2]=m*h+d*b+u*l;c[_+88+44>>2]=0;c[_+88+48>>2]=f;c[_+88+52>>2]=a;c[_+88+56>>2]=s;c[_+88+60>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,_+88|0,_+72|0,_+56|0);r=o[e+8>>2]|0;n=o[r+4>>2]|0;HP[o[(o[n>>2]|0)+8>>2]&127](n,o[r+12>>2]|0,_+40|0,_+24|0);if(!(+c[_+72>>2]>+c[_+24>>2])?!(+c[_+56>>2]<+c[_+40>>2]):0)n=1;else n=0;if(!(!(+c[_+72+8>>2]>+c[_+24+8>>2])?!(+c[_+56+8>>2]<+c[_+40+8>>2]):0))n=0;if(+c[_+72+4>>2]>+c[_+24+4>>2]){p=_;return}if(+c[_+56+4>>2]<+c[_+40+4>>2]|n^1){p=_;return}n=o[e+4>>2]|0;r=o[n+8>>2]|0;o[_>>2]=n;o[_+4>>2]=t;o[_+8>>2]=r;o[_+12>>2]=_+88;o[_+16>>2]=-1;o[_+20>>2]=i;if(!(o[(o[e+24>>2]|0)+(i<<2)>>2]|0)){n=o[e+12>>2]|0;n=bP[o[(o[n>>2]|0)+8>>2]&31](n,_,o[e+8>>2]|0,o[e+28>>2]|0)|0;o[(o[e+24>>2]|0)+(i<<2)>>2]=n;n=o[e+4>>2]|0}r=o[e+20>>2]|0;t=o[r+8>>2]|0;if((o[t+8>>2]|0)==(o[n+8>>2]|0)){o[r+8>>2]=_;EP[o[(o[r>>2]|0)+8>>2]&127](r,-1,i)}else{t=o[r+12>>2]|0;o[r+12>>2]=_;EP[o[(o[r>>2]|0)+12>>2]&127](r,-1,i)}n=o[(o[e+24>>2]|0)+(i<<2)>>2]|0;rP[o[(o[n>>2]|0)+8>>2]&31](n,_,o[e+8>>2]|0,o[e+16>>2]|0,o[e+20>>2]|0);n=o[e+20>>2]|0;if((o[(o[n+8>>2]|0)+8>>2]|0)==(o[(o[e+4>>2]|0)+8>>2]|0))o[n+8>>2]=t;else o[n+12>>2]=t;\np=_;return}function uk(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0;R=(n[e+28>>0]|0)!=0;T=R?i:t;R=R?t:i;j=o[e+12>>2]|0;if((j|0)<=0){w=1;return+w}S=(o[T+192>>2]|0)+28|0;a=+c[T+4>>2];g=+c[T+8>>2];v=+c[T+12>>2];C=o[T+16>>2]|0;w=+c[T+20>>2];f=+c[T+24>>2];p=+c[T+28>>2];t=o[T+32>>2]|0;l=+c[T+36>>2];u=+c[T+40>>2];b=+c[T+44>>2];i=o[T+48>>2]|0;d=+c[T+52>>2];h=+c[T+56>>2];m=+c[T+60>>2];y=o[T+64>>2]|0;k=o[T+284>>2]|0;s=1;I=0;do{O=o[S>>2]|0;V=+c[O+(I*80|0)>>2];E=+c[O+(I*80|0)+16>>2];G=+c[O+(I*80|0)+32>>2];F=+c[O+(I*80|0)+4>>2];A=+c[O+(I*80|0)+20>>2];B=+c[O+(I*80|0)+36>>2];W=+c[O+(I*80|0)+8>>2];P=+c[O+(I*80|0)+24>>2];M=+c[O+(I*80|0)+40>>2];x=+c[O+(I*80|0)+48>>2];L=+c[O+(I*80|0)+52>>2];D=+c[O+(I*80|0)+56>>2];o[T+284>>2]=k+1;c[T+4>>2]=a*V+g*E+v*G;c[T+8>>2]=a*F+g*A+v*B;c[T+12>>2]=a*W+g*P+v*M;c[T+16>>2]=0;c[T+20>>2]=w*V+f*E+p*G;c[T+24>>2]=w*F+f*A+p*B;c[T+28>>2]=w*W+f*P+p*M;c[T+32>>2]=0;c[T+36>>2]=l*V+u*E+b*G;c[T+40>>2]=l*F+u*A+b*B;c[T+44>>2]=l*W+u*P+b*M;c[T+48>>2]=0;c[T+52>>2]=d+(a*x+g*L+v*D);c[T+56>>2]=h+(w*x+f*L+p*D);c[T+60>>2]=m+(l*x+u*L+b*D);c[T+64>>2]=0;O=o[(o[e+20>>2]|0)+(I<<2)>>2]|0;D=+yP[o[(o[O>>2]|0)+12>>2]&15](O,T,R,r,_);s=D<s?D:s;k=(o[T+284>>2]|0)+1|0;o[T+284>>2]=k;c[T+4>>2]=a;c[T+8>>2]=g;c[T+12>>2]=v;o[T+16>>2]=C;c[T+20>>2]=w;c[T+24>>2]=f;c[T+28>>2]=p;o[T+32>>2]=t;c[T+36>>2]=l;c[T+40>>2]=u;c[T+44>>2]=b;o[T+48>>2]=i;c[T+52>>2]=d;c[T+56>>2]=h;c[T+60>>2]=m;o[T+64>>2]=y;I=I+1|0}while((I|0)!=(j|0));return+s}function bk(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;i=o[e+12>>2]|0;if((i|0)<=0)return;r=0;do{n=o[(o[e+20>>2]|0)+(r<<2)>>2]|0;if(n){aP[o[(o[n>>2]|0)+16>>2]&127](n,t);i=o[e+12>>2]|0}r=r+1|0}while((r|0)<(i|0));return}function dk(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;o[e+4>>2]=o[t>>2];o[e>>2]=3592;n[e+24>>0]=1;o[e+20>>2]=0;o[e+12>>2]=0;o[e+16>>2]=0;n[e+28>>0]=_&1;o[e+32>>2]=o[t+4>>2];n[e+36>>0]=0;o[e+40>>2]=o[(o[(_?r:i)+4>>2]|0)+72>>2];ck(e,i,r);return}function hk(e){e=e|0;var t=0,i=0,r=0,_=0,s=0;o[e>>2]=3656;t=o[e+44>>2]|0;i=o[t+8>>2]|0;if((i|0)>0){_=0;do{r=o[(o[t+16>>2]|0)+(_*12|0)+8>>2]|0;if(r|0){_P[o[o[r>>2]>>2]&255](r);s=o[e+4>>2]|0;aP[o[(o[s>>2]|0)+60>>2]&127](s,r)}_=_+1|0}while((_|0)!=(i|0));t=o[e+44>>2]|0}AD(t);t=o[e+44>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+44>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+60>>2]|0;if(!t){n[e+64>>0]=1;o[e+60>>2]=0;o[e+52>>2]=0;s=e+56|0;o[s>>2]=0;_k(e);return}if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+60>>2]=0;n[e+64>>0]=1;o[e+60>>2]=0;o[e+52>>2]=0;s=e+56|0;o[s>>2]=0;_k(e);return}function mk(e){e=e|0;hk(e);qa(e);return}function yk(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,X=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0,de=0;re=p;p=p+176|0;te=o[t+4>>2]|0;ie=o[i+4>>2]|0;m=o[te+68>>2]|0;y=o[ie+68>>2]|0;if(!((m|0)!=0&(y|0)!=0)){ak(e,t,i,r,_);p=re;return}if((o[te+72>>2]|0)==(o[e+68>>2]|0)?(o[ie+72>>2]|0)==(o[e+72>>2]|0):0)ee=e+44|0;else{s=o[e+44>>2]|0;a=o[s+8>>2]|0;if((a|0)>0){l=0;do{f=o[(o[s+16>>2]|0)+(l*12|0)+8>>2]|0;if(f|0){_P[o[o[f>>2]>>2]&255](f);ee=o[e+4>>2]|0;aP[o[(o[ee>>2]|0)+60>>2]&127](ee,f)}l=l+1|0}while((l|0)!=(a|0));s=o[e+44>>2]|0}AD(s);o[e+68>>2]=o[te+72>>2];o[e+72>>2]=o[ie+72>>2];ee=e+44|0}n[re+128+16>>0]=1;h=re+128+12|0;o[h>>2]=0;o[re+128+4>>2]=0;o[re+128+8>>2]=0;d=o[ee>>2]|0;s=o[d+8>>2]|0;if((s|0)>0){b=0;do{a=o[(o[d+16>>2]|0)+(b*12|0)+8>>2]|0;if(a){aP[o[(o[a>>2]|0)+16>>2]&127](a,re+128|0);s=o[re+128+4>>2]|0;if((s|0)>0){u=0;do{l=o[(o[h>>2]|0)+(u<<2)>>2]|0;if(o[l+748>>2]|0){o[_+4>>2]=l;s=o[l+740>>2]|0;a=o[(o[_+8>>2]|0)+8>>2]|0;f=o[(o[_+12>>2]|0)+8>>2]|0;if((s|0)==(a|0))lC(l,s+4|0,f+4|0);else lC(l,f+4|0,a+4|0);o[_+4>>2]=0;s=o[re+128+4>>2]|0}u=u+1|0}while((u|0)<(s|0))}if((s|0)<0){if((o[re+128+8>>2]|0)<0){a=o[h>>2]|0;if(a|0){if(n[re+128+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[h>>2]=0}n[re+128+16>>0]=1;o[h>>2]=0;o[re+128+8>>2]=0}do{o[(o[h>>2]|0)+(s<<2)>>2]=0;s=s+1|0}while((s|0)!=0)}o[re+128+4>>2]=0;s=o[d+8>>2]|0}b=b+1|0}while((b|0)<(s|0));s=o[h>>2]|0;if(s|0){if(n[re+128+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[h>>2]=0}}h=o[e+4>>2]|0;a=o[ee>>2]|0;f=o[e+32>>2]|0;o[re+128>>2]=3684;o[re+128+4>>2]=0;o[re+128+8>>2]=t;o[re+128+12>>2]=i;o[re+128+16>>2]=h;o[re+128+20>>2]=r;o[re+128+24>>2]=_;o[re+128+28>>2]=a;o[re+128+32>>2]=f;f=o[t+12>>2]|0;T=+c[f>>2];D=+c[f+16>>2];O=+c[f+32>>2];L=+c[f+4>>2];x=+c[f+20>>2];M=+c[f+36>>2];P=+c[f+8>>2];W=+c[f+24>>2];B=+c[f+40>>2];A=-+c[f+48>>2];F=-+c[f+52>>2];G=-+c[f+56>>2];f=o[i+12>>2]|0;E=+c[f>>2];V=+c[f+16>>2];X=+c[f+32>>2];H=+c[f+4>>2];Z=+c[f+20>>2];U=+c[f+36>>2];z=+c[f+8>>2];Y=+c[f+24>>2];K=+c[f+40>>2];Q=+c[f+48>>2];q=+c[f+52>>2];J=+c[f+56>>2];f=o[m>>2]|0;a=o[y>>2]|0;if((f|0)!=0&(a|0)!=0){o[5637]=(o[5637]|0)+1;s=Qa(1043)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}o[s>>2]=f;o[s+4>>2]=a;g=+N(+(T*E+D*V+O*X));v=+N(+(T*H+D*Z+O*U));C=+N(+(T*z+D*Y+O*K));w=+N(+(L*E+x*V+M*X));k=+N(+(L*H+x*Z+M*U));S=+N(+(L*z+x*Y+M*K));R=+N(+(P*E+W*V+B*X));j=+N(+(P*H+W*Z+B*U));I=+N(+(P*z+W*Y+B*K));m=1;f=128;l=128;a=124;while(1){h=m+-1|0;r=o[s+(h<<3)>>2]|0;_=o[s+(h<<3)+4>>2]|0;de=+c[_+16>>2];be=+c[_>>2];ue=+c[_+20>>2];le=+c[_+4>>2];pe=+c[_+24>>2];oe=+c[_+8>>2];fe=T*A+D*F+O*G+(T*Q+D*q+O*J)+((T*E+D*V+O*X)*((de+be)*.5)+(T*H+D*Z+O*U)*((ue+le)*.5)+(T*z+D*Y+O*K)*((pe+oe)*.5));ae=L*A+x*F+M*G+(L*Q+x*q+M*J)+((L*E+x*V+M*X)*((de+be)*.5)+(L*H+x*Z+M*U)*((ue+le)*.5)+(L*z+x*Y+M*K)*((pe+oe)*.5));_e=P*A+W*F+B*G+(P*Q+W*q+B*J)+((P*E+W*V+B*X)*((de+be)*.5)+(P*H+W*Z+B*U)*((ue+le)*.5)+(P*z+W*Y+B*K)*((pe+oe)*.5));ce=((de-be)*.5+0)*g+((ue-le)*.5+0)*v+((pe-oe)*.5+0)*C;se=((de-be)*.5+0)*w+((ue-le)*.5+0)*k+((pe-oe)*.5+0)*S;oe=((de-be)*.5+0)*R+((ue-le)*.5+0)*j+((pe-oe)*.5+0)*I;do if(((((+c[r>>2]<=ce+fe?+c[r+16>>2]>=fe-ce:0)?+c[r+4>>2]<=ae+se:0)?+c[r+20>>2]>=ae-se:0)?+c[r+8>>2]<=_e+oe:0)?+c[r+24>>2]>=_e-oe:0){if((h|0)>(a|0)){u=l<<1;do if((l|0)<(u|0)&(f|0)<(u|0)){do if(!l){a=0;$=54}else{o[5637]=(o[5637]|0)+1;a=Qa((l<<4|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}if((l|0)>0)f=0;else{$=54;break}do{b=s+(f<<3)|0;d=o[b+4>>2]|0;y=a+(f<<3)|0;o[y>>2]=o[b>>2];o[y+4>>2]=d;f=f+1|0}while((f|0)!=(l|0))}while(0);if(($|0)==54){$=0;if(!s){f=u;s=a;break}}o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);f=u;s=a}while(0);d=u;a=u+-4|0}else d=l;l=(o[_+40>>2]|0)!=0;if(!(o[r+40>>2]|0))if(l){u=o[_+36>>2]|0;o[s+(h<<3)>>2]=r;o[s+(h<<3)+4>>2]=u;u=o[_+40>>2]|0;o[s+(m<<3)>>2]=r;o[s+(m<<3)+4>>2]=u;u=m+1|0;l=d;break}else{EP[o[(o[re+128>>2]|0)+8>>2]&127](re+128|0,r,_);u=h;l=d;break}else{u=s+(h<<3)|0;b=o[r+36>>2]|0;if(l){l=o[_+36>>2]|0;o[u>>2]=b;o[s+(h<<3)+4>>2]=l;l=m+1|0;u=o[_+36>>2]|0;o[s+(m<<3)>>2]=o[r+40>>2];o[s+(m<<3)+4>>2]=u;u=m+2|0;y=o[_+40>>2]|0;o[s+(l<<3)>>2]=o[r+36>>2];o[s+(l<<3)+4>>2]=y;l=o[_+40>>2]|0;o[s+(u<<3)>>2]=o[r+40>>2];o[s+(u<<3)+4>>2]=l;u=m+3|0;l=d;break}else{o[u>>2]=b;o[s+(h<<3)+4>>2]=_;o[s+(m<<3)>>2]=o[r+40>>2];o[s+(m<<3)+4>>2]=_;u=m+1|0;l=d;break}}}else u=h;while(0);if(!u)break;else m=u}if(s|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}}b=o[ee>>2]|0;if((o[b+8>>2]|0)>0){d=0;do{s=o[b+16>>2]|0;a=o[s+(d*12|0)+8>>2]|0;do if(a|0){$=o[s+(d*12|0)>>2]|0;y=o[te+28>>2]|0;m=o[y+($*80|0)+64>>2]|0;_=o[t+12>>2]|0;de=+c[_>>2];V=+c[_+4>>2];E=+c[_+8>>2];le=+c[_+16>>2];fe=+c[_+20>>2];ae=+c[_+24>>2];pe=+c[_+32>>2];se=+c[_+36>>2];z=+c[_+40>>2];_e=+c[y+($*80|0)>>2];oe=+c[y+($*80|0)+16>>2];J=+c[y+($*80|0)+32>>2];q=+c[y+($*80|0)+4>>2];Q=+c[y+($*80|0)+20>>2];K=+c[y+($*80|0)+36>>2];ce=+c[y+($*80|0)+8>>2];Y=+c[y+($*80|0)+24>>2];U=+c[y+($*80|0)+40>>2];be=+c[y+($*80|0)+48>>2];ue=+c[y+($*80|0)+52>>2];X=+c[y+($*80|0)+56>>2];Z=+c[_+48>>2]+(de*be+V*ue+E*X);H=+c[_+52>>2]+(le*be+fe*ue+ae*X);X=+c[_+56>>2]+(pe*be+se*ue+z*X);c[re>>2]=de*_e+V*oe+E*J;c[re+4>>2]=de*q+V*Q+E*K;c[re+8>>2]=de*ce+V*Y+E*U;c[re+12>>2]=0;c[re+16>>2]=le*_e+fe*oe+ae*J;c[re+20>>2]=le*q+fe*Q+ae*K;c[re+24>>2]=le*ce+fe*Y+ae*U;c[re+28>>2]=0;c[re+32>>2]=pe*_e+se*oe+z*J;c[re+36>>2]=pe*q+se*Q+z*K;c[re+40>>2]=pe*ce+se*Y+z*U;c[re+44>>2]=0;c[re+48>>2]=Z;c[re+52>>2]=H;c[re+56>>2]=X;c[re+60>>2]=0;HP[o[(o[m>>2]|0)+8>>2]&127](m,re,re+112|0,re+96|0);m=o[(o[b+16>>2]|0)+(d*12|0)+4>>2]|0;_=o[ie+28>>2]|0;$=o[_+(m*80|0)+64>>2]|0;y=o[i+12>>2]|0;X=+c[y>>2];H=+c[y+4>>2];Z=+c[y+8>>2];U=+c[y+16>>2];z=+c[y+20>>2];Y=+c[y+24>>2];se=+c[y+32>>2];ce=+c[y+36>>2];pe=+c[y+40>>2];K=+c[_+(m*80|0)>>2];Q=+c[_+(m*80|0)+16>>2];q=+c[_+(m*80|0)+32>>2];J=+c[_+(m*80|0)+4>>2];oe=+c[_+(m*80|0)+20>>2];_e=+c[_+(m*80|0)+36>>2];ae=+c[_+(m*80|0)+8>>2];fe=+c[_+(m*80|0)+24>>2];le=+c[_+(m*80|0)+40>>2];E=+c[_+(m*80|0)+48>>2];V=+c[_+(m*80|0)+52>>2];de=+c[_+(m*80|0)+56>>2];ue=+c[y+48>>2]+(X*E+H*V+Z*de);be=+c[y+52>>2]+(U*E+z*V+Y*de);de=+c[y+56>>2]+(se*E+ce*V+pe*de);c[re>>2]=X*K+H*Q+Z*q;c[re+4>>2]=X*J+H*oe+Z*_e;c[re+8>>2]=X*ae+H*fe+Z*le;c[re+12>>2]=0;c[re+16>>2]=U*K+z*Q+Y*q;c[re+20>>2]=U*J+z*oe+Y*_e;c[re+24>>2]=U*ae+z*fe+Y*le;c[re+28>>2]=0;c[re+32>>2]=se*K+ce*Q+pe*q;c[re+36>>2]=se*J+ce*oe+pe*_e;c[re+40>>2]=se*ae+ce*fe+pe*le;c[re+44>>2]=0;c[re+48>>2]=ue;c[re+52>>2]=be;c[re+56>>2]=de;c[re+60>>2]=0;HP[o[(o[$>>2]|0)+8>>2]&127]($,re,re+80|0,re+64|0);if(!(+c[re+112>>2]>+c[re+64>>2])?!(+c[re+96>>2]<+c[re+80>>2]):0)s=1;else s=0;if(!(!(+c[re+112+8>>2]>+c[re+64+8>>2])?!(+c[re+96+8>>2]<+c[re+80+8>>2]):0))s=0;if(!(+c[re+112+4>>2]>+c[re+64+4>>2])?!(+c[re+96+4>>2]<+c[re+80+4>>2]|s^1):0)break;_P[o[o[a>>2]>>2]&255](a);u=o[e+4>>2]|0;aP[o[(o[u>>2]|0)+60>>2]&127](u,a);u=o[b+16>>2]|0;l=o[u+(d*12|0)>>2]|0;u=o[u+(d*12|0)+4>>2]|0;s=o[e+52>>2]|0;if((s|0)==(o[e+56>>2]|0)?(ne=s|0?s<<1:1,(s|0)<(ne|0)):0){if(!ne)f=0;else{o[5637]=(o[5637]|0)+1;s=Qa((ne*12|3)+16|0)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}f=s;s=o[e+52>>2]|0}if((s|0)>0){a=0;do{$=f+(a*12|0)|0;y=(o[e+60>>2]|0)+(a*12|0)|0;o[$>>2]=o[y>>2];o[$+4>>2]=o[y+4>>2];o[$+8>>2]=o[y+8>>2];a=a+1|0}while((a|0)!=(s|0))}s=o[e+60>>2]|0;if(s|0){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+60>>2]=0}n[e+64>>0]=1;o[e+60>>2]=f;o[e+56>>2]=ne;s=o[e+52>>2]|0}$=o[e+60>>2]|0;o[$+(s*12|0)>>2]=l;o[$+(s*12|0)+4>>2]=u;o[$+(s*12|0)+8>>2]=0;o[e+52>>2]=(o[e+52>>2]|0)+1}while(0);d=d+1|0}while((d|0)<(o[b+8>>2]|0));a=e+60|0;f=e+52|0}else{a=e+60|0;f=e+52|0}if((o[f>>2]|0)>0){s=0;do{t=o[ee>>2]|0;i=o[a>>2]|0;gP[o[(o[t>>2]|0)+8>>2]&63](t,o[i+(s*12|0)>>2]|0,o[i+(s*12|0)+4>>2]|0)|0;s=s+1|0}while((s|0)<(o[f>>2]|0))}s=o[a>>2]|0;if(s|0){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[a>>2]=0}n[e+64>>0]=1;o[a>>2]=0;o[f>>2]=0;o[e+56>>2]=0;p=re;return}function gk(e){e=e|0;qa(e);return}function vk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0;l=p;p=p+240|0;o[e+4>>2]=(o[e+4>>2]|0)+1;a=o[t+36>>2]|0;s=o[i+36>>2]|0;r=o[e+8>>2]|0;B=o[(o[r+4>>2]|0)+28>>2]|0;i=o[B+(a*80|0)+64>>2]|0;t=(o[(o[e+12>>2]|0)+4>>2]|0)+28|0;n=o[(o[t>>2]|0)+(s*80|0)+64>>2]|0;r=o[r+12>>2]|0;u=+c[r>>2];P=+c[r+4>>2];W=+c[r+8>>2];h=+c[r+16>>2];y=+c[r+20>>2];v=+c[r+24>>2];m=+c[r+32>>2];C=+c[r+36>>2];D=+c[r+40>>2];w=+c[B+(a*80|0)>>2];k=+c[B+(a*80|0)+16>>2];S=+c[B+(a*80|0)+32>>2];R=+c[B+(a*80|0)+4>>2];j=+c[B+(a*80|0)+20>>2];I=+c[B+(a*80|0)+36>>2];g=+c[B+(a*80|0)+8>>2];T=+c[B+(a*80|0)+24>>2];O=+c[B+(a*80|0)+40>>2];b=+c[B+(a*80|0)+48>>2];d=+c[B+(a*80|0)+52>>2];M=+c[B+(a*80|0)+56>>2];L=+c[r+48>>2]+(u*b+P*d+W*M);x=+c[r+52>>2]+(h*b+y*d+v*M);M=+c[r+56>>2]+(m*b+C*d+D*M);c[l+176>>2]=u*w+P*k+W*S;c[l+176+4>>2]=u*R+P*j+W*I;c[l+176+8>>2]=u*g+P*T+W*O;c[l+176+12>>2]=0;c[l+176+16>>2]=h*w+y*k+v*S;c[l+176+20>>2]=h*R+y*j+v*I;c[l+176+24>>2]=h*g+y*T+v*O;c[l+176+28>>2]=0;c[l+176+32>>2]=m*w+C*k+D*S;c[l+176+36>>2]=m*R+C*j+D*I;c[l+176+40>>2]=m*g+C*T+D*O;c[l+176+44>>2]=0;c[l+176+48>>2]=L;c[l+176+52>>2]=x;c[l+176+56>>2]=M;c[l+176+60>>2]=0;r=o[(o[e+12>>2]|0)+12>>2]|0;M=+c[r>>2];x=+c[r+4>>2];L=+c[r+8>>2];O=+c[r+16>>2];D=+c[r+20>>2];T=+c[r+24>>2];C=+c[r+32>>2];g=+c[r+36>>2];m=+c[r+40>>2];t=o[t>>2]|0;I=+c[t+(s*80|0)>>2];j=+c[t+(s*80|0)+16>>2];R=+c[t+(s*80|0)+32>>2];S=+c[t+(s*80|0)+4>>2];k=+c[t+(s*80|0)+20>>2];w=+c[t+(s*80|0)+36>>2];v=+c[t+(s*80|0)+8>>2];y=+c[t+(s*80|0)+24>>2];h=+c[t+(s*80|0)+40>>2];W=+c[t+(s*80|0)+48>>2];P=+c[t+(s*80|0)+52>>2];u=+c[t+(s*80|0)+56>>2];d=+c[r+48>>2]+(M*W+x*P+L*u);b=+c[r+52>>2]+(O*W+D*P+T*u);u=+c[r+56>>2]+(C*W+g*P+m*u);c[l+112>>2]=M*I+x*j+L*R;c[l+112+4>>2]=M*S+x*k+L*w;c[l+112+8>>2]=M*v+x*y+L*h;c[l+112+12>>2]=0;c[l+112+16>>2]=O*I+D*j+T*R;c[l+112+20>>2]=O*S+D*k+T*w;c[l+112+24>>2]=O*v+D*y+T*h;c[l+112+28>>2]=0;c[l+112+32>>2]=C*I+g*j+m*R;c[l+112+36>>2]=C*S+g*k+m*w;c[l+112+40>>2]=C*v+g*y+m*h;c[l+112+44>>2]=0;c[l+112+48>>2]=d;c[l+112+52>>2]=b;c[l+112+56>>2]=u;c[l+112+60>>2]=0;HP[o[(o[i>>2]|0)+8>>2]&127](i,l+176|0,l+96|0,l+80|0);HP[o[(o[n>>2]|0)+8>>2]&127](n,l+112|0,l+64|0,l+48|0);if(!(+c[l+96>>2]>+c[l+48>>2])?!(+c[l+80>>2]<+c[l+64>>2]):0)t=1;else t=0;if(!(!(+c[l+96+8>>2]>+c[l+48+8>>2])?!(+c[l+80+8>>2]<+c[l+64+8>>2]):0))t=0;if(+c[l+96+4>>2]>+c[l+48+4>>2]){p=l;return}if(+c[l+80+4>>2]<+c[l+64+4>>2]|t^1){p=l;return}r=o[e+8>>2]|0;t=o[r+8>>2]|0;o[l+24>>2]=r;o[l+24+4>>2]=i;o[l+24+8>>2]=t;o[l+24+12>>2]=l+176;o[l+24+16>>2]=-1;o[l+24+20>>2]=a;t=o[e+12>>2]|0;r=o[t+8>>2]|0;o[l>>2]=t;o[l+4>>2]=n;o[l+8>>2]=r;o[l+12>>2]=l+112;o[l+16>>2]=-1;o[l+20>>2]=s;r=o[e+28>>2]|0;o[4992]=(o[4992]|0)+1;t=((s<<16|a)+~((s<<16|a)<<15)>>10^(s<<16|a)+~((s<<16|a)<<15))*9|0;t=(o[r+12>>2]|0)+-1&((t>>6^t)+~((t>>6^t)<<11)>>16^(t>>6^t)+~((t>>6^t)<<11));e:do if((t|0)<(o[r+28>>2]|0)?(_=o[(o[r+36>>2]|0)+(t<<2)>>2]|0,(_|0)!=-1):0){n=o[r+16>>2]|0;t=_;while(1){i=n+(t*12|0)|0;if((o[i>>2]|0)==(a|0)?(o[n+(t*12|0)+4>>2]|0)==(s|0):0)break;t=o[(o[r+56>>2]|0)+(t<<2)>>2]|0;if((t|0)==-1){f=16;break e}}if(i)t=o[n+(t*12|0)+8>>2]|0;else f=16}else f=16;while(0);if((f|0)==16){t=o[e+16>>2]|0;t=bP[o[(o[t>>2]|0)+8>>2]&31](t,l+24|0,l,o[e+32>>2]|0)|0;B=o[e+28>>2]|0;o[(gP[o[(o[B>>2]|0)+12>>2]&63](B,a,s)|0)+8>>2]=t}B=o[e+24>>2]|0;_=o[B+8>>2]|0;f=o[B+12>>2]|0;o[B+8>>2]=l+24;o[B+12>>2]=l;EP[o[(o[B>>2]|0)+8>>2]&127](B,-1,a);B=o[e+24>>2]|0;EP[o[(o[B>>2]|0)+12>>2]&127](B,-1,s);rP[o[(o[t>>2]|0)+8>>2]&31](t,l+24|0,l,o[e+20>>2]|0,o[e+24>>2]|0);B=o[e+24>>2]|0;o[B+8>>2]=_;o[B+12>>2]=f;p=l;return}function Ck(e,t){e=e|0;t=t|0;return}function wk(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 0}function kk(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;r=o[e+44>>2]|0;e=o[r+8>>2]|0;if((e|0)<=0)return;n=0;do{i=o[(o[r+16>>2]|0)+(n*12|0)+8>>2]|0;if(i){aP[o[(o[i>>2]|0)+16>>2]&127](i,t);e=o[r+8>>2]|0}n=n+1|0}while((n|0)<(e|0));return}function Sk(e){e=e|0;var t=0;o[e>>2]=3720;o[e+12>>2]=3748;t=o[e+60>>2]|0;aP[o[(o[t>>2]|0)+20>>2]&127](t,o[e+76>>2]|0);t=o[e+60>>2]|0;aP[o[(o[t>>2]|0)+16>>2]&127](t,o[e+76>>2]|0);return}function Rk(e){e=e|0;var t=0;o[e>>2]=3748;t=o[e+48>>2]|0;aP[o[(o[t>>2]|0)+20>>2]&127](t,o[e+64>>2]|0);t=o[e+48>>2]|0;aP[o[(o[t>>2]|0)+16>>2]&127](t,o[e+64>>2]|0);return}function jk(e){e=e|0;var t=0;o[e>>2]=3748;t=o[e+48>>2]|0;aP[o[(o[t>>2]|0)+20>>2]&127](t,o[e+64>>2]|0);t=o[e+48>>2]|0;aP[o[(o[t>>2]|0)+16>>2]&127](t,o[e+64>>2]|0);qa(e);return}function Ik(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;b=p;p=p+144|0;_=+c[t>>2];s=+c[t+16>>2];d=_<s?_:s;a=+c[t+32>>2];if((d<a?d:a)>+c[e+28>>2]){p=b;return}l=_>s?t:t+16|0;if(+c[(+c[l>>2]>a?l:t+32|0)>>2]<+c[e+12>>2]){p=b;return}_=+c[t+8>>2];s=+c[t+24>>2];d=_<s?_:s;a=+c[t+40>>2];if((d<a?d:a)>+c[e+36>>2]){p=b;return}l=_>s?t+8|0:t+24|0;if(+c[(+c[l>>2]>a?l:t+40|0)>>2]<+c[e+20>>2]){p=b;return}_=+c[t+4>>2];s=+c[t+20>>2];d=_<s?_:s;a=+c[t+36>>2];if((d<a?d:a)>+c[e+32>>2]){p=b;return}l=_>s?t+4|0:t+20|0;if(+c[(+c[l>>2]>a?l:t+36|0)>>2]<+c[e+16>>2]){p=b;return}l=o[e+48>>2]|0;r=o[e+4>>2]|0;if((o[(o[r+4>>2]|0)+4>>2]|0)>=20){p=b;return}o[b+24+8>>2]=0;o[b+24+12>>2]=-1;o[b+24+16>>2]=1065353216;o[b+24+20>>2]=1065353216;o[b+24+24>>2]=1065353216;c[b+24+28>>2]=0;o[b+24+56>>2]=0;o[b+24>>2]=3768;o[b+24+4>>2]=1;o[b+24+60>>2]=o[t>>2];o[b+24+60+4>>2]=o[t+4>>2];o[b+24+60+8>>2]=o[t+8>>2];o[b+24+60+12>>2]=o[t+12>>2];o[b+24+76>>2]=o[t+16>>2];o[b+24+76+4>>2]=o[t+16+4>>2];o[b+24+76+8>>2]=o[t+16+8>>2];o[b+24+76+12>>2]=o[t+16+12>>2];o[b+24+92>>2]=o[t+32>>2];o[b+24+92+4>>2]=o[t+32+4>>2];o[b+24+92+8>>2]=o[t+32+8>>2];o[b+24+92+12>>2]=o[t+32+12>>2];o[b+24+48>>2]=o[e+56>>2];h=o[e+8>>2]|0;t=o[h+8>>2]|0;f=o[h+12>>2]|0;o[b>>2]=h;o[b+4>>2]=b+24;o[b+8>>2]=t;o[b+12>>2]=f;o[b+16>>2]=i;o[b+20>>2]=n;f=bP[o[(o[l>>2]|0)+8>>2]&31](l,r,b,o[e+64>>2]|0)|0;r=o[e+44>>2]|0;t=o[r+8>>2]|0;if((o[t+8>>2]|0)==(o[(o[e+8>>2]|0)+8>>2]|0)){o[r+8>>2]=b;EP[o[(o[r>>2]|0)+8>>2]&127](r,i,n)}else{t=o[r+12>>2]|0;o[r+12>>2]=b;EP[o[(o[r>>2]|0)+12>>2]&127](r,i,n)}rP[o[(o[f>>2]|0)+8>>2]&31](f,o[e+4>>2]|0,b,o[e+52>>2]|0,o[e+44>>2]|0);r=o[e+44>>2]|0;if((o[(o[r+8>>2]|0)+8>>2]|0)==(o[(o[e+8>>2]|0)+8>>2]|0))o[r+8>>2]=t;else o[r+12>>2]=t;_P[o[o[f>>2]>>2]&255](f);aP[o[(o[l>>2]|0)+60>>2]&127](l,f);o[b+24>>2]=6248;r=o[b+24+56>>2]|0;if(r|0?(_P[o[o[r>>2]>>2]&255](r),u=o[b+24+56>>2]|0,u|0):0){o[5638]=(o[5638]|0)+1;qa(o[u+-4>>2]|0)}p=b;return}function Tk(e){e=e|0;var t=0,i=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+56>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Dk(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+80>>2]&127](e,t,i,n);return}function Ok(e){e=e|0;return e+16|0}function Lk(e,t,i){e=e|0;t=+t;i=i|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;return}function xk(e){e=e|0;return 11211}function Mk(e,t){e=e|0;t=t|0;o[e>>2]=1065353216;o[e+4>>2]=1065353216;o[e+8>>2]=1065353216;c[e+12>>2]=0;return}function Pk(e,t){e=e|0;t=+t;c[e+48>>2]=t;return}function Wk(e){e=e|0;return+ +c[e+48>>2]}function Bk(e){e=e|0;return 52}function Ak(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+28>>2]=o[e+32>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+12>>2]=o[e+16>>2];o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+44>>2]=o[e+48>>2];return 11220}function Fk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;a=+c[i>>2];s=+c[i+4>>2];n=+c[i+8>>2];r=a*+c[t+60>>2]+s*+c[t+64>>2]+n*+c[t+68>>2];_=a*+c[t+76>>2]+s*+c[t+80>>2]+n*+c[t+84>>2];n=a*+c[t+92>>2]+s*+c[t+96>>2]+n*+c[t+100>>2];t=t+60+((r<_?_<n?2:1:r<n?2:0)<<4)|0;o[e>>2]=o[t>>2];o[e+4>>2]=o[t+4>>2];o[e+8>>2]=o[t+8>>2];o[e+12>>2]=o[t+12>>2];return}function Gk(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0;if((n|0)<=0)return;r=0;do{u=+c[t+(r<<4)>>2];l=+c[t+(r<<4)+4>>2];a=+c[t+(r<<4)+8>>2];f=u*+c[e+60>>2]+l*+c[e+64>>2]+a*+c[e+68>>2];p=u*+c[e+76>>2]+l*+c[e+80>>2]+a*+c[e+84>>2];a=u*+c[e+92>>2]+l*+c[e+96>>2]+a*+c[e+100>>2];_=i+(r<<4)|0;s=e+60+((f<p?p<a?2:1:f<a?2:0)<<4)|0;o[_>>2]=o[s>>2];o[_+4>>2]=o[s+4>>2];o[_+8>>2]=o[s+8>>2];o[_+12>>2]=o[s+12>>2];r=r+1|0}while((r|0)!=(n|0));return}function Ek(e){e=e|0;return 2}function Vk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0,f=0;_=+c[e+60>>2];a=+c[e+76>>2]-_;s=+c[e+64>>2];f=+c[e+80>>2]-s;n=+c[e+68>>2];o=+c[e+84>>2]-n;_=+c[e+92>>2]-_;s=+c[e+96>>2]-s;n=+c[e+100>>2]-n;c[i+12>>2]=0;r=1/+X(+((a*s-f*_)*(a*s-f*_)+((f*n-o*s)*(f*n-o*s)+(o*_-a*n)*(o*_-a*n))));c[i>>2]=(f*n-o*s)*r;c[i+4>>2]=(o*_-a*n)*r;c[i+8>>2]=(a*s-f*_)*r;if(!t)return;c[i>>2]=-((f*n-o*s)*r);c[i+4>>2]=-((o*_-a*n)*r);c[i+8>>2]=-((a*s-f*_)*r);return}function Nk(e){e=e|0;return 3}function Xk(e){e=e|0;return 3}function Hk(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;EP[o[(o[e>>2]|0)+108>>2]&127](e,t,i);EP[o[(o[e>>2]|0)+108>>2]&127](e,(t+1|0)%3|0,n);return}function Zk(e,t,i){e=e|0;t=t|0;i=i|0;o[i>>2]=o[e+60+(t<<4)>>2];o[i+4>>2]=o[e+60+(t<<4)+4>>2];o[i+8>>2]=o[e+60+(t<<4)+8>>2];o[i+12>>2]=o[e+60+(t<<4)+12>>2];return}function Uk(e){e=e|0;return 1}function zk(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+124>>2]&127](e,n,t,i);return}function Yk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,a=0,l=0,u=0,b=0,d=0,h=0,m=0;m=p;p=p+80|0;b=o[e+4>>2]|0;TP[o[(o[b>>2]|0)+16>>2]&3](b,m+28|0,m+24|0,m+20|0,m+16|0,m+12|0,m+8|0,m+4|0,m,t);b=(o[m+12>>2]|0)+(te(o[m+8>>2]|0,i)|0)|0;h=o[e+4>>2]|0;d=(o[m+20>>2]|0)==0;u=o[m+28>>2]|0;if((o[m>>2]|0)==3){l=o[m+16>>2]|0;a=u+(te(l,s[b+4>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+32>>2]=n;c[m+32+36>>2]=_;c[m+32+40>>2]=r;c[m+32+44>>2]=0;a=u+(te(l,s[b+2>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+16>>2]=n;c[m+32+20>>2]=_;c[m+32+24>>2]=r;c[m+32+28>>2]=0;a=u+(te(l,s[b>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32>>2]=n;c[m+32+4>>2]=_;c[m+32+8>>2]=r;c[m+32+12>>2]=0;h=e+8|0;h=o[h>>2]|0;d=o[h>>2]|0;d=d+8|0;d=o[d>>2]|0;HP[d&127](h,m+32|0,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=m;return}else{l=o[m+16>>2]|0;a=u+(te(l,o[b+8>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+32>>2]=n;c[m+32+36>>2]=_;c[m+32+40>>2]=r;c[m+32+44>>2]=0;a=u+(te(l,o[b+4>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+16>>2]=n;c[m+32+20>>2]=_;c[m+32+24>>2]=r;c[m+32+28>>2]=0;a=u+(te(l,o[b>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32>>2]=n;c[m+32+4>>2]=_;c[m+32+8>>2]=r;c[m+32+12>>2]=0;h=e+8|0;h=o[h>>2]|0;d=o[h>>2]|0;d=d+8|0;d=o[d>>2]|0;HP[d&127](h,m+32|0,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=m;return}}function Kk(e){e=e|0;qa(e);return}function Qk(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,a=0,l=0,u=0,b=0,d=0,h=0,m=0;m=p;p=p+80|0;b=o[e+4>>2]|0;TP[o[(o[b>>2]|0)+16>>2]&3](b,m+28|0,m+24|0,m+20|0,m+16|0,m+12|0,m+8|0,m+4|0,m,t);b=(o[m+12>>2]|0)+(te(o[m+8>>2]|0,i)|0)|0;h=o[e+4>>2]|0;d=(o[m+20>>2]|0)==0;u=o[m+28>>2]|0;if((o[m>>2]|0)==3){l=o[m+16>>2]|0;a=u+(te(l,s[b+4>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+32>>2]=n;c[m+32+36>>2]=_;c[m+32+40>>2]=r;c[m+32+44>>2]=0;a=u+(te(l,s[b+2>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+16>>2]=n;c[m+32+20>>2]=_;c[m+32+24>>2]=r;c[m+32+28>>2]=0;a=u+(te(l,s[b>>1]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32>>2]=n;c[m+32+4>>2]=_;c[m+32+8>>2]=r;c[m+32+12>>2]=0;h=e+8|0;h=o[h>>2]|0;d=o[h>>2]|0;d=d+8|0;d=o[d>>2]|0;HP[d&127](h,m+32|0,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=m;return}else{l=o[m+16>>2]|0;a=u+(te(l,o[b+8>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+32>>2]=n;c[m+32+36>>2]=_;c[m+32+40>>2]=r;c[m+32+44>>2]=0;a=u+(te(l,o[b+4>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32+16>>2]=n;c[m+32+20>>2]=_;c[m+32+24>>2]=r;c[m+32+28>>2]=0;a=u+(te(l,o[b>>2]|0)|0)|0;if(d){r=+c[a+8>>2]*+c[h+12>>2];_=+c[a+4>>2]*+c[h+8>>2];n=+c[a>>2]*+c[h+4>>2]}else{r=+f[a+16>>3]*+c[h+12>>2];_=+f[a+8>>3]*+c[h+8>>2];n=+f[a>>3]*+c[h+4>>2]}c[m+32>>2]=n;c[m+32+4>>2]=_;c[m+32+8>>2]=r;c[m+32+12>>2]=0;h=e+8|0;h=o[h>>2]|0;d=o[h>>2]|0;d=d+8|0;d=o[d>>2]|0;HP[d&127](h,m+32|0,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=m;return}}function qk(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Jk(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;r=p;p=p+16|0;S=o[e+56>>2]|0;R=o[e+32+(((S+2|0)%3|0)<<2)>>2]|0;o[r>>2]=R;o[r+4>>2]=R;o[r+8>>2]=R;c[r+12>>2]=0;c[r+(S<<2)>>2]=(o[u>>2]=R,+c[u>>2])+ +c[e+32+(S<<2)>>2];a=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);b=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=a+ +c[r>>2];c[r>>2]=a;_=_+ +c[r+4>>2];c[r+4>>2]=_;b=b+ +c[r+8>>2];C=+N(+ +c[t>>2]);v=+N(+ +c[t+4>>2]);w=+N(+ +c[t+8>>2]);m=+N(+ +c[t+16>>2]);h=+N(+ +c[t+20>>2]);y=+N(+ +c[t+24>>2]);f=+N(+ +c[t+32>>2]);s=+N(+ +c[t+36>>2]);l=+N(+ +c[t+40>>2]);k=+c[t+48>>2];g=+c[t+52>>2];d=+c[t+56>>2];c[i>>2]=k-(b*w+(C*a+v*_));c[i+4>>2]=g-(b*y+(m*a+h*_));c[i+8>>2]=d-(b*l+(f*a+s*_));c[i+12>>2]=0;c[n>>2]=k+(b*w+(C*a+v*_));c[n+4>>2]=g+(b*y+(m*a+h*_));c[n+8>>2]=d+(b*l+(f*a+s*_));c[n+12>>2]=0;p=r;return}function $k(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;f=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=(f+ +c[e+32>>2])/+c[e+16>>2];a=(_+ +c[e+36>>2])/+c[e+20>>2];r=(i+ +c[e+40>>2])/+c[e+24>>2];p=+N(+ +c[t>>2]);s=+N(+ +c[t+4>>2]);n=+N(+ +c[t+8>>2]);c[e+16>>2]=p;c[e+20>>2]=s;c[e+24>>2]=n;c[e+28>>2]=0;c[e+32>>2]=l*p-f;c[e+36>>2]=a*s-_;c[e+40>>2]=r*n-i;c[e+44>>2]=0;return}function eS(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;n=p;p=p+16|0;a=o[e+56>>2]|0;f=o[e+32+(((a+2|0)%3|0)<<2)>>2]|0;o[n>>2]=f;o[n+4>>2]=f;o[n+8>>2]=f;c[n+12>>2]=0;c[n+(a<<2)>>2]=+c[e+32+(a<<2)>>2]+ +c[n+(a<<2)>>2];_=(+c[n>>2]+.03999999910593033)*2;r=(+c[n+4>>2]+.03999999910593033)*2;s=(+c[n+8>>2]+.03999999910593033)*2;c[i>>2]=t*.0833333283662796*(r*r+s*s);c[i+4>>2]=t*.0833333283662796*(_*_+s*s);c[i+8>>2]=t*.0833333283662796*(_*_+r*r);p=n;return}function tS(e){e=e|0;return 13096}function iS(e,t){e=e|0;t=t|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;c[e+(o[t+56>>2]<<2)>>2]=1;return}function nS(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0,s=0;_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);n=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=_+ +c[e+32>>2];n=n+ +c[e+36>>2];s=s+ +c[e+40>>2];c[e+48>>2]=t;r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);t=s-+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[e+32>>2]=_-r;c[e+36>>2]=n-i;c[e+40>>2]=t;c[e+44>>2]=0;return}function rS(e){e=e|0;return 60}function oS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+28>>2]=o[e+32>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+12>>2]=o[e+16>>2];o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+44>>2]=o[e+48>>2];o[t+52>>2]=o[e+56>>2];return 13109}function _S(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;h=p;p=p+16|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;n=+c[i>>2];r=+c[i+4>>2];_=+c[i+8>>2];if(n*n+r*r+_*_<9999999747378752e-20){d=1;b=0;u=0}else{u=1/+X(+(n*n+r*r+_*_));d=n*u;b=r*u;u=_*u}i=o[t+56>>2]|0;l=+c[t+32+(((i+2|0)%3|0)<<2)>>2];o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0;o[h+(i<<2)>>2]=o[t+32+(i<<2)>>2];a=d*l;f=b*l;l=u*l;n=a+ +c[h>>2];r=f+ +c[h+4>>2];s=l+ +c[h+8>>2];_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);n=n-d*_;r=r-b*_;_=s-u*_;s=u*_+(d*n+b*r);if(s>-0xde0b6b000000000){c[e>>2]=n;c[e+4>>2]=r;c[e+8>>2]=_;c[e+12>>2]=0}else s=-0xde0b6b000000000;o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0;i=o[t+56>>2]|0;c[h+(i<<2)>>2]=-+c[t+32+(i<<2)>>2];n=a+ +c[h>>2];r=f+ +c[h+4>>2];l=l+ +c[h+8>>2];_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);n=n-d*_;r=r-b*_;_=l-u*_;if(!(u*_+(d*n+b*r)>s)){p=h;return}c[e>>2]=n;c[e+4>>2]=r;c[e+8>>2]=_;c[e+12>>2]=0;p=h;return}function sS(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0;k=p;p=p+16|0;r=o[e+56>>2]|0;w=+c[e+32+(((r+2|0)%3|0)<<2)>>2];if((n|0)<=0){p=k;return}_=0;while(1){o[k>>2]=0;o[k+4>>2]=0;o[k+8>>2]=0;o[k+12>>2]=0;o[k+(r<<2)>>2]=o[e+32+(r<<2)>>2];r=t+(_<<4)|0;v=t+(_<<4)+4|0;C=t+(_<<4)+8|0;s=w*+c[r>>2]+ +c[k>>2];a=w*+c[v>>2]+ +c[k+4>>2];f=w*+c[C>>2]+ +c[k+8>>2];l=+wP[o[(o[e>>2]|0)+48>>2]&15](e);u=+c[r>>2];b=+c[v>>2];d=+c[C>>2];if(u*(s-l*u)+b*(a-l*b)+d*(f-l*d)>-0xde0b6b000000000){c[i+(_<<4)>>2]=s-l*u;c[i+(_<<4)+4>>2]=a-l*b;c[i+(_<<4)+8>>2]=f-l*d;c[i+(_<<4)+12>>2]=0;h=+c[r>>2];y=+c[v>>2];g=+c[C>>2];m=u*(s-l*u)+b*(a-l*b)+d*(f-l*d)}else{h=u;y=b;g=d;m=-0xde0b6b000000000}o[k>>2]=0;o[k+4>>2]=0;o[k+8>>2]=0;o[k+12>>2]=0;S=o[e+56>>2]|0;c[k+(S<<2)>>2]=-+c[e+32+(S<<2)>>2];d=w*h+ +c[k>>2];b=w*y+ +c[k+4>>2];l=w*g+ +c[k+8>>2];u=+wP[o[(o[e>>2]|0)+48>>2]&15](e);f=+c[r>>2];a=+c[v>>2];s=+c[C>>2];if(f*(d-u*f)+a*(b-u*a)+s*(l-u*s)>m){c[i+(_<<4)>>2]=d-u*f;c[i+(_<<4)+4>>2]=b-u*a;c[i+(_<<4)+8>>2]=l-u*s;c[i+(_<<4)+12>>2]=0}_=_+1|0;if((_|0)==(n|0))break;r=o[e+56>>2]|0}p=k;return}function aS(e){e=e|0;return 0}function cS(e,t,i){e=e|0;t=t|0;i=i|0;return}function fS(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function pS(e){e=e|0;return 13146}function lS(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function uS(e){e=e|0;return 13173}function bS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0;n=p;p=p+96|0;o[n+32>>2]=1065353216;o[n+32+4>>2]=0;o[n+32+4+4>>2]=0;o[n+32+4+8>>2]=0;o[n+32+4+12>>2]=0;o[n+32+20>>2]=1065353216;o[n+32+24>>2]=0;o[n+32+24+4>>2]=0;o[n+32+24+8>>2]=0;o[n+32+24+12>>2]=0;o[n+32+40>>2]=1065353216;u=n+32+44|0;o[u>>2]=0;o[u+4>>2]=0;o[u+8>>2]=0;o[u+12>>2]=0;o[u+16>>2]=0;HP[o[(o[e>>2]|0)+8>>2]&127](e,n+32|0,n+16|0,n);f=+c[n>>2];l=+c[n+16>>2];s=+c[n+4>>2];a=+c[n+16+4>>2];r=+c[n+8>>2];_=+c[n+16+8>>2];c[i>>2]=+X(+((f-l)*(f-l)+(s-a)*(s-a)+(r-_)*(r-_)))*.5;c[t>>2]=(l+f)*.5;c[t+4>>2]=(a+s)*.5;c[t+8>>2]=(_+r)*.5;c[t+12>>2]=0;p=n;return}function dS(e){e=e|0;var t=0,i=0,n=0,r=0;t=p;p=p+32|0;EP[o[(o[e>>2]|0)+12>>2]&127](e,t+8|0,t);r=+c[t+8>>2];n=+c[t+8+4>>2];i=+c[t+8+8>>2];i=+X(+(r*r+n*n+i*i));p=t;return+(i+ +c[t>>2])}function hS(e,t){e=e|0;t=+t;return+(+wP[o[(o[e>>2]|0)+16>>2]&15](e)*t)}function mS(e){e=e|0;return 12}function yS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];return 13201}function gS(e,t){e=e|0;t=t|0;var i=0,n=0;n=fP[o[(o[e>>2]|0)+52>>2]&127](e)|0;n=gP[o[(o[t>>2]|0)+16>>2]&63](t,n,1)|0;i=gP[o[(o[e>>2]|0)+56>>2]&63](e,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,i,1346455635,e);return}function vS(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;var s=0,a=0,f=0,p=0,l=0,b=0,d=0,h=0;HP[o[(o[e>>2]|0)+8>>2]&127](e,t,r,_);f=o[_>>2]|0;b=o[_+4>>2]|0;s=o[_+8>>2]|0;l=o[r>>2]|0;a=o[r+4>>2]|0;t=o[r+8>>2]|0;p=+c[i>>2];d=+c[i+4>>2];h=+c[i+8>>2];if(p>0)f=(c[u>>2]=(o[u>>2]=f,+c[u>>2])+p,o[u>>2]|0);else l=(c[u>>2]=(o[u>>2]=l,+c[u>>2])+p,o[u>>2]|0);if(d>0)i=(c[u>>2]=(o[u>>2]=b,+c[u>>2])+d,o[u>>2]|0);else{i=b;a=(c[u>>2]=(o[u>>2]=a,+c[u>>2])+d,o[u>>2]|0)}if(h>0)s=(c[u>>2]=(o[u>>2]=s,+c[u>>2])+h,o[u>>2]|0);else t=(c[u>>2]=(o[u>>2]=t,+c[u>>2])+h,o[u>>2]|0);p=+c[n>>2];d=+c[n+4>>2];h=+c[n+8>>2];h=+X(+(p*p+d*d+h*h));h=h*+wP[o[(o[e>>2]|0)+16>>2]&15](e);o[r>>2]=l;o[r+4>>2]=a;o[r+8>>2]=t;c[r+12>>2]=0;o[_>>2]=f;o[_+4>>2]=i;o[_+8>>2]=s;c[_+12>>2]=0;c[r>>2]=+c[r>>2]-h;c[r+4>>2]=+c[r+4>>2]-h;c[r+8>>2]=+c[r+8>>2]-h;c[_>>2]=h+ +c[_>>2];c[_+4>>2]=h+ +c[_+4>>2];c[_+8>>2]=h+ +c[_+8>>2];return}function CS(e){e=e|0;var t=0,i=0;o[e>>2]=5176;t=o[e+68>>2]|0;if(t|0?(BL(t),i=o[e+68>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}t=o[e+28>>2]|0;if(!t){n[e+32>>0]=1;o[e+28>>2]=0;o[e+20>>2]=0;e=e+24|0;o[e>>2]=0;return}if(n[e+32>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+28>>2]=0;n[e+32>>0]=1;o[e+28>>2]=0;o[e+20>>2]=0;e=e+24|0;o[e>>2]=0;return}function wS(e){e=e|0;CS(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function kS(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0;\nM=+c[e+52>>2];R=+c[e+36>>2];x=+c[e+56>>2];k=+c[e+40>>2];O=+c[e+60>>2];C=+c[e+44>>2];L=(o[e+20>>2]|0)==0;l=+wP[o[(o[e>>2]|0)+48>>2]&15](e);f=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=(L?0:(M-R)*.5)+l;f=(L?0:(x-k)*.5)+f;s=(L?0:(O-C)*.5)+s;D=+c[t>>2];v=+N(+D);T=+c[t+4>>2];g=+N(+T);m=+c[t+8>>2];y=+N(+m);I=+c[t+16>>2];h=+N(+I);j=+c[t+20>>2];d=+N(+j);u=+c[t+24>>2];b=+N(+u);S=+c[t+32>>2];p=+N(+S);w=+c[t+36>>2];a=+N(+w);r=+c[t+40>>2];_=+N(+r);R=L?0:(M+R)*.5;k=L?0:(x+k)*.5;C=L?0:(O+C)*.5;m=R*D+k*T+C*m+ +c[t+48>>2];u=R*I+k*j+C*u+ +c[t+52>>2];r=R*S+k*w+C*r+ +c[t+56>>2];c[i>>2]=m-(l*v+f*g+s*y);c[i+4>>2]=u-(l*h+f*d+s*b);c[i+8>>2]=r-(l*p+f*a+s*_);c[i+12>>2]=0;c[n>>2]=l*v+f*g+s*y+m;c[n+4>>2]=l*h+f*d+s*b+u;c[n+8>>2]=l*p+f*a+s*_+r;c[n+12>>2]=0;return}function SS(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;d=p;p=p+144|0;if((o[e+20>>2]|0)<=0){b=e+80|0;o[b>>2]=o[t>>2];o[b+4>>2]=o[t+4>>2];o[b+8>>2]=o[t+8>>2];o[b+12>>2]=o[t+12>>2];t=o[e>>2]|0;t=t+68|0;t=o[t>>2]|0;_P[t&255](e);p=d;return}s=d+16+16|0;a=d+16+32|0;f=d+16+48|0;b=0;do{u=o[e+28>>2]|0;l=u+(b*80|0)|0;o[d+16>>2]=o[l>>2];o[d+16+4>>2]=o[l+4>>2];o[d+16+8>>2]=o[l+8>>2];o[d+16+12>>2]=o[l+12>>2];l=u+(b*80|0)+16|0;o[s>>2]=o[l>>2];o[s+4>>2]=o[l+4>>2];o[s+8>>2]=o[l+8>>2];o[s+12>>2]=o[l+12>>2];l=u+(b*80|0)+32|0;o[a>>2]=o[l>>2];o[a+4>>2]=o[l+4>>2];o[a+8>>2]=o[l+8>>2];o[a+12>>2]=o[l+12>>2];l=u+(b*80|0)+48|0;o[f>>2]=o[l>>2];o[f+4>>2]=o[l+4>>2];o[f+8>>2]=o[l+8>>2];o[f+12>>2]=o[l+12>>2];u=o[u+(b*80|0)+64>>2]|0;u=fP[o[(o[u>>2]|0)+28>>2]&127](u)|0;o[d>>2]=o[u>>2];o[d+4>>2]=o[u+4>>2];o[d+8>>2]=o[u+8>>2];h=+c[d+4>>2]*+c[t+4>>2]/+c[e+84>>2];m=+c[d+8>>2]*+c[t+8>>2]/+c[e+88>>2];c[d>>2]=+c[d>>2]*+c[t>>2]/+c[e+80>>2];c[d+4>>2]=h;c[d+8>>2]=m;c[d+12>>2]=0;u=o[(o[e+28>>2]|0)+(b*80|0)+64>>2]|0;aP[o[(o[u>>2]|0)+24>>2]&127](u,d);m=+c[d+16+52>>2]*+c[t+4>>2]/+c[e+84>>2];h=+c[d+16+56>>2]*+c[t+8>>2]/+c[e+88>>2];c[d+16+48>>2]=+c[f>>2]*+c[t>>2]/+c[e+80>>2];c[d+16+52>>2]=m;c[d+16+56>>2]=h;c[d+16+60>>2]=0;u=o[e+28>>2]|0;l=u+(b*80|0)|0;o[l>>2]=o[d+16>>2];o[l+4>>2]=o[d+16+4>>2];o[l+8>>2]=o[d+16+8>>2];o[l+12>>2]=o[d+16+12>>2];l=u+(b*80|0)+16|0;o[l>>2]=o[s>>2];o[l+4>>2]=o[s+4>>2];o[l+8>>2]=o[s+8>>2];o[l+12>>2]=o[s+12>>2];l=u+(b*80|0)+32|0;o[l>>2]=o[a>>2];o[l+4>>2]=o[a+4>>2];o[l+8>>2]=o[a+8>>2];o[l+12>>2]=o[a+12>>2];u=u+(b*80|0)+48|0;o[u>>2]=o[f>>2];o[u+4>>2]=o[f+4>>2];o[u+8>>2]=o[f+8>>2];o[u+12>>2]=o[f+12>>2];if(o[e+68>>2]|0){l=o[(o[e+28>>2]|0)+(b*80|0)+64>>2]|0;HP[o[(o[l>>2]|0)+8>>2]&127](l,d+16|0,d+128|0,d+112|0);o[d+80>>2]=o[d+128>>2];o[d+80+4>>2]=o[d+128+4>>2];o[d+80+8>>2]=o[d+128+8>>2];o[d+80+12>>2]=o[d+128+12>>2];o[d+80+16>>2]=o[d+112>>2];o[d+80+16+4>>2]=o[d+112+4>>2];o[d+80+16+8>>2]=o[d+112+8>>2];o[d+80+16+12>>2]=o[d+112+12>>2];l=o[e+68>>2]|0;u=o[(o[e+28>>2]|0)+(b*80|0)+76>>2]|0;i=GL(l,u)|0;e:do if(i){r=o[l+8>>2]|0;if((r|0)<=-1){i=o[l>>2]|0;break}if((r|0)>0){_=0;while(1){n=o[i+32>>2]|0;_=_+1|0;if(!n)break e;if((_|0)>=(r|0)){i=n;break}else i=n}}}else i=0;while(0);o[u>>2]=o[d+80>>2];o[u+4>>2]=o[d+80+4>>2];o[u+8>>2]=o[d+80+8>>2];o[u+12>>2]=o[d+80+12>>2];o[u+16>>2]=o[d+80+16>>2];o[u+20>>2]=o[d+80+20>>2];o[u+24>>2]=o[d+80+24>>2];o[u+28>>2]=o[d+80+28>>2];EL(l,i,u)}b=b+1|0}while((b|0)<(o[e+20>>2]|0));b=e+80|0;o[b>>2]=o[t>>2];o[b+4>>2]=o[t+4>>2];o[b+8>>2]=o[t+8>>2];o[b+12>>2]=o[t+12>>2];t=o[e>>2]|0;t=t+68|0;t=o[t>>2]|0;_P[t&255](e);p=d;return}function RS(e){e=e|0;return e+80|0}function jS(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=p;p=p+96|0;o[n+32>>2]=1065353216;o[n+32+4>>2]=0;o[n+32+4+4>>2]=0;o[n+32+4+8>>2]=0;o[n+32+4+12>>2]=0;o[n+32+20>>2]=1065353216;o[n+32+24>>2]=0;o[n+32+24+4>>2]=0;o[n+32+24+8>>2]=0;o[n+32+24+12>>2]=0;o[n+32+40>>2]=1065353216;a=n+32+44|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;HP[o[(o[e>>2]|0)+8>>2]&127](e,n+32|0,n+16|0,n);_=(+c[n>>2]-+c[n+16>>2])*.5*2;r=(+c[n+4>>2]-+c[n+16+4>>2])*.5*2;s=(+c[n+8>>2]-+c[n+16+8>>2])*.5*2;c[i>>2]=t/12*(r*r+s*s);c[i+4>>2]=t/12*(_*_+s*s);c[i+8>>2]=t/12*(_*_+r*r);p=n;return}function IS(e){e=e|0;return 13240}function TS(e,t){e=e|0;t=+t;c[e+76>>2]=t;return}function DS(e){e=e|0;return+ +c[e+76>>2]}function OS(e){e=e|0;return 24}function LS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;_=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=_;if(_|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+20>>2]=o[e+76>>2];n=o[e+20>>2]|0;o[t+16>>2]=n;o[t+12>>2]=0;if(!n)return 13274;_=gP[o[(o[i>>2]|0)+16>>2]&63](i,76,n)|0;n=o[_+8>>2]|0;o[t+12>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;if((o[t+16>>2]|0)>0){r=0;while(1){s=o[e+28>>2]|0;o[n+72>>2]=o[s+(r*80|0)+72>>2];o[n+64>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[s+(r*80|0)+64>>2]|0)|0;if(!(DP[o[(o[i>>2]|0)+24>>2]&31](i,o[(o[e+28>>2]|0)+(r*80|0)+64>>2]|0)|0)){s=o[(o[i>>2]|0)+16>>2]|0;a=o[(o[e+28>>2]|0)+(r*80|0)+64>>2]|0;a=fP[o[(o[a>>2]|0)+52>>2]&127](a)|0;a=gP[s&63](i,a,1)|0;s=o[(o[e+28>>2]|0)+(r*80|0)+64>>2]|0;s=gP[o[(o[s>>2]|0)+56>>2]&63](s,o[a+8>>2]|0,i)|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,a,s,1346455635,o[(o[e+28>>2]|0)+(r*80|0)+64>>2]|0)}a=o[e+28>>2]|0;o[n+68>>2]=o[a+(r*80|0)+68>>2];o[n>>2]=o[a+(r*80|0)>>2];o[n+4>>2]=o[a+(r*80|0)+4>>2];o[n+8>>2]=o[a+(r*80|0)+8>>2];o[n+12>>2]=o[a+(r*80|0)+12>>2];o[n+16>>2]=o[a+(r*80|0)+16>>2];o[n+20>>2]=o[a+(r*80|0)+20>>2];o[n+24>>2]=o[a+(r*80|0)+24>>2];o[n+28>>2]=o[a+(r*80|0)+28>>2];o[n+32>>2]=o[a+(r*80|0)+32>>2];o[n+36>>2]=o[a+(r*80|0)+36>>2];o[n+40>>2]=o[a+(r*80|0)+40>>2];o[n+44>>2]=o[a+(r*80|0)+44>>2];o[n+48>>2]=o[a+(r*80|0)+48>>2];o[n+52>>2]=o[a+(r*80|0)+52>>2];o[n+56>>2]=o[a+(r*80|0)+56>>2];o[n+60>>2]=o[a+(r*80|0)+60>>2];r=r+1|0;if((r|0)>=(o[t+16>>2]|0)){n=i;break}else n=n+76|0}}else n=i;rP[o[(o[n>>2]|0)+20>>2]&31](i,_,13249,1497453121,o[_+8>>2]|0);return 13274}function xS(e,t){e=e|0;t=t|0;var i=0,n=0;o[e+72>>2]=(o[e+72>>2]|0)+1;i=o[e+20>>2]|0;if((i|0)>0)do{n=i;i=i+-1|0;if((o[(o[e+28>>2]|0)+(i*80|0)+64>>2]|0)==(t|0))MS(e,i)}while((n|0)>1);_P[o[(o[e>>2]|0)+68>>2]&255](e);return}function MS(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0;_=p;p=p+80|0;o[e+72>>2]=(o[e+72>>2]|0)+1;n=o[e+68>>2]|0;if(n|0){r=o[(o[e+28>>2]|0)+(t*80|0)+76>>2]|0;GL(n,r)|0;i=o[n+4>>2]|0;if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[n+4>>2]=r;o[n+12>>2]=(o[n+12>>2]|0)+-1}r=(o[e+20>>2]|0)+-1|0;n=o[e+28>>2]|0;o[_>>2]=o[n+(t*80|0)>>2];o[_+4>>2]=o[n+(t*80|0)+4>>2];o[_+8>>2]=o[n+(t*80|0)+8>>2];o[_+12>>2]=o[n+(t*80|0)+12>>2];o[_+16>>2]=o[n+(t*80|0)+16>>2];o[_+16+4>>2]=o[n+(t*80|0)+16+4>>2];o[_+16+8>>2]=o[n+(t*80|0)+16+8>>2];o[_+16+12>>2]=o[n+(t*80|0)+16+12>>2];o[_+32>>2]=o[n+(t*80|0)+32>>2];o[_+32+4>>2]=o[n+(t*80|0)+32+4>>2];o[_+32+8>>2]=o[n+(t*80|0)+32+8>>2];o[_+32+12>>2]=o[n+(t*80|0)+32+12>>2];o[_+48>>2]=o[n+(t*80|0)+48>>2];o[_+48+4>>2]=o[n+(t*80|0)+48+4>>2];o[_+48+8>>2]=o[n+(t*80|0)+48+8>>2];o[_+48+12>>2]=o[n+(t*80|0)+48+12>>2];o[_+64>>2]=o[n+(t*80|0)+64>>2];o[_+64+4>>2]=o[n+(t*80|0)+64+4>>2];o[_+64+8>>2]=o[n+(t*80|0)+64+8>>2];o[_+64+12>>2]=o[n+(t*80|0)+64+12>>2];o[n+(t*80|0)>>2]=o[n+(r*80|0)>>2];o[n+(t*80|0)+4>>2]=o[n+(r*80|0)+4>>2];o[n+(t*80|0)+8>>2]=o[n+(r*80|0)+8>>2];o[n+(t*80|0)+12>>2]=o[n+(r*80|0)+12>>2];o[n+(t*80|0)+16>>2]=o[n+(r*80|0)+16>>2];o[n+(t*80|0)+16+4>>2]=o[n+(r*80|0)+16+4>>2];o[n+(t*80|0)+16+8>>2]=o[n+(r*80|0)+16+8>>2];o[n+(t*80|0)+16+12>>2]=o[n+(r*80|0)+16+12>>2];o[n+(t*80|0)+32>>2]=o[n+(r*80|0)+32>>2];o[n+(t*80|0)+32+4>>2]=o[n+(r*80|0)+32+4>>2];o[n+(t*80|0)+32+8>>2]=o[n+(r*80|0)+32+8>>2];o[n+(t*80|0)+32+12>>2]=o[n+(r*80|0)+32+12>>2];o[n+(t*80|0)+48>>2]=o[n+(r*80|0)+48>>2];o[n+(t*80|0)+48+4>>2]=o[n+(r*80|0)+48+4>>2];o[n+(t*80|0)+48+8>>2]=o[n+(r*80|0)+48+8>>2];o[n+(t*80|0)+48+12>>2]=o[n+(r*80|0)+48+12>>2];o[n+(t*80|0)+64>>2]=o[n+(r*80|0)+64>>2];o[n+(t*80|0)+64+4>>2]=o[n+(r*80|0)+64+4>>2];o[n+(t*80|0)+64+8>>2]=o[n+(r*80|0)+64+8>>2];o[n+(t*80|0)+64+12>>2]=o[n+(r*80|0)+64+12>>2];n=o[e+28>>2]|0;o[n+(r*80|0)>>2]=o[_>>2];o[n+(r*80|0)+4>>2]=o[_+4>>2];o[n+(r*80|0)+8>>2]=o[_+8>>2];o[n+(r*80|0)+12>>2]=o[_+12>>2];o[n+(r*80|0)+16>>2]=o[_+16>>2];o[n+(r*80|0)+16+4>>2]=o[_+16+4>>2];o[n+(r*80|0)+16+8>>2]=o[_+16+8>>2];o[n+(r*80|0)+16+12>>2]=o[_+16+12>>2];o[n+(r*80|0)+32>>2]=o[_+32>>2];o[n+(r*80|0)+32+4>>2]=o[_+32+4>>2];o[n+(r*80|0)+32+8>>2]=o[_+32+8>>2];o[n+(r*80|0)+32+12>>2]=o[_+32+12>>2];o[n+(r*80|0)+48>>2]=o[_+48>>2];o[n+(r*80|0)+48+4>>2]=o[_+48+4>>2];o[n+(r*80|0)+48+8>>2]=o[_+48+8>>2];o[n+(r*80|0)+48+12>>2]=o[_+48+12>>2];o[n+(r*80|0)+64>>2]=o[_+64>>2];o[n+(r*80|0)+64+4>>2]=o[_+64+4>>2];o[n+(r*80|0)+64+8>>2]=o[_+64+8>>2];o[n+(r*80|0)+64+12>>2]=o[_+64+12>>2];if(!(o[e+68>>2]|0)){t=o[e+20>>2]|0;t=t+-1|0;o[e+20>>2]=t;p=_;return}o[(o[(o[e+28>>2]|0)+(t*80|0)+76>>2]|0)+36>>2]=t;t=o[e+20>>2]|0;t=t+-1|0;o[e+20>>2]=t;p=_;return}function PS(e){e=e|0;var t=0,i=0,n=0,r=0,_=0;n=p;p=p+32|0;o[e+36>>2]=1566444395;o[e+40>>2]=1566444395;o[e+44>>2]=1566444395;c[e+48>>2]=0;o[e+52>>2]=-581039253;o[e+56>>2]=-581039253;o[e+60>>2]=-581039253;c[e+64>>2]=0;if((o[e+20>>2]|0)<=0){p=n;return}i=0;do{r=o[e+28>>2]|0;_=o[r+(i*80|0)+64>>2]|0;HP[o[(o[_>>2]|0)+8>>2]&127](_,r+(i*80|0)|0,n+16|0,n);t=+c[n+16>>2];if(+c[e+36>>2]>t)c[e+36>>2]=t;t=+c[n>>2];if(+c[e+52>>2]<t)c[e+52>>2]=t;t=+c[n+16+4>>2];if(+c[e+40>>2]>t)c[e+40>>2]=t;t=+c[n+4>>2];if(+c[e+56>>2]<t)c[e+56>>2]=t;t=+c[n+16+8>>2];if(+c[e+44>>2]>t)c[e+44>>2]=t;t=+c[n+8>>2];if(+c[e+60>>2]<t)c[e+60>>2]=t;i=i+1|0}while((i|0)<(o[e+20>>2]|0));p=n;return}function WS(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0;o[e+8>>2]=0;o[e+12>>2]=-1;o[e>>2]=5176;n[e+32>>0]=1;o[e+28>>2]=0;o[e+20>>2]=0;o[e+24>>2]=0;o[e+36>>2]=1566444395;o[e+40>>2]=1566444395;o[e+44>>2]=1566444395;c[e+48>>2]=0;o[e+52>>2]=-581039253;o[e+56>>2]=-581039253;o[e+60>>2]=-581039253;c[e+64>>2]=0;o[e+68>>2]=0;o[e+72>>2]=1;c[e+76>>2]=0;o[e+80>>2]=1065353216;o[e+84>>2]=1065353216;o[e+88>>2]=1065353216;c[e+92>>2]=0;o[e+4>>2]=31;if(t){o[5637]=(o[5637]|0)+1;t=Qa(79)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}n[t+36>>0]=1;o[t+32>>2]=0;o[t+24>>2]=0;o[t+28>>2]=0;n[t+56>>0]=1;o[t+52>>2]=0;o[t+44>>2]=0;o[t+48>>2]=0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=-1;o[t+12>>2]=0;o[t+16>>2]=0;o[e+68>>2]=t;t=o[e+24>>2]|0}else t=0;if((t|0)>=(i|0))return;if((i|0)!=0?(o[5637]=(o[5637]|0)+1,r=Qa((i*80|3)+16|0)|0,(r|0)!=0):0){o[(r+4+15&-16)+-4>>2]=r;_=r+4+15&-16}else _=0;t=o[e+20>>2]|0;if((t|0)>0){r=0;do{s=_+(r*80|0)|0;a=o[e+28>>2]|0;f=a+(r*80|0)|0;o[s>>2]=o[f>>2];o[s+4>>2]=o[f+4>>2];o[s+8>>2]=o[f+8>>2];o[s+12>>2]=o[f+12>>2];s=_+(r*80|0)+16|0;f=a+(r*80|0)+16|0;o[s>>2]=o[f>>2];o[s+4>>2]=o[f+4>>2];o[s+8>>2]=o[f+8>>2];o[s+12>>2]=o[f+12>>2];s=_+(r*80|0)+32|0;f=a+(r*80|0)+32|0;o[s>>2]=o[f>>2];o[s+4>>2]=o[f+4>>2];o[s+8>>2]=o[f+8>>2];o[s+12>>2]=o[f+12>>2];s=_+(r*80|0)+48|0;f=a+(r*80|0)+48|0;o[s>>2]=o[f>>2];o[s+4>>2]=o[f+4>>2];o[s+8>>2]=o[f+8>>2];o[s+12>>2]=o[f+12>>2];s=_+(r*80|0)+64|0;a=a+(r*80|0)+64|0;o[s>>2]=o[a>>2];o[s+4>>2]=o[a+4>>2];o[s+8>>2]=o[a+8>>2];o[s+12>>2]=o[a+12>>2];r=r+1|0}while((r|0)!=(t|0))}t=o[e+28>>2]|0;if(t|0){if(n[e+32>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+28>>2]=0}n[e+32>>0]=1;o[e+28>>2]=_;o[e+24>>2]=i;return}function BS(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function AS(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;HP[o[(o[e>>2]|0)+80>>2]&127](e,t,i,n);return}function FS(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0;a=o[e+72>>2]|0;s=o[e+68>>2]|0;_=o[e+76>>2]|0;n=+c[e+64>>2]*(+c[t+(a<<2)>>2]/+c[e+16+(a<<2)>>2]);c[e+64>>2]=n;r=+c[e+60>>2]*((+c[t+(s<<2)>>2]/+c[e+16+(s<<2)>>2]+ +c[t+(_<<2)>>2]/+c[e+16+(_<<2)>>2])*.5);c[e+60>>2]=r;c[e+56>>2]=r/+X(+(n*n+r*r));r=+N(+ +c[t>>2]);n=+N(+ +c[t+4>>2]);i=+N(+ +c[t+8>>2]);c[e+16>>2]=r;c[e+20>>2]=n;c[e+24>>2]=i;c[e+28>>2]=0;return}function GS(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;n=p;p=p+96|0;o[n+32>>2]=1065353216;o[n+32+4>>2]=0;o[n+32+4+4>>2]=0;o[n+32+4+8>>2]=0;o[n+32+4+12>>2]=0;o[n+32+20>>2]=1065353216;o[n+32+24>>2]=0;o[n+32+24+4>>2]=0;o[n+32+24+8>>2]=0;o[n+32+24+12>>2]=0;o[n+32+40>>2]=1065353216;f=n+32+44|0;o[f>>2]=0;o[f+4>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[f+16>>2]=0;HP[o[(o[e>>2]|0)+8>>2]&127](e,n+32|0,n+16|0,n);s=(+c[n>>2]-+c[n+16>>2])*.5;_=(+c[n+4>>2]-+c[n+16+4>>2])*.5;a=(+c[n+8>>2]-+c[n+16+8>>2])*.5;r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[i>>2]=t*.0833333283662796*((_+r)*2*((_+r)*2)+(a+r)*2*((a+r)*2));c[i+4>>2]=t*.0833333283662796*((s+r)*2*((s+r)*2)+(a+r)*2*((a+r)*2));c[i+8>>2]=t*.0833333283662796*((s+r)*2*((s+r)*2)+(_+r)*2*((_+r)*2));c[i+12>>2]=0;p=n;return}function ES(e){e=e|0;return 13325}function VS(e,t){e=e|0;t=t|0;o[e>>2]=0;o[e+4>>2]=1065353216;o[e+8>>2]=0;c[e+12>>2]=0;return}function NS(e){e=e|0;return 60}function XS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+28>>2]=o[e+32>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+12>>2]=o[e+16>>2];o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+44>>2]=o[e+48>>2];o[t+52>>2]=o[e+72>>2];return 13330}function HS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;n=+c[t+64>>2]*.5;p=o[t+72>>2]|0;_=+c[i>>2];a=+c[i+4>>2];f=+c[i+8>>2];f=+X(+(_*_+a*a+f*f));r=o[t+68>>2]|0;do if(!(+c[i+(p<<2)>>2]>f*+c[t+56>>2])){_=+c[i+(r<<2)>>2];s=o[t+76>>2]|0;a=+c[i+(s<<2)>>2];f=+X(+(_*_+a*a));if(f>1.1920928955078125e-7){f=+c[t+60>>2]/f;c[e+(r<<2)>>2]=_*f;c[e+(p<<2)>>2]=-n;c[e+(s<<2)>>2]=a*f;break}else{c[e+(r<<2)>>2]=0;c[e+(p<<2)>>2]=-n;c[e+(s<<2)>>2]=0;break}}else{c[e+(r<<2)>>2]=0;c[e+(p<<2)>>2]=n;c[e+(o[t+76>>2]<<2)>>2]=0}while(0);if(!(+wP[o[(o[t>>2]|0)+48>>2]&15](t)!=0))return;_=+c[i>>2];a=+c[i+4>>2];f=+c[i+8>>2];l=_*_+a*a+f*f<1.4210854715202004e-14?-1:_;n=_*_+a*a+f*f<1.4210854715202004e-14?-1:a;f=_*_+a*a+f*f<1.4210854715202004e-14?-1:f;a=1/+X(+(f*f+(l*l+n*n)));_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+_*(a*l);c[e+4>>2]=_*(a*n)+ +c[e+4>>2];c[e+8>>2]=_*(a*f)+ +c[e+8>>2];return}function ZS(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0;_=+c[t+64>>2]*.5;p=o[t+72>>2]|0;n=+c[i>>2];r=+c[i+4>>2];a=+c[i+8>>2];a=+X(+(n*n+r*r+a*a));s=o[t+68>>2]|0;if(+c[i+(p<<2)>>2]>a*+c[t+56>>2]){c[e+(s<<2)>>2]=0;c[e+(p<<2)>>2]=_;c[e+(o[t+76>>2]<<2)>>2]=0;return}a=+c[i+(s<<2)>>2];f=o[t+76>>2]|0;n=+c[i+(f<<2)>>2];r=+X(+(a*a+n*n));if(r>1.1920928955078125e-7){r=+c[t+60>>2]/r;c[e+(s<<2)>>2]=a*r;c[e+(p<<2)>>2]=-_;c[e+(f<<2)>>2]=n*r;return}else{c[e+(s<<2)>>2]=0;c[e+(p<<2)>>2]=-_;c[e+(f<<2)>>2]=0;return}}function US(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;h=p;p=p+16|0;if((n|0)<=0){p=h;return}d=0;do{b=i+(d<<4)|0;r=+c[e+64>>2]*.5;_=o[e+72>>2]|0;a=+c[t+(d<<4)>>2];l=+c[t+(d<<4)+4>>2];u=+c[t+(d<<4)+8>>2];u=+X(+(a*a+l*l+u*u));s=o[e+68>>2]|0;do if(!(+c[t+(d<<4)+(_<<2)>>2]>u*+c[e+56>>2])){a=+c[t+(d<<4)+(s<<2)>>2];f=o[e+76>>2]|0;l=+c[t+(d<<4)+(f<<2)>>2];u=+X(+(a*a+l*l));if(u>1.1920928955078125e-7){u=+c[e+60>>2]/u;c[h+(s<<2)>>2]=a*u;c[h+(_<<2)>>2]=-r;c[h+(f<<2)>>2]=l*u;break}else{c[h+(s<<2)>>2]=0;c[h+(_<<2)>>2]=-r;c[h+(f<<2)>>2]=0;break}}else{c[h+(s<<2)>>2]=0;c[h+(_<<2)>>2]=r;c[h+(o[e+76>>2]<<2)>>2]=0}while(0);o[b>>2]=o[h>>2];o[b+4>>2]=o[h+4>>2];o[b+8>>2]=o[h+8>>2];o[b+12>>2]=o[h+12>>2];d=d+1|0}while((d|0)!=(n|0));p=h;return}function zS(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function YS(e){e=e|0;return 13361}function KS(e,t){e=e|0;t=t|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=1065353216;c[e+12>>2]=0;return}function QS(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function qS(e){e=e|0;return 13382}function JS(e,t){e=e|0;t=t|0;o[e>>2]=1065353216;o[e+4>>2]=0;o[e+8>>2]=0;c[e+12>>2]=0;return}function $S(e){e=e|0;var t=0;o[e>>2]=5556;t=o[e+108>>2]|0;if(t|0){if(n[e+112>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+108>>2]=0}n[e+112>>0]=1;o[e+108>>2]=0;o[e+100>>2]=0;o[e+104>>2]=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(!t)return;_P[o[o[t>>2]>>2]&255](t);t=o[e+56>>2]|0;if(!t)return;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function eR(e){e=e|0;var t=0,i=0;o[e>>2]=5556;t=o[e+108>>2]|0;if(t|0){if(n[e+112>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+108>>2]=0}n[e+112>>0]=1;o[e+108>>2]=0;o[e+100>>2]=0;o[e+104>>2]=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+56>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function tR(e,t){e=e|0;t=t|0;o[e+16>>2]=o[t>>2];o[e+16+4>>2]=o[t+4>>2];o[e+16+8>>2]=o[t+8>>2];o[e+16+12>>2]=o[t+12>>2];Pj(e);return}function iR(e){e=e|0;return 13408}function nR(e){e=e|0;return 68}function rR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;_=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=_;if(_|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+28>>2]=o[e+32>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+12>>2]=o[e+16>>2];o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+44>>2]=o[e+48>>2];r=o[e+100>>2]|0;o[t+60>>2]=r;if(!r){o[t+52>>2]=0;o[t+56>>2]=0;return 13415}o[t+52>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+108>>2]|0)|0;o[t+56>>2]=0;_=gP[o[(o[i>>2]|0)+16>>2]&63](i,16,r)|0;if((r|0)>0){n=o[e+108>>2]|0;t=0;e=o[_+8>>2]|0;while(1){o[e>>2]=o[n+(t<<4)>>2];o[e+4>>2]=o[n+(t<<4)+4>>2];o[e+8>>2]=o[n+(t<<4)+8>>2];o[e+12>>2]=o[n+(t<<4)+12>>2];t=t+1|0;if((t|0)==(r|0))break;else e=e+16|0}}else n=o[e+108>>2]|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,_,16354,1497453121,n);return 13415}function oR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;EP[o[(o[t>>2]|0)+68>>2]&127](e,t,i);if(!(+wP[o[(o[t>>2]|0)+48>>2]&15](t)!=0))return;_=+c[i>>2];r=+c[i+4>>2];n=+c[i+8>>2];a=_*_+r*r+n*n<1.4210854715202004e-14?-1:_;s=_*_+r*r+n*n<1.4210854715202004e-14?-1:r;n=_*_+r*r+n*n<1.4210854715202004e-14?-1:n;r=1/+X(+(n*n+(a*a+s*s)));_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+_*(r*a);c[e+4>>2]=_*(r*s)+ +c[e+4>>2];c[e+8>>2]=_*(r*n)+ +c[e+8>>2];return}function _R(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0;f=o[t+100>>2]|0;if((f|0)<=0){o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;return}b=+c[t+16>>2];d=+c[i>>2]*b;p=+c[t+20>>2];l=+c[i+4>>2]*p;u=+c[t+24>>2];a=+c[i+8>>2]*u;i=o[t+108>>2]|0;r=0;_=-3.4028234663852886e38;s=-1;while(1){n=d*+c[i+(r<<4)>>2]+l*+c[i+(r<<4)+4>>2]+a*+c[i+(r<<4)+8>>2];t=n>_;s=t?r:s;r=r+1|0;if((r|0)==(f|0))break;else _=t?n:_}l=+c[i+(s<<4)+4>>2]*p;d=+c[i+(s<<4)+8>>2]*u;c[e>>2]=+c[i+(s<<4)>>2]*b;c[e+4>>2]=l;c[e+8>>2]=d;c[e+12>>2]=0;return}function sR(e,t,i,n,r,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0;m=p;p=p+16|0;c[n>>2]=3.4028234663852886e38;c[r>>2]=-3.4028234663852886e38;l=o[e+100>>2]|0;if((l|0)>0){h=0;do{g=o[e+108>>2]|0;y=+c[g+(h<<4)>>2]*+c[e+16>>2];d=+c[g+(h<<4)+4>>2]*+c[e+20>>2];b=+c[g+(h<<4)+8>>2]*+c[e+24>>2];a=y*+c[t>>2]+d*+c[t+4>>2]+b*+c[t+8>>2]+ +c[t+48>>2];f=y*+c[t+16>>2]+d*+c[t+20>>2]+b*+c[t+24>>2]+ +c[t+52>>2];b=y*+c[t+32>>2]+d*+c[t+36>>2]+b*+c[t+40>>2]+ +c[t+56>>2];d=a*+c[i>>2]+f*+c[i+4>>2]+b*+c[i+8>>2];if(d<+c[n>>2]){c[n>>2]=d;c[_>>2]=a;c[_+4>>2]=f;c[_+8>>2]=b;c[_+12>>2]=0}if(d>+c[r>>2]){c[r>>2]=d;c[s>>2]=a;c[s+4>>2]=f;c[s+8>>2]=b;c[s+12>>2]=0}h=h+1|0}while((h|0)!=(l|0));y=+c[r>>2];f=y;l=(c[u>>2]=y,o[u>>2]|0)}else{f=-3.4028234663852886e38;l=-8388609}a=+c[n>>2];if(!(a>f)){p=m;return}o[n>>2]=l;c[r>>2]=a;o[m>>2]=o[_>>2];o[m+4>>2]=o[_+4>>2];o[m+8>>2]=o[_+8>>2];o[m+12>>2]=o[_+12>>2];o[_>>2]=o[s>>2];o[_+4>>2]=o[s+4>>2];o[_+8>>2]=o[s+8>>2];o[_+12>>2]=o[s+12>>2];o[s>>2]=o[m>>2];o[s+4>>2]=o[m+4>>2];o[s+8>>2]=o[m+8>>2];o[s+12>>2]=o[m+12>>2];p=m;return}function aR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0;if((n|0)>0)r=0;else return;do{c[i+(r<<4)+12>>2]=-0xde0b6b000000000;r=r+1|0}while((r|0)!=(n|0));d=0;do{_=+c[e+16>>2];s=+c[t+(d<<4)>>2]*_;a=+c[e+20>>2];f=+c[t+(d<<4)+4>>2]*a;p=+c[e+24>>2];l=+c[t+(d<<4)+8>>2]*p;r=o[e+100>>2]|0;if((r|0)>0){u=o[e+108>>2]|0;b=0;h=-3.4028234663852886e38;m=-1;do{y=s*+c[u+(b<<4)>>2]+f*+c[u+(b<<4)+4>>2]+l*+c[u+(b<<4)+8>>2];g=y>h;m=g?b:m;h=g?y:h;b=b+1|0}while((b|0)!=(r|0));l=+c[u+(m<<4)+4>>2]*a;y=+c[u+(m<<4)+8>>2]*p;c[i+(d<<4)>>2]=+c[u+(m<<4)>>2]*_;c[i+(d<<4)+4>>2]=l;c[i+(d<<4)+8>>2]=y;c[i+(d<<4)+12>>2]=h}else c[i+(d<<4)+12>>2]=-0xde0b6b000000000;d=d+1|0}while((d|0)!=(n|0));return}function cR(e){e=e|0;return o[e+100>>2]|0}function fR(e){e=e|0;return o[e+100>>2]|0}function pR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0;s=o[e+100>>2]|0;a=o[e+108>>2]|0;r=+c[a+(((t|0)%(s|0)|0)<<4)+4>>2]*+c[e+20>>2];_=+c[a+(((t|0)%(s|0)|0)<<4)+8>>2]*+c[e+24>>2];c[i>>2]=+c[a+(((t|0)%(s|0)|0)<<4)>>2]*+c[e+16>>2];c[i+4>>2]=r;c[i+8>>2]=_;c[i+12>>2]=0;i=o[e+108>>2]|0;_=+c[i+(((t+1|0)%(s|0)|0)<<4)+4>>2]*+c[e+20>>2];r=+c[i+(((t+1|0)%(s|0)|0)<<4)+8>>2]*+c[e+24>>2];c[n>>2]=+c[i+(((t+1|0)%(s|0)|0)<<4)>>2]*+c[e+16>>2];c[n+4>>2]=_;c[n+8>>2]=r;c[n+12>>2]=0;return}function lR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;_=o[e+108>>2]|0;r=+c[_+(t<<4)+4>>2]*+c[e+20>>2];n=+c[_+(t<<4)+8>>2]*+c[e+24>>2];c[i>>2]=+c[_+(t<<4)>>2]*+c[e+16>>2];c[i+4>>2]=r;c[i+8>>2]=n;c[i+12>>2]=0;return}function uR(e){e=e|0;return 0}function bR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return}function dR(e,t,i){e=e|0;t=t|0;i=+i;return 0}function hR(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0;f=p;p=p+16|0;o[e+8>>2]=0;o[e+12>>2]=-1;o[e+16>>2]=1065353216;o[e+20>>2]=1065353216;o[e+24>>2]=1065353216;c[e+28>>2]=0;c[e+48>>2]=.03999999910593033;o[e+56>>2]=0;o[e+60>>2]=1065353216;o[e+64>>2]=1065353216;o[e+68>>2]=1065353216;c[e+72>>2]=0;o[e+76>>2]=-1082130432;o[e+80>>2]=-1082130432;o[e+84>>2]=-1082130432;c[e+88>>2]=0;n[e+92>>0]=0;o[e>>2]=5556;n[e+112>>0]=1;o[e+108>>2]=0;o[e+100>>2]=0;o[e+104>>2]=0;o[e+4>>2]=4;if((i|0)<=0){o[e+100>>2]=i;Pj(e);p=f;return}o[5637]=(o[5637]|0)+1;_=Qa((i<<4|3)+16|0)|0;if(!_)a=0;else{o[(_+4+15&-16)+-4>>2]=_;a=_+4+15&-16}_=o[e+100>>2]|0;if((_|0)>0){s=0;do{l=a+(s<<4)|0;u=(o[e+108>>2]|0)+(s<<4)|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];o[l+12>>2]=o[u+12>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+108>>2]|0;if(_|0){if(n[e+112>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+108>>2]=0}n[e+112>>0]=1;o[e+108>>2]=a;o[e+104>>2]=i;o[a>>2]=o[f>>2];o[a+4>>2]=o[f+4>>2];o[a+8>>2]=o[f+8>>2];o[a+12>>2]=o[f+12>>2];if((i|0)!=1){_=1;do{u=(o[e+108>>2]|0)+(_<<4)|0;o[u>>2]=o[f>>2];o[u+4>>2]=o[f+4>>2];o[u+8>>2]=o[f+8>>2];o[u+12>>2]=o[f+12>>2];_=_+1|0}while((_|0)!=(i|0))}o[e+100>>2]=i;s=0;_=t;while(1){u=o[e+108>>2]|0;t=o[_+4>>2]|0;l=o[_+8>>2]|0;o[u+(s<<4)>>2]=o[_>>2];o[u+(s<<4)+4>>2]=t;o[u+(s<<4)+8>>2]=l;c[u+(s<<4)+12>>2]=0;s=s+1|0;if((s|0)==(i|0))break;else _=_+r|0}Pj(e);p=f;return}function mR(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,c=0,f=0;r=o[e+100>>2]|0;if((r|0)==(o[e+104>>2]|0)?(a=r|0?r<<1:1,(r|0)<(a|0)):0){if(!a)s=0;else{o[5637]=(o[5637]|0)+1;r=Qa((a<<4|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}s=r;r=o[e+100>>2]|0}if((r|0)>0){_=0;do{c=s+(_<<4)|0;f=(o[e+108>>2]|0)+(_<<4)|0;o[c>>2]=o[f>>2];o[c+4>>2]=o[f+4>>2];o[c+8>>2]=o[f+8>>2];o[c+12>>2]=o[f+12>>2];_=_+1|0}while((_|0)!=(r|0))}r=o[e+108>>2]|0;if(r|0){if(n[e+112>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+108>>2]=0}n[e+112>>0]=1;o[e+108>>2]=s;o[e+104>>2]=a;r=o[e+100>>2]|0}f=(o[e+108>>2]|0)+(r<<4)|0;o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];o[e+100>>2]=(o[e+100>>2]|0)+1;if(!i)return;Pj(e);return}function yR(e,t){e=e|0;t=t|0;var i=0,n=0,r=0;r=+N(+ +c[t>>2]);n=+N(+ +c[t+4>>2]);i=+N(+ +c[t+8>>2]);c[e+16>>2]=r;c[e+20>>2]=n;c[e+24>>2]=i;c[e+28>>2]=0;return}function gR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;EP[o[(o[t>>2]|0)+68>>2]&127](e,t,i);if(!(+wP[o[(o[t>>2]|0)+48>>2]&15](t)!=0))return;_=+c[i>>2];r=+c[i+4>>2];n=+c[i+8>>2];a=_*_+r*r+n*n<1.4210854715202004e-14?-1:_;s=_*_+r*r+n*n<1.4210854715202004e-14?-1:r;n=_*_+r*r+n*n<1.4210854715202004e-14?-1:n;r=1/+X(+(n*n+(a*a+s*s)));_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+_*(r*a);c[e+4>>2]=_*(r*s)+ +c[e+4>>2];c[e+8>>2]=_*(r*n)+ +c[e+8>>2];return}function vR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;s=p;p=p+96|0;r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=0;do{h=s+80+(_<<2)|0;o[s+80>>2]=0;o[s+80+4>>2]=0;o[s+80+8>>2]=0;o[s+80+12>>2]=0;c[h>>2]=1;a=o[(o[e>>2]|0)+64>>2]|0;f=+c[s+80>>2];l=+c[s+80+4>>2];u=+c[s+80+8>>2];b=f*+c[t+4>>2]+l*+c[t+20>>2]+u*+c[t+36>>2];d=f*+c[t+8>>2]+l*+c[t+24>>2]+u*+c[t+40>>2];c[s+32>>2]=+c[t>>2]*f+ +c[t+16>>2]*l+ +c[t+32>>2]*u;c[s+32+4>>2]=b;c[s+32+8>>2]=d;c[s+32+12>>2]=0;EP[a&127](s+64|0,e,s+32|0);d=+c[s+64>>2];b=+c[s+64+4>>2];u=+c[s+64+8>>2];l=d*+c[t+16>>2]+b*+c[t+20>>2]+u*+c[t+24>>2]+ +c[t+52>>2];f=d*+c[t+32>>2]+b*+c[t+36>>2]+u*+c[t+40>>2]+ +c[t+56>>2];c[s+48>>2]=d*+c[t>>2]+b*+c[t+4>>2]+u*+c[t+8>>2]+ +c[t+48>>2];c[s+48+4>>2]=l;c[s+48+8>>2]=f;c[s+48+12>>2]=0;a=s+48+(_<<2)|0;c[n+(_<<2)>>2]=r+ +c[a>>2];c[h>>2]=-1;h=o[(o[e>>2]|0)+64>>2]|0;f=+c[s+80>>2];l=+c[s+80+4>>2];u=+c[s+80+8>>2];b=f*+c[t+4>>2]+l*+c[t+20>>2]+u*+c[t+36>>2];d=f*+c[t+8>>2]+l*+c[t+24>>2]+u*+c[t+40>>2];c[s>>2]=+c[t>>2]*f+ +c[t+16>>2]*l+ +c[t+32>>2]*u;c[s+4>>2]=b;c[s+8>>2]=d;c[s+12>>2]=0;EP[h&127](s+16|0,e,s);d=+c[s+16>>2];b=+c[s+16+4>>2];u=+c[s+16+8>>2];l=d*+c[t+16>>2]+b*+c[t+20>>2]+u*+c[t+24>>2]+ +c[t+52>>2];f=d*+c[t+32>>2]+b*+c[t+36>>2]+u*+c[t+40>>2]+ +c[t+56>>2];c[s+48>>2]=d*+c[t>>2]+b*+c[t+4>>2]+u*+c[t+8>>2]+ +c[t+48>>2];c[s+48+4>>2]=l;c[s+48+8>>2]=f;c[s+48+12>>2]=0;c[i+(_<<2)>>2]=+c[a>>2]-r;_=_+1|0}while((_|0)!=3);p=s;return}function CR(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,c=0;o[e>>2]=5688;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;i=o[e+28>>2]|0;if((i|0)>0){c=0;do{r=o[e+36>>2]|0;_=r+(c*36|0)+4|0;s=r+(c*36|0)+12|0;a=o[s>>2]|0;t=r+(c*36|0)+16|0;if(a|0){if(n[t>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[s>>2]=0}n[t>>0]=1;o[s>>2]=0;o[_>>2]=0;o[r+(c*36|0)+8>>2]=0;c=c+1|0}while((c|0)!=(i|0))}t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function wR(e){e=e|0;CR(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function kR(e){e=e|0;var t=0,i=0,n=0,r=0,_=0,s=0,a=0;s=o[e+28>>2]|0;n=0;r=0;_=0;a=0;e:while(1){switch(a|0){case 0:{n=+c[e+80>>2]+ +c[e+64>>2];r=+c[e+84>>2]+ +c[e+68>>2];_=+c[e+88>>2]+ +c[e+72>>2];break}case 1:{n=+c[e+80>>2]+ +c[e+64>>2];r=+c[e+84>>2]+ +c[e+68>>2];_=+c[e+72>>2]-+c[e+88>>2];break}case 2:{n=+c[e+80>>2]+ +c[e+64>>2];r=+c[e+68>>2]-+c[e+84>>2];_=+c[e+88>>2]+ +c[e+72>>2];break}case 3:{n=+c[e+80>>2]+ +c[e+64>>2];r=+c[e+68>>2]-+c[e+84>>2];_=+c[e+72>>2]-+c[e+88>>2];break}case 4:{n=+c[e+64>>2]-+c[e+80>>2];r=+c[e+84>>2]+ +c[e+68>>2];_=+c[e+88>>2]+ +c[e+72>>2];break}case 5:{n=+c[e+64>>2]-+c[e+80>>2];r=+c[e+84>>2]+ +c[e+68>>2];_=+c[e+72>>2]-+c[e+88>>2];break}case 6:{n=+c[e+64>>2]-+c[e+80>>2];r=+c[e+68>>2]-+c[e+84>>2];_=+c[e+88>>2]+ +c[e+72>>2];break}case 7:{n=+c[e+64>>2]-+c[e+80>>2];r=+c[e+68>>2]-+c[e+84>>2];_=+c[e+72>>2]-+c[e+88>>2];break}default:{}}if((s|0)>0){t=o[e+36>>2]|0;i=0;do{if(+c[t+(i*36|0)+32>>2]+(n*+c[t+(i*36|0)+20>>2]+r*+c[t+(i*36|0)+24>>2]+_*+c[t+(i*36|0)+28>>2])>0){t=0;i=16;break e}i=i+1|0}while((i|0)<(s|0))}a=a+1|0;if((a|0)>=8){t=1;i=16;break}}if((i|0)==16)return t|0;return 0}function SR(e,t,i,n,r,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0;m=p;p=p+16|0;c[n>>2]=3.4028234663852886e38;c[r>>2]=-3.4028234663852886e38;l=o[e+8>>2]|0;if((l|0)>0){h=0;do{g=o[e+16>>2]|0;y=+c[g+(h<<4)>>2];d=+c[g+(h<<4)+4>>2];b=+c[g+(h<<4)+8>>2];a=y*+c[t>>2]+d*+c[t+4>>2]+b*+c[t+8>>2]+ +c[t+48>>2];f=y*+c[t+16>>2]+d*+c[t+20>>2]+b*+c[t+24>>2]+ +c[t+52>>2];b=y*+c[t+32>>2]+d*+c[t+36>>2]+b*+c[t+40>>2]+ +c[t+56>>2];d=a*+c[i>>2]+f*+c[i+4>>2]+b*+c[i+8>>2];if(d<+c[n>>2]){c[n>>2]=d;c[_>>2]=a;c[_+4>>2]=f;c[_+8>>2]=b;c[_+12>>2]=0}if(d>+c[r>>2]){c[r>>2]=d;c[s>>2]=a;c[s+4>>2]=f;c[s+8>>2]=b;c[s+12>>2]=0}h=h+1|0}while((h|0)!=(l|0));y=+c[r>>2];f=y;l=(c[u>>2]=y,o[u>>2]|0)}else{f=-3.4028234663852886e38;l=-8388609}a=+c[n>>2];if(!(a>f)){p=m;return}o[n>>2]=l;c[r>>2]=a;o[m>>2]=o[_>>2];o[m+4>>2]=o[_+4>>2];o[m+8>>2]=o[_+8>>2];o[m+12>>2]=o[_+12>>2];o[_>>2]=o[s>>2];o[_+4>>2]=o[s+4>>2];o[_+8>>2]=o[s+8>>2];o[_+12>>2]=o[s+12>>2];o[s>>2]=o[m>>2];o[s+4>>2]=o[m+4>>2];o[s+8>>2]=o[m+8>>2];o[s+12>>2]=o[m+12>>2];p=m;return}function RR(e){e=e|0;return}function jR(e,t,i,n,r,_,s){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0;y=p;p=p+64|0;h=+c[i>>2];d=+c[i+4>>2];m=+c[i+8>>2];a=h*+c[t+4>>2]+d*+c[t+20>>2]+m*+c[t+36>>2];f=h*+c[t+8>>2]+d*+c[t+24>>2]+m*+c[t+40>>2];c[y+48>>2]=+c[t>>2]*h+ +c[t+16>>2]*d+ +c[t+32>>2]*m;c[y+48+4>>2]=a;c[y+48+8>>2]=f;c[y+48+12>>2]=0;EP[o[(o[e>>2]|0)+64>>2]&127](y+32|0,e,y+48|0);f=+c[y+32>>2];a=+c[y+32+4>>2];m=+c[y+32+8>>2];d=f*+c[t>>2]+a*+c[t+4>>2]+m*+c[t+8>>2]+ +c[t+48>>2];h=f*+c[t+16>>2]+a*+c[t+20>>2]+m*+c[t+24>>2]+ +c[t+52>>2];m=f*+c[t+32>>2]+a*+c[t+36>>2]+m*+c[t+40>>2]+ +c[t+56>>2];g=o[(o[e>>2]|0)+64>>2]|0;a=-+c[y+48+4>>2];f=-+c[y+48+8>>2];c[y>>2]=-+c[y+48>>2];c[y+4>>2]=a;c[y+8>>2]=f;c[y+12>>2]=0;EP[g&127](y+16|0,e,y);f=+c[y+16>>2];a=+c[y+16+4>>2];l=+c[y+16+8>>2];u=f*+c[t>>2]+a*+c[t+4>>2]+l*+c[t+8>>2]+ +c[t+48>>2];b=f*+c[t+16>>2]+a*+c[t+20>>2]+l*+c[t+24>>2]+ +c[t+52>>2];l=f*+c[t+32>>2]+a*+c[t+36>>2]+l*+c[t+40>>2]+ +c[t+56>>2];c[n>>2]=d*+c[i>>2]+h*+c[i+4>>2]+m*+c[i+8>>2];c[r>>2]=u*+c[i>>2]+b*+c[i+4>>2]+l*+c[i+8>>2];c[s>>2]=u;c[s+4>>2]=b;c[s+8>>2]=l;c[s+12>>2]=0;c[_>>2]=d;c[_+4>>2]=h;c[_+8>>2]=m;c[_+12>>2]=0;a=+c[n>>2];f=+c[r>>2];if(!(a>f)){p=y;return}c[n>>2]=f;c[r>>2]=a;c[s>>2]=d;c[s+4>>2]=h;c[s+8>>2]=m;c[s+12>>2]=0;c[_>>2]=u;c[_+4>>2]=b;c[_+8>>2]=l;c[_+12>>2]=0;p=y;return}function IR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;R=p;p=p+48|0;switch(o[t+4>>2]|0){case 8:{o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;p=R;return}case 0:{w=+c[t+32>>2];k=+c[t+36>>2];k=+c[i+4>>2]>=0?k:-k;S=+c[t+40>>2];S=+c[i+8>>2]>=0?S:-S;c[e>>2]=+c[i>>2]>=0?w:-w;c[e+4>>2]=k;c[e+8>>2]=S;c[e+12>>2]=0;p=R;return}case 1:{v=+c[i>>2];C=+c[i+4>>2];S=+c[i+8>>2];k=v*+c[t+60>>2]+C*+c[t+60+4>>2]+S*+c[t+60+8>>2];w=v*+c[t+60+16>>2]+C*+c[t+60+20>>2]+S*+c[t+60+24>>2];S=v*+c[t+60+32>>2]+C*+c[t+60+36>>2]+S*+c[t+60+40>>2];i=k<w?w<S?2:1:k<S?2:0;b=o[t+60+(i<<4)+4>>2]|0;m=o[t+60+(i<<4)+8>>2]|0;o[e>>2]=o[t+60+(i<<4)>>2];o[e+4>>2]=b;o[e+8>>2]=m;c[e+12>>2]=0;p=R;return}case 13:{o[R+32>>2]=o[t+32>>2];o[R+32+4>>2]=o[t+32+4>>2];o[R+32+8>>2]=o[t+32+8>>2];o[R+32+12>>2]=o[t+32+12>>2];o[R+16>>2]=o[i>>2];r=o[i+4>>2]|0;o[R+16+4>>2]=r;m=o[i+8>>2]|0;o[R+16+8>>2]=m;c[R+16+12>>2]=0;i=o[t+56>>2]|0;n=(o[u>>2]=m,+c[u>>2]);switch(i|0){case 2:{n=(o[u>>2]=r,+c[u>>2]);r=0;t=2;b=1;break}case 1:{r=0;t=1;b=2;break}default:{r=1;t=0;b=2}}l=+c[R+32+(r<<2)>>2];a=+c[R+32+(i<<2)>>2];f=+c[R+16+(r<<2)>>2];_=+X(+(f*f+n*n));s=+c[R+16+(t<<2)>>2];if(_!=0){c[R+(r<<2)>>2]=f*(l/_);c[R+(t<<2)>>2]=s<0?-a:a;c[R+(b<<2)>>2]=l/_*n;o[e>>2]=o[R>>2];o[e+4>>2]=o[R+4>>2];o[e+8>>2]=o[R+8>>2]}else{c[R+(r<<2)>>2]=l;c[R+(t<<2)>>2]=s<0?-a:a;c[R+(b<<2)>>2]=0;o[e>>2]=o[R>>2];o[e+4>>2]=o[R+4>>2];o[e+8>>2]=o[R+8>>2]}c[e+12>>2]=0;p=R;return}case 10:{n=+c[i>>2];_=+c[i+4>>2];s=+c[i+8>>2];b=o[t+56>>2]|0;C=+c[t+32+(b<<2)>>2];a=+c[t+32+(((b+2|0)%3|0)<<2)>>2];if(n*n+_*_+s*s<9999999747378752e-20){S=1;k=0;w=0}else{w=1/+X(+(n*n+_*_+s*s));S=n*w;k=_*w;w=s*w}o[R+32>>2]=0;o[R+32+4>>2]=0;o[R+32+8>>2]=0;o[R+32+12>>2]=0;c[R+32+(b<<2)>>2]=C;h=a*S;g=a*k;v=a*w;y=+c[t+48>>2];f=S*y;d=k*y;y=w*y;n=h+ +c[R+32>>2]-f;_=g+ +c[R+32+4>>2]-d;a=v+ +c[R+32+8>>2]-y;s=w*a+(S*n+k*_);if(s>-0xde0b6b000000000){t=(c[u>>2]=n,o[u>>2]|0);r=(c[u>>2]=_,o[u>>2]|0);l=s;i=(c[u>>2]=a,o[u>>2]|0)}else{l=-0xde0b6b000000000;t=0;i=0;r=0}o[R+32>>2]=0;o[R+32+4>>2]=0;o[R+32+8>>2]=0;o[R+32+12>>2]=0;c[R+32+(b<<2)>>2]=-C;s=h+ +c[R+32>>2]-f;_=g+ +c[R+32+4>>2]-d;n=v+ +c[R+32+8>>2]-y;if(w*n+(S*s+k*_)>l){t=(c[u>>2]=s,o[u>>2]|0);r=(c[u>>2]=_,o[u>>2]|0);i=(c[u>>2]=n,o[u>>2]|0)}o[e>>2]=t;o[e+4>>2]=r;o[e+8>>2]=i;c[e+12>>2]=0;p=R;return}case 5:{m=o[t+96>>2]|0;b=o[t+100>>2]|0;d=+c[t+16>>2];h=+c[t+20>>2];l=+c[t+24>>2];a=+c[i>>2]*d;f=+c[i+4>>2]*h;n=+c[i+8>>2]*l;if((b|0)>0){t=0;s=-3.4028234663852886e38;r=-1;while(1){_=a*+c[m+(t<<4)>>2]+f*+c[m+(t<<4)+4>>2]+n*+c[m+(t<<4)+8>>2];i=_>s;\nr=i?t:r;t=t+1|0;if((t|0)==(b|0))break;else s=i?_:s}}else r=-1;k=h*+c[m+(r<<4)+4>>2];S=l*+c[m+(r<<4)+8>>2];c[e>>2]=d*+c[m+(r<<4)>>2];c[e+4>>2]=k;c[e+8>>2]=S;c[e+12>>2]=0;p=R;return}case 4:{m=o[t+108>>2]|0;b=o[t+100>>2]|0;d=+c[t+16>>2];h=+c[t+20>>2];l=+c[t+24>>2];a=+c[i>>2]*d;f=+c[i+4>>2]*h;n=+c[i+8>>2]*l;if((b|0)>0){t=0;s=-3.4028234663852886e38;r=-1;while(1){_=a*+c[m+(t<<4)>>2]+f*+c[m+(t<<4)+4>>2]+n*+c[m+(t<<4)+8>>2];i=_>s;r=i?t:r;t=t+1|0;if((t|0)==(b|0))break;else s=i?_:s}}else r=-1;k=h*+c[m+(r<<4)+4>>2];S=l*+c[m+(r<<4)+8>>2];c[e>>2]=d*+c[m+(r<<4)>>2];c[e+4>>2]=k;c[e+8>>2]=S;c[e+12>>2]=0;p=R;return}default:{EP[o[(o[t>>2]|0)+68>>2]&127](e,t,i);p=R;return}}}function TR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;s=p;p=p+32|0;o[s+16>>2]=o[i>>2];o[s+16+4>>2]=o[i+4>>2];o[s+16+8>>2]=o[i+8>>2];o[s+16+12>>2]=o[i+12>>2];n=+c[s+16>>2];_=+c[s+16+4>>2];r=+c[s+16+8>>2];if(n*n+_*_+r*r<1.4210854715202004e-14){o[s+16>>2]=-1082130432;o[s+16+4>>2]=-1082130432;o[s+16+8>>2]=-1082130432;c[s+16+12>>2]=0;n=-1;_=-1;r=-1}a=1/+X(+(n*n+_*_+r*r));c[s+16>>2]=n*a;c[s+16+4>>2]=_*a;c[s+16+8>>2]=r*a;IR(s,t,s+16|0);switch(o[t+4>>2]|0){case 8:{n=+c[t+32>>2]*+c[t+16>>2];break}case 0:{n=+c[t+48>>2];break}case 1:{n=+c[t+48>>2];break}case 13:{n=+c[t+48>>2];break}case 11:{n=+c[t+48>>2];break}case 10:{n=+c[t+48>>2];break}case 4:case 5:{n=+c[t+48>>2];break}default:n=+wP[o[(o[t>>2]|0)+48>>2]&15](t)}_=n*+c[s+16+4>>2]+ +c[s+4>>2];a=n*+c[s+16+8>>2]+ +c[s+8>>2];c[e>>2]=n*+c[s+16>>2]+ +c[s>>2];c[e+4>>2]=_;c[e+8>>2]=a;c[e+12>>2]=0;p=s;return}function DR(e){e=e|0;var t=0,i=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+56>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function OR(e,t){e=e|0;t=t|0;var i=0;i=(o[e+96>>2]|0)+4|0;o[i>>2]=o[t>>2];o[i+4>>2]=o[t+4>>2];o[i+8>>2]=o[t+8>>2];o[i+12>>2]=o[t+12>>2];Pj(e);return}function LR(e){e=e|0;return(o[e+96>>2]|0)+4|0}function xR(e){e=e|0;return 13526}function MR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;EP[o[(o[t>>2]|0)+68>>2]&127](e,t,i);if(!(+wP[o[(o[t>>2]|0)+48>>2]&15](t)!=0))return;_=+c[i>>2];r=+c[i+4>>2];n=+c[i+8>>2];a=_*_+r*r+n*n<1.4210854715202004e-14?-1:_;s=_*_+r*r+n*n<1.4210854715202004e-14?-1:r;n=_*_+r*r+n*n<1.4210854715202004e-14?-1:n;r=1/+X(+(n*n+(a*a+s*s)));_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+_*(r*a);c[e+4>>2]=_*(r*s)+ +c[e+4>>2];c[e+8>>2]=_*(r*n)+ +c[e+8>>2];return}function PR(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0;f=p;p=p+80|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;n=+c[i>>2];r=+c[i+4>>2];_=+c[i+8>>2];if(n*n+r*r+_*_<9999999747378752e-20){a=1065353216;s=0;n=0;i=0}else{b=1/+X(+(n*n+r*r+_*_));a=(c[u>>2]=n*b,o[u>>2]|0);l=(c[u>>2]=r*b,o[u>>2]|0);s=(c[u>>2]=_*b,o[u>>2]|0);n=+c[i+12>>2];i=l}o[f+32>>2]=5836;l=f+32+4|0;o[l>>2]=0;o[l+4>>2]=0;o[l+8>>2]=0;o[l+12>>2]=0;c[f+32+20>>2]=-0xde0b6b000000000;o[f+32+24>>2]=a;o[f+32+28>>2]=i;o[f+32+32>>2]=s;c[f+32+36>>2]=n;o[f+16>>2]=1566444395;o[f+16+4>>2]=1566444395;o[f+16+8>>2]=1566444395;c[f+16+12>>2]=0;t=o[t+96>>2]|0;a=o[(o[t>>2]|0)+8>>2]|0;c[f>>2]=-0xde0b6b000000000;c[f+4>>2]=-0xde0b6b000000000;c[f+8>>2]=-0xde0b6b000000000;c[f+12>>2]=0;HP[a&127](t,f+32|0,f,f+16|0);o[e>>2]=o[l>>2];o[e+4>>2]=o[l+4>>2];o[e+8>>2]=o[l+8>>2];o[e+12>>2]=o[l+12>>2];p=f;return}function WR(e){e=e|0;qa(e);return}function BR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0;a=+c[e+24>>2];f=+c[e+28>>2];s=+c[e+32>>2];r=a*+c[t>>2]+f*+c[t+4>>2]+s*+c[t+8>>2];_=+c[e+20>>2];if(r>_){c[e+20>>2]=r;o[e+4>>2]=o[t>>2];o[e+4+4>>2]=o[t+4>>2];o[e+4+8>>2]=o[t+8>>2];o[e+4+12>>2]=o[t+12>>2]}else r=_;_=a*+c[t+16>>2]+f*+c[t+20>>2]+s*+c[t+24>>2];if(_>r){c[e+20>>2]=_;o[e+4>>2]=o[t+16>>2];o[e+4+4>>2]=o[t+16+4>>2];o[e+4+8>>2]=o[t+16+8>>2];o[e+4+12>>2]=o[t+16+12>>2]}else _=r;r=a*+c[t+32>>2]+f*+c[t+36>>2]+s*+c[t+40>>2];if(!(r>_))return;c[e+20>>2]=r;o[e+4>>2]=o[t+32>>2];o[e+4+4>>2]=o[t+32+4>>2];o[e+4+8>>2]=o[t+32+8>>2];o[e+4+12>>2]=o[t+32+12>>2];return}function AR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0;s=p;p=p+80|0;if((n|0)>0)r=0;else{p=s;return}do{c[i+(r<<4)+12>>2]=-0xde0b6b000000000;r=r+1|0}while((r|0)!=(n|0));r=s+32+4|0;_=0;do{a=t+(_<<4)|0;o[s+32>>2]=5836;o[r>>2]=0;o[r+4>>2]=0;o[r+8>>2]=0;o[r+12>>2]=0;c[s+32+20>>2]=-0xde0b6b000000000;o[s+32+24>>2]=o[a>>2];o[s+32+24+4>>2]=o[a+4>>2];o[s+32+24+8>>2]=o[a+8>>2];o[s+32+24+12>>2]=o[a+12>>2];o[s+16>>2]=1566444395;o[s+16+4>>2]=1566444395;o[s+16+8>>2]=1566444395;c[s+16+12>>2]=0;a=o[e+96>>2]|0;f=o[(o[a>>2]|0)+8>>2]|0;c[s>>2]=-0xde0b6b000000000;c[s+4>>2]=-0xde0b6b000000000;c[s+8>>2]=-0xde0b6b000000000;c[s+12>>2]=0;HP[f&127](a,s+32|0,s,s+16|0);a=i+(_<<4)|0;o[a>>2]=o[r>>2];o[a+4>>2]=o[r+4>>2];o[a+8>>2]=o[r+8>>2];o[a+12>>2]=o[r+12>>2];_=_+1|0}while((_|0)<(n|0));p=s;return}function FR(e){e=e|0;return 0}function GR(e){e=e|0;return 0}function ER(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return}function VR(e,t,i){e=e|0;t=t|0;i=i|0;return}function NR(e){e=e|0;return 0}function XR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return}function HR(e,t,i){e=e|0;t=t|0;i=+i;return 0}function ZR(e,t,i){e=e|0;t=t|0;i=i|0;o[e+8>>2]=0;o[e+12>>2]=-1;o[e+16>>2]=1065353216;o[e+20>>2]=1065353216;o[e+24>>2]=1065353216;c[e+28>>2]=0;c[e+48>>2]=.03999999910593033;o[e+56>>2]=0;o[e+60>>2]=1065353216;o[e+64>>2]=1065353216;o[e+68>>2]=1065353216;c[e+72>>2]=0;o[e+76>>2]=-1082130432;o[e+80>>2]=-1082130432;o[e+84>>2]=-1082130432;c[e+88>>2]=0;n[e+92>>0]=0;o[e>>2]=5704;o[e+96>>2]=t;o[e+4>>2]=3;if(!i)return;Pj(e);return}function UR(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function zR(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=s+ +c[e+32>>2];f=s+ +c[e+36>>2];s=s+ +c[e+40>>2];v=+N(+ +c[t>>2]);g=+N(+ +c[t+4>>2]);y=+N(+ +c[t+8>>2]);h=+N(+ +c[t+16>>2]);d=+N(+ +c[t+20>>2]);b=+N(+ +c[t+24>>2]);p=+N(+ +c[t+32>>2]);a=+N(+ +c[t+36>>2]);_=+N(+ +c[t+40>>2]);m=+c[t+48>>2];u=+c[t+52>>2];r=+c[t+56>>2];c[i>>2]=m-(l*v+f*g+s*y);c[i+4>>2]=u-(l*h+f*d+s*b);c[i+8>>2]=r-(l*p+f*a+s*_);c[i+12>>2]=0;c[n>>2]=l*v+f*g+s*y+m;c[n+4>>2]=l*h+f*d+s*b+u;c[n+8>>2]=l*p+f*a+s*_+r;c[n+12>>2]=0;return}function YR(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;f=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=(f+ +c[e+32>>2])/+c[e+16>>2];a=(_+ +c[e+36>>2])/+c[e+20>>2];r=(i+ +c[e+40>>2])/+c[e+24>>2];p=+N(+ +c[t>>2]);s=+N(+ +c[t+4>>2]);n=+N(+ +c[t+8>>2]);c[e+16>>2]=p;c[e+20>>2]=s;c[e+24>>2]=n;c[e+28>>2]=0;c[e+32>>2]=l*p-f;c[e+36>>2]=a*s-_;c[e+40>>2]=r*n-i;c[e+44>>2]=0;return}function KR(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=+c[e+32>>2];s=+c[e+36>>2];_=+c[e+40>>2];a=+wP[o[(o[e>>2]|0)+48>>2]&15](e);r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e)+_;switch(o[e+56>>2]|0){case 0:{a=t*.25*((r+s)*(r+s))+t/12*((a+n)*((a+n)*4));c[i>>2]=t*.5*((r+s)*(r+s));c[i+4>>2]=a;c[i+8>>2]=a;c[i+12>>2]=0;return}case 2:{c[i>>2]=t*.25*((a+n)*(a+n))+t/12*(_*(_*4));c[i+4>>2]=t*.25*((a+n)*(a+n))+t/12*(_*(_*4));c[i+8>>2]=t*.5*((a+n)*(a+n));c[i+12>>2]=0;return}default:{s=t*.25*((a+n)*(a+n))+t/12*((r+s)*((r+s)*4));c[i>>2]=s;c[i+4>>2]=t*.5*((a+n)*(a+n));c[i+8>>2]=s;c[i+12>>2]=0;return}}}function QR(e){e=e|0;return 13587}function qR(e,t){e=e|0;t=t|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;c[e+(o[t+56>>2]<<2)>>2]=1;return}function JR(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0,s=0;_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);n=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=_+ +c[e+32>>2];n=n+ +c[e+36>>2];s=s+ +c[e+40>>2];c[e+48>>2]=t;r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);t=s-+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[e+32>>2]=_-r;c[e+36>>2]=n-i;c[e+40>>2]=t;c[e+44>>2]=0;return}function $R(e){e=e|0;return 60}function ej(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+28>>2]=o[e+32>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+12>>2]=o[e+16>>2];o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+44>>2]=o[e+48>>2];o[t+52>>2]=o[e+56>>2];return 13597}function tj(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;n=p;p=p+16|0;EP[o[(o[t>>2]|0)+68>>2]&127](n,t,i);o[e>>2]=o[n>>2];o[e+4>>2]=o[n+4>>2];o[e+8>>2]=o[n+8>>2];o[e+12>>2]=o[n+12>>2];if(!(+wP[o[(o[t>>2]|0)+48>>2]&15](t)!=0)){p=n;return}s=+c[i>>2];_=+c[i+4>>2];r=+c[i+8>>2];f=s*s+_*_+r*r<1.4210854715202004e-14?-1:s;a=s*s+_*_+r*r<1.4210854715202004e-14?-1:_;r=s*s+_*_+r*r<1.4210854715202004e-14?-1:r;_=1/+X(+(r*r+(f*f+a*a)));s=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+s*(_*f);c[e+4>>2]=s*(_*a)+ +c[e+4>>2];c[e+8>>2]=s*(_*r)+ +c[e+8>>2];p=n;return}function ij(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0;n=+c[t+32>>2];_=+c[t+36>>2];a=+c[i>>2];o=+c[i+8>>2];s=+X(+(a*a+o*o));r=+c[i+4>>2];if(s!=0){o=o*(n/s);r=r<0?-_:_;n=a*(n/s)}else{o=0;r=r<0?-_:_}c[e>>2]=n;c[e+4>>2]=r;c[e+8>>2]=o;return}function nj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0;if((n|0)<=0)return;l=0;do{r=+c[e+32>>2];s=+c[e+36>>2];p=+c[t+(l<<4)>>2];o=+c[t+(l<<4)+8>>2];f=+X(+(p*p+o*o));_=+c[t+(l<<4)+4>>2];if(f!=0){a=o*(r/f);o=_<0?-s:s;r=p*(r/f)}else{a=0;o=_<0?-s:s}c[i+(l<<4)>>2]=r;c[i+(l<<4)+4>>2]=o;c[i+(l<<4)+8>>2]=a;l=l+1|0}while((l|0)!=(n|0));return}function rj(e){e=e|0;var t=0,i=0;i=+c[e+32>>2];t=+wP[o[(o[e>>2]|0)+48>>2]&15](e);+wP[o[(o[e>>2]|0)+48>>2]&15](e);+wP[o[(o[e>>2]|0)+48>>2]&15](e);return+(i+t)}function oj(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function _j(e){e=e|0;return 13636}function sj(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0;n=+c[t+36>>2];o=+c[t+32>>2];a=+c[i+4>>2];r=+c[i+8>>2];s=+X(+(a*a+r*r));if(s!=0){_=r*(n/s);r=+c[i>>2]<0?-o:o;n=a*(n/s)}else{_=0;r=+c[i>>2]<0?-o:o}c[e+4>>2]=n;c[e>>2]=r;c[e+8>>2]=_;return}function aj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0;if((n|0)<=0)return;l=0;do{r=+c[e+36>>2];_=+c[e+32>>2];s=t+(l<<4)|0;p=+c[t+(l<<4)+4>>2];o=+c[t+(l<<4)+8>>2];f=+X(+(p*p+o*o));if(f!=0){a=o*(r/f);o=+c[s>>2]<0?-_:_;r=p*(r/f)}else{a=0;o=+c[s>>2]<0?-_:_}c[i+(l<<4)>>2]=o;c[i+(l<<4)+4>>2]=r;c[i+(l<<4)+8>>2]=a;l=l+1|0}while((l|0)!=(n|0));return}function cj(e){e=e|0;var t=0,i=0;i=+c[e+36>>2];+wP[o[(o[e>>2]|0)+48>>2]&15](e);t=+wP[o[(o[e>>2]|0)+48>>2]&15](e);+wP[o[(o[e>>2]|0)+48>>2]&15](e);return+(i+t)}function fj(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function pj(e){e=e|0;return 13665}function lj(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0;n=+c[t+32>>2];_=+c[t+40>>2];a=+c[i>>2];o=+c[i+4>>2];s=+X(+(a*a+o*o));r=+c[i+8>>2];if(s!=0){o=o*(n/s);r=r<0?-_:_;n=a*(n/s)}else{o=0;r=r<0?-_:_}c[e>>2]=n;c[e+8>>2]=r;c[e+4>>2]=o;return}function uj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0;if((n|0)<=0)return;l=0;do{r=+c[e+32>>2];s=+c[e+40>>2];p=+c[t+(l<<4)>>2];o=+c[t+(l<<4)+4>>2];f=+X(+(p*p+o*o));_=+c[t+(l<<4)+8>>2];if(f!=0){a=o*(r/f);o=_<0?-s:s;r=p*(r/f)}else{a=0;o=_<0?-s:s}c[i+(l<<4)>>2]=r;c[i+(l<<4)+4>>2]=a;c[i+(l<<4)+8>>2]=o;l=l+1|0}while((l|0)!=(n|0));return}function bj(e){e=e|0;var t=0,i=0;i=+c[e+32>>2];t=+wP[o[(o[e>>2]|0)+48>>2]&15](e);+wP[o[(o[e>>2]|0)+48>>2]&15](e);+wP[o[(o[e>>2]|0)+48>>2]&15](e);return+(i+t)}function dj(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0;o[e+4>>2]=35;o[e+8>>2]=0;o[e+12>>2]=-1;o[e+16>>2]=1065353216;o[e+20>>2]=1065353216;o[e+24>>2]=1065353216;c[e+28>>2]=0;c[e+48>>2]=.03999999910593033;o[e>>2]=5856;o[e+56>>2]=1;_=+c[t>>2];r=+c[t+4>>2];i=+c[t+8>>2];i=+c[t+((_<r?_<i?0:2:r<i?1:2)<<2)>>2]*.10000000149011612;if(i<.03999999910593033){a=+Wk(e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=a+ +c[e+32>>2];s=s+ +c[e+36>>2];_=_+ +c[e+40>>2];c[e+48>>2]=i;i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=_-+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[e+32>>2]=a-i;c[e+36>>2]=s-r;c[e+40>>2]=_;c[e+44>>2]=0;n=o[e>>2]|0}else n=5856;_=+wP[o[n+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+c[t+4>>2]*+c[e+20>>2]-s;a=+c[t+8>>2]*+c[e+24>>2]-a;c[e+32>>2]=+c[t>>2]*+c[e+16>>2]-_;c[e+36>>2]=s;c[e+40>>2]=a;c[e+44>>2]=0;o[e+4>>2]=13;return}function hj(e){e=e|0;Xx(e);return}function mj(e){e=e|0;Xx(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function yj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;Zx(e,t,i,n)|0;return 1}function gj(e,t,i,_,s){e=e|0;t=t|0;i=i|0;_=_|0;s=s|0;var a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0;j=p;p=p+160|0;n[e+60>>0]=i&1;if(i){m=+c[_>>2]+-1;v=+c[_+4>>2]+-1;y=+c[_+8>>2]+-1;c[e+4>>2]=m;c[e+8>>2]=v;c[e+12>>2]=y;c[e+16>>2]=0;C=+c[s>>2]+1;k=+c[s+4>>2]+1;S=+c[s+8>>2]+1;c[e+20>>2]=C;c[e+24>>2]=k;c[e+28>>2]=S;c[e+32>>2]=0;c[e+36>>2]=65533/(C-m);c[e+40>>2]=65533/(k-v);c[e+44>>2]=65533/(S-y);c[e+48>>2]=0;n[e+60>>0]=1;a=m+ +(~~((m-m)*(65533/(C-m)))&65534)/(65533/(C-m))+-1;f=v+ +(~~((v-v)*(65533/(k-v)))&65534)/(65533/(k-v))+-1;d=y+ +(~~((y-y)*(65533/(S-y)))&65534)/(65533/(S-y))+-1;if(a<m){c[e+4>>2]=a;R=a}else R=m;if(f<v){c[e+8>>2]=f;w=f}else w=v;if(d<y){c[e+12>>2]=d;g=d}else g=y;d=R+ +((~~((C-R)*(65533/(C-m))+1)&65535|1)&65535)/(65533/(C-m))+1;f=w+ +((~~((k-w)*(65533/(k-v))+1)&65535|1)&65535)/(65533/(k-v))+1;a=g+ +((~~((S-g)*(65533/(S-y))+1)&65535|1)&65535)/(65533/(S-y))+1;if(C<d)c[e+20>>2]=d;else d=C;if(k<f)c[e+24>>2]=f;else f=k;if(S<a)c[e+28>>2]=a;else a=S;c[e+36>>2]=65533/(d-R);c[e+40>>2]=65533/(f-w);c[e+44>>2]=65533/(a-g);c[e+48>>2]=0;o[j+144>>2]=6208;o[j+144+4>>2]=e+104;o[j+144+8>>2]=e;HP[o[(o[t>>2]|0)+8>>2]&127](t,j+144|0,e+4|0,e+20|0);i=o[e+108>>2]|0;o[j+128>>2]=0;o[j+128+4>>2]=0;o[j+128+8>>2]=0;o[j+128+12>>2]=0;l=o[e+128>>2]|0;if((l|0)<(i<<1|0)){if((o[e+132>>2]|0)<(i<<1|0)){if(!i){_=0;s=l}else{o[5637]=(o[5637]|0)+1;_=Qa(i<<5|19)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}s=o[e+128>>2]|0}if((s|0)>0){t=0;do{h=_+(t<<4)|0;b=(o[e+136>>2]|0)+(t<<4)|0;o[h>>2]=o[b>>2];o[h+4>>2]=o[b+4>>2];o[h+8>>2]=o[b+8>>2];o[h+12>>2]=o[b+12>>2];t=t+1|0}while((t|0)!=(s|0))}s=o[e+136>>2]|0;if(s|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=_;o[e+132>>2]=i<<1;s=e+136|0}else s=e+136|0;_=l;do{h=(o[s>>2]|0)+(_<<4)|0;o[h>>2]=o[j+128>>2];o[h+4>>2]=o[j+128+4>>2];o[h+8>>2]=o[j+128+8>>2];o[h+12>>2]=o[j+128+12>>2];_=_+1|0}while((_|0)!=(i<<1|0))}o[e+128>>2]=i<<1}else{o[j+144>>2]=6228;o[j+144+4>>2]=e+64;o[j+112>>2]=-581039253;o[j+112+4>>2]=-581039253;o[j+112+8>>2]=-581039253;c[j+112+12>>2]=0;o[j+96>>2]=1566444395;o[j+96+4>>2]=1566444395;o[j+96+8>>2]=1566444395;c[j+96+12>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,j+144|0,j+112|0,j+96|0);i=o[e+68>>2]|0;l=j+32|0;b=l+64|0;do{o[l>>2]=0;l=l+4|0}while((l|0)<(b|0));h=o[e+88>>2]|0;if((h|0)<(i<<1|0)){if((o[e+92>>2]|0)<(i<<1|0)){if(!i){_=0;s=h}else{o[5637]=(o[5637]|0)+1;_=Qa(i<<7|19)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}s=o[e+88>>2]|0}if((s|0)>0){t=0;do{l=_+(t<<6)|0;u=(o[e+96>>2]|0)+(t<<6)|0;b=l+64|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));t=t+1|0}while((t|0)!=(s|0))}s=o[e+96>>2]|0;if(s|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=_;o[e+92>>2]=i<<1;s=e+96|0}else s=e+96|0;_=h;do{l=(o[s>>2]|0)+(_<<6)|0;u=j+32|0;b=l+64|0;do{o[l>>2]=o[u>>2];l=l+4|0;u=u+4|0}while((l|0)<(b|0));_=_+1|0}while((_|0)!=(i<<1|0))}o[e+88>>2]=i<<1}o[e+56>>2]=0;Qx(e,0,i);if(n[e+60>>0]|0?(o[e+152>>2]|0)==0:0){if(!(o[e+156>>2]|0)){o[5637]=(o[5637]|0)+1;i=Qa(51)|0;if(!i)t=0;else{o[(i+4+15&-16)+-4>>2]=i;t=i+4+15&-16}i=o[e+152>>2]|0;if((i|0)>0){_=0;do{h=t+(_<<5)|0;b=(o[e+160>>2]|0)+(_<<5)|0;o[h>>2]=o[b>>2];o[h+4>>2]=o[b+4>>2];o[h+8>>2]=o[b+8>>2];o[h+12>>2]=o[b+12>>2];o[h+16>>2]=o[b+16>>2];o[h+20>>2]=o[b+20>>2];o[h+24>>2]=o[b+24>>2];o[h+28>>2]=o[b+28>>2];_=_+1|0}while((_|0)!=(i|0))}i=o[e+160>>2]|0;if(i|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=t;o[e+156>>2]=1;_=e+160|0;s=(o[e+152>>2]|0)+1|0;i=t}else{_=e+160|0;s=1;i=o[e+160>>2]|0}o[e+152>>2]=s;o[i>>2]=o[j>>2];o[i+4>>2]=o[j+4>>2];o[i+8>>2]=o[j+8>>2];o[i+12>>2]=o[j+12>>2];o[i+16>>2]=o[j+16>>2];o[i+20>>2]=o[j+20>>2];o[i+24>>2]=o[j+24>>2];o[i+28>>2]=o[j+28>>2];h=o[_>>2]|0;b=o[e+136>>2]|0;r[h>>1]=r[b>>1]|0;r[h+2>>1]=r[b+2>>1]|0;r[h+4>>1]=r[b+4>>1]|0;r[h+6>>1]=r[b+6>>1]|0;r[h+8>>1]=r[b+8>>1]|0;r[h+10>>1]=r[b+10>>1]|0;o[h+12>>2]=0;b=o[b+12>>2]|0;o[h+16>>2]=(b|0)>-1?1:0-b|0}o[e+168>>2]=o[e+152>>2];i=o[e+116>>2]|0;if(i|0){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+116>>2]=0}n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;i=o[e+76>>2]|0;if(!i){n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;e=e+72|0;o[e>>2]=0;p=j;return}if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+76>>2]=0;n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;e=e+72|0;o[e>>2]=0;p=j;return}function vj(e){e=e|0;qa(e);return}function Cj(e,t,i,_){e=e|0;t=t|0;i=i|0;_=_|0;var s=0,a=0,f=0,p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0;a=+c[t>>2];p=(c[u>>2]=a,o[u>>2]|0);m=a<0xde0b6b000000000?p:1566444395;s=+c[t+4>>2];b=(c[u>>2]=s,o[u>>2]|0);g=s<0xde0b6b000000000?b:1566444395;S=+c[t+8>>2];h=(c[u>>2]=S,o[u>>2]|0);R=S<0xde0b6b000000000?h:1566444395;p=a>-0xde0b6b000000000?p:-581039253;b=s>-0xde0b6b000000000?b:-581039253;h=S>-0xde0b6b000000000?h:-581039253;S=+c[t+16>>2];k=S<(o[u>>2]=m,+c[u>>2]);f=(c[u>>2]=S,o[u>>2]|0);m=k?f:m;s=+c[t+20>>2];k=s<(o[u>>2]=g,+c[u>>2]);l=(c[u>>2]=s,o[u>>2]|0);g=k?l:g;a=+c[t+24>>2];k=a<(o[u>>2]=R,+c[u>>2]);d=(c[u>>2]=a,o[u>>2]|0);R=k?d:R;k=(o[u>>2]=p,+c[u>>2])<S?f:p;y=(o[u>>2]=b,+c[u>>2])<s?l:b;h=(o[u>>2]=h,+c[u>>2])<a?d:h;S=+c[t+32>>2];p=S<(o[u>>2]=m,+c[u>>2]);b=(c[u>>2]=S,o[u>>2]|0);m=p?b:m;a=+c[t+36>>2];p=a<(o[u>>2]=g,+c[u>>2]);d=(c[u>>2]=a,o[u>>2]|0);p=p?d:g;s=+c[t+40>>2];f=s<(o[u>>2]=R,+c[u>>2]);l=(c[u>>2]=s,o[u>>2]|0);f=f?l:R;b=(o[u>>2]=k,+c[u>>2])<S?b:k;d=(o[u>>2]=y,+c[u>>2])<a?d:y;h=(o[u>>2]=h,+c[u>>2])<s?l:h;s=(o[u>>2]=b,+c[u>>2]);a=(o[u>>2]=m,+c[u>>2]);if(s-a<.0020000000949949026){b=(c[u>>2]=s+.0010000000474974513,o[u>>2]|0);l=(c[u>>2]=a+-.0010000000474974513,o[u>>2]|0)}else l=m;s=(o[u>>2]=d,+c[u>>2]);a=(o[u>>2]=p,+c[u>>2]);if(s-a<.0020000000949949026){d=(c[u>>2]=s+.0010000000474974513,o[u>>2]|0);p=(c[u>>2]=a+-.0010000000474974513,o[u>>2]|0)}s=(o[u>>2]=h,+c[u>>2]);a=(o[u>>2]=f,+c[u>>2]);if(s-a<.0020000000949949026){h=(c[u>>2]=s+.0010000000474974513,o[u>>2]|0);f=(c[u>>2]=a+-.0010000000474974513,o[u>>2]|0)}m=o[e+8>>2]|0;a=+c[m+4>>2];S=(o[u>>2]=l,+c[u>>2])-a;s=+c[m+8>>2];v=(o[u>>2]=p,+c[u>>2])-s;I=+c[m+12>>2];C=+c[m+36>>2];w=+c[m+40>>2];j=+c[m+44>>2];m=~~(((o[u>>2]=f,+c[u>>2])-I)*j)&65534;a=(o[u>>2]=b,+c[u>>2])-a;s=(o[u>>2]=d,+c[u>>2])-s;h=(~~(((o[u>>2]=h,+c[u>>2])-I)*j+1)&65535|1)&65535;b=o[e+4>>2]|0;p=o[b+4>>2]|0;if((p|0)!=(o[b+8>>2]|0)){e=p;R=b+12|0;R=o[R>>2]|0;k=R+(e<<4)|0;r[k>>1]=~~(S*C)&65534;k=R+(e<<4)+2|0;r[k>>1]=~~(v*w)&65534;k=R+(e<<4)+4|0;r[k>>1]=m;k=R+(e<<4)+6|0;r[k>>1]=~~(a*C+1)&65535|1;k=R+(e<<4)+8|0;r[k>>1]=~~(s*w+1)&65535|1;k=R+(e<<4)+10|0;r[k>>1]=h;e=R+(e<<4)+12|0;o[e>>2]=i<<21|_;_=o[b+4>>2]|0;_=_+1|0;o[b+4>>2]=_;return}d=p|0?p<<1:1;if((p|0)>=(d|0)){e=p;R=b+12|0;R=o[R>>2]|0;k=R+(e<<4)|0;r[k>>1]=~~(S*C)&65534;k=R+(e<<4)+2|0;r[k>>1]=~~(v*w)&65534;k=R+(e<<4)+4|0;r[k>>1]=m;k=R+(e<<4)+6|0;r[k>>1]=~~(a*C+1)&65535|1;k=R+(e<<4)+8|0;r[k>>1]=~~(s*w+1)&65535|1;k=R+(e<<4)+10|0;r[k>>1]=h;e=R+(e<<4)+12|0;o[e>>2]=i<<21|_;_=o[b+4>>2]|0;_=_+1|0;o[b+4>>2]=_;return}if(!d)f=0;else{o[5637]=(o[5637]|0)+1;f=Qa((d<<4|3)+16|0)|0;if(!f)f=0;else{o[(f+4+15&-16)+-4>>2]=f;f=f+4+15&-16}p=o[b+4>>2]|0}if((p|0)>0){l=0;do{e=f+(l<<4)|0;R=(o[b+12>>2]|0)+(l<<4)|0;o[e>>2]=o[R>>2];o[e+4>>2]=o[R+4>>2];o[e+8>>2]=o[R+8>>2];o[e+12>>2]=o[R+12>>2];l=l+1|0}while((l|0)!=(p|0))}p=o[b+12>>2]|0;if(p|0){if(n[b+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[p+-4>>2]|0)}o[b+12>>2]=0}n[b+16>>0]=1;o[b+12>>2]=f;o[b+8>>2]=d;e=o[b+4>>2]|0;R=b+12|0;R=o[R>>2]|0;k=R+(e<<4)|0;r[k>>1]=~~(S*C)&65534;k=R+(e<<4)+2|0;r[k>>1]=~~(v*w)&65534;k=R+(e<<4)+4|0;r[k>>1]=m;k=R+(e<<4)+6|0;r[k>>1]=~~(a*C+1)&65535|1;k=R+(e<<4)+8|0;r[k>>1]=~~(s*w+1)&65535|1;k=R+(e<<4)+10|0;r[k>>1]=h;e=R+(e<<4)+12|0;o[e>>2]=i<<21|_;_=o[b+4>>2]|0;_=_+1|0;o[b+4>>2]=_;return}function wj(e){e=e|0;qa(e);return}function kj(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;D=p;p=p+32|0;h=+c[t>>2];s=(c[u>>2]=h,o[u>>2]|0);g=h<0xde0b6b000000000?s:1566444395;d=+c[t+4>>2];f=(c[u>>2]=d,o[u>>2]|0);v=d<0xde0b6b000000000?f:1566444395;O=+c[t+8>>2];b=(c[u>>2]=O,o[u>>2]|0);w=O<0xde0b6b000000000?b:1566444395;y=+c[t+12>>2];S=y<0?y:0;s=h>-0xde0b6b000000000?s:-581039253;f=d>-0xde0b6b000000000?f:-581039253;b=O>-0xde0b6b000000000?b:-581039253;y=y>0?y:0;O=+c[t+16>>2];I=O<(o[u>>2]=g,+c[u>>2]);_=(c[u>>2]=O,o[u>>2]|0);g=I?_:g;d=+c[t+20>>2];I=d<(o[u>>2]=v,+c[u>>2]);a=(c[u>>2]=d,o[u>>2]|0);v=I?a:v;h=+c[t+24>>2];I=h<(o[u>>2]=w,+c[u>>2]);l=(c[u>>2]=h,o[u>>2]|0);w=I?l:w;m=+c[t+28>>2];S=m<S?m:S;k=(o[u>>2]=s,+c[u>>2])<O?_:s;C=(o[u>>2]=f,+c[u>>2])<d?a:f;f=(o[u>>2]=b,+c[u>>2])<h?l:b;y=y<m?m:y;O=+c[t+32>>2];I=O<(o[u>>2]=g,+c[u>>2]);_=(c[u>>2]=O,o[u>>2]|0);I=I?_:g;h=+c[t+36>>2];j=h<(o[u>>2]=v,+c[u>>2]);s=(c[u>>2]=h,o[u>>2]|0);j=j?s:v;m=+c[t+40>>2];R=m<(o[u>>2]=w,+c[u>>2]);a=(c[u>>2]=m,o[u>>2]|0);R=R?a:w;d=+c[t+44>>2];S=d<S?d:S;w=(o[u>>2]=k,+c[u>>2])<O?_:k;C=(o[u>>2]=C,+c[u>>2])<h?s:C;v=(o[u>>2]=f,+c[u>>2])<m?a:f;d=y<d?d:y;g=o[e+4>>2]|0;_=o[g+4>>2]|0;if((_|0)==(o[g+8>>2]|0)?(T=_|0?_<<1:1,(_|0)<(T|0)):0){if(!T)b=0;else{o[5637]=(o[5637]|0)+1;_=Qa(T<<6|19)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}b=_;_=o[g+4>>2]|0}if((_|0)>0){s=0;do{a=b+(s<<6)|0;f=(o[g+12>>2]|0)+(s<<6)|0;l=a+64|0;do{o[a>>2]=o[f>>2];a=a+4|0;f=f+4|0}while((a|0)<(l|0));s=s+1|0}while((s|0)!=(_|0))}_=o[g+12>>2]|0;if(_|0){if(n[g+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[g+12>>2]=0}n[g+16>>0]=1;o[g+12>>2]=b;o[g+8>>2]=T;_=o[g+4>>2]|0}T=o[g+12>>2]|0;o[T+(_<<6)>>2]=I;o[T+(_<<6)+4>>2]=j;o[T+(_<<6)+8>>2]=R;c[T+(_<<6)+12>>2]=S;o[T+(_<<6)+16>>2]=w;o[T+(_<<6)+20>>2]=C;o[T+(_<<6)+24>>2]=v;c[T+(_<<6)+28>>2]=d;o[T+(_<<6)+32>>2]=-1;o[T+(_<<6)+36>>2]=i;o[T+(_<<6)+40>>2]=r;r=T+(_<<6)+44|0;o[r>>2]=o[D>>2];o[r+4>>2]=o[D+4>>2];o[r+8>>2]=o[D+8>>2];o[r+12>>2]=o[D+12>>2];o[r+16>>2]=o[D+16>>2];o[g+4>>2]=(o[g+4>>2]|0)+1;p=D;return}function Sj(e){e=e|0;var t=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(!t)return;_P[o[o[t>>2]>>2]&255](t);t=o[e+56>>2]|0;if(!t)return;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function Rj(e){e=e|0;var t=0,i=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+56>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function jj(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0;n=p;p=p+96|0;s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);o[n+32>>2]=1065353216;o[n+32+4>>2]=0;o[n+32+4+4>>2]=0;o[n+32+4+8>>2]=0;o[n+32+4+12>>2]=0;o[n+32+20>>2]=1065353216;o[n+32+24>>2]=0;o[n+32+24+4>>2]=0;o[n+32+24+8>>2]=0;o[n+32+24+12>>2]=0;o[n+32+40>>2]=1065353216;a=n+32+44|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;HP[o[(o[e>>2]|0)+8>>2]&127](e,n+32|0,n+16|0,n);_=(s+(+c[n>>2]-+c[n+16>>2])*.5)*2;r=(s+(+c[n+4>>2]-+c[n+16+4>>2])*.5)*2;s=(s+(+c[n+8>>2]-+c[n+16+8>>2])*.5)*2;c[i>>2]=t*.0833333283662796*(r*r+s*s);c[i+4>>2]=t*.0833333283662796*(_*_+s*s);c[i+8>>2]=t*.0833333283662796*(_*_+r*r);c[i+12>>2]=0;p=n;return}function Ij(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;d=p;p=p+2048|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;n=+c[i>>2];_=+c[i+4>>2];r=+c[i+8>>2];if(n*n+_*_+r*r<9999999747378752e-20){u=1;l=0;_=0}else{h=1/+X(+(n*n+_*_+r*r));u=n*h;l=r*h;_=_*h}if((fP[o[(o[t>>2]|0)+96>>2]&127](t)|0)<=0){p=d;return}f=0;n=-0xde0b6b000000000;do{if(((fP[o[(o[t>>2]|0)+96>>2]&127](t)|0)-f|0)<128){i=(fP[o[(o[t>>2]|0)+96>>2]&127](t)|0)-f|0;if((i|0)>0)b=8;else{r=-3.4028234663852886e38;i=-1}}else{i=128;b=8}if((b|0)==8){b=0;s=0;do{EP[o[(o[t>>2]|0)+108>>2]&127](t,s,d+(s<<4)|0);s=s+1|0}while((s|0)!=(i|0));a=0;r=-3.4028234663852886e38;s=-1;do{h=u*+c[d+(a<<4)>>2]+_*+c[d+(a<<4)+4>>2]+l*+c[d+(a<<4)+8>>2];m=h>r;s=m?a:s;r=m?h:r;a=a+1|0}while((a|0)!=(i|0));i=s}if(r>n){m=d+(i<<4)|0;o[e>>2]=o[m>>2];o[e+4>>2]=o[m+4>>2];o[e+8>>2]=o[m+8>>2];o[e+12>>2]=o[m+12>>2];n=r}f=f+128|0}while((f|0)<(fP[o[(o[t>>2]|0)+96>>2]&127](t)|0));p=d;return}function Tj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0;w=p;p=p+2048|0;if((n|0)>0)r=0;else{p=w;return}do{c[i+(r<<4)+12>>2]=-0xde0b6b000000000;r=r+1|0}while((r|0)!=(n|0));g=0;do{if((fP[o[(o[e>>2]|0)+96>>2]&127](e)|0)>0){m=t+(g<<4)|0;y=t+(g<<4)+4|0;b=t+(g<<4)+8|0;d=i+(g<<4)+12|0;h=i+(g<<4)|0;v=0;do{if(((fP[o[(o[e>>2]|0)+96>>2]&127](e)|0)-v|0)<128){r=(fP[o[(o[e>>2]|0)+96>>2]&127](e)|0)-v|0;if((r|0)>0)C=10;else{s=-3.4028234663852886e38;r=-1}}else{r=128;C=10}if((C|0)==10){C=0;_=0;do{EP[o[(o[e>>2]|0)+108>>2]&127](e,_,w+(_<<4)|0);_=_+1|0}while((_|0)!=(r|0));a=+c[m>>2];f=+c[y>>2];l=+c[b>>2];u=0;s=-3.4028234663852886e38;_=-1;do{k=a*+c[w+(u<<4)>>2]+f*+c[w+(u<<4)+4>>2]+l*+c[w+(u<<4)+8>>2];S=k>s;_=S?u:_;s=S?k:s;u=u+1|0}while((u|0)!=(r|0));r=_}if(s>+c[d>>2]){S=w+(r<<4)|0;o[h>>2]=o[S>>2];o[h+4>>2]=o[S+4>>2];o[h+8>>2]=o[S+8>>2];o[h+12>>2]=o[S+12>>2];c[d>>2]=s}v=v+128|0}while((v|0)<(fP[o[(o[e>>2]|0)+96>>2]&127](e)|0))}g=g+1|0}while((g|0)!=(n|0));p=w;return}function Dj(e,t){e=e|0;t=t|0;var i=0,_=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0;re=p;p=p+288|0;i=o[e+56>>2]|0;if(i|0?(_P[o[o[i>>2]>>2]&255](i),_=o[e+56>>2]|0,_|0):0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[5637]=(o[5637]|0)+1;i=Qa(151)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i>>2]=5688;n[i+20>>0]=1;o[i+16>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;n[i+40>>0]=1;o[i+36>>2]=0;o[i+28>>2]=0;o[i+32>>2]=0;n[i+60>>0]=1;o[i+56>>2]=0;o[i+48>>2]=0;o[i+52>>2]=0;o[e+56>>2]=i;b=0;l=0;ne=0;W=0;while(1){if((b|0)>=(fP[o[(o[e>>2]|0)+96>>2]&127](e)|0))break;do if((W|0)==(l|0)){a=l|0?l<<1:1;if((l|0)<(a|0)){if((a|0)!=0?(o[5637]=(o[5637]|0)+1,d=Qa((a<<4|3)+16|0)|0,(d|0)!=0):0){o[(d+4+15&-16)+-4>>2]=d;i=d+4+15&-16}else i=0;if((l|0)<=0){if(!ne){f=l;_=a;break}}else{_=0;do{ie=i+(_<<4)|0;te=ne+(_<<4)|0;o[ie>>2]=o[te>>2];o[ie+4>>2]=o[te+4>>2];o[ie+8>>2]=o[te+8>>2];o[ie+12>>2]=o[te+12>>2];_=_+1|0}while((_|0)!=(l|0))}o[5638]=(o[5638]|0)+1;qa(o[ne+-4>>2]|0);f=l;_=a}else{f=l;_=l;i=ne}}else{f=W;_=l;i=ne}while(0);l=i+(W<<4)|0;o[l>>2]=o[re+200>>2];o[l+4>>2]=o[re+200+4>>2];o[l+8>>2]=o[re+200+8>>2];o[l+12>>2]=o[re+200+12>>2];EP[o[(o[e>>2]|0)+108>>2]&127](e,b,l);b=b+1|0;l=_;ne=i;W=f+1|0}n[re+136+16>>0]=1;ie=re+136+12|0;o[ie>>2]=0;o[re+136+4>>2]=0;o[re+136+8>>2]=0;n[re+136+36>>0]=1;te=re+136+32|0;o[te>>2]=0;o[re+136+24>>2]=0;o[re+136+28>>2]=0;n[re+136+56>>0]=1;ee=re+136+52|0;o[ee>>2]=0;o[re+136+44>>2]=0;o[re+136+48>>2]=0;if(t){if((W|0)>0){x=0;_=0;f=0;a=0;while(1){i=x;x=x+1|0;if((x|0)<(W|0)){T=ne+(i<<4)|0;D=ne+(i<<4)+4|0;j=ne+(i<<4)+8|0;I=x;i=a;do{a=I;I=I+1|0;if((I|0)<(W|0)){S=ne+(a<<4)|0;R=ne+(a<<4)+4|0;t=ne+(a<<4)+8|0;w=I;do{O=+c[T>>2];P=+c[S>>2]-O;L=+c[D>>2];C=+c[R>>2]-L;M=+c[j>>2];k=+c[t>>2]-M;O=+c[ne+(w<<4)>>2]-O;L=+c[ne+(w<<4)+4>>2]-L;M=+c[ne+(w<<4)+8>>2]-M;h=1;d=0;while(1){g=(C*M-k*L)*h;v=(k*O-P*M)*h;m=(P*L-C*O)*h;e:do if(m*m+(g*g+v*v)>9999999747378752e-20){y=1/+X(+(m*m+(g*g+v*v)));if((i|0)>0){a=0;do{if(g*y*+c[f+(a<<4)>>2]+v*y*+c[f+(a<<4)+4>>2]+m*y*+c[f+(a<<4)+8>>2]>.9990000128746033)break e;a=a+1|0}while((a|0)<(i|0))}h=g*y*+c[T>>2]+v*y*+c[D>>2]+m*y*+c[j>>2];a=0;do{if(g*y*+c[ne+(a<<4)>>2]+v*y*+c[ne+(a<<4)+4>>2]+m*y*+c[ne+(a<<4)+8>>2]-h+-.009999999776482582>0)break e;a=a+1|0}while((a|0)<(W|0));do if((i|0)==(_|0)){b=_|0?_<<1:1;if((_|0)<(b|0)){do if(!b)l=0;else{o[5637]=(o[5637]|0)+1;a=Qa((b<<4|3)+16|0)|0;if(!a){l=0;break}o[(a+4+15&-16)+-4>>2]=a;l=a+4+15&-16}while(0);if((_|0)<=0){if(!f){a=_;_=b;f=l;break}}else{a=0;do{q=l+(a<<4)|0;Q=f+(a<<4)|0;o[q>>2]=o[Q>>2];o[q+4>>2]=o[Q+4>>2];o[q+8>>2]=o[Q+8>>2];o[q+12>>2]=o[Q+12>>2];a=a+1|0}while((a|0)!=(_|0))}o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0);a=_;_=b;f=l}else a=_}else a=i;while(0);c[f+(a<<4)>>2]=g*y;c[f+(a<<4)+4>>2]=v*y;c[f+(a<<4)+8>>2]=m*y;c[f+(a<<4)+12>>2]=-h;i=i+1|0}while(0);d=d+1|0;if((d|0)==2)break;else h=-1}w=w+1|0}while((w|0)!=(W|0))}}while((I|0)!=(W|0))}else i=a;if((x|0)==(W|0))break;else a=i}if((i|0)>0){b=0;d=0;t=0;while(1){q=f+(t<<4)|0;o[re+216>>2]=o[q>>2];o[re+216+4>>2]=o[q+4>>2];o[re+216+8>>2]=o[q+8>>2];h=+c[f+(t<<4)+12>>2];h=h-+wP[o[(o[e>>2]|0)+48>>2]&15](e);do if((t|0)==(b|0)){l=b|0?b<<1:1;if((b|0)<(l|0)){if((l|0)!=0?(o[5637]=(o[5637]|0)+1,B=Qa((l<<4|3)+16|0)|0,(B|0)!=0):0){o[(B+4+15&-16)+-4>>2]=B;a=B+4+15&-16}else a=0;if((b|0)<=0){if(!d){_=b;break}}else{_=0;do{q=a+(_<<4)|0;Q=d+(_<<4)|0;o[q>>2]=o[Q>>2];o[q+4>>2]=o[Q+4>>2];o[q+8>>2]=o[Q+8>>2];o[q+12>>2]=o[Q+12>>2];_=_+1|0}while((_|0)!=(b|0))}o[5638]=(o[5638]|0)+1;qa(o[d+-4>>2]|0);_=b}else{_=b;l=b;a=d}}else{_=t;l=b;a=d}while(0);q=a+(_<<4)|0;o[q>>2]=o[re+216>>2];o[q+4>>2]=o[re+216+4>>2];o[q+8>>2]=o[re+216+8>>2];c[a+(_<<4)+12>>2]=h;t=t+1|0;if((t|0)<(i|0)){b=l;d=a}else break}if((t|0)>0){T=0;l=0;_=0;i=0;do{j=T;T=T+1|0;if((T|0)<(t|0)){I=T;do{S=I;I=I+1|0;if((I|0)<(t|0)){R=I;do{g=+c[a+(S<<4)+4>>2];h=+c[a+(R<<4)+8>>2];m=+c[a+(S<<4)+8>>2];v=+c[a+(R<<4)+4>>2];C=+c[a+(R<<4)>>2];k=+c[a+(S<<4)>>2];y=+c[a+(j<<4)+8>>2];O=+c[a+(j<<4)+4>>2];L=+c[a+(j<<4)>>2];e:do if((((v*k-g*C)*(v*k-g*C)+((g*h-m*v)*(g*h-m*v)+(m*C-h*k)*(m*C-h*k))>9999999747378752e-20?(C*O-v*L)*(C*O-v*L)+((v*y-h*O)*(v*y-h*O)+(h*L-C*y)*(h*L-C*y))>9999999747378752e-20:0)?(g*L-k*O)*(g*L-k*O)+((m*O-g*y)*(m*O-g*y)+(k*y-m*L)*(k*y-m*L))>9999999747378752e-20:0)?(A=y*(v*k-g*C)+(O*(m*C-h*k)+(g*h-m*v)*L),+N(+A)>9.999999974752427e-7):0){P=+c[a+(j<<4)+12>>2];F=+c[a+(S<<4)+12>>2];oe=+c[a+(R<<4)+12>>2];M=-1/A*((m*O-g*y)*oe+((g*h-m*v)*P+(v*y-h*O)*F));m=-1/A*((k*y-m*L)*oe+((m*C-h*k)*P+(h*L-C*y)*F));h=-1/A*((g*L-k*O)*oe+((v*k-g*C)*P+(C*O-v*L)*F));b=0;do{if(+c[a+(b<<4)+12>>2]+(M*+c[a+(b<<4)>>2]+m*+c[a+(b<<4)+4>>2]+h*+c[a+(b<<4)+8>>2])+-.009999999776482582>0)break e;b=b+1|0}while((b|0)<(t|0));do if((i|0)==(l|0)){w=l|0?l<<1:1;if((l|0)>=(w|0)){b=l;break}do if(!w)d=0;else{o[5637]=(o[5637]|0)+1;b=Qa((w<<4|3)+16|0)|0;if(!b){d=0;break}o[(b+4+15&-16)+-4>>2]=b;d=b+4+15&-16}while(0);if((l|0)<=0){if(!_){b=l;l=w;_=d;break}}else{b=0;do{q=d+(b<<4)|0;Q=_+(b<<4)|0;o[q>>2]=o[Q>>2];o[q+4>>2]=o[Q+4>>2];o[q+8>>2]=o[Q+8>>2];o[q+12>>2]=o[Q+12>>2];b=b+1|0}while((b|0)!=(l|0))}o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);b=l;l=w;_=d}else b=i;while(0);c[_+(b<<4)>>2]=M;c[_+(b<<4)+4>>2]=m;c[_+(b<<4)+8>>2]=h;c[_+(b<<4)+12>>2]=0;i=i+1|0}while(0);R=R+1|0}while((R|0)!=(t|0))}}while((I|0)!=(t|0))}}while((T|0)!=(t|0))}else{_=0;i=0}}else{a=0;_=0;i=0}}else{f=0;a=0;_=0;i=0}Vp(re+136|0,_,i);if(_|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}if(a|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}if(f|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}}else Vp(re+136|0,ne,W);x=o[re+136+44>>2]|0;if((x|0)>0){o[5637]=(o[5637]|0)+1;i=Qa((x<<4|3)+16|0)|0;if(!i)_=0;else{o[(i+4+15&-16)+-4>>2]=i;_=i+4+15&-16}i=0;do{q=_+(i<<4)|0;o[q>>2]=o[re+120>>2];o[q+4>>2]=o[re+120+4>>2];o[q+8>>2]=o[re+120+8>>2];o[q+12>>2]=o[re+120+12>>2];i=i+1|0}while((i|0)!=(x|0))}else _=0;n[re+96+16>>0]=1;q=re+96+12|0;o[q>>2]=0;Q=re+96+4|0;o[Q>>2]=0;o[re+96+8>>2]=0;f=re+264|0;b=f+19|0;do{n[f>>0]=0;f=f+1|0}while((f|0)<(b|0));if((x|0)<0)_t();if((x|0)>0){Oj(re+96|0,x);i=o[q>>2]|0;a=0;do{f=i+(a*36|0)|0;n[f+16>>0]=1;o[f+4>>2]=0;o[f+4+4>>2]=0;o[f+4+8>>2]=0;f=f+20|0;l=re+264+3|0;b=f+16|0;do{n[f>>0]=n[l>>0]|0;f=f+1|0;l=l+1|0}while((f|0)<(b|0));a=a+1|0}while((a|0)!=(x|0))}o[Q>>2]=x;d=o[re+136+4>>2]|0;b=o[e+56>>2]|0;l=o[b+8>>2]|0;if((l|0)<(d|0)){if((o[b+12>>2]|0)<(d|0)){if(!d){i=0;a=l}else{o[5637]=(o[5637]|0)+1;i=Qa((d<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}a=o[b+8>>2]|0}if((a|0)>0){f=0;do{K=i+(f<<4)|0;Y=(o[b+16>>2]|0)+(f<<4)|0;o[K>>2]=o[Y>>2];o[K+4>>2]=o[Y+4>>2];o[K+8>>2]=o[Y+8>>2];o[K+12>>2]=o[Y+12>>2];f=f+1|0}while((f|0)!=(a|0))}a=o[b+16>>2]|0;if(a|0){if(n[b+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[b+16>>2]=0}n[b+20>>0]=1;o[b+16>>2]=i;o[b+12>>2]=d;a=b+16|0}else a=b+16|0;i=l;do{K=(o[a>>2]|0)+(i<<4)|0;o[K>>2]=o[re+80>>2];o[K+4>>2]=o[re+80+4>>2];\no[K+8>>2]=o[re+80+8>>2];o[K+12>>2]=o[re+80+12>>2];i=i+1|0}while((i|0)!=(d|0))}o[b+8>>2]=d;if((d|0)>0){i=0;do{K=(o[(o[e+56>>2]|0)+16>>2]|0)+(i<<4)|0;Y=(o[ie>>2]|0)+(i<<4)|0;o[K>>2]=o[Y>>2];o[K+4>>2]=o[Y+4>>2];o[K+8>>2]=o[Y+8>>2];o[K+12>>2]=o[Y+12>>2];i=i+1|0}while((i|0)!=(d|0))}if((x|0)>0){D=0;do{j=(o[te>>2]|0)+((o[(o[ee>>2]|0)+(D<<2)>>2]|0)*12|0)|0;T=j;a=0;do{I=T+4|0;R=o[T+((o[I>>2]|0)*12|0)+8>>2]|0;w=o[q>>2]|0;S=w+(D*36|0)+4|0;i=o[S>>2]|0;t=w+(D*36|0)+8|0;if((i|0)==(o[t>>2]|0)?(G=i|0?i<<1:1,(i|0)<(G|0)):0){if(!G)d=0;else{o[5637]=(o[5637]|0)+1;i=Qa((G<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}d=i;i=o[S>>2]|0}b=w+(D*36|0)+12|0;l=o[b>>2]|0;if((i|0)<=0)if(!l)f=w+(D*36|0)+16|0;else $=132;else{f=0;do{o[d+(f<<2)>>2]=o[l+(f<<2)>>2];f=f+1|0}while((f|0)!=(i|0));$=132}if(($|0)==132){$=0;i=w+(D*36|0)+16|0;if(n[i>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[b>>2]=0;f=i;i=o[S>>2]|0}n[f>>0]=1;o[b>>2]=d;o[t>>2]=G}o[(o[w+(D*36|0)+12>>2]|0)+(i<<2)>>2]=R;o[S>>2]=(o[S>>2]|0)+1;Y=o[T+8>>2]|0;K=o[ie>>2]|0;y=+c[K+(Y<<4)>>2]-+c[K+(R<<4)>>2];g=+c[K+(Y<<4)+4>>2]-+c[K+(R<<4)+4>>2];h=+c[K+(Y<<4)+8>>2]-+c[K+(R<<4)+8>>2];m=1/+X(+(y*y+g*g+h*h));if((a|0)<2){c[re+216+(a<<4)>>2]=y*m;c[re+216+(a<<4)+4>>2]=g*m;c[re+216+(a<<4)+8>>2]=h*m;c[re+216+(a<<4)+12>>2]=0;a=a+1|0}K=T+((o[I>>2]|0)*12|0)|0;T=K+((o[K>>2]|0)*12|0)|0}while((T|0)!=(j|0));i=_+(D<<4)|0;if((a|0)==2){M=+c[re+216+4>>2];P=+c[re+216+24>>2];A=+c[re+216+8>>2];F=+c[re+216+20>>2];L=+c[re+216+16>>2];O=+c[re+216>>2];Y=_+(D<<4)+4|0;K=_+(D<<4)+8|0;c[_+(D<<4)+12>>2]=0;oe=1/+X(+((M*P-A*F)*(M*P-A*F)+(A*L-P*O)*(A*L-P*O)+(F*O-M*L)*(F*O-M*L)));c[i>>2]=(M*P-A*F)*oe;c[Y>>2]=(A*L-P*O)*oe;c[K>>2]=(F*O-M*L)*oe;b=o[q>>2]|0;c[b+(D*36|0)+20>>2]=(M*P-A*F)*oe;o[b+(D*36|0)+24>>2]=o[Y>>2];o[b+(D*36|0)+28>>2]=o[K>>2];c[b+(D*36|0)+32>>2]=1.0000000150474662e30}else{o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;b=o[q>>2]|0}f=o[b+(D*36|0)+4>>2]|0;if((f|0)>0){l=o[(o[e+56>>2]|0)+16>>2]|0;m=+c[i>>2];y=+c[_+(D<<4)+4>>2];g=+c[_+(D<<4)+8>>2];i=o[b+(D*36|0)+12>>2]|0;h=1.0000000150474662e30;a=0;do{K=o[i+(a<<2)>>2]|0;oe=+c[l+(K<<4)>>2]*m+ +c[l+(K<<4)+4>>2]*y+ +c[l+(K<<4)+8>>2]*g;h=h>oe?oe:h;a=a+1|0}while((a|0)!=(f|0))}else h=1.0000000150474662e30;c[b+(D*36|0)+32>>2]=-h;D=D+1|0}while((D|0)!=(x|0))}if((o[Q>>2]|0)>0){b=0;i=0;l=0;while(1){do if((b|0)==(i|0)){i=b|0?b<<1:1;if((b|0)<(i|0)){if((i|0)!=0?(o[5637]=(o[5637]|0)+1,E=Qa((i<<2|3)+16|0)|0,(E|0)!=0):0){o[(E+4+15&-16)+-4>>2]=E;f=E+4+15&-16}else f=0;if((b|0)<=0){if(!l)break}else{a=0;do{o[f+(a<<2)>>2]=o[l+(a<<2)>>2];a=a+1|0}while((a|0)!=(b|0))}o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}else{i=b;f=l}}else f=l;while(0);o[f+(b<<2)>>2]=b;b=b+1|0;if((b|0)>=(o[Q>>2]|0))break;else l=f}G=re+56+12|0;E=re+56+4|0;while(1){t=b+-1|0;a=o[f+(t<<2)>>2]|0;o[5637]=(o[5637]|0)+1;i=Qa(23)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i>>2]=a;K=o[q>>2]|0;m=+c[K+(a*36|0)+20>>2];y=+c[K+(a*36|0)+24>>2];h=+c[K+(a*36|0)+28>>2];e:do if((b|0)>1){l=1;d=1;a=i;i=t;R=t;while(1){S=d;t=a;t:while(1){a=o[q>>2]|0;do{K=i;i=i+-1|0;if((K|0)<=0){i=a;B=S;W=t;b=R;break e}w=o[f+(i<<2)>>2]|0}while(!(m*+c[a+(w*36|0)+20>>2]+y*+c[a+(w*36|0)+24>>2]+h*+c[a+(w*36|0)+28>>2]>.9990000128746033));do if((S|0)==(l|0)){l=S|0?S<<1:1;if((S|0)<(l|0)){do if(!l)b=0;else{o[5637]=(o[5637]|0)+1;a=Qa((l<<2|3)+16|0)|0;if(!a){b=0;break}o[(a+4+15&-16)+-4>>2]=a;b=a+4+15&-16}while(0);if((S|0)<=0){if(!t){t=b;break}}else{a=0;do{o[b+(a<<2)>>2]=o[t+(a<<2)>>2];a=a+1|0}while((a|0)!=(S|0))}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=b}else l=S}while(0);o[t+(S<<2)>>2]=w;S=S+1|0;a=0;while(1){d=f+(a<<2)|0;if((o[d>>2]|0)==(w|0))break;a=a+1|0;if((a|0)>=(R|0))continue t}if((a|0)<(R|0))break}b=R+-1|0;K=f+(b<<2)|0;o[d>>2]=o[K>>2];o[K>>2]=w;if((R|0)>1){d=S;a=t;R=b}else{d=S;a=t;$=161;break}}}else{l=1;d=1;a=i;i=t;b=t;$=161}while(0);e:do if(($|0)==161){$=0;S=d;w=a;while(1){a=o[q>>2]|0;do{K=i;i=i+-1|0;if((K|0)<=0){i=a;B=S;W=w;break e}t=o[f+(i<<2)>>2]|0}while(!(m*+c[a+(t*36|0)+20>>2]+y*+c[a+(t*36|0)+24>>2]+h*+c[a+(t*36|0)+28>>2]>.9990000128746033));do if((S|0)==(l|0)){l=S|0?S<<1:1;if((S|0)<(l|0)){do if(!l)a=0;else{o[5637]=(o[5637]|0)+1;a=Qa((l<<2|3)+16|0)|0;if(!a){a=0;break}o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}while(0);if((S|0)<=0){if(!w)break}else{d=0;do{o[a+(d<<2)>>2]=o[w+(d<<2)>>2];d=d+1|0}while((d|0)!=(S|0))}o[5638]=(o[5638]|0)+1;qa(o[w+-4>>2]|0)}else{l=S;a=w}}else a=w;while(0);o[a+(S<<2)>>2]=t;S=S+1|0;w=a}}while(0);if((B|0)>1){n[re+56+16>>0]=1;o[G>>2]=0;o[E>>2]=0;o[re+56+8>>2]=0;h=0;m=0;y=0;l=0;I=0;do{a=o[W+(I<<2)>>2]|0;h=+c[i+(a*36|0)+20>>2]+h;m=+c[i+(a*36|0)+24>>2]+m;y=+c[i+(a*36|0)+28>>2]+y;j=i+(a*36|0)+4|0;if((o[j>>2]|0)>0){R=i+(a*36|0)+12|0;i=l;S=0;while(1){w=o[(o[R>>2]|0)+(S<<2)>>2]|0;K=(o[(o[e+56>>2]|0)+16>>2]|0)+(w<<4)|0;o[re+216>>2]=o[K>>2];o[re+216+4>>2]=o[K+4>>2];o[re+216+8>>2]=o[K+8>>2];o[re+216+12>>2]=o[K+12>>2];e:do if((i|0)>0){a=o[G>>2]|0;l=0;while(1){if((o[a+(l*24|0)+20>>2]|0)==(w|0))break e;l=l+1|0;if((l|0)>=(i|0)){$=263;break}}}else $=263;while(0);if(($|0)==263){$=0;o[re>>2]=o[re+216>>2];o[re+4>>2]=o[re+216+4>>2];o[re+8>>2]=o[re+216+8>>2];o[re+12>>2]=o[re+216+12>>2];do if((i|0)==(o[re+56+8>>2]|0)){t=i|0?i<<1:1;if((i|0)>=(t|0))break;if(!t)d=0;else{o[5637]=(o[5637]|0)+1;i=Qa((t*24|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}d=i;i=o[E>>2]|0}l=o[G>>2]|0;if((i|0)<=0){if(l)$=272}else{a=0;do{$=d+(a*24|0)|0;K=l+(a*24|0)|0;o[$>>2]=o[K>>2];o[$+4>>2]=o[K+4>>2];o[$+8>>2]=o[K+8>>2];o[$+12>>2]=o[K+12>>2];o[$+16>>2]=o[K+16>>2];o[$+20>>2]=o[K+20>>2];a=a+1|0}while((a|0)!=(i|0));$=272}if(($|0)==272){$=0;if(n[re+56+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0);i=o[E>>2]|0}o[G>>2]=0}n[re+56+16>>0]=1;o[G>>2]=d;o[re+56+8>>2]=t}while(0);K=o[G>>2]|0;Y=K+(i*24|0)|0;o[Y>>2]=o[re>>2];o[Y+4>>2]=o[re+4>>2];o[Y+8>>2]=o[re+8>>2];o[Y+12>>2]=o[re+12>>2];o[Y+16>>2]=o[re+16>>2];o[K+(i*24|0)+20>>2]=w;i=(o[E>>2]|0)+1|0;o[E>>2]=i}S=S+1|0;if((S|0)>=(o[j>>2]|0)){l=i;break}}}I=I+1|0;i=o[q>>2]|0}while((I|0)<(B|0));n[re+20+16>>0]=1;o[re+20+12>>2]=0;o[re+20+4>>2]=0;o[re+20+8>>2]=0;K=i+20+((o[W>>2]|0)*9<<2)|0;o[re+20+20>>2]=o[K>>2];o[re+20+20+4>>2]=o[K+4>>2];o[re+20+20+8>>2]=o[K+8>>2];o[re+20+20+12>>2]=o[K+12>>2];P=1/+X(+(h*h+m*m+y*y));F=h*P;A=m*P;P=y*P;if(+N(+P)>.7071067690849304){M=1/+X(+(P*P+A*A));v=F*-(P*M);C=0;k=A*M;O=-(P*M);L=(P*P+A*A)*M;M=-(F*(A*M))}else{M=1/+X(+(F*F+A*A));v=(F*F+A*A)*M;C=-(A*M);k=0;O=F*M;L=-(P*(F*M));M=P*-(A*M)}if((l|0)<2)if((l|0)>0){i=l;l=0;d=0;S=0;while(1){R=o[G>>2]|0;do if((l|0)==(d|0)){w=d|0?d<<1:1;if((d|0)>=(w|0)){t=d;a=S;break}do if(!w)a=0;else{o[5637]=(o[5637]|0)+1;i=Qa((w*24|3)+16|0)|0;if(!i){a=0;d=l;break}o[(i+4+15&-16)+-4>>2]=i;a=i+4+15&-16;d=l}while(0);if((d|0)<=0){if(S|0)$=209}else{i=0;do{$=a+(i*24|0)|0;K=S+(i*24|0)|0;o[$>>2]=o[K>>2];o[$+4>>2]=o[K+4>>2];o[$+8>>2]=o[K+8>>2];o[$+12>>2]=o[K+12>>2];o[$+16>>2]=o[K+16>>2];o[$+20>>2]=o[K+20>>2];i=i+1|0}while((i|0)!=(d|0));$=209}if(($|0)==209){$=0;o[5638]=(o[5638]|0)+1;qa(o[S+-4>>2]|0)}t=l;i=o[E>>2]|0;d=w}else{t=l;a=S}while(0);K=a+(t*24|0)|0;o[K>>2]=o[R>>2];o[K+4>>2]=o[R+4>>2];o[K+8>>2]=o[R+8>>2];o[K+12>>2]=o[R+12>>2];o[K+16>>2]=o[R+16>>2];o[K+20>>2]=o[R+20>>2];l=l+1|0;if((l|0)<(i|0))S=a;else{$=278;break}}}else{i=0;a=0;$=307}else{i=o[G>>2]|0;a=l;d=0;do{if(C*+c[i+(d*24|0)>>2]+O*+c[i+(d*24|0)+4>>2]+k*+c[i+(d*24|0)+8>>2]<C*+c[i>>2]+O*+c[i+4>>2]+k*+c[i+8>>2]){o[re+216>>2]=o[i>>2];o[re+216+4>>2]=o[i+4>>2];o[re+216+8>>2]=o[i+8>>2];o[re+216+12>>2]=o[i+12>>2];o[re+216+16>>2]=o[i+16>>2];o[re+216+20>>2]=o[i+20>>2];a=i+(d*24|0)|0;o[i>>2]=o[a>>2];o[i+4>>2]=o[a+4>>2];o[i+8>>2]=o[a+8>>2];o[i+12>>2]=o[a+12>>2];o[i+16>>2]=o[a+16>>2];o[i+20>>2]=o[a+20>>2];a=i+(d*24|0)|0;o[a>>2]=o[re+216>>2];o[a+4>>2]=o[re+216+4>>2];o[a+8>>2]=o[re+216+8>>2];o[a+12>>2]=o[re+216+12>>2];o[a+16>>2]=o[re+216+16>>2];o[a+20>>2]=o[re+216+20>>2];a=l}d=d+1|0}while((d|0)<(a|0));c[i+16>>2]=-1.0000000150474662e30;if((a|0)>1){i=o[G>>2]|0;a=o[E>>2]|0;y=+c[i+4>>2];l=1;do{m=+c[i+(l*24|0)>>2]-+c[i>>2];oe=+c[i+(l*24|0)+4>>2]-y;h=+c[i+(l*24|0)+8>>2]-+c[i+8>>2];g=L*m+M*oe+v*h;h=C*m+O*oe+k*h;if(g*g+h*h<1.1920928955078125e-7)c[i+(l*24|0)+16>>2]=0;else{m=+N(+g);if(!(h>=0))h=2.356194496154785-(h+m)/(m-h)*.7853981852531433;else h=.7853981852531433-(h-m)/(h+m)*.7853981852531433;c[i+(l*24|0)+16>>2]=g<0?-h:h}l=l+1|0}while((l|0)<(a|0))}o[re+216>>2]=o[i>>2];o[re+216+4>>2]=o[i+4>>2];o[re+216+8>>2]=o[i+8>>2];o[re+216+12>>2]=o[i+12>>2];Lj(re+56|0,re+216|0,1,(o[E>>2]|0)+-1|0);a=o[G>>2]|0;o[5637]=(o[5637]|0)+1;i=Qa(43)|0;if(!i)d=0;else{o[(i+4+15&-16)+-4>>2]=i;d=i+4+15&-16}l=o[G>>2]|0;o[d>>2]=o[a>>2];o[d+4>>2]=o[a+4>>2];o[d+8>>2]=o[a+8>>2];o[d+12>>2]=o[a+12>>2];o[d+16>>2]=o[a+16>>2];o[d+20>>2]=o[a+20>>2];o[5637]=(o[5637]|0)+1;i=Qa(67)|0;if(!i)a=0;else{o[(i+4+15&-16)+-4>>2]=i;a=i+4+15&-16}o[a>>2]=o[d>>2];o[a+4>>2]=o[d+4>>2];o[a+8>>2]=o[d+8>>2];o[a+12>>2]=o[d+12>>2];o[a+16>>2]=o[d+16>>2];o[a+20>>2]=o[d+20>>2];if(d|0){o[5638]=(o[5638]|0)+1;qa(o[d+-4>>2]|0)}K=a+24|0;o[K>>2]=o[l+24>>2];o[K+4>>2]=o[l+24+4>>2];o[K+8>>2]=o[l+24+8>>2];o[K+12>>2]=o[l+24+12>>2];o[K+16>>2]=o[l+24+16>>2];o[K+20>>2]=o[l+24+20>>2];if((o[E>>2]|0)==2){i=2;l=2}else{t=2;l=2;w=2;i=2;do{e:do if((t|0)>1){K=o[G>>2]|0;j=K+(i*24|0)|0;h=+c[j>>2];m=+c[K+(i*24|0)+4>>2];y=+c[K+(i*24|0)+8>>2];while(1){K=t+-2|0;d=t+-1|0;L=+c[a+(K*24|0)>>2];M=L-+c[a+(d*24|0)>>2];k=+c[a+(K*24|0)+4>>2];C=k-+c[a+(d*24|0)+4>>2];oe=+c[a+(K*24|0)+8>>2];O=oe-+c[a+(d*24|0)+8>>2];if((M*(k-m)-C*(L-h))*P+(F*(C*(oe-y)-O*(k-m))+A*(O*(L-h)-M*(oe-y)))>0)break;if((d|0)>1){t=d;l=d}else{t=d;l=d;break e}}do if((t|0)==(w|0)){R=w<<1;if((w|0)>=(R|0)){t=w;break}if(w){o[5637]=(o[5637]|0)+1;d=Qa((w*48|3)+16|0)|0;if(!d)d=0;else{o[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}if((l|0)>0){S=d;t=l;$=236}}else{S=0;d=0;t=0;$=236}if(($|0)==236){$=0;w=0;do{K=d+(w*24|0)|0;Y=a+(w*24|0)|0;o[K>>2]=o[Y>>2];o[K+4>>2]=o[Y+4>>2];o[K+8>>2]=o[Y+8>>2];o[K+12>>2]=o[Y+12>>2];o[K+16>>2]=o[Y+16>>2];o[K+20>>2]=o[Y+20>>2];w=w+1|0}while((w|0)!=(t|0));d=S}o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0);t=l;w=R;a=d}while(0);t=a+(t*24|0)|0;o[t>>2]=o[j>>2];o[t+4>>2]=o[j+4>>2];o[t+8>>2]=o[j+8>>2];o[t+12>>2]=o[j+12>>2];o[t+16>>2]=o[j+16>>2];o[t+20>>2]=o[j+20>>2];l=l+1|0;t=l}while(0);if((t|0)==1){S=(o[G>>2]|0)+(i*24|0)|0;do if((w|0)==1){o[5637]=(o[5637]|0)+1;d=Qa(67)|0;if(!d)t=0;else{o[(d+4+15&-16)+-4>>2]=d;t=d+4+15&-16}if((l|0)<=0){if(!a){d=l;w=2;a=t;break}}else{d=0;do{K=t+(d*24|0)|0;Y=a+(d*24|0)|0;o[K>>2]=o[Y>>2];o[K+4>>2]=o[Y+4>>2];o[K+8>>2]=o[Y+8>>2];o[K+12>>2]=o[Y+12>>2];o[K+16>>2]=o[Y+16>>2];o[K+20>>2]=o[Y+20>>2];d=d+1|0}while((d|0)!=(l|0))}o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0);d=l;w=2;a=t}else d=1;while(0);t=a+(d*24|0)|0;o[t>>2]=o[S>>2];o[t+4>>2]=o[S+4>>2];o[t+8>>2]=o[S+8>>2];o[t+12>>2]=o[S+12>>2];o[t+16>>2]=o[S+16>>2];o[t+20>>2]=o[S+20>>2];l=l+1|0;t=l}i=i+1|0}while((i|0)!=(o[E>>2]|0))}$=278}e:do if(($|0)==278){$=0;if((l|0)>0){D=0;j=0;t=0;i=0;x=0;while(1){I=a+(x*24|0)+20|0;do if((D|0)==(j|0)){w=j|0?j<<1:1;if((j|0)>=(w|0)){T=t;break}do if(!w)d=0;else{o[5637]=(o[5637]|0)+1;i=Qa((w<<2|3)+16|0)|0;if(!i){d=0;break}o[(i+4+15&-16)+-4>>2]=i;d=i+4+15&-16}while(0);if((j|0)<=0){if(t|0)$=299}else{i=0;do{o[d+(i<<2)>>2]=o[t+(i<<2)>>2];i=i+1|0}while((i|0)!=(j|0));$=299}if(($|0)==299){$=0;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);o[re+20+12>>2]=0}n[re+20+16>>0]=1;o[re+20+12>>2]=d;o[re+20+8>>2]=w;T=d;i=d;j=w}else T=t;while(0);o[T+(D<<2)>>2]=o[I>>2];D=(o[re+20+4>>2]|0)+1|0;o[re+20+4>>2]=D;S=o[E>>2]|0;t:do if((S|0)>0){R=o[G>>2]|0;d=o[I>>2]|0;w=0;while(1){t=R+(w*24|0)+20|0;w=w+1|0;if((o[t>>2]|0)==(d|0))break;if((w|0)>=(S|0))break t}o[t>>2]=-1}while(0);x=x+1|0;if((x|0)>=(l|0)){D=S;break}else t=T}}else{D=i;i=0}if((D|0)<=0){$=307;break}w=o[G>>2]|0;S=o[Q>>2]|0;R=o[q>>2]|0;if((S|0)>0)I=0;else{$=307;break}while(1){j=o[w+(I*24|0)+20>>2]|0;if((j|0)!=-1){T=0;do{l=0;while(1){if((o[W+(l<<2)>>2]|0)==(T|0))break;l=l+1|0;if((l|0)>=(B|0)){$=285;break}}do if(($|0)==285){$=0;l=o[R+(T*36|0)+4>>2]|0;if((l|0)<=0)break;d=o[R+(T*36|0)+12>>2]|0;t=0;do{if((o[d+(t<<2)>>2]|0)==(j|0)){l=1;break e}t=t+1|0}while((t|0)<(l|0))}while(0);T=T+1|0}while((T|0)<(S|0))}I=I+1|0;if((I|0)>=(D|0)){$=307;break}}}while(0);if(($|0)==307){$=0;xj((o[e+56>>2]|0)+24|0,re+20|0);l=0}if(a|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);o[re+20+12>>2]=0}i=o[G>>2]|0;if(i|0){if(n[re+56+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[G>>2]=0}if(l&(B|0)>0){S=0;$=317}}else if((B|0)>0){S=0;$=317}if(($|0)==317)while(1){$=0;t=o[W+(S<<2)>>2]|0;w=o[q>>2]|0;n[re+216+16>>0]=1;o[re+216+12>>2]=0;o[re+216+4>>2]=0;o[re+216+8>>2]=0;d=o[w+(t*36|0)+4>>2]|0;if((d|0)>0){o[5637]=(o[5637]|0)+1;i=Qa((d<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[re+216+16>>0]=1;o[re+216+12>>2]=i;o[re+216+8>>2]=d;Lc(i|0,0,d<<2|0)|0;a=o[w+(t*36|0)+12>>2]|0;o[re+216+4>>2]=d;l=0;do{o[i+(l<<2)>>2]=o[a+(l<<2)>>2];l=l+1|0}while((l|0)!=(d|0))}else{o[re+216+4>>2]=d;i=0}o[re+216+20>>2]=o[w+(t*36|0)+20>>2];o[re+216+20+4>>2]=o[w+(t*36|0)+20+4>>2];o[re+216+20+8>>2]=o[w+(t*36|0)+20+8>>2];o[re+216+20+12>>2]=o[w+(t*36|0)+20+12>>2];xj((o[e+56>>2]|0)+24|0,re+216|0);if(i|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);o[re+216+12>>2]=0}S=S+1|0;if((S|0)>=(B|0))break;else $=317}if(W|0){o[5638]=(o[5638]|0)+1;qa(o[W+-4>>2]|0)}if(!b)break}}else f=0;K=o[e+56>>2]|0;o[K+64>>2]=0;o[K+64+4>>2]=0;o[K+64+8>>2]=0;o[K+64+12>>2]=0;i=o[K+28>>2]|0;if((i|0)>0){R=0;a=0;l=0;D=0;I=0;w=0;b=0;T=0;S=0;d=0;j=0;x=0;Y=0;while(1){t=o[K+36>>2]|0;z=o[t+(Y*36|0)+4>>2]|0;if((z|0)>0){Z=Y&65535;U=Y|-65536;V=w;G=S;B=x;i=0;while(1){H=i+1|0;W=o[t+(Y*36|0)+12>>2]|0;w=o[W+(i<<2)>>2]&65535;W=o[W+(((H|0)==(z|0)?0:H)<<2)>>2]&65535;E=W<<16>>16>w<<16>>16?w:W;e=W<<16>>16>w<<16>>16?W:w;t=W<<16>>16>w<<16>>16?w:W;w=W<<16>>16>w<<16>>16?W:w;W=G+-1|0;e:do if((((t&65535)<<16)+(w<<16>>16)&W)>>>0<D>>>0?(J=o[l+((((t&65535)<<16)+(w<<16>>16)&W)<<2)>>2]|0,(J|0)!=-1):0){i=J;while(1){if(w<<16>>16==(r[a+(i<<2)>>1]|0)?t<<16>>16==(r[a+(i<<2)+2>>1]|0):0)break;i=o[b+(i<<2)>>2]|0;if((i|0)==-1){x=0;break e}}x=d+(i<<2)|0}else x=0;while(0);i=o[K+16>>2]|0;v=+c[i+(t<<16>>16<<4)>>2]-+c[i+(w<<16>>16<<4)>>2];C=+c[i+(t<<16>>16<<4)+4>>2]-+c[i+(w<<16>>16<<4)+4>>2];y=+c[i+(t<<16>>16<<4)+8>>2]-+c[i+(w<<16>>16<<4)+8>>2];g=1/+X(+(v*v+C*C+y*y));i=o[K+48>>2]|0;e:do if((i|0)>0){t=o[K+56>>2]|0;w=0;while(1){h=+c[t+(w<<4)>>2];m=+c[t+(w<<4)+8>>2];do if(!(+N(+(h-v*g))>1e-6)){if(+N(+(+c[t+(w<<4)+4>>2]-C*g))>1e-6)break;if(!(+N(+(m-y*g))>1e-6))break e}while(0);do if(!(+N(+(v*g+h))>1e-6)){if(+N(+(C*g+ +c[t+(w<<4)+4>>2]))>1e-6)break;if(!(+N(+(y*g+m))>1e-6))break e}while(0);w=w+1|0;if((w|0)>=(i|0)){$=353;break}}}else $=353;while(0);if(($|0)==353){$=0;do if((i|0)==(o[K+52>>2]|0)){S=i|0?i<<1:1;if((i|0)>=(S|0))break;if(!S)w=0;else{o[5637]=(o[5637]|0)+1;i=Qa((S<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}w=i;i=o[K+48>>2]|0}if((i|0)>0){t=0;do{_e=w+(t<<4)|0;se=(o[K+56>>2]|0)+(t<<4)|0;o[_e>>2]=o[se>>2];o[_e+4>>2]=o[se+4>>2];o[_e+8>>2]=o[se+8>>2];o[_e+12>>2]=o[se+12>>2];t=t+1|0}while((t|0)!=(i|0))}i=o[K+56>>2]|0;if(i|0){if(n[K+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[K+56>>2]=0}n[K+60>>0]=1;o[K+56>>2]=w;o[K+52>>2]=S;i=o[K+48>>2]|0}while(0);se=o[K+56>>2]|0;c[se+(i<<4)>>2]=v*g;c[se+(i<<4)+4>>2]=C*g;c[se+(i<<4)+8>>2]=y*g;c[se+(i<<4)+12>>2]=0;o[K+48>>2]=(o[K+48>>2]|0)+1}e:do if(!x){i=((E&65535)<<16)+(e<<16>>16)&W;t:do if(i>>>0<D>>>0){t=o[l+(i<<2)>>2]|0;if((t|0)==-1)break;while(1){if(e<<16>>16==(r[a+(t<<2)>>1]|0)?E<<16>>16==(r[a+(t<<2)+2>>1]|0):0)break;t=o[b+(t<<2)>>2]|0;if((t|0)==-1)break t}w=d+(t<<2)|0;r[w>>1]=U;r[w+2>>1]=U>>>16;w=V;S=G;x=B;break e}while(0);do if((T|0)==(G|0)){S=T|0?T<<1:1;if((T|0)>=(S|0)){S=T;break}do if(!S)w=0;else{o[5637]=(o[5637]|0)+1;t=Qa((S<<2|3)+16|0)|0;if(!t){w=0;break}o[(t+4+15&-16)+-4>>2]=t;w=t+4+15&-16}while(0);if((T|0)<=0){if(!d){d=w;break}}else{t=0;do{se=w+(t<<2)|0;_e=d+(t<<2)|0;_e=s[_e>>1]|s[_e+2>>1]<<16;r[se>>1]=_e;r[se+2>>1]=_e>>>16;t=t+1|0}while((t|0)!=(T|0))}o[5638]=(o[5638]|0)+1;qa(o[d+-4>>2]|0);d=w}else S=G;while(0);W=d+(T<<2)|0;r[W>>1]=U;r[W+2>>1]=U>>>16;W=T+1|0;do if((B|0)==(R|0)){R=B|0?B<<1:1;if((B|0)>=(R|0)){R=B;break}do if(!R)w=0;else{o[5637]=(o[5637]|0)+1;t=Qa((R<<2|3)+16|0)|0;if(!t){w=0;break}o[(t+4+15&-16)+-4>>2]=t;w=t+4+15&-16}while(0);if((B|0)<=0){if(!a){a=w;break}}else{t=0;do{se=w+(t<<2)|0;_e=a+(t<<2)|0;_e=s[_e>>1]|s[_e+2>>1]<<16;r[se>>1]=_e;r[se+2>>1]=_e>>>16;t=t+1|0}while((t|0)!=(B|0))}o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0);a=w}while(0);x=a+(B<<2)|0;r[x>>1]=(E&65535)<<16|e&65535;r[x+2>>1]=((E&65535)<<16|e&65535)>>>16;x=B+1|0;if((G|0)<(S|0)){do if((S|0)>(D|0)){if((S|0)>=(D|0)){do if((j|0)<(S|0)){do if(!S)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((S<<2|3)+16|0)|0;if(!i){i=0;break}o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}while(0);if((D|0)<=0){if(!l){l=i;i=S;break}}else{t=0;do{o[i+(t<<2)>>2]=o[l+(t<<2)>>2];t=t+1|0}while((t|0)!=(D|0))}o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0);l=i;i=S}else i=j;while(0);Lc(l+(D<<2)|0,0,S-D<<2|0)|0;j=i}if((S|0)>(I|0)){do if((V|0)<(S|0)){do if(!S)t=0;else{o[5637]=(o[5637]|0)+1;i=Qa((S<<2|3)+16|0)|0;if(!i){t=0;break}o[(i+4+15&-16)+-4>>2]=i;t=i+4+15&-16}while(0);if((I|0)<=0){if(!b){i=S;b=t;break}}else{i=0;do{o[t+(i<<2)>>2]=o[b+(i<<2)>>2];i=i+1|0}while((i|0)!=(I|0))}o[5638]=(o[5638]|0)+1;qa(o[b+-4>>2]|0);i=S;b=t}else i=V;while(0);Lc(b+(I<<2)|0,0,S-I<<2|0)|0;w=i}else w=V;if((S|0)>0){se=S<<2;Lc(l|0,-1,se|0)|0;Lc(b|0,-1,se|0)|0}if((D|0)<=0){t=S;I=S;i=j;break}i=S+-1|0;t=0;do{se=l+(((s[a+(t<<2)+2>>1]<<16)+(r[a+(t<<2)>>1]|0)&i)<<2)|0;o[b+(t<<2)>>2]=o[se>>2];o[se>>2]=t;t=t+1|0}while((t|0)!=(D|0));t=S;I=S;i=j}else{t=D;w=V;i=j}while(0);j=i;i=((E&65535)<<16)+(e<<16>>16)&S+-1}else{t=D;w=V}D=l+(i<<2)|0;o[b+(T<<2)>>2]=o[D>>2];o[D>>2]=T;D=t;T=W}else{r[x+2>>1]=Z;w=V;S=G;x=B}while(0);if((H|0)>=(z|0))break;t=o[K+36>>2]|0;V=w;G=S;B=x;i=H}i=o[K+28>>2]|0;t=x}else t=x;Y=Y+1|0;if((Y|0)>=(i|0))break;else x=t}if((i|0)>0){j=o[K+36>>2]|0;I=o[K+16>>2]|0;h=0;T=0;do{w=o[j+(T*36|0)+4>>2]|0;S=o[j+(T*36|0)+12>>2]|0;R=o[S>>2]|0;if((w+-2|0)>=1){m=+c[K+64>>2];y=+c[K+68>>2];g=+c[K+72>>2];t=1;do{_e=o[S+(t<<2)>>2]|0;t=t+1|0;se=o[S+(((t|0)%(w|0)|0)<<2)>>2]|0;v=+c[I+(R<<4)>>2];C=+c[I+(_e<<4)>>2];O=+c[I+(R<<4)+4>>2];L=+c[I+(_e<<4)+4>>2];P=+c[I+(R<<4)+8>>2];A=+c[I+(_e<<4)+8>>2];k=+c[I+(se<<4)>>2];M=+c[I+(se<<4)+4>>2];F=+c[I+(se<<4)+8>>2];oe=+X(+(((v-C)*(O-M)-(O-L)*(v-k))*((v-C)*(O-M)-(O-L)*(v-k))+(((O-L)*(P-F)-(P-A)*(O-M))*((O-L)*(P-F)-(P-A)*(O-M))+((P-A)*(v-k)-(v-C)*(P-F))*((P-A)*(v-k)-(v-C)*(P-F)))))*.5;m=m+(v+C+k)*.3333333432674408*oe;c[K+64>>2]=m;y=(O+L+M)*.3333333432674408*oe+y;c[K+68>>2]=y;g=oe*((P+A+F)*.3333333432674408)+g;c[K+72>>2]=g;h=h+oe}while((t|0)!=(w+-1|0))}T=T+1|0}while((T|0)!=(i|0));t=K+64|0;w=1;R=a;S=l}else $=332}else{a=0;l=0;b=0;d=0;$=332}if(($|0)==332){t=K+64|0;w=0;h=0;R=a;S=l}g=1/h;v=g*+c[t>>2];c[t>>2]=v;y=g*+c[K+68>>2];c[K+68>>2]=y;g=g*+c[K+72>>2];c[K+72>>2]=g;c[K+96>>2]=3.4028234663852886e38;if(w){a=o[K+36>>2]|0;m=3.4028234663852886e38;l=0;while(1){h=+N(+(+c[a+(l*36|0)+32>>2]+(+c[a+(l*36|0)+20>>2]*v+ +c[a+(l*36|0)+24>>2]*y+ +c[a+(l*36|0)+28>>2]*g)));if(h<m)c[K+96>>2]=h;else h=m;l=l+1|0;if((l|0)>=(i|0))break;else m=h}}else h=3.4028234663852886e38;i=o[K+8>>2]|0;if((i|0)>0){a=o[K+16>>2]|0;k=-3.4028234663852886e38;C=-3.4028234663852886e38;v=-3.4028234663852886e38;g=3.4028234663852886e38;y=3.4028234663852886e38;m=3.4028234663852886e38;l=0;do{oe=+c[a+(l<<4)>>2];g=oe<g?oe:g;k=oe>k?oe:k;oe=+c[a+(l<<4)+4>>2];y=oe<y?oe:y;C=oe>C?oe:C;oe=+c[a+(l<<4)+8>>2];m=oe<m?oe:m;v=oe>v?oe:v;l=l+1|0}while((l|0)!=(i|0))}else{k=-3.4028234663852886e38;C=-3.4028234663852886e38;v=-3.4028234663852886e38;g=3.4028234663852886e38;y=3.4028234663852886e38;m=3.4028234663852886e38}c[K+100>>2]=k+g;c[K+104>>2]=y+C;c[K+108>>2]=m+v;c[K+112>>2]=0;oe=k-g;F=C-y;m=v-m;c[K+116>>2]=oe;c[K+120>>2]=F;c[K+124>>2]=m;c[K+128>>2]=0;y=h/1.7320507764816284;t=oe<F?F<m?2:1:oe<m?2:0;h=(+c[K+116+(t<<2)>>2]*.5-y)*.0009765625;c[K+88>>2]=y;c[K+84>>2]=y;c[K+80>>2]=y;m=+c[K+116+(t<<2)>>2]*.5;c[K+80+(t<<2)>>2]=m;i=0;while(1){if(kR(K)|0){$=440;break}m=m-h;c[K+80+(t<<2)>>2]=m;i=i+1|0;if((i|0)>=1024){$=439;break}}e:do if(($|0)==439){c[K+88>>2]=y;c[K+84>>2]=y;c[K+80>>2]=y}else if(($|0)==440){h=(+c[K+96>>2]-y)*.0009765625;a=o[K+80+((1<<(1<<t&3)&3)<<2)>>2]|0;l=0;while(1){i=o[K+80+((1<<t&3)<<2)>>2]|0;c[K+80+((1<<t&3)<<2)>>2]=h+(o[u>>2]=i,+c[u>>2]);m=h+ +c[K+80+((1<<(1<<t&3)&3)<<2)>>2];c[K+80+((1<<(1<<t&3)&3)<<2)>>2]=m;l=l+1|0;if(!(kR(K)|0))break;if((l|0)>=1024)break e;else a=(c[u>>2]=m,o[u>>2]|0)}o[K+80+((1<<t&3)<<2)>>2]=i;o[K+80+((1<<(1<<t&3)&3)<<2)>>2]=a}while(0);if(R|0){o[5638]=(o[5638]|0)+1;qa(o[R+-4>>2]|0)}if(d|0){o[5638]=(o[5638]|0)+1;qa(o[d+-4>>2]|0)}if(b|0){o[5638]=(o[5638]|0)+1;qa(o[b+-4>>2]|0)}if(S|0){o[5638]=(o[5638]|0)+1;qa(o[S+-4>>2]|0)}if(f|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}d=o[Q>>2]|0;t=o[q>>2]|0;if((d|0)<=0){if(t|0)$=461}else{b=0;do{a=t+(b*36|0)+4|0;f=t+(b*36|0)+12|0;l=o[f>>2]|0;i=t+(b*36|0)+16|0;if(l|0){if(n[i>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0)}o[f>>2]=0}n[i>>0]=1;o[f>>2]=0;o[a>>2]=0;o[t+(b*36|0)+8>>2]=0;b=b+1|0}while((b|0)!=(d|0));$=461}if(($|0)==461){if(n[re+96+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[q>>2]=0}if(_|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}i=o[ee>>2]|0;if(i|0){if(n[re+136+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[ee>>2]=0}n[re+136+56>>0]=1;o[ee>>2]=0;o[re+136+44>>2]=0;o[re+136+48>>2]=0;i=o[te>>2]|0;if(i|0){if(n[re+136+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[te>>2]=0}n[re+136+36>>0]=1;o[te>>2]=0;o[re+136+24>>2]=0;o[re+136+28>>2]=0;i=o[ie>>2]|0;if(i|0){if(n[re+136+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[ie>>2]=0}if(!ne){p=re;return 1}o[5638]=(o[5638]|0)+1;qa(o[ne+-4>>2]|0);p=re;return 1}function Oj(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0;if((o[e+8>>2]|0)>=(t|0))return;if((t|0)!=0?(o[5637]=(o[5637]|0)+1,i=Qa((t*36|3)+16|0)|0,(i|0)!=0):0){o[(i+4+15&-16)+-4>>2]=i;b=i+4+15&-16}else b=0;a=o[e+4>>2]|0;if((a|0)>0){l=0;do{c=b+(l*36|0)|0;f=o[e+12>>2]|0;n[c+16>>0]=1;o[c+12>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;p=o[f+(l*36|0)+4>>2]|0;if((p|0)>0){o[5637]=(o[5637]|0)+1;i=Qa((p<<2|3)+16|0)|0;if(!i)s=0;else{o[(i+4+15&-16)+-4>>2]=i;s=i+4+15&-16}_=o[c+4>>2]|0;r=o[c+12>>2]|0;if((_|0)<=0)if(!r){n[c+16>>0]=1;o[c+12>>2]=s;o[c+8>>2]=p;Lc(s|0,0,p<<2|0)|0}else u=14;else{i=0;do{o[s+(i<<2)>>2]=o[r+(i<<2)>>2];i=i+1|0}while((i|0)!=(_|0));u=14}if((u|0)==14){u=0;if(n[c+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[c+16>>0]=1;o[c+12>>2]=s;o[c+8>>2]=p;Lc(s|0,0,p<<2|0)|0}i=o[c+12>>2]|0;o[c+4>>2]=p;r=o[f+(l*36|0)+12>>2]|0;_=0;do{o[i+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(p|0))}else o[c+4>>2]=p;p=f+(l*36|0)+20|0;o[c+20>>2]=o[p>>2];o[c+20+4>>2]=o[p+4>>2];o[c+20+8>>2]=o[p+8>>2];o[c+20+12>>2]=o[p+12>>2];l=l+1|0}while((l|0)!=(a|0));i=o[e+4>>2]|0;if((i|0)>0){f=0;do{_=o[e+12>>2]|0;s=_+(f*36|0)+4|0;a=_+(f*36|0)+12|0;c=o[a>>2]|0;r=_+(f*36|0)+16|0;if(c|0){if(n[r>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[c+-4>>2]|0)}o[a>>2]=0}n[r>>0]=1;o[a>>2]=0;o[s>>2]=0;o[_+(f*36|0)+8>>2]=0;f=f+1|0}while((f|0)!=(i|0))}}i=o[e+12>>2]|0;if(i|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=b;o[e+8>>2]=t;return}function Lj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;w=p;p=p+32|0;y=o[e+12>>2]|0;g=+c[y+(((n+i|0)/2|0)*24|0)>>2];v=+c[y+(((n+i|0)/2|0)*24|0)+4>>2];C=+c[y+(((n+i|0)/2|0)*24|0)+8>>2];h=+c[y+(((n+i|0)/2|0)*24|0)+16>>2];m=o[y+(((n+i|0)/2|0)*24|0)+20>>2]|0;r=i;_=n;while(1){l=+c[t>>2];u=+c[t+4>>2];b=+c[t+8>>2];d=(g-l)*(g-l)+(v-u)*(v-u)+(C-b)*(C-b);e:while(1){s=+c[y+(r*24|0)+16>>2];do if(s!=h){if(!(s<h))break e}else{s=+c[y+(r*24|0)>>2]-l;a=+c[y+(r*24|0)+4>>2]-u;f=+c[y+(r*24|0)+8>>2]-b;if(s*s+a*a+f*f!=d)if(s*s+a*a+f*f<d)break;else break e;else if((o[y+(r*24|0)+20>>2]|0)<(m|0))break;else break e}while(0);r=r+1|0}e:while(1){s=+c[y+(_*24|0)+16>>2];do if(h!=s){if(!(h<s))break e}else{s=+c[y+(_*24|0)>>2]-l;a=+c[y+(_*24|0)+4>>2]-u;f=+c[y+(_*24|0)+8>>2]-b;if(d!=s*s+a*a+f*f)if(d<s*s+a*a+f*f)break;else break e;else if((m|0)<(o[y+(_*24|0)+20>>2]|0))break;else break e}while(0);_=_+-1|0}if((r|0)<=(_|0)){k=y+(r*24|0)|0;o[w>>2]=o[k>>2];o[w+4>>2]=o[k+4>>2];o[w+8>>2]=o[k+8>>2];o[w+12>>2]=o[k+12>>2];o[w+16>>2]=o[k+16>>2];o[w+20>>2]=o[k+20>>2];y=y+(_*24|0)|0;o[k>>2]=o[y>>2];o[k+4>>2]=o[y+4>>2];o[k+8>>2]=o[y+8>>2];o[k+12>>2]=o[y+12>>2];o[k+16>>2]=o[y+16>>2];o[k+20>>2]=o[y+20>>2];y=(o[e+12>>2]|0)+(_*24|0)|0;o[y>>2]=o[w>>2];o[y+4>>2]=o[w+4>>2];o[y+8>>2]=o[w+8>>2];o[y+12>>2]=o[w+12>>2];o[y+16>>2]=o[w+16>>2];o[y+20>>2]=o[w+20>>2];r=r+1|0;_=_+-1|0}if((r|0)>(_|0))break;y=o[e+12>>2]|0}if((_|0)>(i|0))Lj(e,t,i,_);if((r|0)>=(n|0)){p=w;return}Lj(e,t,r,n);p=w;return}function xj(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0;i=o[e+4>>2]|0;if((i|0)==(o[e+8>>2]|0)){Oj(e,i|0?i<<1:1);i=o[e+4>>2]|0}c=(o[e+12>>2]|0)+(i*36|0)|0;n[c+16>>0]=1;o[c+12>>2]=0;o[c+4>>2]=0;o[c+8>>2]=0;f=o[t+4>>2]|0;if((f|0)<=0){o[c+4>>2]=f;f=c+20|0;t=t+20|0;o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];t=o[e+4>>2]|0;t=t+1|0;o[e+4>>2]=t;return}o[5637]=(o[5637]|0)+1;i=Qa((f<<2|3)+16|0)|0;if(!i)s=0;else{o[(i+4+15&-16)+-4>>2]=i;s=i+4+15&-16}_=o[c+4>>2]|0;r=o[c+12>>2]|0;if((_|0)<=0)if(!r){n[c+16>>0]=1;o[c+12>>2]=s;o[c+8>>2]=f;Lc(s|0,0,f<<2|0)|0}else a=11;else{i=0;do{o[s+(i<<2)>>2]=o[r+(i<<2)>>2];i=i+1|0}while((i|0)!=(_|0));a=11}if((a|0)==11){if(n[c+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[c+16>>0]=1;o[c+12>>2]=s;o[c+8>>2]=f;Lc(s|0,0,f<<2|0)|0}i=o[c+12>>2]|0;o[c+4>>2]=f;r=o[t+12>>2]|0;_=0;do{o[i+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(f|0));f=c+20|0;t=t+20|0;o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];t=o[e+4>>2]|0;t=t+1|0;o[e+4>>2]=t;return}function Mj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;b=+wP[o[(o[e>>2]|0)+48>>2]&15](e);v=+c[e+76>>2];g=+c[e+60>>2];m=+c[e+80>>2];h=+c[e+64>>2];u=+c[e+84>>2];l=+c[e+68>>2];O=+c[t>>2];S=+N(+O);D=+c[t+4>>2];k=+N(+D);f=+c[t+8>>2];p=+N(+f);T=+c[t+16>>2];w=+N(+T);I=+c[t+20>>2];C=+N(+I);s=+c[t+24>>2];a=+N(+s);j=+c[t+32>>2];y=+N(+j);R=+c[t+36>>2];d=+N(+R);r=+c[t+40>>2];_=+N(+r);f=(v+g)*.5*O+(m+h)*.5*D+(u+l)*.5*f+ +c[t+48>>2];s=(v+g)*.5*T+(m+h)*.5*I+(u+l)*.5*s+ +c[t+52>>2];r=(v+g)*.5*j+(m+h)*.5*R+(u+l)*.5*r+ +c[t+56>>2];p=(b+(v-g)*.5)*S+(b+(m-h)*.5)*k+(b+(u-l)*.5)*p;a=(b+(v-g)*.5)*w+(b+(m-h)*.5)*C+(b+(u-l)*.5)*a;_=(b+(v-g)*.5)*y+(b+(m-h)*.5)*d+(b+(u-l)*.5)*_;c[i>>2]=f-p;c[i+4>>2]=s-a;c[i+8>>2]=r-_;c[i+12>>2]=0;c[n>>2]=p+f;c[n+4>>2]=a+s;c[n+8>>2]=_+r;c[n+12>>2]=0;return}function Pj(e){e=e|0;var t=0,i=0,r=0,_=0;i=p;p=p+96|0;n[e+92>>0]=1;if(!(n[19840]|0)){n[19840]=1;o[4993]=1065353216;o[4994]=0;o[4995]=0;o[4996]=0;o[4997]=0;o[4998]=1065353216;o[4999]=0;o[5e3]=0;o[5001]=0;o[5002]=0;o[5003]=1065353216;c[5004]=0;o[5005]=-1082130432;o[5006]=0;o[5007]=0;o[5008]=0;o[5009]=0;o[5010]=-1082130432;o[5011]=0;o[5012]=0;o[5013]=0;o[5014]=0;o[5015]=-1082130432;c[5016]=0}t=i;r=t+96|0;do{o[t>>2]=0;t=t+4|0}while((t|0)<(r|0));HP[o[(o[e>>2]|0)+76>>2]&127](e,19972,i,6);_=+c[e+48>>2];c[e+76>>2]=+c[i>>2]+_;c[e+60>>2]=+c[i+48>>2]-_;c[e+80>>2]=+c[i+20>>2]+_;c[e+64>>2]=+c[i+68>>2]-_;c[e+84>>2]=+c[i+40>>2]+_;c[e+68>>2]=+c[i+88>>2]-_;p=i;return}function Wj(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Bj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0;s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);f=+c[t+52>>2]-_;a=+c[t+56>>2]-r;c[i>>2]=+c[t+48>>2]-s;c[i+4>>2]=f;c[i+8>>2]=a;c[i+12>>2]=0;_=_+ +c[t+52>>2];r=r+ +c[t+56>>2];c[n>>2]=s+ +c[t+48>>2];c[n+4>>2]=_;c[n+8>>2]=r;c[n+12>>2]=0;return}function Aj(e,t,i){e=e|0;t=+t;i=i|0;t=t*.4000000059604645*+wP[o[(o[e>>2]|0)+48>>2]&15](e);t=t*+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[i>>2]=t;c[i+4>>2]=t;c[i+8>>2]=t;c[i+12>>2]=0;return}function Fj(e){e=e|0;return 13962}function Gj(e,t){e=e|0;t=+t;c[e+48>>2]=t;return}function Ej(e){e=e|0;return+(+c[e+32>>2]*+c[e+16>>2])}function Vj(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;n=p;p=p+16|0;EP[o[(o[t>>2]|0)+68>>2]&127](n,t,i);o[e>>2]=o[n>>2];o[e+4>>2]=o[n+4>>2];o[e+8>>2]=o[n+8>>2];o[e+12>>2]=o[n+12>>2];s=+c[i>>2];_=+c[i+4>>2];r=+c[i+8>>2];f=s*s+_*_+r*r<1.4210854715202004e-14?-1:s;a=s*s+_*_+r*r<1.4210854715202004e-14?-1:_;r=s*s+_*_+r*r<1.4210854715202004e-14?-1:r;_=1/+X(+(r*r+(f*f+a*a)));s=+wP[o[(o[t>>2]|0)+48>>2]&15](t);c[e>>2]=+c[e>>2]+s*(_*f);c[e+4>>2]=s*(_*a)+ +c[e+4>>2];c[e+8>>2]=s*(_*r)+ +c[e+8>>2];p=n;return}function Nj(e,t,i){e=e|0;t=t|0;i=i|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;return}function Xj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;if((n|0)>0)e=0;else return;do{t=i+(e<<4)|0;e=e+1|0;o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=0;o[t+12>>2]=0}while((e|0)!=(n|0));return}function Hj(e){e=e|0;return}function Zj(e){e=e|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Uj(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;o[i>>2]=-581039253;o[i+4>>2]=-581039253;o[i+8>>2]=-581039253;c[i+12>>2]=0;o[n>>2]=1566444395;o[n+4>>2]=1566444395;o[n+8>>2]=1566444395;c[n+12>>2]=0;return}function zj(e,t){e=e|0;t=t|0;o[e+72>>2]=o[t>>2];o[e+72+4>>2]=o[t+4>>2];o[e+72+8>>2]=o[t+8>>2];o[e+72+12>>2]=o[t+12>>2];return}function Yj(e){e=e|0;return e+72|0}function Kj(e,t,i){e=e|0;t=+t;i=i|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;return}function Qj(e){e=e|0;return 13990}function qj(e){e=e|0;return 52}function Jj(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;r=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=r;if(r|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];o[t+12>>2]=o[e+72>>2];o[t+16>>2]=o[e+76>>2];o[t+20>>2]=o[e+80>>2];o[t+24>>2]=o[e+84>>2];o[t+28>>2]=o[e+52>>2];o[t+32>>2]=o[e+56>>2];o[t+36>>2]=o[e+60>>2];o[t+40>>2]=o[e+64>>2];o[t+44>>2]=o[e+68>>2];return 14002}function $j(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0;k=p;p=p+48|0;g=+c[n>>2];v=+c[i>>2];C=+c[n+4>>2];w=+c[i+4>>2];y=+c[n+8>>2];_=+c[i+8>>2];s=+X(+((g-v)*.5*((g-v)*.5)+(C-w)*.5*((C-w)*.5)+(y-_)*.5*((y-_)*.5)));a=+c[e+60>>2];i=+N(+a)>.7071067690849304;f=+c[e+56>>2];if(i){m=1/+X(+(a*a+f*f));S=+c[e+52>>2];r=S*-(a*m);l=S;u=0;b=-(a*m);d=f*m;h=(a*a+f*f)*m;m=-(S*(f*m))}else{h=+c[e+52>>2];m=1/+X(+(h*h+f*f));r=(h*h+f*f)*m;l=h;u=-(f*m);b=h*m;d=0;h=-(a*(h*m));m=a*-(f*m)}S=(g+v)*.5*l+(C+w)*.5*f+(y+_)*.5*a-+c[e+68>>2];l=(g+v)*.5-l*S;u=s*u;b=s*b;v=s*d;h=s*h;m=s*m;g=s*r;c[k>>2]=h+(u+l);c[k+4>>2]=m+(b+((C+w)*.5-f*S));c[k+8>>2]=g+(v+((y+_)*.5-a*S));c[k+12>>2]=0;c[k+16>>2]=u+l-h;c[k+20>>2]=b+((C+w)*.5-f*S)-m;c[k+24>>2]=v+((y+_)*.5-a*S)-g;c[k+28>>2]=0;c[k+32>>2]=l-u-h;c[k+36>>2]=(C+w)*.5-f*S-b-m;c[k+40>>2]=(y+_)*.5-a*S-v-g;c[k+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,k,0,0);c[k>>2]=l-u-h;c[k+4>>2]=(C+w)*.5-f*S-b-m;c[k+8>>2]=(y+_)*.5-a*S-v-g;c[k+12>>2]=0;c[k+16>>2]=h+(l-u);c[k+20>>2]=m+((C+w)*.5-f*S-b);c[k+24>>2]=g+((y+_)*.5-a*S-v);c[k+28>>2]=0;c[k+32>>2]=h+(u+l);c[k+36>>2]=m+(b+((C+w)*.5-f*S));c[k+40>>2]=g+(v+((y+_)*.5-a*S));c[k+44>>2]=0;HP[o[(o[t>>2]|0)+8>>2]&127](t,k,0,1);p=k;return}function eI(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;v=n[_+16>>0]&-16;n[_+16>>0]=v;w=+c[i>>2];k=+c[t>>2];S=+c[i+4>>2];R=+c[t+4>>2];h=+c[i+8>>2];m=+c[t+8>>2];y=+c[r>>2];g=+c[r+4>>2];C=+c[r+8>>2];l=+c[e>>2];u=+c[e+4>>2];s=+c[e+8>>2];b=(w-k)*(l-k)+(S-R)*(u-R)+(h-m)*(s-m);d=(y-k)*(l-k)+(g-R)*(u-R)+(C-m)*(s-m);if(b<=0&d<=0){o[_>>2]=o[t>>2];o[_+4>>2]=o[t+4>>2];o[_+8>>2]=o[t+8>>2];o[_+12>>2]=o[t+12>>2];n[_+16>>0]=v|1;c[_+20>>2]=1;c[_+24>>2]=0;c[_+28>>2]=0;c[_+32>>2]=0;return}f=(w-k)*(l-w)+(S-R)*(u-S)+(h-m)*(s-h);p=(y-k)*(l-w)+(g-R)*(u-S)+(C-m)*(s-h);if(!(!(f>=0)|!(p<=f))){o[_>>2]=o[i>>2];o[_+4>>2]=o[i+4>>2];o[_+8>>2]=o[i+8>>2];o[_+12>>2]=o[i+12>>2];n[_+16>>0]=v|2;c[_+20>>2]=0;c[_+24>>2]=1;c[_+28>>2]=0;c[_+32>>2]=0;return}if(f<=0&(b>=0?b*p-f*d<=0:0)){c[_>>2]=k+(w-k)*(b/(b-f));c[_+4>>2]=R+(S-R)*(b/(b-f));c[_+8>>2]=m+(h-m)*(b/(b-f));c[_+12>>2]=0;n[_+16>>0]=v|3;c[_+20>>2]=1-b/(b-f);c[_+24>>2]=b/(b-f);c[_+28>>2]=0;c[_+32>>2]=0;return}a=(w-k)*(l-y)+(S-R)*(u-g)+(h-m)*(s-C);s=(y-k)*(l-y)+(g-R)*(u-g)+(C-m)*(s-C);if(!(!(s>=0)|!(a<=s))){o[_>>2]=o[r>>2];o[_+4>>2]=o[r+4>>2];o[_+8>>2]=o[r+8>>2];o[_+12>>2]=o[r+12>>2];n[_+16>>0]=v|4;c[_+20>>2]=0;c[_+24>>2]=0;c[_+28>>2]=1;c[_+32>>2]=0;return}if(s<=0&(d>=0?a*d-b*s<=0:0)){\nc[_>>2]=k+(y-k)*(d/(d-s));c[_+4>>2]=R+(g-R)*(d/(d-s));c[_+8>>2]=m+(C-m)*(d/(d-s));c[_+12>>2]=0;n[_+16>>0]=v|5;c[_+20>>2]=1-d/(d-s);c[_+24>>2]=0;c[_+28>>2]=d/(d-s);c[_+32>>2]=0;return}if((f*s-a*p<=0?p-f>=0:0)?a-s>=0:0){R=(p-f)/(p-f+(a-s));c[_>>2]=w+(y-w)*R;c[_+4>>2]=S+(g-S)*R;c[_+8>>2]=h+(C-h)*R;c[_+12>>2]=0;n[_+16>>0]=v|6;c[_+20>>2]=0;c[_+24>>2]=1-R;c[_+28>>2]=R;c[_+32>>2]=0;return}l=1/(b*p-f*d+(f*s-a*p+(a*d-b*s)));u=(a*d-b*s)*l;d=(b*p-f*d)*l;c[_>>2]=(y-k)*d+((w-k)*u+k);c[_+4>>2]=(g-R)*d+((S-R)*u+R);c[_+8>>2]=(C-m)*d+((h-m)*u+m);c[_+12>>2]=0;n[_+16>>0]=v|7;c[_+20>>2]=1-u-d;c[_+24>>2]=u;c[_+28>>2]=d;c[_+32>>2]=0;return}function tI(e){e=e|0;var t=0;o[e>>2]=7044;t=o[e+140>>2]|0;if(t|0){if(n[e+144>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+140>>2]=0}n[e+144>>0]=1;o[e+140>>2]=0;o[e+132>>2]=0;o[e+136>>2]=0;return}function iI(e){e=e|0;var t=0;o[e>>2]=7044;t=o[e+140>>2]|0;if(t|0){if(n[e+144>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+140>>2]=0}n[e+144>>0]=1;o[e+140>>2]=0;o[e+132>>2]=0;o[e+136>>2]=0;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function nI(e,t,i){e=e|0;t=t|0;i=+i;aP[o[(o[e>>2]|0)+32>>2]&127](e,t);NP[o[(o[e>>2]|0)+36>>2]&7](e,t,i);return}function rI(e,t){e=e|0;t=t|0;return}function oI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0;n[e+171>>0]=1;o[e+60>>2]=o[t>>2];o[e+60+4>>2]=o[t+4>>2];o[e+60+8>>2]=o[t+8>>2];o[e+60+12>>2]=o[t+12>>2];i=+c[e+60>>2];r=+c[e+64>>2];s=+c[e+68>>2];_=+X(+(i*i+r*r+s*s));if(_>1.1920928955078125e-7){a=i*(1/_);r=r*(1/_);i=s*(1/_);t=o[e+72>>2]|0}else{a=0;r=0;i=0;t=0}c[e+76>>2]=a;c[e+80>>2]=r;c[e+84>>2]=i;o[e+88>>2]=t;return}function _I(e,t,i){e=e|0;t=t|0;i=+i;var r=0,_=0,s=0,a=0,f=0;n[e+171>>0]=0;o[e+60>>2]=o[t>>2];o[e+60+4>>2]=o[t+4>>2];o[e+60+8>>2]=o[t+8>>2];o[e+60+12>>2]=o[t+12>>2];r=+c[e+60>>2];_=+c[e+64>>2];a=+c[e+68>>2];s=+X(+(r*r+_*_+a*a));if(s>1.1920928955078125e-7){f=r*(1/s);_=_*(1/s);r=a*(1/s);t=o[e+72>>2]|0}else{f=0;_=0;r=0;t=0}c[e+76>>2]=f;c[e+80>>2]=_;c[e+84>>2]=r;o[e+88>>2]=t;c[e+172>>2]=+c[e+172>>2]+i;return}function sI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0;c[e+16>>2]=0;c[e+20>>2]=0;n[e+168>>0]=0;n[e+169>>0]=0;c[e+172>>2]=0;o[e+60>>2]=0;o[e+60+4>>2]=0;o[e+60+8>>2]=0;o[e+60+12>>2]=0;e=o[(o[e+8>>2]|0)+308>>2]|0;if((o[(fP[o[(o[e>>2]|0)+28>>2]&127](e)|0)+4>>2]|0)<=0)return;do{r=o[e>>2]|0;_=o[r+12>>2]|0;r=o[o[(fP[o[r+28>>2]&127](e)|0)+12>>2]>>2]|0;i=o[(o[(fP[o[(o[e>>2]|0)+28>>2]&127](e)|0)+12>>2]|0)+4>>2]|0;bP[_&31](e,r,i,o[t+24>>2]|0)|0}while((o[(fP[o[(o[e>>2]|0)+28>>2]&127](e)|0)+4>>2]|0)>0);return}function aI(e,t){e=e|0;t=t|0;var i=0;i=p;p=p+16|0;o[i>>2]=o[t>>2];o[i+4>>2]=o[t+4>>2];o[i+8>>2]=o[t+8>>2];o[i+12>>2]=o[t+12>>2];e=o[e+8>>2]|0;o[e+284>>2]=(o[e+284>>2]|0)+1;o[e+4>>2]=1065353216;o[e+8>>2]=0;o[e+8+4>>2]=0;o[e+8+8>>2]=0;o[e+8+12>>2]=0;o[e+24>>2]=1065353216;o[e+28>>2]=0;o[e+28+4>>2]=0;o[e+28+8>>2]=0;o[e+28+12>>2]=0;o[e+44>>2]=1065353216;o[e+48>>2]=0;o[e+52>>2]=o[i>>2];o[e+52+4>>2]=o[i+4>>2];o[e+52+8>>2]=o[i+8>>2];o[e+52+12>>2]=o[i+12>>2];p=i;return}function cI(e,t){e=e|0;t=t|0;n[e+148>>0]=0;if((((fI(e,t)|0?(n[e+148>>0]=1,fI(e,t)|0):0)?(n[e+148>>0]=1,fI(e,t)|0):0)?(n[e+148>>0]=1,fI(e,t)|0):0)?(n[e+148>>0]=1,fI(e,t)|0):0)n[e+148>>0]=1;t=(o[e+8>>2]|0)+52|0;o[e+92>>2]=o[t>>2];o[e+92+4>>2]=o[t+4>>2];o[e+92+8>>2]=o[t+8>>2];o[e+92+12>>2]=o[t+12>>2];Bc(e+112|0,t|0,16)|0;return}function fI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;v=p;p=p+96|0;y=o[e+12>>2]|0;HP[o[(o[y>>2]|0)+8>>2]&127](y,(o[e+8>>2]|0)+4|0,v+80|0,v+64|0);y=o[t+68>>2]|0;rP[o[(o[y>>2]|0)+16>>2]&31](y,o[(o[e+8>>2]|0)+188>>2]|0,v+80|0,v+64|0,o[t+24>>2]|0);y=o[t+24>>2]|0;HP[o[(o[y>>2]|0)+32>>2]&127](y,o[(o[e+8>>2]|0)+308>>2]|0,t+28|0,y);y=o[e+8>>2]|0;o[e+92>>2]=o[y+52>>2];o[e+92+4>>2]=o[y+52+4>>2];o[e+92+8>>2]=o[y+52+8>>2];o[e+92+12>>2]=o[y+52+12>>2];y=o[y+308>>2]|0;if((fP[o[(o[y>>2]|0)+36>>2]&127](y)|0)>0){y=0;_=0;t=0;do{i=o[e+132>>2]|0;if((i|0)<0){if((o[e+136>>2]|0)<0){r=o[e+140>>2]|0;if(r|0){if(n[e+144>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+140>>2]=0}n[e+144>>0]=1;o[e+140>>2]=0;o[e+136>>2]=0}do{o[(o[e+140>>2]|0)+(i<<2)>>2]=0;i=i+1|0}while((i|0)!=0)}o[e+132>>2]=0;i=o[(o[e+8>>2]|0)+308>>2]|0;i=o[(fP[o[(o[i>>2]|0)+28>>2]&127](i)|0)+12>>2]|0;m=o[o[i+(y<<4)>>2]>>2]|0;r=o[o[i+(y<<4)+4>>2]>>2]|0;if(!((m|0)!=0?(o[m+204>>2]&4|0)!=0:0))g=14;do if((g|0)==14){g=0;if(r|0?o[r+204>>2]&4|0:0)break;i=o[i+(y<<4)+8>>2]|0;if(i|0)aP[o[(o[i>>2]|0)+16>>2]&127](i,e+128|0);h=o[e+132>>2]|0;if((h|0)>0){b=o[e+140>>2]|0;d=o[e+8>>2]|0;m=0;do{l=o[b+(m<<2)>>2]|0;u=(o[l+740>>2]|0)==(d|0)?-1:1;i=o[l+748>>2]|0;if((i|0)>0){f=0;do{a=+c[l+4+(f*184|0)+80>>2];if(a<0){s=l+4+(f*184|0)+64|0;if(a<_){t=l+4+(f*184|0)+68|0;C=u*+c[t>>2];r=l+4+(f*184|0)+72|0;_=u*+c[r>>2];c[e+152>>2]=u*+c[s>>2];c[e+156>>2]=C;c[e+160>>2]=_;c[e+164>>2]=0;i=o[l+748>>2]|0;_=a}else{t=l+4+(f*184|0)+68|0;r=l+4+(f*184|0)+72|0}w=a*(u*+c[t>>2])*.20000000298023224;C=a*(u*+c[r>>2])*.20000000298023224;c[e+92>>2]=a*(u*+c[s>>2])*.20000000298023224+ +c[e+92>>2];c[e+96>>2]=w+ +c[e+96>>2];c[e+100>>2]=C+ +c[e+100>>2];t=1}f=f+1|0}while((f|0)<(i|0))}m=m+1|0}while((m|0)!=(h|0))}}while(0);y=y+1|0;m=o[(o[e+8>>2]|0)+308>>2]|0}while((y|0)<(fP[o[(o[m>>2]|0)+36>>2]&127](m)|0))}else t=0;g=o[e+8>>2]|0;o[v>>2]=o[g+4>>2];o[v+4>>2]=o[g+4+4>>2];o[v+8>>2]=o[g+4+8>>2];o[v+12>>2]=o[g+4+12>>2];o[v+16>>2]=o[g+20>>2];o[v+16+4>>2]=o[g+20+4>>2];o[v+16+8>>2]=o[g+20+8>>2];o[v+16+12>>2]=o[g+20+12>>2];o[v+32>>2]=o[g+36>>2];o[v+32+4>>2]=o[g+36+4>>2];o[v+32+8>>2]=o[g+36+8>>2];o[v+32+12>>2]=o[g+36+12>>2];o[v+48>>2]=o[e+92>>2];o[v+48+4>>2]=o[e+92+4>>2];o[v+48+8>>2]=o[e+92+8>>2];o[v+48+12>>2]=o[e+92+12>>2];o[g+284>>2]=(o[g+284>>2]|0)+1;o[g+4>>2]=o[v>>2];o[g+4+4>>2]=o[v+4>>2];o[g+4+8>>2]=o[v+8>>2];o[g+4+12>>2]=o[v+12>>2];o[g+20>>2]=o[v+16>>2];o[g+20+4>>2]=o[v+16+4>>2];o[g+20+8>>2]=o[v+16+8>>2];o[g+20+12>>2]=o[v+16+12>>2];o[g+36>>2]=o[v+32>>2];o[g+36+4>>2]=o[v+32+4>>2];o[g+36+8>>2]=o[v+32+8>>2];o[g+36+12>>2]=o[v+32+12>>2];o[g+52>>2]=o[v+48>>2];o[g+52+4>>2]=o[v+48+4>>2];o[g+52+8>>2]=o[v+48+8>>2];o[g+52+12>>2]=o[v+48+12>>2];p=v;return t|0}function pI(e,t,i){e=e|0;t=t|0;i=+i;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;g=p;p=p+528|0;if(!(n[e+171>>0]|0)){if(+c[e+172>>2]<=0){p=g;return}s=+c[e+60>>2];h=+c[e+64>>2];m=+c[e+68>>2];if(s*s+h*h+m*m<1.4210854715202004e-14){p=g;return}}n[e+168>>0]=(fP[o[(o[e>>2]|0)+48>>2]&127](e)|0)&1;s=+c[e+16>>2]-+c[e+44>>2]*i;c[e+16>>2]=s;if(s>0?(a=+c[e+28>>2],s>a):0){c[e+16>>2]=a;s=a}if(s<0?(m=+N(+s),l=+N(+ +c[e+24>>2]),m>l):0){c[e+16>>2]=-l;s=-l}c[e+20>>2]=s*i;_=o[e+8>>2]|0;o[g>>2]=o[_+4>>2];o[g+4>>2]=o[_+4+4>>2];o[g+8>>2]=o[_+4+8>>2];o[g+12>>2]=o[_+4+12>>2];o[g+16>>2]=o[_+20>>2];o[g+16+4>>2]=o[_+20+4>>2];o[g+16+8>>2]=o[_+20+8>>2];o[g+16+12>>2]=o[_+20+12>>2];o[g+32>>2]=o[_+36>>2];o[g+32+4>>2]=o[_+36+4>>2];o[g+32+8>>2]=o[_+36+8>>2];o[g+32+12>>2]=o[_+36+12>>2];o[g+48>>2]=o[_+52>>2];o[g+48+4>>2]=o[_+52+4>>2];o[g+48+8>>2]=o[_+52+8>>2];o[g+48+12>>2]=o[_+52+12>>2];_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}l=+c[e+20>>2];l=+c[e+52>>2]+(l>0?l:0);h=+c[21192+(_<<4)+4>>2]*l+ +c[e+96>>2];m=l*+c[21192+(_<<4)+8>>2]+ +c[e+100>>2];c[e+112>>2]=+c[e+92>>2]+ +c[21192+(_<<4)>>2]*l;c[e+116>>2]=h;c[e+120>>2]=m;c[e+124>>2]=0;o[g+456>>2]=1065353216;o[g+456+4>>2]=0;o[g+456+4+4>>2]=0;o[g+456+4+8>>2]=0;o[g+456+4+12>>2]=0;o[g+456+20>>2]=1065353216;o[g+456+24>>2]=0;o[g+456+24+4>>2]=0;o[g+456+24+8>>2]=0;o[g+456+24+12>>2]=0;o[g+456+40>>2]=1065353216;_=g+456+44|0;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;o[_+12>>2]=0;o[_+16>>2]=0;o[g+392>>2]=1065353216;o[g+392+4>>2]=0;o[g+392+4+4>>2]=0;o[g+392+4+8>>2]=0;o[g+392+4+12>>2]=0;o[g+392+20>>2]=1065353216;o[g+392+24>>2]=0;o[g+392+24+4>>2]=0;o[g+392+24+8>>2]=0;o[g+392+24+12>>2]=0;o[g+392+40>>2]=1065353216;_=g+392+44|0;o[_>>2]=0;o[_+4>>2]=0;o[_+8>>2]=0;o[_+12>>2]=0;o[_+16>>2]=0;_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}f=o[e+12>>2]|0;l=+wP[o[(o[f>>2]|0)+48>>2]&15](f);l=l+ +c[e+56>>2];h=l*+c[21192+(_<<4)+4>>2]+ +c[e+96>>2];m=l*+c[21192+(_<<4)+8>>2]+ +c[e+100>>2];c[g+456+48>>2]=+c[21192+(_<<4)>>2]*l+ +c[e+92>>2];c[g+456+52>>2]=h;c[g+456+56>>2]=m;c[g+456+60>>2]=0;o[g+392+48>>2]=o[e+112>>2];o[g+392+48+4>>2]=o[e+112+4>>2];o[g+392+48+8>>2]=o[e+112+8>>2];o[g+392+48+12>>2]=o[e+112+12>>2];_=o[e+8>>2]|0;f=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}l=-+c[21192+(f<<4)>>2];h=-+c[21192+(f<<4)+4>>2];m=-+c[21192+(f<<4)+8>>2];c[g+288+4>>2]=1;r[g+288+8>>1]=1;r[g+288+10>>1]=-1;d=g+288+12|0;o[g+288+76>>2]=0;o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;o[d+16>>2]=0;o[d+20>>2]=0;o[d+24>>2]=0;o[d+28>>2]=0;o[g+288>>2]=7108;o[g+288+80>>2]=_;c[g+288+84>>2]=l;c[g+288+88>>2]=h;c[g+288+92>>2]=m;c[g+288+96>>2]=0;c[g+288+100>>2]=.707099974155426;_=o[e+8>>2]|0;d=o[(o[_+188>>2]|0)+4>>2]|0;r[g+288+8>>1]=d;r[g+288+10>>1]=d>>>16;if(!(n[e+170>>0]|0))zw(t,o[e+12>>2]|0,g+456|0,g+392|0,g+288|0,0);else OD(_,o[e+12>>2]|0,g+456|0,g+392|0,g+288|0,+c[t+56>>2]);if(+c[g+288+4>>2]<1){_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}do if(+c[g+288+44>>2]*+c[21192+(_<<4)>>2]+ +c[g+288+48>>2]*+c[21192+(_<<4)+4>>2]+ +c[g+288+52>>2]*+c[21192+(_<<4)+8>>2]>0){s=+c[g+288+4>>2];c[e+108>>2]=+c[e+52>>2]*s;if(!(n[e+180>>0]|0)){o[e+92>>2]=o[e+112>>2];o[e+92+4>>2]=o[e+112+4>>2];o[e+92+8>>2]=o[e+112+8>>2];o[e+92+12>>2]=o[e+112+12>>2];break}else{c[e+92>>2]=(1-s)*+c[e+92>>2]+s*+c[e+112>>2];c[e+96>>2]=(1-s)*+c[e+96>>2]+s*+c[e+116>>2];c[e+100>>2]=(1-s)*+c[e+100>>2]+s*+c[e+120>>2];break}}while(0);c[e+16>>2]=0;c[e+20>>2]=0}else{o[e+108>>2]=o[e+52>>2];o[e+92>>2]=o[e+112>>2];o[e+92+4>>2]=o[e+112+4>>2];o[e+92+8>>2]=o[e+112+8>>2];o[e+92+12>>2]=o[e+112+12>>2]}if(!(n[e+171>>0]|0)){h=+c[e+172>>2];m=h>i?i:h;c[e+172>>2]=h-i;dI(e,t,m*+c[e+60>>2],m*+c[e+64>>2],m*+c[e+68>>2])}else dI(e,t,+c[e+60>>2],+c[e+64>>2],+c[e+68>>2]);o[g+272>>2]=o[e+112>>2];o[g+272+4>>2]=o[e+112+4>>2];o[g+272+8>>2]=o[e+112+8>>2];o[g+272+12>>2]=o[e+112+12>>2];s=+c[e+16>>2];s=(s<0?-s:0)*i;if(s>0?(b=+c[e+24>>2],s>b):0){d=r[e+168>>1]|0;s=(d&255)<<24>>24!=0|(d&65535)<256?b:s}_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}b=s+ +c[e+108>>2];h=+c[21192+(_<<4)>>2]*b;m=b*+c[21192+(_<<4)+4>>2];b=b*+c[21192+(_<<4)+8>>2];c[e+112>>2]=+c[e+112>>2]-h;c[e+116>>2]=+c[e+116>>2]-m;c[e+120>>2]=+c[e+120>>2]-b;_=o[e+8>>2]|0;f=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}u=o[e+40>>2]|0;d=g+168+4|0;c[d>>2]=1;r[g+168+8>>1]=1;r[g+168+10>>1]=-1;v=g+168+12|0;o[g+168+76>>2]=0;o[v>>2]=0;o[v+4>>2]=0;o[v+8>>2]=0;o[v+12>>2]=0;o[v+16>>2]=0;o[v+20>>2]=0;o[v+24>>2]=0;o[v+28>>2]=0;o[g+168>>2]=7108;o[g+168+80>>2]=_;o[g+168+84>>2]=o[21192+(f<<4)>>2];o[g+168+84+4>>2]=o[21192+(f<<4)+4>>2];o[g+168+84+8>>2]=o[21192+(f<<4)+8>>2];o[g+168+84+12>>2]=o[21192+(f<<4)+12>>2];o[g+168+100>>2]=u;_=o[e+8>>2]|0;f=o[(o[_+188>>2]|0)+4>>2]|0;r[g+168+8>>1]=f;r[g+168+10>>1]=f>>>16;f=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}v=o[e+40>>2]|0;c[g+64+4>>2]=1;r[g+64+8>>1]=1;r[g+64+10>>1]=-1;u=g+64+12|0;o[g+64+76>>2]=0;o[u>>2]=0;o[u+4>>2]=0;o[u+8>>2]=0;o[u+12>>2]=0;o[u+16>>2]=0;o[u+20>>2]=0;o[u+24>>2]=0;o[u+28>>2]=0;o[g+64>>2]=7108;o[g+64+80>>2]=_;o[g+64+84>>2]=o[21192+(f<<4)>>2];o[g+64+84+4>>2]=o[21192+(f<<4)+4>>2];o[g+64+84+8>>2]=o[21192+(f<<4)+8>>2];o[g+64+84+12>>2]=o[21192+(f<<4)+12>>2];o[g+64+100>>2]=v;_=o[(o[(o[e+8>>2]|0)+188>>2]|0)+4>>2]|0;r[g+64+8>>1]=_;r[g+64+10>>1]=_>>>16;s=+c[e+112>>2];a=+c[e+116>>2];l=+c[e+120>>2];_=0;while(1){o[g+456>>2]=1065353216;o[g+456+4>>2]=0;o[g+456+4+4>>2]=0;o[g+456+4+8>>2]=0;o[g+456+4+12>>2]=0;o[g+456+20>>2]=1065353216;o[g+456+24>>2]=0;o[g+456+24+4>>2]=0;o[g+456+24+8>>2]=0;o[g+456+24+12>>2]=0;o[g+456+40>>2]=1065353216;o[g+456+44>>2]=0;o[g+392>>2]=1065353216;o[g+392+4>>2]=0;o[g+392+4+4>>2]=0;o[g+392+4+8>>2]=0;o[g+392+4+12>>2]=0;o[g+392+20>>2]=1065353216;o[g+392+24>>2]=0;o[g+392+24+4>>2]=0;o[g+392+24+8>>2]=0;o[g+392+24+12>>2]=0;o[g+392+40>>2]=1065353216;o[g+392+44>>2]=0;o[g+288>>2]=1065353216;o[g+288+4>>2]=0;o[g+288+4+4>>2]=0;o[g+288+4+8>>2]=0;o[g+288+4+12>>2]=0;o[g+288+20>>2]=1065353216;o[g+288+24>>2]=0;o[g+288+24+4>>2]=0;o[g+288+24+8>>2]=0;o[g+288+24+12>>2]=0;o[g+288+40>>2]=1065353216;o[g+288+44>>2]=0;o[g+288+44+4>>2]=0;o[g+288+44+8>>2]=0;o[g+456+48>>2]=o[e+92>>2];o[g+456+48+4>>2]=o[e+92+4>>2];o[g+456+48+8>>2]=o[e+92+8>>2];o[g+456+48+12>>2]=o[e+92+12>>2];o[g+392+48>>2]=o[e+112>>2];o[g+392+48+4>>2]=o[e+112+4>>2];o[g+392+48+8>>2]=o[e+112+8>>2];o[g+392+48+12>>2]=o[e+112+12>>2];c[g+288+48>>2]=s-h;c[g+288+52>>2]=a-m;c[g+288+56>>2]=l-b;c[g+288+60>>2]=0;if(!(n[e+170>>0]|0)){zw(t,o[e+12>>2]|0,g+456|0,g+392|0,g+168|0,+c[t+56>>2]);if(!(+c[d>>2]<1))zw(t,o[e+12>>2]|0,g+456|0,g+288|0,g+64|0,+c[t+56>>2])}else{OD(o[e+8>>2]|0,o[e+12>>2]|0,g+456|0,g+392|0,g+168|0,+c[t+56>>2]);if(!(+c[d>>2]<1))OD(o[e+8>>2]|0,o[e+12>>2]|0,g+456|0,g+288|0,g+64|0,+c[t+56>>2])}a=+c[e+16>>2];a=(a<0?-a:0)*i;u=(n[e+182>>0]|0)==0;if(!u?+c[d>>2]<1:0)f=1;else f=+c[g+64+4>>2]<1;if(!(a>0))break;s=+c[e+52>>2];if(_|(!(a<s)|f^1))break;v=r[e+168>>1]|0;if(!((v&255)<<24>>24!=0|(v&65535)<256)){_=0;break}o[e+112>>2]=o[g+272>>2];o[e+112+4>>2]=o[g+272+4>>2];o[e+112+8>>2]=o[g+272+8>>2];o[e+112+12>>2]=o[g+272+12>>2];_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}s=s+ +c[e+108>>2];a=s*+c[21192+(_<<4)+4>>2];l=s*+c[21192+(_<<4)+8>>2];s=+c[e+112>>2]-+c[21192+(_<<4)>>2]*s;c[e+112>>2]=s;a=+c[e+116>>2]-a;c[e+116>>2]=a;l=+c[e+120>>2]-l;c[e+120>>2]=l;_=1}l=+c[d>>2];if(_|l<1){s=+c[e+96>>2];a=(s-+c[g+168+64>>2])*.5;do if(!u)if(!(n[e+181>>0]|0)){c[e+92>>2]=(1-a)*+c[e+92>>2]+a*+c[e+112>>2];c[e+96>>2]=(1-a)*s+a*+c[e+116>>2];c[e+100>>2]=(1-a)*+c[e+100>>2]+a*+c[e+120>>2];_=e+181|0;break}else{c[e+92>>2]=(1-l)*+c[e+92>>2]+l*+c[e+112>>2];c[e+96>>2]=(1-l)*s+l*+c[e+116>>2];c[e+100>>2]=(1-l)*+c[e+100>>2]+l*+c[e+120>>2];_=e+181|0;break}else{c[e+92>>2]=(1-l)*+c[e+92>>2]+l*+c[e+112>>2];c[e+96>>2]=(1-l)*s+l*+c[e+116>>2];c[e+100>>2]=(1-l)*+c[e+100>>2]+l*+c[e+120>>2];_=e+181|0}while(0);n[_>>0]=0;c[e+16>>2]=0;c[e+20>>2]=0;n[e+169>>0]=0}else{n[e+181>>0]=1;if((!u?(y=+c[e+24>>2],a>y):0)?(v=r[e+168>>1]|0,(v&255)<<24>>24!=0|(v&65535)<256):0){c[e+112>>2]=h+ +c[e+112>>2];c[e+116>>2]=m+ +c[e+116>>2];c[e+120>>2]=b+ +c[e+120>>2];_=o[e+176>>2]|0;if(!(n[19872]|0)){n[19872]=1;o[5298]=1065353216;o[5299]=0;o[5300]=0;o[5301]=0;o[5302]=0;o[5303]=1065353216;o[5304]=0;o[5305]=0;o[5306]=0;o[5307]=0;o[5308]=1065353216;c[5309]=0}m=y+ +c[e+108>>2];i=m*+c[21192+(_<<4)+4>>2];y=m*+c[21192+(_<<4)+8>>2];c[e+112>>2]=+c[e+112>>2]-+c[21192+(_<<4)>>2]*m;c[e+116>>2]=+c[e+116>>2]-i;c[e+120>>2]=+c[e+120>>2]-y}o[e+92>>2]=o[e+112>>2];o[e+92+4>>2]=o[e+112+4>>2];o[e+92+8>>2]=o[e+112+8>>2];o[e+92+12>>2]=o[e+112+12>>2]}o[g+48>>2]=o[e+92>>2];o[g+48+4>>2]=o[e+92+4>>2];o[g+48+8>>2]=o[e+92+8>>2];o[g+48+12>>2]=o[e+92+12>>2];v=o[e+8>>2]|0;o[v+284>>2]=(o[v+284>>2]|0)+1;o[v+4>>2]=o[g>>2];o[v+4+4>>2]=o[g+4>>2];o[v+4+8>>2]=o[g+8>>2];o[v+4+12>>2]=o[g+12>>2];o[v+20>>2]=o[g+16>>2];o[v+20+4>>2]=o[g+16+4>>2];o[v+20+8>>2]=o[g+16+8>>2];o[v+20+12>>2]=o[g+16+12>>2];o[v+36>>2]=o[g+32>>2];o[v+36+4>>2]=o[g+32+4>>2];o[v+36+8>>2]=o[g+32+8>>2];o[v+36+12>>2]=o[g+32+12>>2];o[v+52>>2]=o[g+48>>2];o[v+52+4>>2]=o[g+48+4>>2];o[v+52+8>>2]=o[g+48+8>>2];o[v+52+12>>2]=o[g+48+12>>2];p=g;return}function lI(e){e=e|0;qa(e);return}function uI(e,t){e=e|0;t=t|0;t=o[t+4>>2]|0;if(!((r[e+10>>1]&(t&65535))<<16>>16)){e=0;return e|0}e=(t>>>16&65535&r[e+8>>1])<<16>>16!=0;return e|0}function bI(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;s=o[t>>2]|0;if((s|0)==(o[e+80>>2]|0)){f=1;return+f}if(o[s+204>>2]&4|0){f=1;return+f}_=+c[t+8>>2];r=+c[t+12>>2];n=+c[t+16>>2];if(i){a=_;f=r}else{a=+c[s+4>>2]*_+ +c[s+8>>2]*r+ +c[s+12>>2]*n;f=_*+c[s+20>>2]+r*+c[s+24>>2]+n*+c[s+28>>2];n=_*+c[s+36>>2]+r*+c[s+40>>2]+n*+c[s+44>>2]}if(a*+c[e+84>>2]+f*+c[e+88>>2]+n*+c[e+92>>2]<+c[e+100>>2]){f=1;return+f}o[e+4>>2]=o[t+40>>2];o[e+76>>2]=s;if(i){o[e+44>>2]=o[t+8>>2];o[e+44+4>>2]=o[t+8+4>>2];o[e+44+8>>2]=o[t+8+8>>2];o[e+44+12>>2]=o[t+8+12>>2]}else{n=+c[t+8>>2];r=+c[t+12>>2];_=+c[t+16>>2];a=n*+c[s+20>>2]+r*+c[s+24>>2]+_*+c[s+28>>2];f=n*+c[s+36>>2]+r*+c[s+40>>2]+_*+c[s+44>>2];c[e+44>>2]=+c[s+4>>2]*n+ +c[s+8>>2]*r+ +c[s+12>>2]*_;c[e+48>>2]=a;c[e+52>>2]=f;c[e+56>>2]=0}o[e+60>>2]=o[t+24>>2];o[e+60+4>>2]=o[t+24+4>>2];o[e+60+8>>2]=o[t+24+8>>2];o[e+60+12>>2]=o[t+24+12>>2];f=+c[t+40>>2];return+f}function dI(e,t,i,_,s){e=e|0;t=t|0;i=+i;_=+_;s=+s;var a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;h=p;p=p+240|0;b=+c[e+96>>2]+_;d=+c[e+100>>2]+s;c[e+112>>2]=+c[e+92>>2]+i;c[e+116>>2]=b;c[e+120>>2]=d;c[e+124>>2]=0;o[h+168>>2]=1065353216;o[h+168+4>>2]=0;o[h+168+4+4>>2]=0;o[h+168+4+8>>2]=0;o[h+168+4+12>>2]=0;o[h+168+20>>2]=1065353216;o[h+168+24>>2]=0;o[h+168+24+4>>2]=0;o[h+168+24+8>>2]=0;o[h+168+24+12>>2]=0;o[h+168+40>>2]=1065353216;a=h+168+44|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[h+104>>2]=1065353216;o[h+104+4>>2]=0;o[h+104+4+4>>2]=0;o[h+104+4+8>>2]=0;o[h+104+4+12>>2]=0;o[h+104+20>>2]=1065353216;o[h+104+24>>2]=0;o[h+104+24+4>>2]=0;o[h+104+24+8>>2]=0;o[h+104+24+12>>2]=0;o[h+104+40>>2]=1065353216;a=h+104+44|0;o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;d=1;a=10;while(1){if((a|0)<=0){a=14;break}a=a+-1|0;o[h+168+48>>2]=o[e+92>>2];o[h+168+48+4>>2]=o[e+92+4>>2];o[h+168+48+8>>2]=o[e+92+8>>2];o[h+168+48+12>>2]=o[e+92+12>>2];o[h+104+48>>2]=o[e+112>>2];o[h+104+48+4>>2]=o[e+112+4>>2];o[h+104+48+8>>2]=o[e+112+8>>2];o[h+104+48+12>>2]=o[e+112+12>>2];u=+c[e+92>>2]-+c[e+112>>2];b=+c[e+96>>2]-+c[e+116>>2];i=+c[e+100>>2]-+c[e+120>>2];m=o[e+8>>2]|0;c[h+4>>2]=1;r[h+8>>1]=1;r[h+10>>1]=-1;o[h+76>>2]=0;o[h+12>>2]=0;o[h+12+4>>2]=0;o[h+12+8>>2]=0;o[h+12+12>>2]=0;o[h+12+16>>2]=0;o[h+12+20>>2]=0;o[h+12+24>>2]=0;o[h+12+28>>2]=0;o[h>>2]=7108;o[h+80>>2]=m;c[h+84>>2]=u;c[h+88>>2]=b;c[h+92>>2]=i;c[h+96>>2]=0;c[h+100>>2]=0;m=o[(o[m+188>>2]|0)+4>>2]|0;r[h+8>>1]=m;r[h+10>>1]=m>>>16;m=o[e+12>>2]|0;i=+wP[o[(o[m>>2]|0)+48>>2]&15](m);m=o[e+12>>2]|0;oP[o[(o[m>>2]|0)+44>>2]&31](m,i+ +c[e+56>>2]);if(!(n[e+170>>0]|0))zw(t,o[e+12>>2]|0,h+168|0,h+104|0,h,+c[t+56>>2]);else OD(o[e+8>>2]|0,o[e+12>>2]|0,h+168|0,h+104|0,h,+c[t+56>>2]);m=o[e+12>>2]|0;oP[o[(o[m>>2]|0)+44>>2]&31](m,i);b=+c[h+4>>2];d=d-b;if(b<1){_=+c[e+112>>2];l=+c[e+92>>2];s=+c[e+116>>2];u=+c[e+96>>2];f=+c[e+120>>2];b=+c[e+100>>2];i=+X(+((_-l)*(_-l)+(s-u)*(s-u)+(f-b)*(f-b)));if(i>1.1920928955078125e-7){C=+c[h+44>>2];g=+c[h+48>>2];k=+c[h+52>>2];w=((_-l)*(1/i)*C+(s-u)*(1/i)*g+(f-b)*(1/i)*k)*2;v=(_-l)*(1/i)-C*w;y=(s-u)*(1/i)-g*w;w=(f-b)*(1/i)-k*w;f=1/+X(+(w*w+(v*v+y*y)));o[e+112>>2]=o[e+92>>2];o[e+112+4>>2]=o[e+92+4>>2];o[e+112+8>>2]=o[e+92+8>>2];o[e+112+12>>2]=o[e+92+12>>2];_=i*(f*v-C*(k*(f*w)+(C*(f*v)+g*(f*y))))+ +c[e+112>>2];c[e+112>>2]=_;s=i*(f*y-g*(k*(f*w)+(C*(f*v)+g*(f*y))))+ +c[e+116>>2];c[e+116>>2]=s;f=i*(f*w-k*(k*(f*w)+(C*(f*v)+g*(f*y))))+ +c[e+120>>2];c[e+120>>2]=f;i=s}else i=s;s=_-l;_=i-u;i=f-b;if(!(s*s+_*_+i*i>1.1920928955078125e-7)){a=11;break}k=1/+X(+(s*s+_*_+i*i));if(+c[e+76>>2]*(s*k)+_*k*+c[e+80>>2]+i*k*+c[e+84>>2]<=0){a=11;break}}else{o[e+92>>2]=o[e+112>>2];o[e+92+4>>2]=o[e+112+4>>2];o[e+92+8>>2]=o[e+112+8>>2];o[e+92+12>>2]=o[e+112+12>>2]}if(!(d>.009999999776482582)){a=14;break}}if((a|0)==11){p=h;return}else if((a|0)==14){p=h;return}}function hI(e){e=e|0;return fP[o[(o[e>>2]|0)+48>>2]&127](e)|0}function mI(e){e=e|0;if(!(fP[o[(o[e>>2]|0)+40>>2]&127](e)|0))return;o[e+16>>2]=o[e+28>>2];n[e+169>>0]=1;return}function yI(e){e=e|0;if(!(+c[e+16>>2]==0)){e=0;return e|0}e=+c[e+20>>2]==0;return e|0}function gI(e,t){e=e|0;t=t|0;n[e+180>>0]=t&1;return}function vI(e){e=e|0;o[e>>2]=7188;return}function CI(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function wI(e){e=e|0;return}function kI(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;return}function SI(e,t,i,n){e=e|0;t=t|0;i=i|0;n=+n;return}function RI(e){e=e|0;return 52}function jI(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function II(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0;C=p;p=p+176|0;if(!(n[e+527>>0]|0)){p=C;return}c[e+36>>2]=0;c[e+520>>2]=0;c[e+516>>2]=0;o[e+576>>2]=0;o[e+576+4>>2]=0;o[e+576+8>>2]=0;o[e+576+12>>2]=0;if(!(n[e+524>>0]|0)){t=o[e+28>>2]|0;a=+c[e+348>>2];f=+c[e+352>>2];m=+c[e+356>>2];g=a*+c[t+20>>2]+f*+c[t+24>>2]+m*+c[t+28>>2]+ +c[t+56>>2];s=o[e+32>>2]|0;l=+c[e+412>>2];u=+c[e+416>>2];y=+c[e+420>>2];b=+c[s+52>>2];i=+c[s+56>>2];v=l*+c[s+20>>2]+u*+c[s+24>>2]+y*+c[s+28>>2]+i;d=l*+c[s+36>>2]+u*+c[s+40>>2]+y*+c[s+44>>2]+ +c[s+60>>2];h=a*+c[t+4>>2]+f*+c[t+8>>2]+m*+c[t+12>>2]+ +c[t+52>>2];m=a*+c[t+36>>2]+f*+c[t+40>>2]+m*+c[t+44>>2]+ +c[t+60>>2];y=l*+c[s+4>>2]+u*+c[s+8>>2]+y*+c[s+12>>2]+b;if((y-h)*(y-h)+(v-g)*(v-g)+(d-m)*(d-m)>1.1920928955078125e-7){_=1/+X(+((y-h)*(y-h)+(v-g)*(v-g)+(d-m)*(d-m)));c[C+128>>2]=(y-h)*_;c[C+128+4>>2]=(v-g)*_;c[C+128+8>>2]=(d-m)*_;o[C+128+12>>2]=0;a=(d-m)*_;r=(v-g)*_;_=(y-h)*_}else{o[C+128>>2]=1065353216;o[C+128+4>>2]=0;o[C+128+8>>2]=0;c[C+128+12>>2]=0;a=0;r=0;_=1}if(+N(+a)>.7071067690849304){k=a*a+r*r;w=1/+X(+k);l=-(w*a);a=w*r;u=-(a*_);f=_*l;r=k*w;_=a;a=0}else{l=_*_+r*r;f=1/+X(+l);k=-(r*f);r=f*_;u=a*k;f=l*f;l=r;r=-(r*a);_=0;a=k}c[C+128+16>>2]=a;c[C+128+20>>2]=l;c[C+128+24>>2]=_;c[C+128+32>>2]=r;c[C+128+36>>2]=u;c[C+128+40>>2]=f;r=b;t=0;while(1){S=o[e+28>>2]|0;o[C+80>>2]=o[S+4>>2];o[C+80+4>>2]=o[S+20>>2];o[C+80+8>>2]=o[S+36>>2];c[C+80+12>>2]=0;o[C+80+16>>2]=o[S+8>>2];o[C+80+20>>2]=o[S+24>>2];o[C+80+24>>2]=o[S+40>>2];c[C+80+28>>2]=0;o[C+80+32>>2]=o[S+12>>2];o[C+80+36>>2]=o[S+28>>2];o[C+80+40>>2]=o[S+44>>2];c[C+80+44>>2]=0;o[C+32>>2]=o[s+4>>2];o[C+32+4>>2]=o[s+20>>2];o[C+32+8>>2]=o[s+36>>2];c[C+32+12>>2]=0;o[C+32+16>>2]=o[s+8>>2];o[C+32+20>>2]=o[s+24>>2];o[C+32+24>>2]=o[s+40>>2];c[C+32+28>>2]=0;o[C+32+32>>2]=o[s+12>>2];o[C+32+36>>2]=o[s+28>>2];o[C+32+40>>2]=o[s+44>>2];c[C+32+44>>2]=0;w=g-+c[S+56>>2];k=m-+c[S+60>>2];c[C+16>>2]=h-+c[S+52>>2];c[C+16+4>>2]=w;c[C+16+8>>2]=k;c[C+16+12>>2]=0;k=d-+c[s+60>>2];c[C>>2]=y-r;c[C+4>>2]=v-i;c[C+8>>2]=k;c[C+12>>2]=0;S=o[e+28>>2]|0;s=o[e+32>>2]|0;TI(e+48+(t*84|0)|0,C+80|0,C+32|0,C+16|0,C,C+128+(t<<4)|0,S+420|0,+c[S+368>>2],s+420|0,+c[s+368>>2]);t=t+1|0;if((t|0)==3)break;S=o[e+32>>2]|0;s=S;r=+c[S+52>>2];i=+c[S+56>>2]}t=e+32|0}else t=e+32|0;s=o[e+28>>2]|0;S=o[t>>2]|0;DI(e,s+4|0,S+4|0,s+288|0,S+288|0);p=C;return}function TI(e,t,i,n,r,_,s,a,f,p){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=+a;f=f|0;p=+p;var l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;o[e>>2]=o[_>>2];o[e+4>>2]=o[_+4>>2];o[e+8>>2]=o[_+8>>2];o[e+12>>2]=o[_+12>>2];y=+c[n+4>>2];C=+c[e+8>>2];w=+c[n+8>>2];d=+c[e+4>>2];l=+c[e>>2];m=+c[n>>2];v=(y*C-w*d)*+c[t>>2]+ +c[t+4>>2]*(w*l-C*m)+(d*m-y*l)*+c[t+8>>2];g=(y*C-w*d)*+c[t+16>>2]+(w*l-C*m)*+c[t+20>>2]+(d*m-y*l)*+c[t+24>>2];y=(y*C-w*d)*+c[t+32>>2]+(w*l-C*m)*+c[t+36>>2]+(d*m-y*l)*+c[t+40>>2];c[e+16>>2]=v;c[e+20>>2]=g;c[e+24>>2]=y;c[e+28>>2]=0;m=+c[r+4>>2];w=+c[r+8>>2];u=+c[r>>2];h=+c[i>>2]*(m*-C-w*-d)+ +c[i+4>>2]*(w*-l-u*-C)+(u*-d-m*-l)*+c[i+8>>2];b=(m*-C-w*-d)*+c[i+16>>2]+(w*-l-u*-C)*+c[i+20>>2]+(u*-d-m*-l)*+c[i+24>>2];l=(m*-C-w*-d)*+c[i+32>>2]+(w*-l-u*-C)*+c[i+36>>2]+(u*-d-m*-l)*+c[i+40>>2];c[e+32>>2]=h;c[e+36>>2]=b;c[e+40>>2]=l;c[e+44>>2]=0;v=+c[s>>2]*v;g=+c[s+4>>2]*g;y=+c[s+8>>2]*y;c[e+48>>2]=v;c[e+52>>2]=g;c[e+56>>2]=y;c[e+60>>2]=0;m=+c[f>>2]*h;d=+c[f+4>>2]*b;u=+c[f+8>>2]*l;c[e+64>>2]=m;c[e+68>>2]=d;c[e+72>>2]=u;c[e+76>>2]=0;c[e+80>>2]=v*+c[e+16>>2]+g*+c[e+20>>2]+y*+c[e+24>>2]+a+p+(m*h+d*b+u*l);return}function DI(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,z=0,K=0,Q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0,de=0,he=0,me=0,ye=0,ge=0,ve=0,Ce=0,we=0;me=p;p=p+144|0;c[e+504>>2]=0;c[e+500>>2]=0;n[e+525>>0]=0;n[e+526>>0]=0;if(n[e+552>>0]|0?(n[e+527>>0]|0)==0:0){we=+c[e+556>>2];ve=+c[e+560>>2];he=+c[e+564>>2];ge=+c[e+568>>2];oe=we*(2/(we*we+ve*ve+he*he+ge*ge));Ce=ve*(2/(we*we+ve*ve+he*he+ge*ge));ye=he*(2/(we*we+ve*ve+he*he+ge*ge));_e=+c[e+300>>2];K=+c[t>>2];se=+c[e+316>>2];Q=+c[t+4>>2];ae=+c[e+332>>2];J=+c[t+8>>2];fe=+c[e+304>>2];le=+c[e+320>>2];be=+c[e+336>>2];ie=+c[e+308>>2];ne=+c[e+324>>2];re=+c[e+340>>2];$=+c[t+16>>2];ee=+c[t+20>>2];te=+c[t+24>>2];pe=+c[t+32>>2];ue=+c[t+36>>2];de=+c[t+40>>2];w=+c[e+348>>2];C=+c[e+352>>2];v=+c[e+356>>2];j=+c[e+364>>2];l=+c[i>>2];I=+c[e+380>>2];b=+c[i+4>>2];T=+c[e+396>>2];f=+c[i+8>>2];D=+c[e+368>>2];O=+c[e+384>>2];L=+c[e+400>>2];k=+c[e+372>>2];S=+c[e+388>>2];R=+c[e+404>>2];h=+c[i+16>>2];m=+c[i+20>>2];a=+c[i+24>>2];x=+c[i+32>>2];P=+c[i+36>>2];B=+c[i+40>>2];M=+c[e+412>>2];W=+c[e+416>>2];s=+c[e+420>>2];F=(1-(ve*Ce+he*ye))*(j*l+I*b+T*f)+(we*Ce+ge*ye)*(l*D+b*O+f*L)+(we*ye-ge*Ce)*(l*k+b*S+f*R);G=(we*Ce-ge*ye)*(j*l+I*b+T*f)+(1-(we*oe+he*ye))*(l*D+b*O+f*L)+(ve*ye+ge*oe)*(l*k+b*S+f*R);A=(we*ye+ge*Ce)*(j*l+I*b+T*f)+(ve*ye-ge*oe)*(l*D+b*O+f*L)+(1-(we*oe+ve*Ce))*(l*k+b*S+f*R);H=(we*ye-ge*Ce)*(k*h+S*m+R*a)+((1-(ve*Ce+he*ye))*(j*h+I*m+T*a)+(we*Ce+ge*ye)*(D*h+O*m+L*a));z=(ve*ye+ge*oe)*(k*h+S*m+R*a)+((we*Ce-ge*ye)*(j*h+I*m+T*a)+(1-(we*oe+he*ye))*(D*h+O*m+L*a));V=(1-(we*oe+ve*Ce))*(k*h+S*m+R*a)+((we*ye+ge*Ce)*(j*h+I*m+T*a)+(ve*ye-ge*oe)*(D*h+O*m+L*a));ce=(we*ye-ge*Ce)*(k*x+S*P+R*B)+((1-(ve*Ce+he*ye))*(j*x+I*P+T*B)+(we*Ce+ge*ye)*(D*x+O*P+L*B));he=(ve*ye+ge*oe)*(k*x+S*P+R*B)+((we*Ce-ge*ye)*(j*x+I*P+T*B)+(1-(we*oe+he*ye))*(D*x+O*P+L*B));oe=(1-(we*oe+ve*Ce))*(k*x+S*P+R*B)+((we*ye+ge*Ce)*(j*x+I*P+T*B)+(ve*ye-ge*oe)*(D*x+O*P+L*B));ge=-(+c[t+48>>2]+(K*w+Q*C+J*v));ye=-($*w+ee*C+te*v+ +c[t+52>>2]);v=-(pe*w+ue*C+de*v+ +c[t+56>>2]);C=(_e*K+se*Q+ae*J)*ge+(_e*$+se*ee+ae*te)*ye+(_e*pe+se*ue+ae*de)*v;w=(K*fe+Q*le+J*be)*ge+(fe*$+le*ee+be*te)*ye+(fe*pe+le*ue+be*de)*v;v=(K*ie+Q*ne+J*re)*ge+(ie*$+ne*ee+re*te)*ye+(ie*pe+ne*ue+re*de)*v;f=v*A+(C*F+w*G)+((j*l+I*b+T*f)*0+(l*D+b*O+f*L)*0+(l*k+b*S+f*R)*0+(+c[i+48>>2]+(l*M+b*W+f*s)));a=v*V+(C*H+w*z)+((k*h+S*m+R*a)*0+((j*h+I*m+T*a)*0+(D*h+O*m+L*a)*0)+(h*M+m*W+a*s+ +c[i+52>>2]));s=v*oe+(C*ce+w*he)+((k*x+S*P+R*B)*0+((j*x+I*P+T*B)*0+(D*x+O*P+L*B)*0)+(x*M+P*W+B*s+ +c[i+56>>2]));c[me+80>>2]=(K*ie+Q*ne+J*re)*A+((_e*K+se*Q+ae*J)*F+(K*fe+Q*le+J*be)*G);c[me+80+4>>2]=(ie*$+ne*ee+re*te)*A+((_e*$+se*ee+ae*te)*F+(fe*$+le*ee+be*te)*G);c[me+80+8>>2]=(ie*pe+ne*ue+re*de)*A+((_e*pe+se*ue+ae*de)*F+(fe*pe+le*ue+be*de)*G);c[me+80+12>>2]=0;c[me+80+16>>2]=(K*ie+Q*ne+J*re)*V+((_e*K+se*Q+ae*J)*H+(K*fe+Q*le+J*be)*z);c[me+80+20>>2]=(ie*$+ne*ee+re*te)*V+((_e*$+se*ee+ae*te)*H+(fe*$+le*ee+be*te)*z);c[me+80+24>>2]=(ie*pe+ne*ue+re*de)*V+((_e*pe+se*ue+ae*de)*H+(fe*pe+le*ue+be*de)*z);c[me+80+28>>2]=0;c[me+80+32>>2]=(K*ie+Q*ne+J*re)*oe+((_e*K+se*Q+ae*J)*ce+(K*fe+Q*le+J*be)*he);c[me+80+36>>2]=(ie*$+ne*ee+re*te)*oe+((_e*$+se*ee+ae*te)*ce+(fe*$+le*ee+be*te)*he);c[me+80+40>>2]=(ie*pe+ne*ue+re*de)*oe+((_e*pe+se*ue+ae*de)*ce+(fe*pe+le*ue+be*de)*he);c[me+80+44>>2]=0;c[me+80+48>>2]=f;c[me+80+52>>2]=a;c[me+80+56>>2]=s;c[me+80+60>>2]=0;Kw(me+80|0,me+64|0);s=+c[me+64>>2];a=+c[me+64+4>>2];f=+c[me+64+8>>2];if(!(+N(+(s*s+a*a+f*f))<1.1920928955078125e-7)?(c[e+472>>2]=0,we=1/+X(+(s*s+a*a+f*f)),c[e+460>>2]=s*we,c[e+464>>2]=a*we,c[e+468>>2]=f*we,we=+c[me+64+12>>2],we=we<-1?-1:we,we=+Y(+(we>1?1:we))*2,c[e+504>>2]=we,!(+N(+we)<1.1920928955078125e-7)):0)n[e+526>>0]=1;p=me;return}Kw(t,me+48|0);Kw(e+300|0,me+32|0);J=+c[me+48+12>>2];$=+c[me+32>>2];ee=+c[me+48>>2];te=+c[me+32+12>>2];ie=+c[me+48+4>>2];ne=+c[me+32+8>>2];re=+c[me+48+8>>2];oe=+c[me+32+4>>2];Kw(i,me+16|0);Kw(e+364|0,me);_e=+c[me+16+12>>2];se=+c[me>>2];ae=+c[me+16>>2];ce=+c[me+12>>2];fe=+c[me+16+4>>2];pe=+c[me+8>>2];le=+c[me+16+8>>2];ue=+c[me+4>>2];be=-(_e*se+ae*ce+fe*pe-le*ue);de=-(se*le+(ce*fe+_e*ue)-ae*pe);he=-(_e*pe+ce*le+ae*ue-se*fe);v=(J*te-$*ee-ie*oe-ne*re)*be+(J*$+ee*te+ie*ne-re*oe)*(_e*ce-se*ae-fe*ue-pe*le)+(J*ne+te*re+ee*oe-$*ie)*de-($*re+(te*ie+J*oe)-ee*ne)*he;C=(J*$+ee*te+ie*ne-re*oe)*he+(($*re+(te*ie+J*oe)-ee*ne)*(_e*ce-se*ae-fe*ue-pe*le)+(J*te-$*ee-ie*oe-ne*re)*de)-(J*ne+te*re+ee*oe-$*ie)*be;w=($*re+(te*ie+J*oe)-ee*ne)*be+((J*ne+te*re+ee*oe-$*ie)*(_e*ce-se*ae-fe*ue-pe*le)+(J*te-$*ee-ie*oe-ne*re)*he)-(J*$+ee*te+ie*ne-re*oe)*de;k=(J*te-$*ee-ie*oe-ne*re)*(_e*ce-se*ae-fe*ue-pe*le)-(J*$+ee*te+ie*ne-re*oe)*be-($*re+(te*ie+J*oe)-ee*ne)*de-(J*ne+te*re+ee*oe-$*ie)*he;f=+c[5310];l=+c[5312];a=+c[5311];b=(f*w+a*k-l*v)*-w+(k*(f*k+l*C-a*w)+(-(f*v)-a*C-l*w)*-v)-(l*k+a*v-f*C)*-C;s=(l*k+a*v-f*C)*-v+(k*(f*w+a*k-l*v)+(-(f*v)-a*C-l*w)*-C)-(f*k+l*C-a*w)*-w;h=(f*k+l*C-a*w)*-C+(k*(l*k+a*v-f*C)+(-(f*v)-a*C-l*w)*-w)-(f*w+a*k-l*v)*-v;m=1/+X(+(h*h+(b*b+s*s)));do if(l*(m*h)+(a*(m*s)+f*(m*b))<-.9999998807907104)if(+N(+l)>.7071067690849304){s=1/+X(+(l*l+a*a));d=0;y=(c[u>>2]=a*s,o[u>>2]|0);g=0;s=-(l*s);break}else{s=1/+X(+(f*f+a*a));d=(c[u>>2]=-(a*s),o[u>>2]|0);y=0;g=0;s=f*s;break}else{we=+X(+((l*(m*h)+(a*(m*s)+f*(m*b))+1)*2));d=(c[u>>2]=(a*(m*h)-l*(m*s))*(1/we),o[u>>2]|0);y=(c[u>>2]=(f*(m*s)-a*(m*b))*(1/we),o[u>>2]|0);g=(c[u>>2]=we*.5,o[u>>2]|0);s=(l*(m*b)-f*(m*h))*(1/we)}while(0);f=(o[u>>2]=d,+c[u>>2]);h=(o[u>>2]=y,+c[u>>2]);a=(o[u>>2]=g,+c[u>>2]);l=1/+X(+(f*f+s*s+h*h+a*a));b=s*l;z=w*-b+(v*(a*l)+k*-(f*l))-C*-(h*l);K=v*-(h*l)+(k*-b+C*(a*l))-w*-(f*l);Q=C*-(f*l)+(w*(a*l)+k*-(h*l))-v*-b;V=k*(a*l)-v*-(f*l)-C*-b-w*-(h*l);H=1/+X(+(V*V+(Q*Q+(z*z+K*K))));v=+c[e+444>>2];s=+c[e+456>>2];d=(c[u>>2]=v,o[u>>2]|0);if(v>=s?(S=+c[e+448>>2],S>=s):0){m=a*l<-1?-1:a*l;m=+Y(+(m>1?1:m))*2;if(m>1.1920928955078125e-7){s=1/+X(+(h*l*(h*l)+(f*l*(f*l)+b*b)));if(+N(+(b*s))>1.1920928955078125e-7){we=+X(+((h*l*s*(h*l*s)/(b*s*(b*s))+1)/(1/(S*S)+h*l*s*(h*l*s)/(b*s*(b*s))/(v*v))));f=f*l*s;a=h*l*s;s=b*s;d=(c[u>>2]=we,o[u>>2]|0)}else{f=f*l*s;a=h*l*s;s=b*s}}else{f=0;a=0;s=0;d=0}l=(o[u>>2]=d,+c[u>>2]);b=+c[e+428>>2];if(m>l*b){n[e+526>>0]=1;if(m<l&b<.9999998807907104)h=(m-l*b)/(l-l*b);else h=1;c[e+528>>2]=h;c[e+504>>2]=m-l*b;if(+N(+s)>1.1920928955078125e-7){we=+N(+(s*(-a/s*(S/v))));a=a<-0?we:-we;we=1/+X(+(f*f+s*s+a*a));f=f*we;a=-(a*we);s=s*we}Ce=-f;ve=-s;ye=-a;G=(_e*ce-se*ae-fe*ue-pe*le)*Ce+(se*le+(ce*fe+_e*ue)-ae*pe)*ye-(_e*pe+ce*le+ae*ue-se*fe)*ve;we=(_e*pe+ce*le+ae*ue-se*fe)*Ce+(_e*ce-se*ae-fe*ue-pe*le)*ve-(_e*se+ae*ce+fe*pe-le*ue)*ye;ge=(_e*se+ae*ce+fe*pe-le*ue)*ve+(_e*ce-se*ae-fe*ue-pe*le)*ye-(se*le+(ce*fe+_e*ue)-ae*pe)*Ce;ye=-((_e*se+ae*ce+fe*pe-le*ue)*Ce)-(se*le+(ce*fe+_e*ue)-ae*pe)*ve-(_e*pe+ce*le+ae*ue-se*fe)*ye;ve=we*he+(ye*be+(_e*ce-se*ae-fe*ue-pe*le)*G)-ge*de;Ce=ge*be+((_e*ce-se*ae-fe*ue-pe*le)*we+ye*de)-G*he;we=G*de+(ye*he+(_e*ce-se*ae-fe*ue-pe*le)*ge)-we*be;c[e+460>>2]=ve;c[e+464>>2]=Ce;c[e+468>>2]=we;c[e+472>>2]=0;o[e+536>>2]=0;o[e+536+4>>2]=0;o[e+536+8>>2]=0;o[e+536+12>>2]=0;c[e+492>>2]=1/(ve*(+c[r>>2]*ve+ +c[r+16>>2]*Ce+ +c[r+32>>2]*we)+Ce*(ve*+c[r+4>>2]+Ce*+c[r+20>>2]+we*+c[r+36>>2])+we*(ve*+c[r+8>>2]+Ce*+c[r+24>>2]+we*+c[r+40>>2])+(ve*(ve*+c[_>>2]+Ce*+c[_+16>>2]+we*+c[_+32>>2])+Ce*(ve*+c[_+4>>2]+Ce*+c[_+20>>2]+we*+c[_+36>>2])+we*(ve*+c[_+8>>2]+Ce*+c[_+24>>2]+we*+c[_+40>>2])))}}else E=23;e:do if((E|0)==23){x=+c[e+300>>2];M=+c[e+316>>2];P=+c[e+332>>2];m=+c[t>>2];v=+c[t+4>>2];C=+c[t+8>>2];w=+c[t+16>>2];k=+c[t+20>>2];S=+c[t+24>>2];W=+c[t+32>>2];B=+c[t+36>>2];R=+c[t+40>>2];j=+c[e+304>>2];I=+c[e+320>>2];T=+c[e+336>>2];D=+c[e+308>>2];O=+c[e+324>>2];L=+c[e+340>>2];l=+c[e+364>>2];f=+c[e+380>>2];A=+c[e+396>>2];F=l*+c[i>>2]+f*+c[i+4>>2]+A*+c[i+8>>2];G=l*+c[i+16>>2]+f*+c[i+20>>2]+A*+c[i+24>>2];A=l*+c[i+32>>2]+f*+c[i+36>>2]+A*+c[i+40>>2];\nf=(x*m+M*v+P*C)*F+(x*w+M*k+P*S)*G+(x*W+M*B+P*R)*A;l=(m*j+v*I+C*T)*F+(w*j+k*I+S*T)*G+(W*j+B*I+R*T)*A;h=(m*D+v*O+C*L)*F+(w*D+k*O+S*L)*G+(W*D+B*O+R*L)*A;a=+c[e+444>>2];s=+c[e+456>>2];do if(a<s){b=+c[e+448>>2];if(b<s){if(+N(+l)<1.1920928955078125e-7?+N(+h)<1.1920928955078125e-7:0)break e;n[e+526>>0]=1;c[e+460>>2]=-((x*W+M*B+P*R)*G-(x*w+M*k+P*S)*A);c[e+464>>2]=-((x*m+M*v+P*C)*A-(x*W+M*B+P*R)*F);c[e+468>>2]=-((x*w+M*k+P*S)*F-(x*m+M*v+P*C)*G);c[e+472>>2]=0;break e}if(+N(+f)<1.1920928955078125e-7?+N(+h)<1.1920928955078125e-7:0){a=l;s=h;break}n[e+526>>0]=1;if(b>=s){s=+q(+h,+f);if(s>b){f=+Z(+b);a=0;s=+U(+b);break}if(s<-b){f=+Z(+b);a=0;s=-+U(+b)}else{a=0;s=h}}else{a=l;s=h}}else{if(+N(+f)<1.1920928955078125e-7?+N(+l)<1.1920928955078125e-7:0){a=l;s=h;break}n[e+526>>0]=1;if(a>=s){s=+q(+l,+f);if(s>a){f=+Z(+a);a=+U(+a);s=0;break}if(s<-a){f=+Z(+a);a=-+U(+a);s=0}else{a=l;s=0}}else{a=l;s=h}}while(0);b=(m*D+v*O+C*L)*s+((m*j+v*I+C*T)*a+(x*m+M*v+P*C)*f);l=(w*D+k*O+S*L)*s+((w*j+k*I+S*T)*a+(x*w+M*k+P*S)*f);s=(W*D+B*O+R*L)*s+((W*j+B*I+R*T)*a+(x*W+M*B+P*R)*f);a=1/+X(+(s*s+(b*b+l*l)));c[e+460>>2]=-(G*(a*s)-A*(a*l));c[e+464>>2]=-(A*(a*b)-F*(a*s));c[e+468>>2]=-(F*(a*l)-G*(a*b));c[e+472>>2]=0;f=+X(+((G*(a*s)-A*(a*l))*(G*(a*s)-A*(a*l))+(A*(a*b)-F*(a*s))*(A*(a*b)-F*(a*s))+(F*(a*l)-G*(a*b))*(F*(a*l)-G*(a*b))));c[e+504>>2]=f;if(!(+N(+f)<1.1920928955078125e-7)){c[e+460>>2]=1/f*-(G*(a*s)-A*(a*l));c[e+464>>2]=1/f*-(A*(a*b)-F*(a*s));c[e+468>>2]=1/f*-(F*(a*l)-G*(a*b))}}while(0);m=+c[e+452>>2];if(!(m>=0)){c[e+512>>2]=0;p=me;return}s=H*V<-1?-1:H*V;s=+Y(+(s>1?1:s))*2;if(s>3.1415927410125732){h=-(H*V)<-1?-1:-(H*V);h=+Y(+(h>1?1:h))*2;a=-(H*z);f=-(H*K);s=-(H*Q)}else{h=s;a=H*z;f=H*K;s=H*Q}c[e+512>>2]=h;if(h>1.1920928955078125e-7){we=1/+X(+(a*a+f*f+s*s));b=a*we;l=s*we;f=f*we}else{b=a;l=s}s=+c[e+428>>2];if(h>m*s){n[e+525>>0]=1;a=h-m*s;if(h<m&s<.9999998807907104)s=a/(m-m*s);else s=1;c[e+532>>2]=s;c[e+508>>2]=a;Ce=-b;ve=-f;ye=-l;Q=(_e*ce-se*ae-fe*ue-pe*le)*Ce+(se*le+(ce*fe+_e*ue)-ae*pe)*ye-(_e*pe+ce*le+ae*ue-se*fe)*ve;we=(_e*pe+ce*le+ae*ue-se*fe)*Ce+(_e*ce-se*ae-fe*ue-pe*le)*ve-(_e*se+ae*ce+fe*pe-le*ue)*ye;ge=(_e*se+ae*ce+fe*pe-le*ue)*ve+(_e*ce-se*ae-fe*ue-pe*le)*ye-(se*le+(ce*fe+_e*ue)-ae*pe)*Ce;ye=-((_e*se+ae*ce+fe*pe-le*ue)*Ce)-(se*le+(ce*fe+_e*ue)-ae*pe)*ve-(_e*pe+ce*le+ae*ue-se*fe)*ye;ve=we*he+(ye*be+(_e*ce-se*ae-fe*ue-pe*le)*Q)-ge*de;Ce=ge*be+((_e*ce-se*ae-fe*ue-pe*le)*we+ye*de)-Q*he;we=Q*de+(ye*he+(_e*ce-se*ae-fe*ue-pe*le)*ge)-we*be;c[e+476>>2]=ve;c[e+480>>2]=Ce;c[e+484>>2]=we;c[e+488>>2]=0;c[e+496>>2]=1/(ve*(+c[r>>2]*ve+ +c[r+16>>2]*Ce+ +c[r+32>>2]*we)+Ce*(ve*+c[r+4>>2]+Ce*+c[r+20>>2]+we*+c[r+36>>2])+we*(ve*+c[r+8>>2]+Ce*+c[r+24>>2]+we*+c[r+40>>2])+(ve*(ve*+c[_>>2]+Ce*+c[_+16>>2]+we*+c[_+32>>2])+Ce*(ve*+c[_+4>>2]+Ce*+c[_+20>>2]+we*+c[_+36>>2])+we*(ve*+c[_+8>>2]+Ce*+c[_+24>>2]+we*+c[_+40>>2])))}if(!(n[e+526>>0]|0)){p=me;return}he=-b;we=-f;ye=-l;de=(J*te-$*ee-ie*oe-ne*re)*he+($*re+(te*ie+J*oe)-ee*ne)*ye-(J*ne+te*re+ee*oe-$*ie)*we;Ce=(J*ne+te*re+ee*oe-$*ie)*he+(J*te-$*ee-ie*oe-ne*re)*we-(J*$+ee*te+ie*ne-re*oe)*ye;ve=(J*$+ee*te+ie*ne-re*oe)*we+(J*te-$*ee-ie*oe-ne*re)*ye-($*re+(te*ie+J*oe)-ee*ne)*he;ye=-((J*$+ee*te+ie*ne-re*oe)*he)-($*re+(te*ie+J*oe)-ee*ne)*we-(J*ne+te*re+ee*oe-$*ie)*ye;we=-(J*$+ee*te+ie*ne-re*oe);he=-($*re+(te*ie+J*oe)-ee*ne);ge=-(J*ne+te*re+ee*oe-$*ie);c[e+536>>2]=Ce*ge+(ye*we+(J*te-$*ee-ie*oe-ne*re)*de)-ve*he;c[e+540>>2]=ve*we+((J*te-$*ee-ie*oe-ne*re)*Ce+ye*he)-de*ge;c[e+544>>2]=de*he+(ye*ge+(J*te-$*ee-ie*oe-ne*re)*ve)-Ce*we;c[e+548>>2]=0;p=me;return}function OI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0;if(n[e+527>>0]|0){o[t>>2]=0;o[t+4>>2]=0;return}o[t>>2]=3;o[t+4>>2]=3;a=o[e+28>>2]|0;s=o[e+32>>2]|0;DI(e,a+4|0,s+4|0,a+288|0,s+288|0);if((n[e+526>>0]|0?(i=o[t>>2]|0,o[t>>2]=i+1,r=o[t+4>>2]|0,o[t+4>>2]=r+-1,_=+c[e+456>>2],+c[e+444>>2]<_):0)?+c[e+448>>2]<_:0){o[t>>2]=i+2;o[t+4>>2]=r+-2}if(!(n[e+525>>0]|0))return;o[t>>2]=(o[t>>2]|0)+1;o[t+4>>2]=(o[t+4>>2]|0)+-1;return}function LI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0;d=o[e+28>>2]|0;s=o[e+32>>2]|0;DI(e,d+4|0,s+4|0,d+288|0,s+288|0);m=o[t+8>>2]|0;c[m>>2]=1;h=o[t+24>>2]|0;c[m+(h+1<<2)>>2]=1;c[m+((h<<1)+2<<2)>>2]=1;l=+c[e+348>>2];C=+c[e+352>>2];b=+c[e+356>>2];g=+c[d+4>>2]*l+ +c[d+8>>2]*C+ +c[d+12>>2]*b;u=l*+c[d+20>>2]+C*+c[d+24>>2]+b*+c[d+28>>2];b=l*+c[d+36>>2]+C*+c[d+40>>2]+b*+c[d+44>>2];m=o[t+12>>2]|0;o[m>>2]=0;c[m+4>>2]=b;c[m+8>>2]=-u;c[m+12>>2]=0;c[m+(h<<2)>>2]=-b;o[m+(h<<2)+4>>2]=0;c[m+(h<<2)+8>>2]=g;c[m+(h<<2)+12>>2]=0;c[m+(h<<1<<2)>>2]=u;c[m+(h<<1<<2)+4>>2]=-g;o[m+(h<<1<<2)+8>>2]=0;c[m+(h<<1<<2)+12>>2]=0;m=o[t+16>>2]|0;c[m>>2]=-1;c[m+(h+1<<2)>>2]=-1;c[m+((h<<1)+2<<2)>>2]=-1;C=+c[e+412>>2];l=+c[e+416>>2];p=+c[e+420>>2];v=+c[s+4>>2]*C+ +c[s+8>>2]*l+ +c[s+12>>2]*p;f=C*+c[s+20>>2]+l*+c[s+24>>2]+p*+c[s+28>>2];p=C*+c[s+36>>2]+l*+c[s+40>>2]+p*+c[s+44>>2];h=o[t+20>>2]|0;m=o[t+24>>2]|0;o[h>>2]=0;c[h+4>>2]=-p;c[h+8>>2]=f;c[h+12>>2]=0;c[h+(m<<2)>>2]=p;o[h+(m<<2)+4>>2]=0;c[h+(m<<2)+8>>2]=-v;c[h+(m<<2)+12>>2]=0;c[h+(m<<1<<2)>>2]=-f;c[h+(m<<1<<2)+4>>2]=v;o[h+(m<<1<<2)+8>>2]=0;c[h+(m<<1<<2)+12>>2]=0;m=o[e+592>>2]|0;l=+c[((m&2|0)==0?t+4|0:e+600|0)>>2]*+c[t>>2];y=o[t+24>>2]|0;a=o[t+28>>2]|0;r=o[t+36>>2]|0;i=o[t+40>>2]|0;c[a>>2]=l*(v+ +c[s+52>>2]-g-+c[d+52>>2]);c[r>>2]=-3.4028234663852886e38;c[i>>2]=3.4028234663852886e38;if(!(m&1)){c[a+(y<<2)>>2]=l*(f+ +c[s+56>>2]-u-+c[d+56>>2]);c[r+(y<<2)>>2]=-3.4028234663852886e38;c[i+(y<<2)>>2]=3.4028234663852886e38;c[a+(y<<1<<2)>>2]=l*(p+ +c[s+60>>2]-b-+c[d+60>>2]);c[r+(y<<1<<2)>>2]=-3.4028234663852886e38;c[i+(y<<1<<2)>>2]=3.4028234663852886e38}else{w=o[t+32>>2]|0;o[w>>2]=o[e+596>>2];c[a+(y<<2)>>2]=l*(f+ +c[s+56>>2]-u-+c[d+56>>2]);c[r+(y<<2)>>2]=-3.4028234663852886e38;c[i+(y<<2)>>2]=3.4028234663852886e38;o[w+(y<<2)>>2]=o[e+596>>2];c[a+(y<<1<<2)>>2]=l*(p+ +c[s+60>>2]-b-+c[d+60>>2]);c[r+(y<<1<<2)>>2]=-3.4028234663852886e38;c[i+(y<<1<<2)>>2]=3.4028234663852886e38;o[w+(y<<1<<2)>>2]=o[e+596>>2]}do if(!(n[e+526>>0]|0))s=y*3|0;else{s=o[t+12>>2]|0;C=+c[e+456>>2];if(+c[e+444>>2]<C?+c[e+448>>2]<C:0){R=+c[d+4>>2];S=+c[d+8>>2];k=+c[d+12>>2];D=+c[e+304>>2];T=+c[e+320>>2];I=+c[e+336>>2];l=+c[e+308>>2];b=+c[e+324>>2];v=+c[e+340>>2];_=+c[d+20>>2];f=+c[d+24>>2];p=+c[d+28>>2];u=+c[d+36>>2];g=+c[d+40>>2];C=+c[d+44>>2];c[s+(y*3<<2)>>2]=R*D+S*T+k*I;c[s+((y*3|0)+1<<2)>>2]=D*_+T*f+I*p;c[s+((y*3|0)+2<<2)>>2]=D*u+T*g+I*C;c[s+(y<<2<<2)>>2]=R*l+S*b+k*v;c[s+((y<<2|1)<<2)>>2]=l*_+b*f+v*p;c[s+((y<<2|2)<<2)>>2]=l*u+b*g+v*C;c[h+(y*3<<2)>>2]=-(R*D+S*T+k*I);c[h+((y*3|0)+1<<2)>>2]=-(D*_+T*f+I*p);c[h+((y*3|0)+2<<2)>>2]=-(D*u+T*g+I*C);c[h+(y<<2<<2)>>2]=-(R*l+S*b+k*v);c[h+((y<<2|1)<<2)>>2]=-(l*_+b*f+v*p);c[h+((y<<2|2)<<2)>>2]=-(l*u+b*g+v*C);j=+c[t>>2]*+c[e+436>>2];a=o[t+28>>2]|0;c[a+(y*3<<2)>>2]=j*((R*D+S*T+k*I)*+c[e+460>>2]+(D*_+T*f+I*p)*+c[e+464>>2]+(D*u+T*g+I*C)*+c[e+468>>2]);c[a+(y<<2<<2)>>2]=j*((R*l+S*b+k*v)*+c[e+460>>2]+(l*_+b*f+v*p)*+c[e+464>>2]+(l*u+b*g+v*C)*+c[e+468>>2]);r=o[t+36>>2]|0;c[r+(y*3<<2)>>2]=-3.4028234663852886e38;i=o[t+40>>2]|0;c[i+(y*3<<2)>>2]=3.4028234663852886e38;c[r+(y<<2<<2)>>2]=-3.4028234663852886e38;c[i+(y<<2<<2)>>2]=3.4028234663852886e38;s=(o[t+24>>2]|0)+(y<<2)|0;break}D=+c[e+436>>2];I=D*(+c[e+460>>2]*D);T=D*(D*+c[e+464>>2]);D=D*(D*+c[e+468>>2]);c[s+(y*3<<2)>>2]=I;c[s+((y*3|0)+1<<2)>>2]=T;c[s+((y*3|0)+2<<2)>>2]=D;c[h+(y*3<<2)>>2]=-I;c[h+((y*3|0)+1<<2)>>2]=-T;c[h+((y*3|0)+2<<2)>>2]=-D;c[a+(y*3<<2)>>2]=+c[t>>2]*+c[e+432>>2]*+c[e+504>>2];if(m&4|0)o[(o[t+32>>2]|0)+(y*3<<2)>>2]=o[e+604>>2];c[r+(y*3<<2)>>2]=0;if(!((n[e+552>>0]|0)!=0?(_=+c[e+572>>2],_>=0):0))_=3.4028234663852886e38;c[i+(y*3<<2)>>2]=_;s=y<<2}while(0);if(!(n[e+525>>0]|0))return;D=+c[e+436>>2];I=D*(+c[e+476>>2]*D);T=D*(D*+c[e+480>>2]);D=D*(D*+c[e+484>>2]);h=o[t+12>>2]|0;y=o[t+20>>2]|0;c[h+(s<<2)>>2]=I;m=s+1|0;c[h+(m<<2)>>2]=T;w=s+2|0;c[h+(w<<2)>>2]=D;c[y+(s<<2)>>2]=-I;c[y+(m<<2)>>2]=-T;c[y+(w<<2)>>2]=-D;c[a+(s<<2)>>2]=+c[t>>2]*+c[e+432>>2]*+c[e+508>>2];if(o[e+592>>2]&4|0)o[(o[t+32>>2]|0)+(s<<2)>>2]=o[e+604>>2];if(!(+c[e+452>>2]>0)){c[r+(s<<2)>>2]=-3.4028234663852886e38;c[i+(s<<2)>>2]=3.4028234663852886e38;return}r=r+(s<<2)|0;i=o[t+40>>2]|0;if(+c[e+508>>2]>0){c[r>>2]=0;c[i+(s<<2)>>2]=3.4028234663852886e38;return}else{c[r>>2]=-3.4028234663852886e38;c[i+(s<<2)>>2]=0;return}}function xI(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0;E=p;p=p+448|0;if(!(n[e+527>>0]|0)){p=E;return}G=o[e+28>>2]|0;k=+c[e+348>>2];w=+c[e+352>>2];D=+c[e+356>>2];S=+c[G+52>>2];R=k*+c[G+4>>2]+w*+c[G+8>>2]+D*+c[G+12>>2]+S;j=+c[G+56>>2];I=k*+c[G+20>>2]+w*+c[G+24>>2]+D*+c[G+28>>2]+j;T=+c[G+60>>2];D=k*+c[G+36>>2]+w*+c[G+40>>2]+D*+c[G+44>>2]+T;G=o[e+32>>2]|0;w=+c[e+412>>2];k=+c[e+416>>2];f=+c[e+420>>2];O=+c[G+52>>2];L=w*+c[G+4>>2]+k*+c[G+8>>2]+f*+c[G+12>>2]+O;x=+c[G+56>>2];M=w*+c[G+20>>2]+k*+c[G+24>>2]+f*+c[G+28>>2]+x;a=+c[G+60>>2];f=w*+c[G+36>>2]+k*+c[G+40>>2]+f*+c[G+44>>2]+a;if(!(n[e+524>>0]|0)){v=+c[t+192>>2]+ +c[t+80>>2];w=+c[t+196>>2]+ +c[t+84>>2];h=+c[t+200>>2]+ +c[t+88>>2];k=+c[i+192>>2]+ +c[i+80>>2];d=+c[i+196>>2]+ +c[i+84>>2];u=+c[i+200>>2]+ +c[i+88>>2];l=+c[t+176>>2]+ +c[t+64>>2]+((D-T)*w-(I-j)*h)-(+c[i+176>>2]+ +c[i+64>>2]+((f-a)*d-(M-x)*u));u=+c[t+180>>2]+ +c[t+68>>2]+((R-S)*h-(D-T)*v)-(+c[i+180>>2]+ +c[i+68>>2]+((L-O)*u-(f-a)*k));d=+c[t+184>>2]+ +c[t+72>>2]+((I-j)*v-(R-S)*w)-(+c[i+184>>2]+ +c[i+72>>2]+((M-x)*k-(L-O)*d));b=(o[t+240>>2]|0)==0;C=0;do{k=1/+c[e+48+(C*84|0)+80>>2];m=e+48+(C*84|0)|0;w=+c[m>>2];y=e+48+(C*84|0)+4|0;v=+c[y>>2];g=e+48+(C*84|0)+8|0;h=+c[g>>2];h=k*(((R-L)*w+(I-M)*v+(D-f)*h)*-.30000001192092896/r)-k*(l*w+u*v+d*h);c[e+36>>2]=+c[e+36>>2]+h;v=+c[g>>2];w=+c[y>>2];k=+c[m>>2];_=o[e+28>>2]|0;s=+c[_+368>>2];if(!b){H=((I-j)*v-(D-T)*w)*+c[_+320>>2]+((D-T)*k-(R-S)*v)*+c[_+324>>2]+((R-S)*w-(I-j)*k)*+c[_+328>>2];V=((I-j)*v-(D-T)*w)*+c[_+304>>2]+((D-T)*k-(R-S)*v)*+c[_+308>>2]+((R-S)*w-(I-j)*k)*+c[_+312>>2];N=((I-j)*v-(D-T)*w)*+c[_+288>>2]+((D-T)*k-(R-S)*v)*+c[_+292>>2]+((R-S)*w-(I-j)*k)*+c[_+296>>2];U=h*(w*s)*+c[t+116>>2];Z=h*(v*s)*+c[t+120>>2];c[t+64>>2]=h*(k*s)*+c[t+112>>2]+ +c[t+64>>2];c[t+68>>2]=U+ +c[t+68>>2];c[t+72>>2]=Z+ +c[t+72>>2];V=V*(h*+c[t+100>>2]);s=H*(h*+c[t+104>>2]);c[t+80>>2]=N*(h*+c[t+96>>2])+ +c[t+80>>2];c[t+84>>2]=V+ +c[t+84>>2];c[t+88>>2]=s+ +c[t+88>>2]}_=o[e+32>>2]|0;s=+c[_+368>>2];if(o[i+240>>2]|0){U=((M-x)*v-(f-a)*w)*+c[_+320>>2]+((f-a)*k-(L-O)*v)*+c[_+324>>2]+((L-O)*w-(M-x)*k)*+c[_+328>>2];Z=((M-x)*v-(f-a)*w)*+c[_+304>>2]+((f-a)*k-(L-O)*v)*+c[_+308>>2]+((L-O)*w-(M-x)*k)*+c[_+312>>2];H=((M-x)*v-(f-a)*w)*+c[_+288>>2]+((f-a)*k-(L-O)*v)*+c[_+292>>2]+((L-O)*w-(M-x)*k)*+c[_+296>>2];V=s*+c[y>>2]*-h*+c[i+116>>2];N=s*+c[g>>2]*-h*+c[i+120>>2];c[i+64>>2]=+c[i+112>>2]*(s*+c[m>>2]*-h)+ +c[i+64>>2];c[i+68>>2]=V+ +c[i+68>>2];c[i+72>>2]=N+ +c[i+72>>2];Z=Z*(+c[i+100>>2]*-h);U=U*(+c[i+104>>2]*-h);c[i+80>>2]=H*(+c[i+96>>2]*-h)+ +c[i+80>>2];c[i+84>>2]=Z+ +c[i+84>>2];c[i+88>>2]=U+ +c[i+88>>2]}C=C+1|0}while((C|0)!=3)}do if(!(n[e+552>>0]|0)){s=+c[e+440>>2];if(!(s>1.1920928955078125e-7)){P=t+80|0;b=t+196|0;W=t+84|0;m=t+200|0;B=t+88|0;y=i+192|0;A=i+80|0;g=i+196|0;F=i+84|0;C=i+200|0;G=i+88|0;_=t+192|0;break}a=+c[i+192>>2]+ +c[i+80>>2]-(+c[t+192>>2]+ +c[t+80>>2]);f=+c[i+196>>2]+ +c[i+84>>2]-(+c[t+196>>2]+ +c[t+84>>2]);l=+c[i+200>>2]+ +c[i+88>>2]-(+c[t+200>>2]+ +c[t+88>>2]);if(a*a+f*f+l*l>1.1920928955078125e-7){T=1/+X(+(a*a+f*f+l*l));_=o[e+28>>2]|0;d=+c[_+288>>2];h=+c[_+304>>2];v=+c[_+320>>2];w=+c[_+292>>2];k=+c[_+308>>2];S=+c[_+324>>2];R=+c[_+296>>2];j=+c[_+312>>2];I=+c[_+328>>2];_=o[e+32>>2]|0;s=s*(1/(a*T*(d*(a*T)+f*T*h+l*T*v)+f*T*(a*T*w+f*T*k+l*T*S)+l*T*(a*T*R+f*T*j+l*T*I)+(a*T*(a*T*+c[_+288>>2]+f*T*+c[_+304>>2]+l*T*+c[_+320>>2])+f*T*(a*T*+c[_+292>>2]+f*T*+c[_+308>>2]+l*T*+c[_+324>>2])+l*T*(a*T*+c[_+296>>2]+f*T*+c[_+312>>2]+l*T*+c[_+328>>2]))));T=+X(+(l*s*(l*s)+(a*s*(a*s)+f*s*(f*s))));u=1/T*(a*s);a=1/T*(f*s);s=1/T*(l*s);if(o[t+240>>2]|0){U=T*0*+c[t+116>>2];Z=T*0*+c[t+120>>2];c[t+64>>2]=T*0*+c[t+112>>2]+ +c[t+64>>2];c[t+68>>2]=U+ +c[t+68>>2];c[t+72>>2]=Z+ +c[t+72>>2];Z=(u*h+a*k+s*j)*(T*+c[t+100>>2]);U=(u*v+a*S+s*I)*(T*+c[t+104>>2]);c[t+80>>2]=(u*d+a*w+s*R)*(T*+c[t+96>>2])+ +c[t+80>>2];c[t+84>>2]=Z+ +c[t+84>>2];c[t+88>>2]=U+ +c[t+88>>2];_=o[e+32>>2]|0}if(o[i+240>>2]|0){U=u*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];Z=u*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];H=u*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];V=T*-0*+c[i+116>>2];N=T*-0*+c[i+120>>2];c[i+64>>2]=T*-0*+c[i+112>>2]+ +c[i+64>>2];c[i+68>>2]=V+ +c[i+68>>2];c[i+72>>2]=N+ +c[i+72>>2];Z=Z*(+c[i+100>>2]*-T);U=U*(+c[i+104>>2]*-T);c[i+80>>2]=H*(+c[i+96>>2]*-T)+ +c[i+80>>2];c[i+84>>2]=Z+ +c[i+84>>2];c[i+88>>2]=U+ +c[i+88>>2];P=t+80|0;b=t+196|0;W=t+84|0;m=t+200|0;B=t+88|0;y=i+192|0;A=i+80|0;g=i+196|0;F=i+84|0;C=i+200|0;G=i+88|0;_=t+192|0}else{P=t+80|0;b=t+196|0;W=t+84|0;m=t+200|0;B=t+88|0;y=i+192|0;A=i+80|0;g=i+196|0;F=i+84|0;C=i+200|0;G=i+88|0;_=t+192|0}}else{P=t+80|0;b=t+196|0;W=t+84|0;m=t+200|0;B=t+88|0;y=i+192|0;A=i+80|0;g=i+196|0;F=i+84|0;C=i+200|0;G=i+88|0;_=t+192|0}}else{F=o[e+28>>2]|0;o[E+352>>2]=o[F+4>>2];o[E+352+4>>2]=o[F+4+4>>2];o[E+352+8>>2]=o[F+4+8>>2];o[E+352+12>>2]=o[F+4+12>>2];o[E+352+16>>2]=o[F+20>>2];o[E+352+16+4>>2]=o[F+20+4>>2];o[E+352+16+8>>2]=o[F+20+8>>2];o[E+352+16+12>>2]=o[F+20+12>>2];o[E+352+32>>2]=o[F+36>>2];o[E+352+32+4>>2]=o[F+36+4>>2];o[E+352+32+8>>2]=o[F+36+8>>2];o[E+352+32+12>>2]=o[F+36+12>>2];o[E+352+48>>2]=o[F+52>>2];o[E+352+48+4>>2]=o[F+52+4>>2];o[E+352+48+8>>2]=o[F+52+8>>2];o[E+352+48+12>>2]=o[F+52+12>>2];F=o[e+32>>2]|0;o[E+288>>2]=o[F+4>>2];o[E+288+4>>2]=o[F+4+4>>2];o[E+288+8>>2]=o[F+4+8>>2];o[E+288+12>>2]=o[F+4+12>>2];o[E+288+16>>2]=o[F+20>>2];o[E+288+16+4>>2]=o[F+20+4>>2];o[E+288+16+8>>2]=o[F+20+8>>2];o[E+288+16+12>>2]=o[F+20+12>>2];o[E+288+32>>2]=o[F+36>>2];o[E+288+32+4>>2]=o[F+36+4>>2];o[E+288+32+8>>2]=o[F+36+8>>2];o[E+288+32+12>>2]=o[F+36+12>>2];o[E+288+48>>2]=o[F+52>>2];o[E+288+48+4>>2]=o[F+52+4>>2];o[E+288+48+8>>2]=o[F+52+8>>2];o[E+288+48+12>>2]=o[F+52+12>>2];H=+c[t+196>>2]+ +c[t+84>>2];v=+c[t+200>>2]+ +c[t+88>>2];c[E+272>>2]=+c[t+192>>2]+ +c[t+80>>2];c[E+272+4>>2]=H;c[E+272+8>>2]=v;c[E+272+12>>2]=0;v=+c[i+196>>2]+ +c[i+84>>2];H=+c[i+200>>2]+ +c[i+88>>2];c[E+256>>2]=+c[i+192>>2]+ +c[i+80>>2];c[E+256+4>>2]=v;c[E+256+8>>2]=H;c[E+256+12>>2]=0;o[E+192>>2]=1065353216;F=E+192+4|0;o[F>>2]=0;o[F+4>>2]=0;o[F+8>>2]=0;o[F+12>>2]=0;o[E+192+20>>2]=1065353216;G=E+192+24|0;o[G>>2]=0;o[G+4>>2]=0;o[G+8>>2]=0;o[G+12>>2]=0;o[E+192+40>>2]=1065353216;B=E+192+44|0;o[B>>2]=0;o[B+4>>2]=0;o[B+8>>2]=0;o[B+12>>2]=0;o[B+16>>2]=0;Ev(E+352|0,0,0,0,E+272|0,r,E+192|0);o[E+128>>2]=1065353216;B=E+128+4|0;o[B>>2]=0;o[B+4>>2]=0;o[B+8>>2]=0;o[B+12>>2]=0;o[E+128+20>>2]=1065353216;A=E+128+24|0;o[A>>2]=0;o[A+4>>2]=0;o[A+8>>2]=0;o[A+12>>2]=0;o[E+128+40>>2]=1065353216;W=E+128+44|0;o[W>>2]=0;o[W+4>>2]=0;o[W+8>>2]=0;o[W+12>>2]=0;o[W+16>>2]=0;Ev(E+288|0,0,0,0,E+256|0,r,E+128|0);H=+c[e+556>>2];v=+c[e+560>>2];Z=+c[e+564>>2];w=+c[e+568>>2];L=H*(2/(H*H+v*v+Z*Z+w*w));j=v*(2/(H*H+v*v+Z*Z+w*w));x=Z*(2/(H*H+v*v+Z*Z+w*w));Y=+c[e+364>>2];z=+c[e+368>>2];q=+c[e+372>>2];a=q*(H*x-w*j)+(z*(H*j+w*x)+Y*(1-(v*j+Z*x)));f=q*(v*x+w*L)+(Y*(H*j-w*x)+z*(1-(H*L+Z*x)));l=Y*(H*x+w*j)+z*(v*x-w*L)+q*(1-(H*L+v*j));s=+c[e+380>>2];O=+c[e+384>>2];I=+c[e+388>>2];u=(H*x-w*j)*I+(O*(H*j+w*x)+s*(1-(v*j+Z*x)));d=(v*x+w*L)*I+(s*(H*j-w*x)+O*(1-(H*L+Z*x)));h=s*(H*x+w*j)+O*(v*x-w*L)+I*(1-(H*L+v*j));V=+c[e+396>>2];T=+c[e+400>>2];R=+c[e+404>>2];N=(1-(v*j+Z*x))*V+(H*j+w*x)*T+(H*x-w*j)*R;Z=(H*j-w*x)*V+(1-(H*L+Z*x))*T+(v*x+w*L)*R;j=(H*x+w*j)*V+(v*x-w*L)*T+(1-(H*L+v*j))*R;v=+c[e+300>>2];L=+c[e+316>>2];H=+c[e+332>>2];w=+c[e+304>>2];x=+c[e+320>>2];U=+c[e+336>>2];D=+c[e+308>>2];M=+c[e+324>>2];S=+c[e+340>>2];k=-+c[e+348>>2];ee=-+c[e+352>>2];Q=-+c[e+356>>2];q=Y*0+z*0+q*0+ +c[e+412>>2]+(l*(D*k+M*ee+S*Q)+(a*(v*k+L*ee+H*Q)+f*(w*k+x*ee+U*Q)));I=s*0+O*0+I*0+ +c[e+416>>2]+(h*(D*k+M*ee+S*Q)+(u*(v*k+L*ee+H*Q)+d*(w*k+x*ee+U*Q)));Q=V*0+T*0+R*0+ +c[e+420>>2]+(j*(D*k+M*ee+S*Q)+(N*(v*k+L*ee+H*Q)+Z*(w*k+x*ee+U*Q)));ee=+c[E+128>>2];k=+c[B>>2];R=+c[E+128+8>>2];T=+c[E+128+16>>2];V=+c[E+128+20>>2];O=+c[A>>2];s=+c[E+128+32>>2];z=+c[E+128+36>>2];Y=+c[E+128+40>>2];K=R*Q+(ee*q+k*I)+ +c[E+128+48>>2];J=T*q+I*V+Q*O+ +c[E+128+52>>2];$=q*s+I*z+Q*Y+ +c[E+128+56>>2];c[E+64>>2]=(a*v+f*w+l*D)*ee+(u*v+d*w+h*D)*k+(N*v+Z*w+j*D)*R;c[E+64+4>>2]=(a*L+f*x+l*M)*ee+(u*L+d*x+h*M)*k+(N*L+Z*x+j*M)*R;c[E+64+8>>2]=(a*H+f*U+l*S)*ee+(u*H+d*U+h*S)*k+(N*H+Z*U+j*S)*R;c[E+64+12>>2]=0;c[E+64+16>>2]=(a*v+f*w+l*D)*T+(u*v+d*w+h*D)*V+(N*v+Z*w+j*D)*O;c[E+64+20>>2]=(a*L+f*x+l*M)*T+(u*L+d*x+h*M)*V+(N*L+Z*x+j*M)*O;c[E+64+24>>2]=(a*H+f*U+l*S)*T+(u*H+d*U+h*S)*V+(N*H+Z*U+j*S)*O;c[E+64+28>>2]=0;c[E+64+32>>2]=(a*v+f*w+l*D)*s+(u*v+d*w+h*D)*z+(N*v+Z*w+j*D)*Y;c[E+64+36>>2]=(a*L+f*x+l*M)*s+(u*L+d*x+h*M)*z+(N*L+Z*x+j*M)*Y;c[E+64+40>>2]=(a*H+f*U+l*S)*s+(u*H+d*U+h*S)*z+(N*H+Z*U+j*S)*Y;c[E+64+44>>2]=0;c[E+64+48>>2]=K;c[E+64+52>>2]=J;c[E+64+56>>2]=$;c[E+64+60>>2]=0;$=(N*v+Z*w+j*D)*-Q+((a*v+f*w+l*D)*-q+(u*v+d*w+h*D)*-I);J=(N*L+Z*x+j*M)*-Q+((a*L+f*x+l*M)*-q+(u*L+d*x+h*M)*-I);I=(N*H+Z*U+j*S)*-Q+((a*H+f*U+l*S)*-q+(u*H+d*U+h*S)*-I);q=+c[E+192>>2];Q=+c[F>>2];K=+c[E+192+8>>2];Y=+c[E+192+16>>2];z=+c[E+192+20>>2];s=+c[G>>2];O=+c[E+192+32>>2];V=+c[E+192+36>>2];T=+c[E+192+40>>2];R=$*q+J*Q+I*K+ +c[E+192+48>>2];k=$*Y+J*z+I*s+ +c[E+192+52>>2];I=$*O+J*V+I*T+ +c[E+192+56>>2];c[E>>2]=(a*v+f*w+l*D)*q+(a*L+f*x+l*M)*Q+(a*H+f*U+l*S)*K;c[E+4>>2]=(u*v+d*w+h*D)*q+(u*L+d*x+h*M)*Q+(u*H+d*U+h*S)*K;c[E+8>>2]=(N*v+Z*w+j*D)*q+(N*L+Z*x+j*M)*Q+(N*H+Z*U+j*S)*K;c[E+12>>2]=0;c[E+16>>2]=(a*v+f*w+l*D)*Y+(a*L+f*x+l*M)*z+(a*H+f*U+l*S)*s;c[E+20>>2]=(u*v+d*w+h*D)*Y+(u*L+d*x+h*M)*z+(u*H+d*U+h*S)*s;c[E+24>>2]=(N*v+Z*w+j*D)*Y+(N*L+Z*x+j*M)*z+(N*H+Z*U+j*S)*s;c[E+28>>2]=0;c[E+32>>2]=(a*v+f*w+l*D)*O+(a*L+f*x+l*M)*V+(a*H+f*U+l*S)*T;c[E+36>>2]=(u*v+d*w+h*D)*O+(u*L+d*x+h*M)*V+(u*H+d*U+h*S)*T;c[E+40>>2]=(N*v+Z*w+j*D)*O+(N*L+Z*x+j*M)*V+(N*H+Z*U+j*S)*T;c[E+44>>2]=0;c[E+48>>2]=R;c[E+52>>2]=k;c[E+56>>2]=I;c[E+60>>2]=0;Yw(E+352|0,E+64|0,E+424|0,E+416|0);I=+c[E+416>>2];k=1/r*(+c[E+424>>2]*I);R=1/r*(I*+c[E+424+4>>2]);I=1/r*(I*+c[E+424+8>>2]);Yw(E+288|0,E,E+424|0,E+416|0);T=+c[E+416>>2];k=k-+c[E+272>>2];R=R-+c[E+272+4>>2];I=I-+c[E+272+8>>2];S=1/r*(+c[E+424>>2]*T)-+c[E+256>>2];j=1/r*(T*+c[E+424+4>>2])-+c[E+256+4>>2];T=1/r*(T*+c[E+424+8>>2])-+c[E+256+8>>2];if(k*k+R*R+I*I>1.1920928955078125e-7){h=1/+X(+(k*k+R*R+I*I));G=o[e+28>>2]|0;s=k*h;f=R*h;u=I*h;h=k*h*(+c[G+288>>2]*(k*h)+R*h*+c[G+304>>2]+I*h*+c[G+320>>2])+R*h*(k*h*+c[G+292>>2]+R*h*+c[G+308>>2]+I*h*+c[G+324>>2])+I*h*(k*h*+c[G+296>>2]+R*h*+c[G+312>>2]+I*h*+c[G+328>>2])}else{s=0;f=0;u=0;h=0}if(S*S+j*j+T*T>1.1920928955078125e-7){v=1/+X(+(S*S+j*j+T*T));G=o[e+32>>2]|0;a=S*v;l=j*v;d=T*v;v=S*v*(+c[G+288>>2]*(S*v)+j*v*+c[G+304>>2]+T*v*+c[G+320>>2])+j*v*(S*v*+c[G+292>>2]+j*v*+c[G+308>>2]+T*v*+c[G+324>>2])+T*v*(S*v*+c[G+296>>2]+j*v*+c[G+312>>2]+T*v*+c[G+328>>2])}else{a=0;l=0;d=0;v=0}w=h*s+v*a;a=h*f+v*l;s=h*u+v*d;if(w*w+a*a+s*s>1.1920928955078125e-7){u=1/+X(+(w*w+a*a+s*s));b=o[e+28>>2]|0;f=w*u*(+c[b+288>>2]*(w*u)+a*u*+c[b+304>>2]+s*u*+c[b+320>>2])+a*u*(w*u*+c[b+292>>2]+a*u*+c[b+308>>2]+s*u*+c[b+324>>2])+s*u*(w*u*+c[b+296>>2]+a*u*+c[b+312>>2]+s*u*+c[b+328>>2]);_=o[e+32>>2]|0;u=w*u*(w*u*+c[_+288>>2]+a*u*+c[_+304>>2]+s*u*+c[_+320>>2])+a*u*(w*u*+c[_+292>>2]+a*u*+c[_+308>>2]+s*u*+c[_+324>>2])+s*u*(w*u*+c[_+296>>2]+a*u*+c[_+312>>2]+s*u*+c[_+328>>2]);a=(k*f-S*u)*(1/((f+u)*(f+u)));v=(R*f-j*u)*(1/((f+u)*(f+u)));u=(I*f-T*u)*(1/((f+u)*(f+u)));s=+c[e+572>>2];if(!(s>=0))s=v;else{f=(n[e+553>>0]|0)==0?s:s/f;l=+c[e+576>>2];d=+c[e+580>>2];h=+c[e+584>>2];s=+X(+((a+l)*(a+l)+(v+d)*(v+d)+(u+h)*(u+h)));if(s>f){a=f*((a+l)*(1/s))-l;u=f*((u+h)*(1/s))-h;s=f*((v+d)*(1/s))-d}else s=v;c[e+576>>2]=a+l;c[e+580>>2]=s+d;c[e+584>>2]=u+h}l=+X(+(a*a+s*s+u*u));f=a*(1/l);a=s*(1/l);s=u*(1/l);if(o[t+240>>2]|0){ee=f*+c[b+320>>2]+a*+c[b+324>>2]+s*+c[b+328>>2];$=f*+c[b+304>>2]+a*+c[b+308>>2]+s*+c[b+312>>2];J=f*+c[b+288>>2]+a*+c[b+292>>2]+s*+c[b+296>>2];Q=l*0*+c[t+116>>2];q=l*0*+c[t+120>>2];c[t+64>>2]=l*0*+c[t+112>>2]+ +c[t+64>>2];c[t+68>>2]=Q+ +c[t+68>>2];c[t+72>>2]=q+ +c[t+72>>2];$=$*(l*+c[t+100>>2]);ee=ee*(l*+c[t+104>>2]);c[t+80>>2]=J*(l*+c[t+96>>2])+ +c[t+80>>2];c[t+84>>2]=$+ +c[t+84>>2];c[t+88>>2]=ee+ +c[t+88>>2];_=o[e+32>>2]|0}if(o[i+240>>2]|0){ee=f*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];$=f*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];J=f*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];Q=l*-0*+c[i+116>>2];q=l*-0*+c[i+120>>2];c[i+64>>2]=l*-0*+c[i+112>>2]+ +c[i+64>>2];c[i+68>>2]=Q+ +c[i+68>>2];c[i+72>>2]=q+ +c[i+72>>2];$=$*(+c[i+100>>2]*-l);ee=ee*(+c[i+104>>2]*-l);c[i+80>>2]=J*(+c[i+96>>2]*-l)+ +c[i+80>>2];c[i+84>>2]=$+ +c[i+84>>2];c[i+88>>2]=ee+ +c[i+88>>2]}}P=t+80|0;b=t+196|0;W=t+84|0;m=t+200|0;B=t+88|0;y=i+192|0;A=i+80|0;g=i+196|0;F=i+84|0;C=i+200|0;G=i+88|0;_=t+192|0}while(0);R=+c[_>>2]+ +c[P>>2];S=+c[b>>2]+ +c[W>>2];k=+c[m>>2]+ +c[B>>2];w=+c[y>>2]+ +c[A>>2];v=+c[g>>2]+ +c[F>>2];h=+c[C>>2]+ +c[G>>2];if(n[e+526>>0]|0){a=+c[e+528>>2];s=a*+c[e+504>>2]*+c[e+432>>2]/r;f=+c[e+460>>2];l=+c[e+464>>2];u=+c[e+468>>2];if((w-R)*f+(v-S)*l+(h-k)*u>0)s=s+a*((w-R)*f+(v-S)*l+(h-k)*u)*+c[e+436>>2];$=+c[e+516>>2];J=$+s*+c[e+492>>2];J=J>0?J:0;c[e+516>>2]=J;q=+c[e+536>>2];a=+c[e+540>>2];ee=+c[e+544>>2];s=f*(J-$)*q+l*(J-$)*a+(J-$)*u*ee;d=+X(+(((J-$)*u-ee*s)*((J-$)*u-ee*s)+((f*(J-$)-q*s)*(f*(J-$)-q*s)+(l*(J-$)-a*s)*(l*(J-$)-a*s))));f=1/d*(f*(J-$)-q*s);a=1/d*(l*(J-$)-a*s);s=1/d*((J-$)*u-ee*s);_=o[e+28>>2]|0;if(o[t+240>>2]|0){ee=f*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];$=f*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];J=f*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];Q=d*0*+c[t+116>>2];q=d*0*+c[t+120>>2];c[t+64>>2]=d*0*+c[t+112>>2]+ +c[t+64>>2];c[t+68>>2]=Q+ +c[t+68>>2];c[t+72>>2]=q+ +c[t+72>>2];$=$*(d*+c[t+100>>2]);ee=ee*(d*+c[t+104>>2]);c[P>>2]=J*(d*+c[t+96>>2])+ +c[P>>2];c[W>>2]=$+ +c[W>>2];c[B>>2]=ee+ +c[B>>2]}_=o[e+32>>2]|0;if(o[i+240>>2]|0){ee=f*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];$=f*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];J=f*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];Q=d*-0*+c[i+116>>2];q=d*-0*+c[i+120>>2];c[i+64>>2]=d*-0*+c[i+112>>2]+ +c[i+64>>2];c[i+68>>2]=Q+ +c[i+68>>2];c[i+72>>2]=q+ +c[i+72>>2];$=$*(+c[i+100>>2]*-d);ee=ee*(+c[i+104>>2]*-d);c[A>>2]=J*(+c[i+96>>2]*-d)+ +c[A>>2];c[F>>2]=$+ +c[F>>2];c[G>>2]=ee+ +c[G>>2]}}if(!(n[e+525>>0]|0)){p=E;return}u=+c[e+532>>2];l=u*+c[e+508>>2]*+c[e+432>>2]/r;f=+c[e+476>>2];a=+c[e+480>>2];s=+c[e+484>>2];if((w-R)*f+(v-S)*a+(h-k)*s>0)l=l+u*((w-R)*f+(v-S)*a+(h-k)*s)*+c[e+436>>2];u=+c[e+520>>2];l=u+l*+c[e+496>>2];l=l>0?l:0;c[e+520>>2]=l;_=o[e+28>>2]|0;if(o[t+240>>2]|0){ee=f*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];$=f*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];s=f*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];f=(l-u)*0*+c[t+116>>2];a=(l-u)*0*+c[t+120>>2];c[t+64>>2]=(l-u)*0*+c[t+112>>2]+ +c[t+64>>2];c[t+68>>2]=f+ +c[t+68>>2];c[t+72>>2]=a+ +c[t+72>>2];a=$*((l-u)*+c[t+100>>2]);f=ee*((l-u)*+c[t+104>>2]);c[P>>2]=s*((l-u)*+c[t+96>>2])+ +c[P>>2];c[W>>2]=a+ +c[W>>2];c[B>>2]=f+ +c[B>>2];f=+c[e+476>>2];a=+c[e+480>>2];s=+c[e+484>>2]}_=o[e+32>>2]|0;if(!(o[i+240>>2]|0)){p=E;return}ee=f*+c[_+320>>2]+a*+c[_+324>>2]+s*+c[_+328>>2];$=f*+c[_+304>>2]+a*+c[_+308>>2]+s*+c[_+312>>2];J=f*+c[_+288>>2]+a*+c[_+292>>2]+s*+c[_+296>>2];Q=(l-u)*-0*+c[i+116>>2];q=(l-u)*-0*+c[i+120>>2];c[i+64>>2]=(l-u)*-0*+c[i+112>>2]+ +c[i+64>>2];c[i+68>>2]=Q+ +c[i+68>>2];c[i+72>>2]=q+ +c[i+72>>2];$=$*(+c[i+100>>2]*-(l-u));ee=ee*(+c[i+104>>2]*-(l-u));c[A>>2]=J*(+c[i+96>>2]*-(l-u))+ +c[A>>2];c[F>>2]=$+ +c[F>>2];c[G>>2]=ee+ +c[G>>2];p=E;return}function MI(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;switch(t|0){case 2:case 1:if(n>>>0<3){c[e+600>>2]=i;o[e+592>>2]=o[e+592>>2]|2;return}else{c[e+432>>2]=i;return}case 4:case 3:if(n>>>0<3){c[e+596>>2]=i;o[e+592>>2]=o[e+592>>2]|1;return}else{c[e+604>>2]=i;o[e+592>>2]=o[e+592>>2]|4;return}default:return}}function PI(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do switch(t|0){case 2:case 1:{if(i>>>0<3){n=+c[e+600>>2];break e}if((i+-3|0)>>>0<3)n=+c[e+432>>2];else n=0;break}case 4:case 3:{if(i>>>0<3){n=+c[e+596>>2];break e}if((i+-3|0)>>>0<3)n=+c[e+604>>2];else n=0;break}default:n=0}while(0);return+n}function WI(e){e=e|0;return 212}function BI(e,t,i){e=e|0;t=t|0;i=i|0;Gy(e,t,i)|0;o[t+52>>2]=o[e+300>>2];o[t+56>>2]=o[e+304>>2];o[t+60>>2]=o[e+308>>2];o[t+64>>2]=o[e+312>>2];o[t+68>>2]=o[e+316>>2];o[t+72>>2]=o[e+320>>2];o[t+76>>2]=o[e+324>>2];o[t+80>>2]=o[e+328>>2];o[t+84>>2]=o[e+332>>2];o[t+88>>2]=o[e+336>>2];o[t+92>>2]=o[e+340>>2];o[t+96>>2]=o[e+344>>2];o[t+100>>2]=o[e+348>>2];o[t+104>>2]=o[e+352>>2];o[t+108>>2]=o[e+356>>2];o[t+112>>2]=o[e+360>>2];o[t+116>>2]=o[e+364>>2];o[t+120>>2]=o[e+368>>2];o[t+124>>2]=o[e+372>>2];o[t+128>>2]=o[e+376>>2];o[t+132>>2]=o[e+380>>2];o[t+136>>2]=o[e+384>>2];o[t+140>>2]=o[e+388>>2];o[t+144>>2]=o[e+392>>2];o[t+148>>2]=o[e+396>>2];o[t+152>>2]=o[e+400>>2];o[t+156>>2]=o[e+404>>2];o[t+160>>2]=o[e+408>>2];o[t+164>>2]=o[e+412>>2];o[t+168>>2]=o[e+416>>2];o[t+172>>2]=o[e+420>>2];o[t+176>>2]=o[e+424>>2];o[t+180>>2]=o[e+444>>2];o[t+184>>2]=o[e+448>>2];o[t+188>>2]=o[e+452>>2];o[t+192>>2]=o[e+428>>2];o[t+196>>2]=o[e+432>>2];o[t+200>>2]=o[e+436>>2];o[t+204>>2]=o[e+440>>2];return 15142}function AI(e,t,i){e=e|0;t=t|0;i=i|0;o[e+300>>2]=o[t>>2];o[e+300+4>>2]=o[t+4>>2];o[e+300+8>>2]=o[t+8>>2];o[e+300+12>>2]=o[t+12>>2];o[e+316>>2]=o[t+16>>2];o[e+316+4>>2]=o[t+16+4>>2];o[e+316+8>>2]=o[t+16+8>>2];o[e+316+12>>2]=o[t+16+12>>2];o[e+332>>2]=o[t+32>>2];o[e+332+4>>2]=o[t+32+4>>2];o[e+332+8>>2]=o[t+32+8>>2];o[e+332+12>>2]=o[t+32+12>>2];o[e+348>>2]=o[t+48>>2];o[e+348+4>>2]=o[t+48+4>>2];o[e+348+8>>2]=o[t+48+8>>2];o[e+348+12>>2]=o[t+48+12>>2];o[e+364>>2]=o[i>>2];o[e+364+4>>2]=o[i+4>>2];o[e+364+8>>2]=o[i+8>>2];o[e+364+12>>2]=o[i+12>>2];o[e+380>>2]=o[i+16>>2];o[e+380+4>>2]=o[i+16+4>>2];o[e+380+8>>2]=o[i+16+8>>2];o[e+380+12>>2]=o[i+16+12>>2];o[e+396>>2]=o[i+32>>2];o[e+396+4>>2]=o[i+32+4>>2];o[e+396+8>>2]=o[i+32+8>>2];o[e+396+12>>2]=o[i+32+12>>2];o[e+412>>2]=o[i+48>>2];o[e+412+4>>2]=o[i+48+4>>2];o[e+412+8>>2]=o[i+48+8>>2];o[e+412+12>>2]=o[i+48+12>>2];_P[o[(o[e>>2]|0)+8>>2]&255](e);return}function FI(){o[5310]=1065353216;o[5311]=0;o[5312]=0;c[5313]=0;return}function GI(e,t,i,n){e=e|0;t=t|0;i=+i;n=+n;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,b=0;a=+Z(+i);s=+U(+i);r=o[t+444>>2]|0;f=+N(+a)>1.1920928955078125e-7;i=(o[u>>2]=r,+c[u>>2]);if(f){p=+c[t+448>>2];p=+X(+((s*s/(a*a)+1)/(1/(p*p)+s*s/(a*a)/(i*i))));i=s*s;_=a*a;r=(c[u>>2]=p,o[u>>2]|0)}else{i=s*s;_=a*a}p=+X(+(_+0+i));l=(o[u>>2]=r,+c[u>>2])*.5;p=+U(+l)/p;l=+Z(+l);b=l*n+a*p*0-s*p*-0;_=l*0-s*p*n-p*0*0;i=l*0+p*0*0-a*p*n;n=-(p*0*n)-a*p*0-s*p*-0;c[e>>2]=s*p*_+(l*b+n*-(p*0))-i*-(a*p);c[e+4>>2]=i*-(p*0)+(l*_+n*-(a*p))-s*p*b;c[e+8>>2]=b*-(a*p)+(s*p*n+l*i)-_*-(p*0);c[e+12>>2]=0;return}function EI(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0;o[e+556>>2]=o[t>>2];o[e+556+4>>2]=o[t+4>>2];o[e+556+8>>2]=o[t+8>>2];o[e+556+12>>2]=o[t+12>>2];y=+c[e+568>>2];a=+c[5310];g=+c[e+560>>2];r=+c[5312];h=+c[e+564>>2];s=+c[5311];m=+c[e+556>>2];f=(a*h+y*s-r*m)*-h+(y*(y*a+g*r-h*s)+(-(a*m)-g*s-r*h)*-m)-(y*r+s*m-a*g)*-g;p=(y*r+s*m-a*g)*-m+(y*(a*h+y*s-r*m)+(-(a*m)-g*s-r*h)*-g)-(y*a+g*r-h*s)*-h;i=(y*a+g*r-h*s)*-g+((-(a*m)-g*s-r*h)*-h+y*(y*r+s*m-a*g))-(a*h+y*s-r*m)*-m;do if(r*i+(s*p+a*f)<-.9999998807907104)if(+N(+r)>.7071067690849304){i=1/+X(+(r*r+s*s));n=0;r=-(r*i);t=(c[u>>2]=s*i,o[u>>2]|0);i=0;break}else{r=1/+X(+(a*a+s*s));n=(c[u>>2]=-(s*r),o[u>>2]|0);r=a*r;t=0;i=0;break}else{T=+X(+((r*i+(s*p+a*f)+1)*2));n=(c[u>>2]=(s*i-r*p)*(1/T),o[u>>2]|0);r=(r*f-a*i)*(1/T);t=(c[u>>2]=(a*p-s*f)*(1/T),o[u>>2]|0);i=T*.5}while(0);a=(o[u>>2]=n,+c[u>>2]);p=(o[u>>2]=t,+c[u>>2]);v=1/+X(+(i*i+(a*a+r*r+p*p)));b=(c[u>>2]=a*v,o[u>>2]|0);k=r*v;w=(c[u>>2]=p*v,o[u>>2]|0);i=i*v;C=(c[u>>2]=i,o[u>>2]|0);j=m*i+y*-(a*v)+h*-k-g*-(p*v);I=m*-(p*v)+(y*-k+i*g)-h*-(a*v);T=y*-(p*v)+i*h+g*-(a*v)-m*-k;h=i*y-m*-(a*v)-g*-k-h*-(p*v);m=1/+X(+(h*h+(T*T+(j*j+I*I))));_=(c[u>>2]=j*m,o[u>>2]|0);t=(c[u>>2]=m*I,o[u>>2]|0);n=(c[u>>2]=m*T,o[u>>2]|0);r=+c[e+444>>2];l=(c[u>>2]=r,o[u>>2]|0);if(r>=.05000000074505806?(R=+c[e+448>>2],R>=.05000000074505806):0){i=i<-1?-1:i;i=+Y(+(i>1?1:i))*2;if(i>1.1920928955078125e-7){s=1/+X(+(p*v*(p*v)+(a*v*(a*v)+k*k)));if(+N(+(k*s))>1.1920928955078125e-7){R=+X(+((p*v*s*(p*v*s)/(k*s*(k*s))+1)/(1/(R*R)+p*v*s*(p*v*s)/(k*s*(k*s))/(r*r))));a=a*v*s;f=k*s;s=p*v*s;l=(c[u>>2]=R,o[u>>2]|0)}else{a=a*v*s;f=k*s;s=p*v*s}}else{a=0;f=0;s=0;l=0}if(+N(+i)>1.1920928955078125e-7){r=(o[u>>2]=l,+c[u>>2]);if(!(i>r)){if(i<-r)i=-r}else i=r;R=i*.5;k=+U(+R)/+X(+(a*a+f*f+s*s));R=+Z(+R);S=(c[u>>2]=a*k,o[u>>2]|0);w=(c[u>>2]=s*k,o[u>>2]|0);k=f*k;C=(c[u>>2]=R,o[u>>2]|0)}else S=b}else S=b;i=+c[e+452>>2];if(i>=.05000000074505806){r=m*h<-1?-1:m*h;r=+Y(+(r>1?1:r))*2;if(r>3.1415927410125732){d=(c[u>>2]=-(j*m),o[u>>2]|0);b=(c[u>>2]=-(m*I),o[u>>2]|0);r=-(m*h)<-1?-1:-(m*h);l=(c[u>>2]=-(m*T),o[u>>2]|0);r=+Y(+(r>1?1:r))*2}else{d=_;b=t;l=n}s=(o[u>>2]=d,+c[u>>2]);a=(o[u>>2]=b,+c[u>>2]);f=(o[u>>2]=l,+c[u>>2]);if(r>1.1920928955078125e-7){T=1/+X(+(s*s+a*a+f*f));d=(c[u>>2]=s*T,o[u>>2]|0);b=(c[u>>2]=a*T,o[u>>2]|0);l=(c[u>>2]=f*T,o[u>>2]|0)}if(+N(+r)>1.1920928955078125e-7){if(!(r>i))if(r<-i)i=-i;else i=r;R=(o[u>>2]=d,+c[u>>2]);j=(o[u>>2]=b,+c[u>>2]);I=(o[u>>2]=l,+c[u>>2]);i=i*.5;T=+U(+i)/+X(+(I*I+(j*j+R*R)));i=+Z(+i);_=(c[u>>2]=R*T,o[u>>2]|0);t=(c[u>>2]=j*T,o[u>>2]|0);n=(c[u>>2]=I*T,o[u>>2]|0)}else i=m*h}else i=m*h;g=(o[u>>2]=C,+c[u>>2]);R=(o[u>>2]=_,+c[u>>2]);v=(o[u>>2]=S,+c[u>>2]);T=(o[u>>2]=n,+c[u>>2]);I=(o[u>>2]=w,+c[u>>2]);j=(o[u>>2]=t,+c[u>>2]);c[e+556>>2]=k*T+(g*R+v*i)-I*j;c[e+560>>2]=I*R+(g*j+k*i)-v*T;c[e+564>>2]=v*j+(g*T+I*i)-k*R;c[e+568>>2]=g*i-v*R-k*j-I*T;return}function VI(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0,f=0,p=0;n=+c[e+368>>2];if(!(n!=0))return;_=+c[e+372>>2];a=+c[e+376>>2];f=+c[e+380>>2];p=n*(+c[t+4>>2]*a);o=n*(+c[t+8>>2]*f);c[e+336>>2]=n*(+c[t>>2]*_)+ +c[e+336>>2];c[e+340>>2]=p+ +c[e+340>>2];c[e+344>>2]=o+ +c[e+344>>2];_=+c[t>>2]*_;a=+c[t+4>>2]*a;f=+c[t+8>>2]*f;o=+c[i+4>>2];p=+c[i+8>>2];s=+c[i>>2];r=((o*f-a*p)*+c[e+304>>2]+(_*p-f*s)*+c[e+308>>2]+(a*s-_*o)*+c[e+312>>2])*+c[e+572>>2];n=((o*f-a*p)*+c[e+320>>2]+(_*p-f*s)*+c[e+324>>2]+(a*s-_*o)*+c[e+328>>2])*+c[e+576>>2];c[e+352>>2]=(+c[e+288>>2]*(o*f-a*p)+ +c[e+292>>2]*(_*p-f*s)+(a*s-_*o)*+c[e+296>>2])*+c[e+568>>2]+ +c[e+352>>2];c[e+356>>2]=r+ +c[e+356>>2];c[e+360>>2]=n+ +c[e+360>>2];return}function NI(e){e=e|0;return}function XI(e){e=e|0;return 644}function HI(e,t,i){e=e|0;t=t|0;i=i|0;Gy(e,t,i)|0;o[t+52>>2]=o[e+48>>2];o[t+56>>2]=o[e+52>>2];o[t+60>>2]=o[e+56>>2];o[t+64>>2]=o[e+60>>2];o[t+68>>2]=o[e+64>>2];o[t+72>>2]=o[e+68>>2];o[t+76>>2]=o[e+72>>2];o[t+80>>2]=o[e+76>>2];o[t+84>>2]=o[e+80>>2];o[t+88>>2]=o[e+84>>2];o[t+92>>2]=o[e+88>>2];o[t+96>>2]=o[e+92>>2];o[t+100>>2]=o[e+96>>2];o[t+104>>2]=o[e+100>>2];o[t+108>>2]=o[e+104>>2];o[t+112>>2]=o[e+108>>2];o[t+116>>2]=o[e+112>>2];o[t+120>>2]=o[e+116>>2];o[t+124>>2]=o[e+120>>2];o[t+128>>2]=o[e+124>>2];o[t+132>>2]=o[e+128>>2];o[t+136>>2]=o[e+132>>2];o[t+140>>2]=o[e+136>>2];o[t+144>>2]=o[e+140>>2];o[t+148>>2]=o[e+144>>2];o[t+152>>2]=o[e+148>>2];o[t+156>>2]=o[e+152>>2];o[t+160>>2]=o[e+156>>2];o[t+164>>2]=o[e+160>>2];o[t+168>>2]=o[e+164>>2];o[t+172>>2]=o[e+168>>2];o[t+176>>2]=o[e+172>>2];i=0;do{o[t+428+(i<<2)>>2]=o[e+968+(i*88|0)>>2];o[t+412+(i<<2)>>2]=o[e+968+(i*88|0)+4>>2];o[t+444+(i<<2)>>2]=o[e+968+(i*88|0)+8>>2];o[t+460+(i<<2)>>2]=o[e+968+(i*88|0)+12>>2];o[t+476+(i<<2)>>2]=o[e+968+(i*88|0)+16>>2];o[t+492+(i<<2)>>2]=o[e+968+(i*88|0)+20>>2];o[t+508+(i<<2)>>2]=o[e+968+(i*88|0)+24>>2];o[t+524+(i<<2)>>2]=o[e+968+(i*88|0)+32>>2];o[t+540+(i<<2)>>2]=o[e+968+(i*88|0)+36>>2];o[t+556+(i<<2)>>2]=o[e+968+(i*88|0)+44>>2];o[t+572+(i<<2)>>2]=o[e+968+(i*88|0)+52>>2];o[t+588+(i<<2)>>2]=o[e+968+(i*88|0)+60>>2];o[t+604+(i<<2)>>2]=o[e+968+(i*88|0)+68>>2];i=i+1|0}while((i|0)!=3);c[t+440>>2]=0;c[t+424>>2]=0;c[t+456>>2]=0;c[t+472>>2]=0;c[t+488>>2]=0;c[t+504>>2]=0;c[t+520>>2]=0;c[t+536>>2]=0;c[t+552>>2]=0;c[t+568>>2]=0;c[t+584>>2]=0;c[t+600>>2]=0;c[t+616>>2]=0;n[t+620>>0]=n[e+996>>0]|0;n[t+624>>0]=n[e+1008>>0]|0;n[t+628>>0]=n[e+1016>>0]|0;n[t+632>>0]=n[e+1024>>0]|0;n[t+636>>0]=n[e+1032>>0]|0;n[t+621>>0]=n[e+1084>>0]|0;n[t+625>>0]=n[e+1096>>0]|0;n[t+629>>0]=n[e+1104>>0]|0;n[t+633>>0]=n[e+1112>>0]|0;n[t+637>>0]=n[e+1120>>0]|0;\nn[t+622>>0]=n[e+1172>>0]|0;n[t+626>>0]=n[e+1184>>0]|0;n[t+630>>0]=n[e+1192>>0]|0;n[t+634>>0]=n[e+1200>>0]|0;n[t+638>>0]=n[e+1208>>0]|0;n[t+623>>0]=0;n[t+627>>0]=0;n[t+631>>0]=0;n[t+635>>0]=0;n[t+639>>0]=0;o[t+196>>2]=o[e+680>>2];o[t+200>>2]=o[e+684>>2];o[t+204>>2]=o[e+688>>2];o[t+208>>2]=o[e+692>>2];o[t+180>>2]=o[e+696>>2];o[t+184>>2]=o[e+700>>2];o[t+188>>2]=o[e+704>>2];o[t+192>>2]=o[e+708>>2];o[t+212>>2]=o[e+712>>2];o[t+216>>2]=o[e+716>>2];o[t+220>>2]=o[e+720>>2];o[t+224>>2]=o[e+724>>2];o[t+228>>2]=o[e+728>>2];o[t+232>>2]=o[e+732>>2];o[t+236>>2]=o[e+736>>2];o[t+240>>2]=o[e+740>>2];o[t+244>>2]=o[e+744>>2];o[t+248>>2]=o[e+748>>2];o[t+252>>2]=o[e+752>>2];o[t+256>>2]=o[e+756>>2];o[t+260>>2]=o[e+760>>2];o[t+264>>2]=o[e+764>>2];o[t+268>>2]=o[e+768>>2];o[t+272>>2]=o[e+772>>2];o[t+276>>2]=o[e+776>>2];o[t+280>>2]=o[e+780>>2];o[t+284>>2]=o[e+784>>2];o[t+288>>2]=o[e+788>>2];o[t+292>>2]=o[e+876>>2];o[t+296>>2]=o[e+880>>2];o[t+300>>2]=o[e+884>>2];o[t+304>>2]=o[e+888>>2];o[t+308>>2]=o[e+892>>2];o[t+312>>2]=o[e+896>>2];o[t+316>>2]=o[e+900>>2];o[t+320>>2]=o[e+904>>2];o[t+324>>2]=o[e+804>>2];o[t+328>>2]=o[e+808>>2];o[t+332>>2]=o[e+812>>2];o[t+336>>2]=o[e+816>>2];o[t+340>>2]=o[e+820>>2];o[t+344>>2]=o[e+824>>2];o[t+348>>2]=o[e+828>>2];o[t+352>>2]=o[e+832>>2];o[t+356>>2]=o[e+840>>2];o[t+360>>2]=o[e+844>>2];o[t+364>>2]=o[e+848>>2];o[t+368>>2]=o[e+852>>2];o[t+372>>2]=o[e+860>>2];o[t+376>>2]=o[e+864>>2];o[t+380>>2]=o[e+868>>2];o[t+384>>2]=o[e+872>>2];n[t+388>>0]=n[e+792>>0]|0;n[t+392>>0]=n[e+795>>0]|0;n[t+396>>0]=n[e+798>>0]|0;n[t+400>>0]=n[e+836>>0]|0;n[t+404>>0]=n[e+856>>0]|0;n[t+389>>0]=n[e+793>>0]|0;n[t+393>>0]=n[e+796>>0]|0;n[t+397>>0]=n[e+799>>0]|0;n[t+401>>0]=n[e+837>>0]|0;n[t+405>>0]=n[e+857>>0]|0;n[t+390>>0]=n[e+794>>0]|0;n[t+394>>0]=n[e+797>>0]|0;n[t+398>>0]=n[e+800>>0]|0;n[t+402>>0]=n[e+838>>0]|0;n[t+406>>0]=n[e+858>>0]|0;n[t+391>>0]=0;n[t+395>>0]=0;n[t+399>>0]=0;n[t+403>>0]=0;n[t+407>>0]=0;o[t+640>>2]=o[e+1232>>2];return 15168}function ZI(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function UI(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0;a=p;p=p+16|0;if(!(n[e+1308>>0]|0)){p=a;return}c[e+928>>2]=0;c[e+992>>2]=0;c[e+1056>>2]=0;o[e+712>>2]=0;o[e+712+4>>2]=0;o[e+712+8>>2]=0;o[e+712+12>>2]=0;zI(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);_P[o[(o[e>>2]|0)+44>>2]&255](e);i=+c[e+1284>>2];r=+c[e+1288>>2];_=+c[e+1292>>2];if(+c[e+696>>2]>=+c[e+680>>2]){f=(n[e+1300>>0]|0)==0;s=o[(f?e+1160|0:e+1096|0)>>2]|0;t=o[(f?e+1144|0:e+1080|0)>>2]|0;o[a>>2]=o[(f?e+1128|0:e+1064|0)>>2];o[a+4>>2]=t;o[a+8>>2]=s;c[a+12>>2]=0;YI(o[e+28>>2]|0,o[e+32>>2]|0,e+176|0,a,i,r,_,i,r,_)}if(+c[e+700>>2]>=+c[e+684>>2]){t=(n[e+1300>>0]|0)==0;f=o[(t?e+1164|0:e+1100|0)>>2]|0;s=o[(t?e+1148|0:e+1084|0)>>2]|0;o[a>>2]=o[(t?e+1132|0:e+1068|0)>>2];o[a+4>>2]=s;o[a+8>>2]=f;c[a+12>>2]=0;YI(o[e+28>>2]|0,o[e+32>>2]|0,e+260|0,a,i,r,_,i,r,_)}if(+c[e+704>>2]>=+c[e+688>>2]){t=(n[e+1300>>0]|0)==0;f=o[(t?e+1168|0:e+1104|0)>>2]|0;s=o[(t?e+1152|0:e+1088|0)>>2]|0;o[a>>2]=o[(t?e+1136|0:e+1072|0)>>2];o[a+4>>2]=s;o[a+8>>2]=f;c[a+12>>2]=0;YI(o[e+28>>2]|0,o[e+32>>2]|0,e+344|0,a,i,r,_,i,r,_)}s=0;do{i=+c[e+868+(s<<6)>>2];r=+c[e+868+(s<<6)+4>>2];_=+KI(+c[e+1192+(s<<2)>>2],i,r);c[e+868+(s<<6)+52>>2]=_;do if(!(i>r)){if(i>_){o[e+868+(s<<6)+56>>2]=1;t=e+868+(s<<6)+48|0;c[t>>2]=_-i;if(_-i>3.1415927410125732){c[t>>2]=_-i+-6.2831854820251465;t=19;break}if(!(_-i<-3.1415927410125732)){t=19;break}c[t>>2]=_-i+6.2831854820251465;t=19;break}t=e+868+(s<<6)+56|0;if(!(r<_)){o[t>>2]=0;t=18;break}o[t>>2]=2;t=e+868+(s<<6)+48|0;c[t>>2]=_-r;if(_-r>3.1415927410125732){c[t>>2]=_-r+-6.2831854820251465;t=19;break}if(_-r<-3.1415927410125732){c[t>>2]=_-r+6.2831854820251465;t=19}else t=19}else{o[e+868+(s<<6)+56>>2]=0;t=18}while(0);if((t|0)==18?(t=0,n[e+868+(s<<6)+44>>0]|0):0)t=19;if((t|0)==19){B=e+1208+(s<<4)|0;o[a>>2]=o[B>>2];o[a+4>>2]=o[B+4>>2];o[a+8>>2]=o[B+8>>2];o[a+12>>2]=o[B+12>>2];B=e+428+(s*84|0)|0;t=o[e+28>>2]|0;W=+c[t+4>>2];P=+c[t+20>>2];M=+c[t+36>>2];L=+c[t+8>>2];O=+c[t+24>>2];D=+c[t+40>>2];I=+c[t+12>>2];j=+c[t+28>>2];R=+c[t+44>>2];f=o[e+32>>2]|0;k=+c[f+4>>2];w=+c[f+20>>2];C=+c[f+36>>2];g=+c[f+8>>2];y=+c[f+24>>2];m=+c[f+40>>2];d=+c[f+12>>2];u=+c[f+28>>2];i=+c[f+44>>2];o[B>>2]=0;o[B+4>>2]=0;o[B+8>>2]=0;o[B+12>>2]=0;b=+c[a>>2];l=+c[a+4>>2];r=+c[a+8>>2];c[e+428+(s*84|0)+16>>2]=W*b+P*l+M*r;c[e+428+(s*84|0)+20>>2]=L*b+O*l+D*r;c[e+428+(s*84|0)+24>>2]=I*b+j*l+R*r;c[e+428+(s*84|0)+28>>2]=0;c[e+428+(s*84|0)+32>>2]=k*-b+w*-l+C*-r;c[e+428+(s*84|0)+36>>2]=g*-b+y*-l+m*-r;c[e+428+(s*84|0)+40>>2]=d*-b+u*-l+i*-r;c[e+428+(s*84|0)+44>>2]=0;x=(W*b+P*l+M*r)*+c[t+420>>2];T=(L*b+O*l+D*r)*+c[t+424>>2];S=(I*b+j*l+R*r)*+c[t+428>>2];c[e+428+(s*84|0)+48>>2]=x;c[e+428+(s*84|0)+52>>2]=T;c[e+428+(s*84|0)+56>>2]=S;c[e+428+(s*84|0)+60>>2]=0;v=(k*-b+w*-l+C*-r)*+c[f+420>>2];h=(g*-b+y*-l+m*-r)*+c[f+424>>2];_=(d*-b+u*-l+i*-r)*+c[f+428>>2];c[e+428+(s*84|0)+64>>2]=v;c[e+428+(s*84|0)+68>>2]=h;c[e+428+(s*84|0)+72>>2]=_;c[e+428+(s*84|0)+76>>2]=0;c[e+428+(s*84|0)+80>>2]=(W*b+P*l+M*r)*x+(L*b+O*l+D*r)*T+(I*b+j*l+R*r)*S+((k*-b+w*-l+C*-r)*v+(g*-b+y*-l+m*-r)*h+(d*-b+u*-l+i*-r)*_)}s=s+1|0}while((s|0)!=3);p=a;return}function zI(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;T=+c[e+48>>2];s=+c[t>>2];D=+c[e+64>>2];a=+c[t+4>>2];O=+c[e+80>>2];d=+c[t+8>>2];y=+c[e+52>>2];m=+c[e+68>>2];h=+c[e+84>>2];w=+c[e+56>>2];S=+c[e+72>>2];R=+c[e+88>>2];C=+c[t+16>>2];v=+c[t+20>>2];g=+c[t+24>>2];k=+c[t+32>>2];L=+c[t+36>>2];x=+c[t+40>>2];f=+c[e+96>>2];_=+c[e+100>>2];I=+c[e+104>>2];j=+c[t+48>>2]+(s*f+a*_+d*I);r=C*f+v*_+g*I+ +c[t+52>>2];I=k*f+L*_+x*I+ +c[t+56>>2];c[e+1064>>2]=T*s+D*a+O*d;c[e+1068>>2]=s*y+a*m+d*h;c[e+1072>>2]=s*w+a*S+d*R;c[e+1076>>2]=0;c[e+1080>>2]=T*C+D*v+O*g;c[e+1084>>2]=y*C+m*v+h*g;c[e+1088>>2]=w*C+S*v+R*g;c[e+1092>>2]=0;c[e+1096>>2]=T*k+D*L+O*x;c[e+1100>>2]=y*k+m*L+h*x;c[e+1104>>2]=w*k+S*L+R*x;c[e+1108>>2]=0;c[e+1112>>2]=j;c[e+1116>>2]=r;c[e+1120>>2]=I;c[e+1124>>2]=0;I=+c[e+112>>2];r=+c[i>>2];j=+c[e+128>>2];x=+c[i+4>>2];R=+c[e+144>>2];L=+c[i+8>>2];S=+c[e+116>>2];k=+c[e+132>>2];w=+c[e+148>>2];h=+c[e+120>>2];m=+c[e+136>>2];y=+c[e+152>>2];O=+c[i+16>>2];D=+c[i+20>>2];T=+c[i+24>>2];g=+c[i+32>>2];v=+c[i+36>>2];C=+c[i+40>>2];d=+c[e+160>>2];a=+c[e+164>>2];s=+c[e+168>>2];_=+c[i+48>>2]+(r*d+x*a+L*s);f=O*d+D*a+T*s+ +c[i+52>>2];s=g*d+v*a+C*s+ +c[i+56>>2];c[e+1128>>2]=I*r+j*x+R*L;c[e+1132>>2]=r*S+x*k+L*w;c[e+1136>>2]=r*h+x*m+L*y;c[e+1140>>2]=0;c[e+1144>>2]=I*O+j*D+R*T;c[e+1148>>2]=S*O+k*D+w*T;c[e+1152>>2]=h*O+m*D+y*T;c[e+1156>>2]=0;c[e+1160>>2]=I*g+j*v+R*C;c[e+1164>>2]=S*g+k*v+w*C;c[e+1168>>2]=h*g+m*v+y*C;c[e+1172>>2]=0;c[e+1176>>2]=_;c[e+1180>>2]=f;c[e+1184>>2]=s;c[e+1188>>2]=0;_=_-+c[e+1112>>2];f=f-+c[e+1116>>2];s=s-+c[e+1120>>2];w=+c[e+1084>>2];k=+c[e+1104>>2];S=+c[e+1088>>2];R=+c[e+1100>>2];j=+c[e+1096>>2];I=+c[e+1080>>2];T=+c[e+1064>>2];D=+c[e+1068>>2];O=+c[e+1072>>2];L=1/((w*k-S*R)*T+D*(S*j-k*I)+(R*I-w*j)*O);x=(R*I-w*j)*L;r=s*((S*D-w*O)*L)+(_*((w*k-S*R)*L)+f*((R*O-k*D)*L));a=s*((I*O-S*T)*L)+(_*((S*j-k*I)*L)+f*((k*T-j*O)*L));f=s*((w*T-I*D)*L)+(_*x+f*((j*D-R*T)*L));c[e+1256>>2]=r;c[e+1260>>2]=a;c[e+1264>>2]=f;c[e+1268>>2]=0;c[e+840>>2]=r;_=+c[e+680>>2];s=+c[e+696>>2];do if(!(_>s)){if(_>r){o[e+856>>2]=2;c[e+824>>2]=r-_;break}if(s<r){o[e+856>>2]=1;c[e+824>>2]=r-s;break}else{o[e+856>>2]=0;c[e+824>>2]=0;break}}else{o[e+856>>2]=0;c[e+824>>2]=0}while(0);c[e+844>>2]=a;r=+c[e+684>>2];_=+c[e+700>>2];do if(!(r>_)){if(r>a){o[e+860>>2]=2;c[e+828>>2]=a-r;break}if(_<a){o[e+860>>2]=1;c[e+828>>2]=a-_;break}else{o[e+860>>2]=0;c[e+828>>2]=0;break}}else{o[e+860>>2]=0;c[e+828>>2]=0}while(0);c[e+848>>2]=f;r=+c[e+688>>2];_=+c[e+704>>2];do if(!(r>_)){if(r>f){o[e+864>>2]=2;c[e+832>>2]=f-r;break}if(_<f){o[e+864>>2]=1;c[e+832>>2]=f-_;break}else{o[e+864>>2]=0;c[e+832>>2]=0;break}}else{o[e+864>>2]=0;c[e+832>>2]=0}while(0);_=+c[e+1128>>2];s=+c[e+1144>>2];a=+c[e+1160>>2];f=+c[e+1132>>2];p=+c[e+1148>>2];l=+c[e+1164>>2];u=(w*k-S*R)*L*f+(R*O-k*D)*L*p+(S*D-w*O)*L*l;b=f*((S*j-k*I)*L)+(k*T-j*O)*L*p+(I*O-S*T)*L*l;d=a*((w*T-I*D)*L)+(_*x+s*((j*D-R*T)*L));r=x*+c[e+1136>>2]+(j*D-R*T)*L*+c[e+1152>>2]+(w*T-I*D)*L*(h*g+m*v+y*C);do if(d<1)if(d>-1){c[e+1192>>2]=+q(+-(f*x+(j*D-R*T)*L*p+(w*T-I*D)*L*l),+r);x=d<-1?-1:d;c[e+1196>>2]=+K(+(x>1?1:x));c[e+1200>>2]=+q(+-(a*((I*O-S*T)*L)+(_*((S*j-k*I)*L)+s*((k*T-j*O)*L))),+(a*((S*D-w*O)*L)+(_*((w*k-S*R)*L)+s*((R*O-k*D)*L))));break}else{c[e+1192>>2]=-+q(+u,+b);c[e+1196>>2]=-1.5707963705062866;c[e+1200>>2]=0;break}else{c[e+1192>>2]=+q(+u,+b);c[e+1196>>2]=1.5707963705062866;c[e+1200>>2]=0}while(0);c[e+1236>>2]=0;R=k*(_*k-a*O)-S*(s*O-_*S);j=O*(s*O-_*S)-k*(a*S-s*k);I=S*(a*S-s*k)-O*(_*k-a*O);c[e+1220>>2]=0;T=s*(s*O-_*S)-a*(_*k-a*O);D=a*(a*S-s*k)-_*(s*O-_*S);L=_*(_*k-a*O)-s*(a*S-s*k);c[e+1252>>2]=0;x=1/+X(+(R*R+j*j+I*I));c[e+1208>>2]=R*x;c[e+1212>>2]=j*x;c[e+1216>>2]=I*x;x=1/+X(+((a*S-s*k)*(a*S-s*k)+(_*k-a*O)*(_*k-a*O)+(s*O-_*S)*(s*O-_*S)));c[e+1224>>2]=(a*S-s*k)*x;c[e+1228>>2]=(_*k-a*O)*x;c[e+1232>>2]=(s*O-_*S)*x;x=1/+X(+(T*T+D*D+L*L));c[e+1240>>2]=T*x;c[e+1244>>2]=D*x;c[e+1248>>2]=L*x;if(!(n[e+1301>>0]|0))return;L=+c[(o[e+28>>2]|0)+368>>2];x=+c[(o[e+32>>2]|0)+368>>2];n[e+1280>>0]=(L<1.1920928955078125e-7|x<1.1920928955078125e-7)&1;x=L+x>0?x/(L+x):.5;c[e+1272>>2]=x;c[e+1276>>2]=1-x;return}function YI(e,t,i,n,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;_=+_;s=+s;a=+a;f=+f;l=+l;var u=0;u=p;p=p+128|0;o[u+80>>2]=o[e+4>>2];o[u+80+4>>2]=o[e+20>>2];o[u+80+8>>2]=o[e+36>>2];c[u+80+12>>2]=0;o[u+80+16>>2]=o[e+8>>2];o[u+80+20>>2]=o[e+24>>2];o[u+80+24>>2]=o[e+40>>2];c[u+80+28>>2]=0;o[u+80+32>>2]=o[e+12>>2];o[u+80+36>>2]=o[e+28>>2];o[u+80+40>>2]=o[e+44>>2];c[u+80+44>>2]=0;o[u+32>>2]=o[t+4>>2];o[u+32+4>>2]=o[t+20>>2];o[u+32+8>>2]=o[t+36>>2];c[u+32+12>>2]=0;o[u+32+16>>2]=o[t+8>>2];o[u+32+20>>2]=o[t+24>>2];o[u+32+24>>2]=o[t+40>>2];c[u+32+28>>2]=0;o[u+32+32>>2]=o[t+12>>2];o[u+32+36>>2]=o[t+28>>2];o[u+32+40>>2]=o[t+44>>2];c[u+32+44>>2]=0;_=_-+c[e+56>>2];s=s-+c[e+60>>2];c[u+16>>2]=r-+c[e+52>>2];c[u+16+4>>2]=_;c[u+16+8>>2]=s;c[u+16+12>>2]=0;f=f-+c[t+56>>2];l=l-+c[t+60>>2];c[u>>2]=a-+c[t+52>>2];c[u+4>>2]=f;c[u+8>>2]=l;c[u+12>>2]=0;TI(i,u+80|0,u+32|0,u+16|0,u,n,e+420|0,+c[e+368>>2],t+420|0,+c[t+368>>2]);p=u;return}function KI(e,t,i){e=+e;t=+t;i=+i;var n=0,r=0,o=0;if(t>=i)return+e;if(e<t){n=+Ya(t-e);if(!(n<-3.1415927410125732)){if(n>3.1415927410125732)n=n+-6.2831854820251465}else n=n+6.2831854820251465;r=+N(+n);n=+Ya(i-e);if(!(n<-3.1415927410125732)){if(n>3.1415927410125732)n=n+-6.2831854820251465}else n=n+6.2831854820251465;o=r<+N(+n);e=o?e:e+6.2831854820251465;return+e}if(!(e>i))return+e;n=+Ya(e-i);if(!(n<-3.1415927410125732)){if(n>3.1415927410125732)n=n+-6.2831854820251465}else n=n+6.2831854820251465;r=+N(+n);n=+Ya(e-t);if(!(n<-3.1415927410125732)){if(n>3.1415927410125732)n=n+-6.2831854820251465}else n=n+6.2831854820251465;o=+N(+n)<r;e=o?e+-6.2831854820251465:e;return+e}function QI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0;if(n[e+1308>>0]|0){o[t>>2]=0;o[t+4>>2]=0;return}zI(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);o[t>>2]=0;o[t+4>>2]=6;if((o[e+856>>2]|0)==0?(n[e+788>>0]|0)==0:0){i=0;r=6}else{o[t>>2]=1;o[t+4>>2]=5;i=1;r=5}if(!((o[e+860>>2]|0)==0?(n[e+789>>0]|0)==0:0)){i=i+1|0;o[t>>2]=i;r=r+-1|0;o[t+4>>2]=r}if((o[e+864>>2]|0)==0?(n[e+790>>0]|0)==0:0)p=0;else{i=i+1|0;o[t>>2]=i;r=r+-1|0;o[t+4>>2]=r;p=0}do{s=+c[e+868+(p<<6)>>2];a=+c[e+868+(p<<6)+4>>2];f=+KI(+c[e+1192+(p<<2)>>2],s,a);c[e+868+(p<<6)+52>>2]=f;do if(!(s>a)){if(s>f){o[e+868+(p<<6)+56>>2]=1;_=e+868+(p<<6)+48|0;c[_>>2]=f-s;if(f-s>3.1415927410125732){c[_>>2]=f-s+-6.2831854820251465;_=21;break}if(!(f-s<-3.1415927410125732)){_=21;break}c[_>>2]=f-s+6.2831854820251465;_=21;break}_=e+868+(p<<6)+56|0;if(!(a<f)){o[_>>2]=0;_=20;break}o[_>>2]=2;_=e+868+(p<<6)+48|0;c[_>>2]=f-a;if(f-a>3.1415927410125732){c[_>>2]=f-a+-6.2831854820251465;_=21;break}if(f-a<-3.1415927410125732){c[_>>2]=f-a+6.2831854820251465;_=21}else _=21}else{o[e+868+(p<<6)+56>>2]=0;_=20}while(0);if((_|0)==20){_=0;if(n[e+868+(p<<6)+44>>0]|0)_=21}if((_|0)==21){i=i+1|0;o[t>>2]=i;r=r+-1|0;o[t+4>>2]=r}p=p+1|0}while((p|0)!=3);return}function qI(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0;f=p;p=p+16|0;a=o[e+28>>2]|0;c=o[e+32>>2]|0;if(!(n[e+1301>>0]|0)){s=0;i=$I(e,t,0,a+4|0,c+4|0,a+336|0,c+336|0,a+352|0,c+352|0)|0;do{r=e+868+(s<<6)|0;if(!((o[e+868+(s<<6)+56>>2]|0)==0?(n[e+868+(s<<6)+44>>0]|0)==0:0)){_=e+1208+(s<<4)|0;o[f>>2]=o[_>>2];o[f+4>>2]=o[_+4>>2];o[f+8>>2]=o[_+8>>2];o[f+12>>2]=o[_+12>>2];_=o[e+1304>>2]>>(s*3|0)+9;if(!(_&1))o[e+868+(s<<6)+28>>2]=o[o[t+32>>2]>>2];if(!(_&2))o[e+868+(s<<6)+36>>2]=o[o[t+32>>2]>>2];if(!(_&4))o[e+868+(s<<6)+32>>2]=o[t+4>>2];i=(JI(e,r,a+4|0,c+4|0,a+336|0,c+336|0,a+352|0,c+352|0,t,i,f,1,0)|0)+i|0}s=s+1|0}while((s|0)!=3);p=f;return}s=0;i=0;do{r=e+868+(s<<6)|0;if(!((o[e+868+(s<<6)+56>>2]|0)==0?(n[e+868+(s<<6)+44>>0]|0)==0:0)){_=e+1208+(s<<4)|0;o[f>>2]=o[_>>2];o[f+4>>2]=o[_+4>>2];o[f+8>>2]=o[_+8>>2];o[f+12>>2]=o[_+12>>2];_=o[e+1304>>2]>>(s*3|0)+9;if(!(_&1))o[e+868+(s<<6)+28>>2]=o[o[t+32>>2]>>2];if(!(_&2))o[e+868+(s<<6)+36>>2]=o[o[t+32>>2]>>2];if(!(_&4))o[e+868+(s<<6)+32>>2]=o[t+4>>2];i=(JI(e,r,a+4|0,c+4|0,a+336|0,c+336|0,a+352|0,c+352|0,t,i,f,1,0)|0)+i|0}s=s+1|0}while((s|0)!=3);$I(e,t,i,a+4|0,c+4|0,a+336|0,c+336|0,a+352|0,c+352|0)|0;p=f;return}function JI(e,t,i,r,_,s,a,f,p,l,u,b,d){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;p=p|0;l=l|0;u=u|0;b=b|0;d=d|0;var h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0;j=te(o[p+24>>2]|0,l)|0;l=n[t+44>>0]|0;R=o[t+56>>2]|0;if(!(l<<24>>24!=0|(R|0)!=0)){j=0;return j|0}T=o[(b|0?p+12|0:p+8|0)>>2]|0;I=o[(b|0?p+20|0:p+16|0)>>2]|0;o[T+(j<<2)>>2]=o[u>>2];o[T+(j+1<<2)>>2]=o[u+4>>2];o[T+(j+2<<2)>>2]=o[u+8>>2];c[I+(j<<2)>>2]=-+c[u>>2];c[I+(j+1<<2)>>2]=-+c[u+4>>2];c[I+(j+2<<2)>>2]=-+c[u+8>>2];do if(!b){h=+c[e+1176>>2];if(!(n[e+1301>>0]|0)){g=h-+c[i+48>>2];w=+c[e+1180>>2]-+c[i+52>>2];k=+c[e+1184>>2]-+c[i+56>>2];C=+c[u+8>>2];y=+c[u+4>>2];v=+c[u>>2];T=o[p+12>>2]|0;c[T+(j<<2)>>2]=w*C-k*y;c[T+(j+1<<2)>>2]=k*v-g*C;c[T+(j+2<<2)>>2]=g*y-w*v;v=+c[e+1176>>2]-+c[r+48>>2];w=+c[e+1180>>2]-+c[r+52>>2];y=+c[e+1184>>2]-+c[r+56>>2];g=+c[u+8>>2];C=+c[u+4>>2];k=+c[u>>2];T=o[p+20>>2]|0;c[T+(j<<2)>>2]=-(w*g-y*C);c[T+(j+1<<2)>>2]=-(y*k-v*g);c[T+(j+2<<2)>>2]=-(v*C-w*k);break}P=h-+c[r+48>>2];M=+c[e+1180>>2]-+c[r+52>>2];L=+c[e+1184>>2]-+c[r+56>>2];v=+c[u>>2];x=+c[u+4>>2];O=+c[u+8>>2];B=+c[e+1112>>2]-+c[i+48>>2];g=+c[e+1116>>2]-+c[i+52>>2];h=+c[e+1120>>2]-+c[i+56>>2];C=+c[t+52>>2]-+c[t+48>>2];W=v*(v*B+x*g+O*h)+v*C-v*(P*v+M*x+L*O);D=x*(v*B+x*g+O*h)+x*C-x*(P*v+M*x+L*O);C=O*(v*B+x*g+O*h)+O*C-O*(P*v+M*x+L*O);k=+c[e+1272>>2];w=+c[e+1276>>2];y=O*(g-x*(v*B+x*g+O*h)+k*D)-x*(h-O*(v*B+x*g+O*h)+k*C);m=v*(h-O*(v*B+x*g+O*h)+k*C)-O*(B-v*(v*B+x*g+O*h)+k*W);h=x*(B-v*(v*B+x*g+O*h)+k*W)-v*(g-x*(v*B+x*g+O*h)+k*D);g=(M-x*(P*v+M*x+L*O)-w*D)*O-(L-O*(P*v+M*x+L*O)-w*C)*x;C=(L-O*(P*v+M*x+L*O)-w*C)*v-(P-v*(P*v+M*x+L*O)-w*W)*O;v=(P-v*(P*v+M*x+L*O)-w*W)*x-(M-x*(P*v+M*x+L*O)-w*D)*v;if(!((d|0)!=0|(n[e+1280>>0]|0)==0)){g=w*g;C=w*C;v=w*v;y=k*y;m=k*m;h=k*h}T=(o[p+12>>2]|0)+(j<<2)|0;c[T>>2]=y;c[T+4>>2]=m;c[T+8>>2]=h;T=o[p+20>>2]|0;c[T+(j<<2)>>2]=-g;c[T+(j+1<<2)>>2]=-C;c[T+(j+2<<2)>>2]=-v}while(0);if(R|0?+c[t>>2]==+c[t+4>>2]:0){l=o[p+28>>2]|0;c[l+(j<<2)>>2]=0;h=0;i=p+28|0}else S=11;do if((S|0)==11){i=o[p+28>>2]|0;c[i+(j<<2)>>2]=0;if(!(l<<24>>24)){if(R|0){l=i;h=0;i=p+28|0;break}else l=1;return l|0}o[(o[p+32>>2]|0)+(j<<2)>>2]=o[t+28>>2];if(R|0){l=i;h=+c[i+(j<<2)>>2];i=p+28|0;break}C=+c[t+8>>2];h=b|0?C:-C;m=+c[t+52>>2];y=+c[t>>2];g=+c[t+4>>2];v=+c[p>>2]*+c[t+32>>2];do if(!(y>g))if(!(y==g)){if(h/v<0)if(m>=y?y-h/v>m:0){h=(y-m)/(h/v);break}else{h=m<y?0:1;break}if(h/v>0)if(m<=g?g-h/v<m:0){h=(g-m)/(h/v);break}else{h=m>g?0:1;break}else h=0}else h=0;else h=1;while(0);c[i+(j<<2)>>2]=h*C+ +c[i+(j<<2)>>2];c[(o[p+36>>2]|0)+(j<<2)>>2]=-+c[t+12>>2];o[(o[p+40>>2]|0)+(j<<2)>>2]=o[t+12>>2];T=1;return T|0}while(0);B=+c[p>>2]*+c[t+32>>2]*+c[t+48>>2];c[l+(j<<2)>>2]=h+(b|0?-B:B);o[(o[p+32>>2]|0)+(j<<2)>>2]=o[t+36>>2];if(+c[t>>2]==+c[t+4>>2]){c[(o[p+36>>2]|0)+(j<<2)>>2]=-3.4028234663852886e38;c[(o[p+40>>2]|0)+(j<<2)>>2]=3.4028234663852886e38;T=1;return T|0}T=o[p+40>>2]|0;c[(o[p+36>>2]|0)+(j<<2)>>2]=(R|0)==1?0:-3.4028234663852886e38;c[T+(j<<2)>>2]=(R|0)==1?3.4028234663852886e38:0;m=+c[t+40>>2];if(!(m>0)){T=1;return T|0}if(b|0){W=+c[u>>2];B=+c[u+4>>2];h=+c[u+8>>2];h=+c[a>>2]*W+ +c[a+4>>2]*B+ +c[a+8>>2]*h-(W*+c[f>>2]+B*+c[f+4>>2]+h*+c[f+8>>2])}else{W=+c[u>>2];B=+c[u+4>>2];h=+c[u+8>>2];h=+c[_>>2]*W+ +c[_+4>>2]*B+ +c[_+8>>2]*h-(W*+c[s>>2]+B*+c[s+4>>2]+h*+c[s+8>>2])}if((R|0)==1){if(!(h<0)){T=1;return T|0}h=-(h*m);l=(o[i>>2]|0)+(j<<2)|0;if(!(+c[l>>2]<h)){T=1;return T|0}c[l>>2]=h;T=1;return T|0}else{if(!(h>0)){T=1;return T|0}h=-(h*m);l=(o[i>>2]|0)+(j<<2)|0;if(!(+c[l>>2]>h)){T=1;return T|0}c[l>>2]=h;T=1;return T|0}return 0}function $I(e,t,i,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;l=l|0;var u=0,b=0,d=0,h=0;h=p;p=p+80|0;c[h+16+60>>2]=0;c[h+16+8>>2]=0;c[h+16+12>>2]=.10000000149011612;c[h+16+16>>2]=300;c[h+16>>2]=1;c[h+16+4>>2]=-1;c[h+16+28>>2]=0;c[h+16+32>>2]=.20000000298023224;c[h+16+36>>2]=0;c[h+16+40>>2]=0;c[h+16+20>>2]=1;c[h+16+24>>2]=.5;o[h+16+56>>2]=0;c[h+16+48>>2]=0;n[h+16+44>>0]=0;d=0;do{u=o[e+856+(d<<2)>>2]|0;b=n[e+788+d>>0]|0;if(!((u|0)==0&b<<24>>24==0)){c[h+16+40>>2]=0;o[h+16+56>>2]=u;o[h+16+52>>2]=o[e+840+(d<<2)>>2];o[h+16+48>>2]=o[e+824+(d<<2)>>2];o[h+16+20>>2]=o[e+732>>2];n[h+16+44>>0]=b;o[h+16+4>>2]=o[e+696+(d<<2)>>2];o[h+16+24>>2]=o[e+728>>2];o[h+16>>2]=o[e+680+(d<<2)>>2];c[h+16+16>>2]=0;o[h+16+12>>2]=o[e+808+(d<<2)>>2];o[h+16+8>>2]=o[e+792+(d<<2)>>2];o[h>>2]=o[e+1064+(d<<2)>>2];o[h+4>>2]=o[e+1080+(d<<2)>>2];o[h+8>>2]=o[e+1096+(d<<2)>>2];c[h+12>>2]=0;b=o[e+1304>>2]>>d*3;if(!(b&1))u=o[t+32>>2]|0;else u=e+740+(d<<2)|0;o[h+16+28>>2]=o[u>>2];if(!(b&2))u=o[t+32>>2]|0;else u=e+772+(d<<2)|0;o[h+16+36>>2]=o[u>>2];o[h+16+32>>2]=o[((b&4|0)==0?t+4|0:e+756+(d<<2)|0)>>2];if(!(n[e+1301>>0]|0))u=JI(e,h+16|0,r,_,s,a,f,l,t,i,h,0,0)|0;else{b=d+1|0;if(!(o[e+868+(((b|0)==3?0:b)<<6)+56>>2]|0))u=1;else u=(o[e+868+(((d+2|0)%3|0)<<6)+56>>2]|0)==0&1;u=JI(e,h+16|0,r,_,s,a,f,l,t,i,h,0,u)|0}i=u+i|0}d=d+1|0}while((d|0)!=3);p=h;return i|0}function eT(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;if(n>>>0<3)switch(t|0){case 2:{c[e+756+(n<<2)>>2]=i;o[e+1304>>2]=o[e+1304>>2]|4<<n*3;return}case 4:{c[e+772+(n<<2)>>2]=i;o[e+1304>>2]=o[e+1304>>2]|2<<n*3;return}case 3:{c[e+740+(n<<2)>>2]=i;o[e+1304>>2]=o[e+1304>>2]|1<<n*3;return}default:return}if((n+-3|0)>>>0>=3)return;switch(t|0){case 2:{c[e+868+(n+-3<<6)+32>>2]=i;o[e+1304>>2]=o[e+1304>>2]|4<<n*3;return}case 4:{c[e+868+(n+-3<<6)+36>>2]=i;o[e+1304>>2]=o[e+1304>>2]|2<<n*3;return}case 3:{c[e+868+(n+-3<<6)+28>>2]=i;o[e+1304>>2]=o[e+1304>>2]|1<<n*3;return}default:return}}function tT(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do if(i>>>0>=3)if((i+-3|0)>>>0<3)switch(t|0){case 2:{n=+c[e+868+(i+-3<<6)+32>>2];break e}case 4:{n=+c[e+868+(i+-3<<6)+36>>2];break e}case 3:{n=+c[e+868+(i+-3<<6)+28>>2];break e}default:{n=0;break e}}else n=0;else switch(t|0){case 2:{n=+c[e+756+(i<<2)>>2];break e}case 4:{n=+c[e+772+(i<<2)>>2];break e}case 3:{n=+c[e+740+(i<<2)>>2];break e}default:{n=0;break e}}while(0);return+n}function iT(e){e=e|0;return 252}function nT(e,t,i){e=e|0;t=t|0;i=i|0;Gy(e,t,i)|0;o[t+52>>2]=o[e+48>>2];o[t+56>>2]=o[e+52>>2];o[t+60>>2]=o[e+56>>2];o[t+64>>2]=o[e+60>>2];o[t+68>>2]=o[e+64>>2];o[t+72>>2]=o[e+68>>2];o[t+76>>2]=o[e+72>>2];o[t+80>>2]=o[e+76>>2];o[t+84>>2]=o[e+80>>2];o[t+88>>2]=o[e+84>>2];o[t+92>>2]=o[e+88>>2];o[t+96>>2]=o[e+92>>2];o[t+100>>2]=o[e+96>>2];o[t+104>>2]=o[e+100>>2];o[t+108>>2]=o[e+104>>2];o[t+112>>2]=o[e+108>>2];o[t+116>>2]=o[e+112>>2];o[t+120>>2]=o[e+116>>2];o[t+124>>2]=o[e+120>>2];o[t+128>>2]=o[e+124>>2];o[t+132>>2]=o[e+128>>2];o[t+136>>2]=o[e+132>>2];o[t+140>>2]=o[e+136>>2];o[t+144>>2]=o[e+140>>2];o[t+148>>2]=o[e+144>>2];o[t+152>>2]=o[e+148>>2];o[t+156>>2]=o[e+152>>2];o[t+160>>2]=o[e+156>>2];o[t+164>>2]=o[e+160>>2];o[t+168>>2]=o[e+164>>2];o[t+172>>2]=o[e+168>>2];o[t+176>>2]=o[e+172>>2];o[t+228>>2]=o[e+868>>2];o[t+212>>2]=o[e+872>>2];o[t+196>>2]=o[e+680>>2];o[t+180>>2]=o[e+696>>2];o[t+232>>2]=o[e+932>>2];o[t+216>>2]=o[e+936>>2];o[t+200>>2]=o[e+684>>2];o[t+184>>2]=o[e+700>>2];o[t+236>>2]=o[e+996>>2];o[t+220>>2]=o[e+1e3>>2];o[t+204>>2]=o[e+688>>2];o[t+188>>2]=o[e+704>>2];e=r[e+1300>>1]|0;o[t+244>>2]=e&255;o[t+248>>2]=(e&65535)>>>8&65535;return 15229}function rT(e){e=e|0;var t=0,i=0,n=0,r=0;t=+c[(o[e+28>>2]|0)+368>>2];i=+c[(o[e+32>>2]|0)+368>>2];if(i==0)t=1;else t=t/(t+i);r=1-t;n=t*+c[e+1116>>2]+r*+c[e+1180>>2];i=t*+c[e+1120>>2]+r*+c[e+1184>>2];c[e+1284>>2]=t*+c[e+1112>>2]+r*+c[e+1176>>2];c[e+1288>>2]=n;c[e+1292>>2]=i;c[e+1296>>2]=0;return}function oT(e){e=e|0;return o[e+1304>>2]|0}function _T(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;o[e+4>>2]=6;o[e+8>>2]=-1;o[e+12>>2]=-1;c[e+16>>2]=3.4028234663852886e38;n[e+20>>0]=1;n[e+21>>0]=0;o[e+24>>2]=-1;o[e+28>>2]=t;o[e+32>>2]=i;c[e+36>>2]=0;c[e+40>>2]=.30000001192092896;o[e+44>>2]=0;o[e>>2]=7240;o[e+48>>2]=o[r>>2];o[e+48+4>>2]=o[r+4>>2];o[e+48+8>>2]=o[r+8>>2];o[e+48+12>>2]=o[r+12>>2];o[e+64>>2]=o[r+16>>2];o[e+64+4>>2]=o[r+16+4>>2];o[e+64+8>>2]=o[r+16+8>>2];o[e+64+12>>2]=o[r+16+12>>2];o[e+80>>2]=o[r+32>>2];o[e+80+4>>2]=o[r+32+4>>2];o[e+80+8>>2]=o[r+32+8>>2];o[e+80+12>>2]=o[r+32+12>>2];o[e+96>>2]=o[r+48>>2];o[e+96+4>>2]=o[r+48+4>>2];o[e+96+8>>2]=o[r+48+8>>2];o[e+96+12>>2]=o[r+48+12>>2];o[e+112>>2]=o[_>>2];o[e+112+4>>2]=o[_+4>>2];o[e+112+8>>2]=o[_+8>>2];o[e+112+12>>2]=o[_+12>>2];o[e+128>>2]=o[_+16>>2];o[e+128+4>>2]=o[_+16+4>>2];o[e+128+8>>2]=o[_+16+8>>2];o[e+128+12>>2]=o[_+16+12>>2];o[e+144>>2]=o[_+32>>2];o[e+144+4>>2]=o[_+32+4>>2];o[e+144+8>>2]=o[_+32+8>>2];o[e+144+12>>2]=o[_+32+12>>2];o[e+160>>2]=o[_+48>>2];o[e+160+4>>2]=o[_+48+4>>2];o[e+160+8>>2]=o[_+48+8>>2];o[e+160+12>>2]=o[_+48+12>>2];r=e+680|0;_=r+48|0;do{o[r>>2]=0;r=r+4|0}while((r|0)<(_|0));o[e+740>>2]=0;o[e+740+4>>2]=0;o[e+740+8>>2]=0;o[e+740+12>>2]=0;o[e+756>>2]=1045220557;o[e+760>>2]=1045220557;o[e+764>>2]=1045220557;o[e+768>>2]=0;o[e+768+4>>2]=0;o[e+768+8>>2]=0;o[e+768+12>>2]=0;o[e+768+16>>2]=0;c[e+728>>2]=.699999988079071;c[e+732>>2]=1;c[e+736>>2]=.5;n[e+788>>0]=0;c[e+792>>2]=0;c[e+808>>2]=0;n[e+789>>0]=0;c[e+796>>2]=0;c[e+812>>2]=0;n[e+790>>0]=0;c[e+800>>2]=0;c[e+816>>2]=0;c[e+928>>2]=0;c[e+876>>2]=0;c[e+880>>2]=.10000000149011612;c[e+884>>2]=300;c[e+868>>2]=1;c[e+872>>2]=-1;c[e+896>>2]=0;c[e+900>>2]=.20000000298023224;c[e+904>>2]=0;c[e+908>>2]=0;c[e+888>>2]=1;c[e+892>>2]=.5;o[e+924>>2]=0;c[e+916>>2]=0;n[e+912>>0]=0;c[e+992>>2]=0;c[e+940>>2]=0;c[e+944>>2]=.10000000149011612;c[e+948>>2]=300;c[e+932>>2]=1;c[e+936>>2]=-1;c[e+960>>2]=0;c[e+964>>2]=.20000000298023224;c[e+968>>2]=0;c[e+972>>2]=0;c[e+952>>2]=1;c[e+956>>2]=.5;o[e+988>>2]=0;c[e+980>>2]=0;n[e+976>>0]=0;c[e+1056>>2]=0;c[e+1004>>2]=0;c[e+1008>>2]=.10000000149011612;c[e+1012>>2]=300;c[e+996>>2]=1;c[e+1e3>>2]=-1;c[e+1024>>2]=0;c[e+1028>>2]=.20000000298023224;c[e+1032>>2]=0;c[e+1036>>2]=0;c[e+1016>>2]=1;c[e+1020>>2]=.5;o[e+1052>>2]=0;c[e+1044>>2]=0;n[e+1040>>0]=0;n[e+1300>>0]=s&1;n[e+1301>>0]=1;o[e+1304>>2]=0;n[e+1308>>0]=0;zI(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);return}function sT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0;s=p;p=p+16|0;if(!(n[19880]|0)){n[19880]=1;o[s>>2]=0;o[s+4>>2]=0;o[s+8>>2]=0;o[s+12>>2]=0;Vg(21260,0,0,0,s)}o[5366]=o[5366]|1;c[5407]=0;a=+c[5417]*0;f=+c[5418]*0;c[5412]=+c[5416]*0;c[5413]=a;c[5414]=f;c[5415]=0;o[5420]=0;o[5421]=0;o[5422]=0;o[5423]=0;f=+c[5409]*0;a=+c[5410]*0;c[5461]=+c[5408]*0;c[5462]=f;c[5463]=a;c[5464]=0;o[e+4>>2]=6;o[e+8>>2]=-1;o[e+12>>2]=-1;c[e+16>>2]=3.4028234663852886e38;n[e+20>>0]=1;n[e+21>>0]=0;o[e+24>>2]=-1;o[e+28>>2]=21260;o[e+32>>2]=t;c[e+36>>2]=0;c[e+40>>2]=.30000001192092896;o[e+44>>2]=0;o[e>>2]=7240;o[e+112>>2]=o[i>>2];o[e+112+4>>2]=o[i+4>>2];o[e+112+8>>2]=o[i+8>>2];o[e+112+12>>2]=o[i+12>>2];o[e+128>>2]=o[i+16>>2];o[e+128+4>>2]=o[i+16+4>>2];o[e+128+8>>2]=o[i+16+8>>2];o[e+128+12>>2]=o[i+16+12>>2];o[e+144>>2]=o[i+32>>2];o[e+144+4>>2]=o[i+32+4>>2];o[e+144+8>>2]=o[i+32+8>>2];o[e+144+12>>2]=o[i+32+12>>2];o[e+160>>2]=o[i+48>>2];o[e+160+4>>2]=o[i+48+4>>2];o[e+160+8>>2]=o[i+48+8>>2];o[e+160+12>>2]=o[i+48+12>>2];i=e+680|0;_=i+48|0;do{o[i>>2]=0;i=i+4|0}while((i|0)<(_|0));o[e+740>>2]=0;o[e+740+4>>2]=0;o[e+740+8>>2]=0;o[e+740+12>>2]=0;o[e+756>>2]=1045220557;o[e+760>>2]=1045220557;o[e+764>>2]=1045220557;o[e+768>>2]=0;o[e+768+4>>2]=0;o[e+768+8>>2]=0;o[e+768+12>>2]=0;o[e+768+16>>2]=0;c[e+728>>2]=.699999988079071;c[e+732>>2]=1;c[e+736>>2]=.5;n[e+788>>0]=0;c[e+792>>2]=0;c[e+808>>2]=0;n[e+789>>0]=0;c[e+796>>2]=0;c[e+812>>2]=0;n[e+790>>0]=0;c[e+800>>2]=0;c[e+816>>2]=0;c[e+928>>2]=0;c[e+876>>2]=0;c[e+880>>2]=.10000000149011612;c[e+884>>2]=300;c[e+868>>2]=1;c[e+872>>2]=-1;c[e+896>>2]=0;c[e+900>>2]=.20000000298023224;c[e+904>>2]=0;c[e+908>>2]=0;c[e+888>>2]=1;c[e+892>>2]=.5;o[e+924>>2]=0;c[e+916>>2]=0;n[e+912>>0]=0;c[e+992>>2]=0;c[e+940>>2]=0;c[e+944>>2]=.10000000149011612;c[e+948>>2]=300;c[e+932>>2]=1;c[e+936>>2]=-1;c[e+960>>2]=0;c[e+964>>2]=.20000000298023224;c[e+968>>2]=0;c[e+972>>2]=0;c[e+952>>2]=1;c[e+956>>2]=.5;o[e+988>>2]=0;c[e+980>>2]=0;n[e+976>>0]=0;c[e+1056>>2]=0;c[e+1004>>2]=0;c[e+1008>>2]=.10000000149011612;c[e+1012>>2]=300;c[e+996>>2]=1;c[e+1e3>>2]=-1;c[e+1024>>2]=0;c[e+1028>>2]=.20000000298023224;c[e+1032>>2]=0;c[e+1036>>2]=0;c[e+1016>>2]=1;c[e+1020>>2]=.5;o[e+1052>>2]=0;c[e+1044>>2]=0;n[e+1040>>0]=0;n[e+1300>>0]=r&1;n[e+1301>>0]=1;o[e+1304>>2]=0;n[e+1308>>0]=0;S=+c[e+112>>2];O=+c[t+4>>2];k=+c[e+128>>2];D=+c[t+8>>2];w=+c[e+144>>2];T=+c[t+12>>2];C=+c[e+116>>2];v=+c[e+132>>2];g=+c[e+148>>2];y=+c[e+120>>2];h=+c[e+136>>2];b=+c[e+152>>2];I=+c[t+20>>2];j=+c[t+24>>2];R=+c[t+28>>2];m=+c[t+36>>2];d=+c[t+40>>2];u=+c[t+44>>2];x=+c[e+160>>2];L=+c[e+164>>2];f=+c[e+168>>2];l=+c[t+52>>2]+(O*x+D*L+T*f);a=I*x+j*L+R*f+ +c[t+56>>2];f=m*x+d*L+u*f+ +c[t+60>>2];c[e+48>>2]=S*O+k*D+w*T;c[e+52>>2]=O*C+D*v+T*g;c[e+56>>2]=O*y+D*h+T*b;c[e+60>>2]=0;c[e+64>>2]=S*I+k*j+w*R;c[e+68>>2]=C*I+v*j+g*R;c[e+72>>2]=y*I+h*j+b*R;c[e+76>>2]=0;c[e+80>>2]=S*m+k*d+w*u;c[e+84>>2]=C*m+v*d+g*u;c[e+88>>2]=y*m+h*d+b*u;c[e+92>>2]=0;c[e+96>>2]=l;c[e+100>>2]=a;c[e+104>>2]=f;c[e+108>>2]=0;zI(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);p=s;return}function aT(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function cT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0;fT(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);o[t>>2]=0;o[t+4>>2]=0;switch(o[e+956>>2]|0){case 4:{o[t>>2]=2;i=2;break}case 0:{i=0;break}default:{o[t>>2]=1;i=1}}if(n[e+792>>0]|0){i=i+1|0;o[t>>2]=i}if(n[e+798>>0]|0){i=i+1|0;o[t>>2]=i}switch(o[e+960>>2]|0){case 4:{i=i+2|0;o[t>>2]=i;break}case 0:break;default:{i=i+1|0;o[t>>2]=i}}if(n[e+793>>0]|0){i=i+1|0;o[t>>2]=i}if(n[e+799>>0]|0){i=i+1|0;o[t>>2]=i}switch(o[e+964>>2]|0){case 4:{i=i+2|0;o[t>>2]=i;break}case 0:break;default:{i=i+1|0;o[t>>2]=i}}if(n[e+794>>0]|0){i=i+1|0;o[t>>2]=i}if(!(n[e+800>>0]|0))a=0;else{i=i+1|0;o[t>>2]=i;a=0}do{r=+c[e+968+(a*88|0)>>2];_=+c[e+968+(a*88|0)+4>>2];s=+KI(+c[e+1364+(a<<2)>>2],r,_);c[e+968+(a*88|0)+80>>2]=s;do if(!(r>_)){c[e+968+(a*88|0)+72>>2]=s-r;if(r==_){o[e+968+(a*88|0)+84>>2]=3;i=i+1|0;o[t>>2]=i;break}else{c[e+968+(a*88|0)+76>>2]=s-_;o[e+968+(a*88|0)+84>>2]=4;i=i+2|0;o[t>>2]=i;break}}else{o[e+968+(a*88|0)+84>>2]=0;c[e+968+(a*88|0)+72>>2]=0}while(0);if(n[e+968+(a*88|0)+28>>0]|0){i=i+1|0;o[t>>2]=i}if(n[e+968+(a*88|0)+48>>0]|0){i=i+1|0;o[t>>2]=i}a=a+1|0}while((a|0)!=3);return}function fT(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0,Y=0;U=+c[e+48>>2];s=+c[t>>2];z=+c[e+64>>2];S=+c[t+4>>2];Y=+c[e+80>>2];r=+c[t+8>>2];I=+c[e+52>>2];j=+c[e+68>>2];R=+c[e+84>>2];V=+c[e+56>>2];H=+c[e+72>>2];G=+c[e+88>>2];O=+c[t+16>>2];D=+c[t+20>>2];T=+c[t+24>>2];N=+c[t+32>>2];k=+c[t+36>>2];y=+c[t+40>>2];f=+c[e+96>>2];_=+c[e+100>>2];Z=+c[e+104>>2];E=+c[t+48>>2]+(s*f+S*_+r*Z);w=O*f+D*_+T*Z+ +c[t+52>>2];Z=N*f+k*_+y*Z+ +c[t+56>>2];c[e+1236>>2]=U*s+z*S+Y*r;c[e+1240>>2]=s*I+S*j+r*R;c[e+1244>>2]=s*V+S*H+r*G;c[e+1248>>2]=0;c[e+1252>>2]=U*O+z*D+Y*T;c[e+1256>>2]=I*O+j*D+R*T;c[e+1260>>2]=V*O+H*D+G*T;c[e+1264>>2]=0;c[e+1268>>2]=U*N+z*k+Y*y;c[e+1272>>2]=I*N+j*k+R*y;c[e+1276>>2]=V*N+H*k+G*y;c[e+1280>>2]=0;c[e+1284>>2]=E;c[e+1288>>2]=w;c[e+1292>>2]=Z;c[e+1296>>2]=0;Z=+c[e+112>>2];w=+c[i>>2];E=+c[e+128>>2];y=+c[i+4>>2];G=+c[e+144>>2];k=+c[i+8>>2];H=+c[e+116>>2];N=+c[e+132>>2];V=+c[e+148>>2];R=+c[e+120>>2];j=+c[e+136>>2];I=+c[e+152>>2];Y=+c[i+16>>2];z=+c[i+20>>2];U=+c[i+24>>2];T=+c[i+32>>2];D=+c[i+36>>2];O=+c[i+40>>2];r=+c[e+160>>2];S=+c[e+164>>2];s=+c[e+168>>2];_=+c[i+48>>2]+(w*r+y*S+k*s);f=Y*r+z*S+U*s+ +c[i+52>>2];s=T*r+D*S+O*s+ +c[i+56>>2];c[e+1300>>2]=Z*w+E*y+G*k;c[e+1304>>2]=w*H+y*N+k*V;c[e+1308>>2]=w*R+y*j+k*I;c[e+1312>>2]=0;c[e+1316>>2]=Z*Y+E*z+G*U;c[e+1320>>2]=H*Y+N*z+V*U;c[e+1324>>2]=R*Y+j*z+I*U;c[e+1328>>2]=0;c[e+1332>>2]=Z*T+E*D+G*O;c[e+1336>>2]=H*T+N*D+V*O;c[e+1340>>2]=R*T+j*D+I*O;c[e+1344>>2]=0;c[e+1348>>2]=_;c[e+1352>>2]=f;c[e+1356>>2]=s;c[e+1360>>2]=0;_=_-+c[e+1284>>2];f=f-+c[e+1288>>2];s=s-+c[e+1292>>2];V=+c[e+1256>>2];N=+c[e+1276>>2];H=+c[e+1260>>2];G=+c[e+1272>>2];E=+c[e+1268>>2];Z=+c[e+1252>>2];U=+c[e+1236>>2];z=+c[e+1240>>2];Y=+c[e+1244>>2];k=1/((V*N-H*G)*U+z*(H*E-N*Z)+(G*Z-V*E)*Y);y=(V*N-H*G)*k;w=(H*E-N*Z)*k;S=(G*Z-V*E)*k;r=s*((H*z-V*Y)*k)+(_*y+f*((G*Y-N*z)*k));a=s*((Z*Y-H*U)*k)+(_*w+f*((N*U-E*Y)*k));f=s*((V*U-Z*z)*k)+(_*S+f*((E*z-G*U)*k));c[e+1428>>2]=r;c[e+1432>>2]=a;c[e+1436>>2]=f;c[e+1440>>2]=0;c[e+940>>2]=r;_=+c[e+680>>2];s=+c[e+696>>2];do if(!(_>s)){c[e+908>>2]=r-_;if(_==s){o[e+956>>2]=3;break}else{c[e+924>>2]=r-s;o[e+956>>2]=4;break}}else{c[e+908>>2]=0;o[e+956>>2]=0}while(0);c[e+944>>2]=a;r=+c[e+684>>2];_=+c[e+700>>2];do if(!(r>_)){c[e+912>>2]=a-r;if(r==_){o[e+960>>2]=3;break}else{c[e+928>>2]=a-_;o[e+960>>2]=4;break}}else{c[e+912>>2]=0;o[e+960>>2]=0}while(0);c[e+948>>2]=f;r=+c[e+688>>2];_=+c[e+704>>2];do if(!(r>_)){c[e+916>>2]=f-r;if(r==_){o[e+964>>2]=3;break}else{c[e+932>>2]=f-_;o[e+964>>2]=4;break}}else{c[e+916>>2]=0;o[e+964>>2]=0}while(0);M=+c[e+1300>>2];P=+c[e+1316>>2];W=+c[e+1332>>2];v=W*((H*z-V*Y)*k)+(M*y+P*((G*Y-N*z)*k));B=+c[e+1304>>2];A=+c[e+1320>>2];F=+c[e+1336>>2];C=y*B+(G*Y-N*z)*k*A+(H*z-V*Y)*k*F;L=+c[e+1308>>2];x=+c[e+1324>>2];f=y*L+(G*Y-N*z)*k*x+(H*z-V*Y)*k*(R*T+j*D+I*O);y=W*((Z*Y-H*U)*k)+(M*w+P*((N*U-E*Y)*k));g=B*w+(N*U-E*Y)*k*A+(Z*Y-H*U)*k*F;_=w*L+(N*U-E*Y)*k*x+(Z*Y-H*U)*k*(R*T+j*D+I*O);s=W*((V*U-Z*z)*k)+(M*S+P*((E*z-G*U)*k));a=B*S+(E*z-G*U)*k*A+(V*U-Z*z)*k*F;r=S*L+(E*z-G*U)*k*x+(V*U-Z*z)*k*(R*T+j*D+I*O);switch(o[e+1232>>2]|0){case 0:{do if(s<1)if(s>-1){c[e+1364>>2]=+q(+-a,+r);z=s<-1?-1:s;c[e+1368>>2]=+K(+(z>1?1:z));c[e+1372>>2]=+q(+-y,+v);break}else{c[e+1364>>2]=-+q(+C,+g);c[e+1368>>2]=-1.5707963705062866;c[e+1372>>2]=0;break}else{c[e+1364>>2]=+q(+C,+g);c[e+1368>>2]=1.5707963705062866;c[e+1372>>2]=0}while(0);c[e+1396>>2]=W*H-P*N;c[e+1400>>2]=M*N-W*Y;c[e+1404>>2]=P*Y-M*H;c[e+1408>>2]=0;c[e+1380>>2]=N*(M*N-W*Y)-H*(P*Y-M*H);c[e+1384>>2]=Y*(P*Y-M*H)-N*(W*H-P*N);c[e+1388>>2]=H*(W*H-P*N)-Y*(M*N-W*Y);c[e+1392>>2]=0;c[e+1412>>2]=P*(P*Y-M*H)-W*(M*N-W*Y);c[e+1416>>2]=W*(W*H-P*N)-M*(P*Y-M*H);c[e+1420>>2]=M*(M*N-W*Y)-P*(W*H-P*N);c[e+1424>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=N*(M*N-W*Y)-H*(P*Y-M*H);a=Y*(P*Y-M*H)-N*(W*H-P*N);f=H*(W*H-P*N)-Y*(M*N-W*Y);y=W*H-P*N;g=M*N-W*Y;v=P*Y-M*H;C=P*(P*Y-M*H)-W*(M*N-W*Y);_=W*(W*H-P*N)-M*(P*Y-M*H);r=M*(M*N-W*Y)-P*(W*H-P*N);break}case 1:{do if(y<1)if(y>-1){c[e+1364>>2]=+q(+_,+g);c[e+1368>>2]=+q(+s,+v);Y=-y<-1?-1:-y;c[e+1372>>2]=+K(+(Y>1?1:Y));break}else{c[e+1364>>2]=-+q(+-f,+r);c[e+1368>>2]=0;c[e+1372>>2]=1.5707963705062866;break}else{c[e+1364>>2]=+q(+-f,+r);c[e+1368>>2]=0;c[e+1372>>2]=-1.5707963705062866}while(0);c[e+1412>>2]=P*G-W*V;c[e+1416>>2]=W*z-M*G;c[e+1420>>2]=M*V-P*z;c[e+1424>>2]=0;c[e+1380>>2]=V*(M*V-P*z)-G*(W*z-M*G);c[e+1384>>2]=G*(P*G-W*V)-z*(M*V-P*z);c[e+1388>>2]=z*(W*z-M*G)-V*(P*G-W*V);c[e+1392>>2]=0;c[e+1396>>2]=W*(W*z-M*G)-P*(M*V-P*z);c[e+1400>>2]=M*(M*V-P*z)-W*(P*G-W*V);\nc[e+1404>>2]=P*(P*G-W*V)-M*(W*z-M*G);c[e+1408>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=V*(M*V-P*z)-G*(W*z-M*G);a=G*(P*G-W*V)-z*(M*V-P*z);f=z*(W*z-M*G)-V*(P*G-W*V);y=W*(W*z-M*G)-P*(M*V-P*z);g=M*(M*V-P*z)-W*(P*G-W*V);v=P*(P*G-W*V)-M*(W*z-M*G);C=P*G-W*V;_=W*z-M*G;r=M*V-P*z;break}case 2:{do if(a<1)if(a>-1){z=-a<-1?-1:-a;c[e+1364>>2]=+K(+(z>1?1:z));c[e+1368>>2]=+q(+s,+r);c[e+1372>>2]=+q(+C,+g);break}else{c[e+1364>>2]=1.5707963705062866;c[e+1368>>2]=-+q(+-y,+v);c[e+1372>>2]=0;break}else{c[e+1364>>2]=-1.5707963705062866;c[e+1368>>2]=+q(+-y,+v);c[e+1372>>2]=0}while(0);c[e+1380>>2]=A*N-F*H;c[e+1384>>2]=F*Y-B*N;c[e+1388>>2]=B*H-A*Y;c[e+1392>>2]=0;c[e+1396>>2]=H*(B*H-A*Y)-N*(F*Y-B*N);c[e+1400>>2]=N*(A*N-F*H)-Y*(B*H-A*Y);c[e+1404>>2]=Y*(F*Y-B*N)-H*(A*N-F*H);c[e+1408>>2]=0;c[e+1412>>2]=F*(F*Y-B*N)-A*(B*H-A*Y);c[e+1416>>2]=B*(B*H-A*Y)-F*(A*N-F*H);c[e+1420>>2]=A*(A*N-F*H)-B*(F*Y-B*N);c[e+1424>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=A*N-F*H;a=F*Y-B*N;f=B*H-A*Y;y=H*(B*H-A*Y)-N*(F*Y-B*N);g=N*(A*N-F*H)-Y*(B*H-A*Y);v=Y*(F*Y-B*N)-H*(A*N-F*H);C=F*(F*Y-B*N)-A*(B*H-A*Y);_=B*(B*H-A*Y)-F*(A*N-F*H);r=A*(A*N-F*H)-B*(F*Y-B*N);break}case 3:{do if(C<1)if(C>-1){c[e+1364>>2]=+q(+-a,+g);c[e+1368>>2]=+q(+-f,+v);Y=C<-1?-1:C;c[e+1372>>2]=+K(+(Y>1?1:Y));break}else{c[e+1364>>2]=0;c[e+1368>>2]=-+q(+_,+r);c[e+1372>>2]=-1.5707963705062866;break}else{c[e+1364>>2]=0;c[e+1368>>2]=+q(+_,+r);c[e+1372>>2]=1.5707963705062866}while(0);c[e+1412>>2]=Z*F-E*A;c[e+1416>>2]=E*B-U*F;c[e+1420>>2]=U*A-Z*B;c[e+1424>>2]=0;c[e+1380>>2]=A*(U*A-Z*B)-F*(E*B-U*F);c[e+1384>>2]=F*(Z*F-E*A)-B*(U*A-Z*B);c[e+1388>>2]=B*(E*B-U*F)-A*(Z*F-E*A);c[e+1392>>2]=0;c[e+1396>>2]=E*(E*B-U*F)-Z*(U*A-Z*B);c[e+1400>>2]=U*(U*A-Z*B)-E*(Z*F-E*A);c[e+1404>>2]=Z*(Z*F-E*A)-U*(E*B-U*F);c[e+1408>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=A*(U*A-Z*B)-F*(E*B-U*F);a=F*(Z*F-E*A)-B*(U*A-Z*B);f=B*(E*B-U*F)-A*(Z*F-E*A);y=E*(E*B-U*F)-Z*(U*A-Z*B);g=U*(U*A-Z*B)-E*(Z*F-E*A);v=Z*(Z*F-E*A)-U*(E*B-U*F);C=Z*F-E*A;_=E*B-U*F;r=U*A-Z*B;break}case 4:{do if(_<1)if(_>-1){Y=_<-1?-1:_;c[e+1364>>2]=+K(+(Y>1?1:Y));c[e+1368>>2]=+q(+-f,+r);c[e+1372>>2]=+q(+-y,+g);break}else{c[e+1364>>2]=-1.5707963705062866;c[e+1368>>2]=0;c[e+1372>>2]=-+q(+s,+v);break}else{c[e+1364>>2]=1.5707963705062866;c[e+1368>>2]=0;c[e+1372>>2]=+q(+s,+v)}while(0);Y=V*(R*T+j*D+I*O)-G*x;r=G*L-z*(R*T+j*D+I*O);c[e+1380>>2]=Y;c[e+1384>>2]=r;c[e+1388>>2]=z*x-V*L;c[e+1392>>2]=0;y=x*(z*x-V*L)-(R*T+j*D+I*O)*r;g=(R*T+j*D+I*O)*Y-L*(z*x-V*L);c[e+1396>>2]=y;c[e+1400>>2]=g;c[e+1404>>2]=L*r-x*Y;c[e+1408>>2]=0;c[e+1412>>2]=G*r-V*(z*x-V*L);c[e+1416>>2]=z*(z*x-V*L)-G*Y;c[e+1420>>2]=V*Y-z*r;c[e+1424>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=Y;a=r;f=z*x-V*L;v=L*r-x*Y;C=G*r-V*(z*x-V*L);_=z*(z*x-V*L)-G*Y;r=V*Y-z*r;break}case 5:{do if(f<1)if(f>-1){c[e+1364>>2]=+q(+_,+r);Y=-f<-1?-1:-f;c[e+1368>>2]=+K(+(Y>1?1:Y));c[e+1372>>2]=+q(+C,+v);break}else{c[e+1364>>2]=0;c[e+1368>>2]=1.5707963705062866;c[e+1372>>2]=-+q(+y,+s);break}else{c[e+1364>>2]=0;c[e+1368>>2]=-1.5707963705062866;c[e+1372>>2]=+q(+-y,+-s)}while(0);r=E*x-Z*(R*T+j*D+I*O);Y=U*(R*T+j*D+I*O)-E*L;c[e+1396>>2]=r;c[e+1400>>2]=Y;c[e+1404>>2]=Z*L-U*x;c[e+1408>>2]=0;s=(R*T+j*D+I*O)*Y-x*(Z*L-U*x);a=L*(Z*L-U*x)-(R*T+j*D+I*O)*r;c[e+1380>>2]=s;c[e+1384>>2]=a;c[e+1388>>2]=x*r-L*Y;c[e+1392>>2]=0;c[e+1412>>2]=Z*(Z*L-U*x)-E*Y;c[e+1416>>2]=E*r-U*(Z*L-U*x);c[e+1420>>2]=U*Y-Z*r;c[e+1424>>2]=0;t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;f=x*r-L*Y;y=r;g=Y;v=Z*L-U*x;C=Z*(Z*L-U*x)-E*Y;_=E*r-U*(Z*L-U*x);r=U*Y-Z*r;break}default:{t=e+1380|0;i=e+1384|0;p=e+1388|0;l=e+1396|0;u=e+1400|0;b=e+1404|0;d=e+1412|0;h=e+1416|0;m=e+1420|0;s=+c[e+1380>>2];a=+c[e+1384>>2];f=+c[e+1388>>2];y=+c[e+1396>>2];g=+c[e+1400>>2];v=+c[e+1404>>2];C=+c[e+1412>>2];_=+c[e+1416>>2];r=+c[e+1420>>2]}}z=1/+X(+(s*s+a*a+f*f));c[t>>2]=s*z;c[i>>2]=a*z;c[p>>2]=f*z;z=1/+X(+(y*y+g*g+v*v));c[l>>2]=y*z;c[u>>2]=g*z;c[b>>2]=v*z;z=1/+X(+(C*C+_*_+r*r));c[d>>2]=C*z;c[h>>2]=_*z;c[m>>2]=r*z;z=+c[(o[e+28>>2]|0)+368>>2];Y=+c[(o[e+32>>2]|0)+368>>2];n[e+1452>>0]=(z<1.1920928955078125e-7|Y<1.1920928955078125e-7)&1;Y=z+Y>0?Y/(z+Y):.5;c[e+1444>>2]=Y;c[e+1448>>2]=1-Y;return}function pT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0;d=p;p=p+112|0;l=o[e+28>>2]|0;u=o[e+32>>2]|0;o[d+16>>2]=o[1836];o[d+16+4>>2]=o[1837];o[d+16+8>>2]=o[1838];switch(o[e+1232>>2]|0){case 0:{o[d+16>>2]=0;o[d+16+4>>2]=1;o[d+16+8>>2]=2;i=0;break}case 1:{o[d+16>>2]=0;o[d+16+4>>2]=2;o[d+16+8>>2]=1;i=0;break}case 2:{o[d+16>>2]=1;o[d+16+4>>2]=0;o[d+16+8>>2]=2;i=1;break}case 3:{o[d+16>>2]=1;o[d+16+4>>2]=2;o[d+16+8>>2]=0;i=1;break}case 4:{o[d+16>>2]=2;o[d+16+4>>2]=0;o[d+16+8>>2]=1;i=2;break}case 5:{o[d+16>>2]=2;o[d+16+4>>2]=1;o[d+16+8>>2]=0;i=2;break}default:i=0}r=0;a=0;while(1){_=e+968+(i*88|0)|0;if(!(((o[e+968+(i*88|0)+84>>2]|0)==0?(n[e+968+(i*88|0)+28>>0]|0)==0:0)?(n[e+968+(i*88|0)+48>>0]|0)==0:0)){s=e+1380+(i<<4)|0;o[d>>2]=o[s>>2];o[d+4>>2]=o[s+4>>2];o[d+8>>2]=o[s+8>>2];o[d+12>>2]=o[s+12>>2];s=o[e+1456>>2]>>(i<<2)+12;if(!(s&1))o[e+968+(i*88|0)+16>>2]=o[o[t+32>>2]>>2];if(!(s&2))o[e+968+(i*88|0)+12>>2]=o[t+4>>2];if(!(s&4))o[e+968+(i*88|0)+24>>2]=o[o[t+32>>2]>>2];if(!(s&8))o[e+968+(i*88|0)+20>>2]=o[t+4>>2];a=(aM(e,_,l+4|0,u+4|0,l+336|0,u+336|0,l+352|0,u+352|0,t,a,d,1,0)|0)+a|0}r=r+1|0;if((r|0)==3)break;i=o[d+16+(r<<2)>>2]|0}c[d+16>>2]=1;c[d+16+4>>2]=-1;c[d+16+8>>2]=0;c[d+16+12>>2]=.20000000298023224;c[d+16+16>>2]=0;c[d+16+20>>2]=.8999999761581421;c[d+16+24>>2]=0;n[d+16+28>>0]=0;c[d+16+32>>2]=0;c[d+16+36>>2]=.10000000149011612;n[d+16+40>>0]=0;c[d+16+44>>2]=0;n[d+16+48>>0]=0;c[d+16+52>>2]=0;n[d+16+56>>0]=0;c[d+16+60>>2]=0;n[d+16+64>>0]=0;f=d+16+68|0;o[f>>2]=0;o[f+4>>2]=0;o[f+8>>2]=0;o[f+12>>2]=0;o[f+16>>2]=0;r=a;a=0;while(1){_=o[e+956+(a<<2)>>2]|0;i=n[e+792+a>>0]|0;s=n[e+798+a>>0]|0;if((_|0)==0&i<<24>>24==0)if(!(s<<24>>24))i=a+1|0;else{i=0;b=27}else b=27;if((b|0)==27){b=0;o[d+16+8>>2]=o[e+712+(a<<2)>>2];o[d+16+84>>2]=_;o[d+16+80>>2]=o[e+940+(a<<2)>>2];o[d+16+72>>2]=o[e+908+(a<<2)>>2];o[d+16+76>>2]=o[e+924+(a<<2)>>2];n[d+16+28>>0]=i;n[d+16+40>>0]=n[e+795+a>>0]|0;o[d+16+44>>2]=o[e+804+(a<<2)>>2];n[d+16+48>>0]=s;o[d+16+52>>2]=o[e+820+(a<<2)>>2];n[d+16+56>>0]=n[e+836+a>>0]|0;o[d+16+60>>2]=o[e+840+(a<<2)>>2];n[d+16+64>>0]=n[e+856+a>>0]|0;o[f>>2]=o[e+860+(a<<2)>>2];o[d+16+4>>2]=o[e+696+(a<<2)>>2];o[d+16>>2]=o[e+680+(a<<2)>>2];o[d+16+36>>2]=o[e+892+(a<<2)>>2];o[d+16+32>>2]=o[e+876+(a<<2)>>2];o[d>>2]=o[e+1236+(a<<2)>>2];o[d+4>>2]=o[e+1252+(a<<2)>>2];o[d+8>>2]=o[e+1268+(a<<2)>>2];c[d+12>>2]=0;_=o[e+1456>>2]>>(a<<2);if(!(_&1))i=o[t+32>>2]|0;else i=e+744+(a<<2)|0;o[d+16+16>>2]=o[i>>2];o[d+16+12>>2]=o[((_&2|0)==0?t+4|0:e+728+(a<<2)|0)>>2];if(!(_&4))i=o[t+32>>2]|0;else i=e+776+(a<<2)|0;o[d+16+24>>2]=o[i>>2];o[d+16+20>>2]=o[((_&8|0)==0?t+4|0:e+760+(a<<2)|0)>>2];i=a+1|0;s=(i|0)==3?0:i;a=(a+2|0)%3|0;_=o[e+968+(s*88|0)+84>>2]|0;switch(_|0){case 2:case 1:{s=1;break}case 3:{h=+c[e+968+(s*88|0)+72>>2];s=h<-.001|h>.001;break}default:if((_|0)==4)if(+c[e+968+(s*88|0)+72>>2]<-.001)s=1;else s=+c[e+968+(s*88|0)+76>>2]>.001;else s=0}switch(o[e+968+(a*88|0)+84>>2]|0){case 2:case 1:{b=42;break}case 3:{h=+c[e+968+(a*88|0)+72>>2];if(h<-.001|h>.001)b=42;else _=1;break}case 4:{if(!(+c[e+968+(a*88|0)+72>>2]<-.001)?!(+c[e+968+(a*88|0)+76>>2]>.001):0)_=1;else b=42;break}default:_=1}if((b|0)==42){b=0;_=0}r=(aM(e,d+16|0,l+4|0,u+4|0,l+336|0,u+336|0,l+352|0,u+352|0,t,r,d,0,s?_:1)|0)+r|0}if((i|0)==3)break;else a=i}p=d;return}function lT(e,t,i){e=e|0;t=t|0;i=+i;var n=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0;a=p;p=p+32|0;u=+c[e+60>>2];m=+c[e+76>>2]-u;l=+c[e+64>>2];d=+c[e+80>>2]-l;f=+c[e+68>>2];y=+c[e+84>>2]-f;b=+c[e+92>>2]-u;h=+c[e+96>>2]-l;_=+c[e+100>>2]-f;s=1/+X(+((m*h-d*b)*(m*h-d*b)+((d*_-y*h)*(d*_-y*h)+(y*b-m*_)*(y*b-m*_))));r=s*(d*_-y*h);_=s*(y*b-m*_);s=(m*h-d*b)*s;f=s*+c[t+8>>2]+(+c[t>>2]*r+ +c[t+4>>2]*_)-(r*u+_*l+s*f);if(!(f>=-i)|!(f<=i)){e=0;p=a;return e|0}n=0;while(1){HP[o[(o[e>>2]|0)+104>>2]&127](e,n,a+16|0,a);u=+c[a+16>>2];y=+c[a>>2]-u;d=+c[a+16+4>>2];b=+c[a+4>>2]-d;l=+c[a+16+8>>2];m=+c[a+8>>2]-l;h=1/+X(+((_*y-r*b)*(_*y-r*b)+((s*b-_*m)*(s*b-_*m)+(r*m-s*y)*(r*m-s*y))));n=n+1|0;if((_*y-r*b)*h*+c[t+8>>2]+(+c[t>>2]*(h*(s*b-_*m))+ +c[t+4>>2]*(h*(r*m-s*y)))-(l*((_*y-r*b)*h)+(u*(h*(s*b-_*m))+d*(h*(r*m-s*y))))<-i){n=0;t=5;break}if((n|0)>=3){n=1;t=5;break}}if((t|0)==5){p=a;return n|0}return 0}function uT(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0;_=+c[e+60>>2];f=+c[e+76>>2]-_;a=+c[e+64>>2];s=+c[e+80>>2]-a;p=+c[e+68>>2];l=+c[e+84>>2]-p;_=+c[e+92>>2]-_;a=+c[e+96>>2]-a;p=+c[e+100>>2]-p;c[i+12>>2]=0;r=1/+X(+((f*a-s*_)*(f*a-s*_)+((s*p-l*a)*(s*p-l*a)+(l*_-f*p)*(l*_-f*p))));c[i>>2]=(s*p-l*a)*r;c[i+4>>2]=(l*_-f*p)*r;c[i+8>>2]=(f*a-s*_)*r;o[n>>2]=o[e+60>>2];o[n+4>>2]=o[e+60+4>>2];o[n+8>>2]=o[e+60+8>>2];o[n+12>>2]=o[e+60+12>>2];return}function bT(e){e=e|0;var t=0;o[e>>2]=3720;o[e+12>>2]=3748;t=o[e+60>>2]|0;aP[o[(o[t>>2]|0)+20>>2]&127](t,o[e+76>>2]|0);t=o[e+60>>2]|0;aP[o[(o[t>>2]|0)+16>>2]&127](t,o[e+76>>2]|0);qa(e);return}function dT(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0;a=p;p=p+64|0;f=(n[e+8>>0]|0)!=0;s=f?i:t;t=f?t:i;i=o[t+4>>2]|0;if(((o[i+4>>2]|0)+-21|0)>>>0>=9){p=a;return}if((o[(o[s+4>>2]|0)+4>>2]|0)>=20){p=a;return}l=+wP[o[(o[i>>2]|0)+48>>2]&15](i);o[_+4>>2]=o[e+76>>2];o[e+16>>2]=s;o[e+20>>2]=t;o[e+64>>2]=r;c[e+68>>2]=l;o[e+56>>2]=_;f=o[t+12>>2]|0;I=+c[f>>2];j=+c[f+16>>2];R=+c[f+32>>2];S=+c[f+4>>2];k=+c[f+20>>2];w=+c[f+36>>2];y=+c[f+8>>2];h=+c[f+24>>2];b=+c[f+40>>2];C=-+c[f+48>>2];v=-+c[f+52>>2];g=-+c[f+56>>2];f=o[s+12>>2]|0;B=+c[f>>2];W=+c[f+16>>2];P=+c[f+32>>2];M=+c[f+4>>2];x=+c[f+20>>2];L=+c[f+36>>2];O=+c[f+8>>2];D=+c[f+24>>2];T=+c[f+40>>2];m=+c[f+48>>2];d=+c[f+52>>2];u=+c[f+56>>2];c[a>>2]=I*B+j*W+R*P;c[a+4>>2]=I*M+j*x+R*L;c[a+8>>2]=I*O+j*D+R*T;c[a+12>>2]=0;c[a+16>>2]=S*B+k*W+w*P;c[a+20>>2]=S*M+k*x+w*L;c[a+24>>2]=S*O+k*D+w*T;c[a+28>>2]=0;c[a+32>>2]=y*B+h*W+b*P;c[a+36>>2]=y*M+h*x+b*L;c[a+40>>2]=y*O+h*D+b*T;c[a+44>>2]=0;c[a+48>>2]=I*C+j*v+R*g+(I*m+j*d+R*u);c[a+52>>2]=S*C+k*v+w*g+(S*m+k*d+w*u);c[a+56>>2]=y*C+h*v+b*g+(y*m+h*d+b*u);c[a+60>>2]=0;f=o[(o[e+16>>2]|0)+4>>2]|0;HP[o[(o[f>>2]|0)+8>>2]&127](f,a,e+24|0,e+40|0);c[e+40>>2]=+c[e+40>>2]+l;c[e+44>>2]=+c[e+44>>2]+l;c[e+48>>2]=+c[e+48>>2]+l;c[e+24>>2]=+c[e+24>>2]-l;c[e+28>>2]=+c[e+28>>2]-l;c[e+32>>2]=+c[e+32>>2]-l;f=o[e+76>>2]|0;r=o[t+8>>2]|0;o[f+740>>2]=o[s+8>>2];o[f+744>>2]=r;HP[o[(o[i>>2]|0)+64>>2]&127](i,e+12|0,e+24|0,e+40|0);i=o[_+4>>2]|0;do if(o[i+748>>2]|0){s=o[i+740>>2]|0;r=o[(o[_+8>>2]|0)+8>>2]|0;t=o[(o[_+12>>2]|0)+8>>2]|0;if((s|0)==(r|0)){lC(i,s+4|0,t+4|0);break}else{lC(i,t+4|0,r+4|0);break}}while(0);o[e+16>>2]=0;o[e+20>>2]=0;p=a;return}function hT(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0;Y=p;p=p+240|0;r=(n[e+8>>0]|0)!=0;_=r?i:t;r=r?t:i;H=+c[_+116>>2]-+c[_+52>>2];Z=+c[_+120>>2]-+c[_+56>>2];U=+c[_+124>>2]-+c[_+60>>2];z=+c[_+256>>2];if(H*H+Z*Z+U*U<z*z){K=1;p=Y;return+K}L=+c[r+4>>2];x=+c[r+20>>2];M=+c[r+36>>2];P=+c[r+8>>2];W=+c[r+24>>2];B=+c[r+40>>2];A=+c[r+12>>2];F=+c[r+28>>2];G=+c[r+44>>2];a=-+c[r+52>>2];f=-+c[r+56>>2];l=-+c[r+60>>2];E=+c[_+4>>2];V=+c[_+20>>2];N=+c[_+36>>2];X=+c[_+8>>2];H=+c[_+24>>2];Z=+c[_+40>>2];U=+c[_+12>>2];z=+c[_+28>>2];d=+c[_+44>>2];v=+c[_+52>>2];g=+c[_+56>>2];y=+c[_+60>>2];h=L*a+x*f+M*l+(L*v+x*g+M*y);m=P*a+W*f+B*l+(P*v+W*g+B*y);y=A*a+F*f+G*l+(A*v+F*g+G*y);g=+c[_+68>>2];v=+c[_+84>>2];C=+c[_+100>>2];w=+c[_+72>>2];k=+c[_+88>>2];S=+c[_+104>>2];R=+c[_+76>>2];j=+c[_+92>>2];I=+c[_+108>>2];u=+c[_+116>>2];b=+c[_+120>>2];O=+c[_+124>>2];T=L*a+x*f+M*l+(L*u+x*b+M*O);D=P*a+W*f+B*l+(P*u+W*b+B*O);O=A*a+F*f+G*l+(A*u+F*b+G*O);r=o[r+192>>2]|0;if(((o[r+4>>2]|0)+-21|0)>>>0>=9){K=1;p=Y;return+K}c[Y+224>>2]=h;c[Y+224+4>>2]=m;c[Y+224+8>>2]=y;c[Y+224+12>>2]=0;if(T<h){c[Y+224>>2]=T;s=T}else s=h;if(D<m){c[Y+224+4>>2]=D;a=D}else a=m;if(O<y){c[Y+224+8>>2]=O;f=O}else f=y;c[Y+208>>2]=h;c[Y+208+4>>2]=m;c[Y+208+8>>2]=y;c[Y+208+12>>2]=0;if(h<T){c[Y+208>>2]=T;l=T}else l=h;if(m<D){c[Y+208+4>>2]=D;u=D}else u=m;if(y<O){c[Y+208+8>>2]=O;b=O}else b=y;Q=+c[_+252>>2];c[Y+224>>2]=s-Q;c[Y+224+4>>2]=a-Q;c[Y+224+8>>2]=f-Q;c[Y+208>>2]=Q+l;c[Y+208+4>>2]=Q+u;c[Y+208+8>>2]=Q+b;o[Y>>2]=3904;c[Y+4>>2]=L*E+x*V+M*N;c[Y+8>>2]=L*X+x*H+M*Z;c[Y+12>>2]=L*U+x*z+M*d;c[Y+16>>2]=0;c[Y+20>>2]=P*E+W*V+B*N;c[Y+24>>2]=P*X+W*H+B*Z;c[Y+28>>2]=P*U+W*z+B*d;c[Y+32>>2]=0;c[Y+36>>2]=A*E+F*V+G*N;c[Y+40>>2]=A*X+F*H+G*Z;c[Y+44>>2]=A*U+F*z+G*d;c[Y+48>>2]=0;c[Y+52>>2]=h;c[Y+56>>2]=m;c[Y+60>>2]=y;c[Y+64>>2]=0;c[Y+68>>2]=L*g+x*v+M*C;c[Y+72>>2]=L*w+x*k+M*S;c[Y+76>>2]=L*R+x*j+M*I;c[Y+80>>2]=0;c[Y+84>>2]=P*g+W*v+B*C;c[Y+88>>2]=P*w+W*k+B*S;c[Y+92>>2]=P*R+W*j+B*I;c[Y+96>>2]=0;c[Y+100>>2]=A*g+F*v+G*C;c[Y+104>>2]=A*w+F*k+G*S;c[Y+108>>2]=A*R+F*j+G*I;c[Y+112>>2]=0;c[Y+116>>2]=T;c[Y+120>>2]=D;c[Y+124>>2]=O;c[Y+128>>2]=0;c[Y+196>>2]=Q;o[Y+200>>2]=o[_+248>>2];if(r|0?(HP[o[(o[r>>2]|0)+64>>2]&127](r,Y,Y+224|0,Y+208|0),K=+c[Y+200>>2],K<+c[_+248>>2]):0){c[_+248>>2]=K;Q=K;p=Y;return+Q}Q=1;p=Y;return+Q}function mT(e){e=e|0;qa(e);return}function yT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0;r=p;p=p+784|0;o[r+720>>2]=1065353216;o[r+720+4>>2]=0;o[r+720+4+4>>2]=0;o[r+720+4+8>>2]=0;o[r+720+4+12>>2]=0;o[r+720+20>>2]=1065353216;o[r+720+24>>2]=0;o[r+720+24+4>>2]=0;o[r+720+24+8>>2]=0;o[r+720+24+12>>2]=0;o[r+720+40>>2]=1065353216;i=r+720+44|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;o[i+12>>2]=0;o[i+16>>2]=0;o[r+544>>2]=3316;o[r+544+168>>2]=0;c[r+544+172>>2]=0;o[r+544+164>>2]=o[e+200>>2];i=o[e+196>>2]|0;o[r+488+8>>2]=0;o[r+488+12>>2]=-1;o[r+488+16>>2]=1065353216;o[r+488+20>>2]=1065353216;o[r+488+24>>2]=1065353216;c[r+488+28>>2]=0;o[r+488>>2]=6380;o[r+488+4>>2]=8;o[r+488+32>>2]=i;o[r+488+48>>2]=i;o[r+376+8>>2]=0;o[r+376+12>>2]=-1;o[r+376+16>>2]=1065353216;o[r+376+20>>2]=1065353216;o[r+376+24>>2]=1065353216;c[r+376+28>>2]=0;c[r+376+48>>2]=.03999999910593033;o[r+376+56>>2]=0;o[r+376>>2]=3768;o[r+376+4>>2]=1;o[r+376+60>>2]=o[t>>2];o[r+376+60+4>>2]=o[t+4>>2];o[r+376+60+8>>2]=o[t+8>>2];o[r+376+60+12>>2]=o[t+12>>2];o[r+376+76>>2]=o[t+16>>2];o[r+376+76+4>>2]=o[t+16+4>>2];o[r+376+76+8>>2]=o[t+16+8>>2];o[r+376+76+12>>2]=o[t+16+12>>2];o[r+376+92>>2]=o[t+32>>2];o[r+376+92+4>>2]=o[t+32+4>>2];o[r+376+92+8>>2]=o[t+32+8>>2];o[r+376+92+12>>2]=o[t+32+12>>2];c[r+16+308>>2]=9999999747378752e-20;n[r+16+332>>0]=0;o[r>>2]=7024;o[r+4>>2]=r+16;o[r+8>>2]=r+488;o[r+12>>2]=r+376;if(gC(r,e+4|0,e+68|0,r+720|0,r+720|0,r+544|0)|0?(_=+c[r+544+164>>2],+c[e+200>>2]>_):0)c[e+200>>2]=_;o[r+376>>2]=6248;i=o[r+376+56>>2]|0;if(!i){p=r;return}_P[o[o[i>>2]>>2]&255](i);i=o[r+376+56>>2]|0;if(!i){p=r;return}o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);p=r;return}function gT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+76>>2]|0;if(!i)return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+76>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function vT(e){e=e|0;return}function CT(e){e=e|0;qa(e);return}function wT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0;r=o[t>>2]|0;r=DP[o[(o[r>>2]|0)+56>>2]&31](r,36)|0;_=o[t+4>>2]|0;a=o[e+12>>2]|0;s=o[e+8>>2]|0;i=o[e+16>>2]|0;e=o[e+20>>2]|0;o[r+4>>2]=o[t>>2];o[r>>2]=3944;o[r+8>>2]=a;o[r+12>>2]=s;n[r+16>>0]=0;o[r+20>>2]=_;n[r+24>>0]=0;o[r+28>>2]=i;o[r+32>>2]=e;return r|0}function kT(e){e=e|0;var t=0;o[e>>2]=3944;if(!(n[e+16>>0]|0))return;t=o[e+20>>2]|0;if(!t)return;e=o[e+4>>2]|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function ST(e){e=e|0;var t=0,i=0;o[e>>2]=3944;if(!(n[e+16>>0]|0)){qa(e);return}t=o[e+20>>2]|0;if(!t){qa(e);return}i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+16>>2]&127](i,t);qa(e);return}function RT(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0,de=0,he=0,me=0,ye=0,ge=0,ve=0;ye=p;p=p+688|0;a=o[e+20>>2]|0;if(!a){a=o[e+4>>2]|0;a=gP[o[(o[a>>2]|0)+12>>2]&63](a,o[t+8>>2]|0,o[i+8>>2]|0)|0;o[e+20>>2]=a;n[e+16>>0]=1}o[_+4>>2]=a;de=o[t+4>>2]|0;he=o[i+4>>2]|0;s=o[de+4>>2]|0;f=o[he+4>>2]|0;if((s|0)==10&(f|0)==10){F=+c[a+752>>2];ue=o[de+56>>2]|0;y=+c[de+32+(ue<<2)>>2];A=+c[de+32+(((ue+2|0)%3|0)<<2)>>2];me=o[he+56>>2]|0;g=+c[he+32+(me<<2)>>2];W=+c[he+32+(((me+2|0)%3|0)<<2)>>2];e=o[t+12>>2]|0;s=o[i+12>>2]|0;T=+c[e+(ue<<2)>>2];L=+c[e+16+(ue<<2)>>2];D=+c[e+32+(ue<<2)>>2];h=+c[s+(me<<2)>>2];m=+c[s+16+(me<<2)>>2];k=+c[s+32+(me<<2)>>2];S=+c[s+48>>2]-+c[e+48>>2];R=+c[s+52>>2]-+c[e+52>>2];I=+c[s+56>>2]-+c[e+56>>2];b=1-(T*h+L*m+D*k)*(T*h+L*m+D*k);if(!(b==0)){b=(T*S+L*R+D*I-(T*h+L*m+D*k)*(h*S+m*R+k*I))/b;if(!(b<-y)){if(b>y)b=y}else b=-y}else b=0;d=(T*h+L*m+D*k)*b-(h*S+m*R+k*I);if(d<-g){b=(T*h+L*m+D*k)*-g+(T*S+L*R+D*I);if(!(b<-y))if(b>y){b=y;d=-g}else d=-g;else{b=-y;d=-g}}else if(d>g){b=g*(T*h+L*m+D*k)+(T*S+L*R+D*I);if(!(b<-y))if(b>y){b=y;d=g}else d=g;else{b=-y;d=g}}C=h*d;v=m*d;g=k*d;d=C+(S-T*b);m=v+(R-L*b);b=g+(I-D*b);y=+X(+(b*b+(d*d+m*m)));if(!(y-A-W>F)){do if(b*b+(d*d+m*m)<=1.4210854715202004e-14)if(+N(+D)>.7071067690849304){b=1/+X(+(L*L+D*D));c[ye+280>>2]=0;c[ye+280+4>>2]=-(D*b);c[ye+280+8>>2]=L*b;h=0;d=-(D*b);b=L*b;break}else{d=1/+X(+(T*T+L*L));c[ye+280>>2]=-(L*d);c[ye+280+4>>2]=T*d;c[ye+280+8>>2]=0;h=-(L*d);d=T*d;b=0;break}else{c[ye+280>>2]=d*-(1/y);c[ye+280+4>>2]=m*-(1/y);c[ye+280+8>>2]=b*-(1/y);c[ye+280+12>>2]=0;h=d*-(1/y);d=m*-(1/y);b=b*-(1/y)}while(0);le=W*d+(v+ +c[s+52>>2]);be=W*b+(g+ +c[s+56>>2]);c[ye+264>>2]=W*h+(C+ +c[s+48>>2]);c[ye+264+4>>2]=le;c[ye+264+8>>2]=be;c[ye+264+12>>2]=0}if(y-A-W<F){GP[o[(o[_>>2]|0)+16>>2]&15](_,ye+280|0,ye+264|0,y-A-W);a=o[_+4>>2]|0}if(!(o[a+748>>2]|0)){p=ye;return}f=o[a+740>>2]|0;l=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((f|0)==(l|0)){lC(a,f+4|0,s+4|0);p=ye;return}else{lC(a,s+4|0,l+4|0);p=ye;return}}c[ye+128+128>>2]=0xde0b6b000000000;O=o[e+8>>2]|0;w=o[e+12>>2]|0;o[ye+48>>2]=6928;o[ye+48+4>>2]=0;o[ye+48+8>>2]=1065353216;o[ye+48+12>>2]=0;c[ye+48+16>>2]=0;o[ye+48+20>>2]=w;o[ye+48+24>>2]=O;o[ye+48+28>>2]=de;o[ye+48+32>>2]=he;o[ye+48+36>>2]=s;o[ye+48+40>>2]=f;c[ye+48+44>>2]=+wP[o[(o[de>>2]|0)+48>>2]&15](de);c[ye+48+48>>2]=+wP[o[(o[he>>2]|0)+48>>2]&15](he);n[ye+48+52>>0]=0;o[ye+48+60>>2]=-1;o[ye+48+72>>2]=1;o[ye+48+76>>2]=1;o[ye+48+28>>2]=de;o[ye+48+32>>2]=he;le=+wP[o[(o[de>>2]|0)+48>>2]&15](de);be=+wP[o[(o[he>>2]|0)+48>>2]&15](he);be=le+be+ +c[(o[e+20>>2]|0)+752>>2];c[ye+128+128>>2]=be*be;O=o[t+12>>2]|0;o[ye+128>>2]=o[O>>2];o[ye+128+4>>2]=o[O+4>>2];o[ye+128+8>>2]=o[O+8>>2];o[ye+128+12>>2]=o[O+12>>2];f=ye+128+16|0;o[f>>2]=o[O+16>>2];o[f+4>>2]=o[O+16+4>>2];o[f+8>>2]=o[O+16+8>>2];o[f+12>>2]=o[O+16+12>>2];w=ye+128+32|0;o[w>>2]=o[O+32>>2];o[w+4>>2]=o[O+32+4>>2];o[w+8>>2]=o[O+32+8>>2];o[w+12>>2]=o[O+32+12>>2];j=ye+128+48|0;o[j>>2]=o[O+48>>2];o[j+4>>2]=o[O+48+4>>2];o[j+8>>2]=o[O+48+8>>2];o[j+12>>2]=o[O+48+12>>2];O=ye+128+64|0;s=o[i+12>>2]|0;o[O>>2]=o[s>>2];o[O+4>>2]=o[s+4>>2];o[O+8>>2]=o[s+8>>2];o[O+12>>2]=o[s+12>>2];x=ye+128+80|0;o[x>>2]=o[s+16>>2];o[x+4>>2]=o[s+16+4>>2];o[x+8>>2]=o[s+16+8>>2];o[x+12>>2]=o[s+16+12>>2];M=ye+128+96|0;o[M>>2]=o[s+32>>2];o[M+4>>2]=o[s+32+4>>2];o[M+8>>2]=o[s+32+8>>2];o[M+12>>2]=o[s+32+12>>2];P=ye+128+112|0;o[P>>2]=o[s+48>>2];o[P+4>>2]=o[s+48+4>>2];o[P+8>>2]=o[s+48+8>>2];o[P+12>>2]=o[s+48+12>>2];s=o[de+4>>2]|0;if((s|0)<7?(l=o[he+4>>2]|0,(l|0)<7):0){o[ye+40>>2]=3972;if(!s){s=l;d=0}else{d=+wP[o[(o[de>>2]|0)+48>>2]&15](de);s=o[he+4>>2]|0}if(!s)b=0;else b=+wP[o[(o[he>>2]|0)+48>>2]&15](he);o[ye>>2]=4e3;o[ye+4>>2]=_;c[ye+24>>2]=d;c[ye+28>>2]=b;n[ye+36>>0]=0;ae=o[de+56>>2]|0;e:do if(ae|0){ce=o[he+56>>2]|0;do if(!ce){if((o[he+4>>2]|0)!=1)break e;j=ye+624+16|0;n[j>>0]=1;O=ye+624+12|0;o[O>>2]=0;w=ye+624+4|0;o[w>>2]=0;l=ye+624+8|0;o[l>>2]=0;s=o[i+12>>2]|0;le=+c[he+60>>2];be=+c[he+60+4>>2];h=+c[he+60+8>>2];b=le*+c[s>>2]+be*+c[s+4>>2]+h*+c[s+8>>2]+ +c[s+48>>2];d=le*+c[s+16>>2]+be*+c[s+20>>2]+h*+c[s+24>>2]+ +c[s+52>>2];h=le*+c[s+32>>2]+be*+c[s+36>>2]+h*+c[s+40>>2]+ +c[s+56>>2];o[5637]=(o[5637]|0)+1;s=Qa(35)|0;if(!s)a=0;else{o[(s+4+15&-16)+-4>>2]=s;a=s+4+15&-16}s=o[O>>2]|0;if(!s)s=0;else{o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);s=o[w>>2]|0;o[O>>2]=0}n[j>>0]=1;o[O>>2]=a;o[l>>2]=1;c[a+(s<<4)>>2]=b;c[a+(s<<4)+4>>2]=d;c[a+(s<<4)+8>>2]=h;c[a+(s<<4)+12>>2]=0;s=(o[w>>2]|0)+1|0;o[w>>2]=s;me=o[i+12>>2]|0;le=+c[he+60+16>>2];be=+c[he+60+20>>2];h=+c[he+60+24>>2];b=le*+c[me>>2]+be*+c[me+4>>2]+h*+c[me+8>>2]+ +c[me+48>>2];d=le*+c[me+16>>2]+be*+c[me+20>>2]+h*+c[me+24>>2]+ +c[me+52>>2];h=le*+c[me+32>>2]+be*+c[me+36>>2]+h*+c[me+40>>2]+ +c[me+56>>2];if((s|0)==(o[l>>2]|0)?(B=s|0?s<<1:1,(s|0)<(B|0)):0){if(!B)f=0;else{o[5637]=(o[5637]|0)+1;s=Qa((B<<4|3)+16|0)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}f=s;s=o[w>>2]|0}if((s|0)>0){a=0;do{me=f+(a<<4)|0;ue=(o[O>>2]|0)+(a<<4)|0;o[me>>2]=o[ue>>2];o[me+4>>2]=o[ue+4>>2];o[me+8>>2]=o[ue+8>>2];o[me+12>>2]=o[ue+12>>2];a=a+1|0}while((a|0)!=(s|0))}s=o[O>>2]|0;if(s|0){if(n[j>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[O>>2]=0}n[j>>0]=1;o[O>>2]=f;o[l>>2]=B;s=o[w>>2]|0}me=o[O>>2]|0;c[me+(s<<4)>>2]=b;c[me+(s<<4)+4>>2]=d;c[me+(s<<4)+8>>2]=h;c[me+(s<<4)+12>>2]=0;s=(o[w>>2]|0)+1|0;o[w>>2]=s;me=o[i+12>>2]|0;le=+c[he+60+32>>2];be=+c[he+60+36>>2];h=+c[he+60+40>>2];b=le*+c[me>>2]+be*+c[me+4>>2]+h*+c[me+8>>2]+ +c[me+48>>2];d=le*+c[me+16>>2]+be*+c[me+20>>2]+h*+c[me+24>>2]+ +c[me+52>>2];h=le*+c[me+32>>2]+be*+c[me+36>>2]+h*+c[me+40>>2]+ +c[me+56>>2];if((s|0)==(o[l>>2]|0)?(V=s|0?s<<1:1,(s|0)<(V|0)):0){if(!V)f=0;else{o[5637]=(o[5637]|0)+1;s=Qa((V<<4|3)+16|0)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}f=s;s=o[w>>2]|0}if((s|0)>0){a=0;do{me=f+(a<<4)|0;i=(o[O>>2]|0)+(a<<4)|0;o[me>>2]=o[i>>2];o[me+4>>2]=o[i+4>>2];o[me+8>>2]=o[i+8>>2];o[me+12>>2]=o[i+12>>2];a=a+1|0}while((a|0)!=(s|0))}s=o[O>>2]|0;if(s|0){if(n[j>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[O>>2]=0}n[j>>0]=1;o[O>>2]=f;o[l>>2]=V;s=o[w>>2]|0}me=o[O>>2]|0;c[me+(s<<4)>>2]=b;c[me+(s<<4)+4>>2]=d;c[me+(s<<4)+8>>2]=h;c[me+(s<<4)+12>>2]=0;o[w>>2]=(o[w>>2]|0)+1;m=+c[(o[e+20>>2]|0)+752>>2];nC(ye+48|0,ye+128|0,ye+40|0,o[r+20>>2]|0,0);b=+c[ye+48+4>>2];d=+c[ye+48+8>>2];h=+c[ye+48+12>>2];if(b*b+d*d+h*h>1.1920928955078125e-7){le=1/(b*b+d*d+h*h);c[ye+384>>2]=b*le;c[ye+384+4>>2]=d*le;c[ye+384+8>>2]=h*le;c[ye+384+12>>2]=0;le=+c[ye+48+56>>2];be=+wP[o[(o[de>>2]|0)+48>>2]&15](de);be=le-be-+wP[o[(o[he>>2]|0)+48>>2]&15](he);bC(ye+384|0,o[de+56>>2]|0,o[t+12>>2]|0,ye+624|0,be-m,m,_)}do if(n[e+16>>0]|0?(H=o[_+4>>2]|0,o[H+748>>2]|0):0){a=o[H+740>>2]|0;f=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((a|0)==(f|0)){lC(H,a+4|0,s+4|0);break}else{lC(H,s+4|0,f+4|0);break}}while(0);s=o[O>>2]|0;if(s|0){if(n[j>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[O>>2]=0}}else{be=+c[(o[e+20>>2]|0)+752>>2];t:do if(!(n[r+24>>0]|0)){nC(ye+48|0,ye+128|0,ye,o[r+20>>2]|0,0);b=+c[ye+32>>2];if(b<0&(n[ye+36>>0]|0)!=0){h=+c[ye+8>>2];m=+c[ye+16>>2];s=o[ye+20>>2]|0;d=+c[ye+12>>2];ue=111}}else{_e=o[t+12>>2]|0;se=o[i+12>>2]|0;o[5297]=(o[5297]|0)+1;E=+c[ae+64>>2];te=+c[ae+68>>2];b=+c[_e+4>>2];ie=+c[ae+72>>2];d=+c[_e+8>>2];h=+c[_e+16>>2];m=+c[_e+20>>2];y=+c[_e+24>>2];g=+c[_e+32>>2];v=+c[_e+36>>2];C=+c[_e+40>>2];ne=+c[ce+64>>2];re=+c[ce+68>>2];le=+c[ce+72>>2];fe=E*+c[_e>>2]+te*b+ie*d+ +c[_e+48>>2]-(ne*+c[se>>2]+re*+c[se+4>>2]+le*+c[se+8>>2]+ +c[se+48>>2]);pe=E*h+te*m+ie*y+ +c[_e+52>>2]-(ne*+c[se+16>>2]+re*+c[se+20>>2]+le*+c[se+24>>2]+ +c[se+52>>2]);le=E*g+te*v+ie*C+ +c[_e+56>>2]-(ne*+c[se+32>>2]+re*+c[se+36>>2]+le*+c[se+40>>2]+ +c[se+56>>2]);f=o[ae+28>>2]|0;i:do if((f|0)>0){I=d;T=h;R=m;D=0;L=3.4028234663852886e38;a=0;h=0;m=0;d=0;while(1){oe=o[ae+36>>2]|0;ie=+c[oe+(a*36|0)+20>>2];ne=+c[oe+(a*36|0)+24>>2];re=+c[oe+(a*36|0)+28>>2];k=ie*+c[_e>>2]+ne*b+re*I;y=ie*T+ne*R+re*y;b=ie*g+ne*v+re*C;c[ye+296>>2]=k;c[ye+296+4>>2]=y;c[ye+296+8>>2]=b;c[ye+296+12>>2]=0;if(fe*k+pe*y+le*b<0){c[ye+296>>2]=-k;c[ye+296+4>>2]=-y;c[ye+296+8>>2]=-b;S=-k;y=-y;b=-b}else S=k;o[5295]=(o[5295]|0)+1;if(uC(_e,se,fe,pe,le,S,y,b,ae,ce,L)|0){o[5296]=(o[5296]|0)+1;SR(ae,_e,ye+296|0,ye+624|0,ye+384|0,ye+360|0,ye+344|0);SR(ce,se,ye+296|0,ye+380|0,ye+376|0,ye+328|0,ye+312|0);g=+c[ye+384>>2];v=+c[ye+380>>2];do if(g<v){s=0;v=D}else{C=+c[ye+376>>2];k=+c[ye+624>>2];if(C<k){s=0;v=D;break}s=1;v=g-v<C-k?g-v:C-k}while(0);if(!s)break;if(v<L){g=v;h=S;m=b;d=y}else g=L;S=v;k=g}else{S=D;k=L}s=a+1|0;if((s|0)>=(f|0)){b=k;break i}b=+c[_e+4>>2];I=+c[_e+8>>2];T=+c[_e+16>>2];R=+c[_e+20>>2];y=+c[_e+24>>2];g=+c[_e+32>>2];v=+c[_e+36>>2];C=+c[_e+40>>2];D=S;L=k;a=s}break t}else{b=3.4028234663852886e38;h=0;m=0;d=0}while(0);f=o[ce+28>>2]|0;i:do if((f|0)>0){I=0;a=0;while(1){oe=o[ce+36>>2]|0;ne=+c[oe+(a*36|0)+20>>2];re=+c[oe+(a*36|0)+24>>2];v=+c[oe+(a*36|0)+28>>2];y=ne*+c[se>>2]+re*+c[se+4>>2]+v*+c[se+8>>2];g=ne*+c[se+16>>2]+re*+c[se+20>>2]+v*+c[se+24>>2];v=ne*+c[se+32>>2]+re*+c[se+36>>2]+v*+c[se+40>>2];c[ye+296>>2]=y;c[ye+296+4>>2]=g;c[ye+296+8>>2]=v;c[ye+296+12>>2]=0;if(fe*y+pe*g+le*v<0){c[ye+296>>2]=-y;c[ye+296+4>>2]=-g;c[ye+296+8>>2]=-v;y=-y;g=-g;v=-v}o[5295]=(o[5295]|0)+1;if(uC(_e,se,fe,pe,le,y,g,v,ae,ce,b)|0){o[5296]=(o[5296]|0)+1;SR(ae,_e,ye+296|0,ye+624|0,ye+384|0,ye+360|0,ye+344|0);SR(ce,se,ye+296|0,ye+380|0,ye+376|0,ye+328|0,ye+312|0);C=+c[ye+384>>2];k=+c[ye+380>>2];do if(C<k){s=0;C=I}else{S=+c[ye+376>>2];R=+c[ye+624>>2];if(S<R){s=0;C=I;break}s=1;C=C-k<S-R?C-k:S-R}while(0);if(!s)break;if(C<b){b=C;h=y;m=v;d=g}}else C=I;a=a+1|0;if((a|0)>=(f|0))break i;else I=C}break t}while(0);s=o[ae+48>>2]|0;i:do if((s|0)>0){z=o[ce+48>>2]|0;y=0;oe=0;x=-1;O=-1;M=0;P=0;B=0;V=0;H=0;r=0;l=0;w=0;j=0;Y=0;a=0;f=0;F=0;G=0;E=0;C=0;k=0;W=0;n:while(1){ee=o[ae+56>>2]|0;A=+c[ee+(oe<<4)>>2];te=+c[ee+(oe<<4)+4>>2];re=+c[ee+(oe<<4)+8>>2];ie=A*+c[_e>>2]+te*+c[_e+4>>2]+re*+c[_e+8>>2];ne=A*+c[_e+16>>2]+te*+c[_e+20>>2]+re*+c[_e+24>>2];re=A*+c[_e+32>>2]+te*+c[_e+36>>2]+re*+c[_e+40>>2];if((z|0)>0){D=y;z=0;te=h;A=m;L=d;while(1){ee=o[ce+56>>2]|0;v=+c[ee+(z<<4)>>2];S=+c[ee+(z<<4)+4>>2];T=+c[ee+(z<<4)+8>>2];R=v*+c[se>>2]+S*+c[se+4>>2]+T*+c[se+8>>2];I=v*+c[se+16>>2]+S*+c[se+20>>2]+T*+c[se+24>>2];T=v*+c[se+32>>2]+S*+c[se+36>>2]+T*+c[se+40>>2];c[ye+296>>2]=ne*T-re*I;c[ye+296+4>>2]=re*R-ie*T;c[ye+296+8>>2]=ie*I-ne*R;c[ye+296+12>>2]=0;do if(!(+N(+(ne*T-re*I))>1e-6)){if(+N(+(re*R-ie*T))>1e-6){ue=75;break}if(!(+N(+(ie*I-ne*R))>1e-6)){g=D;h=te;m=A;d=L;K=M;Q=P;q=B;J=V;$=H;ee=r}else ue=75}else ue=75;while(0);do if((ue|0)==75){ue=0;m=1/+X(+((ne*T-re*I)*(ne*T-re*I)+(re*R-ie*T)*(re*R-ie*T)+(ie*I-ne*R)*(ie*I-ne*R)));h=(ne*T-re*I)*m;c[ye+296>>2]=h;d=(re*R-ie*T)*m;c[ye+296+4>>2]=d;m=(ie*I-ne*R)*m;c[ye+296+8>>2]=m;if(h*fe+d*pe+le*m<0){c[ye+296>>2]=-h;c[ye+296+4>>2]=-d;c[ye+296+8>>2]=-m;h=-h;d=-d;m=-m}o[5295]=(o[5295]|0)+1;if(!(uC(_e,se,fe,pe,le,h,d,m,ae,ce,b)|0)){g=D;h=te;m=A;d=L;K=M;Q=P;q=B;J=V;$=H;ee=r;break}o[5296]=(o[5296]|0)+1;SR(ae,_e,ye+296|0,ye+624|0,ye+384|0,ye+360|0,ye+344|0);SR(ce,se,ye+296|0,ye+380|0,ye+376|0,ye+328|0,ye+312|0);y=+c[ye+384>>2];g=+c[ye+380>>2];do if(!(y<g)){v=+c[ye+376>>2];S=+c[ye+624>>2];if(v<S){s=0;y=D;break}if(y-g<v-S){s=1;y=y-g;M=o[ye+344>>2]|0;P=o[ye+344+4>>2]|0;B=o[ye+344+8>>2]|0;V=o[ye+328>>2]|0;H=o[ye+328+4>>2]|0;r=o[ye+328+8>>2]|0;break}else{s=1;y=v-S;M=o[ye+360>>2]|0;P=o[ye+360+4>>2]|0;B=o[ye+360+8>>2]|0;V=o[ye+312>>2]|0;H=o[ye+312+4>>2]|0;r=o[ye+312+8>>2]|0;break}}else{s=0;y=D}while(0);if(!s)break n;if(!(y<b)){g=y;h=te;m=A;d=L;K=M;Q=P;q=B;J=V;$=H;ee=r;break}g=y;b=y;x=oe;O=z;K=M;Q=P;q=B;J=V;$=H;ee=r;l=M;w=P;j=B;Y=V;a=H;f=r;F=ie;G=ne;E=re;C=R;k=I;W=T}while(0);z=z+1|0;s=o[ce+48>>2]|0;if((z|0)>=(s|0))break;else{D=g;te=h;A=m;L=d;M=K;P=Q;B=q;V=J;H=$;r=ee}}z=s;s=o[ae+48>>2]|0;y=g;M=K;P=Q;B=q;V=J;H=$;r=ee}oe=oe+1|0;if((oe|0)>=(s|0)){s=Y;break i}}break t}else{x=-1;O=-1;l=0;w=0;j=0;s=0;a=0;f=0;F=0;G=0;E=0;C=0;k=0;W=0}while(0);if((O|x|0)>-1){A=(o[u>>2]=s,+c[u>>2]);T=A-(o[u>>2]=l,+c[u>>2]);L=(o[u>>2]=a,+c[u>>2]);I=L-(o[u>>2]=w,+c[u>>2]);D=(o[u>>2]=f,+c[u>>2]);R=D-(o[u>>2]=j,+c[u>>2]);y=C*F+k*G+W*E;g=T*F+I*G+R*E;b=T*C+I*k+R*W;do if(1-y*y==0)v=0;else{if((g-b*y)/(1-y*y)<-1.0000000150474662e30){v=-1.0000000150474662e30;break}if(!((g-b*y)/(1-y*y)>1.0000000150474662e30)){v=(g-b*y)/(1-y*y);break}v=1.0000000150474662e30}while(0);b=y*v-b;do if(b<-1.0000000150474662e30){if(g-y*1.0000000150474662e30<-1.0000000150474662e30){y=-1.0000000150474662e30;b=-1.0000000150474662e30;break}if(!(g-y*1.0000000150474662e30>1.0000000150474662e30)){y=g-y*1.0000000150474662e30;b=-1.0000000150474662e30;break}y=1.0000000150474662e30;b=-1.0000000150474662e30}else{if(!(b>1.0000000150474662e30)){y=v;break}if(g+y*1.0000000150474662e30<-1.0000000150474662e30){y=-1.0000000150474662e30;b=1.0000000150474662e30;break}if(!(g+y*1.0000000150474662e30>1.0000000150474662e30)){y=g+y*1.0000000150474662e30;b=1.0000000150474662e30;break}y=1.0000000150474662e30;b=1.0000000150474662e30}while(0);S=C*b;k=k*b;C=W*b;v=S+(T-F*y);g=k+(I-G*y);b=C+(R-E*y);c[ye+624>>2]=v;c[ye+624+4>>2]=g;c[ye+624+8>>2]=b;c[ye+624+12>>2]=0;if(v*v+g*g+b*b>1.1920928955078125e-7){y=+X(+(v*v+g*g+b*b));c[ye+624>>2]=v*(1/y);c[ye+624+4>>2]=1/y*g;c[ye+624+8>>2]=1/y*b;if(v*(1/y)*fe+1/y*g*pe+1/y*b*le<0){c[ye+624>>2]=-(v*(1/y));c[ye+624+4>>2]=-(1/y*g);c[ye+624+8>>2]=-(1/y*b)}c[ye+384>>2]=A+S;c[ye+384+4>>2]=L+k;c[ye+384+8>>2]=D+C;c[ye+384+12>>2]=0;GP[o[(o[_>>2]|0)+16>>2]&15](_,ye+624|0,ye+384|0,-y)}}if(fe*h+pe*d+le*m<0){b=-1.0000000150474662e30;h=-h;m=-m;s=0;d=-d;ue=111}else{b=-1.0000000150474662e30;s=0;ue=111}}while(0);if((ue|0)==111){z=o[de+56>>2]|0;r=o[he+56>>2]|0;H=o[t+12>>2]|0;V=o[i+12>>2]|0;A=b-be;D=1/+X(+(h*h+d*d+m*m));W=h*D;L=d*D;D=m*D;c[ye+624>>2]=W;c[ye+624+4>>2]=L;c[ye+624+8>>2]=D;o[ye+624+12>>2]=s;a=o[r+28>>2]|0;w=o[r+36>>2]|0;if((a|0)>0){b=+c[V>>2];d=+c[V+4>>2];h=+c[V+8>>2];m=+c[V+16>>2];y=+c[V+20>>2];g=+c[V+24>>2];v=+c[V+32>>2];C=+c[V+36>>2];k=+c[V+40>>2];s=-1;T=-3.4028234663852886e38;l=0;while(1){S=+c[w+(l*36|0)+20>>2];R=+c[w+(l*36|0)+24>>2];I=+c[w+(l*36|0)+28>>2];f=(S*b+R*d+I*h)*W+(S*m+R*y+I*g)*L+(S*v+R*C+I*k)*D>T;s=f?l:s;l=l+1|0;if((l|0)==(a|0)){P=s;break}else T=f?(S*b+R*d+I*h)*W+(S*m+R*y+I*g)*L+(S*v+R*C+I*k)*D:T}}else P=-1;n[ye+384+16>>0]=1;B=ye+384+12|0;o[B>>2]=0;x=ye+384+4|0;o[x>>2]=0;o[ye+384+8>>2]=0;M=o[w+(P*36|0)+4>>2]|0;t:do if((M|0)>0){O=w+(P*36|0)+12|0;s=0;f=0;a=0;while(1){t=o[(o[O>>2]|0)+(a<<2)>>2]|0;i=o[r+16>>2]|0;pe=+c[i+(t<<4)>>2];le=+c[i+(t<<4)+4>>2];h=+c[i+(t<<4)+8>>2];b=pe*+c[V>>2]+le*+c[V+4>>2]+h*+c[V+8>>2]+ +c[V+48>>2];d=pe*+c[V+16>>2]+le*+c[V+20>>2]+h*+c[V+24>>2]+ +c[V+52>>2];h=pe*+c[V+32>>2]+le*+c[V+36>>2]+h*+c[V+40>>2]+ +c[V+56>>2];if((s|0)==(f|0)){j=f|0?f<<1:1;if((f|0)<(j|0)){if(!j){w=0;s=f}else{o[5637]=(o[5637]|0)+1;s=Qa((j<<4|3)+16|0)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}w=s;s=o[x>>2]|0}l=o[B>>2]|0;if((s|0)<=0){if(l)ue=126}else{f=0;do{t=w+(f<<4)|0;i=l+(f<<4)|0;o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];f=f+1|0}while((f|0)!=(s|0));ue=126}if((ue|0)==126){ue=0;if(n[ye+384+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[l+-4>>2]|0);s=o[x>>2]|0}o[B>>2]=0}n[ye+384+16>>0]=1;o[B>>2]=w;o[ye+384+8>>2]=j}else s=f}t=o[B>>2]|0;c[t+(s<<4)>>2]=b;c[t+(s<<4)+4>>2]=d;c[t+(s<<4)+8>>2]=h;c[t+(s<<4)+12>>2]=0;s=(o[x>>2]|0)+1|0;o[x>>2]=s;a=a+1|0;if((a|0)>=(M|0))break t;f=o[ye+384+8>>2]|0}}while(0);if((P|0)>-1)bC(ye+624|0,z,H,ye+384|0,A,be,_);s=o[B>>2]|0;if(s|0){if(n[ye+384+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[B>>2]=0}}if(n[e+16>>0]|0?(me=o[_+4>>2]|0,o[me+748>>2]|0):0){f=o[me+740>>2]|0;a=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((f|0)==(a|0)){lC(me,f+4|0,s+4|0);break}else{lC(me,s+4|0,a+4|0);break}}}while(0);p=ye;return}while(0)}nC(ye+48|0,ye+128|0,_,o[r+20>>2]|0,0);if((o[e+28>>2]|0?(o[(o[_+4>>2]|0)+748>>2]|0)<(o[e+32>>2]|0):0)?(A=+c[ye+48+4>>2],\nF=+c[ye+48+8>>2],G=+c[ye+48+12>>2],A*A+F*F+G*G>1.1920928955078125e-7):0){T=1/(A*A+F*F+G*G);if(+N(+(G*T))>.7071067690849304){W=1/+X(+(G*T*(G*T)+F*T*(F*T)));D=0;L=F*T*W;W=-(G*T*W)}else{W=1/+X(+(A*T*(A*T)+F*T*(F*T)));D=-(F*T*W);L=0;W=A*T*W}I=+wP[o[(o[de>>2]|0)+16>>2]&15](de);S=+wP[o[(o[he>>2]|0)+16>>2]&15](he);b=.019999999552965164/(I<S?I:S);if(I<S){o[ye+624>>2]=o[ye+128>>2];o[ye+624+4>>2]=o[ye+128+4>>2];o[ye+624+8>>2]=o[ye+128+8>>2];o[ye+624+12>>2]=o[ye+128+12>>2];o[ye+624+16>>2]=o[f>>2];o[ye+624+16+4>>2]=o[f+4>>2];o[ye+624+16+8>>2]=o[f+8>>2];o[ye+624+16+12>>2]=o[f+12>>2];o[ye+624+32>>2]=o[w>>2];o[ye+624+32+4>>2]=o[w+4>>2];o[ye+624+32+8>>2]=o[w+8>>2];o[ye+624+32+12>>2]=o[w+12>>2];o[ye+624+48>>2]=o[j>>2];o[ye+624+48+4>>2]=o[j+4>>2];o[ye+624+48+8>>2]=o[j+8>>2];o[ye+624+48+12>>2]=o[j+12>>2]}else{o[ye+624>>2]=o[O>>2];o[ye+624+4>>2]=o[O+4>>2];o[ye+624+8>>2]=o[O+8>>2];o[ye+624+12>>2]=o[O+12>>2];o[ye+624+16>>2]=o[x>>2];o[ye+624+16+4>>2]=o[x+4>>2];o[ye+624+16+8>>2]=o[x+8>>2];o[ye+624+16+12>>2]=o[x+12>>2];o[ye+624+32>>2]=o[M>>2];o[ye+624+32+4>>2]=o[M+4>>2];o[ye+624+32+8>>2]=o[M+8>>2];o[ye+624+32+12>>2]=o[M+12>>2];o[ye+624+48>>2]=o[P>>2];o[ye+624+48+4>>2]=o[P+4>>2];o[ye+624+48+8>>2]=o[P+8>>2];o[ye+624+48+12>>2]=o[P+12>>2]}s=o[e+28>>2]|0;if((s|0)>0){R=D*D+W*W+L*L;k=(b>.39269909262657166?.39269909262657166:b)*.5;a=0;do{if(R>1.1920928955078125e-7){v=+U(+k)/+X(+R);y=D*v;g=W*v;v=L*v;C=+Z(+k);m=+(a|0)*(6.2831854820251465/+(s|0))*.5;h=+U(+m)/+X(+(G*T*(G*T)+(A*T*(A*T)+F*T*(F*T))));b=A*T*h;d=F*T*h;h=G*T*h;m=+Z(+m);if(I<S){re=h*(y*-h+(g*m+C*-d)-v*-b)+(b*(C*m-y*-b-g*-d-v*-h)+m*(v*-d+(y*m+C*-b)-g*-h))-d*(g*-b+(v*m+C*-h)-y*-d);pe=b*(g*-b+(v*m+C*-h)-y*-d)+(m*(y*-h+(g*m+C*-d)-v*-b)+d*(C*m-y*-b-g*-d-v*-h))-h*(v*-d+(y*m+C*-b)-g*-h);ge=d*(v*-d+(y*m+C*-b)-g*-h)+(h*(C*m-y*-b-g*-d-v*-h)+m*(g*-b+(v*m+C*-h)-y*-d))-b*(y*-h+(g*m+C*-d)-v*-b);ie=m*(C*m-y*-b-g*-d-v*-h)-b*(v*-d+(y*m+C*-b)-g*-h)-d*(y*-h+(g*m+C*-d)-v*-b)-h*(g*-b+(v*m+C*-h)-y*-d);fe=re*(2/(ie*ie+(ge*ge+(re*re+pe*pe))));le=pe*(2/(ie*ie+(ge*ge+(re*re+pe*pe))));te=ge*(2/(ie*ie+(ge*ge+(re*re+pe*pe))));me=o[t+12>>2]|0;h=+c[me>>2];m=+c[me+16>>2];y=+c[me+32>>2];g=+c[me+4>>2];v=+c[me+20>>2];C=+c[me+36>>2];E=+c[me+8>>2];ne=+c[me+24>>2];be=+c[me+40>>2];c[ye+128>>2]=(1-(pe*le+ge*te))*h+(re*le-ie*te)*m+(re*te+ie*le)*y;c[ye+128+4>>2]=(1-(pe*le+ge*te))*g+(re*le-ie*te)*v+(re*te+ie*le)*C;c[ye+128+8>>2]=(1-(pe*le+ge*te))*E+(re*le-ie*te)*ne+(re*te+ie*le)*be;c[ye+128+12>>2]=0;c[ye+128+16>>2]=(re*le+ie*te)*h+(1-(re*fe+ge*te))*m+(pe*te-ie*fe)*y;c[ye+128+20>>2]=(re*le+ie*te)*g+(1-(re*fe+ge*te))*v+(pe*te-ie*fe)*C;c[ye+128+24>>2]=(re*le+ie*te)*E+(1-(re*fe+ge*te))*ne+(pe*te-ie*fe)*be;c[ye+128+28>>2]=0;c[ye+128+32>>2]=(re*te-ie*le)*h+(pe*te+ie*fe)*m+(1-(re*fe+pe*le))*y;c[ye+128+36>>2]=(re*te-ie*le)*g+(pe*te+ie*fe)*v+(1-(re*fe+pe*le))*C;c[ye+128+40>>2]=(re*te-ie*le)*E+(pe*te+ie*fe)*ne+(1-(re*fe+pe*le))*be;c[ye+128+44>>2]=0;me=o[i+12>>2]|0;o[O>>2]=o[me>>2];o[O+4>>2]=o[me+4>>2];o[O+8>>2]=o[me+8>>2];o[O+12>>2]=o[me+12>>2];o[x>>2]=o[me+16>>2];o[x+4>>2]=o[me+16+4>>2];o[x+8>>2]=o[me+16+8>>2];o[x+12>>2]=o[me+16+12>>2];o[M>>2]=o[me+32>>2];o[M+4>>2]=o[me+32+4>>2];o[M+8>>2]=o[me+32+8>>2];o[M+12>>2]=o[me+32+12>>2];o[P>>2]=o[me+48>>2];o[P+4>>2]=o[me+48+4>>2];o[P+8>>2]=o[me+48+8>>2];o[P+12>>2]=o[me+48+12>>2]}else{me=o[t+12>>2]|0;o[ye+128>>2]=o[me>>2];o[ye+128+4>>2]=o[me+4>>2];o[ye+128+8>>2]=o[me+8>>2];o[ye+128+12>>2]=o[me+12>>2];o[f>>2]=o[me+16>>2];o[f+4>>2]=o[me+16+4>>2];o[f+8>>2]=o[me+16+8>>2];o[f+12>>2]=o[me+16+12>>2];o[w>>2]=o[me+32>>2];o[w+4>>2]=o[me+32+4>>2];o[w+8>>2]=o[me+32+8>>2];o[w+12>>2]=o[me+32+12>>2];o[j>>2]=o[me+48>>2];o[j+4>>2]=o[me+48+4>>2];o[j+8>>2]=o[me+48+8>>2];o[j+12>>2]=o[me+48+12>>2];fe=h*(y*-h+(g*m+C*-d)-v*-b)+(b*(C*m-y*-b-g*-d-v*-h)+m*(v*-d+(y*m+C*-b)-g*-h))-d*(g*-b+(v*m+C*-h)-y*-d);le=b*(g*-b+(v*m+C*-h)-y*-d)+(m*(y*-h+(g*m+C*-d)-v*-b)+d*(C*m-y*-b-g*-d-v*-h))-h*(v*-d+(y*m+C*-b)-g*-h);ve=d*(v*-d+(y*m+C*-b)-g*-h)+(h*(C*m-y*-b-g*-d-v*-h)+m*(g*-b+(v*m+C*-h)-y*-d))-b*(y*-h+(g*m+C*-d)-v*-b);ne=m*(C*m-y*-b-g*-d-v*-h)-b*(v*-d+(y*m+C*-b)-g*-h)-d*(y*-h+(g*m+C*-d)-v*-b)-h*(g*-b+(v*m+C*-h)-y*-d);pe=fe*(2/(ne*ne+(ve*ve+(fe*fe+le*le))));be=le*(2/(ne*ne+(ve*ve+(fe*fe+le*le))));ie=ve*(2/(ne*ne+(ve*ve+(fe*fe+le*le))));me=o[i+12>>2]|0;m=+c[me>>2];y=+c[me+16>>2];g=+c[me+32>>2];v=+c[me+4>>2];C=+c[me+20>>2];E=+c[me+36>>2];te=+c[me+8>>2];re=+c[me+24>>2];ge=+c[me+40>>2];c[ye+128+64>>2]=(1-(le*be+ve*ie))*m+(fe*be-ne*ie)*y+(fe*ie+ne*be)*g;c[ye+128+68>>2]=(1-(le*be+ve*ie))*v+(fe*be-ne*ie)*C+(fe*ie+ne*be)*E;c[ye+128+72>>2]=(1-(le*be+ve*ie))*te+(fe*be-ne*ie)*re+(fe*ie+ne*be)*ge;c[ye+128+76>>2]=0;c[ye+128+80>>2]=(fe*be+ne*ie)*m+(1-(fe*pe+ve*ie))*y+(le*ie-ne*pe)*g;c[ye+128+84>>2]=(fe*be+ne*ie)*v+(1-(fe*pe+ve*ie))*C+(le*ie-ne*pe)*E;c[ye+128+88>>2]=(fe*be+ne*ie)*te+(1-(fe*pe+ve*ie))*re+(le*ie-ne*pe)*ge;c[ye+128+92>>2]=0;c[ye+128+96>>2]=(fe*ie-ne*be)*m+(le*ie+ne*pe)*y+(1-(fe*pe+le*be))*g;c[ye+128+100>>2]=(fe*ie-ne*be)*v+(le*ie+ne*pe)*C+(1-(fe*pe+le*be))*E;c[ye+128+104>>2]=(fe*ie-ne*be)*te+(le*ie+ne*pe)*re+(1-(fe*pe+le*be))*ge;c[ye+128+108>>2]=0}s=o[r+20>>2]|0;o[ye+384>>2]=4028;o[ye+384+32>>2]=_;o[ye+384+36>>2]=o[ye+128>>2];o[ye+384+36+4>>2]=o[ye+128+4>>2];o[ye+384+36+8>>2]=o[ye+128+8>>2];o[ye+384+36+12>>2]=o[ye+128+12>>2];o[ye+384+52>>2]=o[f>>2];o[ye+384+52+4>>2]=o[f+4>>2];o[ye+384+52+8>>2]=o[f+8>>2];o[ye+384+52+12>>2]=o[f+12>>2];o[ye+384+68>>2]=o[w>>2];o[ye+384+68+4>>2]=o[w+4>>2];o[ye+384+68+8>>2]=o[w+8>>2];o[ye+384+68+12>>2]=o[w+12>>2];o[ye+384+84>>2]=o[j>>2];o[ye+384+84+4>>2]=o[j+4>>2];o[ye+384+84+8>>2]=o[j+8>>2];o[ye+384+84+12>>2]=o[j+12>>2];o[ye+384+100>>2]=o[O>>2];o[ye+384+100+4>>2]=o[O+4>>2];o[ye+384+100+8>>2]=o[O+8>>2];o[ye+384+100+12>>2]=o[O+12>>2];o[ye+384+116>>2]=o[x>>2];o[ye+384+116+4>>2]=o[x+4>>2];o[ye+384+116+8>>2]=o[x+8>>2];o[ye+384+116+12>>2]=o[x+12>>2];o[ye+384+132>>2]=o[M>>2];o[ye+384+132+4>>2]=o[M+4>>2];o[ye+384+132+8>>2]=o[M+8>>2];o[ye+384+132+12>>2]=o[M+12>>2];o[ye+384+148>>2]=o[P>>2];o[ye+384+148+4>>2]=o[P+4>>2];o[ye+384+148+8>>2]=o[P+8>>2];o[ye+384+148+12>>2]=o[P+12>>2];o[ye+384+164>>2]=o[ye+624>>2];o[ye+384+164+4>>2]=o[ye+624+4>>2];o[ye+384+164+8>>2]=o[ye+624+8>>2];o[ye+384+164+12>>2]=o[ye+624+12>>2];o[ye+384+180>>2]=o[ye+624+16>>2];o[ye+384+180+4>>2]=o[ye+624+16+4>>2];o[ye+384+180+8>>2]=o[ye+624+16+8>>2];o[ye+384+180+12>>2]=o[ye+624+16+12>>2];o[ye+384+196>>2]=o[ye+624+32>>2];o[ye+384+196+4>>2]=o[ye+624+32+4>>2];o[ye+384+196+8>>2]=o[ye+624+32+8>>2];o[ye+384+196+12>>2]=o[ye+624+32+12>>2];o[ye+384+212>>2]=o[ye+624+48>>2];o[ye+384+212+4>>2]=o[ye+624+48+4>>2];o[ye+384+212+8>>2]=o[ye+624+48+8>>2];o[ye+384+212+12>>2]=o[ye+624+48+12>>2];n[ye+384+228>>0]=I<S&1;o[ye+384+232>>2]=s;nC(ye+48|0,ye+128|0,ye+384|0,s,0);s=o[e+28>>2]|0}a=a+1|0}while((a|0)<(s|0))}}if(!(n[e+16>>0]|0)){p=ye;return}a=o[_+4>>2]|0;if(!(o[a+748>>2]|0)){p=ye;return}f=o[a+740>>2]|0;l=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((f|0)==(l|0)){lC(a,f+4|0,s+4|0);p=ye;return}else{lC(a,s+4|0,l+4|0);p=ye;return}}function jT(e){e=e|0;qa(e);return}function IT(e,t,i){e=e|0;t=t|0;i=i|0;return}function TT(e,t,i){e=e|0;t=t|0;i=i|0;return}function DT(e,t,i,n){e=e|0;t=t|0;i=i|0;n=+n;return}function OT(e){e=e|0;qa(e);return}function LT(e,t,i){e=e|0;t=t|0;i=i|0;return}function xT(e,t,i){e=e|0;t=t|0;i=i|0;return}function MT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;var _=0,s=0,a=0,f=0;_=p;p=p+16|0;c[e+32>>2]=r;o[e+8>>2]=o[t>>2];o[e+8+4>>2]=o[t+4>>2];o[e+8+8>>2]=o[t+8>>2];o[e+8+12>>2]=o[t+12>>2];s=+c[e+28>>2];f=+c[i+4>>2]-s*+c[t+4>>2];a=+c[i+8>>2]-s*+c[t+8>>2];c[_>>2]=+c[i>>2]-+c[t>>2]*s;c[_+4>>2]=f;c[_+8>>2]=a;c[_+12>>2]=0;r=+c[e+24>>2]+s+r;c[e+32>>2]=r;if(!(r<0)){e=e+4|0;e=o[e>>2]|0;i=o[e>>2]|0;i=i+16|0;i=o[i>>2]|0;GP[i&15](e,t,_,r);p=_;return}n[e+36>>0]=1;e=e+4|0;e=o[e>>2]|0;i=o[e>>2]|0;i=i+16|0;i=o[i>>2]|0;GP[i&15](e,t,_,r);p=_;return}function PT(e){e=e|0;qa(e);return}function WT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0;b=p;p=p+16|0;f=+c[t>>2];l=+c[t+4>>2];u=+c[t+8>>2];s=+c[i>>2];a=+c[i+4>>2];_=+c[i+8>>2];if(!(n[e+228>>0]|0)){R=+c[e+100>>2];w=+c[e+116>>2];T=+c[e+132>>2];S=+c[e+104>>2];v=+c[e+120>>2];I=+c[e+136>>2];k=+c[e+108>>2];d=+c[e+124>>2];j=+c[e+140>>2];L=-+c[e+148>>2];O=-+c[e+152>>2];D=-+c[e+156>>2];W=+c[e+164>>2];P=+c[e+168>>2];y=+c[e+172>>2];M=+c[e+180>>2];x=+c[e+184>>2];m=+c[e+188>>2];C=+c[e+196>>2];g=+c[e+200>>2];h=+c[e+204>>2];y=_*(T*W+I*P+j*y)+(s*(R*W+S*P+k*y)+a*(w*W+v*P+d*y))+(W*(R*L+w*O+T*D)+(S*L+v*O+I*D)*P+(k*L+d*O+j*D)*y+ +c[e+212>>2]);m=_*(T*M+I*x+j*m)+(s*(R*M+S*x+k*m)+a*(w*M+v*x+d*m))+((R*L+w*O+T*D)*M+(S*L+v*O+I*D)*x+(k*L+d*O+j*D)*m+ +c[e+216>>2]);h=(R*L+w*O+T*D)*C+(S*L+v*O+I*D)*g+(k*L+d*O+j*D)*h+ +c[e+220>>2]+(_*(T*C+I*g+j*h)+(s*(R*C+S*g+k*h)+a*(w*C+v*g+d*h)));c[b>>2]=y;c[b+4>>2]=m;d=h;r=(f*r+s-y)*+c[t>>2]+(l*r+a-m)*+c[t+4>>2]+(u*r+_-h)*+c[t+8>>2];i=b+8|0;c[i>>2]=d;i=b+12|0;c[i>>2]=0;e=e+32|0;e=o[e>>2]|0;i=o[e>>2]|0;i=i+16|0;i=o[i>>2]|0;GP[i&15](e,t,b,r);p=b;return}else{R=+c[e+36>>2];T=+c[e+52>>2];w=+c[e+68>>2];j=+c[e+40>>2];O=+c[e+56>>2];k=+c[e+72>>2];I=+c[e+44>>2];P=+c[e+60>>2];S=+c[e+76>>2];g=-+c[e+84>>2];v=-+c[e+88>>2];C=-+c[e+92>>2];d=+c[e+164>>2];h=+c[e+168>>2];x=+c[e+172>>2];m=+c[e+180>>2];y=+c[e+184>>2];M=+c[e+188>>2];D=+c[e+196>>2];L=+c[e+200>>2];W=+c[e+204>>2];x=(u*r+_)*(w*d+k*h+S*x)+((f*r+s)*(R*d+j*h+I*x)+(l*r+a)*(T*d+O*h+P*x))+(d*(R*g+T*v+w*C)+(j*g+O*v+k*C)*h+(I*g+P*v+S*C)*x+ +c[e+212>>2]);M=(u*r+_)*(w*m+k*y+S*M)+((f*r+s)*(R*m+j*y+I*M)+(l*r+a)*(T*m+O*y+P*M))+((R*g+T*v+w*C)*m+(j*g+O*v+k*C)*y+(I*g+P*v+S*C)*M+ +c[e+216>>2]);W=(R*g+T*v+w*C)*D+(j*g+O*v+k*C)*L+(I*g+P*v+S*C)*W+ +c[e+220>>2]+((u*r+_)*(w*D+k*L+S*W)+((f*r+s)*(R*D+j*L+I*W)+(l*r+a)*(T*D+O*L+P*W)));c[b>>2]=x+f*(f*(x-s)+l*(M-a)+u*(W-_));c[b+4>>2]=M+l*(f*(x-s)+l*(M-a)+u*(W-_));P=W+u*(f*(x-s)+l*(M-a)+u*(W-_));W=f*(x-s)+l*(M-a)+u*(W-_);i=b+8|0;c[i>>2]=P;i=b+12|0;c[i>>2]=0;e=e+32|0;e=o[e>>2]|0;i=o[e>>2]|0;i=i+16|0;i=o[i>>2]|0;GP[i&15](e,t,b,W);p=b;return}}function BT(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0;r=p;p=p+608|0;d=+c[t+116>>2]-+c[t+52>>2];b=+c[t+120>>2]-+c[t+56>>2];u=+c[t+124>>2]-+c[t+60>>2];s=+c[i+116>>2]-+c[i+52>>2];a=+c[i+120>>2]-+c[i+56>>2];f=+c[i+124>>2]-+c[i+60>>2];l=+c[t+256>>2];if(d*d+b*b+u*u<l*l?(d=+c[i+256>>2],s*s+a*a+f*f<d*d):0){d=1;p=r;return+d}e=o[t+192>>2]|0;_=o[i+252>>2]|0;o[r+552+8>>2]=0;o[r+552+12>>2]=-1;o[r+552+16>>2]=1065353216;o[r+552+20>>2]=1065353216;o[r+552+24>>2]=1065353216;c[r+552+28>>2]=0;o[r+552>>2]=6380;o[r+552+4>>2]=8;o[r+552+32>>2]=_;o[r+552+48>>2]=_;o[r+376>>2]=3316;c[r+376+164>>2]=0xde0b6b000000000;o[r+376+168>>2]=0;c[r+376+172>>2]=0;c[r+16+308>>2]=9999999747378752e-20;n[r+16+332>>0]=0;o[r>>2]=6864;o[r+4>>2]=r+16;o[r+8>>2]=e;o[r+12>>2]=r+552;if(Xv(r,t+4|0,t+68|0,i+4|0,i+68|0,r+376|0)|0){s=+c[r+376+164>>2];if(+c[t+248>>2]>s)c[t+248>>2]=s;if(+c[i+248>>2]>s)c[i+248>>2]=s;if(s<1)a=s;else a=1}else a=1;e=o[i+192>>2]|0;_=o[t+252>>2]|0;o[r+552+8>>2]=0;o[r+552+12>>2]=-1;o[r+552+16>>2]=1065353216;o[r+552+20>>2]=1065353216;o[r+552+24>>2]=1065353216;c[r+552+28>>2]=0;o[r+552>>2]=6380;o[r+552+4>>2]=8;o[r+552+32>>2]=_;o[r+552+48>>2]=_;o[r+376>>2]=3316;c[r+376+164>>2]=0xde0b6b000000000;o[r+376+168>>2]=0;c[r+376+172>>2]=0;c[r+16+308>>2]=9999999747378752e-20;n[r+16+332>>0]=0;o[r>>2]=6864;o[r+4>>2]=r+16;o[r+8>>2]=r+552;o[r+12>>2]=e;if(Xv(r,t+4|0,t+68|0,i+4|0,i+68|0,r+376|0)|0){s=+c[r+376+164>>2];if(+c[t+248>>2]>s)c[t+248>>2]=s;if(+c[i+248>>2]>s)c[i+248>>2]=s;if(!(a>s))s=a}else s=a;d=s;p=r;return+d}function AT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+20>>2]|0;if(!i)return;if(!(n[e+16>>0]|0))return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+20>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function FT(e){e=e|0;var t=0;o[e>>2]=4056;if(!(n[e+8>>0]|0))return;t=o[e+12>>2]|0;if(!t)return;e=o[e+4>>2]|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function GT(e){e=e|0;var t=0,i=0;o[e>>2]=4056;if(!(n[e+8>>0]|0)){qa(e);return}t=o[e+12>>2]|0;if(!t){qa(e);return}i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+16>>2]&127](i,t);qa(e);return}function ET(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0;P=p;p=p+96|0;if(!(o[e+12>>2]|0)){p=P;return}r=(n[e+16>>0]|0)!=0;A=r?i:t;r=r?t:i;s=o[A+4>>2]|0;a=o[r+4>>2]|0;A=o[A+12>>2]|0;ee=+c[A>>2];$=+c[A+16>>2];J=+c[A+32>>2];q=+c[A+4>>2];Q=+c[A+20>>2];b=+c[A+36>>2];f=+c[A+8>>2];m=+c[A+24>>2];S=+c[A+40>>2];V=+c[A+48>>2];E=+c[A+52>>2];G=+c[A+56>>2];B=o[r+12>>2]|0;K=+c[B>>2];Y=+c[B+16>>2];d=+c[B+32>>2];z=+c[B+4>>2];H=+c[B+20>>2];h=+c[B+36>>2];k=+c[B+8>>2];C=+c[B+24>>2];g=+c[B+40>>2];F=-+c[B+48>>2];O=-+c[B+52>>2];L=-+c[B+56>>2];x=+c[A>>2];M=+c[A+16>>2];D=+c[A+32>>2];I=+c[A+4>>2];j=+c[A+20>>2];R=+c[A+36>>2];w=+c[A+8>>2];v=+c[A+24>>2];y=+c[A+40>>2];A=o[(o[s>>2]|0)+64>>2]|0;u=-+c[a+52>>2];l=-+c[a+56>>2];T=-+c[a+60>>2];c[P>>2]=(ee*K+$*Y+J*d)*u+(ee*z+$*H+J*h)*l+(ee*k+$*C+J*g)*T;c[P+4>>2]=(q*K+Q*Y+b*d)*u+(q*z+Q*H+b*h)*l+(q*k+Q*C+b*g)*T;c[P+8>>2]=(f*K+m*Y+S*d)*u+(f*z+m*H+S*h)*l+(f*k+m*C+S*g)*T;c[P+12>>2]=0;EP[A&127](P+16|0,s,P);T=+c[P+16>>2];S=+c[P+16+4>>2];m=+c[P+16+8>>2];f=+c[a+52>>2];l=+c[a+56>>2];u=+c[a+60>>2];b=u*(V*k+E*C+G*g+(k*F+C*O+g*L)+((k*x+C*M+g*D)*T+(k*I+C*j+g*R)*S+(k*w+C*v+g*y)*m))+(f*(V*K+E*Y+G*d+(K*F+Y*O+d*L)+((K*x+Y*M+d*D)*T+(K*I+Y*j+d*R)*S+(K*w+Y*v+d*y)*m))+l*(V*z+E*H+G*h+(z*F+H*O+h*L)+((z*x+H*M+h*D)*T+(z*I+H*j+h*R)*S+(z*w+H*v+h*y)*m)))-+c[a+68>>2];d=V*K+E*Y+G*d+(K*F+Y*O+d*L)+((K*x+Y*M+d*D)*T+(K*I+Y*j+d*R)*S+(K*w+Y*v+d*y)*m)-f*b;h=V*z+E*H+G*h+(z*F+H*O+h*L)+((z*x+H*M+h*D)*T+(z*I+H*j+h*R)*S+(z*w+H*v+h*y)*m)-l*b;m=V*k+E*C+G*g+(k*F+C*O+g*L)+((k*x+C*M+g*D)*T+(k*I+C*j+g*R)*S+(k*w+C*v+g*y)*m)-u*b;A=o[r+12>>2]|0;y=+c[A>>2];g=+c[A+4>>2];v=+c[A+8>>2];C=+c[A+16>>2];w=+c[A+20>>2];k=+c[A+24>>2];S=+c[A+32>>2];R=+c[A+36>>2];j=+c[A+40>>2];I=+c[A+48>>2];T=+c[A+52>>2];D=+c[A+56>>2];A=o[e+12>>2]|0;B=b<+c[A+752>>2];o[_+4>>2]=A;if(B){A=o[r+12>>2]|0;$=f*+c[A+16>>2]+l*+c[A+20>>2]+u*+c[A+24>>2];ee=f*+c[A+32>>2]+l*+c[A+36>>2]+u*+c[A+40>>2];c[P+80>>2]=+c[A>>2]*f+ +c[A+4>>2]*l+ +c[A+8>>2]*u;c[P+80+4>>2]=$;c[P+80+8>>2]=ee;c[P+80+12>>2]=0;c[P+64>>2]=v*m+(y*d+g*h)+I;c[P+64+4>>2]=d*C+h*w+m*k+T;c[P+64+8>>2]=d*S+h*R+m*j+D;c[P+64+12>>2]=0;GP[o[(o[_>>2]|0)+16>>2]&15](_,P+80|0,P+64|0,b)}if((o[s+4>>2]|0)<7?(o[(o[_+4>>2]|0)+748>>2]|0)<(o[e+24>>2]|0):0){f=+c[a+60>>2];if(+N(+f)>.7071067690849304){u=+c[a+56>>2];ee=1/+X(+(f*f+u*u));l=0;u=u*ee;f=-(f*ee)}else{ee=+c[a+52>>2];l=+c[a+56>>2];f=1/+X(+(ee*ee+l*l));l=-(l*f);u=0;f=ee*f}L=.019999999552965164/+wP[o[(o[s>>2]|0)+16>>2]&15](s);L=(L>.39269909262657166?.39269909262657166:L)*.5;O=+U(+L)/+X(+(l*l+f*f+u*u));M=l*O;x=f*O;O=u*O;L=+Z(+L);r=o[e+20>>2]|0;if((r|0)>0){s=0;do{C=+c[a+52>>2];ee=+c[a+56>>2];I=+c[a+60>>2];R=+(s|0)*(6.2831854820251465/+(r|0))*.5;$=+U(+R)/+X(+(C*C+ee*ee+I*I));R=+Z(+R);j=O*-(ee*$)+(M*R+L*-(C*$))-x*-(I*$);k=M*-(I*$)+(x*R+L*-(ee*$))-O*-(C*$);ne=x*-(C*$)+(O*R+L*-(I*$))-M*-(ee*$);D=L*R-M*-(C*$)-x*-(ee*$)-O*-(I*$);ae=I*$*k+(C*$*D+R*j)-ee*$*ne;se=C*$*ne+(R*k+ee*$*D)-I*$*j;pe=ee*$*j+(I*$*D+R*ne)-C*$*k;ne=R*D-C*$*j-ee*$*k-I*$*ne;r=(n[e+16>>0]|0)!=0;te=r?i:t;r=r?t:i;A=o[te+4>>2]|0;B=o[r+4>>2]|0;te=o[te+12>>2]|0;$=+c[te>>2];I=+c[te+4>>2];k=+c[te+8>>2];ee=+c[te+16>>2];j=+c[te+20>>2];C=+c[te+24>>2];D=+c[te+32>>2];R=+c[te+36>>2];g=+c[te+40>>2];z=+c[te+48>>2];Y=+c[te+52>>2];K=+c[te+56>>2];te=o[r+12>>2]|0;G=+c[te>>2];E=+c[te+16>>2];d=+c[te+32>>2];V=+c[te+4>>2];H=+c[te+20>>2];h=+c[te+36>>2];w=+c[te+8>>2];v=+c[te+24>>2];y=+c[te+40>>2];Q=-+c[te+48>>2];q=-+c[te+52>>2];J=-+c[te+56>>2];_e=ae*(2/(ae*ae+se*se+pe*pe+ne*ne));u=se*(2/(ae*ae+se*se+pe*pe+ne*ne));ie=pe*(2/(ae*ae+se*se+pe*pe+ne*ne));ue=k*(ae*ie-ne*u)+(I*(ae*u+ne*ie)+$*(1-(se*u+pe*ie)));fe=k*(se*ie+ne*_e)+($*(ae*u-ne*ie)+I*(1-(ae*_e+pe*ie)));f=$*(ae*ie+ne*u)+I*(se*ie-ne*_e)+k*(1-(ae*_e+se*u));le=C*(ae*ie-ne*u)+(j*(ae*u+ne*ie)+ee*(1-(se*u+pe*ie)));ce=C*(se*ie+ne*_e)+(ee*(ae*u-ne*ie)+j*(1-(ae*_e+pe*ie)));S=ee*(ae*ie+ne*u)+j*(se*ie-ne*_e)+C*(1-(ae*_e+se*u));be=g*(ae*ie-ne*u)+(R*(ae*u+ne*ie)+D*(1-(se*u+pe*ie)));pe=g*(se*ie+ne*_e)+(D*(ae*u-ne*ie)+R*(1-(ae*_e+pe*ie)));u=D*(ae*ie+ne*u)+R*(se*ie-ne*_e)+g*(1-(ae*_e+se*u));se=+c[te>>2];_e=+c[te+16>>2];ae=+c[te+32>>2];ne=+c[te+4>>2];ie=+c[te+20>>2];re=+c[te+36>>2];l=+c[te+8>>2];m=+c[te+24>>2];b=+c[te+40>>2];te=o[(o[A>>2]|0)+64>>2]|0;oe=-+c[B+52>>2];F=-+c[B+56>>2];T=-+c[B+60>>2];c[P+64>>2]=(ae*be+(se*ue+_e*le))*oe+(re*be+(ne*ue+ie*le))*F+(b*be+(l*ue+m*le))*T;c[P+64+4>>2]=(ae*pe+(se*fe+_e*ce))*oe+(re*pe+(ne*fe+ie*ce))*F+(b*pe+(l*fe+m*ce))*T;c[P+64+8>>2]=(ae*u+(se*f+_e*S))*oe+(re*u+(ne*f+ie*S))*F+(b*u+(l*f+m*S))*T;c[P+64+12>>2]=0;EP[te&127](P+80|0,A,P+64|0);T=+c[P+80>>2];S=+c[P+80+4>>2];m=+c[P+80+8>>2];f=+c[B+52>>2];l=+c[B+56>>2];u=+c[B+60>>2];b=u*(z*w+Y*v+K*y+(w*Q+v*q+y*J)+(($*w+ee*v+D*y)*T+(I*w+j*v+R*y)*S+(k*w+C*v+g*y)*m))+(f*(z*G+Y*E+K*d+(G*Q+E*q+d*J)+(($*G+ee*E+D*d)*T+(I*G+j*E+R*d)*S+(k*G+C*E+g*d)*m))+l*(z*V+Y*H+K*h+(V*Q+H*q+h*J)+(($*V+ee*H+D*h)*T+(I*V+j*H+R*h)*S+(k*V+C*H+g*h)*m)))-+c[B+68>>2];d=z*G+Y*E+K*d+(G*Q+E*q+d*J)+(($*G+ee*E+D*d)*T+(I*G+j*E+R*d)*S+(k*G+C*E+g*d)*m)-f*b;h=z*V+Y*H+K*h+(V*Q+H*q+h*J)+(($*V+ee*H+D*h)*T+(I*V+j*H+R*h)*S+(k*V+C*H+g*h)*m)-l*b;m=z*w+Y*v+K*y+(w*Q+v*q+y*J)+(($*w+ee*v+D*y)*T+(I*w+j*v+R*y)*S+(k*w+C*v+g*y)*m)-u*b;B=o[r+12>>2]|0;y=+c[B>>2];g=+c[B+4>>2];v=+c[B+8>>2];C=+c[B+16>>2];w=+c[B+20>>2];k=+c[B+24>>2];S=+c[B+32>>2];R=+c[B+36>>2];j=+c[B+40>>2];I=+c[B+48>>2];T=+c[B+52>>2];D=+c[B+56>>2];B=o[e+12>>2]|0;A=b<+c[B+752>>2];o[_+4>>2]=B;if(A){te=o[r+12>>2]|0;ue=f*+c[te+16>>2]+l*+c[te+20>>2]+u*+c[te+24>>2];be=f*+c[te+32>>2]+l*+c[te+36>>2]+u*+c[te+40>>2];c[P+48>>2]=+c[te>>2]*f+ +c[te+4>>2]*l+ +c[te+8>>2]*u;c[P+48+4>>2]=ue;c[P+48+8>>2]=be;c[P+48+12>>2]=0;c[P+32>>2]=v*m+(y*d+g*h)+I;c[P+32+4>>2]=d*C+h*w+m*k+T;c[P+32+8>>2]=d*S+h*R+m*j+D;c[P+32+12>>2]=0;GP[o[(o[_>>2]|0)+16>>2]&15](_,P+48|0,P+32|0,b)}s=s+1|0;r=o[e+20>>2]|0}while((s|0)<(r|0))}}do if((n[e+8>>0]|0?o[(o[e+12>>2]|0)+748>>2]|0:0)?(W=o[_+4>>2]|0,o[W+748>>2]|0):0){s=o[W+740>>2]|0;a=o[(o[_+8>>2]|0)+8>>2]|0;r=o[(o[_+12>>2]|0)+8>>2]|0;if((s|0)==(a|0)){lC(W,s+4|0,r+4|0);break}else{lC(W,r+4|0,a+4|0);break}}while(0);p=P;return}function VT(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 1}function NT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+12>>2]|0;if(!i)return;if(!(n[e+8>>0]|0))return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+12>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function XT(e){e=e|0;var t=0,i=0;o[e>>2]=4084;if(n[e+20>>0]|0){t=o[e+16>>2]|0;i=o[t+16>>2]|0;if(i){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);t=o[e+16>>2]|0}if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}}if(n[e+12>>0]|0){t=o[e+8>>2]|0;i=o[t+16>>2]|0;if(i){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);t=o[e+8>>2]|0}if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}}t=o[e+32>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+32>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+36>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+36>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+40>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+40>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+44>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+44>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+48>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+48>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+52>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+52>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+56>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+56>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+60>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+60>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+76>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+76>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+80>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+80>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+72>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+72>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+88>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+88>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+84>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+84>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+24>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+28>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+28>>2]|0;if(!t)return;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function HT(e){e=e|0;XT(e);qa(e);return}function ZT(e){e=e|0;return o[e+8>>2]|0}function UT(e){e=e|0;return o[e+16>>2]|0}function zT(e,t,i){e=e|0;t=t|0;i=i|0;do if(!((t|0)==8&(i|0)==8)){if((t|0)==8&(i|0)==1){t=e+76|0;break}if((t|0)==1&(i|0)==8){t=e+80|0;break}if(!(i|t)){t=e+72|0;break}if((t|0)<20&(i|0)==28){t=e+88|0;break}if((t|0)==28&(i|0)<20){t=e+84|0;break}if((t|0)<20){if((i|0)<20){t=e+32|0;break}if((i+-21|0)>>>0<9){t=e+36|0;break}}else{if((i|0)<20&(t+-21|0)>>>0<9){t=e+40|0;break}if((t|0)==31)if((i|0)==31){t=e+48|0;break}else{t=e+44|0;break}}if((i|0)==31){t=e+52|0;break}else{t=e+56|0;break}}else t=e+60|0;while(0);return o[t>>2]|0}function YT(e){e=e|0;return o[e+24>>2]|0}function KT(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;o[e>>2]=4084;o[5637]=(o[5637]|0)+1;i=Qa(379)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}c[i+308>>2]=9999999747378752e-20;r=i+332|0;n[r>>0]=n[r>>0]&-16;o[e+24>>2]=i;r=(o[t+20>>2]|0)==0;o[5637]=(o[5637]|0)+1;i=Qa(23)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}if(r){o[i>>2]=6948;o[e+28>>2]=i;r=e+28|0}else{o[i>>2]=6908;o[e+28>>2]=i;r=e+28|0}o[5637]=(o[5637]|0)+1;i=Qa(43)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}f=o[e+24>>2]|0;p=o[r>>2]|0;n[i+4>>0]=0;o[i>>2]=3924;o[i+16>>2]=0;o[i+20>>2]=3;o[i+12>>2]=f;o[i+8>>2]=p;o[e+32>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4116;o[e+36>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4136;o[e+40>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4156;o[e+44>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4176;o[e+48>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4196;o[e+52>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4216;o[e+56>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4236;o[e+60>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4256;o[e+76>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i>>2]=4256;o[e+80>>2]=i;n[i+4>>0]=1;o[5637]=(o[5637]|0)+1;i=Qa(27)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4276;o[e+72>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(35)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}n[i+4>>0]=0;o[i>>2]=4296;o[i+8>>2]=1;o[i+12>>2]=0;o[e+88>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa(35)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i>>2]=4296;o[i+8>>2]=1;o[i+12>>2]=0;o[e+84>>2]=i;n[i+4>>0]=1;p=o[t+16>>2]|0;p=(p|0)>80?p:80;i=o[t>>2]|0;if(!i){n[e+12>>0]=1;o[5637]=(o[5637]|0)+1;i=Qa(39)|0;if(!i)f=0;else{o[(i+4+15&-16)+-4>>2]=i;f=i+4+15&-16}i=o[t+8>>2]|0;o[f>>2]=772;r=f+4|0;o[r>>2]=i;o[5637]=(o[5637]|0)+1;i=Qa((i*772|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[f+16>>2]=i;o[f+12>>2]=i;r=o[r>>2]|0;o[f+8>>2]=r;if(r+-1|0){_=o[f>>2]|0;s=r+-1|0;a=i;do{l=a;a=a+_|0;o[l>>2]=a;s=s+-1|0}while((s|0)!=0);i=i+(te(_,r+-1|0)|0)|0}o[i>>2]=0;o[e+8>>2]=f}else{n[e+12>>0]=0;o[e+8>>2]=i}i=o[t+4>>2]|0;if(i|0){n[e+20>>0]=0;o[e+16>>2]=i;return}n[e+20>>0]=1;o[5637]=(o[5637]|0)+1;i=Qa(39)|0;if(!i)f=0;else{o[(i+4+15&-16)+-4>>2]=i;f=i+4+15&-16}i=o[t+12>>2]|0;o[f>>2]=p;r=f+4|0;o[r>>2]=i;i=te(i,p)|0;o[5637]=(o[5637]|0)+1;i=Qa(i+19|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[f+16>>2]=i;o[f+12>>2]=i;r=o[r>>2]|0;o[f+8>>2]=r;if(r+-1|0){_=o[f>>2]|0;s=r+-1|0;a=i;do{l=a;a=a+_|0;o[l>>2]=a;s=s+-1|0}while((s|0)!=0);i=i+(te(_,r+-1|0)|0)|0}o[i>>2]=0;o[e+16>>2]=f;return}function QT(e){e=e|0;return}function qT(e){e=e|0;qa(e);return}function JT(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,80)|0;t=o[t>>2]|0;o[e+4>>2]=t;o[e>>2]=3720;n[e+8>>0]=0;o[e+12>>2]=3748;o[e+60>>2]=t;o[e+64>>2]=0;o[e+16>>2]=i;o[e+20>>2]=r;t=gP[o[(o[t>>2]|0)+12>>2]&63](t,o[i+8>>2]|0,o[r+8>>2]|0)|0;o[e+76>>2]=t;r=o[e+60>>2]|0;aP[o[(o[r>>2]|0)+20>>2]&127](r,t);return e|0}function $T(e){e=e|0;qa(e);return}function eD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,80)|0;t=o[t>>2]|0;o[e+4>>2]=t;o[e>>2]=3720;n[e+8>>0]=1;o[e+12>>2]=3748;o[e+60>>2]=t;o[e+64>>2]=0;o[e+16>>2]=r;o[e+20>>2]=i;t=gP[o[(o[t>>2]|0)+12>>2]&63](t,o[r+8>>2]|0,o[i+8>>2]|0)|0;o[e+76>>2]=t;r=o[e+60>>2]|0;aP[o[(o[r>>2]|0)+20>>2]&127](r,t);return e|0}function tD(e){e=e|0;qa(e);return}function iD(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,44)|0;dk(e,t,i,n,0);return e|0}function nD(e){e=e|0;qa(e);return}function rD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0;p=o[t>>2]|0;p=DP[o[(o[p>>2]|0)+56>>2]&31](p,76)|0;dk(p,t,i,r,0);o[p>>2]=3656;n[p+64>>0]=1;o[p+60>>2]=0;o[p+52>>2]=0;o[p+56>>2]=0;o[5637]=(o[5637]|0)+1;e=Qa(83)|0;if(!e)f=0;else{o[(e+4+15&-16)+-4>>2]=e;f=e+4+15&-16}o[f>>2]=4432;s=f+20|0;n[s>>0]=1;a=f+16|0;o[a>>2]=0;t=f+8|0;o[t>>2]=0;c=f+12|0;o[c>>2]=0;n[f+40>>0]=1;o[f+36>>2]=0;o[f+28>>2]=0;o[f+32>>2]=0;n[f+60>>0]=1;o[f+56>>2]=0;o[f+48>>2]=0;o[f+52>>2]=0;o[5637]=(o[5637]|0)+1;e=Qa(43)|0;if(!e)_=0;else{o[(e+4+15&-16)+-4>>2]=e;_=e+4+15&-16}e=o[t>>2]|0;if((e|0)>0){t=0;do{l=_+(t*12|0)|0;u=(o[a>>2]|0)+(t*12|0)|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];t=t+1|0}while((t|0)!=(e|0))}e=o[a>>2]|0;if(!e){n[s>>0]=1;o[a>>2]=_;o[c>>2]=2;WD(f);u=p+44|0;o[u>>2]=f;u=i+4|0;u=o[u>>2]|0;u=u+72|0;u=o[u>>2]|0;l=p+68|0;o[l>>2]=u;l=r+4|0;l=o[l>>2]|0;l=l+72|0;l=o[l>>2]|0;u=p+72|0;o[u>>2]=l;return p|0}if(n[s>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0)}o[a>>2]=0;n[s>>0]=1;o[a>>2]=_;o[c>>2]=2;WD(f);u=p+44|0;o[u>>2]=f;u=i+4|0;u=o[u>>2]|0;u=u+72|0;u=o[u>>2]|0;l=p+68|0;o[l>>2]=u;l=r+4|0;l=o[l>>2]|0;l=l+72|0;l=o[l>>2]|0;u=p+72|0;o[u>>2]=l;return p|0}function oD(e){e=e|0;qa(e);return}function _D(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,44)|0;dk(e,t,i,n,1);return e|0}function sD(e){e=e|0;qa(e);return}function aD(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,8)|0;o[e+4>>2]=o[t>>2];o[e>>2]=4316;return e|0}function cD(e){e=e|0;qa(e);return}function fD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,16)|0;t=o[t>>2]|0;o[e+4>>2]=t;o[e>>2]=4512;n[e+8>>0]=0;o[e+12>>2]=0;o[e+12>>2]=gP[o[(o[t>>2]|0)+12>>2]&63](t,o[i+8>>2]|0,o[r+8>>2]|0)|0;n[e+8>>0]=1;return e|0}function pD(e){e=e|0;qa(e);return}function lD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0;_=o[t>>2]|0;_=DP[o[(o[_>>2]|0)+56>>2]&31](_,20)|0;s=o[t+4>>2]|0;e=n[e+4>>0]|0;t=o[t>>2]|0;o[_+4>>2]=t;o[_>>2]=4540;n[_+8>>0]=0;o[_+12>>2]=s;n[_+16>>0]=e;if(s|0)return _|0;o[_+12>>2]=gP[o[(o[t>>2]|0)+12>>2]&63](t,o[i+8>>2]|0,o[r+8>>2]|0)|0;n[_+8>>0]=1;return _|0}function uD(e){e=e|0;qa(e);return}function bD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;e=o[t>>2]|0;e=DP[o[(o[e>>2]|0)+56>>2]&31](e,16)|0;t=o[t>>2]|0;o[e+4>>2]=t;o[e>>2]=3016;n[e+8>>0]=0;o[e+12>>2]=0;if(!(gP[o[(o[t>>2]|0)+24>>2]&63](t,o[i+8>>2]|0,o[r+8>>2]|0)|0))return e|0;t=o[e+4>>2]|0;o[e+12>>2]=gP[o[(o[t>>2]|0)+12>>2]&63](t,o[i+8>>2]|0,o[r+8>>2]|0)|0;n[e+8>>0]=1;return e|0}function dD(e){e=e|0;qa(e);return}function hD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,c=0;s=o[t>>2]|0;s=DP[o[(o[s>>2]|0)+56>>2]&31](s,28)|0;c=(n[e+4>>0]|0)==0;a=o[e+8>>2]|0;_=o[e+12>>2]|0;e=o[t>>2]|0;o[s+4>>2]=e;o[s>>2]=4056;n[s+8>>0]=0;o[s+12>>2]=0;if(c){n[s+16>>0]=0;o[s+20>>2]=a;o[s+24>>2]=_;if(!(gP[o[(o[e>>2]|0)+24>>2]&63](e,o[i+8>>2]|0,o[r+8>>2]|0)|0))return s|0;c=o[s+4>>2]|0;o[s+12>>2]=gP[o[(o[c>>2]|0)+12>>2]&63](c,o[i+8>>2]|0,o[r+8>>2]|0)|0;n[s+8>>0]=1;return s|0}else{n[s+16>>0]=1;o[s+20>>2]=a;o[s+24>>2]=_;if(!(gP[o[(o[e>>2]|0)+24>>2]&63](e,o[r+8>>2]|0,o[i+8>>2]|0)|0))return s|0;c=o[s+4>>2]|0;o[s+12>>2]=gP[o[(o[c>>2]|0)+12>>2]&63](c,o[r+8>>2]|0,o[i+8>>2]|0)|0;n[s+8>>0]=1;return s|0}return 0}function mD(e){e=e|0;qa(e);return}function yD(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return}function gD(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 1}function vD(e,t){e=e|0;t=t|0;return}function CD(e){e=e|0;var t=0;o[e>>2]=4344;t=o[e+300>>2]|0;if(t|0){if(n[e+304>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+300>>2]=0}n[e+304>>0]=1;o[e+300>>2]=0;o[e+292>>2]=0;o[e+296>>2]=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(!t){n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}function wD(e){e=e|0;var t=0;o[e>>2]=4344;t=o[e+300>>2]|0;if(t|0){if(n[e+304>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+300>>2]=0}n[e+304>>0]=1;o[e+300>>2]=0;o[e+292>>2]=0;o[e+296>>2]=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(t|0){if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0}n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function kD(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0;_=o[t>>2]|0;t=o[e+292>>2]|0;e:do if((t|0)>0){r=o[e+300>>2]|0;i=0;while(1){if((o[r+(i<<2)>>2]|0)==(_|0))break;i=i+1|0;if((i|0)>=(t|0))break e}if((i|0)!=(t|0))return}while(0);if((t|0)==(o[e+296>>2]|0)?(s=t|0?t<<1:1,(t|0)<(s|0)):0){if(!s)r=0;else{o[5637]=(o[5637]|0)+1;t=Qa((s<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}r=t;t=o[e+292>>2]|0}if((t|0)>0){i=0;do{o[r+(i<<2)>>2]=o[(o[e+300>>2]|0)+(i<<2)>>2];i=i+1|0}while((i|0)!=(t|0))}i=o[e+300>>2]|0;if(i){if(n[e+304>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);t=o[e+292>>2]|0}o[e+300>>2]=0}n[e+304>>0]=1;o[e+300>>2]=r;o[e+296>>2]=s}o[(o[e+300>>2]|0)+(t<<2)>>2]=_;o[e+292>>2]=t+1;return}function SD(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0;_=o[e+292>>2]|0;if((_|0)<=0)return;t=o[t>>2]|0;r=o[e+300>>2]|0;i=0;while(1){n=r+(i<<2)|0;if((o[n>>2]|0)==(t|0))break;i=i+1|0;if((i|0)>=(_|0)){s=7;break}}if((s|0)==7)return;if((i|0)>=(_|0))return;o[n>>2]=o[r+(_+-1<<2)>>2];o[e+292>>2]=_+-1;return}function RD(e){e=e|0;var t=0;o[e>>2]=4388;t=o[e+308>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+308>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e>>2]=4344;t=o[e+300>>2]|0;if(t|0){if(n[e+304>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+300>>2]=0}n[e+304>>0]=1;o[e+300>>2]=0;o[e+292>>2]=0;o[e+296>>2]=0;o[e>>2]=3156;t=o[e+276>>2]|0;if(!t){n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}if(n[e+280>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+276>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;e=e+272|0;o[e>>2]=0;return}function jD(e){e=e|0;RD(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function ID(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,c=0;if(!i)i=o[e+188>>2]|0;c=o[t>>2]|0;r=o[e+292>>2]|0;e:do if((r|0)>0){s=o[e+300>>2]|0;_=0;while(1){if((o[s+(_<<2)>>2]|0)==(c|0))break;_=_+1|0;if((_|0)>=(r|0))break e}if((_|0)!=(r|0))return}while(0);if((r|0)==(o[e+296>>2]|0)?(a=r|0?r<<1:1,(r|0)<(a|0)):0){if(!a)s=0;else{\no[5637]=(o[5637]|0)+1;r=Qa((a<<2|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}s=r;r=o[e+292>>2]|0}if((r|0)>0){_=0;do{o[s+(_<<2)>>2]=o[(o[e+300>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[e+300>>2]|0;if(_){if(n[e+304>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[e+292>>2]|0}o[e+300>>2]=0}n[e+304>>0]=1;o[e+300>>2]=s;o[e+296>>2]=a}o[(o[e+300>>2]|0)+(r<<2)>>2]=c;o[e+292>>2]=r+1;e=o[e+308>>2]|0;gP[o[(o[e>>2]|0)+8>>2]&63](e,i,t)|0;return}function TD(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,c=0,f=0;c=o[t>>2]|0;if(!n)n=o[e+188>>2]|0;s=o[e+292>>2]|0;if((s|0)<=0)return;a=o[e+300>>2]|0;r=0;while(1){_=a+(r<<2)|0;if((o[_>>2]|0)==(c|0))break;r=r+1|0;if((r|0)>=(s|0)){f=9;break}}if((f|0)==9)return;if((r|0)>=(s|0))return;o[_>>2]=o[a+(s+-1<<2)>>2];o[e+292>>2]=s+-1;f=o[e+308>>2]|0;bP[o[(o[f>>2]|0)+12>>2]&31](f,n,t,i)|0;return}function DD(e){e=e|0;var t=0;o[e+164>>2]=1065353216;o[e+168>>2]=1065353216;o[e+172>>2]=1065353216;c[e+176>>2]=0;o[e+180>>2]=0;c[e+184>>2]=0xde0b6b000000000;o[e+188>>2]=0;o[e+188+4>>2]=0;o[e+188+8>>2]=0;o[e+188+12>>2]=0;o[e+204>>2]=1;o[e+208>>2]=-1;o[e+212>>2]=-1;o[e+216>>2]=1;c[e+220>>2]=0;c[e+224>>2]=.5;c[e+228>>2]=0;c[e+232>>2]=0;o[e+240>>2]=0;o[e+244>>2]=-1;c[e+248>>2]=1;c[e+252>>2]=0;c[e+256>>2]=0;o[e+260>>2]=0;n[e+280>>0]=1;o[e+276>>2]=0;o[e+268>>2]=0;o[e+272>>2]=0;o[e+284>>2]=0;o[e+4>>2]=1065353216;o[e+8>>2]=0;o[e+8+4>>2]=0;o[e+8+8>>2]=0;o[e+8+12>>2]=0;o[e+24>>2]=1065353216;o[e+28>>2]=0;o[e+28+4>>2]=0;o[e+28+8>>2]=0;o[e+28+12>>2]=0;o[e+44>>2]=1065353216;o[e+48>>2]=0;o[e+48+4>>2]=0;o[e+48+8>>2]=0;o[e+48+12>>2]=0;o[e+48+16>>2]=0;n[e+304>>0]=1;o[e+300>>2]=0;o[e+292>>2]=0;o[e+296>>2]=0;o[e+236>>2]=4;o[e>>2]=4388;o[5637]=(o[5637]|0)+1;t=Qa(91)|0;if(!t){t=0;Nx(t);e=e+308|0;o[e>>2]=t;return}o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16;Nx(t);e=e+308|0;o[e>>2]=t;return}function OD(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=+_;var s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0;B=p;p=p+288|0;o[B+144>>2]=o[i>>2];o[B+144+4>>2]=o[i+4>>2];o[B+144+8>>2]=o[i+8>>2];o[B+144+12>>2]=o[i+12>>2];o[B+144+16>>2]=o[i+16>>2];o[B+144+16+4>>2]=o[i+16+4>>2];o[B+144+16+8>>2]=o[i+16+8>>2];o[B+144+16+12>>2]=o[i+16+12>>2];o[B+144+32>>2]=o[i+32>>2];o[B+144+32+4>>2]=o[i+32+4>>2];o[B+144+32+8>>2]=o[i+32+8>>2];o[B+144+32+12>>2]=o[i+32+12>>2];o[B+144+48>>2]=o[i+48>>2];o[B+144+48+4>>2]=o[i+48+4>>2];o[B+144+48+8>>2]=o[i+48+8>>2];o[B+144+48+12>>2]=o[i+48+12>>2];o[B+80>>2]=o[n>>2];o[B+80+4>>2]=o[n+4>>2];o[B+80+8>>2]=o[n+8>>2];o[B+80+12>>2]=o[n+12>>2];o[B+80+16>>2]=o[n+16>>2];o[B+80+16+4>>2]=o[n+16+4>>2];o[B+80+16+8>>2]=o[n+16+8>>2];o[B+80+16+12>>2]=o[n+16+12>>2];o[B+80+32>>2]=o[n+32>>2];o[B+80+32+4>>2]=o[n+32+4>>2];o[B+80+32+8>>2]=o[n+32+8>>2];o[B+80+32+12>>2]=o[n+32+12>>2];o[B+80+48>>2]=o[n+48>>2];o[B+80+48+4>>2]=o[n+48+4>>2];o[B+80+48+8>>2]=o[n+48+8>>2];o[B+80+48+12>>2]=o[n+48+12>>2];f=+c[B+80+52>>2]-+c[B+144+52>>2];E=+c[B+80+56>>2]-+c[B+144+56>>2];c[B+32>>2]=+c[B+80+48>>2]-+c[B+144+48>>2];c[B+32+4>>2]=f;c[B+32+8>>2]=E;c[B+32+12>>2]=0;Yw(B+144|0,B+80|0,B+224|0,B+208|0);E=+c[B+208>>2];f=E*+c[B+224+4>>2];A=E*+c[B+224+8>>2];c[B+16>>2]=+c[B+224>>2]*E;c[B+16+4>>2]=f;c[B+16+8>>2]=A;c[B+16+12>>2]=0;o[B+224+4>>2]=0;o[B+224+4+4>>2]=0;o[B+224+24>>2]=0;o[B+224+24+4>>2]=0;W=B+224+44|0;o[W>>2]=0;o[W+4>>2]=0;o[W+8>>2]=0;o[W+12>>2]=0;o[W+16>>2]=0;Kw(B+144|0,B);A=+c[B>>2];f=+c[B+4>>2];E=+c[B+8>>2];F=+c[B+12>>2];s=A*(2/(A*A+f*f+E*E+F*F));b=f*(2/(A*A+f*f+E*E+F*F));G=E*(2/(A*A+f*f+E*E+F*F));c[B+224>>2]=1-(f*b+E*G);c[B+224+4>>2]=A*b-F*G;c[B+224+8>>2]=A*G+F*b;c[B+224+12>>2]=0;c[B+224+16>>2]=A*b+F*G;c[B+224+20>>2]=1-(A*s+E*G);c[B+224+24>>2]=f*G-F*s;c[B+224+28>>2]=0;c[B+224+32>>2]=A*G-F*b;c[B+224+36>>2]=f*G+F*s;c[B+224+40>>2]=1-(A*s+f*b);c[W>>2]=0;vS(t,B+224|0,B+32|0,B+16|0,B+64|0,B+48|0);if((o[e+292>>2]|0)<=0){p=B;return}P=0;do{d=o[(o[e+300>>2]|0)+(P<<2)>>2]|0;if(DP[o[(o[r>>2]|0)+8>>2]&31](r,o[d+188>>2]|0)|0?(T=o[d+192>>2]|0,HP[o[(o[T>>2]|0)+8>>2]&127](T,d+4|0,B+208|0,B+32|0),h=+c[B+208>>2]+ +c[B+64>>2],m=+c[B+208+4>>2]+ +c[B+64+4>>2],y=+c[B+208+8>>2]+ +c[B+64+8>>2],c[B+208>>2]=h,c[B+208+4>>2]=m,c[B+208+8>>2]=y,c[B+208+12>>2]=0,g=+c[B+32>>2]+ +c[B+48>>2],v=+c[B+32+4>>2]+ +c[B+48+4>>2],C=+c[B+32+8>>2]+ +c[B+48+8>>2],c[B+32>>2]=g,c[B+32+4>>2]=v,c[B+32+8>>2]=C,c[B+32+12>>2]=0,w=+c[i+48>>2]-(g+h)*.5,k=+c[i+52>>2]-(v+m)*.5,S=+c[i+56>>2]-(C+y)*.5,R=+c[n+48>>2]-(g+h)*.5,j=+c[n+52>>2]-(v+m)*.5,I=+c[n+56>>2]-(C+y)*.5,T=w<-((g-h)*.5)|(w>(g-h)*.5?8:0)|(k<-((v-m)*.5)?2:0)|(k>(v-m)*.5?16:0)|(S<-((C-y)*.5)?4:0)|(S>(C-y)*.5?32:0),D=R<-((g-h)*.5)|(R>(g-h)*.5?8:0)|(j<-((v-m)*.5)?2:0)|(j>(v-m)*.5?16:0)|(I<-((C-y)*.5)?4:0)|(I>(C-y)*.5?32:0),(T&D|0)==0):0){M=1;W=0;s=0;a=1065353216;b=1;while(1){if(!(M&T)){if((M&D|0)!=0?(O=(-w-b*((g-h)*.5))/(R-w),O<(o[u>>2]=a,+c[u>>2])):0)a=(c[u>>2]=O,o[u>>2]|0)}else{f=(-w-b*((g-h)*.5))/(R-w);if(s<=f)s=f}l=M<<1;if(!(l&T))if((l&D|0)!=0?(L=(-k-b*((v-m)*.5))/(j-k),L<(o[u>>2]=a,+c[u>>2])):0){f=s;a=(c[u>>2]=L,o[u>>2]|0)}else f=s;else{f=(-k-b*((v-m)*.5))/(j-k);if(!(s<=f))f=s}l=M<<2;if(!(l&T))if((l&D|0)!=0?(x=(-S-b*((C-y)*.5))/(I-S),x<(o[u>>2]=a,+c[u>>2])):0){s=f;a=(c[u>>2]=x,o[u>>2]|0)}else s=f;else{s=(-S-b*((C-y)*.5))/(I-S);if(!(f<=s))s=f}W=W+1|0;if((W|0)==2)break;else{M=M<<3;b=-1}}if(s<=(o[u>>2]=a,+c[u>>2])){W=o[d+192>>2]|0;o[B+224>>2]=0;o[B+224+4>>2]=W;o[B+224+8>>2]=d;o[B+224+12>>2]=d+4;o[B+224+16>>2]=-1;o[B+224+20>>2]=-1;Fw(t,B+144|0,B+80|0,B+224|0,r,_)}}P=P+1|0}while((P|0)<(o[e+292>>2]|0));p=B;return}function LD(e){e=e|0;var t=0;o[e>>2]=4432;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function xD(e){e=e|0;LD(e);qa(e);return}function MD(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0;o[4990]=(o[4990]|0)+1;_=((i<<16|t)+~((i<<16|t)<<15)>>10^(i<<16|t)+~((i<<16|t)<<15))*9|0;p=o[e+36>>2]|0;_=p+(((o[e+12>>2]|0)+-1&((_>>6^_)+~((_>>6^_)<<11)>>16^(_>>6^_)+~((_>>6^_)<<11)))<<2)|0;r=o[_>>2]|0;if((r|0)==-1){u=0;return u|0}l=o[e+16>>2]|0;n=r;while(1){f=l+(n*12|0)|0;if((o[f>>2]|0)==(t|0)?(o[l+(n*12|0)+4>>2]|0)==(i|0):0)break;n=o[(o[e+56>>2]|0)+(n<<2)>>2]|0;if((n|0)==-1){n=0;u=21;break}}if((u|0)==21)return n|0;if(!f){u=0;return u|0}c=o[l+(n*12|0)+8>>2]|0;a=(n*12|0)/12|0;t=o[e+56>>2]|0;if((r|0)!=(a|0)){while(1){i=t+(r<<2)|0;n=o[i>>2]|0;if((n|0)==(a|0))break;else r=n}n=o[t+(a<<2)>>2]|0;if((r|0)==-1)u=11;else o[i>>2]=n}else{n=o[t+(r<<2)>>2]|0;u=11}if((u|0)==11)o[_>>2]=n;_=(o[e+8>>2]|0)+-1|0;if((_|0)==(a|0)){o[e+8>>2]=a;u=c;return u|0}s=o[l+(_*12|0)+4>>2]<<16|o[l+(_*12|0)>>2];s=(s+~(s<<15)>>10^s+~(s<<15))*9|0;s=((s>>6^s)+~((s>>6^s)<<11)>>16^(s>>6^s)+~((s>>6^s)<<11))&(o[e+12>>2]|0)+-1;n=o[p+(s<<2)>>2]|0;t=o[e+56>>2]|0;if((n|0)!=(_|0)){r=n;while(1){i=t+(r<<2)|0;n=o[i>>2]|0;if((n|0)==(_|0))break;else r=n}n=o[t+(_<<2)>>2]|0;if((r|0)==-1)u=19;else o[i>>2]=n}else{n=o[t+(_<<2)>>2]|0;u=19}if((u|0)==19)o[p+(s<<2)>>2]=n;o[f>>2]=o[l+(_*12|0)>>2];o[f+4>>2]=o[l+(_*12|0)+4>>2];o[f+8>>2]=o[l+(_*12|0)+8>>2];u=(o[e+36>>2]|0)+(s<<2)|0;o[(o[e+56>>2]|0)+(a<<2)>>2]=o[u>>2];o[u>>2]=a;o[e+8>>2]=(o[e+8>>2]|0)+-1;u=c;return u|0}function PD(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0;o[4991]=(o[4991]|0)+1;f=((i<<16|t)+~((i<<16|t)<<15)>>10^(i<<16|t)+~((i<<16|t)<<15))*9|0;f=(f>>6^f)+~((f>>6^f)<<11)>>16^(f>>6^f)+~((f>>6^f)<<11);p=o[e+12>>2]|0;r=o[(o[e+36>>2]|0)+((p+-1&f)<<2)>>2]|0;e:do if((r|0)!=-1){s=o[e+16>>2]|0;while(1){_=s+(r*12|0)|0;if((o[_>>2]|0)==(t|0)?(o[s+(r*12|0)+4>>2]|0)==(i|0):0)break;r=o[(o[e+56>>2]|0)+(r<<2)>>2]|0;if((r|0)==-1)break e}if(_|0){e=_;return e|0}}while(0);c=o[e+8>>2]|0;if((c|0)==(p|0)){s=p|0?p<<1:1;if((p|0)<(s|0)){if(!s){r=0;_=p}else{o[5637]=(o[5637]|0)+1;r=Qa((s*12|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}_=o[e+8>>2]|0}if((_|0)>0){a=0;do{l=r+(a*12|0)|0;u=(o[e+16>>2]|0)+(a*12|0)|0;o[l>>2]=o[u>>2];o[l+4>>2]=o[u+4>>2];o[l+8>>2]=o[u+8>>2];a=a+1|0}while((a|0)!=(_|0))}_=o[e+16>>2]|0;if(_|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=r;o[e+12>>2]=s;r=o[e+8>>2]|0}else{r=p;s=p}}else{r=c;s=p}o[e+8>>2]=r+1;_=o[e+16>>2]|0;if((p|0)<(s|0)){WD(e);r=(o[e+12>>2]|0)+-1&f}else r=p+-1&f;o[_+(c*12|0)>>2]=t;o[_+(c*12|0)+4>>2]=i;o[_+(c*12|0)+8>>2]=0;u=(o[e+36>>2]|0)+(r<<2)|0;o[(o[e+56>>2]|0)+(c<<2)>>2]=o[u>>2];o[u>>2]=c;u=_+(c*12|0)|0;return u|0}function WD(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,c=0;a=o[e+12>>2]|0;c=o[e+28>>2]|0;if((a|0)<=(c|0))return;if((a|0)>=(c|0)){do if((o[e+32>>2]|0)<(a|0)){if(!a){t=0;i=c}else{o[5637]=(o[5637]|0)+1;t=Qa((a<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+28>>2]|0}r=o[e+36>>2]|0;if((i|0)<=0){if(!r){n[e+40>>0]=1;o[e+36>>2]=t;o[e+32>>2]=a;break}}else{_=0;do{o[t+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0))}if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[e+40>>0]=1;o[e+36>>2]=t;o[e+32>>2]=a}else t=o[e+36>>2]|0;while(0);Lc(t+(c<<2)|0,0,a-c<<2|0)|0}o[e+28>>2]=a;s=o[e+48>>2]|0;if((a|0)>(s|0)){do if((o[e+52>>2]|0)<(a|0)){if(!a){t=0;i=s}else{o[5637]=(o[5637]|0)+1;t=Qa((a<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+48>>2]|0}r=o[e+56>>2]|0;if((i|0)<=0){if(!r){n[e+60>>0]=1;o[e+56>>2]=t;o[e+52>>2]=a;break}}else{_=0;do{o[t+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0))}if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[e+60>>0]=1;o[e+56>>2]=t;o[e+52>>2]=a}else t=o[e+56>>2]|0;while(0);Lc(t+(s<<2)|0,0,a-s<<2|0)|0}o[e+48>>2]=a;if((a|0)>0){Lc(o[e+36>>2]|0,-1,a<<2|0)|0;Lc(o[e+56>>2]|0,-1,a<<2|0)|0}if((c|0)<=0)return;t=o[e+16>>2]|0;i=o[e+36>>2]|0;r=o[e+56>>2]|0;_=0;do{a=o[t+(_*12|0)+4>>2]<<16|o[t+(_*12|0)>>2];a=(a+~(a<<15)>>10^a+~(a<<15))*9|0;a=i+((((a>>6^a)+~((a>>6^a)<<11)>>16^(a>>6^a)+~((a>>6^a)<<11))&(o[e+12>>2]|0)+-1)<<2)|0;o[r+(_<<2)>>2]=o[a>>2];o[a>>2]=_;_=_+1|0}while((_|0)!=(c|0));return}function BD(e){e=e|0;return o[e+16>>2]|0}function AD(e){e=e|0;var t=0,i=0,r=0,_=0,s=0;t=o[e+16>>2]|0;if(t|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;if((o[e+12>>2]|0)>=2){WD(e);return}o[5637]=(o[5637]|0)+1;t=Qa(43)|0;if(!t)r=0;else{o[(t+4+15&-16)+-4>>2]=t;r=t+4+15&-16}t=o[e+8>>2]|0;if((t|0)>0){i=0;do{_=r+(i*12|0)|0;s=(o[e+16>>2]|0)+(i*12|0)|0;o[_>>2]=o[s>>2];o[_+4>>2]=o[s+4>>2];o[_+8>>2]=o[s+8>>2];i=i+1|0}while((i|0)!=(t|0))}t=o[e+16>>2]|0;if(t|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=r;o[e+12>>2]=2;WD(e);return}function FD(e){e=e|0;qa(e);return}function GD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=+r;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;T=p;p=p+192|0;R=o[e+4>>2]|0;if(+c[R+752>>2]<r){p=T;return}I=o[R+740>>2]|0;S=(o[e+8>>2]|0)+8|0;j=o[S>>2]|0;s=+c[i>>2];m=+c[t>>2]*r+s;a=+c[i+4>>2];y=+c[t+4>>2]*r+a;_=+c[i+8>>2];g=+c[t+8>>2]*r+_;k=(o[e+12>>2]|0)+8|0;d=o[k>>2]|0;f=+c[d+52>>2];l=+c[d+56>>2];if((I|0)!=(j|0)){w=g-+c[d+60>>2];s=s-+c[j+52>>2];a=a-+c[j+56>>2];_=_-+c[j+60>>2];v=(m-f)*+c[d+4>>2]+(y-l)*+c[d+20>>2]+w*+c[d+36>>2];C=(m-f)*+c[d+8>>2]+(y-l)*+c[d+24>>2]+w*+c[d+40>>2];w=(m-f)*+c[d+12>>2]+(y-l)*+c[d+28>>2]+w*+c[d+44>>2];u=s*+c[j+4>>2]+a*+c[j+20>>2]+_*+c[j+36>>2];b=s*+c[j+8>>2]+a*+c[j+24>>2]+_*+c[j+40>>2];_=s*+c[j+12>>2]+a*+c[j+28>>2]+_*+c[j+44>>2]}else{b=m-+c[I+52>>2];u=y-+c[I+56>>2];w=g-+c[I+60>>2];_=_-+c[d+60>>2];v=b*+c[I+4>>2]+u*+c[I+20>>2]+w*+c[I+36>>2];C=b*+c[I+8>>2]+u*+c[I+24>>2]+w*+c[I+40>>2];w=b*+c[I+12>>2]+u*+c[I+28>>2]+w*+c[I+44>>2];u=(s-f)*+c[d+4>>2]+(a-l)*+c[d+20>>2]+_*+c[d+36>>2];b=(s-f)*+c[d+8>>2]+(a-l)*+c[d+24>>2]+_*+c[d+40>>2];_=(s-f)*+c[d+12>>2]+(a-l)*+c[d+28>>2]+_*+c[d+44>>2]}c[T>>2]=v;c[T+4>>2]=C;c[T+8>>2]=w;c[T+12>>2]=0;c[T+16>>2]=u;c[T+20>>2]=b;c[T+24>>2]=_;c[T+28>>2]=0;o[T+64>>2]=o[t>>2];o[T+64+4>>2]=o[t+4>>2];o[T+64+8>>2]=o[t+8>>2];o[T+64+12>>2]=o[t+12>>2];c[T+80>>2]=r;c[T+84>>2]=0;c[T+88>>2]=0;c[T+92>>2]=0;o[T+112>>2]=0;n[T+116>>0]=0;o[T+120>>2]=0;o[T+120+4>>2]=0;o[T+120+8>>2]=0;o[T+120+12>>2]=0;o[T+120+16>>2]=0;o[T+120+20>>2]=0;o[T+120+24>>2]=0;o[T+120+28>>2]=0;c[T+48>>2]=m;c[T+52>>2]=y;c[T+56>>2]=g;c[T+60>>2]=0;o[T+32>>2]=o[i>>2];o[T+32+4>>2]=o[i+4>>2];o[T+32+8>>2]=o[i+8>>2];o[T+32+12>>2]=o[i+12>>2];_=+c[R+752>>2];i=o[R+748>>2]|0;if((i|0)>0){h=0;d=-1;f=_*_;while(1){_=+c[R+4+(h*184|0)>>2]-v;s=+c[R+4+(h*184|0)+4>>2]-C;a=+c[R+4+(h*184|0)+8>>2]-w;t=_*_+s*s+a*a<f;d=t?h:d;h=h+1|0;if((h|0)==(i|0))break;else f=t?_*_+s*s+a*a:f}}else d=-1;h=o[S>>2]|0;S=o[k>>2]|0;_=+c[h+224>>2]*+c[S+224>>2];_=_<-10?-10:_;c[T+84>>2]=_>10?10:_;c[T+92>>2]=+c[h+228>>2]*+c[S+228>>2];_=+c[h+232>>2]*+c[S+232>>2];_=_<-10?-10:_;c[T+88>>2]=_>10?10:_;_=+c[T+72>>2];S=+N(+_)>.7071067690849304;f=+c[T+68>>2];if(S){w=1/+X(+(_*_+f*f));u=+c[T+64>>2];l=-(w*f*u);u=u*-(w*_);b=-(w*_);s=(_*_+f*f)*w;a=0;_=w*f}else{s=+c[T+64>>2];a=1/+X(+(s*s+f*f));l=_*-(f*a);u=(s*s+f*f)*a;b=a*s;s=-(a*s*_);a=-(f*a);_=0}c[T+152>>2]=a;c[T+156>>2]=b;c[T+160>>2]=_;c[T+168>>2]=s;c[T+172>>2]=l;c[T+176>>2]=u;k=o[e+20>>2]|0;h=o[e+16>>2]|0;S=o[e+28>>2]|0;e=o[e+24>>2]|0;o[T+96>>2]=(I|0)!=(j|0)?k:h;o[T+100>>2]=(I|0)!=(j|0)?h:k;o[T+104>>2]=(I|0)!=(j|0)?S:e;o[T+108>>2]=(I|0)!=(j|0)?e:S;if((d|0)>-1){e=R+4+(d*184|0)+148|0;I=o[e>>2]|0;i=R+4+(d*184|0)+120|0;t=o[i>>2]|0;k=R+4+(d*184|0)+124|0;h=o[k>>2]|0;j=R+4+(d*184|0)+128|0;S=o[j>>2]|0;D=R+4+(d*184|0)+112|0;O=o[D>>2]|0;Wc(R+4+(d*184|0)|0,T|0,184)|0;o[D>>2]=O;o[i>>2]=t;o[k>>2]=h;o[j>>2]=S;o[e>>2]=I}else pC(R,T)|0;p=T;return}function ED(e){e=e|0;var t=0;o[e>>2]=4488;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+16>>2]|0;if(!t){t=e+12|0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[t>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;t=e+12|0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[t>>2]=0;return}function VD(e){e=e|0;ED(e);qa(e);return}function ND(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0;r=o[t+8>>2]|0;if((r|0)>0){_=o[t+16>>2]|0;a=0;i=0;do{s=o[_+(a<<2)>>2]|0;if(!(o[s+204>>2]&3)){o[s+208>>2]=i;i=i+1|0}o[s+212>>2]=-1;c[s+248>>2]=1;a=a+1|0}while((a|0)!=(r|0));a=i}else a=0;s=o[e+8>>2]|0;if((s|0)<(a|0)){if((o[e+12>>2]|0)<(a|0)){if(!a){i=0;r=s}else{o[5637]=(o[5637]|0)+1;i=Qa((a<<3|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[e+8>>2]|0}if((r|0)>0){_=0;do{l=(o[e+16>>2]|0)+(_<<3)|0;f=o[l+4>>2]|0;p=i+(_<<3)|0;o[p>>2]=o[l>>2];o[p+4>>2]=f;_=_+1|0}while((_|0)!=(r|0))}r=o[e+16>>2]|0;if(r|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=i;o[e+12>>2]=a;r=e+16|0}else r=e+16|0;i=s;do{l=(o[r>>2]|0)+(i<<3)|0;o[l>>2]=0;o[l+4>>2]=0;i=i+1|0}while((i|0)!=(a|0))}o[e+8>>2]=a;if((a|0)>0){i=o[e+16>>2]|0;r=0;do{o[i+(r<<3)>>2]=r;o[i+(r<<3)+4>>2]=1;r=r+1|0}while((r|0)!=(a|0))}i=o[t+68>>2]|0;i=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0;p=fP[o[(o[i>>2]|0)+36>>2]&127](i)|0;if(!p)return;t=fP[o[(o[i>>2]|0)+20>>2]&127](i)|0;if((p|0)<=0)return;f=0;do{i=o[o[t+(f<<4)>>2]>>2]|0;r=o[o[t+(f<<4)+4>>2]>>2]|0;if((i|0?r|0?(o[i+204>>2]&7|0)==0:0:0)?(o[r+204>>2]&7|0)==0:0){s=o[i+208>>2]|0;i=o[r+208>>2]|0;a=o[e+16>>2]|0;r=o[a+(s<<3)>>2]|0;if((r|0)!=(s|0)){_=a+(s<<3)|0;do{s=a+(r<<3)|0;o[_>>2]=o[s>>2];s=o[s>>2]|0;_=a+(s<<3)|0;r=o[_>>2]|0}while((s|0)!=(r|0))}r=o[a+(i<<3)>>2]|0;if((r|0)!=(i|0)){_=a+(i<<3)|0;do{i=a+(r<<3)|0;o[_>>2]=o[i>>2];i=o[i>>2]|0;_=a+(i<<3)|0;r=o[_>>2]|0}while((i|0)!=(r|0))}if((s|0)!=(i|0)){o[a+(s<<3)>>2]=i;l=a+(i<<3)+4|0;o[l>>2]=(o[l>>2]|0)+(o[a+(s<<3)+4>>2]|0)}}f=f+1|0}while((f|0)!=(p|0));return}function XD(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,c=0,f=0;f=o[t+8>>2]|0;if((f|0)<=0)return;a=o[t+16>>2]|0;c=0;t=0;do{s=o[a+(c<<2)>>2]|0;if(!(o[s+204>>2]&3)){_=o[e+16>>2]|0;n=_+(t<<3)|0;i=o[n>>2]|0;if((i|0)==(t|0))i=t;else{r=i;do{i=_+(r<<3)|0;o[n>>2]=o[i>>2];i=o[i>>2]|0;n=_+(i<<3)|0;r=o[n>>2]|0}while((i|0)!=(r|0))}o[s+208>>2]=i;o[_+(t<<3)+4>>2]=c;o[s+212>>2]=-1;t=t+1|0}else{o[s+208>>2]=-1;o[s+212>>2]=-2}c=c+1|0}while((c|0)!=(f|0));return}function HD(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;v=p;p=p+16|0;Zp(12530);_=o[e+28>>2]|0;if((_|0)<0){if((o[e+32>>2]|0)<0){s=o[e+36>>2]|0;if(s|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+32>>2]=0}do{o[(o[e+36>>2]|0)+(_<<2)>>2]=0;_=_+1|0}while((_|0)!=0)}o[e+28>>2]=0;f=o[e+8>>2]|0;if((f|0)>0){l=o[e+16>>2]|0;b=0;do{u=l+(b<<3)|0;_=o[u>>2]|0;if((_|0)==(b|0))_=b;else{s=_;a=u;do{_=l+(s<<3)|0;o[a>>2]=o[_>>2];_=o[_>>2]|0;a=l+(_<<3)|0;s=o[a>>2]|0}while((_|0)!=(s|0))}o[u>>2]=_;b=b+1|0}while((b|0)!=(f|0));if((f|0)>1){iO(e+4|0,0,f+-1|0);f=o[e+8>>2]|0}if((f|0)>0){b=o[e+16>>2]|0;s=0;while(1){d=o[b+(s<<3)>>2]|0;y=s;while(1){m=y+1|0;if((m|0)>=(f|0)){u=0;break}if((o[b+(m<<3)>>2]|0)==(d|0))y=m;else{u=1;break}}e:do if((s|0)<=(y|0)){h=o[i+16>>2]|0;_=1;l=s;while(1){a=o[h+(o[b+(l<<3)+4>>2]<<2)>>2]|0;if((o[a+208>>2]|0)==(d|0)){a=o[a+216>>2]|0;_=(a|0)!=4&(_&(a|0)!=1)}if((l|0)<(y|0))l=l+1|0;else break}if(_){_=b;while(1){_=o[h+(o[_+(s<<3)+4>>2]<<2)>>2]|0;if((o[_+208>>2]|0)==(d|0)?(o[_+216>>2]&-2|0)!=4:0)o[_+216>>2]=2;if((s|0)>=(y|0))break e;_=o[e+16>>2]|0;s=s+1|0}}else{_=b;while(1){_=o[h+(o[_+(s<<3)+4>>2]<<2)>>2]|0;if((o[_+208>>2]|0)==(d|0)?(o[_+216>>2]|0)==2:0){o[_+216>>2]=3;c[_+220>>2]=0}if((s|0)>=(y|0))break e;_=o[e+16>>2]|0;s=s+1|0}}}while(0);if(u)s=m;else break}}}l=fP[o[(o[t>>2]|0)+36>>2]&127](t)|0;if((l|0)>0){u=0;do{f=DP[o[(o[t>>2]|0)+40>>2]&31](t,u)|0;s=o[f+740>>2]|0;a=o[f+744>>2]|0;if((s|0)!=0?(o[s+216>>2]|0)!=2:0)_=44;else _=42;if(((_|0)==42?(_=0,a|0):0)?(o[a+216>>2]|0)!=2:0)_=44;if((_|0)==44){_=o[s+204>>2]|0;if((_&2|0?(_&4|0)==0?(o[s+216>>2]|0)!=2:0:0)?(o[a+204>>2]&3|0)==0:0){if((o[a+216>>2]&-2|0)!=4)o[a+216>>2]=1;c[a+220>>2]=0}y=o[a+204>>2]|0;if(y&2|0?(y&4|_&3|0)==0?(o[a+216>>2]|0)!=2:0:0){if((o[s+216>>2]&-2|0)!=4)o[s+216>>2]=1;c[s+220>>2]=0}if(n[e+64>>0]|0?gP[o[(o[t>>2]|0)+28>>2]&63](t,s,a)|0:0){_=o[e+28>>2]|0;if((_|0)==(o[e+32>>2]|0)?(g=_|0?_<<1:1,(_|0)<(g|0)):0){if(!g)a=0;else{o[5637]=(o[5637]|0)+1;_=Qa((g<<2|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=_;_=o[e+28>>2]|0}if((_|0)>0){s=0;do{o[a+(s<<2)>>2]=o[(o[e+36>>2]|0)+(s<<2)>>2];s=s+1|0}while((s|0)!=(_|0))}s=o[e+36>>2]|0;if(s){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);_=o[e+28>>2]|0}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=a;o[e+32>>2]=g}o[(o[e+36>>2]|0)+(_<<2)>>2]=f;o[e+28>>2]=_+1}}u=u+1|0}while((u|0)<(l|0))}_=o[2006]|0;g=(o[_+16>>2]|0)+-1|0;o[_+16>>2]=g;do if(!g){if(o[_+4>>2]|0){ut(v|0,0)|0;g=o[5649]|0;c[_+8>>2]=+c[_+8>>2]+ +(((o[v+4>>2]|0)-(o[g+4>>2]|0)+(((o[v>>2]|0)-(o[g>>2]|0)|0)*1e6|0)-(o[_+12>>2]|0)|0)>>>0)/1e3;if(o[_+16>>2]|0)break;_=o[2006]|0}o[2006]=o[_+20>>2]}while(0);g=o[e+8>>2]|0;Zp(12558);if(n[e+64>>0]|0){m=o[e+28>>2]|0;if((m|0)>1)ZD(e+24|0,0,m+-1|0);if((g|0)>0){d=1;s=0;y=0;while(1){_=o[e+16>>2]|0;h=o[_+(s<<3)>>2]|0;e:do if((s|0)<(g|0)){l=o[e+48>>2]|0;a=o[e+52>>2]|0;b=1;while(1){u=o[(o[i+16>>2]|0)+(o[_+(s<<3)+4>>2]<<2)>>2]|0;if((l|0)==(a|0)){l=a|0?a<<1:1;if((a|0)<(l|0)){if(!l)_=0;else{o[5637]=(o[5637]|0)+1;_=Qa((l<<2|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=o[e+48>>2]|0}if((a|0)>0){f=0;do{o[_+(f<<2)>>2]=o[(o[e+56>>2]|0)+(f<<2)>>2];f=f+1|0}while((f|0)!=(a|0))}f=o[e+56>>2]|0;if(f){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0);a=o[e+48>>2]|0}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=_;o[e+52>>2]=l;_=a;a=l}else _=a}else _=l;o[(o[e+56>>2]|0)+(_<<2)>>2]=u;l=_+1|0;o[e+48>>2]=l;f=o[u+216>>2]|0;f=b&((f|0)==2|(f|0)==5);s=s+1|0;if((s|0)>=(g|0)){b=s;break e}_=o[e+16>>2]|0;if((o[_+(s<<3)>>2]|0)!=(h|0)){b=s;break}else b=f}}else{b=s;f=1}while(0);if((y|0)<(m|0)){u=o[e+36>>2]|0;_=u+(y<<2)|0;a=o[_>>2]|0;s=o[(o[a+740>>2]|0)+208>>2]|0;if((s|0)<=-1)s=o[(o[a+744>>2]|0)+208>>2]|0;if((s|0)==(h|0)){l=y;do{l=l+1|0;if((l|0)>=(m|0))break;a=o[u+(l<<2)>>2]|0;s=o[(o[a+740>>2]|0)+208>>2]|0;if((s|0)<=-1)s=o[(o[a+744>>2]|0)+208>>2]|0}while((h|0)==(s|0));a=l;s=l-y|0}else{a=d;s=0;_=0}}else{a=d;s=0;_=0}if(!f)vP[o[(o[r>>2]|0)+8>>2]&7](r,o[e+56>>2]|0,o[e+48>>2]|0,_,s,h);y=(s|0)==0?y:a;_=o[e+48>>2]|0;if((_|0)<0){if((o[e+52>>2]|0)<0){s=o[e+56>>2]|0;if(s|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+52>>2]=0}do{o[(o[e+56>>2]|0)+(_<<2)>>2]=0;_=_+1|0}while((_|0)!=0)}o[e+48>>2]=0;if((b|0)>=(g|0))break;else{d=a;s=b}}}}else{g=fP[o[(o[t>>2]|0)+44>>2]&127](t)|0;e=fP[o[(o[t>>2]|0)+36>>2]&127](t)|0;vP[o[(o[r>>2]|0)+8>>2]&7](r,o[i+16>>2]|0,o[i+8>>2]|0,g,e,-1)}_=o[2006]|0;e=(o[_+16>>2]|0)+-1|0;o[_+16>>2]=e;if(e|0){p=v;return}do if(o[_+4>>2]|0){ut(v|0,0)|0;e=o[5649]|0;c[_+8>>2]=+c[_+8>>2]+ +(((o[v+4>>2]|0)-(o[e+4>>2]|0)+(((o[v>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[_+12>>2]|0)|0)>>>0)/1e3;if(!(o[_+16>>2]|0)){_=o[2006]|0;break}else{p=v;return}}while(0);o[2006]=o[_+20>>2];p=v;return}function ZD(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0;while(1){f=o[e+12>>2]|0;p=o[f+(((t+i|0)/2|0)<<2)>>2]|0;n=t;r=i;while(1){c=o[(o[p+740>>2]|0)+208>>2]|0;if((c|0)>-1)while(1){s=o[f+(n<<2)>>2]|0;_=o[(o[s+740>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+744>>2]|0)+208>>2]|0;if((_|0)<(c|0))n=n+1|0;else break}else{a=o[(o[p+744>>2]|0)+208>>2]|0;while(1){s=o[f+(n<<2)>>2]|0;_=o[(o[s+740>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+744>>2]|0)+208>>2]|0;if((_|0)<(a|0))n=n+1|0;else break}}if((c|0)>-1)while(1){s=o[f+(r<<2)>>2]|0;_=o[(o[s+740>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+744>>2]|0)+208>>2]|0;if((c|0)<(_|0))r=r+-1|0;else break}else{a=o[(o[p+744>>2]|0)+208>>2]|0;while(1){s=o[f+(r<<2)>>2]|0;_=o[(o[s+740>>2]|0)+208>>2]|0;if((_|0)<=-1)_=o[(o[s+744>>2]|0)+208>>2]|0;if((a|0)<(_|0))r=r+-1|0;else break}}if((n|0)<=(r|0)){a=f+(n<<2)|0;c=o[a>>2]|0;o[a>>2]=o[f+(r<<2)>>2];o[(o[e+12>>2]|0)+(r<<2)>>2]=c;n=n+1|0;r=r+-1|0}if((n|0)>(r|0))break;f=o[e+12>>2]|0}if((r|0)>(t|0))ZD(e,t,r);if((n|0)<(i|0))t=n;else break}return}function UD(e){e=e|0;var t=0;o[e>>2]=4512;if(!(n[e+8>>0]|0))return;t=o[e+12>>2]|0;if(!t)return;e=o[e+4>>2]|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function zD(e){e=e|0;var t=0,i=0;o[e>>2]=4512;if(!(n[e+8>>0]|0)){qa(e);return}t=o[e+12>>2]|0;if(!t){qa(e);return}i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+16>>2]&127](i,t);qa(e);return}function YD(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;h=p;p=p+32|0;d=o[e+12>>2]|0;if(!d){p=h;return}o[r+4>>2]=d;e=o[t+4>>2]|0;m=o[i+4>>2]|0;t=o[t+12>>2]|0;n=o[i+12>>2]|0;_=+c[t+48>>2]-+c[n+48>>2];s=+c[t+52>>2]-+c[n+52>>2];f=+c[t+56>>2]-+c[n+56>>2];l=+X(+(_*_+s*s+f*f));u=+c[m+32>>2]*+c[m+16>>2];b=+c[e+32>>2]*+c[e+16>>2]+u;if(l>b){if(!(o[d+748>>2]|0)){p=h;return}e=o[d+740>>2]|0;t=o[(o[r+8>>2]|0)+8>>2]|0;n=o[(o[r+12>>2]|0)+8>>2]|0;if((e|0)==(t|0)){lC(d,e+4|0,n+4|0);p=h;return}else{lC(d,n+4|0,t+4|0);p=h;return}}o[h+16>>2]=1065353216;o[h+16+4>>2]=0;o[h+16+8>>2]=0;c[h+16+12>>2]=0;if(l>1.1920928955078125e-7){c[h+16>>2]=_*(1/l);c[h+16+4>>2]=s*(1/l);c[h+16+8>>2]=f*(1/l);c[h+16+12>>2]=0;a=_*(1/l);s=s*(1/l);_=f*(1/l)}else{a=1;s=0;_=0}s=u*s+ +c[n+52>>2];f=u*_+ +c[n+56>>2];c[h>>2]=u*a+ +c[n+48>>2];c[h+4>>2]=s;c[h+8>>2]=f;c[h+12>>2]=0;GP[o[(o[r>>2]|0)+16>>2]&15](r,h+16|0,h,l-b);e=o[r+4>>2]|0;do if(o[e+748>>2]|0){t=o[e+740>>2]|0;i=o[(o[r+8>>2]|0)+8>>2]|0;n=o[(o[r+12>>2]|0)+8>>2]|0;if((t|0)==(i|0)){lC(e,t+4|0,n+4|0);break}else{lC(e,n+4|0,i+4|0);break}}while(0);p=h;return}function KD(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 1}function QD(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+12>>2]|0;if(!i)return;if(!(n[e+8>>0]|0))return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+12>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function qD(e){e=e|0;var t=0;o[e>>2]=4540;if(!(n[e+8>>0]|0))return;t=o[e+12>>2]|0;if(!t)return;e=o[e+4>>2]|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function JD(e){e=e|0;var t=0,i=0;o[e>>2]=4540;if(!(n[e+8>>0]|0)){qa(e);return}t=o[e+12>>2]|0;if(!t){qa(e);return}i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+16>>2]&127](i,t);qa(e);return}function $D(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0;f=p;p=p+160|0;s=o[e+12>>2]|0;if(!s){p=f;return}l=(n[e+16>>0]|0)!=0;u=l?i:t;i=l?t:i;d=o[u+4>>2]|0;b=o[i+4>>2]|0;o[_+4>>2]=s;t=o[s+752>>2]|0;o[f+136>>2]=4568;o[f+136+4>>2]=d;o[f+136+8>>2]=b;o[f+136+12>>2]=t;c[f+128>>2]=0xde0b6b000000000;t=o[u+12>>2]|0;o[f>>2]=o[t>>2];o[f+4>>2]=o[t+4>>2];o[f+8>>2]=o[t+8>>2];o[f+12>>2]=o[t+12>>2];o[f+16>>2]=o[t+16>>2];o[f+16+4>>2]=o[t+16+4>>2];o[f+16+8>>2]=o[t+16+8>>2];o[f+16+12>>2]=o[t+16+12>>2];o[f+32>>2]=o[t+32>>2];o[f+32+4>>2]=o[t+32+4>>2];o[f+32+8>>2]=o[t+32+8>>2];o[f+32+12>>2]=o[t+32+12>>2];o[f+48>>2]=o[t+48>>2];o[f+48+4>>2]=o[t+48+4>>2];o[f+48+8>>2]=o[t+48+8>>2];o[f+48+12>>2]=o[t+48+12>>2];i=o[i+12>>2]|0;o[f+64>>2]=o[i>>2];o[f+64+4>>2]=o[i+4>>2];o[f+64+8>>2]=o[i+8>>2];o[f+64+12>>2]=o[i+12>>2];o[f+80>>2]=o[i+16>>2];o[f+80+4>>2]=o[i+16+4>>2];o[f+80+8>>2]=o[i+16+8>>2];o[f+80+12>>2]=o[i+16+12>>2];o[f+96>>2]=o[i+32>>2];o[f+96+4>>2]=o[i+32+4>>2];o[f+96+8>>2]=o[i+32+8>>2];o[f+96+12>>2]=o[i+32+12>>2];o[f+112>>2]=o[i+48>>2];o[f+112+4>>2]=o[i+48+4>>2];o[f+112+8>>2]=o[i+48+8>>2];o[f+112+12>>2]=o[i+48+12>>2];rO(f+136|0,f,_,o[r+20>>2]|0,l);do if(n[e+8>>0]|0?(a=o[_+4>>2]|0,o[a+748>>2]|0):0){t=o[a+740>>2]|0;i=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((t|0)==(i|0)){lC(a,t+4|0,s+4|0);break}else{lC(a,s+4|0,i+4|0);break}}while(0);p=f;return}function eO(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 1}function tO(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+12>>2]|0;if(!i)return;if(!(n[e+8>>0]|0))return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+12>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function iO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0;while(1){c=o[e+12>>2]|0;f=o[c+(((t+i|0)/2|0)<<3)>>2]|0;n=t;r=i;while(1){while(1){s=n+1|0;if((o[c+(n<<3)>>2]|0)<(f|0))n=s;else{a=r;break}}while(1){_=c+(a<<3)|0;r=a+-1|0;if((f|0)<(o[_>>2]|0))a=r;else break}if((n|0)>(a|0))r=a;else{n=c+(n<<3)|0;p=o[n>>2]|0;c=o[n+4>>2]|0;l=o[_+4>>2]|0;o[n>>2]=o[_>>2];o[n+4>>2]=l;n=(o[e+12>>2]|0)+(a<<3)|0;o[n>>2]=p;o[n+4>>2]=c;n=s}if((n|0)>(r|0))break;c=o[e+12>>2]|0}if((r|0)>(t|0))iO(e,t,r);if((n|0)<(i|0))t=n;else break}return}function nO(e){e=e|0;qa(e);return}function rO(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0;O=p;p=p+64|0;j=+c[t+48>>2]-+c[t+112>>2];_=+c[t+52>>2]-+c[t+116>>2];D=+c[t+56>>2]-+c[t+120>>2];I=j*+c[t+64>>2]+_*+c[t+80>>2]+D*+c[t+96>>2];T=j*+c[t+68>>2]+_*+c[t+84>>2]+D*+c[t+100>>2];D=j*+c[t+72>>2]+_*+c[t+88>>2]+D*+c[t+104>>2];n=o[e+8>>2]|0;R=o[e+4>>2]|0;_=+c[R+32>>2]*+c[R+16>>2];j=_+ +c[e+12>>2];d=+c[n+76>>2];h=+c[n+60>>2];m=+c[n+80>>2];y=+c[n+64>>2];g=+c[n+84>>2];v=+c[n+68>>2];C=+c[n+92>>2];w=+c[n+96>>2];k=+c[n+100>>2];a=(m-y)*(k-v)-(g-v)*(w-y);l=(g-v)*(C-h)-(d-h)*(k-v);b=(d-h)*(w-y)-(m-y)*(C-h);u=1/+X(+(b*b+(a*a+l*l)));s=(I-h)*(u*a)+(T-y)*(u*l)+u*b*(D-v);if(s<0){S=-s;f=-(u*a);s=-(u*l);a=-(u*b)}else{S=s;f=u*a;s=u*l;a=u*b}if(!(S<j)){p=O;return}b=(D-v)*((d-h)*s-(m-y)*f)+((I-h)*((m-y)*a-(g-v)*s)+(T-y)*((g-v)*f-(d-h)*a));g=(D-g)*((C-d)*s-(w-m)*f)+((I-d)*((w-m)*a-(k-g)*s)+(T-m)*((k-g)*f-(C-d)*a));k=(D-k)*((h-C)*s-(y-w)*f)+((I-C)*((y-w)*a-(v-k)*s)+(T-w)*((v-k)*f-(h-C)*a));if(!(k>0&(b>0&g>0))?!(k<=0&(b<=0&g<=0)):0){if((fP[o[(o[n>>2]|0)+100>>2]&127](n)|0)<=0){p=O;return}y=0;m=0;h=0;n=0;R=0;do{L=o[e+8>>2]|0;HP[o[(o[L>>2]|0)+104>>2]&127](L,R,O+48|0,O+32|0);l=+c[O+48>>2];w=+c[O+48+4>>2];v=+c[O+48+8>>2];u=+c[O+32>>2]-l;k=+c[O+32+4>>2]-w;C=+c[O+32+8>>2]-v;do if((I-l)*u+(T-w)*k+(D-v)*C>0)if((I-l)*u+(T-w)*k+(D-v)*C<u*u+k*k+C*C){S=((I-l)*u+(T-w)*k+(D-v)*C)/(u*u+k*k+C*C);b=I-l-u*S;d=T-w-k*S;g=D-v-C*S;break}else{b=I-l-u;d=T-w-k;g=D-v-C;S=1;break}else{b=I-l;d=T-w;g=D-v;S=0}while(0);if(b*b+d*d+g*g<j*j){y=l+u*S;m=v+C*S;h=w+k*S;n=1}R=R+1|0;L=o[e+8>>2]|0}while((R|0)<(fP[o[(o[L>>2]|0)+100>>2]&127](L)|0));if(!(n&1)){p=O;return}else d=j*j}else{d=j*j;y=I-S*f;m=D-S*a;h=T-S*s}u=I-y;b=T-h;l=D-m;if(!(u*u+b*b+l*l<d)){p=O;return}if(u*u+b*b+l*l>1.1920928955078125e-7){s=+X(+(u*u+b*b+l*l));_=_-s;f=u*(1/s);a=l*(1/s);s=b*(1/s)}_=-_;if(r){k=+c[t+64>>2];S=+c[t+68>>2];j=+c[t+72>>2];I=k*f+S*s+j*a;b=+c[t+80>>2];d=+c[t+84>>2];g=+c[t+88>>2];T=f*b+s*d+a*g;v=+c[t+96>>2];C=+c[t+100>>2];w=+c[t+104>>2];D=f*v+s*C+a*w;c[O+48>>2]=-I;c[O+48+4>>2]=-T;c[O+48+8>>2]=-D;c[O+48+12>>2]=0;T=y*b+h*d+m*g+ +c[t+116>>2]+T*_;D=y*v+h*C+m*w+ +c[t+120>>2]+D*_;c[O+32>>2]=y*k+h*S+m*j+ +c[t+112>>2]+I*_;c[O+32+4>>2]=T;c[O+32+8>>2]=D;c[O+32+12>>2]=0;GP[o[(o[i>>2]|0)+16>>2]&15](i,O+48|0,O+32|0,_);p=O;return}else{L=o[(o[i>>2]|0)+16>>2]|0;S=+c[t+64>>2];j=+c[t+68>>2];I=+c[t+72>>2];v=+c[t+80>>2];C=+c[t+84>>2];T=+c[t+88>>2];w=+c[t+96>>2];k=+c[t+100>>2];D=+c[t+104>>2];c[O+16>>2]=S*f+j*s+I*a;c[O+16+4>>2]=f*v+s*C+a*T;c[O+16+8>>2]=f*w+s*k+a*D;c[O+16+12>>2]=0;T=y*v+h*C+m*T+ +c[t+116>>2];D=y*w+h*k+m*D+ +c[t+120>>2];c[O>>2]=y*S+h*j+m*I+ +c[t+112>>2];c[O+4>>2]=T;c[O+8>>2]=D;c[O+12>>2]=0;GP[L&15](i,O+16|0,O,_);p=O;return}}function oO(e){e=e|0;var t=0,i=0;o[e>>2]=6248;t=o[e+56>>2]|0;if(t|0?(_P[o[o[t>>2]>>2]&255](t),i=o[e+56>>2]|0,i|0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function _O(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=s+ +c[e+32>>2];f=s+ +c[e+36>>2];s=s+ +c[e+40>>2];v=+N(+ +c[t>>2]);g=+N(+ +c[t+4>>2]);y=+N(+ +c[t+8>>2]);h=+N(+ +c[t+16>>2]);d=+N(+ +c[t+20>>2]);b=+N(+ +c[t+24>>2]);p=+N(+ +c[t+32>>2]);a=+N(+ +c[t+36>>2]);_=+N(+ +c[t+40>>2]);m=+c[t+48>>2];u=+c[t+52>>2];r=+c[t+56>>2];c[i>>2]=m-(l*v+f*g+s*y);c[i+4>>2]=u-(l*h+f*d+s*b);c[i+8>>2]=r-(l*p+f*a+s*_);c[i+12>>2]=0;c[n>>2]=l*v+f*g+s*y+m;c[n+4>>2]=l*h+f*d+s*b+u;c[n+8>>2]=l*p+f*a+s*_+r;c[n+12>>2]=0;return}function sO(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;f=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);l=(f+ +c[e+32>>2])/+c[e+16>>2];a=(_+ +c[e+36>>2])/+c[e+20>>2];r=(i+ +c[e+40>>2])/+c[e+24>>2];p=+N(+ +c[t>>2]);s=+N(+ +c[t+4>>2]);n=+N(+ +c[t+8>>2]);c[e+16>>2]=p;c[e+20>>2]=s;c[e+24>>2]=n;c[e+28>>2]=0;c[e+32>>2]=l*p-f;c[e+36>>2]=a*s-_;c[e+40>>2]=r*n-i;c[e+44>>2]=0;return}function aO(e,t,i){e=e|0;t=+t;i=i|0;var n=0,r=0,_=0,s=0,a=0;s=+c[e+32>>2];r=+c[e+36>>2];a=+c[e+40>>2];_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);n=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=(a+ +wP[o[(o[e>>2]|0)+48>>2]&15](e))*2;c[i>>2]=t/12*((r+n)*2*((r+n)*2)+a*a);c[i+4>>2]=t/12*((s+_)*2*((s+_)*2)+a*a);c[i+8>>2]=t/12*((s+_)*2*((s+_)*2)+(r+n)*2*((r+n)*2));c[i+12>>2]=0;return}function cO(e){e=e|0;return 12683}function fO(e,t){e=e|0;t=+t;var i=0,n=0,r=0,_=0,s=0;_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);n=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);\n_=_+ +c[e+32>>2];n=n+ +c[e+36>>2];s=s+ +c[e+40>>2];c[e+48>>2]=t;r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);t=s-+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[e+32>>2]=_-r;c[e+36>>2]=n-i;c[e+40>>2]=t;c[e+44>>2]=0;return}function pO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;s=+c[t+32>>2];a=+c[t+36>>2];n=+c[t+40>>2];_=+wP[o[(o[t>>2]|0)+48>>2]&15](t);r=+wP[o[(o[t>>2]|0)+48>>2]&15](t);n=n+ +wP[o[(o[t>>2]|0)+48>>2]&15](t);r=+c[i+4>>2]>=0?a+r:-(a+r);n=+c[i+8>>2]>=0?n:-n;c[e>>2]=+c[i>>2]>=0?s+_:-(s+_);c[e+4>>2]=r;c[e+8>>2]=n;c[e+12>>2]=0;return}function lO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0;o=+c[t+32>>2];r=+c[t+36>>2];r=+c[i+4>>2]>=0?r:-r;n=+c[t+40>>2];n=+c[i+8>>2]>=0?n:-n;c[e>>2]=+c[i>>2]>=0?o:-o;c[e+4>>2]=r;c[e+8>>2]=n;c[e+12>>2]=0;return}function uO(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,o=0,_=0,s=0;if((n|0)<=0)return;r=0;do{s=+c[e+32>>2];_=+c[e+36>>2];_=+c[t+(r<<4)+4>>2]>=0?_:-_;o=+c[e+40>>2];o=+c[t+(r<<4)+8>>2]>=0?o:-o;c[i+(r<<4)>>2]=+c[t+(r<<4)>>2]>=0?s:-s;c[i+(r<<4)+4>>2]=_;c[i+(r<<4)+8>>2]=o;c[i+(r<<4)+12>>2]=0;r=r+1|0}while((r|0)!=(n|0));return}function bO(e){e=e|0;return 6}function dO(e,t,i){e=e|0;t=t|0;i=i|0;switch(t|0){case 0:{o[i>>2]=1065353216;o[i+4>>2]=0;o[i+8>>2]=0;c[i+12>>2]=0;return}case 1:{o[i>>2]=-1082130432;o[i+4>>2]=0;o[i+8>>2]=0;c[i+12>>2]=0;return}case 2:{o[i>>2]=0;o[i+4>>2]=1065353216;o[i+8>>2]=0;c[i+12>>2]=0;return}case 3:{o[i>>2]=0;o[i+4>>2]=-1082130432;o[i+8>>2]=0;c[i+12>>2]=0;return}case 4:{o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=1065353216;c[i+12>>2]=0;return}case 5:{o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=-1082130432;c[i+12>>2]=0;return}default:return}}function hO(e){e=e|0;return 8}function mO(e){e=e|0;return 12}function yO(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;do switch(t|0){case 0:{r=0;t=1;break}case 1:{r=0;t=2;break}case 2:{r=1;t=3;break}case 3:{r=2;break}case 4:{r=0;break}case 5:{r=1;break}case 6:{r=2;break}case 7:{r=3;break}case 8:{r=4;t=5;break}case 9:{r=4;t=6;break}case 10:{r=5;t=7;break}case 11:{r=6;t=7;break}default:{r=0;t=0}}while(0);EP[o[(o[e>>2]|0)+108>>2]&127](e,r,i);EP[o[(o[e>>2]|0)+108>>2]&127](e,t,n);return}function gO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0;a=+c[e+32>>2];_=+c[e+36>>2];n=+c[e+40>>2];s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);n=n+ +wP[o[(o[e>>2]|0)+48>>2]&15](e);c[i>>2]=+(t&1^1|0)*(a+s)-+(t&1|0)*(a+s);c[i+4>>2]=+(t>>>1&1^1|0)*(_+r)-+(t>>>1&1|0)*(_+r);c[i+8>>2]=+(t>>>2&1^1|0)*n-+(t>>>2&1|0)*n;c[i+12>>2]=0;return}function vO(e){e=e|0;return 6}function CO(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,f=0,l=0;r=p;p=p+48|0;EP[o[(o[e>>2]|0)+124>>2]&127](e,r+32|0,n);l=o[r+32>>2]|0;f=o[r+32+4>>2]|0;n=o[r+32+8>>2]|0;o[t>>2]=l;o[t+4>>2]=f;o[t+8>>2]=n;c[t+12>>2]=0;t=o[(o[e>>2]|0)+64>>2]|0;a=-(o[u>>2]=l,+c[u>>2]);s=-(o[u>>2]=f,+c[u>>2]);_=-(o[u>>2]=n,+c[u>>2]);c[r>>2]=a;c[r+4>>2]=s;c[r+8>>2]=_;c[r+12>>2]=0;EP[t&127](r+16|0,e,r);o[i>>2]=o[r+16>>2];o[i+4>>2]=o[r+16+4>>2];o[i+8>>2]=o[r+16+8>>2];o[i+12>>2]=o[r+16+12>>2];p=r;return}function wO(e,t,i){e=e|0;t=t|0;i=+i;var n=0,r=0,o=0,_=0;r=+c[e+32>>2];o=+c[e+36>>2];_=+c[e+40>>2];n=+c[t>>2];if(!(n<=r+i)){t=0;return t|0}if(!(n>=-r-i)){t=0;return t|0}n=+c[t+4>>2];if(!(n<=o+i)){t=0;return t|0}if(!(n>=-o-i)){t=0;return t|0}n=+c[t+8>>2];if(!(n<=_+i)){t=0;return t|0}t=n>=-_-i;return t|0}function kO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;r=+c[e+32>>2];_=+c[e+36>>2];n=+c[e+40>>2];switch(i|0){case 0:{o[t>>2]=1065353216;o[t+4>>2]=0;o[t+8>>2]=0;c[t+12>>2]=-r;return}case 1:{o[t>>2]=-1082130432;o[t+4>>2]=0;o[t+8>>2]=0;c[t+12>>2]=-r;return}case 2:{o[t>>2]=0;o[t+4>>2]=1065353216;o[t+8>>2]=0;c[t+12>>2]=-_;return}case 3:{o[t>>2]=0;o[t+4>>2]=-1082130432;o[t+8>>2]=0;c[t+12>>2]=-_;return}case 4:{o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=1065353216;c[t+12>>2]=-n;return}case 5:{o[t>>2]=0;o[t+4>>2]=0;o[t+8>>2]=-1082130432;c[t+12>>2]=-n;return}default:return}}function SO(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0;o[e+8>>2]=0;o[e+12>>2]=-1;o[e+16>>2]=1065353216;o[e+20>>2]=1065353216;o[e+24>>2]=1065353216;c[e+28>>2]=0;c[e+48>>2]=.03999999910593033;o[e+56>>2]=0;o[e>>2]=4588;o[e+4>>2]=0;_=+c[t>>2];r=+c[t+4>>2];i=+c[t+8>>2];i=+c[t+((_<r?_<i?0:2:r<i?1:2)<<2)>>2]*.10000000149011612;if(i<.03999999910593033){a=+Wk(e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=a+ +c[e+32>>2];s=s+ +c[e+36>>2];_=_+ +c[e+40>>2];c[e+48>>2]=i;i=+wP[o[(o[e>>2]|0)+48>>2]&15](e);r=+wP[o[(o[e>>2]|0)+48>>2]&15](e);_=_-+wP[o[(o[e>>2]|0)+48>>2]&15](e);c[e+32>>2]=a-i;c[e+36>>2]=s-r;c[e+40>>2]=_;c[e+44>>2]=0;n=o[e>>2]|0}else n=4588;_=+wP[o[n+48>>2]&15](e);s=+wP[o[(o[e>>2]|0)+48>>2]&15](e);a=+wP[o[(o[e>>2]|0)+48>>2]&15](e);s=+c[t+4>>2]*+c[e+20>>2]-s;a=+c[t+8>>2]*+c[e+24>>2]-a;c[e+32>>2]=+c[t>>2]*+c[e+16>>2]-_;c[e+36>>2]=s;c[e+40>>2]=a;c[e+44>>2]=0;return}function RO(e){e=e|0;var t=0;o[e>>2]=4724;if(!(n[e+65>>0]|0))return;t=o[e+56>>2]|0;_P[o[o[t>>2]>>2]&255](t);e=o[e+56>>2]|0;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function jO(e){e=e|0;var t=0;o[e>>2]=4724;if(n[e+65>>0]|0?(t=o[e+56>>2]|0,_P[o[o[t>>2]>>2]&255](t),t=o[e+56>>2]|0,t|0):0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function IO(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0;a=fP[o[(o[e>>2]|0)+28>>2]&127](e)|0;s=+c[a>>2]-+c[t>>2];_=+c[a+4>>2]-+c[t+4>>2];r=+c[a+8>>2]-+c[t+8>>2];if(!(s*s+_*_+r*r>1.1920928955078125e-7))return;kv(e,t);if((n[e+65>>0]|0)!=0?(i=o[e+56>>2]|0,_P[o[o[i>>2]>>2]&255](i),i=o[e+56>>2]|0,(i|0)!=0):0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);t=e+56|0}else t=e+56|0;o[5637]=(o[5637]|0)+1;i=Qa(191)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}o[i+52>>2]=284;n[i+60>>0]=0;n[i+80>>0]=1;o[i+76>>2]=0;o[i+68>>2]=0;o[i+72>>2]=0;n[i+100>>0]=1;o[i+96>>2]=0;o[i+88>>2]=0;o[i+92>>2]=0;n[i+120>>0]=1;o[i+116>>2]=0;o[i+108>>2]=0;o[i+112>>2]=0;n[i+140>>0]=1;o[i+136>>2]=0;o[i+128>>2]=0;o[i+132>>2]=0;o[i+144>>2]=0;n[i+164>>0]=1;o[i+160>>2]=0;o[i+152>>2]=0;o[i+156>>2]=0;o[i+168>>2]=0;o[i+4>>2]=-8388609;o[i+8>>2]=-8388609;o[i+12>>2]=-8388609;c[i+16>>2]=0;o[i+20>>2]=2139095039;o[i+24>>2]=2139095039;o[i+28>>2]=2139095039;c[i+32>>2]=0;o[i>>2]=6168;o[t>>2]=i;gj(i,o[e+52>>2]|0,(n[e+64>>0]|0)!=0,e+20|0,e+36|0);n[e+65>>0]=1;return}function TO(e){e=e|0;return 12712}function DO(e,t){e=e|0;t=+t;c[e+16>>2]=t;return}function OO(e){e=e|0;return+ +c[e+16>>2]}function LO(e){e=e|0;return 60}function xO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;n=DP[o[(o[i>>2]|0)+40>>2]&31](i,e)|0;_=DP[o[(o[i>>2]|0)+28>>2]&31](i,n)|0;o[t>>2]=_;if(_|0)aP[o[(o[i>>2]|0)+48>>2]&127](i,n);o[t+4>>2]=o[e+4>>2];_=o[e+52>>2]|0;gP[o[(o[_>>2]|0)+56>>2]&63](_,t+12|0,i)|0;o[t+52>>2]=o[e+16>>2];do if((o[e+56>>2]|0)!=0?((fP[o[(o[i>>2]|0)+52>>2]&127](i)|0)&1|0)==0:0){n=DP[o[(o[i>>2]|0)+24>>2]&31](i,o[e+56>>2]|0)|0;if(!n){o[t+40>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+56>>2]|0)|0;o[t+44>>2]=0;n=o[e+56>>2]|0;n=fP[o[(o[n>>2]|0)+12>>2]&127](n)|0;n=gP[o[(o[i>>2]|0)+16>>2]&63](i,n,1)|0;_=o[e+56>>2]|0;_=gP[o[(o[_>>2]|0)+16>>2]&63](_,o[n+8>>2]|0,i)|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,n,_,1213612625,o[e+56>>2]|0);break}else{o[t+40>>2]=n;o[t+44>>2]=0;break}}else r=8;while(0);if((r|0)==8){o[t+40>>2]=0;o[t+44>>2]=0}if(o[e+60>>2]|0?((fP[o[(o[i>>2]|0)+52>>2]&127](i)|0)&2|0)==0:0){n=DP[o[(o[i>>2]|0)+24>>2]&31](i,o[e+60>>2]|0)|0;if(!n){o[t+48>>2]=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+60>>2]|0)|0;t=o[e+60>>2]|0;t=fP[o[(o[t>>2]|0)+8>>2]&127](t)|0;t=gP[o[(o[i>>2]|0)+16>>2]&63](i,t,1)|0;_=o[e+60>>2]|0;_=gP[o[(o[_>>2]|0)+12>>2]&63](_,o[t+8>>2]|0,i)|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,t,_,1346456916,o[e+60>>2]|0);return 12728}else{o[t+48>>2]=n;return 12728}}o[t+48>>2]=0;return 12728}function MO(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0;r=p;p=p+64|0;_=o[e+52>>2]|0;o[r>>2]=4816;o[r+4>>2]=_;o[r+8>>2]=t;qx(o[e+56>>2]|0,r,i,n);p=r;return}function PO(e){e=e|0;qa(e);return}function WO(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,a=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0;g=p;p=p+32|0;b=o[e+4>>2]|0;TP[o[(o[b>>2]|0)+16>>2]&3](b,g+28|0,g+24|0,g+20|0,g+16|0,g+12|0,g+8|0,g+4|0,g,t);b=(o[g+12>>2]|0)+(te(o[g+8>>2]|0,i)|0)|0;y=o[e+4>>2]|0;u=o[g>>2]|0;switch(u|0){case 3:{n=s[b+4>>1]|0;break}case 2:{n=o[b+8>>2]|0;break}default:n=_[b+2>>0]|0}m=(o[g+20>>2]|0)==0;d=o[g+28>>2]|0;h=o[g+16>>2]|0;n=d+(te(h,n)|0)|0;if(m){a=+c[n+8>>2]*+c[y+12>>2];l=+c[n+4>>2]*+c[y+8>>2];r=+c[n>>2]*+c[y+4>>2]}else{a=+f[n+16>>3]*+c[y+12>>2];l=+f[n+8>>3]*+c[y+8>>2];r=+f[n>>3]*+c[y+4>>2]}c[e+44>>2]=r;c[e+48>>2]=l;c[e+52>>2]=a;c[e+56>>2]=0;switch(u|0){case 3:{n=s[b+2>>1]|0;break}case 2:{n=o[b+4>>2]|0;break}default:n=_[b+1>>0]|0}n=d+(te(h,n)|0)|0;if(m){a=+c[n+8>>2]*+c[y+12>>2];l=+c[n+4>>2]*+c[y+8>>2];r=+c[n>>2]*+c[y+4>>2]}else{a=+f[n+16>>3]*+c[y+12>>2];l=+f[n+8>>3]*+c[y+8>>2];r=+f[n>>3]*+c[y+4>>2]}c[e+28>>2]=r;c[e+32>>2]=l;c[e+36>>2]=a;c[e+40>>2]=0;switch(u|0){case 3:{n=s[b>>1]|0;break}case 2:{n=o[b>>2]|0;break}default:n=_[b>>0]|0}n=d+(te(h,n)|0)|0;if(m){l=+c[n+8>>2]*+c[y+12>>2];a=+c[n+4>>2]*+c[y+8>>2];r=+c[n>>2]*+c[y+4>>2];m=e+12|0;c[m>>2]=r;m=e+16|0;c[m>>2]=a;m=e+20|0;c[m>>2]=l;m=e+24|0;c[m>>2]=0;m=e+8|0;m=o[m>>2]|0;h=o[m>>2]|0;h=h+8|0;h=o[h>>2]|0;y=e+12|0;HP[h&127](m,y,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=g;return}else{l=+f[n+16>>3]*+c[y+12>>2];a=+f[n+8>>3]*+c[y+8>>2];r=+f[n>>3]*+c[y+4>>2];m=e+12|0;c[m>>2]=r;m=e+16|0;c[m>>2]=a;m=e+20|0;c[m>>2]=l;m=e+24|0;c[m>>2]=0;m=e+8|0;m=o[m>>2]|0;h=o[m>>2]|0;h=h+8|0;h=o[h>>2]|0;y=e+12|0;HP[h&127](m,y,t,i);e=o[e+4>>2]|0;i=o[e>>2]|0;i=i+24|0;i=o[i>>2]|0;aP[i&127](e,t);p=g;return}}function BO(e,t,i){e=e|0;t=t|0;i=i|0;EP[o[(o[t>>2]|0)+68>>2]&127](e,t,i);return}function AO(e,t){e=e|0;t=t|0;var i=0,n=0;i=o[e+56>>2]|0;if(!i)return;n=fP[o[(o[i>>2]|0)+12>>2]&127](i)|0;n=gP[o[(o[t>>2]|0)+16>>2]&63](t,n,1)|0;i=o[e+56>>2]|0;i=gP[o[(o[i>>2]|0)+16>>2]&63](i,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,i,1213612625,o[e+56>>2]|0);return}function FO(e,t){e=e|0;t=t|0;var i=0,n=0;i=o[e+60>>2]|0;if(!i)return;n=fP[o[(o[i>>2]|0)+8>>2]&127](i)|0;n=gP[o[(o[t>>2]|0)+16>>2]&63](t,n,1)|0;i=o[e+60>>2]|0;i=gP[o[(o[i>>2]|0)+12>>2]&63](i,o[n+8>>2]|0,t)|0;rP[o[(o[t>>2]|0)+20>>2]&31](t,n,i,1346456916,o[e+60>>2]|0);return}function GO(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0;_=p;p=p+48|0;o[e+8>>2]=0;o[e+12>>2]=-1;c[e+16>>2]=0;o[e>>2]=6692;o[e+52>>2]=t;o[e+4>>2]=21;if(fP[o[(o[t>>2]|0)+40>>2]&127](t)|0)EP[o[(o[t>>2]|0)+48>>2]&127](t,e+20|0,e+36|0);else{o[_+32>>2]=0;o[_+32+4>>2]=0;o[_+32+8>>2]=0;o[_+32+12>>2]=0;c[_+32>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](_+16|0,e,_+32|0);c[e+36>>2]=+c[_+16>>2]+ +c[e+16>>2];c[_+32>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](_,e,_+32|0);o[_+16>>2]=o[_>>2];o[_+16+4>>2]=o[_+4>>2];o[_+16+8>>2]=o[_+8>>2];o[_+16+12>>2]=o[_+12>>2];c[e+20>>2]=+c[_+16>>2]-+c[e+16>>2];o[_+32>>2]=0;o[_+32+4>>2]=0;o[_+32+8>>2]=0;o[_+32+12>>2]=0;c[_+32+4>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](_+16|0,e,_+32|0);c[e+40>>2]=+c[_+16+4>>2]+ +c[e+16>>2];c[_+32+4>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](_,e,_+32|0);o[_+16>>2]=o[_>>2];o[_+16+4>>2]=o[_+4>>2];o[_+16+8>>2]=o[_+8>>2];o[_+16+12>>2]=o[_+12>>2];c[e+24>>2]=+c[_+16+4>>2]-+c[e+16>>2];o[_+32>>2]=0;o[_+32+4>>2]=0;o[_+32+8>>2]=0;o[_+32+12>>2]=0;c[_+32+8>>2]=1;EP[o[(o[e>>2]|0)+68>>2]&127](_+16|0,e,_+32|0);c[e+44>>2]=+c[_+16+8>>2]+ +c[e+16>>2];c[_+32+8>>2]=-1;EP[o[(o[e>>2]|0)+68>>2]&127](_,e,_+32|0);o[_+16>>2]=o[_>>2];o[_+16+4>>2]=o[_+4>>2];o[_+16+8>>2]=o[_+8>>2];o[_+16+12>>2]=o[_+12>>2];c[e+28>>2]=+c[_+16+8>>2]-+c[e+16>>2]}o[e>>2]=4724;o[e+56>>2]=0;o[e+60>>2]=0;n[e+64>>0]=i&1;n[e+65>>0]=0;o[e+4>>2]=21;if(!r){p=_;return}o[5637]=(o[5637]|0)+1;r=Qa(191)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}o[r+52>>2]=284;n[r+60>>0]=0;n[r+80>>0]=1;o[r+76>>2]=0;o[r+68>>2]=0;o[r+72>>2]=0;n[r+100>>0]=1;o[r+96>>2]=0;o[r+88>>2]=0;o[r+92>>2]=0;n[r+120>>0]=1;o[r+116>>2]=0;o[r+108>>2]=0;o[r+112>>2]=0;n[r+140>>0]=1;o[r+136>>2]=0;o[r+128>>2]=0;o[r+132>>2]=0;o[r+144>>2]=0;n[r+164>>0]=1;o[r+160>>2]=0;o[r+152>>2]=0;o[r+156>>2]=0;o[r+168>>2]=0;o[r+4>>2]=-8388609;o[r+8>>2]=-8388609;o[r+12>>2]=-8388609;c[r+16>>2]=0;o[r+20>>2]=2139095039;o[r+24>>2]=2139095039;o[r+28>>2]=2139095039;c[r+32>>2]=0;o[r>>2]=6168;o[e+56>>2]=r;gj(r,o[e+52>>2]|0,(n[e+64>>0]|0)!=0,e+20|0,e+36|0);n[e+65>>0]=1;p=_;return}function EO(e){e=e|0;qa(e);return}function VO(e){e=e|0;var t=0;t=p;p=p+e|0;p=p+15&-16;return t|0}function NO(){return p|0}function XO(e){e=e|0;p=e}function HO(e,t){e=e|0;t=t|0;p=e;l=t}function ZO(e,t){e=e|0;t=t|0;if(!h){h=e;m=t}}function UO(e){e=e|0;n[u>>0]=n[e>>0];n[u+1>>0]=n[e+1>>0];n[u+2>>0]=n[e+2>>0];n[u+3>>0]=n[e+3>>0]}function zO(e){e=e|0;n[u>>0]=n[e>>0];n[u+1>>0]=n[e+1>>0];n[u+2>>0]=n[e+2>>0];n[u+3>>0]=n[e+3>>0];n[u+4>>0]=n[e+4>>0];n[u+5>>0]=n[e+5>>0];n[u+6>>0]=n[e+6>>0];n[u+7>>0]=n[e+7>>0]}function YO(e){e=e|0;L=e}function KO(){return L|0}function QO(e,t,i,_,a,f){e=e|0;t=t|0;i=i|0;_=_|0;a=a|0;f=f|0;var p=0,l=0,u=0;o[e>>2]=2552;r[e+4>>1]=-2;r[e+6>>1]=-1;o[e+92>>2]=a;o[e+96>>2]=0;n[e+100>>0]=0;o[e+104>>2]=0;o[e+108>>2]=0;if(!a){o[5637]=(o[5637]|0)+1;a=Qa(91)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}Nx(a);o[e+92>>2]=a;n[e+100>>0]=1}if(!f){o[5637]=(o[5637]|0)+1;a=Qa(43)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}o[a>>2]=0;o[a+4>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[a+16>>2]=0;o[a+20>>2]=0;o[a>>2]=2616;n[a+20>>0]=1;o[a+16>>2]=0;o[a+8>>2]=0;o[a+12>>2]=0;o[e+112>>2]=a;o[5637]=(o[5637]|0)+1;a=Qa(215)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}mx(a,o[e+112>>2]|0);o[e+108>>2]=a;n[a+193>>0]=1}o[e+8>>2]=o[t>>2];o[e+8+4>>2]=o[t+4>>2];o[e+8+8>>2]=o[t+8>>2];o[e+8+12>>2]=o[t+12>>2];o[e+24>>2]=o[i>>2];o[e+24+4>>2]=o[i+4>>2];o[e+24+8>>2]=o[i+8>>2];o[e+24+12>>2]=o[i+12>>2];u=+(s[e+6>>1]|0);l=u/(+c[e+28>>2]-+c[e+12>>2]);p=u/(+c[e+32>>2]-+c[e+16>>2]);c[e+40>>2]=u/(+c[e+24>>2]-+c[e+8>>2]);c[e+44>>2]=l;c[e+48>>2]=p;c[e+52>>2]=0;t=(_&65535)+1&65535;o[5637]=(o[5637]|0)+1;a=Qa(t<<6|19)|0;if(!a)i=0;else{o[(a+4+15&-16)+-4>>2]=a;i=a+4+15&-16}if(t|0){a=i+(t<<6)|0;f=i;do{o[f>>2]=0;o[f+8>>2]=0;f=f+64|0}while((f|0)!=(a|0))}o[e+60>>2]=i;r[e+58>>1]=(_&65535)+1;r[e+56>>1]=0;r[e+64>>1]=1;if(t>>>0>1){a=1;f=1;do{r[i+(a<<6)+48>>1]=a+1;f=f+1<<16>>16;a=f&65535}while(a>>>0<t>>>0)}r[i+(t+-1<<6)+48>>1]=0;o[5637]=(o[5637]|0)+1;a=Qa((t<<3|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}o[e+80>>2]=a;o[e+68>>2]=a;o[5637]=(o[5637]|0)+1;a=Qa((t<<3|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}o[e+84>>2]=a;o[e+72>>2]=a;o[5637]=(o[5637]|0)+1;a=Qa((t<<3|3)+16|0)|0;if(!a){i=0;_=e+88|0;o[_>>2]=i;_=e+76|0;o[_>>2]=i;i=o[e+60>>2]|0;o[i>>2]=0;t=i+48|0;r[t>>1]=0;t=i+54|0;r[t>>1]=1;t=o[e+68>>2]|0;r[t>>1]=0;f=t+2|0;r[f>>1]=0;f=r[e+6>>1]|0;a=t+4|0;r[a>>1]=f;t=t+6|0;r[t>>1]=0;t=i+50|0;r[t>>1]=0;t=i+56|0;r[t>>1]=1;t=o[e+72>>2]|0;r[t>>1]=0;a=t+2|0;r[a>>1]=0;a=r[e+6>>1]|0;f=t+4|0;r[f>>1]=a;t=t+6|0;r[t>>1]=0;t=i+52|0;r[t>>1]=0;i=i+58|0;r[i>>1]=1;_=o[_>>2]|0;r[_>>1]=0;i=_+2|0;r[i>>1]=0;i=r[e+6>>1]|0;t=_+4|0;r[t>>1]=i;_=_+6|0;r[_>>1]=0;o[e>>2]=2488;return}o[(a+4+15&-16)+-4>>2]=a;i=a+4+15&-16;_=e+88|0;o[_>>2]=i;_=e+76|0;o[_>>2]=i;i=o[e+60>>2]|0;o[i>>2]=0;t=i+48|0;r[t>>1]=0;t=i+54|0;r[t>>1]=1;t=o[e+68>>2]|0;r[t>>1]=0;f=t+2|0;r[f>>1]=0;f=r[e+6>>1]|0;a=t+4|0;r[a>>1]=f;t=t+6|0;r[t>>1]=0;t=i+50|0;r[t>>1]=0;t=i+56|0;r[t>>1]=1;t=o[e+72>>2]|0;r[t>>1]=0;a=t+2|0;r[a>>1]=0;a=r[e+6>>1]|0;f=t+4|0;r[f>>1]=a;t=t+6|0;r[t>>1]=0;t=i+52|0;r[t>>1]=0;i=i+58|0;r[i>>1]=1;_=o[_>>2]|0;r[_>>1]=0;i=_+2|0;r[i>>1]=0;i=r[e+6>>1]|0;t=_+4|0;r[t>>1]=i;_=_+6|0;r[_>>1]=0;o[e>>2]=2488;return}function qO(e){e=e|0;var t=0;o[e>>2]=2552;if(o[e+108>>2]|0){t=o[e+112>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+112>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+108>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+108>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}}t=o[e+88>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+84>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+80>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}t=o[e+60>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}if(!(n[e+100>>0]|0))return;t=o[e+92>>2]|0;_P[o[o[t>>2]>>2]&255](t);t=o[e+92>>2]|0;if(!t)return;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function JO(e){e=e|0;qO(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function $O(e,t,i,n,_,a,f,l,u){e=e|0;t=t|0;i=i|0;n=n|0;_=_|0;a=a|0;f=f|0;l=l|0;u=u|0;var b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0;w=p;p=p+16|0;OL(e,w+6|0,+c[t>>2],+c[t+4>>2],+c[t+8>>2],0);OL(e,w,+c[i>>2],+c[i+4>>2],+c[i+8>>2],1);C=r[e+64>>1]|0;v=o[e+60>>2]|0;r[e+64>>1]=r[v+((C&65535)<<6)+48>>1]|0;b=(r[e+56>>1]|0)+1<<16>>16;r[e+56>>1]=b;o[v+((C&65535)<<6)+12>>2]=C&65535;o[v+((C&65535)<<6)>>2]=_;r[v+((C&65535)<<6)+4>>1]=a;r[v+((C&65535)<<6)+6>>1]=f;o[v+((C&65535)<<6)+8>>2]=u;h=(b&65535)<<1&65534;r[v+54>>1]=(s[v+54>>1]|0)+2;d=o[e+68>>2]|0;u=s[d+(h+-1<<2)>>1]|s[d+(h+-1<<2)+2>>1]<<16;r[d+((h|1)<<2)>>1]=u;r[d+((h|1)<<2)+2>>1]=u>>>16;d=o[e+68>>2]|0;r[d+(h+-1<<2)>>1]=r[w+6>>1]|0;r[d+(h+-1<<2)+2>>1]=C;r[d+(h<<2)>>1]=r[w>>1]|0;r[d+(h<<2)+2>>1]=C;r[v+((C&65535)<<6)+48>>1]=h+-1;r[v+((C&65535)<<6)+54>>1]=(b&65535)<<1;d=(o[e+60>>2]|0)+56|0;r[d>>1]=(s[d>>1]|0)+2;d=o[e+72>>2]|0;u=s[d+(h+-1<<2)>>1]|s[d+(h+-1<<2)+2>>1]<<16;r[d+((h|1)<<2)>>1]=u;r[d+((h|1)<<2)+2>>1]=u>>>16;d=o[e+72>>2]|0;r[d+(h+-1<<2)>>1]=r[w+6+2>>1]|0;r[d+(h+-1<<2)+2>>1]=C;r[d+(h<<2)>>1]=r[w+2>>1]|0;r[d+(h<<2)+2>>1]=C;r[v+((C&65535)<<6)+50>>1]=h+-1;r[v+((C&65535)<<6)+56>>1]=(b&65535)<<1;d=(o[e+60>>2]|0)+58|0;r[d>>1]=(s[d>>1]|0)+2;d=o[e+76>>2]|0;u=s[d+(h+-1<<2)>>1]|s[d+(h+-1<<2)+2>>1]<<16;r[d+((h|1)<<2)>>1]=u;r[d+((h|1)<<2)+2>>1]=u>>>16;d=o[e+76>>2]|0;r[d+(h+-1<<2)>>1]=r[w+6+4>>1]|0;r[d+(h+-1<<2)+2>>1]=C;r[d+(h<<2)>>1]=r[w+4>>1]|0;r[d+(h<<2)+2>>1]=C;r[v+((C&65535)<<6)+52>>1]=h+-1;r[v+((C&65535)<<6)+58>>1]=(b&65535)<<1;b=o[e+68>>2]|0;h=s[v+((C&65535)<<6)+48>>1]|0;d=o[e+60>>2]|0;u=r[b+(h<<2)+-4>>1]|0;if((s[b+(h<<2)>>1]|0)<(u&65535)){y=d+((s[b+(h<<2)+2>>1]|0)<<6)+48|0;m=b+(h<<2)|0;h=b+(h<<2)+-4|0;while(1){b=s[m+-2>>1]|0;if(!(u&1)){g=d+(b<<6)+48|0;r[g>>1]=(r[g>>1]|0)+1<<16>>16}else{g=d+(b<<6)+54|0;r[g>>1]=(r[g>>1]|0)+1<<16>>16}r[y>>1]=(r[y>>1]|0)+-1<<16>>16;b=s[m>>1]|s[m+2>>1]<<16;u=s[h>>1]|s[h+2>>1]<<16;r[m>>1]=u;r[m+2>>1]=u>>>16;r[h>>1]=b;r[h+2>>1]=b>>>16;b=m+-4|0;h=h+-4|0;u=r[h>>1]|0;if((s[b>>1]|0)>=(u&65535))break;d=o[e+60>>2]|0;m=b}b=o[e+68>>2]|0}u=s[v+((C&65535)<<6)+54>>1]|0;h=b+(u<<2)|0;d=r[h+-4>>1]|0;e:do if((s[h>>1]|0)<(d&65535)){y=o[e+60>>2]|0;g=y+((s[b+(u<<2)+2>>1]|0)<<6)+54|0;u=d;m=h;d=h+-4|0;while(1){b=s[m+-2>>1]|0;if(!(u&1)){y=y+(b<<6)+48|0;r[y>>1]=(r[y>>1]|0)+1<<16>>16}else{y=y+(b<<6)+54|0;r[y>>1]=(r[y>>1]|0)+1<<16>>16}r[g>>1]=(r[g>>1]|0)+-1<<16>>16;b=s[m>>1]|s[m+2>>1]<<16;u=s[d>>1]|s[d+2>>1]<<16;r[m>>1]=u;r[m+2>>1]=u>>>16;r[d>>1]=b;r[d+2>>1]=b>>>16;b=m+-4|0;d=d+-4|0;u=r[d>>1]|0;if((s[b>>1]|0)>=(u&65535))break e;y=o[e+60>>2]|0;m=b}}while(0);b=o[e+72>>2]|0;h=s[v+((C&65535)<<6)+50>>1]|0;d=o[e+60>>2]|0;u=r[b+(h<<2)+-4>>1]|0;if((s[b+(h<<2)>>1]|0)<(u&65535)){y=d+((s[b+(h<<2)+2>>1]|0)<<6)+50|0;m=b+(h<<2)|0;h=b+(h<<2)+-4|0;while(1){b=s[m+-2>>1]|0;if(!(u&1)){g=d+(b<<6)+50|0;r[g>>1]=(r[g>>1]|0)+1<<16>>16}else{g=d+(b<<6)+56|0;r[g>>1]=(r[g>>1]|0)+1<<16>>16}r[y>>1]=(r[y>>1]|0)+-1<<16>>16;b=s[m>>1]|s[m+2>>1]<<16;u=s[h>>1]|s[h+2>>1]<<16;r[m>>1]=u;r[m+2>>1]=u>>>16;r[h>>1]=b;r[h+2>>1]=b>>>16;b=m+-4|0;h=h+-4|0;u=r[h>>1]|0;if((s[b>>1]|0)>=(u&65535))break;d=o[e+60>>2]|0;m=b}b=o[e+72>>2]|0}u=s[v+((C&65535)<<6)+56>>1]|0;h=b+(u<<2)|0;d=r[h+-4>>1]|0;e:do if((s[h>>1]|0)<(d&65535)){y=o[e+60>>2]|0;g=y+((s[b+(u<<2)+2>>1]|0)<<6)+56|0;u=d;m=h;d=h+-4|0;while(1){b=s[m+-2>>1]|0;if(!(u&1)){y=y+(b<<6)+50|0;r[y>>1]=(r[y>>1]|0)+1<<16>>16}else{y=y+(b<<6)+56|0;r[y>>1]=(r[y>>1]|0)+1<<16>>16}r[g>>1]=(r[g>>1]|0)+-1<<16>>16;b=s[m>>1]|s[m+2>>1]<<16;u=s[d>>1]|s[d+2>>1]<<16;r[m>>1]=u;r[m+2>>1]=u>>>16;r[d>>1]=b;r[d+2>>1]=b>>>16;b=m+-4|0;d=d+-4|0;u=r[d>>1]|0;if((s[b>>1]|0)>=(u&65535))break e;y=o[e+60>>2]|0;m=b}}while(0);LL(e,2,r[v+((C&65535)<<6)+52>>1]|0);xL(e,2,r[v+((C&65535)<<6)+58>>1]|0,l);b=o[e+60>>2]|0;u=o[e+108>>2]|0;if(!u){_=b+((C&65535)<<6)|0;p=w;return _|0}o[b+((C&65535)<<6)+60>>2]=FP[o[(o[u>>2]|0)+8>>2]&3](u,t,i,n,_,a,f,l,0)|0;_=b+((C&65535)<<6)|0;p=w;return _|0}function eL(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,_=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;n=o[e+108>>2]|0;if(n|0)EP[o[(o[n>>2]|0)+12>>2]&127](n,o[t+60>>2]|0,i);h=o[t+12>>2]|0;d=o[e+60>>2]|0;b=o[e+92>>2]|0;if(!(fP[o[(o[b>>2]|0)+56>>2]&127](b)|0)){b=o[e+92>>2]|0;EP[o[(o[b>>2]|0)+16>>2]&127](b,d+((h&65535)<<6)|0,i)}l=s[e+56>>1]|0;n=o[e+60>>2]|0;r[n+54>>1]=(s[n+54>>1]|0)+65534;r[n+56>>1]=(s[n+56>>1]|0)+65534;r[n+58>>1]=(s[n+58>>1]|0)+65534;n=r[e+6>>1]|0;b=0;do{p=e+68+(b<<2)|0;u=o[p>>2]|0;i=s[d+((h&65535)<<6)+54+(b<<1)>>1]|0;r[u+(i<<2)>>1]=n;t=r[u+(i<<2)+6>>1]|0;if(!(t<<16>>16))i=u;else{f=(o[e+60>>2]|0)+((s[u+(i<<2)+2>>1]|0)<<6)+54+(b<<1)|0;a=u+(i<<2)|0;while(1){c=a;a=a+4|0;_=r[a>>1]|0;if((n&65535)<(_&65535))break;i=o[e+60>>2]|0;n=t&65535;if(!(_&1)){_=i+(n<<6)+48+(b<<1)|0;r[_>>1]=(r[_>>1]|0)+-1<<16>>16}else{_=i+(n<<6)+54+(b<<1)|0;r[_>>1]=(r[_>>1]|0)+-1<<16>>16}r[f>>1]=(r[f>>1]|0)+1<<16>>16;n=s[c>>1]|s[c+2>>1]<<16;t=s[a>>1]|s[a+2>>1]<<16;r[c>>1]=t;r[c+2>>1]=t>>>16;r[a>>1]=n;r[a+2>>1]=n>>>16;t=r[c+10>>1]|0;if(!(t<<16>>16))break;else n=n&65535}n=r[e+6>>1]|0;i=o[p>>2]|0}t=s[d+((h&65535)<<6)+48+(b<<1)>>1]|0;r[u+(t<<2)>>1]=n;a=i+(t<<2)|0;_=r[a+6>>1]|0;if(_<<16>>16){f=(o[e+60>>2]|0)+((s[i+(t<<2)+2>>1]|0)<<6)+48+(b<<1)|0;n=r[a>>1]|0;while(1){c=a;a=a+4|0;i=r[a>>1]|0;if((n&65535)<(i&65535))break;t=o[e+60>>2]|0;n=_&65535;if(!(i&1)){p=t+(n<<6)+48+(b<<1)|0;r[p>>1]=(r[p>>1]|0)+-1<<16>>16}else{p=t+(n<<6)+54+(b<<1)|0;r[p>>1]=(r[p>>1]|0)+-1<<16>>16}r[f>>1]=(r[f>>1]|0)+1<<16>>16;n=s[c>>1]|s[c+2>>1]<<16;_=s[a>>1]|s[a+2>>1]<<16;r[c>>1]=_;r[c+2>>1]=_>>>16;r[a>>1]=n;r[a+2>>1]=n>>>16;_=r[c+10>>1]|0;if(!(_<<16>>16))break;else n=n&65535}n=r[e+6>>1]|0}r[u+((l<<1)+-1<<2)+2>>1]=0;r[u+((l<<1)+-1<<2)>>1]=n;b=b+1|0}while((b|0)!=3);r[(o[e+60>>2]|0)+((h&65535)<<6)+48>>1]=r[e+64>>1]|0;r[e+64>>1]=h;r[e+56>>1]=(r[e+56>>1]|0)+-1<<16>>16;return}function tL(e,t,i,n,_){e=e|0;t=t|0;i=i|0;n=n|0;_=_|0;var a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0;P=p;p=p+16|0;o[t+16>>2]=o[i>>2];o[t+16+4>>2]=o[i+4>>2];o[t+16+8>>2]=o[i+8>>2];o[t+16+12>>2]=o[i+12>>2];o[t+32>>2]=o[n>>2];o[t+32+4>>2]=o[n+4>>2];o[t+32+8>>2]=o[n+8>>2];o[t+32+12>>2]=o[n+12>>2];D=o[e+60>>2]|0;O=o[t+12>>2]&65535;OL(e,P+6|0,+c[i>>2],+c[i+4>>2],+c[i+8>>2],0);OL(e,P,+c[n>>2],+c[n+4>>2],+c[n+8>>2],1);M=0;do{g=r[D+(O<<6)+48+(M<<1)>>1]|0;w=r[D+(O<<6)+54+(M<<1)>>1]|0;h=r[P+6+(M<<1)>>1]|0;f=e+68+(M<<2)|0;y=o[f>>2]|0;l=(h&65535)-(s[y+((g&65535)<<2)>>1]|0)|0;m=r[P+(M<<1)>>1]|0;S=(m&65535)-(s[y+((w&65535)<<2)>>1]|0)|0;r[y+((g&65535)<<2)>>1]=h;r[y+((w&65535)<<2)>>1]=m;if((l|0)<0)LL(e,M,g);e:do if((S|0)>0?(R=o[f>>2]|0,j=o[e+60>>2]|0,I=s[R+((w&65535)<<2)+2>>1]|0,T=r[R+((w&65535)<<2)+6>>1]|0,T<<16>>16):0){u=1<<M&3;b=j+(I<<6)+54+(M<<1)|0;a=T;m=R+((w&65535)<<2)|0;do{y=m;m=m+4|0;d=r[m>>1]|0;if((s[y>>1]|0)<(d&65535))break e;h=o[e+60>>2]|0;a=a&65535;if(!(d&1)){if(((((s[j+(I<<6)+54+(u<<1)>>1]|0)>=(s[h+(a<<6)+48+(u<<1)>>1]|0)?(s[h+(a<<6)+54+(u<<1)>>1]|0)>=(s[j+(I<<6)+48+(u<<1)>>1]|0):0)?(s[j+(I<<6)+54+((1<<u&3)<<1)>>1]|0)>=(s[h+(a<<6)+48+((1<<u&3)<<1)>>1]|0):0)?(s[h+(a<<6)+54+((1<<u&3)<<1)>>1]|0)>=(s[j+(I<<6)+48+((1<<u&3)<<1)>>1]|0):0)?(x=o[e+92>>2]|0,L=h+((s[y+2>>1]|0)<<6)|0,gP[o[(o[x>>2]|0)+8>>2]&63](x,L,h+(a<<6)|0)|0,x=o[e+96>>2]|0,x|0):0)gP[o[(o[x>>2]|0)+8>>2]&63](x,L,h+(a<<6)|0)|0;h=h+(a<<6)+48+(M<<1)|0;r[h>>1]=(r[h>>1]|0)+-1<<16>>16}else{h=h+(a<<6)+54+(M<<1)|0;r[h>>1]=(r[h>>1]|0)+-1<<16>>16}r[b>>1]=(r[b>>1]|0)+1<<16>>16;a=s[y>>1]|s[y+2>>1]<<16;h=s[m>>1]|s[m+2>>1]<<16;r[y>>1]=h;r[y+2>>1]=h>>>16;r[m>>1]=a;r[m+2>>1]=a>>>16;a=r[y+10>>1]|0}while(a<<16>>16!=0)}while(0);e:do if((l|0)>0?(v=o[f>>2]|0,C=r[v+((g&65535)<<2)+6>>1]|0,C<<16>>16):0){d=(o[e+60>>2]|0)+((s[v+((g&65535)<<2)+2>>1]|0)<<6)+48+(M<<1)|0;h=1<<M&3;f=C;u=v+((g&65535)<<2)|0;do{b=u;u=u+4|0;a=r[u>>1]|0;if((s[b>>1]|0)<(a&65535))break e;l=o[e+60>>2]|0;f=f&65535;if(!(a&1)){g=l+(f<<6)+48+(M<<1)|0;r[g>>1]=(r[g>>1]|0)+-1<<16>>16}else{a=s[b+2>>1]|0;if(((((s[l+(a<<6)+54+(h<<1)>>1]|0)>=(s[l+(f<<6)+48+(h<<1)>>1]|0)?(s[l+(f<<6)+54+(h<<1)>>1]|0)>=(s[l+(a<<6)+48+(h<<1)>>1]|0):0)?(s[l+(a<<6)+54+((1<<h&3)<<1)>>1]|0)>=(s[l+(f<<6)+48+((1<<h&3)<<1)>>1]|0):0)?(s[l+(f<<6)+54+((1<<h&3)<<1)>>1]|0)>=(s[l+(a<<6)+48+((1<<h&3)<<1)>>1]|0):0)?(k=o[e+92>>2]|0,bP[o[(o[k>>2]|0)+12>>2]&31](k,l+(a<<6)|0,l+(f<<6)|0,_)|0,k=o[e+96>>2]|0,k|0):0)bP[o[(o[k>>2]|0)+12>>2]&31](k,l+(a<<6)|0,l+(f<<6)|0,_)|0;g=l+(f<<6)+54+(M<<1)|0;r[g>>1]=(r[g>>1]|0)+-1<<16>>16}r[d>>1]=(r[d>>1]|0)+1<<16>>16;f=s[b>>1]|s[b+2>>1]<<16;g=s[u>>1]|s[u+2>>1]<<16;r[b>>1]=g;r[b+2>>1]=g>>>16;r[u>>1]=f;r[u+2>>1]=f>>>16;f=r[b+10>>1]|0}while(f<<16>>16!=0)}while(0);if((S|0)<0)xL(e,M,w,_);M=M+1|0}while((M|0)!=3);a=o[e+108>>2]|0;if(!a){p=P;return}rP[o[(o[a>>2]|0)+16>>2]&31](a,o[t+60>>2]|0,i,n,_);p=P;return}function iL(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;o[i>>2]=o[t+16>>2];o[i+4>>2]=o[t+16+4>>2];o[i+8>>2]=o[t+16+8>>2];o[i+12>>2]=o[t+16+12>>2];o[n>>2]=o[t+32>>2];o[n+4>>2]=o[t+32+4>>2];o[n+8>>2]=o[t+32+8>>2];o[n+12>>2]=o[t+32+12>>2];return}function nL(e,t,i,n,_,a){e=e|0;t=t|0;i=i|0;n=n|0;_=_|0;a=a|0;var c=0;c=o[e+108>>2]|0;if(c|0){vP[o[(o[c>>2]|0)+24>>2]&7](c,t,i,n,_,a);return}c=r[e+56>>1]|0;if((c&65535)<<1>>>0<=1)return;t=1;_=1;do{a=o[e+68>>2]|0;if(r[a+(t<<2)>>1]&1){DP[o[(o[n>>2]|0)+8>>2]&31](n,(o[e+60>>2]|0)+((s[a+(t<<2)+2>>1]|0)<<6)|0)|0;c=r[e+56>>1]|0}_=_+1<<16>>16;t=_&65535}while(t>>>0<((c&65535)<<1|1)>>>0);return}function rL(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var _=0,a=0,f=0,p=0,l=0;_=o[e+108>>2]|0;if(_|0){HP[o[(o[_>>2]|0)+28>>2]&127](_,t,i,n);return}_=r[e+56>>1]|0;if((_&65535)<<1>>>0<=1)return;f=1;l=1;do{a=o[e+68>>2]|0;if(r[a+(f<<2)>>1]&1){p=o[e+60>>2]|0;f=s[a+(f<<2)+2>>1]|0;if(!(+c[t>>2]>+c[p+(f<<6)+32>>2])?!(+c[i>>2]<+c[p+(f<<6)+16>>2]):0)a=1;else a=0;if(!(!(+c[t+8>>2]>+c[p+(f<<6)+40>>2])?!(+c[i+8>>2]<+c[p+(f<<6)+24>>2]):0))a=0;if(!(+c[t+4>>2]>+c[p+(f<<6)+36>>2])?!(+c[i+4>>2]<+c[p+(f<<6)+20>>2]|a^1):0){DP[o[(o[n>>2]|0)+8>>2]&31](n,p+(f<<6)|0)|0;_=r[e+56>>1]|0}}l=l+1<<16>>16;f=l&65535}while(f>>>0<((_&65535)<<1|1)>>>0);return}function oL(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,a=0,c=0,f=0,l=0,u=0,b=0,d=0,h=0;d=p;p=p+32|0;b=o[e+92>>2]|0;if(!(fP[o[(o[b>>2]|0)+56>>2]&127](b)|0)){p=d;return}b=o[e+92>>2]|0;b=fP[o[(o[b>>2]|0)+28>>2]&127](b)|0;i=o[b+4>>2]|0;if((i|0)>1){PL(b,0,i+-1|0);i=o[b+4>>2]|0}n=i-(o[e+104>>2]|0)|0;o[d+16>>2]=0;o[d+16+4>>2]=0;o[d+16+8>>2]=0;o[d+16+12>>2]=0;ML(b,n,d+16|0);o[e+104>>2]=0;n=o[b+4>>2]|0;if((n|0)>0){i=0;f=0;l=0;_=0;while(1){c=o[b+12>>2]|0;a=c+(f<<4)|0;h=l;l=o[a>>2]|0;c=c+(f<<4)+4|0;r=o[c>>2]|0;if(!((l|0)==(h|0)&(r|0)==(_|0))){h=l+54|0;_=l+48|0;if(!((((((s[h>>1]|0)>=(s[r+48>>1]|0)?(s[r+54>>1]|0)>=(s[_>>1]|0):0)?(s[h+2>>1]|0)>=(s[r+48+2>>1]|0):0)?(s[r+54+2>>1]|0)>=(s[_+2>>1]|0):0)?(s[h+4>>1]|0)>=(s[r+52>>1]|0):0)?(s[r+54+4>>1]|0)>=(s[l+52>>1]|0):0))u=13}else{r=_;u=13}if((u|0)==13){u=0;i=o[e+92>>2]|0;EP[o[(o[i>>2]|0)+32>>2]&127](i,a,t);o[a>>2]=0;o[c>>2]=0;i=(o[e+104>>2]|0)+1|0;o[e+104>>2]=i;o[4984]=(o[4984]|0)+-1;n=o[b+4>>2]|0}f=f+1|0;if((f|0)>=(n|0))break;else _=r}if((n|0)>1){PL(b,0,n+-1|0);n=o[b+4>>2]|0;i=o[e+104>>2]|0}}else i=0;o[d>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;o[d+12>>2]=0;ML(b,n-i|0,d);o[e+104>>2]=0;p=d;return}function _L(e){e=e|0;return o[e+92>>2]|0}function sL(e){e=e|0;return o[e+92>>2]|0}function aL(e,t,i){e=e|0;t=t|0;i=i|0;o[t>>2]=o[e+8>>2];o[t+4>>2]=o[e+8+4>>2];o[t+8>>2]=o[e+8+8>>2];o[t+12>>2]=o[e+8+12>>2];o[i>>2]=o[e+24>>2];o[i+4>>2]=o[e+24+4>>2];o[i+8>>2]=o[e+24+8>>2];o[i+12>>2]=o[e+24+12>>2];return}function cL(e,t){e=e|0;t=t|0;var i=0,n=0,_=0;t=o[e+56>>2]|0;if((t&65535)<<16>>16)return;r[e+64>>1]=1;_=o[e+60>>2]|0;if((t>>>16&65535)>1){i=1;t=1;while(1){r[_+(i<<6)+48>>1]=i+1;n=t+1<<16>>16;t=r[e+58>>1]|0;if((n&65535)<(t&65535)){i=n&65535;t=n}else break}}else t=t>>>16&65535;r[_+((t&65535)+-1<<6)+48>>1]=0;return}function fL(e){e=e|0;return}function pL(e){e=e|0;var t=0,i=0;i=p;p=p+32|0;et(e|0)|0;if(ot(23316,3)|0)tc(19340,i);e=rt(o[5830]|0)|0;if((e|0?(t=o[e>>2]|0,t|0):0)?(o[t+48>>2]&-256|0)==1126902528?(o[t+48+4>>2]|0)==1129074247:0:0){VP[o[t+12>>2]&3]();tc(19664,i+8|0)}t=o[2054]|0;o[2054]=t+0;VP[t&3]();tc(19664,i+16|0)}function lL(e){e=e|0;qO(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function uL(e){e=e|0;var t=0;o[e>>2]=2616;t=o[e+16>>2]|0;if(t|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;return}function bL(e){e=e|0;var t=0;o[e>>2]=2616;t=o[e+16>>2]|0;if(!t){qa(e);return}if(!(n[e+20>>0]|0)){qa(e);return}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);qa(e);return}function dL(e,t,i){e=e|0;t=t|0;i=i|0;return 0}function hL(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;return 0}function mL(e,t,i){e=e|0;t=t|0;i=i|0;return}function yL(e){e=e|0;return o[e+16>>2]|0}function gL(e){e=e|0;return o[e+16>>2]|0}function vL(e){e=e|0;return e+4|0}function CL(e,t,i){e=e|0;t=t|0;i=i|0;return}function wL(e){e=e|0;return 0}function kL(e,t,i){e=e|0;t=t|0;i=i|0;return}function SL(e,t){e=e|0;t=t|0;return}function RL(e,t,i){e=e|0;t=t|0;i=i|0;return}function jL(e,t,i){e=e|0;t=t|0;i=i|0;return 0}function IL(e){e=e|0;return 1}function TL(e,t){e=e|0;t=t|0;return}function DL(e,t){e=e|0;t=t|0;return}function OL(e,t,i,n,o,_){e=e|0;t=t|0;i=+i;n=+n;o=+o;_=_|0;var s=0,a=0;i=(i-+c[e+8>>2])*+c[e+40>>2];n=(n-+c[e+12>>2])*+c[e+44>>2];o=(o-+c[e+16>>2])*+c[e+48>>2];do if(!(i<=0)){s=r[e+6>>1]|0;a=r[e+4>>1]|0;if(!(i>=+(s&65535))){s=a&(~~i&65535)&65535|_;break}else{s=a&s&65535|_;break}}else s=_;while(0);r[t>>1]=s;do if(!(n<=0)){s=r[e+6>>1]|0;a=r[e+4>>1]|0;if(!(n>=+(s&65535))){s=a&(~~n&65535)&65535|_;break}else{s=a&s&65535|_;break}}else s=_;while(0);r[t+2>>1]=s;if(o<=0){_=_&65535;t=t+4|0;r[t>>1]=_;return}a=r[e+6>>1]|0;s=r[e+4>>1]|0;if(!(o>=+(a&65535))){_=s&(~~o&65535)&65535|_;_=_&65535;t=t+4|0;r[t>>1]=_;return}else{_=s&a&65535|_;_=_&65535;t=t+4|0;r[t>>1]=_;return}}function LL(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,_=0,a=0,c=0,f=0,p=0,l=0,u=0;_=o[e+68+(t<<2)>>2]|0;l=o[e+60>>2]|0;u=s[_+((i&65535)<<2)+2>>1]|0;n=r[_+((i&65535)<<2)+-4>>1]|0;if((s[_+((i&65535)<<2)>>1]|0)>=(n&65535))return;c=l;a=_+((i&65535)<<2)|0;i=_+((i&65535)<<2)+-4|0;while(1){_=s[a+-2>>1]|0;if(!(n&1)){c=c+(_<<6)+48+(t<<1)|0;r[c>>1]=(r[c>>1]|0)+1<<16>>16}else{if(((((s[l+(u<<6)+54+((1<<t&3)<<1)>>1]|0)>=(s[c+(_<<6)+48+((1<<t&3)<<1)>>1]|0)?(s[c+(_<<6)+54+((1<<t&3)<<1)>>1]|0)>=(s[l+(u<<6)+48+((1<<t&3)<<1)>>1]|0):0)?(s[l+(u<<6)+54+((1<<(1<<t&3)&3)<<1)>>1]|0)>=(s[c+(_<<6)+48+((1<<(1<<t&3)&3)<<1)>>1]|0):0)?(s[c+(_<<6)+54+((1<<(1<<t&3)&3)<<1)>>1]|0)>=(s[l+(u<<6)+48+((1<<(1<<t&3)&3)<<1)>>1]|0):0)?(p=o[e+92>>2]|0,f=c+(_<<6)|0,gP[o[(o[p>>2]|0)+8>>2]&63](p,l+(u<<6)|0,f)|0,p=o[e+96>>2]|0,p|0):0)gP[o[(o[p>>2]|0)+8>>2]&63](p,l+(u<<6)|0,f)|0;c=c+(_<<6)+54+(t<<1)|0;r[c>>1]=(r[c>>1]|0)+1<<16>>16}r[l+(u<<6)+48+(t<<1)>>1]=(r[l+(u<<6)+48+(t<<1)>>1]|0)+-1<<16>>16;_=s[a>>1]|s[a+2>>1]<<16;n=s[i>>1]|s[i+2>>1]<<16;r[a>>1]=n;r[a+2>>1]=n>>>16;r[i>>1]=_;r[i+2>>1]=_>>>16;_=a+-4|0;i=i+-4|0;n=r[i>>1]|0;if((s[_>>1]|0)>=(n&65535))break;c=o[e+60>>2]|0;a=_}return}function xL(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var _=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0;a=o[e+68+(t<<2)>>2]|0;_=r[a+((i&65535)<<2)+-4>>1]|0;if((s[a+((i&65535)<<2)>>1]|0)>=(_&65535))return;f=o[e+60>>2]|0;p=f+((s[a+((i&65535)<<2)+2>>1]|0)<<6)+54+(t<<1)|0;c=a+((i&65535)<<2)|0;i=a+((i&65535)<<2)+-4|0;while(1){a=s[c+-2>>1]|0;if(!(_&1)){_=s[c+2>>1]|0;if(((((s[f+(_<<6)+54+((1<<t&3)<<1)>>1]|0)>=(s[f+(a<<6)+48+((1<<t&3)<<1)>>1]|0)?(s[f+(a<<6)+54+((1<<t&3)<<1)>>1]|0)>=(s[f+(_<<6)+48+((1<<t&3)<<1)>>1]|0):0)?(s[f+(_<<6)+54+((1<<(1<<t&3)&3)<<1)>>1]|0)>=(s[f+(a<<6)+48+((1<<(1<<t&3)&3)<<1)>>1]|0):0)?(s[f+(a<<6)+54+((1<<(1<<t&3)&3)<<1)>>1]|0)>=(s[f+(_<<6)+48+((1<<(1<<t&3)&3)<<1)>>1]|0):0)?(b=o[e+92>>2]|0,l=f+(_<<6)|0,u=f+(a<<6)|0,bP[o[(o[b>>2]|0)+12>>2]&31](b,l,u,n)|0,b=o[e+96>>2]|0,b|0):0)bP[o[(o[b>>2]|0)+12>>2]&31](b,l,u,n)|0;f=f+(a<<6)+48+(t<<1)|0;r[f>>1]=(r[f>>1]|0)+1<<16>>16}else{f=f+(a<<6)+54+(t<<1)|0;r[f>>1]=(r[f>>1]|0)+1<<16>>16}r[p>>1]=(r[p>>1]|0)+-1<<16>>16;a=s[c>>1]|s[c+2>>1]<<16;_=s[i>>1]|s[i+2>>1]<<16;r[c>>1]=_;r[c+2>>1]=_>>>16;r[i>>1]=a;r[i+2>>1]=a>>>16;a=c+-4|0;i=i+-4|0;_=r[i>>1]|0;if((s[a>>1]|0)>=(_&65535))break;f=o[e+60>>2]|0;c=a}return}function ML(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,c=0;a=o[e+4>>2]|0;if((a|0)>=(t|0)){o[e+4>>2]=t;return}if((o[e+8>>2]|0)<(t|0)){if(!t){\nr=0;_=a}else{o[5637]=(o[5637]|0)+1;r=Qa((t<<4|3)+16|0)|0;if(!r)r=0;else{o[(r+4+15&-16)+-4>>2]=r;r=r+4+15&-16}_=o[e+4>>2]|0}if((_|0)>0){s=0;do{c=o[e+12>>2]|0;o[r+(s<<4)>>2]=o[c+(s<<4)>>2];o[r+(s<<4)+4>>2]=o[c+(s<<4)+4>>2];o[r+(s<<4)+8>>2]=o[c+(s<<4)+8>>2];o[r+(s<<4)+12>>2]=o[c+(s<<4)+12>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+12>>2]|0;if(_|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=r;o[e+8>>2]=t;_=e+12|0}else _=e+12|0;r=a;do{c=o[_>>2]|0;o[c+(r<<4)>>2]=o[i>>2];o[c+(r<<4)+4>>2]=o[i+4>>2];o[c+(r<<4)+8>>2]=o[i+8>>2];o[c+(r<<4)+12>>2]=o[i+12>>2];r=r+1|0}while((r|0)!=(t|0));o[e+4>>2]=t;return}function PL(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0,d=0;while(1){d=(t+i|0)/2|0;l=o[e+12>>2]|0;u=o[l+(d<<4)>>2]|0;b=o[l+(d<<4)+4>>2]|0;d=o[l+(d<<4)+8>>2]|0;n=t;r=i;while(1){e:do if(!u)while(1){c=o[l+(n<<4)>>2]|0;if(!c)_=-1;else _=o[c+12>>2]|0;f=o[l+(n<<4)+4>>2]|0;if(!f)s=-1;else s=o[f+12>>2]|0;if(!b)a=-1;else a=o[b+12>>2]|0;do if((_|0)<=-1){_=(s|0)>(a|0);if(_|(c|0)==0^1)if((c|0)==0&_)break;else break e;if((f|0)!=(b|0))break e;if((o[l+(n<<4)+8>>2]|0)>>>0<=d>>>0)break e}while(0);n=n+1|0}else{p=o[u+12>>2]|0;if(!b)while(1){a=o[l+(n<<4)>>2]|0;if(!a)_=-1;else _=o[a+12>>2]|0;c=o[l+(n<<4)+4>>2]|0;if(!c)s=-1;else s=o[c+12>>2]|0;do if((_|0)<=(p|0)){_=(s|0)>-1;if(_|(a|0)==(u|0)^1)if((a|0)==(u|0)&_)break;else break e;if(c|0)break e;if((o[l+(n<<4)+8>>2]|0)>>>0<=d>>>0)break e}while(0);n=n+1|0}f=o[b+12>>2]|0;while(1){a=o[l+(n<<4)>>2]|0;if(!a)_=-1;else _=o[a+12>>2]|0;c=o[l+(n<<4)+4>>2]|0;if(!c)s=-1;else s=o[c+12>>2]|0;do if((_|0)<=(p|0)){_=(s|0)>(f|0);if(_|(a|0)==(u|0)^1)if((a|0)==(u|0)&_)break;else break e;if((c|0)!=(b|0))break e;if((o[l+(n<<4)+8>>2]|0)>>>0<=d>>>0)break e}while(0);n=n+1|0}}while(0);e:do if(!u)while(1){c=o[l+(r<<4)>>2]|0;if(!c)_=-1;else _=o[c+12>>2]|0;if(!b)s=-1;else s=o[b+12>>2]|0;f=o[l+(r<<4)+4>>2]|0;if(!f)a=-1;else a=o[f+12>>2]|0;do if((_|0)>=-1){_=(s|0)>(a|0);if(_|(c|0)==0^1)if((c|0)==0&_)break;else break e;if((b|0)!=(f|0))break e;if(d>>>0<=(o[l+(r<<4)+8>>2]|0)>>>0)break e}while(0);r=r+-1|0}else{p=o[u+12>>2]|0;if(!b)while(1){a=o[l+(r<<4)>>2]|0;if(!a)_=-1;else _=o[a+12>>2]|0;c=o[l+(r<<4)+4>>2]|0;if(!c)s=-1;else s=o[c+12>>2]|0;do if((p|0)<=(_|0)){_=(s|0)<-1;if(_|(u|0)==(a|0)^1)if((u|0)==(a|0)&_)break;else break e;if(c|0)break e;if(d>>>0<=(o[l+(r<<4)+8>>2]|0)>>>0)break e}while(0);r=r+-1|0}f=o[b+12>>2]|0;while(1){a=o[l+(r<<4)>>2]|0;if(!a)_=-1;else _=o[a+12>>2]|0;c=o[l+(r<<4)+4>>2]|0;if(!c)s=-1;else s=o[c+12>>2]|0;do if((p|0)<=(_|0)){_=(f|0)>(s|0);if(_|(u|0)==(a|0)^1)if((u|0)==(a|0)&_)break;else break e;if((b|0)!=(c|0))break e;if(d>>>0<=(o[l+(r<<4)+8>>2]|0)>>>0)break e}while(0);r=r+-1|0}}while(0);if((n|0)<=(r|0)){s=l+(n<<4)|0;a=o[s>>2]|0;c=o[l+(n<<4)+4>>2]|0;f=o[l+(n<<4)+8>>2]|0;p=o[l+(n<<4)+12>>2]|0;l=l+(r<<4)|0;o[s>>2]=o[l>>2];o[s+4>>2]=o[l+4>>2];o[s+8>>2]=o[l+8>>2];o[s+12>>2]=o[l+12>>2];l=o[e+12>>2]|0;o[l+(r<<4)>>2]=a;o[l+(r<<4)+4>>2]=c;o[l+(r<<4)+8>>2]=f;o[l+(r<<4)+12>>2]=p;n=n+1|0;r=r+-1|0}if((n|0)>(r|0))break;l=o[e+12>>2]|0}if((r|0)>(t|0))PL(e,t,r);if((n|0)<(i|0))t=n;else break}return}function WL(e){e=e|0;return}function BL(e){e=e|0;var t=0;t=o[e>>2]|0;if(t|0)AL(e,t);t=o[e+4>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+4>>2]=0;o[e+8>>2]=-1;t=o[e+32>>2]|0;if(t|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;o[e+16>>2]=0;t=o[e+52>>2]|0;if(!t){n[e+56>>0]=1;o[e+52>>2]=0;o[e+44>>2]=0;o[e+48>>2]=0;n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;return}if(!(n[e+56>>0]|0)){n[e+56>>0]=1;o[e+52>>2]=0;o[e+44>>2]=0;o[e+48>>2]=0;n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;return}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=o[e+32>>2]|0;n[e+56>>0]=1;o[e+52>>2]=0;o[e+44>>2]=0;o[e+48>>2]=0;if(!t){n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;return}if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+32>>2]=0;n[e+36>>0]=1;o[e+32>>2]=0;o[e+24>>2]=0;o[e+28>>2]=0;return}function AL(e,t){e=e|0;t=t|0;var i=0;if(o[t+40>>2]|0){AL(e,o[t+36>>2]|0);AL(e,o[t+40>>2]|0)}if((o[e>>2]|0)==(t|0))o[e>>2]=0;i=o[e+4>>2]|0;if(!i){o[e+4>>2]=t;return}o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);o[e+4>>2]=t;return}function FL(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0;u=p;p=p+32|0;if((t|0)<0)t=o[e+12>>2]|0;i=o[e>>2]|0;if(!((t|0)>0&(i|0)!=0)){p=u;return}while(1){n=i+40|0;if(o[n>>2]|0){l=0;while(1){f=(o[e+16>>2]|0)>>>l&1;r=i+32|0;_=o[r>>2]|0;if(_>>>0>i>>>0){s=(o[_+40>>2]|0)==(i|0)&1;a=o[_+36+((s^1)<<2)>>2]|0;c=o[_+32>>2]|0;if(!c)o[e>>2]=i;else o[c+36+(((o[c+40>>2]|0)==(_|0)&1)<<2)>>2]=i;o[a+32>>2]=i;o[_+32>>2]=i;o[r>>2]=c;c=i+36|0;o[_+36>>2]=o[c>>2];o[_+40>>2]=o[n>>2];o[(o[c>>2]|0)+32>>2]=_;o[(o[n>>2]|0)+32>>2]=_;o[i+36+(s<<2)>>2]=_;o[i+36+((s^1)<<2)>>2]=a;o[u>>2]=o[_>>2];o[u+4>>2]=o[_+4>>2];o[u+8>>2]=o[_+8>>2];o[u+12>>2]=o[_+12>>2];o[u+16>>2]=o[_+16>>2];o[u+20>>2]=o[_+20>>2];o[u+24>>2]=o[_+24>>2];o[u+28>>2]=o[_+28>>2];o[_>>2]=o[i>>2];o[_+4>>2]=o[i+4>>2];o[_+8>>2]=o[i+8>>2];o[_+12>>2]=o[i+12>>2];o[_+16>>2]=o[i+16>>2];o[_+20>>2]=o[i+20>>2];o[_+24>>2]=o[i+24>>2];o[_+28>>2]=o[i+28>>2];o[i>>2]=o[u>>2];o[i+4>>2]=o[u+4>>2];o[i+8>>2]=o[u+8>>2];o[i+12>>2]=o[u+12>>2];o[i+16>>2]=o[u+16>>2];o[i+20>>2]=o[u+20>>2];o[i+24>>2]=o[u+24>>2];o[i+28>>2]=o[u+28>>2];i=_}i=o[i+36+(f<<2)>>2]|0;n=i+40|0;if(!(o[n>>2]|0))break;else l=l+1&31}}if(!(GL(e,i)|0))n=0;else n=o[e>>2]|0;EL(e,n,i);o[e+16>>2]=(o[e+16>>2]|0)+1;t=t+-1|0;if(!t)break;i=o[e>>2]|0}p=u;return}function GL(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0;if((o[e>>2]|0)==(t|0)){o[e>>2]=0;e=0;return e|0}n=o[t+32>>2]|0;i=o[n+32>>2]|0;t=o[n+36+(((o[n+40>>2]|0)!=(t|0)&1)<<2)>>2]|0;if(!i){o[e>>2]=t;o[t+32>>2]=0;i=o[e+4>>2]|0;if(!i)i=t;else{o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);i=o[e>>2]|0}o[e+4>>2]=n;e=i;return e|0}o[i+36+(((o[i+40>>2]|0)==(n|0)&1)<<2)>>2]=t;o[t+32>>2]=i;t=o[e+4>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+4>>2]=n;do{y=+c[i>>2];k=i+4|0;h=+c[k>>2];C=i+8|0;b=+c[C>>2];S=i+16|0;l=+c[S>>2];w=i+20|0;s=+c[w>>2];n=i+24|0;f=+c[n>>2];v=o[i+36>>2]|0;t=o[i+40>>2]|0;g=+c[v>>2];m=+c[t>>2];m=g<m?g:m;c[i>>2]=m;g=+c[v+16>>2];p=+c[t+16>>2];p=g>p?g:p;c[S>>2]=p;g=+c[v+4>>2];d=+c[t+4>>2];d=g<d?g:d;c[k>>2]=d;g=+c[v+20>>2];_=+c[t+20>>2];_=g>_?g:_;c[w>>2]=_;g=+c[v+8>>2];u=+c[t+8>>2];u=g<u?g:u;c[C>>2]=u;g=+c[v+24>>2];a=+c[t+24>>2];a=g>a?g:a;c[n>>2]=a;if(!(y!=m|h!=d|b!=u|l!=p)?!(f!=a|s!=_):0){r=14;break}i=o[i+32>>2]|0}while((i|0)!=0);if((r|0)==14)return i|0;S=o[e>>2]|0;return S|0}function EL(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;if(!(o[e>>2]|0)){o[e>>2]=i;o[i+32>>2]=0;return}n=o[t+40>>2]|0;if(!n)b=t;else{f=+c[i>>2]+ +c[i+16>>2];s=+c[i+4>>2]+ +c[i+20>>2];a=+c[i+8>>2]+ +c[i+24>>2];do{d=o[t+36>>2]|0;u=+N(+(f-(+c[d>>2]+ +c[d+16>>2])))+ +N(+(s-(+c[d+4>>2]+ +c[d+20>>2])))+ +N(+(a-(+c[d+8>>2]+ +c[d+24>>2])));t=o[t+36+((!(u<+N(+(f-(+c[n>>2]+ +c[n+16>>2])))+ +N(+(s-(+c[n+4>>2]+ +c[n+20>>2])))+ +N(+(a-(+c[n+8>>2]+ +c[n+24>>2]))))&1)<<2)>>2]|0;n=o[t+40>>2]|0}while((n|0)!=0);b=t}d=b+32|0;n=o[d>>2]|0;t=o[e+4>>2]|0;if(!t){o[5637]=(o[5637]|0)+1;t=Qa(63)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}r=t;_=r+44|0;do{o[r>>2]=0;r=r+4|0}while((r|0)<(_|0))}else o[e+4>>2]=0;o[t+32>>2]=n;o[t+36>>2]=0;r=t+40|0;o[r>>2]=0;h=+c[i>>2];u=+c[b>>2];u=h<u?h:u;c[t>>2]=u;h=+c[i+16>>2];f=+c[b+16>>2];f=h>f?h:f;c[t+16>>2]=f;h=+c[i+4>>2];l=+c[b+4>>2];l=h<l?h:l;c[t+4>>2]=l;h=+c[i+20>>2];a=+c[b+20>>2];a=h>a?h:a;c[t+20>>2]=a;h=+c[i+8>>2];p=+c[b+8>>2];p=h<p?h:p;c[t+8>>2]=p;h=+c[i+24>>2];s=+c[b+24>>2];s=h>s?h:s;c[t+24>>2]=s;if(!n){o[t+36>>2]=b;o[d>>2]=t;o[r>>2]=i;o[i+32>>2]=t;o[e>>2]=t;return}o[n+36+(((o[(o[d>>2]|0)+40>>2]|0)==(b|0)&1)<<2)>>2]=t;o[t+36>>2]=b;o[d>>2]=t;o[r>>2]=i;o[i+32>>2]=t;while(1){t=n+4|0;if(((((+c[n>>2]<=u?+c[t>>2]<=l:0)?+c[n+8>>2]<=p:0)?+c[n+16>>2]>=f:0)?+c[n+20>>2]>=a:0)?+c[n+24>>2]>=s:0){t=21;break}i=o[n+36>>2]|0;e=o[n+40>>2]|0;h=+c[i>>2];u=+c[e>>2];u=h<u?h:u;c[n>>2]=u;h=+c[i+16>>2];f=+c[e+16>>2];f=h>f?h:f;c[n+16>>2]=f;h=+c[i+4>>2];l=+c[e+4>>2];l=h<l?h:l;c[t>>2]=l;h=+c[i+20>>2];a=+c[e+20>>2];a=h>a?h:a;c[n+20>>2]=a;h=+c[i+8>>2];p=+c[e+8>>2];p=h<p?h:p;c[n+8>>2]=p;h=+c[i+24>>2];s=+c[e+24>>2];s=h>s?h:s;c[n+24>>2]=s;n=o[n+32>>2]|0;if(!n){t=21;break}}if((t|0)==21)return}function VL(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=+r;var _=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;b=+c[i>>2];if(+c[t>>2]<=b){s=+c[i+4>>2];if((((+c[t+4>>2]<=s?+c[t+8>>2]<=+c[i+8>>2]:0)?+c[t+16>>2]>=+c[i+16>>2]:0)?+c[t+20>>2]>=+c[i+20>>2]:0)?+c[t+24>>2]>=+c[i+24>>2]:0){i=0;return i|0}else _=i+4|0}else{_=i+4|0;s=+c[i+4>>2]}c[i>>2]=b-r;l=s-r;c[_>>2]=l;d=+c[i+8>>2]-r;c[i+8>>2]=d;s=+c[i+16>>2]+r;c[i+16>>2]=s;u=+c[i+20>>2]+r;c[i+20>>2]=u;h=+c[i+24>>2]+r;c[i+24>>2]=h;p=+c[n>>2];if(p>0)c[i+16>>2]=p+s;else c[i>>2]=p+(b-r);s=+c[n+4>>2];if(s>0)c[i+20>>2]=s+u;else c[_>>2]=s+l;s=+c[n+8>>2];if(s>0)c[i+24>>2]=s+h;else c[i+8>>2]=s+d;_=GL(e,t)|0;e:do if(_){a=o[e+8>>2]|0;if((a|0)<=-1){_=o[e>>2]|0;break}if((a|0)>0){f=0;while(1){n=o[_+32>>2]|0;f=f+1|0;if(!n)break e;if((f|0)>=(a|0)){_=n;break}else _=n}}}else _=0;while(0);o[t>>2]=o[i>>2];o[t+4>>2]=o[i+4>>2];o[t+8>>2]=o[i+8>>2];o[t+12>>2]=o[i+12>>2];o[t+16>>2]=o[i+16>>2];o[t+20>>2]=o[i+20>>2];o[t+24>>2]=o[i+24>>2];o[t+28>>2]=o[i+28>>2];EL(e,_,t);i=1;return i|0}function NL(e,t,i){e=e|0;t=t|0;i=i|0;return}function XL(e,t,i){e=e|0;t=t|0;i=+i;aP[o[(o[e>>2]|0)+12>>2]&127](e,t);return}function HL(e,t){e=e|0;t=t|0;return 1}function ZL(e,t){e=e|0;t=t|0;return 1}function UL(e){e=e|0;var t=0;o[e>>2]=2692;if(n[e+192>>0]|0?(t=o[e+136>>2]|0,_P[o[o[t>>2]>>2]&255](t),t=o[e+136>>2]|0,t|0):0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}BL(e+64|0);BL(e+4|0);return}function zL(e){e=e|0;UL(e);qa(e);return}function YL(e,t,i,_,s,a,c,f,l){e=e|0;t=t|0;i=i|0;_=_|0;s=s|0;a=a|0;c=c|0;f=f|0;l=l|0;var u=0,b=0;b=p;p=p+48|0;o[5637]=(o[5637]|0)+1;_=Qa(83)|0;if(!_)u=0;else{o[(_+4+15&-16)+-4>>2]=_;u=_+4+15&-16}o[u>>2]=s;r[u+4>>1]=a;r[u+6>>1]=c;a=u+16|0;o[a>>2]=o[t>>2];o[a+4>>2]=o[t+4>>2];o[a+8>>2]=o[t+8>>2];o[a+12>>2]=o[t+12>>2];a=u+32|0;o[a>>2]=o[i>>2];o[a+4>>2]=o[i+4>>2];o[a+8>>2]=o[i+8>>2];o[a+12>>2]=o[i+12>>2];o[u+8>>2]=0;a=u+56|0;o[a>>2]=0;c=u+52|0;o[c>>2]=0;o[b+16>>2]=o[t>>2];o[b+16+4>>2]=o[t+4>>2];o[b+16+8>>2]=o[t+8>>2];o[b+16+12>>2]=o[t+12>>2];o[b+16+16>>2]=o[i>>2];o[b+16+16+4>>2]=o[i+4>>2];o[b+16+16+8>>2]=o[i+8>>2];o[b+16+16+12>>2]=o[i+12>>2];o[u+60>>2]=o[e+144>>2];_=(o[e+188>>2]|0)+1|0;o[e+188>>2]=_;o[u+12>>2]=_;_=o[e+8>>2]|0;if(!_){o[5637]=(o[5637]|0)+1;_=Qa(63)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}f=_;l=f+44|0;do{o[f>>2]=0;f=f+4|0}while((f|0)<(l|0))}else o[e+8>>2]=0;o[_+32>>2]=0;o[_+36>>2]=u;o[_+40>>2]=0;o[_>>2]=o[b+16>>2];o[_+4>>2]=o[b+16+4>>2];o[_+8>>2]=o[b+16+8>>2];o[_+12>>2]=o[b+16+12>>2];o[_+16>>2]=o[b+16+16>>2];o[_+20>>2]=o[b+16+20>>2];o[_+24>>2]=o[b+16+24>>2];o[_+28>>2]=o[b+16+28>>2];EL(e+4|0,o[e+4>>2]|0,_);o[e+16>>2]=(o[e+16>>2]|0)+1;o[u+48>>2]=_;f=e+124+(o[e+144>>2]<<2)|0;o[c>>2]=0;o[a>>2]=o[f>>2];_=o[f>>2]|0;if(_|0)o[_+52>>2]=u;o[f>>2]=u;if(n[e+193>>0]|0){p=b;return u|0}o[b>>2]=2756;o[b+4>>2]=e;o[b+8>>2]=u;$L(o[e+4>>2]|0,b+16|0,b);$L(o[e+64>>2]|0,b+16|0,b);p=b;return u|0}function KL(e){e=e|0;return}function QL(e){e=e|0;qa(e);return}function qL(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;if((t|0)==(i|0))return;n=o[(o[e+4>>2]|0)+136>>2]|0;gP[o[(o[n>>2]|0)+8>>2]&63](n,o[t+36>>2]|0,o[i+36>>2]|0)|0;e=(o[e+4>>2]|0)+160|0;o[e>>2]=(o[e>>2]|0)+1;return}function JL(e,t){e=e|0;t=t|0;EP[o[(o[e>>2]|0)+8>>2]&127](e,t,o[(o[e+8>>2]|0)+48>>2]|0);return}function $L(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0;if(!e)return;u=+c[t>>2];b=+c[t+4>>2];h=+c[t+8>>2];y=+c[t+16>>2];l=+c[t+20>>2];p=+c[t+24>>2];o[5637]=(o[5637]|0)+1;t=Qa(275)|0;o[(t+4+15&-16)+-4>>2]=t;o[(t+4+15&-16)>>2]=e;f=1;e=64;t=t+4+15&-16;while(1){n=f+-1|0;s=o[t+(n<<2)>>2]|0;do if(((((+c[s>>2]<=y?+c[s+16>>2]>=u:0)?+c[s+4>>2]<=l:0)?+c[s+20>>2]>=b:0)?+c[s+8>>2]<=p:0)?+c[s+24>>2]>=h:0){if(!(o[s+40>>2]|0)){aP[o[(o[i>>2]|0)+12>>2]&127](i,s);break}a=o[s+36>>2]|0;do if((n|0)==(e|0)?(d=e|0?e<<1:1,(f|0)<=(d|0)):0){if((d|0)!=0?(o[5637]=(o[5637]|0)+1,m=Qa((d<<2|3)+16|0)|0,(m|0)!=0):0){o[(m+4+15&-16)+-4>>2]=m;_=m+4+15&-16}else _=0;if((f|0)<=1){if(!t){e=d;t=_;break}}else{r=0;do{o[_+(r<<2)>>2]=o[t+(r<<2)>>2];r=r+1|0}while((r|0)!=(e|0))}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);e=d;t=_}while(0);o[t+(n<<2)>>2]=a;_=o[s+40>>2]|0;do if((f|0)==(e|0)){e=f|0?f<<1:1;if((f|0)<(e|0)){if((e|0)!=0?(o[5637]=(o[5637]|0)+1,g=Qa((e<<2|3)+16|0)|0,(g|0)!=0):0){o[(g+4+15&-16)+-4>>2]=g;r=g+4+15&-16}else r=0;if((f|0)<=0){if(!t){t=r;break}}else{n=0;do{o[r+(n<<2)>>2]=o[t+(n<<2)>>2];n=n+1|0}while((n|0)!=(f|0))}o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);t=r}else e=f}while(0);o[t+(f<<2)>>2]=_;n=f+1|0}while(0);if((n|0)>0)f=n;else break}if(!t)return;o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);return}function ex(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0;if((o[t+60>>2]|0)==2){r=o[t+48>>2]|0;GL(e+64|0,r)|0;_=o[e+68>>2]|0;if(_|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+68>>2]=r;o[e+76>>2]=(o[e+76>>2]|0)+-1}else{r=o[t+48>>2]|0;GL(e+4|0,r)|0;_=o[e+8>>2]|0;if(_|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+8>>2]=r;o[e+16>>2]=(o[e+16>>2]|0)+-1}r=o[t+52>>2]|0;_=o[t+56>>2]|0;if(!r)o[e+124+(o[t+60>>2]<<2)>>2]=_;else o[r+56>>2]=_;r=o[t+56>>2]|0;if(r|0)o[r+52>>2]=o[t+52>>2];_=o[e+136>>2]|0;EP[o[(o[_>>2]|0)+16>>2]&127](_,t,i);o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0);n[e+194>>0]=1;return}function tx(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;y=p;p=p+48|0;o[y+16>>2]=o[i>>2];o[y+16+4>>2]=o[i+4>>2];o[y+16+8>>2]=o[i+8>>2];o[y+16+12>>2]=o[i+12>>2];o[y+16+16>>2]=o[r>>2];o[y+16+16+4>>2]=o[r+4>>2];o[y+16+16+8>>2]=o[r+8>>2];o[y+16+16+12>>2]=o[r+12>>2];do if((o[t+60>>2]|0)==2){_=o[t+48>>2]|0;GL(e+64|0,_)|0;s=o[e+68>>2]|0;if(s|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+68>>2]=_;o[e+76>>2]=(o[e+76>>2]|0)+-1;_=o[e+8>>2]|0;if(!_){o[5637]=(o[5637]|0)+1;_=Qa(63)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}s=_;a=s+44|0;do{o[s>>2]=0;s=s+4|0}while((s|0)<(a|0))}else o[e+8>>2]=0;o[_+32>>2]=0;o[_+36>>2]=t;o[_+40>>2]=0;o[_>>2]=o[y+16>>2];o[_+4>>2]=o[y+16+4>>2];o[_+8>>2]=o[y+16+8>>2];o[_+12>>2]=o[y+16+12>>2];o[_+16>>2]=o[y+16+16>>2];o[_+20>>2]=o[y+16+20>>2];o[_+24>>2]=o[y+16+24>>2];o[_+28>>2]=o[y+16+28>>2];EL(e+4|0,o[e+4>>2]|0,_);o[e+16>>2]=(o[e+16>>2]|0)+1;o[t+48>>2]=_;a=1}else{o[e+168>>2]=(o[e+168>>2]|0)+1;m=o[t+48>>2]|0;if(((((+c[m>>2]<=+c[y+16+16>>2]?+c[m+16>>2]>=+c[y+16>>2]:0)?+c[m+4>>2]<=+c[y+16+20>>2]:0)?+c[m+20>>2]>=+c[y+16+4>>2]:0)?+c[m+8>>2]<=+c[y+16+24>>2]:0)?+c[m+24>>2]>=+c[y+16+8>>2]:0){f=+c[t+16>>2];g=+c[i>>2]-f;l=+c[t+20>>2];b=+c[i+4>>2]-l;u=+c[t+24>>2];d=+c[i+8>>2]-u;v=+c[e+140>>2];f=(+c[t+32>>2]-f)*.5*v;l=(+c[t+36>>2]-l)*.5*v;u=v*((+c[t+40>>2]-u)*.5);c[y>>2]=f;c[y+4>>2]=l;c[y+8>>2]=u;c[y+12>>2]=0;if(g<0)c[y>>2]=-f;if(b<0)c[y+4>>2]=-l;if(d<0)c[y+8>>2]=-u;if(VL(e+4|0,m,y+16|0,y,.05000000074505806)|0){o[e+172>>2]=(o[e+172>>2]|0)+1;_=1}else _=0;a=_;break}_=GL(e+4|0,m)|0;e:do if(_){a=o[e+12>>2]|0;if((a|0)<=-1){_=o[e+4>>2]|0;break}if((a|0)>0){h=0;while(1){s=o[_+32>>2]|0;h=h+1|0;if(!s)break e;if((h|0)>=(a|0)){_=s;break}else _=s}}}else _=0;while(0);o[m>>2]=o[y+16>>2];o[m+4>>2]=o[y+16+4>>2];o[m+8>>2]=o[y+16+8>>2];o[m+12>>2]=o[y+16+12>>2];o[m+16>>2]=o[y+16+16>>2];o[m+20>>2]=o[y+16+20>>2];o[m+24>>2]=o[y+16+24>>2];o[m+28>>2]=o[y+16+28>>2];EL(e+4|0,_,m);o[e+172>>2]=(o[e+172>>2]|0)+1;a=1}while(0);_=o[t+52>>2]|0;s=o[t+56>>2]|0;if(!_)o[e+124+(o[t+60>>2]<<2)>>2]=s;else o[_+56>>2]=s;_=o[t+56>>2]|0;if(_|0)o[_+52>>2]=o[t+52>>2];o[t+16>>2]=o[i>>2];o[t+16+4>>2]=o[i+4>>2];o[t+16+8>>2]=o[i+8>>2];o[t+16+12>>2]=o[i+12>>2];o[t+32>>2]=o[r>>2];o[t+32+4>>2]=o[r+4>>2];o[t+32+8>>2]=o[r+8>>2];o[t+32+12>>2]=o[r+12>>2];_=o[e+144>>2]|0;o[t+60>>2]=_;o[t+52>>2]=0;o[t+56>>2]=o[e+124+(_<<2)>>2];s=o[e+124+(_<<2)>>2]|0;if(s|0)o[s+52>>2]=t;o[e+124+(_<<2)>>2]=t;if(!a){p=y;return}n[e+194>>0]=1;if(n[e+193>>0]|0){p=y;return}o[y>>2]=2756;o[y+4>>2]=e;ix(e+64|0,o[e+64>>2]|0,o[t+48>>2]|0,y);ix(e+4|0,o[e+4>>2]|0,o[t+48>>2]|0,y);p=y;return}function ix(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0;if(!((t|0)!=0&(i|0)!=0))return;if((o[e+24>>2]|0)<128?(o[e+28>>2]|0)<128:0){o[5637]=(o[5637]|0)+1;_=Qa(1043)|0;if(!_)a=0;else{o[(_+4+15&-16)+-4>>2]=_;a=_+4+15&-16}_=o[e+24>>2]|0;if((_|0)>0){s=0;do{p=(o[e+32>>2]|0)+(s<<3)|0;l=o[p+4>>2]|0;u=a+(s<<3)|0;o[u>>2]=o[p>>2];o[u+4>>2]=l;s=s+1|0}while((s|0)!=(_|0))}_=o[e+32>>2]|0;if(_|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=a;o[e+28>>2]=128}o[e+24>>2]=128;u=o[e+32>>2]|0;o[u>>2]=t;o[u+4>>2]=i;u=1;a=124;while(1){_=u+-1|0;s=o[e+32>>2]|0;p=o[s+(_<<3)>>2]|0;l=o[s+(_<<3)+4>>2]|0;if((_|0)>(a|0)){i=o[e+24>>2]|0;if((i|0)<(i<<1|0)?(o[e+28>>2]|0)<(i<<1|0):0){if(i){o[5637]=(o[5637]|0)+1;s=Qa((i<<4|3)+16|0)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}a=o[e+24>>2]|0;if((a|0)>0){t=0;do{d=(o[e+32>>2]|0)+(t<<3)|0;b=o[d+4>>2]|0;f=s+(t<<3)|0;o[f>>2]=o[d>>2];o[f+4>>2]=b;t=t+1|0}while((t|0)!=(a|0))}}else s=0;a=o[e+32>>2]|0;if(a|0){if(n[e+36>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[e+32>>2]=0}n[e+36>>0]=1;o[e+32>>2]=s;o[e+28>>2]=i<<1}o[e+24>>2]=i<<1;a=(i<<1)+-4|0}do if((p|0)==(l|0)){if(o[p+40>>2]|0){d=o[p+36>>2]|0;o[s+(_<<3)>>2]=d;o[s+(_<<3)+4>>2]=d;_=u+1|0;d=o[e+32>>2]|0;b=o[p+40>>2]|0;o[d+(u<<3)>>2]=b;o[d+(u<<3)+4>>2]=b;d=o[e+32>>2]|0;b=o[p+40>>2]|0;o[d+(_<<3)>>2]=o[p+36>>2];o[d+(_<<3)+4>>2]=b;_=u+2|0}}else if(((((+c[p>>2]<=+c[l+16>>2]?+c[p+16>>2]>=+c[l>>2]:0)?+c[p+4>>2]<=+c[l+20>>2]:0)?+c[p+20>>2]>=+c[l+4>>2]:0)?+c[p+8>>2]<=+c[l+24>>2]:0)?+c[p+24>>2]>=+c[l+8>>2]:0){t=(o[l+40>>2]|0)!=0;if(!(o[p+40>>2]|0))if(t){d=o[l+36>>2]|0;o[s+(_<<3)>>2]=p;o[s+(_<<3)+4>>2]=d;_=o[e+32>>2]|0;d=o[l+40>>2]|0;o[_+(u<<3)>>2]=p;o[_+(u<<3)+4>>2]=d;_=u+1|0;break}else{EP[o[(o[r>>2]|0)+8>>2]&127](r,p,l);break}else{i=s+(_<<3)|0;f=o[p+36>>2]|0;if(t){d=o[l+36>>2]|0;o[i>>2]=f;o[s+(_<<3)+4>>2]=d;d=u+1|0;_=o[e+32>>2]|0;b=o[l+36>>2]|0;o[_+(u<<3)>>2]=o[p+40>>2];o[_+(u<<3)+4>>2]=b;_=u+2|0;b=o[e+32>>2]|0;f=o[l+40>>2]|0;o[b+(d<<3)>>2]=o[p+36>>2];o[b+(d<<3)+4>>2]=f;d=o[e+32>>2]|0;b=o[l+40>>2]|0;o[d+(_<<3)>>2]=o[p+40>>2];o[d+(_<<3)+4>>2]=b;_=u+3|0;break}else{o[i>>2]=f;o[s+(_<<3)+4>>2]=l;_=o[e+32>>2]|0;o[_+(u<<3)>>2]=o[p+40>>2];o[_+(u<<3)+4>>2]=l;_=u+1|0;break}}}while(0);if(!_)break;else u=_}return}function nx(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;o[i>>2]=o[t+16>>2];o[i+4>>2]=o[t+16+4>>2];o[i+8>>2]=o[t+16+8>>2];o[i+12>>2]=o[t+16+12>>2];o[n>>2]=o[t+32>>2];o[n+4>>2]=o[t+32+4>>2];o[n+8>>2]=o[t+32+8>>2];o[n+12>>2]=o[t+32+12>>2];return}function rx(e,t,i,n,r,_){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;i=p;p=p+16|0;o[i>>2]=2792;o[i+4>>2]=n;sx(e+4|0,o[e+4>>2]|0,t,n+4|0,n+20|0,+c[n+32>>2],r,_,i);sx(e+64|0,o[e+64>>2]|0,t,n+4|0,n+20|0,+c[n+32>>2],r,_,i);p=i;return}function ox(e){e=e|0;qa(e);return}function _x(e,t){e=e|0;t=t|0;e=o[e+4>>2]|0;DP[o[(o[e>>2]|0)+8>>2]&31](e,o[t+36>>2]|0)|0;return}function sx(e,t,i,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=+s;a=a|0;f=f|0;l=l|0;var u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0;D=p;p=p+32|0;if(!t){p=D;return}h=o[e+44>>2]|0;if((h|0)<128){if((o[e+48>>2]|0)<128){o[5637]=(o[5637]|0)+1;u=Qa(531)|0;if(!u)d=0;else{o[(u+4+15&-16)+-4>>2]=u;d=u+4+15&-16}u=o[e+44>>2]|0;if((u|0)>0){b=0;do{o[d+(b<<2)>>2]=o[(o[e+52>>2]|0)+(b<<2)>>2];b=b+1|0}while((b|0)!=(u|0))}u=o[e+52>>2]|0;if(u|0){if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[u+-4>>2]|0)}o[e+52>>2]=0}n[e+56>>0]=1;o[e+52>>2]=d;o[e+48>>2]=128;b=e+52|0}else b=e+52|0;u=h;do{o[(o[b>>2]|0)+(u<<2)>>2]=0;u=u+1|0}while((u|0)!=128);S=e+48|0}else{b=e+52|0;S=e+48|0}o[e+44>>2]=128;o[o[b>>2]>>2]=t;k=1;u=126;while(1){d=k+-1|0;h=o[b>>2]|0;w=o[h+(d<<2)>>2]|0;g=+c[w+4>>2]-+c[f+4>>2];m=+c[w+8>>2]-+c[f+8>>2];c[D>>2]=+c[w>>2]-+c[f>>2];c[D+4>>2]=g;c[D+8>>2]=m;c[D+12>>2]=0;m=+c[w+20>>2]-+c[a+4>>2];g=+c[w+24>>2]-+c[a+8>>2];c[D+16>>2]=+c[w+16>>2]-+c[a>>2];c[D+20>>2]=m;c[D+24>>2]=g;c[D+28>>2]=0;C=o[_>>2]|0;g=+c[i>>2];m=+c[r>>2];y=(+c[D+(C<<4)>>2]-g)*m;g=m*(+c[D+(1-C<<4)>>2]-g);C=o[_+4>>2]|0;m=+c[i+4>>2];O=+c[r+4>>2];v=(+c[D+(C<<4)+4>>2]-m)*O;m=O*(+c[D+(1-C<<4)+4>>2]-m);do if((!(v>g|y>m)?(R=v>y?v:y,T=m<g?m:g,C=o[_+8>>2]|0,I=+c[i+8>>2],O=+c[r+8>>2],j=(+c[D+(C<<4)+8>>2]-I)*O,I=O*(+c[D+(1-C<<4)+8>>2]-I),!(j>T|R>I)):0)?(I<T?I:T)>0?(j>R?j:R)<s:0:0){if(!(o[w+40>>2]|0)){aP[o[(o[l>>2]|0)+12>>2]&127](l,w);break}if((d|0)>(u|0)){C=o[e+44>>2]|0;if((C|0)<(C<<1|0)){if((o[S>>2]|0)<(C<<1|0)){if(C){o[5637]=(o[5637]|0)+1;u=Qa((C<<3|3)+16|0)|0;if(!u)u=0;else{o[(u+4+15&-16)+-4>>2]=u;u=u+4+15&-16}h=o[e+44>>2]|0;if((h|0)>0){t=0;do{o[u+(t<<2)>>2]=o[(o[b>>2]|0)+(t<<2)>>2];t=t+1|0}while((t|0)!=(h|0))}}else u=0;h=o[b>>2]|0;if(h|0){if(n[e+56>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[b>>2]=0}n[e+56>>0]=1;o[b>>2]=u;o[S>>2]=C<<1;h=C}else{u=h;h=C}do{o[u+(h<<2)>>2]=0;h=h+1|0;u=o[b>>2]|0}while((h|0)!=(C<<1|0))}else u=h;o[e+44>>2]=C<<1;h=u;u=(C<<1)+-2|0}o[h+(d<<2)>>2]=o[w+36>>2];o[(o[b>>2]|0)+(k<<2)>>2]=o[w+40>>2];d=k+1|0}while(0);if(!d)break;else k=d}p=D;return}function ax(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;r=p;p=p+48|0;o[r+32>>2]=2828;o[r+32+4>>2]=n;o[r>>2]=o[t>>2];o[r+4>>2]=o[t+4>>2];o[r+8>>2]=o[t+8>>2];o[r+12>>2]=o[t+12>>2];o[r+16>>2]=o[i>>2];o[r+16+4>>2]=o[i+4>>2];o[r+16+8>>2]=o[i+8>>2];o[r+16+12>>2]=o[i+12>>2];$L(o[e+4>>2]|0,r,r+32|0);$L(o[e+64>>2]|0,r,r+32|0);p=r;return}function cx(e){e=e|0;qa(e);return}function fx(e,t){e=e|0;t=t|0;e=o[e+4>>2]|0;DP[o[(o[e>>2]|0)+8>>2]&31](e,o[t+36>>2]|0)|0;return}function px(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0;m=p;p=p+32|0;FL(e+4|0,((te(o[e+152>>2]|0,o[e+16>>2]|0)|0)/100|0)+1|0);if(o[e+164>>2]|0){d=((te(o[e+148>>2]|0,o[e+76>>2]|0)|0)/100|0)+1|0;FL(e+64|0,d);d=(o[e+164>>2]|0)-d|0;o[e+164>>2]=(d|0)<0?0:d}i=((o[e+144>>2]|0)+1|0)%2|0;o[e+144>>2]=i;i=o[e+124+(i<<2)>>2]|0;if(i|0){do{f=i+56|0;l=i;i=o[f>>2]|0;a=o[l+52>>2]|0;s=i;if(!a)o[e+124+(o[l+60>>2]<<2)>>2]=s;else o[a+56>>2]=s;s=o[f>>2]|0;if(s|0)o[s+52>>2]=o[l+52>>2];o[l+52>>2]=0;o[f>>2]=o[e+132>>2];s=o[e+132>>2]|0;if(s|0)o[s+52>>2]=l;o[e+132>>2]=l;s=o[l+48>>2]|0;GL(e+4|0,s)|0;a=o[e+8>>2]|0;if(a|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[e+8>>2]=s;o[e+16>>2]=(o[e+16>>2]|0)+-1;o[m>>2]=o[l+16>>2];o[m+4>>2]=o[l+16+4>>2];o[m+8>>2]=o[l+16+8>>2];o[m+12>>2]=o[l+16+12>>2];o[m+16>>2]=o[l+32>>2];o[m+16+4>>2]=o[l+32+4>>2];o[m+16+8>>2]=o[l+32+8>>2];o[m+16+12>>2]=o[l+32+12>>2];s=o[e+68>>2]|0;if(!s){o[5637]=(o[5637]|0)+1;s=Qa(63)|0;if(!s)s=0;else{o[(s+4+15&-16)+-4>>2]=s;s=s+4+15&-16}a=s;f=a+44|0;do{o[a>>2]=0;a=a+4|0}while((a|0)<(f|0))}else o[e+68>>2]=0;o[s+32>>2]=0;o[s+36>>2]=l;o[s+40>>2]=0;o[s>>2]=o[m>>2];o[s+4>>2]=o[m+4>>2];o[s+8>>2]=o[m+8>>2];o[s+12>>2]=o[m+12>>2];o[s+16>>2]=o[m+16>>2];o[s+20>>2]=o[m+20>>2];o[s+24>>2]=o[m+24>>2];o[s+28>>2]=o[m+28>>2];EL(e+64|0,o[e+64>>2]|0,s);a=(o[e+76>>2]|0)+1|0;o[e+76>>2]=a;o[l+48>>2]=s;o[l+60>>2]=2}while((i|0)!=0);o[e+164>>2]=a;n[e+194>>0]=1}o[m>>2]=2756;o[m+4>>2]=e;if(n[e+193>>0]|0?(ix(e+4|0,o[e+4>>2]|0,o[e+64>>2]|0,m),n[e+193>>0]|0):0){d=o[e+4>>2]|0;ix(e+4|0,d,d,m)}if(n[e+194>>0]|0?(u=o[e+136>>2]|0,u=fP[o[(o[u>>2]|0)+28>>2]&127](u)|0,r=o[u+4>>2]|0,(r|0)>0):0){i=(te(o[e+156>>2]|0,r)|0)/100|0;d=o[e+160>>2]|0;i=(d|0)>(i|0)?d:i;i=(r|0)<(i|0)?r:i;if((i|0)>0){s=0;do{f=((o[e+184>>2]|0)+s|0)%(r|0)|0;b=o[u+12>>2]|0;a=o[b+(f<<4)>>2]|0;f=o[b+(f<<4)+4>>2]|0;b=o[a+48>>2]|0;d=o[f+48>>2]|0;if(!(((((+c[b>>2]<=+c[d+16>>2]?+c[b+16>>2]>=+c[d>>2]:0)?+c[b+4>>2]<=+c[d+20>>2]:0)?+c[b+20>>2]>=+c[d+4>>2]:0)?+c[b+8>>2]<=+c[d+24>>2]:0)?+c[b+24>>2]>=+c[d+8>>2]:0)){r=o[e+136>>2]|0;bP[o[(o[r>>2]|0)+12>>2]&31](r,a,f,t)|0;r=o[u+4>>2]|0;s=s+-1|0;i=i+-1|0}s=s+1|0}while((s|0)<(i|0));if((r|0)>0)h=37;else i=0}else h=37;if((h|0)==37)i=((o[e+184>>2]|0)+i|0)%(r|0)|0;o[e+184>>2]=i}o[e+180>>2]=(o[e+180>>2]|0)+1;o[e+160>>2]=1;n[e+194>>0]=0;r=o[e+168>>2]|0;i=o[e+172>>2]|0;if(!r)_=0;else _=+(i>>>0)/+(r>>>0);c[e+176>>2]=_;o[e+172>>2]=i>>>1;o[e+168>>2]=r>>>1;d=o[e+136>>2]|0;if(!(fP[o[(o[d>>2]|0)+56>>2]&127](d)|0)){p=m;return}d=o[e+136>>2]|0;d=fP[o[(o[d>>2]|0)+28>>2]&127](d)|0;i=o[d+4>>2]|0;if((i|0)>1){PL(d,0,i+-1|0);s=0;a=0;f=0;r=0;h=44}else{s=0;b=0;u=0;r=0}while(1){if((h|0)==44){h=0;i=o[d+4>>2]|0;b=a;u=f}if((s|0)>=(i|0))break;l=o[d+12>>2]|0;a=l+(s<<4)|0;f=o[a>>2]|0;l=l+(s<<4)+4|0;i=o[l>>2]|0;if(!((f|0)==(u|0)&(i|0)==(r|0))){r=o[f+48>>2]|0;u=o[i+48>>2]|0;if(((((+c[r>>2]<=+c[u+16>>2]?+c[r+16>>2]>=+c[u>>2]:0)?+c[r+4>>2]<=+c[u+20>>2]:0)?+c[r+20>>2]>=+c[u+4>>2]:0)?+c[r+8>>2]<=+c[u+24>>2]:0)?+c[r+24>>2]>=+c[u+8>>2]:0){r=i;i=b}else h=53}else{i=r;h=53}if((h|0)==53){r=o[e+136>>2]|0;EP[o[(o[r>>2]|0)+32>>2]&127](r,a,t);o[a>>2]=0;o[l>>2]=0;r=i;i=b+1|0}s=s+1|0;a=i;h=44}if((i|0)>1){PL(d,0,i+-1|0);a=o[d+4>>2]|0}else a=i;f=a-b|0;if((b|0)<0){if((o[d+8>>2]|0)<(f|0)){if((a|0)!=(b|0)){o[5637]=(o[5637]|0)+1;i=Qa((f<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[d+4>>2]|0;if((r|0)>0){s=0;do{h=o[d+12>>2]|0;o[i+(s<<4)>>2]=o[h+(s<<4)>>2];o[i+(s<<4)+4>>2]=o[h+(s<<4)+4>>2];o[i+(s<<4)+8>>2]=o[h+(s<<4)+8>>2];o[i+(s<<4)+12>>2]=o[h+(s<<4)+12>>2];s=s+1|0}while((s|0)!=(r|0));r=d+12|0}else r=d+12|0}else{i=0;r=d+12|0}s=o[r>>2]|0;if(s|0){if(n[d+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[r>>2]=0}n[d+16>>0]=1;o[r>>2]=i;o[d+8>>2]=f}else r=d+12|0;i=a;do{h=(o[r>>2]|0)+(i<<4)|0;i=i+1|0;o[h>>2]=0;o[h+4>>2]=0;o[h+8>>2]=0;o[h+12>>2]=0}while((i|0)!=(f|0))}o[d+4>>2]=f;p=m;return}function lx(e){e=e|0;return o[e+136>>2]|0}function ux(e){e=e|0;return o[e+136>>2]|0}function bx(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0;l=o[e+4>>2]|0;e=o[e+64>>2]|0;do if(!l)if(!e){n=0;u=0;a=0;p=0;_=0;f=0;s=0;r=0}else{n=+c[e>>2];u=+c[e+12>>2];a=+c[e+16>>2];p=+c[e+20>>2];_=+c[e+24>>2];f=+c[e+28>>2];s=+c[e+4>>2];r=+c[e+8>>2]}else{n=+c[l>>2];if(!e){u=+c[l+12>>2];a=+c[l+16>>2];p=+c[l+20>>2];_=+c[l+24>>2];f=+c[l+28>>2];s=+c[l+4>>2];r=+c[l+8>>2];break}f=+c[e>>2];n=n<f?n:f;f=+c[l+16>>2];a=+c[e+16>>2];a=f>a?f:a;f=+c[l+4>>2];s=+c[e+4>>2];s=f<s?f:s;f=+c[l+20>>2];p=+c[e+20>>2];p=f>p?f:p;f=+c[l+8>>2];r=+c[e+8>>2];r=f<r?f:r;f=+c[l+24>>2];_=+c[e+24>>2];if(f>_){u=0;_=f;f=0}else{u=0;f=0}}while(0);c[t>>2]=n;c[t+4>>2]=s;c[t+8>>2]=r;c[t+12>>2]=u;c[i>>2]=a;c[i+4>>2]=p;c[i+8>>2]=_;c[i+12>>2]=f;return}function dx(e,t){e=e|0;t=t|0;if((o[e+16>>2]|0)!=(0-(o[e+76>>2]|0)|0))return;t=o[e+4>>2]|0;if(t|0)AL(e+4|0,t);t=o[e+8>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+8>>2]=0;o[e+12>>2]=-1;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;o[e+20>>2]=0;t=o[e+64>>2]|0;if(t|0)AL(e+64|0,t);t=o[e+68>>2]|0;if(t|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+68>>2]=0;o[e+72>>2]=-1;t=o[e+96>>2]|0;if(t|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;o[e+80>>2]=0;n[e+193>>0]=0;n[e+194>>0]=1;o[e+144>>2]=0;o[e+164>>2]=0;o[e+148>>2]=1;o[e+152>>2]=0;o[e+156>>2]=10;o[e+160>>2]=1;o[e+124>>2]=0;o[e+124+4>>2]=0;o[e+124+8>>2]=0;o[e+168>>2]=0;o[e+168+4>>2]=0;o[e+168+8>>2]=0;o[e+168+12>>2]=0;o[e+168+16>>2]=0;o[e+168+20>>2]=0;return}function hx(e){e=e|0;return}function mx(e,t){e=e|0;t=t|0;var i=0;o[e>>2]=2692;n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;o[e+12>>2]=-1;o[e+16>>2]=0;o[e+20>>2]=0;n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;o[e+64>>2]=0;o[e+68>>2]=0;o[e+72>>2]=-1;o[e+76>>2]=0;o[e+80>>2]=0;n[e+193>>0]=0;n[e+194>>0]=1;n[e+192>>0]=(t|0)!=0^1;c[e+140>>2]=0;o[e+144>>2]=0;o[e+164>>2]=0;o[e+148>>2]=1;o[e+152>>2]=0;o[e+156>>2]=10;o[e+160>>2]=1;o[e+168>>2]=0;o[e+172>>2]=0;c[e+176>>2]=0;if(t|0){i=t;t=e+136|0;o[t>>2]=i;t=e+188|0;o[t>>2]=0;t=e+180|0;o[t>>2]=0;t=e+184|0;o[t>>2]=0;e=e+124|0;o[e>>2]=0;o[e+4>>2]=0;o[e+8>>2]=0;return}o[5637]=(o[5637]|0)+1;t=Qa(91)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}Nx(t);i=e+136|0;o[i>>2]=t;i=e+188|0;o[i>>2]=0;i=e+180|0;o[i>>2]=0;i=e+184|0;o[i>>2]=0;i=e+124|0;o[i>>2]=0;o[i+4>>2]=0;o[i+8>>2]=0;return}function yx(e){e=e|0;return}function gx(e){e=e|0;var t=0;o[e>>2]=2864;t=o[e+60>>2]|0;if(t|0){if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+60>>2]=0}n[e+64>>0]=1;o[e+60>>2]=0;o[e+52>>2]=0;o[e+56>>2]=0;t=o[e+40>>2]|0;if(t|0){if(n[e+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+40>>2]=0}n[e+44>>0]=1;o[e+40>>2]=0;o[e+32>>2]=0;o[e+36>>2]=0;t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function vx(e){e=e|0;gx(e);qa(e);return}function Cx(e,t,i){e=e|0;t=t|0;i=i|0;var _=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0;o[4986]=(o[4986]|0)+1;_=o[e+24>>2]|0;if(!_){_=o[t+4>>2]|0;if(!((r[i+6>>1]&(_&65535))<<16>>16)){e=0;return e|0}if(!((r[i+4>>1]&(_>>>16&65535))<<16>>16)){e=0;return e|0}}else if(!(gP[o[(o[_>>2]|0)+8>>2]&63](_,t,i)|0)){e=0;return e|0}p=(o[t+12>>2]|0)>(o[i+12>>2]|0);l=p?i:t;s=o[l+12>>2]|0;p=p?t:i;t=o[p+12>>2]|0;c=((t<<16|s)+~((t<<16|s)<<15)>>10^(t<<16|s)+~((t<<16|s)<<15))*9|0;c=(c>>6^c)+~((c>>6^c)<<11)>>16^(c>>6^c)+~((c>>6^c)<<11);f=o[e+12>>2]|0;_=o[(o[e+40>>2]|0)+((c&f+-1)<<2)>>2]|0;e:do if((_|0)!=-1){i=o[e+16>>2]|0;while(1){if((o[(o[i+(_<<4)>>2]|0)+12>>2]|0)==(s|0)?(o[(o[i+(_<<4)+4>>2]|0)+12>>2]|0)==(t|0):0)break;_=o[(o[e+60>>2]|0)+(_<<2)>>2]|0;if((_|0)==-1)break e}_=i+(_<<4)|0;if(_|0){e=_;return e|0}}while(0);a=o[e+8>>2]|0;if((a|0)==(f|0)){_=f|0?f<<1:1;if((f|0)<(_|0)){if(!_){t=0;i=f}else{o[5637]=(o[5637]|0)+1;t=Qa((_<<4|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+8>>2]|0}if((i|0)>0){s=0;do{u=o[e+16>>2]|0;o[t+(s<<4)>>2]=o[u+(s<<4)>>2];o[t+(s<<4)+4>>2]=o[u+(s<<4)+4>>2];o[t+(s<<4)+8>>2]=o[u+(s<<4)+8>>2];o[t+(s<<4)+12>>2]=o[u+(s<<4)+12>>2];s=s+1|0}while((s|0)!=(i|0))}s=o[e+16>>2]|0;if(s){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0);i=o[e+8>>2]|0}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=t;o[e+12>>2]=_}else{i=f;_=f}}else{i=a;_=f}o[e+8>>2]=i+1;i=o[e+16>>2]|0;t=o[e+68>>2]|0;if(t){gP[o[(o[t>>2]|0)+8>>2]&63](t,l,p)|0;_=o[e+12>>2]|0}if((f|0)<(_|0)){wx(e);_=(o[e+12>>2]|0)+-1&c}else _=c&f+-1;u=(o[l+12>>2]|0)<(o[p+12>>2]|0);o[i+(a<<4)>>2]=u?l:p;o[i+(a<<4)+4>>2]=u?p:l;o[i+(a<<4)+8>>2]=0;o[i+(a<<4)+8+4>>2]=0;u=(o[e+40>>2]|0)+(_<<2)|0;o[(o[e+60>>2]|0)+(a<<2)>>2]=o[u>>2];o[u>>2]=a;u=i+(a<<4)|0;return u|0}function wx(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,c=0;a=o[e+12>>2]|0;c=o[e+32>>2]|0;if((a|0)<=(c|0))return;if((a|0)>=(c|0)){do if((o[e+36>>2]|0)<(a|0)){if(!a){t=0;i=c}else{o[5637]=(o[5637]|0)+1;t=Qa((a<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+32>>2]|0}r=o[e+40>>2]|0;if((i|0)<=0){if(!r){n[e+44>>0]=1;o[e+40>>2]=t;o[e+36>>2]=a;break}}else{_=0;do{o[t+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0))}if(n[e+44>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[e+44>>0]=1;o[e+40>>2]=t;o[e+36>>2]=a}else t=o[e+40>>2]|0;while(0);Lc(t+(c<<2)|0,0,a-c<<2|0)|0}o[e+32>>2]=a;s=o[e+52>>2]|0;if((a|0)>(s|0)){do if((o[e+56>>2]|0)<(a|0)){if(!a){t=0;i=s}else{o[5637]=(o[5637]|0)+1;t=Qa((a<<2|3)+16|0)|0;if(!t)t=0;else{o[(t+4+15&-16)+-4>>2]=t;t=t+4+15&-16}i=o[e+52>>2]|0}r=o[e+60>>2]|0;if((i|0)<=0){if(!r){n[e+64>>0]=1;o[e+60>>2]=t;o[e+56>>2]=a;break}}else{_=0;do{o[t+(_<<2)>>2]=o[r+(_<<2)>>2];_=_+1|0}while((_|0)!=(i|0))}if(n[e+64>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}n[e+64>>0]=1;o[e+60>>2]=t;o[e+56>>2]=a}else t=o[e+60>>2]|0;while(0);Lc(t+(s<<2)|0,0,a-s<<2|0)|0}o[e+52>>2]=a;if((a|0)>0){Lc(o[e+40>>2]|0,-1,a<<2|0)|0;Lc(o[e+60>>2]|0,-1,a<<2|0)|0}if((c|0)<=0)return;t=o[e+16>>2]|0;i=o[e+40>>2]|0;r=o[e+60>>2]|0;_=0;do{a=o[(o[t+(_<<4)+4>>2]|0)+12>>2]<<16|o[(o[t+(_<<4)>>2]|0)+12>>2];a=(a+~(a<<15)>>10^a+~(a<<15))*9|0;a=i+((((a>>6^a)+~((a>>6^a)<<11)>>16^(a>>6^a)+~((a>>6^a)<<11))&(o[e+12>>2]|0)+-1)<<2)|0;o[r+(_<<2)>>2]=o[a>>2];o[a>>2]=_;_=_+1|0}while((_|0)!=(c|0));return}function kx(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,s=0,a=0,c=0,f=0,p=0,l=0,u=0,b=0;o[4985]=(o[4985]|0)+1;c=(o[t+12>>2]|0)>(o[i+12>>2]|0);p=c?i:t;s=o[p+12>>2]|0;c=c?t:i;r=o[c+12>>2]|0;a=((r<<16|s)+~((r<<16|s)<<15)>>10^(r<<16|s)+~((r<<16|s)<<15))*9|0;a=((a>>6^a)+~((a>>6^a)<<11)>>16^(a>>6^a)+~((a>>6^a)<<11))&(o[e+12>>2]|0)+-1;\nt=o[(o[e+40>>2]|0)+(a<<2)>>2]|0;if((t|0)==-1){b=0;return b|0}_=o[e+16>>2]|0;i=t;while(1){if((o[(o[_+(i<<4)>>2]|0)+12>>2]|0)==(s|0)?(o[(o[_+(i<<4)+4>>2]|0)+12>>2]|0)==(r|0):0)break;t=o[(o[e+60>>2]|0)+(i<<2)>>2]|0;if((t|0)==-1){t=0;b=24;break}else i=t}if((b|0)==24)return t|0;t=_+(i<<4)|0;if(!t){b=0;return b|0}EP[o[(o[e>>2]|0)+32>>2]&127](e,t,n);u=o[_+(i<<4)+12>>2]|0;l=t-(o[e+16>>2]|0)>>4;s=(o[e+40>>2]|0)+(a<<2)|0;t=o[s>>2]|0;i=o[e+60>>2]|0;if((t|0)!=(l|0)){_=t;while(1){r=i+(_<<2)|0;t=o[r>>2]|0;if((t|0)==(l|0))break;else _=t}t=o[i+(l<<2)>>2]|0;if((_|0)==-1)b=12;else o[r>>2]=t}else{t=o[i+(l<<2)>>2]|0;b=12}if((b|0)==12)o[s>>2]=t;f=(o[e+8>>2]|0)+-1|0;t=o[e+68>>2]|0;if(t|0)bP[o[(o[t>>2]|0)+12>>2]&31](t,p,c,n)|0;if((f|0)==(l|0)){o[e+8>>2]=(o[e+8>>2]|0)+-1;b=u;return b|0}c=o[e+16>>2]|0;s=o[(o[c+(f<<4)+4>>2]|0)+12>>2]<<16|o[(o[c+(f<<4)>>2]|0)+12>>2];s=(s+~(s<<15)>>10^s+~(s<<15))*9|0;s=((s>>6^s)+~((s>>6^s)<<11)>>16^(s>>6^s)+~((s>>6^s)<<11))&(o[e+12>>2]|0)+-1;a=(o[e+40>>2]|0)+(s<<2)|0;t=o[a>>2]|0;i=o[e+60>>2]|0;if((t|0)!=(f|0)){_=t;while(1){r=i+(_<<2)|0;t=o[r>>2]|0;if((t|0)==(f|0))break;else _=t}t=o[i+(f<<2)>>2]|0;if((_|0)==-1)b=22;else o[r>>2]=t}else{t=o[i+(f<<2)>>2]|0;b=22}if((b|0)==22)o[a>>2]=t;o[c+(l<<4)>>2]=o[c+(f<<4)>>2];o[c+(l<<4)+4>>2]=o[c+(f<<4)+4>>2];o[c+(l<<4)+8>>2]=o[c+(f<<4)+8>>2];o[c+(l<<4)+12>>2]=o[c+(f<<4)+12>>2];b=(o[e+40>>2]|0)+(s<<2)|0;o[(o[e+60>>2]|0)+(l<<2)>>2]=o[b>>2];o[b>>2]=l;o[e+8>>2]=(o[e+8>>2]|0)+-1;b=u;return b|0}function Sx(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;n=p;p=p+16|0;o[n>>2]=2940;o[n+4>>2]=t;EP[o[(o[e>>2]|0)+48>>2]&127](e,n,i);p=n;return}function Rx(e){e=e|0;return}function jx(e){e=e|0;qa(e);return}function Ix(e,t){e=e|0;t=t|0;e=o[e+4>>2]|0;return((o[t>>2]|0)==(e|0)?1:(o[t+4>>2]|0)==(e|0))|0}function Tx(e){e=e|0;return o[e+16>>2]|0}function Dx(e){e=e|0;return o[e+16>>2]|0}function Ox(e){e=e|0;return e+4|0}function Lx(e,t,i){e=e|0;t=t|0;i=i|0;e=o[t+8>>2]|0;if(!((i|0)!=0&(e|0)!=0))return;_P[o[o[e>>2]>>2]&255](e);aP[o[(o[i>>2]|0)+60>>2]&127](i,o[t+8>>2]|0);o[t+8>>2]=0;return}function xx(e){e=e|0;return o[e+8>>2]|0}function Mx(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;n=p;p=p+16|0;o[n>>2]=2960;o[n+4>>2]=t;o[n+8>>2]=e;o[n+12>>2]=i;EP[o[(o[e>>2]|0)+48>>2]&127](e,n,i);p=n;return}function Px(e){e=e|0;qa(e);return}function Wx(e,t){e=e|0;t=t|0;var i=0;i=o[e+4>>2]|0;if((o[t>>2]|0)!=(i|0)?(o[t+4>>2]|0)!=(i|0):0)return 0;i=o[e+8>>2]|0;EP[o[(o[i>>2]|0)+32>>2]&127](i,t,o[e+12>>2]|0);return 0}function Bx(e,t){e=e|0;t=t|0;o[e+24>>2]=t;return}function Ax(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;if((o[e+8>>2]|0)<=0)return;_=0;e:while(1){while(1){n=o[e+16>>2]|0;r=n+(_<<4)|0;if(!(DP[o[(o[t>>2]|0)+8>>2]&31](t,r)|0))break;bP[o[(o[e>>2]|0)+12>>2]&31](e,o[r>>2]|0,o[n+(_<<4)+4>>2]|0,i)|0;o[4984]=(o[4984]|0)+-1;if((_|0)>=(o[e+8>>2]|0)){n=7;break e}}_=_+1|0;if((_|0)>=(o[e+8>>2]|0)){n=7;break}}if((n|0)==7)return}function Fx(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0;o[4987]=(o[4987]|0)+1;n=(o[t+12>>2]|0)>(o[i+12>>2]|0);r=o[(n?i:t)+12>>2]|0;n=o[(n?t:i)+12>>2]|0;t=((n<<16|r)+~((n<<16|r)<<15)>>10^(n<<16|r)+~((n<<16|r)<<15))*9|0;t=((t>>6^t)+~((t>>6^t)<<11)>>16^(t>>6^t)+~((t>>6^t)<<11))&(o[e+12>>2]|0)+-1;if((t|0)>=(o[e+32>>2]|0)){_=0;return _|0}t=o[(o[e+40>>2]|0)+(t<<2)>>2]|0;if((t|0)==-1){_=0;return _|0}i=o[e+16>>2]|0;while(1){if((o[(o[i+(t<<4)>>2]|0)+12>>2]|0)==(r|0)?(o[(o[i+(t<<4)+4>>2]|0)+12>>2]|0)==(n|0):0)break;t=o[(o[e+60>>2]|0)+(t<<2)>>2]|0;if((t|0)==-1){t=0;_=8;break}}if((_|0)==8)return t|0;_=i+(t<<4)|0;return _|0}function Gx(e){e=e|0;return 0}function Ex(e,t){e=e|0;t=t|0;o[e+68>>2]=t;return}function Vx(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0,b=0,d=0;d=p;p=p+32|0;n[d+16>>0]=1;o[d+12>>2]=0;o[d+4>>2]=0;o[d+8>>2]=0;i=o[e+8>>2]|0;if((i|0)>0){_=0;s=0;r=0;u=0;do{f=o[e+16>>2]|0;l=f+(u<<4)|0;if((_|0)==(r|0)){c=r|0?r<<1:1;if((r|0)<(c|0)){if(c){o[5637]=(o[5637]|0)+1;i=Qa((c<<4|3)+16|0)|0;if(!i){s=0;r=_}else{o[(i+4+15&-16)+-4>>2]=i;s=i+4+15&-16;r=_}}else s=0;if((r|0)>0){i=0;do{a=o[d+12>>2]|0;o[s+(i<<4)>>2]=o[a+(i<<4)>>2];o[s+(i<<4)+4>>2]=o[a+(i<<4)+4>>2];o[s+(i<<4)+8>>2]=o[a+(i<<4)+8>>2];o[s+(i<<4)+12>>2]=o[a+(i<<4)+12>>2];i=i+1|0}while((i|0)!=(r|0))}i=o[d+12>>2]|0;if(!i)_=r;else{o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);o[d+12>>2]=0}n[d+16>>0]=1;o[d+12>>2]=s;o[d+8>>2]=c;a=_;r=c;i=o[e+8>>2]|0}else a=r}else a=_;o[s+(a<<4)>>2]=o[l>>2];o[s+(a<<4)+4>>2]=o[f+(u<<4)+4>>2];o[s+(a<<4)+8>>2]=o[f+(u<<4)+8>>2];o[s+(a<<4)+12>>2]=o[f+(u<<4)+12>>2];_=a+1|0;u=u+1|0}while((u|0)<(i|0));o[d+4>>2]=_;if((a|0)>-1){i=o[d+12>>2]|0;r=0;while(1){bP[o[(o[e>>2]|0)+12>>2]&31](e,o[i+(r<<4)>>2]|0,o[i+(r<<4)+4>>2]|0,t)|0;if((r|0)<(a|0))r=r+1|0;else break}}}else _=0;if((o[e+52>>2]|0)>0){i=o[e+60>>2]|0;r=0;do{o[i+(r<<2)>>2]=-1;r=r+1|0}while((r|0)<(o[e+52>>2]|0))}if((_|0)<=1)if((_|0)>0)b=24;else i=o[d+12>>2]|0;else{PL(d,0,_+-1|0);b=24}if((b|0)==24){i=o[d+12>>2]|0;r=0;do{gP[o[(o[e>>2]|0)+8>>2]&63](e,o[i+(r<<4)>>2]|0,o[i+(r<<4)+4>>2]|0)|0;r=r+1|0}while((r|0)<(_|0))}if(!i){p=d;return}o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0);o[d+12>>2]=0;p=d;return}function Nx(e){e=e|0;var t=0,i=0,r=0,_=0;o[e>>2]=2864;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;o[e+12>>2]=0;o[e+24>>2]=0;n[e+44>>0]=1;o[e+40>>2]=0;o[e+32>>2]=0;o[e+36>>2]=0;n[e+64>>0]=1;o[e+60>>2]=0;o[e+52>>2]=0;o[e+56>>2]=0;o[e+68>>2]=0;o[5637]=(o[5637]|0)+1;t=Qa(51)|0;if(!t)r=0;else{o[(t+4+15&-16)+-4>>2]=t;r=t+4+15&-16}t=o[e+8>>2]|0;if((t|0)>0){i=0;do{_=o[e+16>>2]|0;o[r+(i<<4)>>2]=o[_+(i<<4)>>2];o[r+(i<<4)+4>>2]=o[_+(i<<4)+4>>2];o[r+(i<<4)+8>>2]=o[_+(i<<4)+8>>2];o[r+(i<<4)+12>>2]=o[_+(i<<4)+12>>2];i=i+1|0}while((i|0)!=(t|0))}t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=r;o[e+12>>2]=2;wx(e);return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=r;o[e+12>>2]=2;wx(e);return}function Xx(e){e=e|0;var t=0;o[e>>2]=2980;t=o[e+160>>2]|0;if(t|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=0;o[e+152>>2]=0;o[e+156>>2]=0;t=o[e+136>>2]|0;if(t|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;t=o[e+116>>2]|0;if(t|0){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+116>>2]=0}n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;t=o[e+96>>2]|0;if(t|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;t=o[e+76>>2]|0;if(!t){n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;e=e+72|0;o[e>>2]=0;return}if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+76>>2]=0;n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;e=e+72|0;o[e>>2]=0;return}function Hx(e){e=e|0;Xx(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function Zx(e,t,i,_){e=e|0;t=t|0;i=i|0;_=_|0;var a=0,f=0,p=0,l=0,u=0,b=0;o[e+168>>2]=o[e+152>>2];o[t>>2]=2980;o[t+52>>2]=284;n[t+60>>0]=0;n[t+80>>0]=1;o[t+76>>2]=0;o[t+68>>2]=0;o[t+72>>2]=0;n[t+100>>0]=1;o[t+96>>2]=0;o[t+88>>2]=0;o[t+92>>2]=0;n[t+120>>0]=1;o[t+116>>2]=0;o[t+108>>2]=0;o[t+112>>2]=0;n[t+140>>0]=1;o[t+136>>2]=0;o[t+128>>2]=0;o[t+132>>2]=0;o[t+144>>2]=0;n[t+164>>0]=1;o[t+160>>2]=0;o[t+152>>2]=0;o[t+156>>2]=0;o[t+168>>2]=0;o[t+4>>2]=-8388609;o[t+8>>2]=-8388609;o[t+12>>2]=-8388609;c[t+16>>2]=0;o[t+20>>2]=2139095039;o[t+24>>2]=2139095039;o[t+28>>2]=2139095039;c[t+32>>2]=0;i=o[e+56>>2]|0;if(_){o[t+56>>2]=Ac(i|0)|0;n[t+4>>0]=n[e+4+3>>0]|0;n[t+5>>0]=n[e+4+2>>0]|0;n[t+6>>0]=n[e+4+1>>0]|0;n[t+7>>0]=n[e+4>>0]|0;n[t+8>>0]=n[e+8+3>>0]|0;n[t+9>>0]=n[e+8+2>>0]|0;n[t+10>>0]=n[e+8+1>>0]|0;n[t+11>>0]=n[e+8>>0]|0;n[t+12>>0]=n[e+12+3>>0]|0;n[t+13>>0]=n[e+12+2>>0]|0;n[t+14>>0]=n[e+12+1>>0]|0;n[t+15>>0]=n[e+12>>0]|0;n[t+16>>0]=n[e+16+3>>0]|0;n[t+17>>0]=n[e+16+2>>0]|0;n[t+18>>0]=n[e+16+1>>0]|0;n[t+19>>0]=n[e+16>>0]|0;n[t+20>>0]=n[e+20+3>>0]|0;n[t+21>>0]=n[e+20+2>>0]|0;n[t+22>>0]=n[e+20+1>>0]|0;n[t+23>>0]=n[e+20>>0]|0;n[t+24>>0]=n[e+24+3>>0]|0;n[t+25>>0]=n[e+24+2>>0]|0;n[t+26>>0]=n[e+24+1>>0]|0;n[t+27>>0]=n[e+24>>0]|0;n[t+28>>0]=n[e+28+3>>0]|0;n[t+29>>0]=n[e+28+2>>0]|0;n[t+30>>0]=n[e+28+1>>0]|0;n[t+31>>0]=n[e+28>>0]|0;n[t+32>>0]=n[e+32+3>>0]|0;n[t+33>>0]=n[e+32+2>>0]|0;n[t+34>>0]=n[e+32+1>>0]|0;n[t+35>>0]=n[e+32>>0]|0;n[t+36>>0]=n[e+36+3>>0]|0;n[t+37>>0]=n[e+36+2>>0]|0;n[t+38>>0]=n[e+36+1>>0]|0;n[t+39>>0]=n[e+36>>0]|0;n[t+40>>0]=n[e+40+3>>0]|0;n[t+41>>0]=n[e+40+2>>0]|0;n[t+42>>0]=n[e+40+1>>0]|0;n[t+43>>0]=n[e+40>>0]|0;n[t+44>>0]=n[e+44+3>>0]|0;n[t+45>>0]=n[e+44+2>>0]|0;n[t+46>>0]=n[e+44+1>>0]|0;n[t+47>>0]=n[e+44>>0]|0;n[t+48>>0]=n[e+48+3>>0]|0;n[t+49>>0]=n[e+48+2>>0]|0;n[t+50>>0]=n[e+48+1>>0]|0;n[t+51>>0]=n[e+48>>0]|0;o[t+144>>2]=Ac(o[e+144>>2]|0)|0;i=Ac(o[e+168>>2]|0)|0}else{o[t+56>>2]=i;o[t+4>>2]=o[e+4>>2];o[t+4+4>>2]=o[e+4+4>>2];o[t+4+8>>2]=o[e+4+8>>2];o[t+4+12>>2]=o[e+4+12>>2];o[t+20>>2]=o[e+20>>2];o[t+20+4>>2]=o[e+20+4>>2];o[t+20+8>>2]=o[e+20+8>>2];o[t+20+12>>2]=o[e+20+12>>2];o[t+36>>2]=o[e+36>>2];o[t+36+4>>2]=o[e+36+4>>2];o[t+36+8>>2]=o[e+36+8>>2];o[t+36+12>>2]=o[e+36+12>>2];o[t+144>>2]=o[e+144>>2];i=o[e+168>>2]|0}o[t+168>>2]=i;n[t+60>>0]=n[e+60>>0]|0;p=o[e+56>>2]|0;if(!(n[e+60>>0]|0)){i=o[t+96>>2]|0;if(i|0){if(n[t+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[t+96>>2]=0}o[t+88>>2]=0;o[t+88+4>>2]=0;o[t+88+8>>2]=0;n[t+88+12>>0]=0;o[t+96>>2]=t+172;o[t+88>>2]=p;o[t+92>>2]=p;if(_)if((p|0)>0){a=o[e+96>>2]|0;i=t+172|0;f=0;do{l=a+(f<<6)|0;b=i+(f<<6)|0;n[b>>0]=n[l+3>>0]|0;n[b+1>>0]=n[l+2>>0]|0;n[b+2>>0]=n[l+1>>0]|0;n[b+3>>0]=n[l>>0]|0;b=a+(f<<6)+4|0;l=i+(f<<6)+4|0;n[l>>0]=n[b+3>>0]|0;n[l+1>>0]=n[b+2>>0]|0;n[l+2>>0]=n[b+1>>0]|0;n[l+3>>0]=n[b>>0]|0;l=a+(f<<6)+8|0;b=i+(f<<6)+8|0;n[b>>0]=n[l+3>>0]|0;n[b+1>>0]=n[l+2>>0]|0;n[b+2>>0]=n[l+1>>0]|0;n[b+3>>0]=n[l>>0]|0;b=a+(f<<6)+12|0;i=i+(f<<6)+12|0;n[i>>0]=n[b+3>>0]|0;n[i+1>>0]=n[b+2>>0]|0;n[i+2>>0]=n[b+1>>0]|0;n[i+3>>0]=n[b>>0]|0;i=o[e+96>>2]|0;b=i+(f<<6)+16|0;l=o[t+96>>2]|0;u=l+(f<<6)+16|0;n[u>>0]=n[b+3>>0]|0;n[u+1>>0]=n[b+2>>0]|0;n[u+2>>0]=n[b+1>>0]|0;n[u+3>>0]=n[b>>0]|0;u=i+(f<<6)+20|0;b=l+(f<<6)+20|0;n[b>>0]=n[u+3>>0]|0;n[b+1>>0]=n[u+2>>0]|0;n[b+2>>0]=n[u+1>>0]|0;n[b+3>>0]=n[u>>0]|0;b=i+(f<<6)+24|0;u=l+(f<<6)+24|0;n[u>>0]=n[b+3>>0]|0;n[u+1>>0]=n[b+2>>0]|0;n[u+2>>0]=n[b+1>>0]|0;n[u+3>>0]=n[b>>0]|0;i=i+(f<<6)+28|0;l=l+(f<<6)+28|0;n[l>>0]=n[i+3>>0]|0;n[l+1>>0]=n[i+2>>0]|0;n[l+2>>0]=n[i+1>>0]|0;n[l+3>>0]=n[i>>0]|0;a=o[e+96>>2]|0;l=Ac(o[a+(f<<6)+32>>2]|0)|0;i=o[t+96>>2]|0;o[i+(f<<6)+32>>2]=l;o[i+(f<<6)+36>>2]=Ac(o[a+(f<<6)+36>>2]|0)|0;o[i+(f<<6)+40>>2]=Ac(o[a+(f<<6)+40>>2]|0)|0;f=f+1|0}while((f|0)!=(p|0))}else i=t+172|0;else if((p|0)>0){i=t+172|0;a=o[e+96>>2]|0;f=0;do{i=i+(f<<6)|0;b=a+(f<<6)|0;o[i>>2]=o[b>>2];o[i+4>>2]=o[b+4>>2];o[i+8>>2]=o[b+8>>2];o[i+12>>2]=o[b+12>>2];i=(o[t+96>>2]|0)+(f<<6)+16|0;b=(o[e+96>>2]|0)+(f<<6)+16|0;o[i>>2]=o[b>>2];o[i+4>>2]=o[b+4>>2];o[i+8>>2]=o[b+8>>2];o[i+12>>2]=o[b+12>>2];a=o[e+96>>2]|0;i=o[t+96>>2]|0;o[i+(f<<6)+32>>2]=o[a+(f<<6)+32>>2];o[i+(f<<6)+36>>2]=o[a+(f<<6)+36>>2];o[i+(f<<6)+40>>2]=o[a+(f<<6)+40>>2];f=f+1|0}while((f|0)!=(p|0))}else i=t+172|0;if(i|0){if(n[t+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[t+96>>2]=0}o[t+88>>2]=0;o[t+88+4>>2]=0;o[t+88+8>>2]=0;n[t+88+12>>0]=0;i=p<<6}else{i=o[t+136>>2]|0;if(i|0){if(n[t+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[i+-4>>2]|0)}o[t+136>>2]=0}o[t+128>>2]=0;o[t+128+4>>2]=0;o[t+128+8>>2]=0;n[t+128+12>>0]=0;o[t+136>>2]=t+172;o[t+128>>2]=p;o[t+132>>2]=p;if(_){if((p|0)>0){i=o[e+136>>2]|0;a=0;do{b=s[i+(a<<4)>>1]|0;r[t+172+(a<<4)>>1]=b>>>8|b<<8;b=s[i+(a<<4)+2>>1]|0;r[t+172+(a<<4)+2>>1]=b>>>8|b<<8;b=s[i+(a<<4)+4>>1]|0;r[t+172+(a<<4)+4>>1]=b>>>8|b<<8;b=s[i+(a<<4)+6>>1]|0;r[t+172+(a<<4)+6>>1]=b>>>8|b<<8;b=s[i+(a<<4)+8>>1]|0;r[t+172+(a<<4)+8>>1]=b>>>8|b<<8;b=s[i+(a<<4)+10>>1]|0;r[t+172+(a<<4)+10>>1]=b>>>8|b<<8;o[t+172+(a<<4)+12>>2]=Ac(o[i+(a<<4)+12>>2]|0)|0;a=a+1|0}while((a|0)!=(p|0))}}else if((p|0)>0){i=o[e+136>>2]|0;a=0;do{r[t+172+(a<<4)>>1]=r[i+(a<<4)>>1]|0;r[t+172+(a<<4)+2>>1]=r[i+(a<<4)+2>>1]|0;r[t+172+(a<<4)+4>>1]=r[i+(a<<4)+4>>1]|0;r[t+172+(a<<4)+6>>1]=r[i+(a<<4)+6>>1]|0;r[t+172+(a<<4)+8>>1]=r[i+(a<<4)+8>>1]|0;r[t+172+(a<<4)+10>>1]=r[i+(a<<4)+10>>1]|0;o[t+172+(a<<4)+12>>2]=o[i+(a<<4)+12>>2];a=a+1|0}while((a|0)!=(p|0))}if(o[t+136>>2]|0)o[t+136>>2]=0;o[t+128>>2]=0;o[t+128+4>>2]=0;o[t+128+8>>2]=0;n[t+128+12>>0]=0;i=p<<4}p=t+172+i|0;i=o[e+168>>2]|0;a=o[t+160>>2]|0;if(a|0){if(n[t+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[t+160>>2]=0}o[t+152>>2]=0;o[t+152+4>>2]=0;o[t+152+8>>2]=0;n[t+152+12>>0]=0;o[t+160>>2]=p;o[t+152>>2]=i;o[t+156>>2]=i;f=o[e+168>>2]|0;if(_){if((f|0)>0){i=o[e+160>>2]|0;a=0;do{b=s[i+(a<<5)>>1]|0;r[p+(a<<5)>>1]=b>>>8|b<<8;b=s[i+(a<<5)+2>>1]|0;r[p+(a<<5)+2>>1]=b>>>8|b<<8;b=s[i+(a<<5)+4>>1]|0;r[p+(a<<5)+4>>1]=b>>>8|b<<8;b=s[i+(a<<5)+6>>1]|0;r[p+(a<<5)+6>>1]=b>>>8|b<<8;b=s[i+(a<<5)+8>>1]|0;r[p+(a<<5)+8>>1]=b>>>8|b<<8;b=s[i+(a<<5)+10>>1]|0;r[p+(a<<5)+10>>1]=b>>>8|b<<8;o[p+(a<<5)+12>>2]=Ac(o[i+(a<<5)+12>>2]|0)|0;o[p+(a<<5)+16>>2]=Ac(o[i+(a<<5)+16>>2]|0)|0;a=a+1|0}while((a|0)!=(f|0))}}else if((f|0)>0){i=o[e+160>>2]|0;a=0;do{r[p+(a<<5)>>1]=r[i+(a<<5)>>1]|0;r[p+(a<<5)+2>>1]=r[i+(a<<5)+2>>1]|0;r[p+(a<<5)+4>>1]=r[i+(a<<5)+4>>1]|0;r[p+(a<<5)+6>>1]=r[i+(a<<5)+6>>1]|0;r[p+(a<<5)+8>>1]=r[i+(a<<5)+8>>1]|0;r[p+(a<<5)+10>>1]=r[i+(a<<5)+10>>1]|0;o[p+(a<<5)+12>>2]=o[i+(a<<5)+12>>2];o[p+(a<<5)+16>>2]=o[i+(a<<5)+16>>2];o[p+(a<<5)+20>>2]=0;o[p+(a<<5)+24>>2]=0;o[p+(a<<5)+28>>2]=0;a=a+1|0}while((a|0)<(o[e+168>>2]|0))}if(!(o[t+160>>2]|0)){o[t>>2]=0;o[t+152>>2]=0;o[t+152+4>>2]=0;o[t+152+8>>2]=0;n[t+152+12>>0]=0;return 1}o[t+160>>2]=0;o[t>>2]=0;o[t+152>>2]=0;o[t+152+4>>2]=0;o[t+152+8>>2]=0;n[t+152+12>>0]=0;return 1}function Ux(e){e=e|0;return 84}function zx(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,s=0,a=0,c=0,f=0;o[t+16>>2]=o[e+20>>2];o[t+20>>2]=o[e+24>>2];o[t+24>>2]=o[e+28>>2];o[t+28>>2]=o[e+32>>2];o[t>>2]=o[e+4>>2];o[t+4>>2]=o[e+8>>2];o[t+8>>2]=o[e+12>>2];o[t+12>>2]=o[e+16>>2];o[t+32>>2]=o[e+36>>2];o[t+36>>2]=o[e+40>>2];o[t+40>>2]=o[e+44>>2];o[t+44>>2]=o[e+48>>2];o[t+48>>2]=o[e+56>>2];o[t+52>>2]=_[e+60>>0];f=o[e+88>>2]|0;o[t+56>>2]=f;if(f){f=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+96>>2]|0)|0;o[t+64>>2]=f;if(f|0){s=o[e+88>>2]|0;f=gP[o[(o[i>>2]|0)+16>>2]&63](i,48,s)|0;if((s|0)>0){n=o[e+96>>2]|0;a=0;c=o[f+8>>2]|0;while(1){o[c+16>>2]=o[n+(a<<6)+16>>2];o[c+20>>2]=o[n+(a<<6)+20>>2];o[c+24>>2]=o[n+(a<<6)+24>>2];o[c+28>>2]=o[n+(a<<6)+28>>2];o[c>>2]=o[n+(a<<6)>>2];o[c+4>>2]=o[n+(a<<6)+4>>2];o[c+8>>2]=o[n+(a<<6)+8>>2];o[c+12>>2]=o[n+(a<<6)+12>>2];o[c+32>>2]=o[n+(a<<6)+32>>2];o[c+36>>2]=o[n+(a<<6)+36>>2];o[c+40>>2]=o[n+(a<<6)+40>>2];a=a+1|0;if((a|0)==(s|0))break;else c=c+48|0}}else n=o[e+96>>2]|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,f,8969,1497453121,n)}}else o[t+64>>2]=0;f=o[e+128>>2]|0;o[t+60>>2]=f;if(f){f=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+136>>2]|0)|0;o[t+68>>2]=f;if(f|0){s=o[e+128>>2]|0;f=gP[o[(o[i>>2]|0)+16>>2]&63](i,16,s)|0;if((s|0)>0){n=o[e+136>>2]|0;a=0;c=o[f+8>>2]|0;while(1){o[c+12>>2]=o[n+(a<<4)+12>>2];r[c+6>>1]=r[n+(a<<4)+6>>1]|0;r[c+8>>1]=r[n+(a<<4)+8>>1]|0;r[c+10>>1]=r[n+(a<<4)+10>>1]|0;r[c>>1]=r[n+(a<<4)>>1]|0;r[c+2>>1]=r[n+(a<<4)+2>>1]|0;r[c+4>>1]=r[n+(a<<4)+4>>1]|0;a=a+1|0;if((a|0)==(s|0))break;else c=c+16|0}}else n=o[e+136>>2]|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,f,8992,1497453121,n)}}else o[t+68>>2]=0;o[t+76>>2]=o[e+144>>2];f=o[e+152>>2]|0;o[t+80>>2]=f;if(!f){o[t+72>>2]=0;return 9036}f=DP[o[(o[i>>2]|0)+28>>2]&31](i,o[e+160>>2]|0)|0;o[t+72>>2]=f;if(!f)return 9036;c=o[e+152>>2]|0;f=gP[o[(o[i>>2]|0)+16>>2]&63](i,20,c)|0;if((c|0)>0){n=o[e+160>>2]|0;s=0;a=o[f+8>>2]|0;while(1){r[a+14>>1]=r[n+(s<<5)+6>>1]|0;r[a+16>>1]=r[n+(s<<5)+8>>1]|0;r[a+18>>1]=r[n+(s<<5)+10>>1]|0;r[a+8>>1]=r[n+(s<<5)>>1]|0;r[a+10>>1]=r[n+(s<<5)+2>>1]|0;r[a+12>>1]=r[n+(s<<5)+4>>1]|0;o[a>>2]=o[n+(s<<5)+12>>2];o[a+4>>2]=o[n+(s<<5)+16>>2];s=s+1|0;if((s|0)==(c|0))break;else a=a+20|0}}else n=o[e+160>>2]|0;rP[o[(o[i>>2]|0)+20>>2]&31](i,f,9015,1497453121,n);return 9036}function Yx(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0,c=0,f=0,l=0,u=0,b=0;b=p;p=p+112|0;o[e+20>>2]=o[t+16>>2];o[e+24>>2]=o[t+20>>2];o[e+28>>2]=o[t+24>>2];o[e+32>>2]=o[t+28>>2];o[e+4>>2]=o[t>>2];o[e+8>>2]=o[t+4>>2];o[e+12>>2]=o[t+8>>2];o[e+16>>2]=o[t+12>>2];o[e+36>>2]=o[t+32>>2];o[e+40>>2]=o[t+36>>2];o[e+44>>2]=o[t+40>>2];o[e+48>>2]=o[t+44>>2];o[e+56>>2]=o[t+48>>2];n[e+60>>0]=(o[t+52>>2]|0)!=0&1;u=o[t+56>>2]|0;a=b+48|0;f=a+64|0;do{o[a>>2]=0;a=a+4|0}while((a|0)<(f|0));l=o[e+88>>2]|0;if((l|0)<(u|0)){if((o[e+92>>2]|0)<(u|0)){if(!u){i=0;_=l}else{o[5637]=(o[5637]|0)+1;i=Qa(u<<6|19)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+88>>2]|0}if((_|0)>0){s=0;do{a=i+(s<<6)|0;c=(o[e+96>>2]|0)+(s<<6)|0;f=a+64|0;do{o[a>>2]=o[c>>2];a=a+4|0;c=c+4|0}while((a|0)<(f|0));s=s+1|0}while((s|0)!=(_|0))}_=o[e+96>>2]|0;if(_|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=i;o[e+92>>2]=u;_=e+96|0}else _=e+96|0;i=l;do{a=(o[_>>2]|0)+(i<<6)|0;c=b+48|0;f=a+64|0;do{o[a>>2]=o[c>>2];a=a+4|0;c=c+4|0}while((a|0)<(f|0));i=i+1|0}while((i|0)!=(u|0))}o[e+88>>2]=u;if((u|0)>0){i=o[e+96>>2]|0;_=0;s=o[t+64>>2]|0;while(1){o[i+(_<<6)+16>>2]=o[s+16>>2];o[i+(_<<6)+20>>2]=o[s+20>>2];o[i+(_<<6)+24>>2]=o[s+24>>2];o[i+(_<<6)+28>>2]=o[s+28>>2];o[i+(_<<6)>>2]=o[s>>2];o[i+(_<<6)+4>>2]=o[s+4>>2];o[i+(_<<6)+8>>2]=o[s+8>>2];o[i+(_<<6)+12>>2]=o[s+12>>2];o[i+(_<<6)+32>>2]=o[s+32>>2];o[i+(_<<6)+36>>2]=o[s+36>>2];o[i+(_<<6)+40>>2]=o[s+40>>2];_=_+1|0;if((_|0)==(u|0))break;else s=s+48|0}}c=o[t+60>>2]|0;o[b+32>>2]=0;o[b+32+4>>2]=0;o[b+32+8>>2]=0;o[b+32+12>>2]=0;a=o[e+128>>2]|0;if((a|0)<(c|0)){if((o[e+132>>2]|0)<(c|0)){if(!c){i=0;_=a}else{o[5637]=(o[5637]|0)+1;i=Qa((c<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+128>>2]|0}if((_|0)>0){s=0;do{u=i+(s<<4)|0;l=(o[e+136>>2]|0)+(s<<4)|0;o[u>>2]=o[l>>2];o[u+4>>2]=o[l+4>>2];o[u+8>>2]=o[l+8>>2];o[u+12>>2]=o[l+12>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+136>>2]|0;if(_|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=i;o[e+132>>2]=c;_=e+136|0}else _=e+136|0;i=a;do{u=(o[_>>2]|0)+(i<<4)|0;o[u>>2]=o[b+32>>2];o[u+4>>2]=o[b+32+4>>2];o[u+8>>2]=o[b+32+8>>2];o[u+12>>2]=o[b+32+12>>2];i=i+1|0}while((i|0)!=(c|0))}o[e+128>>2]=c;if((c|0)>0){i=o[e+136>>2]|0;_=0;s=o[t+68>>2]|0;while(1){o[i+(_<<4)+12>>2]=o[s+12>>2];r[i+(_<<4)+6>>1]=r[s+6>>1]|0;r[i+(_<<4)+8>>1]=r[s+8>>1]|0;r[i+(_<<4)+10>>1]=r[s+10>>1]|0;r[i+(_<<4)>>1]=r[s>>1]|0;r[i+(_<<4)+2>>1]=r[s+2>>1]|0;r[i+(_<<4)+4>>1]=r[s+4>>1]|0;_=_+1|0;if((_|0)==(c|0))break;else s=s+16|0}}o[e+144>>2]=o[t+76>>2];c=o[t+80>>2]|0;a=o[e+152>>2]|0;if((a|0)<(c|0)){if((o[e+156>>2]|0)<(c|0)){if(!c){i=0;_=a}else{o[5637]=(o[5637]|0)+1;i=Qa(c<<5|19)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+152>>2]|0}if((_|0)>0){s=0;do{u=i+(s<<5)|0;l=(o[e+160>>2]|0)+(s<<5)|0;o[u>>2]=o[l>>2];o[u+4>>2]=o[l+4>>2];o[u+8>>2]=o[l+8>>2];o[u+12>>2]=o[l+12>>2];o[u+16>>2]=o[l+16>>2];o[u+20>>2]=o[l+20>>2];o[u+24>>2]=o[l+24>>2];o[u+28>>2]=o[l+28>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+160>>2]|0;if(_|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=i;o[e+156>>2]=c;_=e+160|0}else _=e+160|0;i=a;do{u=(o[_>>2]|0)+(i<<5)|0;o[u>>2]=o[b>>2];o[u+4>>2]=o[b+4>>2];o[u+8>>2]=o[b+8>>2];o[u+12>>2]=o[b+12>>2];o[u+16>>2]=o[b+16>>2];o[u+20>>2]=o[b+20>>2];o[u+24>>2]=o[b+24>>2];o[u+28>>2]=o[b+28>>2];i=i+1|0}while((i|0)!=(c|0))}o[e+152>>2]=c;if((c|0)<=0){p=b;return}_=o[e+160>>2]|0;s=0;i=o[t+72>>2]|0;while(1){r[_+(s<<5)+6>>1]=r[i+14>>1]|0;r[_+(s<<5)+8>>1]=r[i+16>>1]|0;r[_+(s<<5)+10>>1]=r[i+18>>1]|0;r[_+(s<<5)>>1]=r[i+8>>1]|0;r[_+(s<<5)+2>>1]=r[i+10>>1]|0;r[_+(s<<5)+4>>1]=r[i+12>>1]|0;o[_+(s<<5)+12>>2]=o[i>>2];o[_+(s<<5)+16>>2]=o[i+4>>2];s=s+1|0;if((s|0)==(c|0))break;else i=i+20|0}p=b;return}function Kx(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0,l=0,u=0,b=0,d=0,h=0;h=p;p=p+112|0;c[e+20>>2]=+f[t+32>>3];c[e+24>>2]=+f[t+40>>3];c[e+28>>2]=+f[t+48>>3];c[e+32>>2]=+f[t+56>>3];c[e+4>>2]=+f[t>>3];c[e+8>>2]=+f[t+8>>3];c[e+12>>2]=+f[t+16>>3];c[e+16>>2]=+f[t+24>>3];c[e+36>>2]=+f[t+64>>3];c[e+40>>2]=+f[t+72>>3];c[e+44>>2]=+f[t+80>>3];c[e+48>>2]=+f[t+88>>3];o[e+56>>2]=o[t+96>>2];n[e+60>>0]=(o[t+100>>2]|0)!=0&1;d=o[t+104>>2]|0;a=h+48|0;u=a+64|0;do{o[a>>2]=0;a=a+4|0}while((a|0)<(u|0));b=o[e+88>>2]|0;if((b|0)<(d|0)){if((o[e+92>>2]|0)<(d|0)){if(!d){i=0;_=b}else{o[5637]=(o[5637]|0)+1;i=Qa(d<<6|19)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+88>>2]|0}if((_|0)>0){s=0;do{a=i+(s<<6)|0;l=(o[e+96>>2]|0)+(s<<6)|0;u=a+64|0;do{o[a>>2]=o[l>>2];a=a+4|0;l=l+4|0}while((a|0)<(u|0));s=s+1|0}while((s|0)!=(_|0))}_=o[e+96>>2]|0;if(_|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=i;o[e+92>>2]=d;_=e+96|0}else _=e+96|0;i=b;do{a=(o[_>>2]|0)+(i<<6)|0;l=h+48|0;u=a+64|0;do{o[a>>2]=o[l>>2];a=a+4|0;l=l+4|0}while((a|0)<(u|0));i=i+1|0}while((i|0)!=(d|0))}o[e+88>>2]=d;if((d|0)>0){i=o[e+96>>2]|0;_=0;s=o[t+112>>2]|0;while(1){c[i+(_<<6)+16>>2]=+f[s+32>>3];c[i+(_<<6)+20>>2]=+f[s+40>>3];c[i+(_<<6)+24>>2]=+f[s+48>>3];c[i+(_<<6)+28>>2]=+f[s+56>>3];c[i+(_<<6)>>2]=+f[s>>3];c[i+(_<<6)+4>>2]=+f[s+8>>3];c[i+(_<<6)+8>>2]=+f[s+16>>3];c[i+(_<<6)+12>>2]=+f[s+24>>3];o[i+(_<<6)+32>>2]=o[s+64>>2];o[i+(_<<6)+36>>2]=o[s+68>>2];o[i+(_<<6)+40>>2]=o[s+72>>2];_=_+1|0;if((_|0)==(d|0))break;else s=s+80|0}}l=o[t+108>>2]|0;o[h+32>>2]=0;o[h+32+4>>2]=0;o[h+32+8>>2]=0;o[h+32+12>>2]=0;a=o[e+128>>2]|0;if((a|0)<(l|0)){if((o[e+132>>2]|0)<(l|0)){if(!l){i=0;_=a}else{o[5637]=(o[5637]|0)+1;i=Qa((l<<4|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+128>>2]|0}if((_|0)>0){s=0;do{d=i+(s<<4)|0;b=(o[e+136>>2]|0)+(s<<4)|0;o[d>>2]=o[b>>2];o[d+4>>2]=o[b+4>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=o[b+12>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+136>>2]|0;if(_|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=i;o[e+132>>2]=l;_=e+136|0}else _=e+136|0;i=a;do{d=(o[_>>2]|0)+(i<<4)|0;o[d>>2]=o[h+32>>2];o[d+4>>2]=o[h+32+4>>2];o[d+8>>2]=o[h+32+8>>2];o[d+12>>2]=o[h+32+12>>2];i=i+1|0}while((i|0)!=(l|0))}o[e+128>>2]=l;if((l|0)>0){i=o[e+136>>2]|0;_=0;s=o[t+116>>2]|0;while(1){o[i+(_<<4)+12>>2]=o[s+12>>2];r[i+(_<<4)+6>>1]=r[s+6>>1]|0;r[i+(_<<4)+8>>1]=r[s+8>>1]|0;r[i+(_<<4)+10>>1]=r[s+10>>1]|0;r[i+(_<<4)>>1]=r[s>>1]|0;r[i+(_<<4)+2>>1]=r[s+2>>1]|0;r[i+(_<<4)+4>>1]=r[s+4>>1]|0;_=_+1|0;if((_|0)==(l|0))break;else s=s+16|0}}o[e+144>>2]=o[t+120>>2];l=o[t+124>>2]|0;a=o[e+152>>2]|0;if((a|0)<(l|0)){if((o[e+156>>2]|0)<(l|0)){if(!l){i=0;_=a}else{o[5637]=(o[5637]|0)+1;i=Qa(l<<5|19)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}_=o[e+152>>2]|0}if((_|0)>0){s=0;do{d=i+(s<<5)|0;b=(o[e+160>>2]|0)+(s<<5)|0;o[d>>2]=o[b>>2];o[d+4>>2]=o[b+4>>2];o[d+8>>2]=o[b+8>>2];o[d+12>>2]=o[b+12>>2];o[d+16>>2]=o[b+16>>2];o[d+20>>2]=o[b+20>>2];o[d+24>>2]=o[b+24>>2];o[d+28>>2]=o[b+28>>2];s=s+1|0}while((s|0)!=(_|0))}_=o[e+160>>2]|0;if(_|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=i;o[e+156>>2]=l;_=e+160|0}else _=e+160|0;i=a;do{d=(o[_>>2]|0)+(i<<5)|0;o[d>>2]=o[h>>2];o[d+4>>2]=o[h+4>>2];o[d+8>>2]=o[h+8>>2];o[d+12>>2]=o[h+12>>2];o[d+16>>2]=o[h+16>>2];o[d+20>>2]=o[h+20>>2];o[d+24>>2]=o[h+24>>2];o[d+28>>2]=o[h+28>>2];i=i+1|0}while((i|0)!=(l|0))}o[e+152>>2]=l;if((l|0)<=0){p=h;return}_=o[e+160>>2]|0;s=0;i=o[t+128>>2]|0;while(1){r[_+(s<<5)+6>>1]=r[i+14>>1]|0;r[_+(s<<5)+8>>1]=r[i+16>>1]|0;r[_+(s<<5)+10>>1]=r[i+18>>1]|0;r[_+(s<<5)>>1]=r[i+8>>1]|0;r[_+(s<<5)+2>>1]=r[i+10>>1]|0;r[_+(s<<5)+4>>1]=r[i+12>>1]|0;o[_+(s<<5)+12>>2]=o[i>>2];o[_+(s<<5)+16>>2]=o[i+4>>2];s=s+1|0;if((s|0)==(l|0))break;else i=i+20|0}p=h;return}function Qx(e,t,i){e=e|0;t=t|0;i=i|0;var _=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0;B=p;p=p+112|0;M=o[e+56>>2]|0;if((i-t|0)==1){if(!(n[e+60>>0]|0)){d=(o[e+96>>2]|0)+(M<<6)|0;h=(o[e+76>>2]|0)+(t<<6)|0;m=d+64|0;do{o[d>>2]=o[h>>2];d=d+4|0;h=h+4|0}while((d|0)<(m|0))}else{W=(o[e+136>>2]|0)+(M<<4)|0;P=(o[e+116>>2]|0)+(t<<4)|0;o[W>>2]=o[P>>2];o[W+4>>2]=o[P+4>>2];o[W+8>>2]=o[P+8>>2];o[W+12>>2]=o[P+12>>2]}o[e+56>>2]=(o[e+56>>2]|0)+1;p=B;return}if((i|0)>(t|0)){l=(n[e+60>>0]|0)==0;if(l){_=o[e+76>>2]|0;a=t;u=0;b=0;f=0;do{u=u+(+c[_+(a<<6)+16>>2]+ +c[_+(a<<6)>>2])*.5;f=f+(+c[_+(a<<6)+20>>2]+ +c[_+(a<<6)+4>>2])*.5;b=b+(+c[_+(a<<6)+24>>2]+ +c[_+(a<<6)+8>>2])*.5;a=a+1|0}while((a|0)!=(i|0))}else{_=o[e+116>>2]|0;y=+c[e+36>>2];g=+c[e+40>>2];v=+c[e+44>>2];k=+c[e+4>>2];S=+c[e+8>>2];R=+c[e+12>>2];a=t;u=0;b=0;f=0;do{u=u+(+(s[_+(a<<4)+6>>1]|0)/y+k+(+(s[_+(a<<4)>>1]|0)/y+k))*.5;f=f+(+(s[_+(a<<4)+8>>1]|0)/g+S+(+(s[_+(a<<4)+2>>1]|0)/g+S))*.5;b=b+(+(s[_+(a<<4)+10>>1]|0)/v+R+(+(s[_+(a<<4)+4>>1]|0)/v+R))*.5;a=a+1|0}while((a|0)!=(i|0))}T=1/+(i-t|0);O=T*u;D=T*f;T=T*b;if(l){_=o[e+76>>2]|0;a=t;b=0;u=0;f=0;do{k=(+c[_+(a<<6)+16>>2]+ +c[_+(a<<6)>>2])*.5-O;S=(+c[_+(a<<6)+20>>2]+ +c[_+(a<<6)+4>>2])*.5-D;R=(+c[_+(a<<6)+24>>2]+ +c[_+(a<<6)+8>>2])*.5-T;b=b+k*k;f=f+S*S;u=u+R*R;a=a+1|0}while((a|0)!=(i|0));y=+(i-t|0)}else{_=o[e+116>>2]|0;y=+c[e+36>>2];g=+c[e+40>>2];v=+c[e+44>>2];k=+c[e+4>>2];S=+c[e+8>>2];R=+c[e+12>>2];a=t;b=0;u=0;f=0;do{G=(+(s[_+(a<<4)+6>>1]|0)/y+k+(+(s[_+(a<<4)>>1]|0)/y+k))*.5-O;F=(+(s[_+(a<<4)+8>>1]|0)/g+S+(+(s[_+(a<<4)+2>>1]|0)/g+S))*.5-D;A=(+(s[_+(a<<4)+10>>1]|0)/v+R+(+(s[_+(a<<4)+4>>1]|0)/v+R))*.5-T;b=b+G*G;f=f+F*F;u=u+A*A;a=a+1|0}while((a|0)!=(i|0));y=+(i-t|0)}}else{y=+(i-t|0);b=0;u=0;f=0}G=1/(y+-1);F=G*b;A=G*f;G=G*u;w=F<A?A<G?2:1:F<G?2:0;o[B+16>>2]=0;o[B+16+4>>2]=0;o[B+16+8>>2]=0;o[B+16+12>>2]=0;if((i|0)>(t|0)){if(!(n[e+60>>0]|0)){_=o[e+76>>2]|0;b=0;u=0;f=0;a=t;do{b=(+c[_+(a<<6)+16>>2]+ +c[_+(a<<6)>>2])*.5+b;u=(+c[_+(a<<6)+20>>2]+ +c[_+(a<<6)+4>>2])*.5+u;f=(+c[_+(a<<6)+24>>2]+ +c[_+(a<<6)+8>>2])*.5+f;a=a+1|0}while((a|0)!=(i|0))}else{_=o[e+116>>2]|0;y=+c[e+36>>2];g=+c[e+40>>2];v=+c[e+44>>2];k=+c[e+4>>2];S=+c[e+8>>2];R=+c[e+12>>2];b=0;u=0;f=0;a=t;do{b=(+(s[_+(a<<4)+6>>1]|0)/y+k+(+(s[_+(a<<4)>>1]|0)/y+k))*.5+b;u=(+(s[_+(a<<4)+8>>1]|0)/g+S+(+(s[_+(a<<4)+2>>1]|0)/g+S))*.5+u;f=(+(s[_+(a<<4)+10>>1]|0)/v+R+(+(s[_+(a<<4)+4>>1]|0)/v+R))*.5+f;a=a+1|0}while((a|0)!=(i|0))}c[B+16>>2]=b;c[B+16+4>>2]=u;c[B+16+8>>2]=f;_=B+16|0}else{_=B+16|0;b=0;u=0;f=0}c[_>>2]=1/+(i-t|0)*b;c[B+16+4>>2]=1/+(i-t|0)*u;c[B+16+8>>2]=1/+(i-t|0)*f;k=+c[B+16+(w<<2)>>2];if((i|0)>(t|0)){C=t;_=t;do{a=(n[e+60>>0]|0)==0;if(a){x=o[e+76>>2]|0;f=+c[x+(C<<6)>>2];u=+c[x+(C<<6)+16>>2];b=+c[x+(C<<6)+4>>2];y=+c[x+(C<<6)+20>>2];g=+c[x+(C<<6)+8>>2];v=+c[x+(C<<6)+24>>2]}else{x=o[e+116>>2]|0;b=+c[e+36>>2];g=+c[e+40>>2];G=+c[e+44>>2];u=+c[e+4>>2];y=+c[e+8>>2];v=+c[e+12>>2];f=+(s[x+(C<<4)>>1]|0)/b+u;u=+(s[x+(C<<4)+6>>1]|0)/b+u;b=+(s[x+(C<<4)+2>>1]|0)/g+y;y=+(s[x+(C<<4)+8>>1]|0)/g+y;g=+(s[x+(C<<4)+4>>1]|0)/G+v;v=+(s[x+(C<<4)+10>>1]|0)/G+v}c[B>>2]=(u+f)*.5;c[B+4>>2]=(y+b)*.5;c[B+8>>2]=(v+g)*.5;c[B+12>>2]=0;if(+c[B+(w<<2)>>2]>k){if(a){a=o[e+76>>2]|0;l=a+(C<<6)|0;d=B+48|0;h=l;m=d+64|0;do{o[d>>2]=o[h>>2];d=d+4|0;h=h+4|0}while((d|0)<(m|0));d=l;h=a+(_<<6)|0;m=d+64|0;do{o[d>>2]=o[h>>2];d=d+4|0;h=h+4|0}while((d|0)<(m|0));d=(o[e+76>>2]|0)+(_<<6)|0;h=B+48|0;m=d+64|0;do{o[d>>2]=o[h>>2];d=d+4|0;h=h+4|0}while((d|0)<(m|0))}else{L=o[e+116>>2]|0;x=L+(C<<4)|0;o[B+48>>2]=o[x>>2];o[B+48+4>>2]=o[x+4>>2];o[B+48+8>>2]=o[x+8>>2];o[B+48+12>>2]=o[x+12>>2];L=L+(_<<4)|0;o[x>>2]=o[L>>2];o[x+4>>2]=o[L+4>>2];o[x+8>>2]=o[L+8>>2];o[x+12>>2]=o[L+12>>2];x=(o[e+116>>2]|0)+(_<<4)|0;o[x>>2]=o[B+48>>2];o[x+4>>2]=o[B+48+4>>2];o[x+8>>2]=o[B+48+8>>2];o[x+12>>2]=o[B+48+12>>2]}_=_+1|0}C=C+1|0}while((C|0)!=(i|0))}else _=t;if(!((_|0)>(((i-t|0)/3|0)+t|0)?(_|0)<(i+-1-((i-t|0)/3|0)|0):0))_=(i-t>>1)+t|0;x=o[e+56>>2]|0;if(!(n[e+60>>0]|0)){L=(o[e+96>>2]|0)+(x<<6)|0;o[L>>2]=o[e+20>>2];o[L+4>>2]=o[e+20+4>>2];o[L+8>>2]=o[e+20+8>>2];o[L+12>>2]=o[e+20+12>>2]}else{L=o[e+136>>2]|0;F=(+c[e+24>>2]-+c[e+8>>2])*+c[e+40>>2];G=(+c[e+28>>2]-+c[e+12>>2])*+c[e+44>>2];r[L+(x<<4)>>1]=~~((+c[e+20>>2]-+c[e+4>>2])*+c[e+36>>2])&65534;r[L+(x<<4)+2>>1]=~~F&65534;r[L+(x<<4)+4>>1]=~~G&65534}a=o[e+56>>2]|0;if(!(n[e+60>>0]|0)){L=(o[e+96>>2]|0)+(a<<6)+16|0;o[L>>2]=o[e+4>>2];o[L+4>>2]=o[e+4+4>>2];o[L+8>>2]=o[e+4+8>>2];o[L+12>>2]=o[e+4+12>>2]}else{L=o[e+136>>2]|0;A=+c[e+4>>2];F=+c[e+8>>2];G=+c[e+12>>2];F=(F-F)*+c[e+40>>2];G=(G-G)*+c[e+44>>2];r[L+(a<<4)+6>>1]=~~((A-A)*+c[e+36>>2]+1)&65535|1;r[L+(a<<4)+8>>1]=~~(F+1)&65535|1;r[L+(a<<4)+10>>1]=~~(G+1)&65535|1}L=o[e+56>>2]|0;if((i|0)>(t|0)){j=n[e+60>>0]|0;I=t;do{if(!(j<<24>>24)){a=o[e+76>>2]|0;f=+c[a+(I<<6)>>2];u=+c[a+(I<<6)+4>>2];b=+c[a+(I<<6)+8>>2];y=+c[a+(I<<6)+12>>2];g=+c[a+(I<<6)+16>>2];v=+c[a+(I<<6)+20>>2];k=+c[a+(I<<6)+24>>2];S=+c[a+(I<<6)+28>>2];a=o[e+96>>2]|0;if(f<+c[a+(L<<6)>>2])c[a+(L<<6)>>2]=f;if(u<+c[a+(L<<6)+4>>2])c[a+(L<<6)+4>>2]=u;if(b<+c[a+(L<<6)+8>>2])c[a+(L<<6)+8>>2]=b;if(y<+c[a+(L<<6)+12>>2])c[a+(L<<6)+12>>2]=y;if(+c[a+(L<<6)+16>>2]<g)c[a+(L<<6)+16>>2]=g;if(+c[a+(L<<6)+20>>2]<v)c[a+(L<<6)+20>>2]=v;if(+c[a+(L<<6)+24>>2]<k)c[a+(L<<6)+24>>2]=k;if(+c[a+(L<<6)+28>>2]<S)c[a+(L<<6)+28>>2]=S}else{h=o[e+116>>2]|0;y=+c[e+36>>2];O=+c[e+40>>2];S=+c[e+44>>2];g=+c[e+4>>2];A=+c[e+8>>2];R=+c[e+12>>2];v=+c[e+4>>2];F=+c[e+8>>2];T=+c[e+12>>2];k=+c[e+36>>2];G=+c[e+40>>2];D=+c[e+44>>2];m=~~((+(s[h+(I<<4)>>1]|0)/y+g-v)*k)&65534;a=~~((+(s[h+(I<<4)+4>>1]|0)/S+R-T)*D)&65534;d=~~((+(s[h+(I<<4)+2>>1]|0)/O+A-F)*G)&65534;C=(~~((+(s[h+(I<<4)+6>>1]|0)/y+g-v)*k+1)&65535|1)&65535;l=(~~((+(s[h+(I<<4)+10>>1]|0)/S+R-T)*D+1)&65535|1)&65535;h=(~~((+(s[h+(I<<4)+8>>1]|0)/O+A-F)*G+1)&65535|1)&65535;w=o[e+136>>2]|0;if((s[w+(L<<4)>>1]|0)>(m&65535))r[w+(L<<4)>>1]=m;if((s[w+(L<<4)+6>>1]|0)<(C&65535))r[w+(L<<4)+6>>1]=C;if((s[w+(L<<4)+2>>1]|0)>(d&65535))r[w+(L<<4)+2>>1]=d;if((s[w+(L<<4)+8>>1]|0)<(h&65535))r[w+(L<<4)+8>>1]=h;if((s[w+(L<<4)+4>>1]|0)>(a&65535))r[w+(L<<4)+4>>1]=a;if((s[w+(L<<4)+10>>1]|0)<(l&65535))r[w+(L<<4)+10>>1]=l}I=I+1|0}while((I|0)!=(i|0))}o[e+56>>2]=L+1;Qx(e,t,_);j=o[e+56>>2]|0;Qx(e,_,i);w=(o[e+56>>2]|0)-M|0;_=n[e+60>>0]|0;if(_<<24>>24!=0&(w<<4|0)>2048){m=o[e+136>>2]|0;d=o[m+(L+1<<4)+12>>2]|0;d=(d|0)>-1?1:0-d|0;C=o[m+(j<<4)+12>>2]|0;C=(C|0)>-1?1:0-C|0;if((d<<4|0)<2049){h=o[e+152>>2]|0;if((h|0)==(o[e+156>>2]|0)?(P=h|0?h<<1:1,(h|0)<(P|0)):0){if(!P){_=0;a=h}else{o[5637]=(o[5637]|0)+1;_=Qa(P<<5|19)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=o[e+152>>2]|0}if((a|0)>0){l=0;do{i=_+(l<<5)|0;M=(o[e+160>>2]|0)+(l<<5)|0;o[i>>2]=o[M>>2];o[i+4>>2]=o[M+4>>2];o[i+8>>2]=o[M+8>>2];o[i+12>>2]=o[M+12>>2];o[i+16>>2]=o[M+16>>2];o[i+20>>2]=o[M+20>>2];o[i+24>>2]=o[M+24>>2];o[i+28>>2]=o[M+28>>2];l=l+1|0}while((l|0)!=(a|0))}a=o[e+160>>2]|0;if(a|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=_;o[e+156>>2]=P;_=o[e+152>>2]|0}else _=h;o[e+152>>2]=_+1;P=(o[e+160>>2]|0)+(h<<5)|0;o[P>>2]=o[B+48>>2];o[P+4>>2]=o[B+48+4>>2];o[P+8>>2]=o[B+48+8>>2];o[P+12>>2]=o[B+48+12>>2];o[P+16>>2]=o[B+48+16>>2];o[P+20>>2]=o[B+48+20>>2];o[P+24>>2]=o[B+48+24>>2];o[P+28>>2]=o[B+48+28>>2];P=o[e+160>>2]|0;r[P+(h<<5)>>1]=r[m+(L+1<<4)>>1]|0;r[P+(h<<5)+2>>1]=r[m+(L+1<<4)+2>>1]|0;r[P+(h<<5)+4>>1]=r[m+(L+1<<4)+4>>1]|0;r[P+(h<<5)+6>>1]=r[m+(L+1<<4)+6>>1]|0;r[P+(h<<5)+8>>1]=r[m+(L+1<<4)+8>>1]|0;r[P+(h<<5)+10>>1]=r[m+(L+1<<4)+10>>1]|0;o[P+(h<<5)+12>>2]=L+1;o[P+(h<<5)+16>>2]=d}if((C<<4|0)<2049){d=o[e+152>>2]|0;if((d|0)==(o[e+156>>2]|0)?(W=d|0?d<<1:1,(d|0)<(W|0)):0){if(!W){_=0;a=d}else{o[5637]=(o[5637]|0)+1;_=Qa(W<<5|19)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}a=o[e+152>>2]|0}if((a|0)>0){l=0;do{P=_+(l<<5)|0;i=(o[e+160>>2]|0)+(l<<5)|0;o[P>>2]=o[i>>2];o[P+4>>2]=o[i+4>>2];o[P+8>>2]=o[i+8>>2];o[P+12>>2]=o[i+12>>2];o[P+16>>2]=o[i+16>>2];o[P+20>>2]=o[i+20>>2];o[P+24>>2]=o[i+24>>2];o[P+28>>2]=o[i+28>>2];l=l+1|0}while((l|0)!=(a|0))}a=o[e+160>>2]|0;if(a|0){if(n[e+164>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[a+-4>>2]|0)}o[e+160>>2]=0}n[e+164>>0]=1;o[e+160>>2]=_;o[e+156>>2]=W;_=o[e+152>>2]|0}else _=d;o[e+152>>2]=_+1;W=(o[e+160>>2]|0)+(d<<5)|0;o[W>>2]=o[B+16>>2];o[W+4>>2]=o[B+16+4>>2];o[W+8>>2]=o[B+16+8>>2];o[W+12>>2]=o[B+16+12>>2];o[W+16>>2]=o[B+16+16>>2];o[W+20>>2]=o[B+16+20>>2];o[W+24>>2]=o[B+16+24>>2];o[W+28>>2]=o[B+16+28>>2];W=o[e+160>>2]|0;r[W+(d<<5)>>1]=r[m+(j<<4)>>1]|0;r[W+(d<<5)+2>>1]=r[m+(j<<4)+2>>1]|0;r[W+(d<<5)+4>>1]=r[m+(j<<4)+4>>1]|0;r[W+(d<<5)+6>>1]=r[m+(j<<4)+6>>1]|0;r[W+(d<<5)+8>>1]=r[m+(j<<4)+8>>1]|0;r[W+(d<<5)+10>>1]=r[m+(j<<4)+10>>1]|0;o[W+(d<<5)+12>>2]=j;o[W+(d<<5)+16>>2]=C}o[e+168>>2]=o[e+152>>2];_=n[e+60>>0]|0}if(!(_<<24>>24)){o[(o[e+96>>2]|0)+(x<<6)+32>>2]=w;p=B;return}else{o[(o[e+136>>2]|0)+(x<<4)+12>>2]=0-w;p=B;\nreturn}}function qx(e,t,i,_){e=e|0;t=t|0;i=i|0;_=_|0;var a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0;k=p;p=p+16|0;if(!(n[e+60>>0]|0)){a=o[e+56>>2]|0;if((a|0)>0){f=a;b=0;m=o[e+96>>2]|0;a=0;while(1){a=a+1|0;if(!(+c[i>>2]>+c[m+16>>2])?!(+c[_>>2]<+c[m>>2]):0)l=1;else l=0;if(!(!(+c[i+8>>2]>+c[m+24>>2])?!(+c[_+8>>2]<+c[m+8>>2]):0))l=0;if(!(+c[i+4>>2]>+c[m+20>>2])?!(+c[_+4>>2]<+c[m+4>>2]):0){u=o[m+32>>2]|0;if(l&(u|0)==-1){EP[o[(o[t>>2]|0)+8>>2]&127](t,o[m+36>>2]|0,o[m+40>>2]|0);f=o[e+56>>2]|0;h=43}else{d=(u|0)==-1;h=42}}else{u=o[m+32>>2]|0;d=(u|0)==-1;l=0;h=42}if((h|0)==42){h=0;if(d|l)h=43;else{b=u+b|0;l=m+(u<<6)|0}}if((h|0)==43){b=b+1|0;l=m+64|0}if((b|0)<(f|0))m=l;else break}}else a=0;if((o[4988]|0)>=(a|0)){p=k;return}o[4988]=a;p=k;return}O=+c[i>>2];P=+c[i+4>>2];j=+c[i+8>>2];M=+c[e+4>>2];O=O<M?M:O;R=+c[e+8>>2];P=P<R?R:P;D=+c[e+12>>2];j=j<D?D:j;W=+c[e+20>>2];I=+c[e+24>>2];L=+c[e+28>>2];x=+c[e+36>>2];S=+c[e+40>>2];T=+c[e+44>>2];w=~~(((W<O?W:O)-M)*x)&65534;r[k+6>>1]=w;v=~~(((L<j?L:j)-D)*T)&65534;C=~~(((I<P?I:P)-R)*S)&65534;r[k+6+2>>1]=C;r[k+6+4>>1]=v;P=+c[_>>2];j=+c[_+4>>2];O=+c[_+8>>2];P=P<M?M:P;j=j<R?R:j;O=O<D?D:O;g=(~~(((W<P?W:P)-M)*x+1)&65535|1)&65535;r[k>>1]=g;_=(~~(((L<O?L:O)-D)*T+1)&65535|1)&65535;y=(~~(((I<j?I:j)-R)*S+1)&65535|1)&65535;r[k+2>>1]=y;r[k+4>>1]=_;switch(o[e+144>>2]|0){case 0:{h=o[e+56>>2]|0;if((h|0)>0){f=0;l=o[e+136>>2]|0;a=0;do{a=a+1|0;u=((g&65535)>=(s[l>>1]|0)?(w&65535)<=(s[l+6>>1]|0):0)&(v&65535)<=(s[l+10>>1]|0)&(_&65535)>=(s[l+4>>1]|0)&(C&65535)<=(s[l+8>>1]|0)&(y&65535)>=(s[l+2>>1]|0);b=l+12|0;d=o[b>>2]|0;if((d|0)>-1&u)EP[o[(o[t>>2]|0)+8>>2]&127](t,d>>21,d&2097151);if(u|(d|0)>-1){f=f+1|0;l=l+16|0}else{e=o[b>>2]|0;f=f-e|0;l=l+(0-e<<4)|0}}while((f|0)<(h|0))}else a=0;if((o[4988]|0)<(a|0))o[4988]=a;break}case 1:{if((o[e+152>>2]|0)>0){i=0;do{a=o[e+160>>2]|0;if(((g&65535)>=(s[a+(i<<5)>>1]|0)?(w&65535)<=(s[a+(i<<5)+6>>1]|0):0)&(v&65535)<=(s[a+(i<<5)+10>>1]|0)&(_&65535)>=(s[a+(i<<5)+4>>1]|0)&(C&65535)<=(s[a+(i<<5)+8>>1]|0)&(y&65535)>=(s[a+(i<<5)+2>>1]|0)){m=o[a+(i<<5)+12>>2]|0;h=o[a+(i<<5)+16>>2]|0;if((h|0)>0){f=m;l=(o[e+136>>2]|0)+(m<<4)|0;a=0;do{a=a+1|0;u=((g&65535)>=(s[l>>1]|0)?(w&65535)<=(s[l+6>>1]|0):0)&(v&65535)<=(s[l+10>>1]|0)&(_&65535)>=(s[l+4>>1]|0)&(C&65535)<=(s[l+8>>1]|0)&(y&65535)>=(s[l+2>>1]|0);b=l+12|0;d=o[b>>2]|0;if((d|0)>-1&u)EP[o[(o[t>>2]|0)+8>>2]&127](t,d>>21,d&2097151);if(u|(d|0)>-1){f=f+1|0;l=l+16|0}else{d=o[b>>2]|0;f=f-d|0;l=l+(0-d<<4)|0}}while((f|0)<(h+m|0))}else a=0;if((o[4988]|0)<(a|0))o[4988]=a}i=i+1|0}while((i|0)<(o[e+152>>2]|0))}break}case 2:{Jx(o[e+136>>2]|0,t,k+6|0,k);break}default:{}}p=k;return}function Jx(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0,_=0,a=0;while(1){r=o[e+12>>2]|0;if(!(((s[n>>1]|0)>=(s[e>>1]|0)?(s[i>>1]|0)<=(s[e+6>>1]|0):0)&(s[i+4>>1]|0)<=(s[e+10>>1]|0)&(s[n+4>>1]|0)>=(s[e+4>>1]|0)&(s[i+2>>1]|0)<=(s[e+8>>1]|0)&(s[n+2>>1]|0)>=(s[e+2>>1]|0))){_=6;break}if((r|0)>-1)break;a=e+16|0;Jx(a,t,i,n);r=o[e+28>>2]|0;e=(r|0)>-1?e+32|0:a+(0-r<<4)|0}if((_|0)==6)return;EP[o[(o[t>>2]|0)+8>>2]&127](t,r>>21,r&2097151);return}function $x(e,t,i,n,r,_,s,a){e=e|0;t=t|0;i=i|0;n=+n;r=+r;_=+_;s=s|0;a=a|0;var f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0;z=p;p=p+32|0;x=+c[i>>2];P=+c[i+4>>2];Z=+c[i+8>>2];g=+c[s>>2];v=+c[s+4>>2];w=+c[s+8>>2];d=+c[a>>2];h=+c[a+4>>2];y=+c[a+8>>2];M=1/+X(+((n-x)*(n-x)+(r-P)*(r-P)+(_-Z)*(_-Z)));W=(n-x)*M==0?0xde0b6b000000000:1/((n-x)*M);B=(r-P)*M==0?0xde0b6b000000000:1/((r-P)*M);A=(_-Z)*M==0?0xde0b6b000000000:1/((_-Z)*M);F=(x>n?n:x)+g;G=(P>r?r:P)+v;E=(Z>_?_:Z)+w;V=(x<n?n:x)+d;N=(P<r?r:P)+h;H=(Z<_?_:Z)+y;l=o[e+56>>2]|0;e:do if((l|0)>0){k=0;S=o[e+96>>2]|0;f=0;while(1){f=f+1|0;o[z>>2]=o[S>>2];o[z+4>>2]=o[S+4>>2];o[z+8>>2]=o[S+8>>2];o[z+12>>2]=o[S+12>>2];C=S+16|0;o[z+16>>2]=o[C>>2];o[z+16+4>>2]=o[C+4>>2];o[z+16+8>>2]=o[C+8>>2];o[z+16+12>>2]=o[C+12>>2];c[z>>2]=+c[z>>2]-d;c[z+4>>2]=+c[z+4>>2]-h;c[z+8>>2]=+c[z+8>>2]-y;c[z+16>>2]=+c[z+16>>2]-g;c[z+20>>2]=+c[z+20>>2]-v;c[z+24>>2]=+c[z+24>>2]-w;if(!(F>+c[C>>2])?!(V<+c[S>>2]):0)u=1;else u=0;if(!(!(E>+c[S+24>>2])?!(H<+c[S+8>>2]):0))u=0;if(((!(G>+c[S+20>>2])?!(N<+c[S+4>>2]|u^1):0)?(j=+c[i>>2],R=W*(+c[z+((W<0&1)<<4)>>2]-j),j=W*(+c[z+((W<0^1)<<4)>>2]-j),T=+c[i+4>>2],I=B*(+c[z+((B<0&1)<<4)+4>>2]-T),T=B*(+c[z+((B<0^1)<<4)+4>>2]-T),!(I>j|R>T)):0)?(D=I>R?I:R,U=T<j?T:j,L=+c[i+8>>2],O=A*(+c[z+((A<0&1)<<4)+8>>2]-L),L=A*(+c[z+((A<0^1)<<4)+8>>2]-L),!(O>U|D>L)):0){u=(L<U?L:U)>0?(O>D?O:D)<(_-Z)*((_-Z)*M)+((n-x)*((n-x)*M)+(r-P)*((r-P)*M)):0;b=o[S+32>>2]|0;if(u&(b|0)==-1){EP[o[(o[t>>2]|0)+8>>2]&127](t,o[S+36>>2]|0,o[S+40>>2]|0);l=o[e+56>>2]|0;C=17}else{m=(b|0)==-1;C=16}}else{b=o[S+32>>2]|0;m=(b|0)==-1;u=0;C=16}if((C|0)==16){C=0;if(m|u)C=17;else{m=b+k|0;u=S+(b<<6)|0}}if((C|0)==17){m=k+1|0;u=S+64|0}if((m|0)>=(l|0))break e;d=+c[a>>2];h=+c[a+4>>2];y=+c[a+8>>2];g=+c[s>>2];v=+c[s+4>>2];w=+c[s+8>>2];k=m;S=u}}else f=0;while(0);if((o[4988]|0)>=(f|0)){p=z;return}o[4988]=f;p=z;return}function eM(e,t,i,n,_,a,f,l,u){e=e|0;t=t|0;i=i|0;n=+n;_=+_;a=+a;f=f|0;l=l|0;u=u|0;var b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0;z=p;p=p+32|0;M=+c[i>>2];V=+c[i+4>>2];H=+c[i+8>>2];W=1/+X(+((n-M)*(n-M)+(_-V)*(_-V)+(a-H)*(a-H)));G=(n-M)*W==0?0xde0b6b000000000:1/((n-M)*W);E=(_-V)*W==0?0xde0b6b000000000:1/((_-V)*W);N=(a-H)*W==0?0xde0b6b000000000:1/((a-H)*W);re=(M>n?n:M)+ +c[f>>2];ie=(V>_?_:V)+ +c[f+4>>2];ne=(H>a?a:H)+ +c[f+8>>2];ee=(M<n?n:M)+ +c[l>>2];g=(V<_?_:V)+ +c[l+4>>2];Q=(H<a?a:H)+ +c[l+8>>2];$=+c[e+4>>2];re=re<$?$:re;v=+c[e+8>>2];ie=ie<v?v:ie;K=+c[e+12>>2];ne=ne<K?K:ne;te=+c[e+20>>2];y=+c[e+24>>2];q=+c[e+28>>2];J=+c[e+36>>2];C=+c[e+40>>2];Y=+c[e+44>>2];Z=~~(((te<re?te:re)-$)*J)&65534;O=~~(((q<ne?q:ne)-K)*Y)&65534;x=~~(((y<ie?y:ie)-v)*C)&65534;ee=ee<$?$:ee;g=g<v?v:g;Q=Q<K?K:Q;P=(~~(((te<ee?te:ee)-$)*J+1)&65535|1)&65535;D=(~~(((q<Q?q:Q)-K)*Y+1)&65535|1)&65535;L=(~~(((y<g?y:g)-v)*C+1)&65535|1)&65535;if((u|0)>0){d=0;h=o[e+136>>2]|0;b=0;do{b=b+1|0;m=h+6|0;w=r[h>>1]|0;k=h+10|0;S=r[h+4>>1]|0;R=h+8|0;j=r[h+2>>1]|0;I=h+12|0;T=(o[I>>2]|0)>-1;do if(((P&65535)>=(w&65535)?(Z&65535)<=(s[m>>1]|0):0)&(O&65535)<=(s[k>>1]|0)&(D&65535)>=(S&65535)&(x&65535)<=(s[R>>1]|0)&(L&65535)>=(j&65535)){ee=+c[e+36>>2];ie=+c[e+40>>2];re=+c[e+44>>2];te=+c[e+4>>2];ne=+c[e+8>>2];v=+c[e+12>>2];c[z+12>>2]=0;C=+(s[m>>1]|0)/ee+te;y=+(s[R>>1]|0)/ie+ne;g=+(s[k>>1]|0)/re+v;c[z+28>>2]=0;c[z>>2]=+(w&65535)/ee+te-+c[l>>2];c[z+4>>2]=+(j&65535)/ie+ne-+c[l+4>>2];c[z+8>>2]=+(S&65535)/re+v-+c[l+8>>2];c[z+16>>2]=C-+c[f>>2];c[z+20>>2]=y-+c[f+4>>2];c[z+24>>2]=g-+c[f+8>>2];g=+c[i>>2];y=G*(+c[z+((G<0&1)<<4)>>2]-g);g=G*(+c[z+((G<0^1)<<4)>>2]-g);C=+c[i+4>>2];v=E*(+c[z+((E<0&1)<<4)+4>>2]-C);C=E*(+c[z+((E<0^1)<<4)+4>>2]-C);if(!(v>g|y>C)?(B=v>y?v:y,U=C<g?C:g,F=+c[i+8>>2],A=N*(+c[z+((N<0&1)<<4)+8>>2]-F),F=N*(+c[z+((N<0^1)<<4)+8>>2]-F),!(A>U|B>F)):0){m=(F<U?F:U)>0?(A>B?A:B)<(a-H)*((a-H)*W)+((n-M)*((n-M)*W)+(_-V)*((_-V)*W)):0;if(!(T&m)){w=9;break}w=o[I>>2]|0;EP[o[(o[t>>2]|0)+8>>2]&127](t,w>>21,w&2097151);w=10;break}m=0;w=9}else{m=0;w=9}while(0);if((w|0)==9){w=0;if(T|m)w=10;else{T=o[I>>2]|0;d=d-T|0;h=h+(0-T<<4)|0}}if((w|0)==10){d=d+1|0;h=h+16|0}}while((d|0)<(u|0))}else b=0;if((o[4988]|0)>=(b|0)){p=z;return}o[4988]=b;p=z;return}function tM(e){e=e|0;var t=0;o[e>>2]=3016;if(!(n[e+8>>0]|0))return;t=o[e+12>>2]|0;if(!t)return;e=o[e+4>>2]|0;aP[o[(o[e>>2]|0)+16>>2]&127](e,t);return}function iM(e){e=e|0;var t=0,i=0;o[e>>2]=3016;if(!(n[e+8>>0]|0)){qa(e);return}t=o[e+12>>2]|0;if(!t){qa(e);return}i=o[e+4>>2]|0;aP[o[(o[i>>2]|0)+16>>2]&127](i,t);qa(e);return}function nM(e,t,i,r,_){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;var s=0,a=0,f=0,l=0,u=0;f=p;p=p+144|0;s=o[e+12>>2]|0;if(!s){p=f;return}u=o[t+4>>2]|0;l=o[i+4>>2]|0;o[_+4>>2]=s;c[f+12+128>>2]=0xde0b6b000000000;t=o[t+12>>2]|0;o[f+12>>2]=o[t>>2];o[f+12+4>>2]=o[t+4>>2];o[f+12+8>>2]=o[t+8>>2];o[f+12+12>>2]=o[t+12>>2];o[f+12+16>>2]=o[t+16>>2];o[f+12+16+4>>2]=o[t+16+4>>2];o[f+12+16+8>>2]=o[t+16+8>>2];o[f+12+16+12>>2]=o[t+16+12>>2];o[f+12+32>>2]=o[t+32>>2];o[f+12+32+4>>2]=o[t+32+4>>2];o[f+12+32+8>>2]=o[t+32+8>>2];o[f+12+32+12>>2]=o[t+32+12>>2];o[f+12+48>>2]=o[t+48>>2];o[f+12+48+4>>2]=o[t+48+4>>2];o[f+12+48+8>>2]=o[t+48+8>>2];o[f+12+48+12>>2]=o[t+48+12>>2];i=o[i+12>>2]|0;o[f+12+64>>2]=o[i>>2];o[f+12+64+4>>2]=o[i+4>>2];o[f+12+64+8>>2]=o[i+8>>2];o[f+12+64+12>>2]=o[i+12>>2];o[f+12+80>>2]=o[i+16>>2];o[f+12+80+4>>2]=o[i+16+4>>2];o[f+12+80+8>>2]=o[i+16+8>>2];o[f+12+80+12>>2]=o[i+16+12>>2];o[f+12+96>>2]=o[i+32>>2];o[f+12+96+4>>2]=o[i+32+4>>2];o[f+12+96+8>>2]=o[i+32+8>>2];o[f+12+96+12>>2]=o[i+32+12>>2];o[f+12+112>>2]=o[i+48>>2];o[f+12+112+4>>2]=o[i+48+4>>2];o[f+12+112+8>>2]=o[i+48+8>>2];o[f+12+112+12>>2]=o[i+48+12>>2];o[f>>2]=3044;o[f+4>>2]=u;o[f+8>>2]=l;CC(f,f+12|0,_,o[r+20>>2]|0,0);do if(n[e+8>>0]|0?(a=o[_+4>>2]|0,o[a+748>>2]|0):0){t=o[a+740>>2]|0;i=o[(o[_+8>>2]|0)+8>>2]|0;s=o[(o[_+12>>2]|0)+8>>2]|0;if((t|0)==(i|0)){lC(a,t+4|0,s+4|0);break}else{lC(a,s+4|0,i+4|0);break}}while(0);p=f;return}function rM(e,t,i,n,r){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;return 1}function oM(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0;i=o[e+12>>2]|0;if(!i)return;if(!(n[e+8>>0]|0))return;r=o[t+4>>2]|0;if((r|0)==(o[t+8>>2]|0)?(s=r|0?r<<1:1,(r|0)<(s|0)):0){if(!s)i=0;else{o[5637]=(o[5637]|0)+1;i=Qa((s<<2|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[t+4>>2]|0}if((r|0)>0){_=0;do{o[i+(_<<2)>>2]=o[(o[t+12>>2]|0)+(_<<2)>>2];_=_+1|0}while((_|0)!=(r|0))}_=o[t+12>>2]|0;if(_){if(n[t+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[_+-4>>2]|0);r=o[t+4>>2]|0}o[t+12>>2]=0}n[t+16>>0]=1;o[t+12>>2]=i;o[t+8>>2]=s;i=o[e+12>>2]|0}o[(o[t+12>>2]|0)+(r<<2)>>2]=i;o[t+4>>2]=r+1;return}function _M(e){e=e|0;return}function sM(e){e=e|0;qa(e);return}function aM(e,t,i,r,_,s,a,f,p,l,u,b,d){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;p=p|0;l=l|0;u=u|0;b=b|0;d=d|0;var h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0;v=te(o[p+24>>2]|0,l)|0;switch(o[t+84>>2]|0){case 4:{m=+c[u>>2];y=+c[u+4>>2];h=+c[u+8>>2];if(b|0)g=+c[a>>2]*m+ +c[a+4>>2]*y+ +c[a+8>>2]*h-(m*+c[f>>2]+y*+c[f+4>>2]+h*+c[f+8>>2]);else g=+c[_>>2]*m+ +c[_+4>>2]*y+ +c[_+8>>2]*h-(m*+c[s>>2]+y*+c[s+4>>2]+h*+c[s+8>>2]);cM(e,i,r,p,v,u,b,d);y=b|0?-1:1;h=y*(+c[p>>2]*+c[t+12>>2]*+c[t+72>>2]);l=(o[p+28>>2]|0)+(v<<2)|0;c[l>>2]=h;m=h-g*+c[t+12>>2];if(b|0){if(m>0?(C=-(g*+c[t+8>>2]),h<C):0)c[l>>2]=C}else if(m<0?(w=-(g*+c[t+8>>2]),h>w):0)c[l>>2]=w;c[(o[p+36>>2]|0)+(v<<2)>>2]=b|0?0:-3.4028234663852886e38;c[(o[p+40>>2]|0)+(v<<2)>>2]=b|0?3.4028234663852886e38:0;o[(o[p+32>>2]|0)+(v<<2)>>2]=o[t+16>>2];v=(o[p+24>>2]|0)+v|0;cM(e,i,r,p,v,u,b,d);h=y*(+c[p>>2]*+c[t+12>>2]*+c[t+76>>2]);l=(o[p+28>>2]|0)+(v<<2)|0;c[l>>2]=h;m=h-g*+c[t+12>>2];if(b|0){if(m<0?(S=-(g*+c[t+8>>2]),h>S):0)c[l>>2]=S}else if(m>0?(j=-(g*+c[t+8>>2]),h<j):0)c[l>>2]=j;c[(o[p+36>>2]|0)+(v<<2)>>2]=b|0?-3.4028234663852886e38:0;c[(o[p+40>>2]|0)+(v<<2)>>2]=b|0?0:3.4028234663852886e38;o[(o[p+32>>2]|0)+(v<<2)>>2]=o[t+16>>2];l=2;v=(o[p+24>>2]|0)+v|0;break}case 3:{cM(e,i,r,p,v,u,b,d);c[(o[p+28>>2]|0)+(v<<2)>>2]=(b|0?-1:1)*(+c[p>>2]*+c[t+12>>2]*+c[t+72>>2]);c[(o[p+36>>2]|0)+(v<<2)>>2]=-3.4028234663852886e38;c[(o[p+40>>2]|0)+(v<<2)>>2]=3.4028234663852886e38;o[(o[p+32>>2]|0)+(v<<2)>>2]=o[t+16>>2];l=1;v=(o[p+24>>2]|0)+v|0;break}default:l=0}do if(!(n[t+28>>0]|0))k=l;else{if(!(n[t+40>>0]|0)){cM(e,i,r,p,v,u,b,d);w=+c[t+32>>2];h=b|0?w:-w;m=+c[t+80>>2];y=+c[t>>2];g=+c[t+4>>2];C=+c[p>>2]*+c[t+20>>2];do if(!(y>g))if(!(y==g)){if(h/C<0)if(m>=y?y-h/C>m:0){h=(y-m)/(h/C);break}else{h=m<y?0:1;break}if(h/C>0)if(m<=g?g-h/C<m:0){h=(g-m)/(h/C);break}else{h=m>g?0:1;break}else h=0}else h=0;else h=1;while(0);c[(o[p+28>>2]|0)+(v<<2)>>2]=h*w;c[(o[p+36>>2]|0)+(v<<2)>>2]=-+c[t+36>>2];o[(o[p+40>>2]|0)+(v<<2)>>2]=o[t+36>>2];o[(o[p+32>>2]|0)+(v<<2)>>2]=o[t+24>>2];v=(o[p+24>>2]|0)+v|0;l=l+1|0;if(!(n[t+28>>0]|0)){k=l;break}if(!(n[t+40>>0]|0)){k=l;break}else{k=t+32|0;R=t+80|0}}else{k=t+32|0;R=t+80|0}m=+c[R>>2]-+c[t+44>>2];cM(e,i,r,p,v,u,b,d);C=+c[k>>2];C=m<0?-C:C;do if(m!=0){y=+c[t>>2];h=+c[t+4>>2];do if(y>h){if(m>0)h=+c[t+44>>2];else h=-3.4028234663852886e38;if(m<0){g=+c[t+44>>2];y=h}else{g=3.4028234663852886e38;y=h}}else{if(m>0?(I=+c[t+44>>2],I>y):0)y=I;if(m<0?(T=+c[t+44>>2],T<h):0){g=T;break}g=h}while(0);h=+c[R>>2];m=+c[p>>2]*+c[t+20>>2];if(!(y>g))if(!(y==g)){if(-C/m<0)if(h>=y?y- -C/m>h:0){h=(y-h)/(-C/m);break}else{h=h<y?0:1;break}if(-C/m>0)if(h<=g?g- -C/m<h:0){h=(g-h)/(-C/m);break}else{h=h>g?0:1;break}else h=0}else h=0;else h=1}else h=0;while(0);c[(o[p+28>>2]|0)+(v<<2)>>2]=(b|0?-1:1)*(C*h);c[(o[p+36>>2]|0)+(v<<2)>>2]=-+c[t+36>>2];o[(o[p+40>>2]|0)+(v<<2)>>2]=o[t+36>>2];o[(o[p+32>>2]|0)+(v<<2)>>2]=o[t+24>>2];k=l+1|0;v=(o[p+24>>2]|0)+v|0}while(0);if(!(n[t+48>>0]|0)){p=k;return p|0}S=+c[t+80>>2]-+c[t+68>>2];cM(e,i,r,p,v,u,b,d);C=1/+c[p>>2];w=+c[t+60>>2];h=+c[t+52>>2];y=+c[u>>2];g=+c[u+4>>2];m=+c[u+8>>2];if(b|0)y=+c[a>>2]*y+ +c[a+4>>2]*g+ +c[a+8>>2]*m-(y*+c[f>>2]+g*+c[f+4>>2]+m*+c[f+8>>2]);else y=+c[_>>2]*y+ +c[_+4>>2]*g+ +c[_+8>>2]*m-(y*+c[s>>2]+g*+c[s+4>>2]+m*+c[s+8>>2]);m=1/+c[(o[e+28>>2]|0)+368>>2];T=1/+c[(o[e+32>>2]|0)+368>>2];m=m>T?T:m;if((n[t+56>>0]|0)!=0?C*+X(+(h/m))>.25:0)h=1/C/C*.0625*m;j=b|0?-1:1;I=C*(j*(y*(w*C>m&(n[t+64>>0]|0)!=0?m/C:w)));T=C*(S*h)-I;c[(o[p+28>>2]|0)+(v<<2)>>2]=y+j*T;h=T<-I?T:-I;y=T<-I?-I:T;l=o[p+40>>2]|0;if(b|0){m=-h<0?0:-h;h=-y>0?0:-y}else{m=y<0?0:y;h=h>0?0:h}c[(o[p+36>>2]|0)+(v<<2)>>2]=h;c[l+(v<<2)>>2]=m;c[(o[p+32>>2]|0)+(v<<2)>>2]=0;p=k+1|0;return p|0}function cM(e,t,i,r,_,s,a,f){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;var p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0;S=o[(a|0?r+12|0:r+8|0)>>2]|0;k=o[(a|0?r+20|0:r+16|0)>>2]|0;o[S+(_<<2)>>2]=o[s>>2];o[S+(_+1<<2)>>2]=o[s+4>>2];o[S+(_+2<<2)>>2]=o[s+8>>2];c[k+(_<<2)>>2]=-+c[s>>2];c[k+(_+1<<2)>>2]=-+c[s+4>>2];c[k+(_+2<<2)>>2]=-+c[s+8>>2];if(a|0)return;u=+c[e+1348>>2]-+c[i+48>>2];p=+c[e+1352>>2]-+c[i+52>>2];l=+c[e+1356>>2]-+c[i+56>>2];C=+c[e+1284>>2]-+c[t+48>>2];w=+c[e+1288>>2]-+c[t+52>>2];m=+c[e+1292>>2]-+c[t+56>>2];y=+c[s+8>>2];v=+c[s+4>>2];g=+c[s>>2];if((f|0)!=0|(n[e+1452>>0]|0)==0){h=u*v-p*g;d=p*y-l*v;u=l*g-u*y;b=w*y-m*v;l=m*g-C*y;p=C*v-w*g}else{R=+c[e+1444>>2];b=+c[e+1448>>2];h=b*(u*v-p*g);d=b*(p*y-l*v);u=b*(l*g-u*y);b=R*(w*y-m*v);l=R*(m*g-C*y);p=R*(C*v-w*g)}S=(o[r+12>>2]|0)+(_<<2)|0;c[S>>2]=b;c[S+4>>2]=l;c[S+8>>2]=p;S=o[r+20>>2]|0;c[S+(_<<2)>>2]=-d;c[S+(_+1<<2)>>2]=-u;c[S+(_+2<<2)>>2]=-h;return}function fM(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;if(n>>>0<3)switch(t|0){case 2:{c[e+728+(n<<2)>>2]=i;o[e+1456>>2]=o[e+1456>>2]|2<<(n<<2);return}case 4:{c[e+744+(n<<2)>>2]=i;o[e+1456>>2]=o[e+1456>>2]|1<<(n<<2);return}case 1:{c[e+760+(n<<2)>>2]=i;o[e+1456>>2]=o[e+1456>>2]|8<<(n<<2);return}case 3:{c[e+776+(n<<2)>>2]=i;o[e+1456>>2]=o[e+1456>>2]|4<<(n<<2);return}default:return}if((n+-3|0)>>>0>=3)return;switch(t|0){case 2:{c[e+968+((n+-3|0)*88|0)+12>>2]=i;o[e+1456>>2]=o[e+1456>>2]|2<<(n<<2);return}case 4:{c[e+968+((n+-3|0)*88|0)+16>>2]=i;o[e+1456>>2]=o[e+1456>>2]|1<<(n<<2);return}case 1:{c[e+968+((n+-3|0)*88|0)+20>>2]=i;o[e+1456>>2]=o[e+1456>>2]|8<<(n<<2);return}case 3:{c[e+968+((n+-3|0)*88|0)+24>>2]=i;o[e+1456>>2]=o[e+1456>>2]|4<<(n<<2);return}default:return}}function pM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do if(i>>>0>=3)if((i+-3|0)>>>0<3)switch(t|0){case 2:{n=+c[e+968+((i+-3|0)*88|0)+12>>2];break e}case 4:{n=+c[e+968+((i+-3|0)*88|0)+16>>2];break e}case 1:{n=+c[e+968+((i+-3|0)*88|0)+20>>2];break e}case 3:{n=+c[e+968+((i+-3|0)*88|0)+24>>2];break e}default:{n=0;break e}}else n=0;else switch(t|0){case 2:{n=+c[e+728+(i<<2)>>2];break e}case 4:{n=+c[e+744+(i<<2)>>2];break e}case 1:{n=+c[e+760+(i<<2)>>2];break e}case 3:{n=+c[e+776+(i<<2)>>2];break e}default:{n=0;break e}}while(0);return+n}function lM(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function uM(e,t){e=e|0;t=t|0;var i=0,r=0;if(n[e+1309>>0]|0){i=(+c[e+1256>>2]-+c[e+1316>>2])*+c[e+1340>>2];c[e+792>>2]=i*(+c[t>>2]*+c[e+1364>>2]/+(o[t+48>>2]|0));i=+N(+i);c[e+808>>2]=i/+c[t>>2]}if(n[e+1310>>0]|0){i=(+c[e+1260>>2]-+c[e+1320>>2])*+c[e+1344>>2];c[e+796>>2]=i*(+c[t>>2]*+c[e+1368>>2]/+(o[t+48>>2]|0));i=+N(+i);c[e+812>>2]=i/+c[t>>2]}if(n[e+1311>>0]|0){i=(+c[e+1264>>2]-+c[e+1324>>2])*+c[e+1348>>2];c[e+800>>2]=i*(+c[t>>2]*+c[e+1372>>2]/+(o[t+48>>2]|0));i=+N(+i);c[e+816>>2]=i/+c[t>>2]}if(n[e+1312>>0]|0){r=-((+c[e+1192>>2]-+c[e+1328>>2])*+c[e+1352>>2]);i=+c[t>>2];c[e+876>>2]=i*+c[e+1376>>2]/+(o[t+48>>2]|0)*r;c[e+880>>2]=+N(+r)/i}if(n[e+1313>>0]|0){i=-((+c[e+1196>>2]-+c[e+1332>>2])*+c[e+1356>>2]);r=+c[t>>2];c[e+940>>2]=r*+c[e+1380>>2]/+(o[t+48>>2]|0)*i;c[e+944>>2]=+N(+i)/r}if(!(n[e+1314>>0]|0)){qI(e,t);return}i=-((+c[e+1200>>2]-+c[e+1336>>2])*+c[e+1360>>2]);r=+c[t>>2];c[e+1004>>2]=r*+c[e+1384>>2]/+(o[t+48>>2]|0)*i;c[e+1008>>2]=+N(+i)/r;qI(e,t);return}function bM(e){e=e|0;return 348}function dM(e,t,i){e=e|0;t=t|0;i=i|0;nT(e,t,i)|0;o[t+276>>2]=o[e+1316>>2];o[t+324>>2]=o[e+1364>>2];o[t+252>>2]=_[e+1309>>0];o[t+300>>2]=o[e+1340>>2];o[t+280>>2]=o[e+1320>>2];o[t+328>>2]=o[e+1368>>2];o[t+256>>2]=_[e+1310>>0];o[t+304>>2]=o[e+1344>>2];o[t+284>>2]=o[e+1324>>2];o[t+332>>2]=o[e+1372>>2];o[t+260>>2]=_[e+1311>>0];o[t+308>>2]=o[e+1348>>2];o[t+288>>2]=o[e+1328>>2];o[t+336>>2]=o[e+1376>>2];o[t+264>>2]=_[e+1312>>0];o[t+312>>2]=o[e+1352>>2];o[t+292>>2]=o[e+1332>>2];o[t+340>>2]=o[e+1380>>2];o[t+268>>2]=_[e+1313>>0];o[t+316>>2]=o[e+1356>>2];o[t+296>>2]=o[e+1336>>2];o[t+344>>2]=o[e+1384>>2];o[t+272>>2]=_[e+1314>>0];o[t+320>>2]=o[e+1360>>2];return 15322}function hM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0;v=+c[t>>2];g=+c[t+4>>2];y=+c[t+8>>2];m=1/+X(+(v*v+g*g+y*y));S=+c[i>>2];k=+c[i+4>>2];w=+c[i+8>>2];C=1/+X(+(S*S+k*k+w*w));I=y*m*(k*C)-g*m*(w*C);j=v*m*(w*C)-y*m*(S*C);R=g*m*(S*C)-v*m*(k*C);i=o[e+28>>2]|0;n=+c[i+4>>2];_=+c[i+20>>2];a=+c[i+36>>2];r=+c[i+8>>2];s=+c[i+24>>2];f=+c[i+40>>2];p=+c[i+12>>2];u=+c[i+28>>2];d=+c[i+44>>2];l=-+c[i+52>>2];b=-+c[i+56>>2];h=-+c[i+60>>2];c[e+48>>2]=R*a+(n*I+_*j);c[e+52>>2]=n*(S*C)+k*C*_+w*C*a;c[e+56>>2]=v*m*n+g*m*_+y*m*a;c[e+60>>2]=0;c[e+64>>2]=I*r+j*s+R*f;c[e+68>>2]=S*C*r+k*C*s+w*C*f;c[e+72>>2]=v*m*r+g*m*s+y*m*f;c[e+76>>2]=0;c[e+80>>2]=I*p+j*u+R*d;c[e+84>>2]=S*C*p+k*C*u+w*C*d;c[e+88>>2]=v*m*p+g*m*u+y*m*d;c[e+92>>2]=0;c[e+96>>2]=n*0+_*0+a*0+(n*l+_*b+a*h);c[e+100>>2]=r*0+s*0+f*0+(r*l+s*b+f*h);c[e+104>>2]=p*0+u*0+d*0+(p*l+u*b+d*h);c[e+108>>2]=0;i=o[e+32>>2]|0;h=+c[i+4>>2];d=+c[i+20>>2];b=+c[i+36>>2];u=+c[i+8>>2];l=+c[i+24>>2];p=+c[i+40>>2];f=+c[i+12>>2];s=+c[i+28>>2];r=+c[i+44>>2];a=-+c[i+52>>2];_=-+c[i+56>>2];n=-+c[i+60>>2];c[e+112>>2]=I*h+j*d+R*b;c[e+116>>2]=S*C*h+k*C*d+w*C*b;c[e+120>>2]=v*m*h+g*m*d+y*m*b;c[e+124>>2]=0;c[e+128>>2]=I*u+j*l+R*p;c[e+132>>2]=S*C*u+k*C*l+w*C*p;c[e+136>>2]=v*m*u+g*m*l+y*m*p;c[e+140>>2]=0;c[e+144>>2]=I*f+j*s+R*r;c[e+148>>2]=S*C*f+k*C*s+w*C*r;c[e+152>>2]=v*m*f+g*m*s+y*m*r;c[e+156>>2]=0;c[e+160>>2]=h*0+d*0+b*0+(h*a+d*_+b*n);c[e+164>>2]=u*0+l*0+p*0+(u*a+l*_+p*n);c[e+168>>2]=f*0+s*0+r*0+(f*a+s*_+r*n);c[e+172>>2]=0;zI(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);return}function mM(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function yM(e){e=e|0;var t=0,i=0,r=0,_=0,s=0,a=0,f=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0;w=p;p=p+176|0;if(!(n[e+738>>0]|0)){p=w;return}c[e+36>>2]=0;c[e+744>>2]=0;if(!(n[e+736>>0]|0)){i=o[e+28>>2]|0;f=+c[e+600>>2];l=+c[e+604>>2];m=+c[e+608>>2];g=f*+c[i+20>>2]+l*+c[i+24>>2]+m*+c[i+28>>2]+ +c[i+56>>2];r=o[e+32>>2]|0;u=+c[e+664>>2];b=+c[e+668>>2];y=+c[e+672>>2];d=+c[r+52>>2];t=+c[r+56>>2];v=u*+c[r+20>>2]+b*+c[r+24>>2]+y*+c[r+28>>2]+t;C=u*+c[r+36>>2]+b*+c[r+40>>2]+y*+c[r+44>>2]+ +c[r+60>>2];h=f*+c[i+4>>2]+l*+c[i+8>>2]+m*+c[i+12>>2]+ +c[i+52>>2];m=f*+c[i+36>>2]+l*+c[i+40>>2]+m*+c[i+44>>2]+ +c[i+60>>2];y=u*+c[r+4>>2]+b*+c[r+8>>2]+y*+c[r+12>>2]+d;if((y-h)*(y-h)+(v-g)*(v-g)+(C-m)*(C-m)>1.1920928955078125e-7){s=1/+X(+((y-h)*(y-h)+(v-g)*(v-g)+(C-m)*(C-m)));c[w+128>>2]=(y-h)*s;c[w+128+4>>2]=(v-g)*s;c[w+128+8>>2]=(C-m)*s;o[w+128+12>>2]=0;u=(C-m)*s;_=(v-g)*s;s=(y-h)*s}else{o[w+128>>2]=1065353216;o[w+128+4>>2]=0;o[w+128+8>>2]=0;c[w+128+12>>2]=0;u=0;_=0;s=1}if(+N(+u)>.7071067690849304){S=u*u+_*_;k=1/+X(+S);f=-(k*u);u=k*_;b=-(u*s);a=s*f;l=0;_=S*k;s=u}else{f=s*s+_*_;a=1/+X(+f);l=-(_*a);_=a*s;b=u*l;a=f*a;f=_;_=-(_*u);s=0}c[w+128+16>>2]=l;c[w+128+20>>2]=f;c[w+128+24>>2]=s;c[w+128+32>>2]=_;c[w+128+36>>2]=b;c[w+128+40>>2]=a;_=d;i=0;while(1){R=o[e+28>>2]|0;o[w+80>>2]=o[R+4>>2];o[w+80+4>>2]=o[R+20>>2];o[w+80+8>>2]=o[R+36>>2];c[w+80+12>>2]=0;o[w+80+16>>2]=o[R+8>>2];o[w+80+20>>2]=o[R+24>>2];o[w+80+24>>2]=o[R+40>>2];c[w+80+28>>2]=0;o[w+80+32>>2]=o[R+12>>2];o[w+80+36>>2]=o[R+28>>2];o[w+80+40>>2]=o[R+44>>2];c[w+80+44>>2]=0;o[w+32>>2]=o[r+4>>2];o[w+32+4>>2]=o[r+20>>2];o[w+32+8>>2]=o[r+36>>2];c[w+32+12>>2]=0;o[w+32+16>>2]=o[r+8>>2];o[w+32+20>>2]=o[r+24>>2];o[w+32+24>>2]=o[r+40>>2];c[w+32+28>>2]=0;o[w+32+32>>2]=o[r+12>>2];o[w+32+36>>2]=o[r+28>>2];o[w+32+40>>2]=o[r+44>>2];c[w+32+44>>2]=0;k=g-+c[R+56>>2];S=m-+c[R+60>>2];c[w+16>>2]=h-+c[R+52>>2];c[w+16+4>>2]=k;c[w+16+8>>2]=S;c[w+16+12>>2]=0;S=C-+c[r+60>>2];c[w>>2]=y-_;c[w+4>>2]=v-t;c[w+8>>2]=S;c[w+12>>2]=0;R=o[e+28>>2]|0;r=o[e+32>>2]|0;TI(e+48+(i*84|0)|0,w+80|0,w+32|0,w+16|0,w,w+128+(i<<4)|0,R+420|0,+c[R+368>>2],r+420|0,+c[r+368>>2]);i=i+1|0;if((i|0)==3)break;R=o[e+32>>2]|0;r=R;_=+c[R+52>>2];t=+c[R+56>>2]}}_=+c[e+560>>2];s=+c[e+576>>2];a=+c[e+592>>2];if(+N(+a)>.7071067690849304){d=1/+X(+(a*a+s*s));t=_*-(a*d);f=0;l=s*d;u=-(a*d);b=(a*a+s*s)*d;d=-(_*(s*d))}else{d=1/+X(+(_*_+s*s));t=(_*_+s*s)*d;f=-(s*d);l=0;u=_*d;b=-(a*(_*d));d=a*-(s*d)}r=o[e+28>>2]|0;P=+c[r+4>>2];M=+c[r+8>>2];v=+c[r+12>>2];V=f*P+u*M+l*v;x=+c[r+20>>2];L=+c[r+24>>2];k=+c[r+28>>2];Z=f*x+u*L+l*k;O=+c[r+36>>2];y=+c[r+40>>2];T=+c[r+44>>2];Y=f*O+u*y+l*T;I=b*P+d*M+t*v;B=b*x+d*L+t*k;A=b*O+d*y+t*T;i=o[e+32>>2]|0;j=+c[i+4>>2];f=+c[i+20>>2];l=+c[i+36>>2];h=+c[i+8>>2];m=+c[i+24>>2];C=+c[i+40>>2];G=+c[i+12>>2];H=+c[i+28>>2];z=+c[i+44>>2];o[e+300>>2]=0;o[e+300+4>>2]=0;o[e+300+8>>2]=0;o[e+300+12>>2]=0;c[e+316>>2]=V*P+Z*x+Y*O;c[e+320>>2]=V*M+Z*L+Y*y;c[e+324>>2]=V*v+Z*k+Y*T;c[e+328>>2]=0;c[e+332>>2]=j*-V+f*-Z+l*-Y;c[e+336>>2]=h*-V+m*-Z+C*-Y;c[e+340>>2]=G*-V+H*-Z+z*-Y;c[e+344>>2]=0;D=(V*P+Z*x+Y*O)*+c[r+420>>2];W=(V*M+Z*L+Y*y)*+c[r+424>>2];t=(V*v+Z*k+Y*T)*+c[r+428>>2];c[e+348>>2]=D;c[e+352>>2]=W;c[e+356>>2]=t;c[e+360>>2]=0;d=(j*-V+f*-Z+l*-Y)*+c[i+420>>2];S=(h*-V+m*-Z+C*-Y)*+c[i+424>>2];K=(G*-V+H*-Z+z*-Y)*+c[i+428>>2];c[e+364>>2]=d;c[e+368>>2]=S;c[e+372>>2]=K;c[e+376>>2]=0;c[e+380>>2]=(V*P+Z*x+Y*O)*D+(V*M+Z*L+Y*y)*W+(V*v+Z*k+Y*T)*t+((j*-V+f*-Z+l*-Y)*d+(h*-V+m*-Z+C*-Y)*S+(G*-V+H*-Z+z*-Y)*K);i=o[e+28>>2]|0;K=+c[i+4>>2];Y=+c[i+20>>2];z=+c[i+36>>2];Z=+c[i+8>>2];H=+c[i+24>>2];V=+c[i+40>>2];G=+c[i+12>>2];S=+c[i+28>>2];C=+c[i+44>>2];r=o[e+32>>2]|0;m=+c[r+4>>2];h=+c[r+20>>2];d=+c[r+36>>2];l=+c[r+8>>2];f=+c[r+24>>2];j=+c[r+40>>2];t=+c[r+12>>2];W=+c[r+28>>2];D=+c[r+44>>2];o[e+384>>2]=0;o[e+384+4>>2]=0;o[e+384+8>>2]=0;o[e+384+12>>2]=0;c[e+400>>2]=I*K+B*Y+A*z;c[e+404>>2]=I*Z+B*H+A*V;c[e+408>>2]=I*G+B*S+A*C;c[e+412>>2]=0;c[e+416>>2]=m*-I+h*-B+d*-A;c[e+420>>2]=l*-I+f*-B+j*-A;c[e+424>>2]=t*-I+W*-B+D*-A;c[e+428>>2]=0;U=(I*K+B*Y+A*z)*+c[i+420>>2];E=(I*Z+B*H+A*V)*+c[i+424>>2];g=(I*G+B*S+A*C)*+c[i+428>>2];c[e+432>>2]=U;c[e+436>>2]=E;c[e+440>>2]=g;c[e+444>>2]=0;u=(m*-I+h*-B+d*-A)*+c[r+420>>2];b=(l*-I+f*-B+j*-A)*+c[r+424>>2];F=(t*-I+W*-B+D*-A)*+c[r+428>>2];c[e+448>>2]=u;c[e+452>>2]=b;c[e+456>>2]=F;c[e+460>>2]=0;c[e+464>>2]=(I*K+B*Y+A*z)*U+(I*Z+B*H+A*V)*E+(I*G+B*S+A*C)*g+((m*-I+h*-B+d*-A)*u+(l*-I+f*-B+j*-A)*b+(t*-I+W*-B+D*-A)*F);r=o[e+28>>2]|0;F=+c[r+4>>2];A=+c[r+20>>2];D=+c[r+36>>2];B=+c[r+8>>2];W=+c[r+24>>2];I=+c[r+40>>2];t=+c[r+12>>2];b=+c[r+28>>2];j=+c[r+44>>2];i=o[e+32>>2]|0;f=+c[i+4>>2];l=+c[i+20>>2];u=+c[i+36>>2];d=+c[i+8>>2];h=+c[i+24>>2];m=+c[i+40>>2];g=+c[i+12>>2];C=+c[i+28>>2];S=+c[i+44>>2];o[e+468>>2]=0;o[e+468+4>>2]=0;o[e+468+8>>2]=0;o[e+468+12>>2]=0;D=(P*_+M*s+v*a)*F+(x*_+L*s+k*a)*A+(O*_+y*s+T*a)*D;I=(P*_+M*s+v*a)*B+(x*_+L*s+k*a)*W+(O*_+y*s+T*a)*I;j=(P*_+M*s+v*a)*t+(x*_+L*s+k*a)*b+(O*_+y*s+T*a)*j;c[e+484>>2]=D;c[e+488>>2]=I;c[e+492>>2]=j;c[e+496>>2]=0;v=-(P*_+M*s+v*a);k=-(x*_+L*s+k*a);_=-(O*_+y*s+T*a);c[e+500>>2]=f*v+l*k+u*_;c[e+504>>2]=d*v+h*k+m*_;c[e+508>>2]=g*v+C*k+S*_;c[e+512>>2]=0;T=D*+c[r+420>>2];s=I*+c[r+424>>2];a=j*+c[r+428>>2];c[e+516>>2]=T;c[e+520>>2]=s;c[e+524>>2]=a;c[e+528>>2]=0;b=(f*v+l*k+u*_)*+c[i+420>>2];y=(d*v+h*k+m*_)*+c[i+424>>2];t=(g*v+C*k+S*_)*+c[i+428>>2];c[e+532>>2]=b;c[e+536>>2]=y;c[e+540>>2]=t;c[e+544>>2]=0;c[e+548>>2]=D*T+I*s+j*a+((f*v+l*k+u*_)*b+(d*v+h*k+m*_)*y+(g*v+C*k+S*_)*t);c[e+724>>2]=0;i=o[e+28>>2]|0;r=o[e+32>>2]|0;t=+gM(e,i+4|0,r+4|0);c[e+728>>2]=t;c[e+708>>2]=0;c[e+712>>2]=0;n[e+716>>0]=0;_=+c[e+692>>2];do if(_>=0){t=+Ya(t-+c[e+688>>2]);if(!(t<-3.1415927410125732)){if(t>3.1415927410125732)t=t+-6.2831854820251465}else t=t+6.2831854820251465;if(t<-_){n[e+716>>0]=1;c[e+708>>2]=-(t+_);c[e+712>>2]=1;break}if(t>_){n[e+716>>0]=1;c[e+708>>2]=_-t;c[e+712>>2]=-1}}while(0);Z=+c[e+560>>2];U=+c[e+576>>2];K=+c[e+592>>2];z=Z*+c[i+4>>2]+U*+c[i+8>>2]+K*+c[i+12>>2];Y=Z*+c[i+20>>2]+U*+c[i+24>>2]+K*+c[i+28>>2];K=Z*+c[i+36>>2]+U*+c[i+40>>2]+K*+c[i+44>>2];c[e+720>>2]=1/(z*(z*+c[i+288>>2]+Y*+c[i+304>>2]+K*+c[i+320>>2])+Y*(z*+c[i+292>>2]+Y*+c[i+308>>2]+K*+c[i+324>>2])+K*(z*+c[i+296>>2]+Y*+c[i+312>>2]+K*+c[i+328>>2])+(z*(z*+c[r+288>>2]+Y*+c[r+304>>2]+K*+c[r+320>>2])+Y*(z*+c[r+292>>2]+Y*+c[r+308>>2]+K*+c[r+324>>2])+K*(z*+c[r+296>>2]+Y*+c[r+312>>2]+K*+c[r+328>>2])));p=w;return}function gM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,o=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0;C=+c[e+552>>2];v=+c[e+568>>2];g=+c[e+584>>2];y=+c[t>>2];m=+c[t+4>>2];h=+c[t+8>>2];b=+c[t+16>>2];u=+c[t+20>>2];l=+c[t+24>>2];f=+c[t+32>>2];s=+c[t+36>>2];o=+c[t+40>>2];a=+c[e+556>>2];_=+c[e+572>>2];r=+c[e+588>>2];k=+c[e+620>>2];w=+c[e+636>>2];n=+c[e+652>>2];d=k*+c[i>>2]+w*+c[i+4>>2]+n*+c[i+8>>2];p=k*+c[i+16>>2]+w*+c[i+20>>2]+n*+c[i+24>>2];n=k*+c[i+32>>2]+w*+c[i+36>>2]+n*+c[i+40>>2];n=+q(+((C*y+v*m+g*h)*d+(C*b+v*u+g*l)*p+(C*f+v*s+g*o)*n),+((y*a+m*_+h*r)*d+(b*a+u*_+l*r)*p+(f*a+s*_+o*r)*n));return+(n*+c[e+732>>2])}function vM(e,t){e=e|0;t=t|0;var i=0,r=0,_=0;if(n[e+738>>0]|0){o[t>>2]=0;o[t+4>>2]=0;return}o[t>>2]=5;o[t+4>>2]=1;i=+gM(e,(o[e+28>>2]|0)+4|0,(o[e+32>>2]|0)+4|0);c[e+728>>2]=i;c[e+708>>2]=0;c[e+712>>2]=0;n[e+716>>0]=0;r=+c[e+692>>2];do if(r>=0){i=+Ya(i-+c[e+688>>2]);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;if(i<-r){n[e+716>>0]=1;c[e+708>>2]=-(i+r);c[e+712>>2]=1;break}if(i>r){n[e+716>>0]=1;c[e+708>>2]=r-i;c[e+712>>2]=-1}else _=12}else _=12;while(0);if((_|0)==12?(n[e+737>>0]|0)==0:0)return;o[t>>2]=6;o[t+4>>2]=0;return}function CM(e,t){e=e|0;t=t|0;var i=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0,oe=0,_e=0,se=0,ae=0,ce=0,fe=0,pe=0,le=0,ue=0,be=0,de=0,he=0,me=0,ye=0;me=o[e+28>>2]|0;ye=o[e+32>>2]|0;y=o[t+24>>2]|0;if(!(n[e+739>>0]|0)){j=+c[e+552>>2];z=+c[me+4>>2];I=+c[e+568>>2];Y=+c[me+8>>2];T=+c[e+584>>2];K=+c[me+12>>2];D=+c[e+556>>2];O=+c[e+572>>2];L=+c[e+588>>2];Q=+c[e+560>>2];q=+c[e+576>>2];J=+c[e+592>>2];$=+c[me+20>>2];ee=+c[me+24>>2];te=+c[me+28>>2];ie=+c[me+36>>2];ne=+c[me+40>>2];re=+c[me+44>>2];l=+c[e+600>>2];b=+c[e+604>>2];m=+c[e+608>>2];v=+c[me+52>>2];C=+c[me+56>>2];w=+c[me+60>>2];x=+c[ye+4>>2];M=+c[ye+8>>2];P=+c[ye+12>>2];W=+c[e+624>>2];B=+c[e+640>>2];A=+c[e+656>>2];F=+c[ye+20>>2];G=+c[ye+24>>2];E=+c[ye+28>>2];V=+c[ye+36>>2];N=+c[ye+40>>2];H=+c[ye+44>>2];de=+c[e+664>>2];he=+c[e+668>>2];R=+c[e+672>>2];k=+c[ye+52>>2]+(x*de+M*he+P*R);S=F*de+G*he+E*R+ +c[ye+56>>2];R=V*de+N*he+H*R+ +c[ye+60>>2];Z=r[e+736>>1]|0;if(!((Z&255)<<24>>24)){s=o[t+8>>2]|0;c[s>>2]=1;c[s+(y+1<<2)>>2]=1;c[s+((y<<1)+2<<2)>>2]=1;s=o[t+16>>2]|0;c[s>>2]=-1;c[s+(y+1<<2)>>2]=-1;c[s+((y<<1)+2<<2)>>2]=-1;s=y<<1;i=+c[me+52>>2];_=+c[me+56>>2];f=+c[me+60>>2]}else{s=y<<1;i=v;_=C;f=w}p=v+(z*l+Y*b+K*m)-i;i=$*l+ee*b+te*m+C-_;he=ie*l+ne*b+re*m+w-f;u=o[t+12>>2]|0;h=u+(s<<2)|0;o[u>>2]=0;c[u+4>>2]=he;c[u+8>>2]=-i;c[u+12>>2]=0;c[u+(y<<2)>>2]=-he;o[u+(y<<2)+4>>2]=0;c[u+(y<<2)+8>>2]=p;c[u+(y<<2)+12>>2]=0;c[h>>2]=i;c[h+4>>2]=-p;o[h+8>>2]=0;c[h+12>>2]=0;p=k-+c[ye+52>>2];i=S-+c[ye+56>>2];he=R-+c[ye+60>>2];h=o[t+20>>2]|0;U=h+(s<<2)|0;o[h>>2]=0;c[h+4>>2]=-he;c[h+8>>2]=i;c[h+12>>2]=0;c[h+(y<<2)>>2]=he;o[h+(y<<2)+4>>2]=0;c[h+(y<<2)+8>>2]=-p;c[h+(y<<2)+12>>2]=0;c[U>>2]=-i;c[U+4>>2]=p;o[U+8>>2]=0;c[U+12>>2]=0;U=o[e+748>>2]|0;p=+c[((U&8|0)==0?t+4|0:e+756|0)>>2];i=p*+c[t>>2];g=o[t+28>>2]|0;if(!((Z&255)<<24>>24)){c[g>>2]=i*(k-(v+(z*l+Y*b+K*m)));c[g+(y<<2)>>2]=i*(S-($*l+ee*b+te*m+C));c[g+(y<<1<<2)>>2]=i*(R-(ie*l+ne*b+re*m+w))}y=o[t+24>>2]|0;c[u+(y*3<<2)>>2]=j*z+I*Y+T*K;c[u+((y*3|0)+1<<2)>>2]=j*$+I*ee+T*te;c[u+((y*3|0)+2<<2)>>2]=j*ie+I*ne+T*re;c[u+(y<<2<<2)>>2]=z*D+Y*O+K*L;c[u+((y<<2|1)<<2)>>2]=D*$+O*ee+L*te;c[u+((y<<2|2)<<2)>>2]=D*ie+O*ne+L*re;c[h+(y*3<<2)>>2]=-(j*z+I*Y+T*K);c[h+((y*3|0)+1<<2)>>2]=-(j*$+I*ee+T*te);c[h+((y*3|0)+2<<2)>>2]=-(j*ie+I*ne+T*re);c[h+(y<<2<<2)>>2]=-(z*D+Y*O+K*L);c[h+((y<<2|1)<<2)>>2]=-(D*$+O*ee+L*te);c[h+((y<<2|2)<<2)>>2]=-(D*ie+O*ne+L*re);de=(Q*$+q*ee+J*te)*(W*V+B*N+A*H)-(Q*ie+q*ne+J*re)*(W*F+B*G+A*E);he=(Q*ie+q*ne+J*re)*(x*W+M*B+P*A)-(z*Q+Y*q+K*J)*(W*V+B*N+A*H);be=(z*Q+Y*q+K*J)*(W*F+B*G+A*E)-(Q*$+q*ee+J*te)*(x*W+M*B+P*A);c[g+(y*3<<2)>>2]=((j*ie+I*ne+T*re)*be+((j*z+I*Y+T*K)*de+(j*$+I*ee+T*te)*he))*i;c[g+(y<<2<<2)>>2]=((D*ie+O*ne+L*re)*be+((z*D+Y*O+K*L)*de+(D*$+O*ee+L*te)*he))*i;if(!(n[e+716>>0]|0)){d=0;m=0}else{m=+c[e+708>>2]*+c[e+732>>2];d=m>0?1:2}a=(d|0)!=0;if(!((Z&65535)>>>8&65535|d))return;c[u+(y*5<<2)>>2]=z*Q+Y*q+K*J;c[u+((y*5|0)+1<<2)>>2]=Q*$+q*ee+J*te;c[u+((y*5|0)+2<<2)>>2]=Q*ie+q*ne+J*re;c[h+(y*5<<2)>>2]=-(z*Q+Y*q+K*J);c[h+((y*5|0)+1<<2)>>2]=-(Q*$+q*ee+J*te);c[h+((y*5|0)+2<<2)>>2]=-(Q*ie+q*ne+J*re);_=+c[e+688>>2];f=+c[e+692>>2];i=+Ya(_-f);if(!(i<-3.1415927410125732))if(i>3.1415927410125732)b=i+-6.2831854820251465;else b=i;else b=i+6.2831854820251465;i=+Ya(_+f);if(!(i<-3.1415927410125732))if(i>3.1415927410125732)l=i+-6.2831854820251465;else l=i;else l=i+6.2831854820251465;s=b==l;u=g+(y*5<<2)|0;c[u>>2]=0;if(U&2)p=+c[e+764>>2];if(!((Z&65535)>>>8<<16>>16==0|a&s)){if(U&4|0)o[(o[t+32>>2]|0)+(y*5<<2)>>2]=o[e+752>>2];_=+c[e+728>>2];f=+c[e+680>>2];i=b>l?1:0;do if(!(b>=l)){i=f/(p*+c[t>>2]);if(i<0)if(_>=b&b-i>_){i=(b-_)/i;break}else{i=_<b?0:1;break}if(i>0)if(_<=l&l-i<_){i=(l-_)/i;break}else{i=_>l?0:1;break}else i=0}while(0);c[u>>2]=i*f*+c[e+732>>2]+ +c[u>>2];c[(o[t+36>>2]|0)+(y*5<<2)>>2]=-+c[e+684>>2];o[(o[t+40>>2]|0)+(y*5<<2)>>2]=o[e+684>>2]}if(!a)return;c[u>>2]=+c[u>>2]+m*(p*+c[t>>2]);if(U&1|0)o[(o[t+32>>2]|0)+(y*5<<2)>>2]=o[e+760>>2];do if(!s){a=(o[t+36>>2]|0)+(y*5<<2)|0;s=o[t+40>>2]|0;if((d|0)==1){c[a>>2]=0;c[s+(y*5<<2)>>2]=3.4028234663852886e38;break}else{c[a>>2]=-3.4028234663852886e38;c[s+(y*5<<2)>>2]=0;break}}else{c[(o[t+36>>2]|0)+(y*5<<2)>>2]=-3.4028234663852886e38;c[(o[t+40>>2]|0)+(y*5<<2)>>2]=3.4028234663852886e38}while(0);_=+c[e+704>>2];do if(_>0){i=(z*Q+Y*q+K*J)*+c[me+352>>2]+(Q*$+q*ee+J*te)*+c[me+356>>2]+(Q*ie+q*ne+J*re)*+c[me+360>>2]-((z*Q+Y*q+K*J)*+c[ye+352>>2]+(Q*$+q*ee+J*te)*+c[ye+356>>2]+(Q*ie+q*ne+J*re)*+c[ye+360>>2]);if((d|0)==1){if(!(i<0))break;if(!(+c[u>>2]<-(_*i)))break;c[u>>2]=-(_*i);break}else{if(!(i>0))break;if(!(+c[u>>2]>-(_*i)))break;c[u>>2]=-(_*i);break}}while(0);c[u>>2]=+c[e+700>>2]*+c[u>>2];return}Q=+c[me+4>>2];q=+c[me+8>>2];J=+c[me+12>>2];v=+c[e+556>>2];k=+c[e+572>>2];R=+c[e+588>>2];$=+c[e+560>>2];ee=+c[e+576>>2];te=+c[e+592>>2];ie=+c[me+20>>2];ne=+c[me+24>>2];re=+c[me+28>>2];oe=+c[me+36>>2];_e=+c[me+40>>2];se=+c[me+44>>2];ce=+c[e+600>>2];ae=+c[e+604>>2];b=+c[e+608>>2];_=+c[me+52>>2]+(Q*ce+q*ae+J*b);w=ie*ce+ne*ae+re*b+ +c[me+56>>2];b=oe*ce+_e*ae+se*b+ +c[me+60>>2];ae=+c[ye+4>>2];ce=+c[ye+8>>2];fe=+c[ye+12>>2];pe=+c[e+624>>2];le=+c[e+640>>2];E=+c[e+656>>2];V=+c[ye+20>>2];N=+c[ye+24>>2];H=+c[ye+28>>2];z=+c[ye+36>>2];Y=+c[ye+40>>2];K=+c[ye+44>>2];m=+c[e+664>>2];S=+c[e+668>>2];f=+c[e+672>>2];i=+c[ye+52>>2];\nC=+c[ye+56>>2];l=+c[ye+60>>2];W=i+(ae*m+ce*S+fe*f)-_;B=V*m+N*S+H*f+C-w;A=z*m+Y*S+K*f+l-b;j=+c[(o[e+28>>2]|0)+368>>2];I=+c[(o[e+32>>2]|0)+368>>2];P=j+I>0?I/(j+I):.5;ue=(Q*$+q*ee+J*te)*P+(ae*pe+ce*le+fe*E)*(1-P);be=($*ie+ee*ne+te*re)*P+(pe*V+le*N+E*H)*(1-P);de=($*oe+ee*_e+te*se)*P+(pe*z+le*Y+E*K)*(1-P);he=1/+X(+(ue*ue+be*be+de*de));T=(i+(ae*m+ce*S+fe*f)-i)*(ue*he)+(V*m+N*S+H*f+C-C)*(be*he)+(z*m+Y*S+K*f+l-l)*(de*he);i=i+(ae*m+ce*S+fe*f)-i-ue*he*T;C=V*m+N*S+H*f+C-C-be*he*T;l=z*m+Y*S+K*f+l-l-de*he*T;_=_-+c[me+52>>2];w=w-+c[me+56>>2];b=b-+c[me+60>>2];f=ue*he*(_*(ue*he)+w*(be*he)+b*(de*he));S=be*he*(_*(ue*he)+w*(be*he)+b*(de*he));m=de*he*(_*(ue*he)+w*(be*he)+b*(de*he));x=_-f+P*(f-ue*he*T);M=w-S+P*(S-be*he*T);L=b-m+P*(m-de*he*T);D=i-(1-P)*(f-ue*he*T);O=C-(1-P)*(S-be*he*T);T=l-(1-P)*(m-de*he*T);p=(P*i+(1-P)*(_-f))*(P*i+(1-P)*(_-f))+(P*C+(1-P)*(w-S))*(P*C+(1-P)*(w-S))+(P*l+(1-P)*(b-m))*(P*l+(1-P)*(b-m));if(p>1.1920928955078125e-7){R=1/+X(+p);G=(P*i+(1-P)*(_-f))*R;F=R*(P*l+(1-P)*(b-m));w=R*(P*C+(1-P)*(w-S))}else{G=Q*v+q*k+J*R;F=v*oe+k*_e+R*se;w=v*ie+k*ne+R*re}m=be*he*F-de*he*w;v=de*he*G-F*(ue*he);C=w*(ue*he)-be*he*G;U=o[t+12>>2]|0;c[U>>2]=M*F-L*w;c[U+4>>2]=L*G-x*F;c[U+8>>2]=x*w-M*G;U=o[t+20>>2]|0;c[U>>2]=-(O*F-T*w);c[U+4>>2]=-(T*G-D*F);c[U+8>>2]=-(D*w-O*G);if(j<1.1920928955078125e-7|I<1.1920928955078125e-7?(n[e+716>>0]|0)!=0:0){i=(1-P)*(O*C-T*v);_=(1-P)*(T*m-D*C);f=(1-P)*(D*v-O*m);p=P*(M*C-L*v);l=P*(L*m-x*C);b=P*(x*v-M*m)}else{i=O*C-T*v;_=T*m-D*C;f=D*v-O*m;p=M*C-L*v;l=L*m-x*C;b=x*v-M*m}U=(o[t+12>>2]|0)+(y<<2)|0;c[U>>2]=p;c[U+4>>2]=l;c[U+8>>2]=b;U=o[t+20>>2]|0;c[U+(y<<2)>>2]=-i;c[U+(y+1<<2)>>2]=-_;c[U+(y+2<<2)>>2]=-f;if(j<1.1920928955078125e-7|I<1.1920928955078125e-7){b=(1-P)*(O*(de*he)-T*(be*he));l=(1-P)*(T*(ue*he)-D*(de*he));p=(1-P)*(D*(be*he)-O*(ue*he));f=P*(M*(de*he)-L*(be*he));_=P*(L*(ue*he)-x*(de*he));i=P*(x*(be*he)-M*(ue*he))}else{b=O*(de*he)-T*(be*he);l=T*(ue*he)-D*(de*he);p=D*(be*he)-O*(ue*he);f=M*(de*he)-L*(be*he);_=L*(ue*he)-x*(de*he);i=x*(be*he)-M*(ue*he)}s=(o[t+12>>2]|0)+(y<<1<<2)|0;c[s>>2]=f;c[s+4>>2]=_;c[s+8>>2]=i;s=o[t+20>>2]|0;c[s+(y<<1<<2)>>2]=-b;c[s+((y<<1|1)<<2)>>2]=-l;c[s+((y<<1)+2<<2)>>2]=-p;l=+c[((o[e+748>>2]&8|0)==0?t+4|0:e+756|0)>>2];i=l*+c[t>>2];if(!(n[e+736>>0]|0)){d=o[t+8>>2]|0;c[d>>2]=G;c[d+4>>2]=w;c[d+8>>2]=F;d=(o[t+8>>2]|0)+(y<<2)|0;c[d>>2]=m;c[d+4>>2]=v;c[d+8>>2]=C;d=(o[t+8>>2]|0)+(y<<1<<2)|0;c[d>>2]=ue*he;c[d+4>>2]=be*he;c[d+8>>2]=de*he;d=o[t+16>>2]|0;_=-G;c[d>>2]=_;c[d+4>>2]=-w;c[d+8>>2]=-F;d=o[t+16>>2]|0;c[d+(y<<2)>>2]=-m;c[d+(y+1<<2)>>2]=-v;c[d+(y+2<<2)>>2]=-C;d=o[t+16>>2]|0;c[d+(y<<1<<2)>>2]=-(ue*he);c[d+((y<<1|1)<<2)>>2]=-(be*he);c[d+((y<<1)+2<<2)>>2]=-(de*he);d=o[t+28>>2]|0;c[d>>2]=i*(W*G+B*w+A*F);c[d+(y<<2)>>2]=i*(W*m+B*v+A*C);c[d+(y<<1<<2)>>2]=i*(W*(ue*he)+B*(be*he)+A*(de*he));i=_;_=-m;f=-v;p=-C;s=o[t+20>>2]|0}else{i=-G;_=-m;f=-v;p=-C;d=o[t+28>>2]|0}a=o[t+12>>2]|0;c[a+(y*3<<2)>>2]=G;c[a+((y*3|0)+1<<2)>>2]=w;c[a+((y*3|0)+2<<2)>>2]=F;c[a+(y<<2<<2)>>2]=m;c[a+((y<<2|1)<<2)>>2]=v;c[a+((y<<2|2)<<2)>>2]=C;c[s+(y*3<<2)>>2]=i;c[s+((y*3|0)+1<<2)>>2]=-w;c[s+((y*3|0)+2<<2)>>2]=-F;c[s+(y<<2<<2)>>2]=_;c[s+((y<<2|1)<<2)>>2]=f;c[s+((y<<2|2)<<2)>>2]=p;B=l*+c[t>>2];A=($*ie+ee*ne+te*re)*(pe*z+le*Y+E*K)-($*oe+ee*_e+te*se)*(pe*V+le*N+E*H);se=($*oe+ee*_e+te*se)*(ae*pe+ce*le+fe*E)-(Q*$+q*ee+J*te)*(pe*z+le*Y+E*K);le=(Q*$+q*ee+J*te)*(pe*V+le*N+E*H)-($*ie+ee*ne+te*re)*(ae*pe+ce*le+fe*E);c[d+(y*3<<2)>>2]=B*(A*G+se*w+le*F);c[d+(y<<2<<2)>>2]=B*(A*m+se*v+le*C);if(!(n[e+716>>0]|0)){g=0;m=0}else{m=+c[e+708>>2]*+c[e+732>>2];g=m>0?1:2}u=n[e+737>>0]|0;h=(g|0)!=0;if(!(u&255|g))return;y=(o[t+24>>2]|0)*5|0;c[a+(y<<2)>>2]=ue*he;c[a+(y+1<<2)>>2]=be*he;c[a+(y+2<<2)>>2]=de*he;c[s+(y<<2)>>2]=-(ue*he);c[s+(y+1<<2)>>2]=-(be*he);c[s+(y+2<<2)>>2]=-(de*he);_=+c[e+688>>2];f=+c[e+692>>2];i=+Ya(_-f);if(!(i<-3.1415927410125732))if(i>3.1415927410125732)b=i+-6.2831854820251465;else b=i;else b=i+6.2831854820251465;i=+Ya(_+f);if(!(i<-3.1415927410125732)){if(i>3.1415927410125732)i=i+-6.2831854820251465}else i=i+6.2831854820251465;a=b==i;d=d+(y<<2)|0;c[d>>2]=0;s=o[e+748>>2]|0;if(s&2)l=+c[e+764>>2];if(!(u<<24>>24==0|h&a)){if(s&4|0)o[(o[t+32>>2]|0)+(y<<2)>>2]=o[e+752>>2];f=+c[e+728>>2];p=+c[e+680>>2];_=b>i?1:0;do if(!(b>=i)){_=p/(l*+c[t>>2]);if(_<0)if(f>=b&b-_>f){i=(b-f)/_;break}else{i=f<b?0:1;break}if(_>0)if(f<=i&i-_<f){i=(i-f)/_;break}else{i=f>i?0:1;break}else i=0}else i=_;while(0);c[d>>2]=i*p*+c[e+732>>2]+ +c[d>>2];c[(o[t+36>>2]|0)+(y<<2)>>2]=-+c[e+684>>2];o[(o[t+40>>2]|0)+(y<<2)>>2]=o[e+684>>2]}if(!h)return;c[d>>2]=+c[d>>2]+m*(l*+c[t>>2]);if(s&1|0)o[(o[t+32>>2]|0)+(y<<2)>>2]=o[e+760>>2];do if(!a){a=(o[t+36>>2]|0)+(y<<2)|0;s=o[t+40>>2]|0;if((g|0)==1){c[a>>2]=0;c[s+(y<<2)>>2]=3.4028234663852886e38;break}else{c[a>>2]=-3.4028234663852886e38;c[s+(y<<2)>>2]=0;break}}else{c[(o[t+36>>2]|0)+(y<<2)>>2]=-3.4028234663852886e38;c[(o[t+40>>2]|0)+(y<<2)>>2]=3.4028234663852886e38}while(0);_=+c[e+704>>2];do if(_>0){i=+c[me+352>>2]*(ue*he)+ +c[me+356>>2]*(be*he)+ +c[me+360>>2]*(de*he)-(ue*he*+c[ye+352>>2]+be*he*+c[ye+356>>2]+de*he*+c[ye+360>>2]);if((g|0)==1){if(!(i<0))break;if(!(+c[d>>2]<-(_*i)))break;c[d>>2]=-(_*i);break}else{if(!(i>0))break;if(!(+c[d>>2]>-(_*i)))break;c[d>>2]=-(_*i);break}}while(0);c[d>>2]=+c[e+700>>2]*+c[d>>2];return}function wM(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;switch(n|0){case 5:case-1:break;default:return}switch(t|0){case 2:{c[e+764>>2]=i;o[e+748>>2]=o[e+748>>2]|2;return}case 4:{c[e+760>>2]=i;o[e+748>>2]=o[e+748>>2]|1;return}case 3:{c[e+752>>2]=i;o[e+748>>2]=o[e+748>>2]|4;return}case 1:{c[e+756>>2]=i;o[e+748>>2]=o[e+748>>2]|8;return}default:return}}function kM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do switch(i|0){case 5:case-1:switch(t|0){case 2:{n=+c[e+764>>2];break e}case 4:{n=+c[e+760>>2];break e}case 3:{n=+c[e+752>>2];break e}case 1:{n=+c[e+756>>2];break e}default:{n=0;break e}}default:n=0}while(0);return+n}function SM(e){e=e|0;return 220}function RM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,s=0,a=0,f=0;Gy(e,t,i)|0;o[t+52>>2]=o[e+552>>2];o[t+56>>2]=o[e+556>>2];o[t+60>>2]=o[e+560>>2];o[t+64>>2]=o[e+564>>2];o[t+68>>2]=o[e+568>>2];o[t+72>>2]=o[e+572>>2];o[t+76>>2]=o[e+576>>2];o[t+80>>2]=o[e+580>>2];o[t+84>>2]=o[e+584>>2];o[t+88>>2]=o[e+588>>2];o[t+92>>2]=o[e+592>>2];o[t+96>>2]=o[e+596>>2];o[t+100>>2]=o[e+600>>2];o[t+104>>2]=o[e+604>>2];o[t+108>>2]=o[e+608>>2];o[t+112>>2]=o[e+612>>2];o[t+116>>2]=o[e+616>>2];o[t+120>>2]=o[e+620>>2];o[t+124>>2]=o[e+624>>2];o[t+128>>2]=o[e+628>>2];o[t+132>>2]=o[e+632>>2];o[t+136>>2]=o[e+636>>2];o[t+140>>2]=o[e+640>>2];o[t+144>>2]=o[e+644>>2];o[t+148>>2]=o[e+648>>2];o[t+152>>2]=o[e+652>>2];o[t+156>>2]=o[e+656>>2];o[t+160>>2]=o[e+660>>2];o[t+164>>2]=o[e+664>>2];o[t+168>>2]=o[e+668>>2];o[t+172>>2]=o[e+672>>2];o[t+176>>2]=o[e+676>>2];i=r[e+736>>1]|0;o[t+184>>2]=i&255;o[t+188>>2]=(i&65535)>>>8&65535;o[t+196>>2]=o[e+684>>2];o[t+192>>2]=o[e+680>>2];o[t+180>>2]=_[e+740>>0];s=+c[e+688>>2];a=+c[e+692>>2];n=+Ya(s-a);if(!(n<-3.1415927410125732)){if(n>3.1415927410125732)n=n+-6.2831854820251465}else n=n+6.2831854820251465;c[t+200>>2]=n;n=+Ya(s+a);if(n<-3.1415927410125732){a=n+6.2831854820251465;i=t+204|0;c[i>>2]=a;i=e+696|0;i=o[i>>2]|0;f=t+208|0;o[f>>2]=i;f=e+700|0;f=o[f>>2]|0;i=t+212|0;o[i>>2]=f;i=e+704|0;i=o[i>>2]|0;e=t+216|0;o[e>>2]=i;return 15376}if(!(n>3.1415927410125732)){a=n;f=t+204|0;c[f>>2]=a;f=e+696|0;f=o[f>>2]|0;i=t+208|0;o[i>>2]=f;i=e+700|0;i=o[i>>2]|0;f=t+212|0;o[f>>2]=i;e=e+704|0;e=o[e>>2]|0;f=t+216|0;o[f>>2]=e;return 15376}a=n+-6.2831854820251465;f=t+204|0;c[f>>2]=a;f=e+696|0;f=o[f>>2]|0;i=t+208|0;o[i>>2]=f;i=e+700|0;i=o[i>>2]|0;f=t+212|0;o[f>>2]=i;e=e+704|0;e=o[e>>2]|0;f=t+216|0;o[f>>2]=e;return 15376}function jM(e){e=e|0;return o[e+748>>2]|0}function IM(e,t,i,r,_,s,a,f){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;var p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0;o[e+4>>2]=4;o[e+8>>2]=-1;o[e+12>>2]=-1;c[e+16>>2]=3.4028234663852886e38;n[e+20>>0]=1;n[e+21>>0]=0;o[e+24>>2]=-1;o[e+28>>2]=t;o[e+32>>2]=i;c[e+36>>2]=0;c[e+40>>2]=.30000001192092896;o[e+44>>2]=0;o[e>>2]=7428;c[e+688>>2]=0;c[e+692>>2]=-1;c[e+696>>2]=.8999999761581421;c[e+700>>2]=.30000001192092896;c[e+704>>2]=1;c[e+708>>2]=0;c[e+712>>2]=0;n[e+716>>0]=0;n[e+736>>0]=0;n[e+737>>0]=0;n[e+738>>0]=0;n[e+739>>0]=1;n[e+740>>0]=f&1;o[e+748>>2]=0;o[e+748+4>>2]=0;o[e+748+8>>2]=0;o[e+748+12>>2]=0;o[e+748+16>>2]=0;o[e+600>>2]=o[r>>2];o[e+600+4>>2]=o[r+4>>2];o[e+600+8>>2]=o[r+8>>2];o[e+600+12>>2]=o[r+12>>2];p=+c[t+4>>2];l=+c[t+20>>2];b=+c[t+36>>2];d=+c[s>>2];h=+c[s+4>>2];m=+c[s+8>>2];do if(!(p*d+l*h+b*m>=.9999998807907104))if(!(p*d+l*h+b*m<=-.9999998807907104)){i=(c[u>>2]=b*h-l*m,o[u>>2]|0);r=(c[u>>2]=p*m-b*d,o[u>>2]|0);f=(c[u>>2]=l*d-p*h,o[u>>2]|0);v=(c[u>>2]=m*(p*m-b*d)-h*(l*d-p*h),o[u>>2]|0);C=(c[u>>2]=d*(l*d-p*h)-m*(b*h-l*m),o[u>>2]|0);g=(c[u>>2]=h*(b*h-l*m)-d*(p*m-b*d),o[u>>2]|0);break}else{v=o[t+12>>2]|0;C=o[t+28>>2]|0;g=o[t+44>>2]|0;i=o[t+8>>2]|0;f=o[t+40>>2]|0;r=o[t+24>>2]|0;break}else{v=(c[u>>2]=-+c[t+12>>2],o[u>>2]|0);C=(c[u>>2]=-+c[t+28>>2],o[u>>2]|0);g=(c[u>>2]=-+c[t+44>>2],o[u>>2]|0);i=o[t+8>>2]|0;f=o[t+40>>2]|0;r=o[t+24>>2]|0}while(0);o[e+552>>2]=v;o[e+556>>2]=i;o[e+560>>2]=o[s>>2];c[e+564>>2]=0;o[e+568>>2]=C;o[e+572>>2]=r;o[e+576>>2]=o[s+4>>2];c[e+580>>2]=0;o[e+584>>2]=g;o[e+588>>2]=f;o[e+592>>2]=o[s+8>>2];c[e+596>>2]=0;b=+c[s+4>>2];h=+c[a+8>>2];p=+c[s+8>>2];m=+c[a+4>>2];y=+c[a>>2];l=+c[s>>2];do if(h*p+(b*m+y*l)<-.9999998807907104)if(+N(+p)>.7071067690849304){l=1/+X(+(b*b+p*p));i=0;d=0;p=-(p*l);r=(c[u>>2]=b*l,o[u>>2]|0);break}else{p=1/+X(+(b*b+l*l));i=(c[u>>2]=-(b*p),o[u>>2]|0);d=0;p=l*p;r=0;break}else{w=+X(+((h*p+(b*m+y*l)+1)*2));i=(c[u>>2]=(b*h-p*m)*(1/w),o[u>>2]|0);d=w*.5;p=(p*y-h*l)*(1/w);r=(c[u>>2]=(m*l-b*y)*(1/w),o[u>>2]|0)}while(0);b=(o[u>>2]=v,+c[u>>2]);j=(o[u>>2]=g,+c[u>>2]);R=(o[u>>2]=r,+c[u>>2]);w=(o[u>>2]=C,+c[u>>2]);I=b*d+j*p-w*R;l=(o[u>>2]=i,+c[u>>2]);k=w*d+b*R-j*l;S=j*d+w*l-b*p;j=-(b*l)-w*p-j*R;p=-p;w=k*-R+(d*I+j*-l)-S*p;b=S*-l+(d*k+j*p)-I*-R;d=I*p+(j*-R+d*S)-k*-l;o[e+664>>2]=o[_>>2];o[e+664+4>>2]=o[_+4>>2];o[e+664+8>>2]=o[_+8>>2];o[e+664+12>>2]=o[_+12>>2];c[e+616>>2]=w;c[e+620>>2]=m*d-h*b;o[e+624>>2]=o[a>>2];c[e+628>>2]=0;c[e+632>>2]=b;c[e+636>>2]=h*w-y*d;o[e+640>>2]=o[a+4>>2];c[e+644>>2]=0;c[e+648>>2]=d;c[e+652>>2]=y*b-m*w;o[e+656>>2]=o[a+8>>2];c[e+660>>2]=0;c[e+732>>2]=n[e+740>>0]|0?-1:1;return}function TM(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,p=0;Ay(e,4,t);o[e>>2]=7428;o[e+552>>2]=o[i>>2];o[e+552+4>>2]=o[i+4>>2];o[e+552+8>>2]=o[i+8>>2];o[e+552+12>>2]=o[i+12>>2];o[e+568>>2]=o[i+16>>2];o[e+568+4>>2]=o[i+16+4>>2];o[e+568+8>>2]=o[i+16+8>>2];o[e+568+12>>2]=o[i+16+12>>2];o[e+584>>2]=o[i+32>>2];o[e+584+4>>2]=o[i+32+4>>2];o[e+584+8>>2]=o[i+32+8>>2];o[e+584+12>>2]=o[i+32+12>>2];o[e+600>>2]=o[i+48>>2];o[e+600+4>>2]=o[i+48+4>>2];o[e+600+8>>2]=o[i+48+8>>2];o[e+600+12>>2]=o[i+48+12>>2];o[e+616>>2]=o[i>>2];o[e+616+4>>2]=o[i+4>>2];o[e+616+8>>2]=o[i+8>>2];o[e+616+12>>2]=o[i+12>>2];o[e+632>>2]=o[i+16>>2];o[e+632+4>>2]=o[i+16+4>>2];o[e+632+8>>2]=o[i+16+8>>2];o[e+632+12>>2]=o[i+16+12>>2];o[e+648>>2]=o[i+32>>2];o[e+648+4>>2]=o[i+32+4>>2];o[e+648+8>>2]=o[i+32+8>>2];o[e+648+12>>2]=o[i+32+12>>2];o[e+664>>2]=o[i+48>>2];o[e+664+4>>2]=o[i+48+4>>2];o[e+664+8>>2]=o[i+48+8>>2];o[e+664+12>>2]=o[i+48+12>>2];c[e+688>>2]=0;c[e+692>>2]=-1;c[e+696>>2]=.8999999761581421;c[e+700>>2]=.30000001192092896;c[e+704>>2]=1;c[e+708>>2]=0;c[e+712>>2]=0;n[e+716>>0]=0;n[e+736>>0]=0;n[e+737>>0]=0;n[e+738>>0]=0;n[e+739>>0]=1;n[e+740>>0]=r&1;o[e+748>>2]=0;o[e+748+4>>2]=0;o[e+748+8>>2]=0;o[e+748+12>>2]=0;o[e+748+16>>2]=0;i=o[e+28>>2]|0;p=+c[e+600>>2];f=+c[e+604>>2];a=+c[e+608>>2];s=p*+c[i+20>>2]+f*+c[i+24>>2]+a*+c[i+28>>2]+ +c[i+56>>2];_=p*+c[i+36>>2]+f*+c[i+40>>2]+a*+c[i+44>>2]+ +c[i+60>>2];c[e+664>>2]=p*+c[i+4>>2]+f*+c[i+8>>2]+a*+c[i+12>>2]+ +c[i+52>>2];c[e+668>>2]=s;c[e+672>>2]=_;c[e+676>>2]=0;c[e+732>>2]=r?-1:1;return}function DM(e,t,i){e=e|0;t=t|0;i=i|0;return}function OM(e,t,i){e=e|0;t=t|0;i=i|0;return}function LM(e){e=e|0;o[e>>2]=7188;if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function xM(e){e=e|0;var t=0,i=0,n=0,r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0;i=p;p=p+144|0;c[e+36>>2]=0;o[i+128>>2]=0;o[i+128+4>>2]=0;o[i+128+8>>2]=0;o[i+128+12>>2]=0;t=0;do{n=i+128+(t<<2)|0;c[n>>2]=1;j=o[e+28>>2]|0;P=o[j+4>>2]|0;o[i+80>>2]=P;L=o[j+20>>2]|0;o[i+80+4>>2]=L;T=o[j+36>>2]|0;o[i+80+8>>2]=T;c[i+80+12>>2]=0;M=o[j+8>>2]|0;o[i+80+16>>2]=M;O=o[j+24>>2]|0;o[i+80+20>>2]=O;I=o[j+40>>2]|0;o[i+80+24>>2]=I;c[i+80+28>>2]=0;x=o[j+12>>2]|0;o[i+80+32>>2]=x;D=o[j+28>>2]|0;o[i+80+36>>2]=D;R=o[j+44>>2]|0;o[i+80+40>>2]=R;c[i+80+44>>2]=0;r=o[e+32>>2]|0;S=o[r+4>>2]|0;o[i+32>>2]=S;C=o[r+20>>2]|0;o[i+32+4>>2]=C;y=o[r+36>>2]|0;o[i+32+8>>2]=y;c[i+32+12>>2]=0;k=o[r+8>>2]|0;o[i+32+16>>2]=k;v=o[r+24>>2]|0;o[i+32+20>>2]=v;m=o[r+40>>2]|0;o[i+32+24>>2]=m;c[i+32+28>>2]=0;w=o[r+12>>2]|0;o[i+32+32>>2]=w;g=o[r+28>>2]|0;o[i+32+36>>2]=g;_=o[r+44>>2]|0;o[i+32+40>>2]=_;c[i+32+44>>2]=0;d=+c[e+300>>2];f=d*(o[u>>2]=P,+c[u>>2]);s=+c[e+304>>2];f=f+s*(o[u>>2]=M,+c[u>>2]);a=+c[e+308>>2];f=f+a*(o[u>>2]=x,+c[u>>2]);h=d*(o[u>>2]=L,+c[u>>2]);h=h+s*(o[u>>2]=O,+c[u>>2]);h=h+a*(o[u>>2]=D,+c[u>>2]);d=d*(o[u>>2]=T,+c[u>>2]);s=d+s*(o[u>>2]=I,+c[u>>2]);d=+c[j+52>>2];b=+c[j+56>>2];l=+c[j+60>>2];l=s+a*(o[u>>2]=R,+c[u>>2])+l-l;c[i+16>>2]=f+d-d;c[i+16+4>>2]=h+b-b;c[i+16+8>>2]=l;c[i+16+12>>2]=0;l=+c[e+316>>2];b=l*(o[u>>2]=S,+c[u>>2]);h=+c[e+320>>2];b=b+h*(o[u>>2]=k,+c[u>>2]);d=+c[e+324>>2];b=b+d*(o[u>>2]=w,+c[u>>2]);f=l*(o[u>>2]=C,+c[u>>2]);f=f+h*(o[u>>2]=v,+c[u>>2]);f=f+d*(o[u>>2]=g,+c[u>>2]);l=l*(o[u>>2]=y,+c[u>>2]);h=l+h*(o[u>>2]=m,+c[u>>2]);l=+c[r+52>>2];a=+c[r+56>>2];s=+c[r+60>>2];s=h+d*(o[u>>2]=_,+c[u>>2])+s-s;c[i>>2]=b+l-l;c[i+4>>2]=f+a-a;c[i+8>>2]=s;c[i+12>>2]=0;_=o[e+28>>2]|0;r=o[e+32>>2]|0;TI(e+48+(t*84|0)|0,i+80|0,i+32|0,i+16|0,i,i+128|0,_+420|0,+c[_+368>>2],r+420|0,+c[r+368>>2]);c[n>>2]=0;t=t+1|0}while((t|0)!=3);p=i;return}function MM(e,t){e=e|0;t=t|0;e=(n[e+344>>0]|0)==0?3:0;o[t>>2]=e;o[t+4>>2]=e;return}function PM(e,t){e=e|0;t=t|0;var i=0,n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0,u=0,b=0,d=0,h=0;a=o[e+28>>2]|0;f=o[e+32>>2]|0;r=o[t+8>>2]|0;c[r>>2]=1;_=o[t+24>>2]|0;c[r+(_+1<<2)>>2]=1;c[r+((_<<1)+2<<2)>>2]=1;p=+c[e+300>>2];h=+c[e+304>>2];n=+c[e+308>>2];b=+c[a+4>>2]*p+ +c[a+8>>2]*h+ +c[a+12>>2]*n;l=p*+c[a+20>>2]+h*+c[a+24>>2]+n*+c[a+28>>2];n=p*+c[a+36>>2]+h*+c[a+40>>2]+n*+c[a+44>>2];r=o[t+12>>2]|0;o[r>>2]=0;c[r+4>>2]=n;c[r+8>>2]=-l;c[r+12>>2]=0;c[r+(_<<2)>>2]=-n;o[r+(_<<2)+4>>2]=0;c[r+(_<<2)+8>>2]=b;c[r+(_<<2)+12>>2]=0;c[r+(_<<1<<2)>>2]=l;c[r+(_<<1<<2)+4>>2]=-b;o[r+(_<<1<<2)+8>>2]=0;c[r+(_<<1<<2)+12>>2]=0;r=o[t+16>>2]|0;c[r>>2]=-1;c[r+(_+1<<2)>>2]=-1;c[r+((_<<1)+2<<2)>>2]=-1;h=+c[e+316>>2];p=+c[e+320>>2];i=+c[e+324>>2];d=+c[f+4>>2]*h+ +c[f+8>>2]*p+ +c[f+12>>2]*i;u=h*+c[f+20>>2]+p*+c[f+24>>2]+i*+c[f+28>>2];i=h*+c[f+36>>2]+p*+c[f+40>>2]+i*+c[f+44>>2];_=o[t+20>>2]|0;r=o[t+24>>2]|0;o[_>>2]=0;c[_+4>>2]=-i;c[_+8>>2]=u;c[_+12>>2]=0;c[_+(r<<2)>>2]=i;o[_+(r<<2)+4>>2]=0;c[_+(r<<2)+8>>2]=-d;c[_+(r<<2)+12>>2]=0;c[_+(r<<1<<2)>>2]=-u;c[_+(r<<1<<2)+4>>2]=d;o[_+(r<<1<<2)+8>>2]=0;c[_+(r<<1<<2)+12>>2]=0;r=o[e+332>>2]|0;p=+c[((r&1|0)==0?t+4|0:e+336|0)>>2]*+c[t>>2];_=o[t+24>>2]|0;s=o[t+28>>2]|0;c[s>>2]=p*(d+ +c[f+52>>2]-b-+c[a+52>>2]);c[s+(_<<2)>>2]=p*(u+ +c[f+56>>2]-l-+c[a+56>>2]);c[s+(_<<1<<2)>>2]=p*(i+ +c[f+60>>2]-n-+c[a+60>>2]);if(r&2|0){f=o[t+24>>2]|0;a=o[t+32>>2]|0;o[a>>2]=o[e+340>>2];o[a+(f<<2)>>2]=o[e+340>>2];o[a+(f<<1<<2)>>2]=o[e+340>>2]}n=+c[e+356>>2];if(n>0){c[o[t+36>>2]>>2]=-n;c[o[t+40>>2]>>2]=n;i=+c[e+356>>2]}else i=n;if(i>0){f=o[t+24>>2]|0;c[(o[t+36>>2]|0)+(f<<2)>>2]=-n;c[(o[t+40>>2]|0)+(f<<2)>>2]=n;i=+c[e+356>>2]}if(!(i>0)){a=e+352|0;a=o[a>>2]|0;f=t+52|0;o[f>>2]=a;return}a=o[t+24>>2]<<1;c[(o[t+36>>2]|0)+(a<<2)>>2]=-n;c[(o[t+40>>2]|0)+(a<<2)>>2]=n;a=e+352|0;a=o[a>>2]|0;f=t+52|0;o[f>>2]=a;return}function WM(e,t,i,n){e=e|0;t=t|0;i=+i;n=n|0;if((n|0)!=-1)return;switch(t|0){case 2:case 1:{c[e+336>>2]=i;o[e+332>>2]=o[e+332>>2]|1;return}case 4:case 3:{c[e+340>>2]=i;o[e+332>>2]=o[e+332>>2]|2;return}default:return}}function BM(e,t,i){e=e|0;t=t|0;i=i|0;var n=0;e:do if((i|0)==-1)switch(t|0){case 2:case 1:{n=+c[e+336>>2];break e}case 4:case 3:{n=+c[e+340>>2];break e}default:{n=3.4028234663852886e38;break e}}else n=3.4028234663852886e38;while(0);return+n}function AM(e){e=e|0;return 84}function FM(e,t,i){e=e|0;t=t|0;i=i|0;Gy(e,t,i)|0;o[t+52>>2]=o[e+300>>2];o[t+56>>2]=o[e+304>>2];o[t+60>>2]=o[e+308>>2];o[t+64>>2]=o[e+312>>2];o[t+68>>2]=o[e+316>>2];o[t+72>>2]=o[e+320>>2];o[t+76>>2]=o[e+324>>2];o[t+80>>2]=o[e+328>>2];return 15429}function GM(e){e=e|0;return o[e+332>>2]|0}function EM(e){e=e|0;var t=0;o[e>>2]=7540;t=o[e+176>>2]|0;if(t|0){if(n[e+180>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+176>>2]=0}n[e+180>>0]=1;o[e+176>>2]=0;o[e+168>>2]=0;o[e+172>>2]=0;t=o[e+156>>2]|0;if(t|0){if(n[e+160>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+156>>2]=0}n[e+160>>0]=1;o[e+156>>2]=0;o[e+148>>2]=0;o[e+152>>2]=0;t=o[e+136>>2]|0;if(t|0){if(n[e+140>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+136>>2]=0}n[e+140>>0]=1;o[e+136>>2]=0;o[e+128>>2]=0;o[e+132>>2]=0;t=o[e+116>>2]|0;if(t|0){if(n[e+120>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+116>>2]=0}n[e+120>>0]=1;o[e+116>>2]=0;o[e+108>>2]=0;o[e+112>>2]=0;t=o[e+96>>2]|0;if(t|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=0;o[e+88>>2]=0;o[e+92>>2]=0;t=o[e+76>>2]|0;if(t|0){if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+76>>2]=0}n[e+80>>0]=1;o[e+76>>2]=0;o[e+68>>2]=0;o[e+72>>2]=0;t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+48>>2]=0;o[e+52>>2]=0;t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+28>>2]=0;o[e+32>>2]=0;t=o[e+16>>2]|0;if(!t){n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0;n[e+20>>0]=1;o[e+16>>2]=0;o[e+8>>2]=0;e=e+12|0;o[e>>2]=0;return}function VM(e){e=e|0;EM(e);if(!e)return;o[5638]=(o[5638]|0)+1;qa(o[e+-4>>2]|0);return}function NM(e,t,i,n,r,_,s,a,f,l){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;l=l|0;var u=0;u=p;p=p+16|0;Zp(15521);+MP[o[(o[e>>2]|0)+44>>2]&3](e,t,i,n,r,_,s,a,f);+MP[o[(o[e>>2]|0)+48>>2]&3](e,t,i,n,r,_,s,a,f);+AP[o[(o[e>>2]|0)+36>>2]&1](e,t,i,a);l=o[2006]|0;e=(o[l+16>>2]|0)+-1|0;o[l+16>>2]=e;if(e|0){p=u;return 0}do if(o[l+4>>2]|0){ut(u|0,0)|0;e=o[5649]|0;c[l+8>>2]=+c[l+8>>2]+ +(((o[u+4>>2]|0)-(o[e+4>>2]|0)+(((o[u>>2]|0)-(o[e>>2]|0)|0)*1e6|0)-(o[l+12>>2]|0)|0)>>>0)/1e3;if(!(o[l+16>>2]|0)){l=o[2006]|0;break}else{p=u;return 0}}while(0);o[2006]=o[l+20>>2];p=u;return 0}function XM(e){e=e|0;o[e+200>>2]=0;return}function HM(e){e=e|0;return 1}function ZM(e,t,i,n){e=e|0;t=t|0;i=i|0;n=n|0;var r=0;if((i|0)>0)r=0;else return;do{UM(e,o[t+(r<<2)>>2]|0,n);r=r+1|0}while((r|0)!=(i|0));return}function UM(e,t,i){e=e|0;t=t|0;i=i|0;var r=0,_=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,H=0,Z=0,U=0,z=0,Y=0,K=0,Q=0,q=0,J=0,$=0,ee=0,te=0,ie=0,ne=0,re=0;te=p;p=p+80|0;z=o[t+740>>2]|0;Q=o[t+744>>2]|0;q=zM(e,z,+c[i+12>>2])|0;J=zM(e,Q,+c[i+12>>2])|0;Y=o[e+16>>2]|0;B=+c[Y+(q*244|0)+128>>2];A=+c[Y+(q*244|0)+132>>2];F=+c[Y+(q*244|0)+136>>2];if(B*B+A*A+F*F<1.4210854715202004e-14?(B=+c[Y+(J*244|0)+128>>2],A=+c[Y+(J*244|0)+132>>2],F=+c[Y+(J*244|0)+136>>2],B*B+A*A+F*F<1.4210854715202004e-14):0){p=te;return}if((o[t+748>>2]|0)<=0){p=te;return}$=0;r=1;do{Z=t+4+($*184|0)|0;T=t+4+($*184|0)+80|0;if(+c[T>>2]<=+c[t+756>>2]){U=o[e+28>>2]|0;if((U|0)==(o[e+32>>2]|0)?(K=U|0?U<<1:1,(U|0)<(K|0)):0){if(!K){_=0;s=U}else{o[5637]=(o[5637]|0)+1;_=Qa((K*152|3)+16|0)|0;if(!_)_=0;else{o[(_+4+15&-16)+-4>>2]=_;_=_+4+15&-16}s=o[e+28>>2]|0}if((s|0)>0){l=0;do{Wc(_+(l*152|0)|0,(o[e+36>>2]|0)+(l*152|0)|0,152)|0;l=l+1|0}while((l|0)!=(s|0))}s=o[e+36>>2]|0;if(s|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[s+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=_;o[e+32>>2]=K;_=o[e+28>>2]|0}else _=U;o[e+28>>2]=_+1;H=o[e+36>>2]|0;L=(o[z+236>>2]&2|0)==0?0:z;x=(o[Q+236>>2]&2|0)==0?0:Q;o[H+(U*152|0)+144>>2]=q;o[H+(U*152|0)+148>>2]=J;o[H+(U*152|0)+132>>2]=Z;S=+c[t+4+($*184|0)+48>>2]-+c[z+52>>2];R=+c[t+4+($*184|0)+52>>2]-+c[z+56>>2];k=+c[t+4+($*184|0)+56>>2]-+c[z+60>>2];c[te+64>>2]=S;c[te+64+4>>2]=R;c[te+64+8>>2]=k;c[te+64+12>>2]=0;I=+c[t+4+($*184|0)+32>>2]-+c[Q+52>>2];D=+c[t+4+($*184|0)+36>>2]-+c[Q+56>>2];j=+c[t+4+($*184|0)+40>>2]-+c[Q+60>>2];c[te+48>>2]=I;c[te+48+4>>2]=D;c[te+48+8>>2]=j;c[te+48+12>>2]=0;if(!(o[Y+(q*244|0)+240>>2]|0)){_=0;l=0;h=0}else{A=+c[Y+(q*244|0)+192>>2]+ +c[Y+(q*244|0)+224>>2];F=+c[Y+(q*244|0)+196>>2]+ +c[Y+(q*244|0)+228>>2];B=+c[Y+(q*244|0)+200>>2]+ +c[Y+(q*244|0)+232>>2];_=(c[u>>2]=+c[Y+(q*244|0)+176>>2]+ +c[Y+(q*244|0)+208>>2]+(F*k-B*R),o[u>>2]|0);l=(c[u>>2]=+c[Y+(q*244|0)+180>>2]+ +c[Y+(q*244|0)+212>>2]+(B*S-A*k),o[u>>2]|0);h=(c[u>>2]=+c[Y+(q*244|0)+184>>2]+ +c[Y+(q*244|0)+216>>2]+(A*R-F*S),o[u>>2]|0)}if(!(o[Y+(J*244|0)+240>>2]|0)){s=0;d=0;m=0}else{A=+c[Y+(J*244|0)+192>>2]+ +c[Y+(J*244|0)+224>>2];F=+c[Y+(J*244|0)+196>>2]+ +c[Y+(J*244|0)+228>>2];B=+c[Y+(J*244|0)+200>>2]+ +c[Y+(J*244|0)+232>>2];s=(c[u>>2]=+c[Y+(J*244|0)+176>>2]+ +c[Y+(J*244|0)+208>>2]+(F*j-B*D),o[u>>2]|0);d=(c[u>>2]=+c[Y+(J*244|0)+180>>2]+ +c[Y+(J*244|0)+212>>2]+(B*I-A*j),o[u>>2]|0);m=(c[u>>2]=+c[Y+(J*244|0)+184>>2]+ +c[Y+(J*244|0)+216>>2]+(A*D-F*I),o[u>>2]|0)}F=(o[u>>2]=_,+c[u>>2]);F=F-(o[u>>2]=s,+c[u>>2]);A=(o[u>>2]=l,+c[u>>2]);A=A-(o[u>>2]=d,+c[u>>2]);M=(o[u>>2]=h,+c[u>>2]);M=M-(o[u>>2]=m,+c[u>>2]);G=t+4+($*184|0)+64|0;P=+c[G>>2];E=t+4+($*184|0)+68|0;W=+c[E>>2];V=t+4+($*184|0)+72|0;B=+c[V>>2];m=o[e+16>>2]|0;d=o[m+(q*244|0)+240>>2]|0;h=o[m+(J*244|0)+240>>2]|0;if(d|0){l=(c[u>>2]=((R*B-k*W)*+c[d+288>>2]+(k*P-B*S)*+c[d+292>>2]+(W*S-R*P)*+c[d+296>>2])*+c[d+568>>2],o[u>>2]|0);_=(c[u>>2]=((R*B-k*W)*+c[d+304>>2]+(k*P-B*S)*+c[d+308>>2]+(W*S-R*P)*+c[d+312>>2])*+c[d+572>>2],o[u>>2]|0);s=(c[u>>2]=((R*B-k*W)*+c[d+320>>2]+(k*P-B*S)*+c[d+324>>2]+(W*S-R*P)*+c[d+328>>2])*+c[d+576>>2],o[u>>2]|0)}else{l=0;_=0;s=0}o[H+(U*152|0)+64>>2]=l;o[H+(U*152|0)+68>>2]=_;o[H+(U*152|0)+72>>2]=s;c[H+(U*152|0)+76>>2]=0;v=+c[V>>2];C=+c[E>>2];w=+c[G>>2];g=(o[u>>2]=_,+c[u>>2]);y=(o[u>>2]=s,+c[u>>2]);f=(o[u>>2]=l,+c[u>>2]);if(h|0){_=(c[u>>2]=(+c[h+288>>2]*-(D*v-j*C)+ +c[h+292>>2]*-(j*w-v*I)+ +c[h+296>>2]*-(C*I-D*w))*+c[h+568>>2],o[u>>2]|0);s=(c[u>>2]=(+c[h+304>>2]*-(D*v-j*C)+ +c[h+308>>2]*-(j*w-v*I)+ +c[h+312>>2]*-(C*I-D*w))*+c[h+572>>2],o[u>>2]|0);l=(c[u>>2]=(+c[h+320>>2]*-(D*v-j*C)+ +c[h+324>>2]*-(j*w-v*I)+ +c[h+328>>2]*-(C*I-D*w))*+c[h+576>>2],o[u>>2]|0)}else{_=0;s=0;l=0}o[H+(U*152|0)+80>>2]=_;o[H+(U*152|0)+84>>2]=s;o[H+(U*152|0)+88>>2]=l;c[H+(U*152|0)+92>>2]=0;b=(o[u>>2]=_,+c[u>>2]);a=(o[u>>2]=s,+c[u>>2]);if(d|0)f=+c[d+368>>2]+((g*k-y*R)*+c[G>>2]+(y*S-k*f)*+c[E>>2]+(R*f-g*S)*+c[V>>2]);else f=0;if(h|0){O=-(o[u>>2]=l,+c[u>>2]);a=+c[h+368>>2]+((j*-a-D*O)*+c[G>>2]+(I*O-j*-b)*+c[E>>2]+(D*-b-I*-a)*+c[V>>2])}else a=0;c[H+(U*152|0)+108>>2]=1/(f+a);if(d|0){o[H+(U*152|0)+16>>2]=o[G>>2];o[H+(U*152|0)+16+4>>2]=o[G+4>>2];o[H+(U*152|0)+16+8>>2]=o[G+8>>2];o[H+(U*152|0)+16+12>>2]=o[G+12>>2];c[H+(U*152|0)>>2]=R*B-k*W;c[H+(U*152|0)+4>>2]=k*P-B*S;c[H+(U*152|0)+8>>2]=W*S-R*P;c[H+(U*152|0)+12>>2]=0}else{o[H+(U*152|0)>>2]=0;o[H+(U*152|0)+4>>2]=0;o[H+(U*152|0)+8>>2]=0;o[H+(U*152|0)+12>>2]=0;o[H+(U*152|0)+16>>2]=0;o[H+(U*152|0)+20>>2]=0;o[H+(U*152|0)+24>>2]=0;o[H+(U*152|0)+28>>2]=0}if(h|0){g=-+c[E>>2];O=-+c[V>>2];c[H+(U*152|0)+48>>2]=-+c[G>>2];c[H+(U*152|0)+52>>2]=g;c[H+(U*152|0)+56>>2]=O;c[H+(U*152|0)+60>>2]=0;c[H+(U*152|0)+32>>2]=-(D*v-j*C);c[H+(U*152|0)+36>>2]=-(j*w-v*I);c[H+(U*152|0)+40>>2]=-(C*I-D*w);c[H+(U*152|0)+44>>2]=0}else{o[H+(U*152|0)+32>>2]=0;o[H+(U*152|0)+32+4>>2]=0;o[H+(U*152|0)+32+8>>2]=0;o[H+(U*152|0)+32+12>>2]=0;o[H+(U*152|0)+32+16>>2]=0;o[H+(U*152|0)+32+20>>2]=0;o[H+(U*152|0)+32+24>>2]=0;o[H+(U*152|0)+32+28>>2]=0}O=+c[T>>2]+ +c[i+56>>2];if(d|0){y=+c[d+356>>2];g=+c[d+360>>2];w=+c[d+352>>2];v=y*k-g*R+ +c[d+336>>2];g=+c[d+340>>2]+(g*S-k*w);y=R*w-y*S+ +c[d+344>>2]}else{v=0;g=0;y=0}if(h|0){a=+c[h+356>>2];f=+c[h+360>>2];R=+c[h+352>>2];b=a*j-f*D+ +c[h+336>>2];f=+c[h+340>>2]+(f*I-j*R);a=D*R-a*I+ +c[h+344>>2]}else{b=0;f=0;a=0}I=(v-b)*+c[G>>2]+(g-f)*+c[E>>2]+(y-a)*+c[V>>2];o[H+(U*152|0)+104>>2]=o[t+4+($*184|0)+84>>2];I=-(I*+c[t+4+($*184|0)+92>>2]);I=I<=0?0:I;do if(o[i+64>>2]&4){a=+c[t+4+($*184|0)+120>>2]*+c[i+60>>2];c[H+(U*152|0)+100>>2]=a;do if(d|0){if(!(o[m+(q*244|0)+240>>2]|0))break;D=a*(+c[H+(U*152|0)+20>>2]*+c[m+(q*244|0)+132>>2]*+c[d+376>>2])*+c[m+(q*244|0)+116>>2];j=a*(+c[H+(U*152|0)+24>>2]*+c[m+(q*244|0)+136>>2]*+c[d+380>>2])*+c[m+(q*244|0)+120>>2];c[m+(q*244|0)+64>>2]=+c[m+(q*244|0)+112>>2]*(a*(+c[H+(U*152|0)+16>>2]*+c[m+(q*244|0)+128>>2]*+c[d+372>>2]))+ +c[m+(q*244|0)+64>>2];c[m+(q*244|0)+68>>2]=D+ +c[m+(q*244|0)+68>>2];c[m+(q*244|0)+72>>2]=j+ +c[m+(q*244|0)+72>>2];j=a*+c[m+(q*244|0)+100>>2]*+c[H+(U*152|0)+68>>2];D=a*+c[m+(q*244|0)+104>>2]*+c[H+(U*152|0)+72>>2];c[m+(q*244|0)+80>>2]=a*+c[m+(q*244|0)+96>>2]*+c[H+(U*152|0)+64>>2]+ +c[m+(q*244|0)+80>>2];c[m+(q*244|0)+84>>2]=j+ +c[m+(q*244|0)+84>>2];c[m+(q*244|0)+88>>2]=D+ +c[m+(q*244|0)+88>>2]}while(0);if(h|0){a=+c[H+(U*152|0)+100>>2];if(!(o[m+(J*244|0)+240>>2]|0))break;D=+c[H+(U*152|0)+88>>2];j=+c[H+(U*152|0)+84>>2];R=+c[H+(U*152|0)+80>>2];k=a*(+c[H+(U*152|0)+52>>2]*+c[m+(J*244|0)+132>>2]*+c[h+376>>2])*+c[m+(J*244|0)+116>>2];S=a*(+c[H+(U*152|0)+56>>2]*+c[m+(J*244|0)+136>>2]*+c[h+380>>2])*+c[m+(J*244|0)+120>>2];c[m+(J*244|0)+64>>2]=+c[m+(J*244|0)+112>>2]*(a*(+c[H+(U*152|0)+48>>2]*+c[m+(J*244|0)+128>>2]*+c[h+372>>2]))+ +c[m+(J*244|0)+64>>2];c[m+(J*244|0)+68>>2]=k+ +c[m+(J*244|0)+68>>2];c[m+(J*244|0)+72>>2]=S+ +c[m+(J*244|0)+72>>2];j=j*(+c[m+(J*244|0)+100>>2]*-a);D=D*(+c[m+(J*244|0)+104>>2]*-a);c[m+(J*244|0)+80>>2]=+c[m+(J*244|0)+80>>2]-R*(+c[m+(J*244|0)+96>>2]*-a);c[m+(J*244|0)+84>>2]=+c[m+(J*244|0)+84>>2]-j;c[m+(J*244|0)+88>>2]=+c[m+(J*244|0)+88>>2]-D}}else c[H+(U*152|0)+100>>2]=0;while(0);c[H+(U*152|0)+96>>2]=0;if(!(o[m+(q*244|0)+240>>2]|0)){a=0;f=0;b=0;C=0;w=0;k=0}else{a=+c[m+(q*244|0)+208>>2];f=+c[m+(q*244|0)+212>>2];b=+c[m+(q*244|0)+216>>2];C=+c[m+(q*244|0)+224>>2];w=+c[m+(q*244|0)+228>>2];k=+c[m+(q*244|0)+232>>2]}if(!(o[m+(J*244|0)+240>>2]|0)){y=0;g=0;v=0;S=0;R=0;j=0}else{y=+c[m+(J*244|0)+208>>2];g=+c[m+(J*244|0)+212>>2];v=+c[m+(J*244|0)+216>>2];S=+c[m+(J*244|0)+224>>2];R=+c[m+(J*244|0)+228>>2];j=+c[m+(J*244|0)+232>>2]}a=I-((a+ +c[m+(q*244|0)+176>>2])*+c[H+(U*152|0)+16>>2]+(f+ +c[m+(q*244|0)+180>>2])*+c[H+(U*152|0)+20>>2]+(b+ +c[m+(q*244|0)+184>>2])*+c[H+(U*152|0)+24>>2]+((C+ +c[m+(q*244|0)+192>>2])*+c[H+(U*152|0)>>2]+(w+ +c[m+(q*244|0)+196>>2])*+c[H+(U*152|0)+4>>2]+(k+ +c[m+(q*244|0)+200>>2])*+c[H+(U*152|0)+8>>2])+((y+ +c[m+(J*244|0)+176>>2])*+c[H+(U*152|0)+48>>2]+(g+ +c[m+(J*244|0)+180>>2])*+c[H+(U*152|0)+52>>2]+(v+ +c[m+(J*244|0)+184>>2])*+c[H+(U*152|0)+56>>2]+((S+ +c[m+(J*244|0)+192>>2])*+c[H+(U*152|0)+32>>2]+(R+ +c[m+(J*244|0)+196>>2])*+c[H+(U*152|0)+36>>2]+(j+ +c[m+(J*244|0)+200>>2])*+c[H+(U*152|0)+40>>2])));_=(o[i+44>>2]|0)==0;f=+c[i+12>>2];if(O>0){b=0;a=a-O/f}else b=-(O*+c[(_|O>+c[i+48>>2]?i+32|0:i+36|0)>>2])/f;D=+c[H+(U*152|0)+108>>2];f=b*D;a=a*D;if(_|O>+c[i+48>>2]){c[H+(U*152|0)+112>>2]=f+a;c[H+(U*152|0)+128>>2]=0}else{c[H+(U*152|0)+112>>2]=a;c[H+(U*152|0)+128>>2]=f}c[H+(U*152|0)+116>>2]=0;c[H+(U*152|0)+120>>2]=0;c[H+(U*152|0)+124>>2]=1e10;o[H+(U*152|0)+140>>2]=o[e+68>>2];if(!L){s=0;h=0;m=0}else{s=o[L+352>>2]|0;h=o[L+356>>2]|0;m=o[L+360>>2]|0}if(!x){_=0;l=0;d=0}else{_=o[x+352>>2]|0;l=o[x+356>>2]|0;d=o[x+360>>2]|0}b=(o[u>>2]=_,+c[u>>2]);b=b-(o[u>>2]=s,+c[u>>2]);f=(o[u>>2]=l,+c[u>>2]);f=f-(o[u>>2]=h,+c[u>>2]);y=(o[u>>2]=d,+c[u>>2]);y=y-(o[u>>2]=m,+c[u>>2]);c[te+32>>2]=b;c[te+32+4>>2]=f;c[te+32+8>>2]=y;c[te+32+12>>2]=0;do if((r|0)>0?+c[t+4+($*184|0)+88>>2]>0:0){r=r+-1|0;a=+X(+(b*b+f*f+y*y));if(a>+c[i+80>>2]){b=b*(1/a);c[te+32>>2]=b;f=f*(1/a);c[te+32+4>>2]=f;a=y*(1/a);c[te+32+8>>2]=a;do if(z){if(!(o[z+180>>2]&2))break;g=+c[z+4>>2];w=+c[z+20>>2];R=+c[z+36>>2];v=+c[z+8>>2];k=+c[z+24>>2];I=+c[z+40>>2];C=+c[z+12>>2];S=+c[z+28>>2];O=+c[z+44>>2];j=(g*b+w*f+a*R)*+c[z+164>>2];D=(b*v+f*k+a*I)*+c[z+168>>2];a=(b*C+f*S+a*O)*+c[z+172>>2];c[te+32>>2]=g*j+v*D+C*a;c[te+32+4>>2]=w*j+k*D+S*a;c[te+32+8>>2]=R*j+I*D+O*a;c[te+32+12>>2]=0;b=g*j+v*D+C*a;f=w*j+k*D+S*a;a=R*j+I*D+O*a}while(0);do if(Q){if(!(o[Q+180>>2]&2))break;w=+c[Q+4>>2];R=+c[Q+20>>2];g=+c[Q+36>>2];k=+c[Q+8>>2];I=+c[Q+24>>2];v=+c[Q+40>>2];S=+c[Q+12>>2];O=+c[Q+28>>2];C=+c[Q+44>>2];j=(w*b+R*f+g*a)*+c[Q+164>>2];D=(b*k+f*I+a*v)*+c[Q+168>>2];f=(b*S+f*O+a*C)*+c[Q+172>>2];c[te+32>>2]=w*j+k*D+S*f;c[te+32+4>>2]=R*j+I*D+O*f;c[te+32+8>>2]=g*j+v*D+C*f;c[te+32+12>>2]=0;a=g*j+v*D+C*f;b=w*j+k*D+S*f;f=R*j+I*D+O*f}while(0);if(!(+X(+(b*b+f*f+a*a))>.001))break;QM(e,te+32|0,q,J,U,Z);break}QM(e,G,q,J,U,Z);a=+c[V>>2];if(+N(+a)>.7071067690849304){O=+c[E>>2];D=1/+X(+(a*a+O*O));c[te+16>>2]=0;c[te+16+4>>2]=-(D*a);c[te+16+8>>2]=D*O;c[te>>2]=(a*a+O*O)*D;b=+c[G>>2];c[te+4>>2]=-(D*O*b);C=b*-(D*a);f=0;y=-(D*a);v=D*O;g=(a*a+O*O)*D;b=-(D*O*b)}else{g=+c[G>>2];O=+c[E>>2];b=1/+X(+(g*g+O*O));c[te+16>>2]=-(O*b);c[te+16+4>>2]=b*g;c[te+16+8>>2]=0;c[te>>2]=-(b*g*a);c[te+4>>2]=a*-(O*b);C=(g*g+O*O)*b;f=-(O*b);y=b*g;v=0;g=-(b*g*a);b=a*-(O*b)}c[te+8>>2]=C;do if(!z)a=v;else{if(!(o[z+180>>2]&2)){a=v;break}re=+c[z+4>>2];w=+c[z+20>>2];R=+c[z+36>>2];ne=+c[z+8>>2];k=+c[z+24>>2];I=+c[z+40>>2];ie=+c[z+12>>2];S=+c[z+28>>2];O=+c[z+44>>2];j=(re*f+w*y+R*v)*+c[z+164>>2];D=(f*ne+y*k+v*I)*+c[z+168>>2];a=(f*ie+y*S+v*O)*+c[z+172>>2];c[te+16>>2]=re*j+ne*D+ie*a;c[te+16+4>>2]=w*j+k*D+S*a;c[te+16+8>>2]=R*j+I*D+O*a;c[te+16+12>>2]=0;f=re*j+ne*D+ie*a;y=w*j+k*D+S*a;a=R*j+I*D+O*a}while(0);do if(!Q)v=a;else{if(!(o[Q+180>>2]&2)){v=a;break}w=+c[Q+4>>2];R=+c[Q+20>>2];D=+c[Q+36>>2];k=+c[Q+8>>2];j=+c[Q+24>>2];ie=+c[Q+40>>2];S=+c[Q+12>>2];I=+c[Q+28>>2];re=+c[Q+44>>2];O=(w*f+R*y+D*a)*+c[Q+164>>2];ne=(f*k+y*j+a*ie)*+c[Q+168>>2];v=(f*S+y*I+a*re)*+c[Q+172>>2];c[te+16>>2]=w*O+k*ne+S*v;c[te+16+4>>2]=R*O+j*ne+I*v;c[te+16+8>>2]=D*O+ie*ne+re*v;c[te+16+12>>2]=0;f=w*O+k*ne+S*v;y=R*O+j*ne+I*v;v=D*O+ie*ne+re*v}while(0);do if(!z)a=C;else{if(!(o[z+180>>2]&2)){a=C;break}w=+c[z+4>>2];R=+c[z+20>>2];D=+c[z+36>>2];k=+c[z+8>>2];j=+c[z+24>>2];ie=+c[z+40>>2];S=+c[z+12>>2];I=+c[z+28>>2];re=+c[z+44>>2];O=(w*g+R*b+D*C)*+c[z+164>>2];ne=(g*k+b*j+C*ie)*+c[z+168>>2];a=(g*S+b*I+C*re)*+c[z+172>>2];c[te>>2]=w*O+k*ne+S*a;c[te+4>>2]=R*O+j*ne+I*a;c[te+8>>2]=D*O+ie*ne+re*a;c[te+12>>2]=0;g=w*O+k*ne+S*a;b=R*O+j*ne+I*a;a=D*O+ie*ne+re*a}while(0);do if(Q){if(!(o[Q+180>>2]&2))break;w=+c[Q+4>>2];R=+c[Q+20>>2];D=+c[Q+36>>2];k=+c[Q+8>>2];j=+c[Q+24>>2];ie=+c[Q+40>>2];S=+c[Q+12>>2];I=+c[Q+28>>2];re=+c[Q+44>>2];O=(w*g+R*b+D*a)*+c[Q+164>>2];ne=(g*k+b*j+a*ie)*+c[Q+168>>2];a=(g*S+b*I+a*re)*+c[Q+172>>2];c[te>>2]=w*O+k*ne+S*a;c[te+4>>2]=R*O+j*ne+I*a;c[te+8>>2]=D*O+ie*ne+re*a;c[te+12>>2]=0;g=w*O+k*ne+S*a;b=R*O+j*ne+I*a;a=D*O+ie*ne+re*a}while(0);if(+X(+(f*f+y*y+v*v))>.001)QM(e,te+16|0,q,J,U,Z);if(+X(+(g*g+b*b+a*a))>.001)QM(e,te,q,J,U,Z)}while(0);do if(!(o[i+64>>2]&32))ee=95;else{if(!(n[t+4+($*184|0)+116>>0]|0)){ee=95;break}qM(e,t+4+($*184|0)+152|0,q,J,U,Z,te+64|0,te+48|0,1,+c[t+4+($*184|0)+132>>2],+c[t+4+($*184|0)+140>>2]);if(!(o[i+64>>2]&16))break;qM(e,t+4+($*184|0)+168|0,q,J,U,Z,te+64|0,te+48|0,1,+c[t+4+($*184|0)+136>>2],+c[t+4+($*184|0)+144>>2])}while(0);do if((ee|0)==95){ee=0;T=t+4+($*184|0)+152|0;a=+c[G>>2];w=+c[E>>2];C=+c[V>>2];f=F-(F*P+A*W+M*B)*a;g=A-(F*P+A*W+M*B)*w;y=M-(F*P+A*W+M*B)*C;c[t+4+($*184|0)+152>>2]=f;h=t+4+($*184|0)+156|0;c[h>>2]=g;m=t+4+($*184|0)+160|0;c[m>>2]=y;_=t+4+($*184|0)+164|0;c[_>>2]=0;if((o[i+64>>2]&64|0)==0?f*f+g*g+y*y>1.1920928955078125e-7:0){a=1/+X(+(f*f+g*g+y*y));c[T>>2]=f*a;c[h>>2]=a*g;c[m>>2]=a*y;do if(!z){b=f*a;f=a*g;a=a*y}else{if(!(o[z+180>>2]&1)){b=f*a;f=a*g;a=a*y;break}O=+c[z+4>>2];P=+c[z+20>>2];A=+c[z+36>>2];M=+c[z+8>>2];W=+c[z+24>>2];ie=+c[z+40>>2];b=+c[z+12>>2];B=+c[z+28>>2];re=+c[z+44>>2];F=(O*(f*a)+P*(a*g)+a*y*A)*+c[z+164>>2];ne=(f*a*M+a*g*W+a*y*ie)*+c[z+168>>2];a=(f*a*b+a*g*B+a*y*re)*+c[z+172>>2];c[T>>2]=O*F+M*ne+b*a;c[h>>2]=P*F+W*ne+B*a;c[m>>2]=A*F+ie*ne+re*a;c[_>>2]=0;b=O*F+M*ne+b*a;f=P*F+W*ne+B*a;a=A*F+ie*ne+re*a}while(0);do if(Q|0){if(!(o[Q+180>>2]&1))break;I=+c[Q+4>>2];M=+c[Q+20>>2];\nB=+c[Q+36>>2];D=+c[Q+8>>2];P=+c[Q+24>>2];F=+c[Q+40>>2];O=+c[Q+12>>2];W=+c[Q+28>>2];ne=+c[Q+44>>2];A=(I*b+M*f+B*a)*+c[Q+164>>2];ie=(b*D+f*P+a*F)*+c[Q+168>>2];re=(b*O+f*W+a*ne)*+c[Q+172>>2];c[T>>2]=I*A+D*ie+O*re;c[h>>2]=M*A+P*ie+W*re;c[m>>2]=B*A+F*ie+ne*re;c[_>>2]=0}while(0);qM(e,T,q,J,U,Z,te+64|0,te+48|0,1,0,0);if(!(o[i+64>>2]&16))break;d=t+4+($*184|0)+168|0;ne=+c[h>>2];b=+c[V>>2];A=+c[m>>2];F=+c[E>>2];re=+c[G>>2];ie=+c[T>>2];c[t+4+($*184|0)+168>>2]=ne*b-A*F;_=t+4+($*184|0)+172|0;s=t+4+($*184|0)+176|0;l=t+4+($*184|0)+180|0;c[l>>2]=0;f=1/+X(+((ne*b-A*F)*(ne*b-A*F)+(A*re-b*ie)*(A*re-b*ie)+(F*ie-ne*re)*(F*ie-ne*re)));a=(ne*b-A*F)*f;c[d>>2]=a;b=(A*re-b*ie)*f;c[_>>2]=b;f=(F*ie-ne*re)*f;c[s>>2]=f;do if(z){if(!(o[z+180>>2]&1))break;D=+c[z+4>>2];P=+c[z+20>>2];A=+c[z+36>>2];O=+c[z+8>>2];W=+c[z+24>>2];ie=+c[z+40>>2];M=+c[z+12>>2];B=+c[z+28>>2];re=+c[z+44>>2];F=(D*a+P*b+f*A)*+c[z+164>>2];ne=(a*O+b*W+f*ie)*+c[z+168>>2];f=(a*M+b*B+f*re)*+c[z+172>>2];c[d>>2]=D*F+O*ne+M*f;c[_>>2]=P*F+W*ne+B*f;c[s>>2]=A*F+ie*ne+re*f;c[l>>2]=0;a=D*F+O*ne+M*f;b=P*F+W*ne+B*f;f=A*F+ie*ne+re*f}while(0);do if(Q|0){if(!(o[Q+180>>2]&1))break;I=+c[Q+4>>2];M=+c[Q+20>>2];B=+c[Q+36>>2];D=+c[Q+8>>2];P=+c[Q+24>>2];F=+c[Q+40>>2];O=+c[Q+12>>2];W=+c[Q+28>>2];ne=+c[Q+44>>2];A=(I*a+M*b+B*f)*+c[Q+164>>2];ie=(a*D+b*P+f*F)*+c[Q+168>>2];re=(a*O+b*W+f*ne)*+c[Q+172>>2];c[d>>2]=I*A+D*ie+O*re;c[_>>2]=M*A+P*ie+W*re;c[s>>2]=B*A+F*ie+ne*re;c[l>>2]=0}while(0);qM(e,d,q,J,U,Z,te+64|0,te+48|0,1,0,0);break}d=t+4+($*184|0)+168|0;if(+N(+C)>.7071067690849304){re=1/+X(+(C*C+w*w));c[T>>2]=0;c[h>>2]=-(re*C);c[m>>2]=re*w;g=-(re*w*a);v=a*-(re*C);y=(C*C+w*w)*re;b=0;f=-(re*C);a=re*w}else{f=1/+X(+(a*a+w*w));c[T>>2]=-(w*f);c[h>>2]=f*a;c[m>>2]=0;g=C*-(w*f);v=(a*a+w*w)*f;y=-(f*a*C);b=-(w*f);f=f*a;a=0}c[d>>2]=y;l=t+4+($*184|0)+172|0;c[l>>2]=g;s=t+4+($*184|0)+176|0;c[s>>2]=v;do if(z){if(!(o[z+180>>2]&1))break;D=+c[z+4>>2];P=+c[z+20>>2];A=+c[z+36>>2];O=+c[z+8>>2];W=+c[z+24>>2];ie=+c[z+40>>2];M=+c[z+12>>2];B=+c[z+28>>2];re=+c[z+44>>2];F=(D*b+P*f+A*a)*+c[z+164>>2];ne=(b*O+f*W+a*ie)*+c[z+168>>2];a=(b*M+f*B+a*re)*+c[z+172>>2];c[T>>2]=D*F+O*ne+M*a;c[h>>2]=P*F+W*ne+B*a;c[m>>2]=A*F+ie*ne+re*a;c[_>>2]=0;b=D*F+O*ne+M*a;f=P*F+W*ne+B*a;a=A*F+ie*ne+re*a}while(0);do if(Q|0){if(!(o[Q+180>>2]&1))break;I=+c[Q+4>>2];M=+c[Q+20>>2];B=+c[Q+36>>2];D=+c[Q+8>>2];P=+c[Q+24>>2];F=+c[Q+40>>2];O=+c[Q+12>>2];W=+c[Q+28>>2];ne=+c[Q+44>>2];A=(I*b+M*f+B*a)*+c[Q+164>>2];ie=(b*D+f*P+a*F)*+c[Q+168>>2];re=(b*O+f*W+a*ne)*+c[Q+172>>2];c[T>>2]=I*A+D*ie+O*re;c[h>>2]=M*A+P*ie+W*re;c[m>>2]=B*A+F*ie+ne*re;c[_>>2]=0}while(0);qM(e,T,q,J,U,Z,te+64|0,te+48|0,1,0,0);_=o[i+64>>2]|0;if(_&16){do if(z|0){if(!(o[z+180>>2]&1))break;I=+c[z+4>>2];R=+c[d>>2];M=+c[z+20>>2];j=+c[l>>2];B=+c[z+36>>2];re=+c[s>>2];D=+c[z+8>>2];P=+c[z+24>>2];F=+c[z+40>>2];O=+c[z+12>>2];W=+c[z+28>>2];ne=+c[z+44>>2];A=(I*R+M*j+B*re)*+c[z+164>>2];ie=(R*D+j*P+re*F)*+c[z+168>>2];re=(R*O+j*W+re*ne)*+c[z+172>>2];c[d>>2]=I*A+D*ie+O*re;c[l>>2]=M*A+P*ie+W*re;c[s>>2]=B*A+F*ie+ne*re;c[t+4+($*184|0)+180>>2]=0}while(0);do if(Q|0){if(!(o[Q+180>>2]&1))break;I=+c[Q+4>>2];R=+c[d>>2];M=+c[Q+20>>2];j=+c[l>>2];B=+c[Q+36>>2];re=+c[s>>2];D=+c[Q+8>>2];P=+c[Q+24>>2];F=+c[Q+40>>2];O=+c[Q+12>>2];W=+c[Q+28>>2];ne=+c[Q+44>>2];A=(I*R+M*j+B*re)*+c[Q+164>>2];ie=(R*D+j*P+re*F)*+c[Q+168>>2];re=(R*O+j*W+re*ne)*+c[Q+172>>2];c[d>>2]=I*A+D*ie+O*re;c[l>>2]=M*A+P*ie+W*re;c[s>>2]=B*A+F*ie+ne*re;c[t+4+($*184|0)+180>>2]=0}while(0);qM(e,d,q,J,U,Z,te+64|0,te+48|0,1,0,0);_=o[i+64>>2]|0}if((_&80|0)!=80)break;n[t+4+($*184|0)+116>>0]=1}while(0);m=o[e+16>>2]|0;s=o[m+(q*244|0)+240>>2]|0;l=o[m+(J*244|0)+240>>2]|0;d=o[H+(U*152|0)+140>>2]|0;h=o[e+76>>2]|0;_=o[i+64>>2]|0;do if(!(_&4))c[h+(d*152|0)+100>>2]=0;else{a=+c[t+4+($*184|0)+124>>2]*+c[i+60>>2];c[h+(d*152|0)+100>>2]=a;if(s|0){ie=+c[s+368>>2];re=a*(ie*+c[h+(d*152|0)+20>>2]*+c[s+376>>2])*+c[m+(q*244|0)+116>>2];ne=a*(ie*+c[h+(d*152|0)+24>>2]*+c[s+380>>2])*+c[m+(q*244|0)+120>>2];c[m+(q*244|0)+64>>2]=+c[m+(q*244|0)+112>>2]*(a*(ie*+c[h+(d*152|0)+16>>2]*+c[s+372>>2]))+ +c[m+(q*244|0)+64>>2];c[m+(q*244|0)+68>>2]=re+ +c[m+(q*244|0)+68>>2];c[m+(q*244|0)+72>>2]=ne+ +c[m+(q*244|0)+72>>2];ne=a*+c[m+(q*244|0)+100>>2]*+c[h+(d*152|0)+68>>2];re=a*+c[m+(q*244|0)+104>>2]*+c[h+(d*152|0)+72>>2];c[m+(q*244|0)+80>>2]=a*+c[m+(q*244|0)+96>>2]*+c[h+(d*152|0)+64>>2]+ +c[m+(q*244|0)+80>>2];c[m+(q*244|0)+84>>2]=ne+ +c[m+(q*244|0)+84>>2];c[m+(q*244|0)+88>>2]=re+ +c[m+(q*244|0)+88>>2]}if(!l)break;a=+c[l+368>>2];f=+c[h+(d*152|0)+100>>2];if(!(o[m+(J*244|0)+240>>2]|0))break;re=+c[h+(d*152|0)+88>>2];ne=+c[h+(d*152|0)+84>>2];ie=+c[h+(d*152|0)+80>>2];A=f*(a*+c[h+(d*152|0)+52>>2]*+c[l+376>>2])*+c[m+(J*244|0)+116>>2];F=f*(a*+c[h+(d*152|0)+56>>2]*+c[l+380>>2])*+c[m+(J*244|0)+120>>2];c[m+(J*244|0)+64>>2]=+c[m+(J*244|0)+112>>2]*(f*(a*+c[h+(d*152|0)+48>>2]*+c[l+372>>2]))+ +c[m+(J*244|0)+64>>2];c[m+(J*244|0)+68>>2]=A+ +c[m+(J*244|0)+68>>2];c[m+(J*244|0)+72>>2]=F+ +c[m+(J*244|0)+72>>2];ne=ne*(+c[m+(J*244|0)+100>>2]*-f);re=re*(+c[m+(J*244|0)+104>>2]*-f);c[m+(J*244|0)+80>>2]=+c[m+(J*244|0)+80>>2]-ie*(+c[m+(J*244|0)+96>>2]*-f);c[m+(J*244|0)+84>>2]=+c[m+(J*244|0)+84>>2]-ne;c[m+(J*244|0)+88>>2]=+c[m+(J*244|0)+88>>2]-re}while(0);do if(_&16|0){if(!(_&4)){c[h+((d+1|0)*152|0)+100>>2]=0;break}f=+c[t+4+($*184|0)+128>>2]*+c[i+60>>2];c[h+((d+1|0)*152|0)+100>>2]=f;do if(s|0){a=+c[s+368>>2];if(!(o[m+(q*244|0)+240>>2]|0))break;re=f*(a*+c[h+((d+1|0)*152|0)+20>>2])*+c[m+(q*244|0)+116>>2];ne=f*(a*+c[h+((d+1|0)*152|0)+24>>2])*+c[m+(q*244|0)+120>>2];c[m+(q*244|0)+64>>2]=+c[m+(q*244|0)+112>>2]*(f*(a*+c[h+((d+1|0)*152|0)+16>>2]))+ +c[m+(q*244|0)+64>>2];c[m+(q*244|0)+68>>2]=re+ +c[m+(q*244|0)+68>>2];c[m+(q*244|0)+72>>2]=ne+ +c[m+(q*244|0)+72>>2];ne=f*+c[m+(q*244|0)+100>>2]*+c[h+((d+1|0)*152|0)+68>>2];re=f*+c[m+(q*244|0)+104>>2]*+c[h+((d+1|0)*152|0)+72>>2];c[m+(q*244|0)+80>>2]=f*+c[m+(q*244|0)+96>>2]*+c[h+((d+1|0)*152|0)+64>>2]+ +c[m+(q*244|0)+80>>2];c[m+(q*244|0)+84>>2]=ne+ +c[m+(q*244|0)+84>>2];c[m+(q*244|0)+88>>2]=re+ +c[m+(q*244|0)+88>>2]}while(0);if(!l)break;a=+c[l+368>>2];f=+c[h+((d+1|0)*152|0)+100>>2];if(!(o[m+(J*244|0)+240>>2]|0))break;re=+c[h+((d+1|0)*152|0)+88>>2];ne=+c[h+((d+1|0)*152|0)+84>>2];ie=+c[h+((d+1|0)*152|0)+80>>2];A=f*(a*+c[h+((d+1|0)*152|0)+52>>2])*+c[m+(J*244|0)+116>>2];F=f*(a*+c[h+((d+1|0)*152|0)+56>>2])*+c[m+(J*244|0)+120>>2];c[m+(J*244|0)+64>>2]=+c[m+(J*244|0)+112>>2]*(f*(a*+c[h+((d+1|0)*152|0)+48>>2]))+ +c[m+(J*244|0)+64>>2];c[m+(J*244|0)+68>>2]=A+ +c[m+(J*244|0)+68>>2];c[m+(J*244|0)+72>>2]=F+ +c[m+(J*244|0)+72>>2];ne=ne*(+c[m+(J*244|0)+100>>2]*-f);re=re*(+c[m+(J*244|0)+104>>2]*-f);c[m+(J*244|0)+80>>2]=+c[m+(J*244|0)+80>>2]-ie*(+c[m+(J*244|0)+96>>2]*-f);c[m+(J*244|0)+84>>2]=+c[m+(J*244|0)+84>>2]-ne;c[m+(J*244|0)+88>>2]=+c[m+(J*244|0)+88>>2]-re}while(0)}$=$+1|0}while(($|0)<(o[t+748>>2]|0));p=te;return}function zM(e,t,i){e=e|0;t=t|0;i=+i;var n=0,r=0,_=0;r=p;p=p+496|0;n=o[t+212>>2]|0;if((n|0)>-1){e=n;p=r;return e|0}_=(o[t+236>>2]&2|0)==0;n=_?0:t;do if(!_){if(!(+c[n+368>>2]!=0)?(o[n+204>>2]&2|0)==0:0)break;_=o[e+8>>2]|0;Lc(r+244|0,0,244)|0;KM(YM(e+4|0,r+244|0)|0,t,i);o[t+212>>2]=_;p=r;return _|0}while(0);n=o[e+188>>2]|0;if((n|0)>=0){_=n;p=r;return _|0}o[e+188>>2]=o[e+8>>2];Lc(r|0,0,244)|0;KM(YM(e+4|0,r)|0,0,i);_=o[e+188>>2]|0;p=r;return _|0}function YM(e,t){e=e|0;t=t|0;var i=0,r=0,_=0,s=0,a=0,c=0,f=0,p=0;a=o[e+4>>2]|0;if((a|0)==(o[e+8>>2]|0)?(s=a|0?a<<1:1,(a|0)<(s|0)):0){if(!s){i=0;r=a}else{o[5637]=(o[5637]|0)+1;i=Qa((s*244|3)+16|0)|0;if(!i)i=0;else{o[(i+4+15&-16)+-4>>2]=i;i=i+4+15&-16}r=o[e+4>>2]|0}if((r|0)>0){_=0;do{f=i+(_*244|0)|0;c=o[e+12>>2]|0;p=c+(_*244|0)|0;o[f>>2]=o[p>>2];o[f+4>>2]=o[p+4>>2];o[f+8>>2]=o[p+8>>2];o[f+12>>2]=o[p+12>>2];f=i+(_*244|0)+16|0;p=c+(_*244|0)+16|0;o[f>>2]=o[p>>2];o[f+4>>2]=o[p+4>>2];o[f+8>>2]=o[p+8>>2];o[f+12>>2]=o[p+12>>2];f=i+(_*244|0)+32|0;p=c+(_*244|0)+32|0;o[f>>2]=o[p>>2];o[f+4>>2]=o[p+4>>2];o[f+8>>2]=o[p+8>>2];o[f+12>>2]=o[p+12>>2];f=i+(_*244|0)+48|0;p=c+(_*244|0)+48|0;o[f>>2]=o[p>>2];o[f+4>>2]=o[p+4>>2];o[f+8>>2]=o[p+8>>2];o[f+12>>2]=o[p+12>>2];Wc(i+(_*244|0)+64|0,c+(_*244|0)+64|0,180)|0;_=_+1|0}while((_|0)!=(r|0))}r=o[e+12>>2]|0;if(r|0){if(n[e+16>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[r+-4>>2]|0)}o[e+12>>2]=0}n[e+16>>0]=1;o[e+12>>2]=i;o[e+8>>2]=s;i=o[e+4>>2]|0}else i=a;o[e+4>>2]=i+1;p=o[e+12>>2]|0;o[p+(a*244|0)>>2]=o[t>>2];o[p+(a*244|0)+4>>2]=o[t+4>>2];o[p+(a*244|0)+8>>2]=o[t+8>>2];o[p+(a*244|0)+12>>2]=o[t+12>>2];o[p+(a*244|0)+16>>2]=o[t+16>>2];o[p+(a*244|0)+16+4>>2]=o[t+16+4>>2];o[p+(a*244|0)+16+8>>2]=o[t+16+8>>2];o[p+(a*244|0)+16+12>>2]=o[t+16+12>>2];o[p+(a*244|0)+32>>2]=o[t+32>>2];o[p+(a*244|0)+32+4>>2]=o[t+32+4>>2];o[p+(a*244|0)+32+8>>2]=o[t+32+8>>2];o[p+(a*244|0)+32+12>>2]=o[t+32+12>>2];o[p+(a*244|0)+48>>2]=o[t+48>>2];o[p+(a*244|0)+48+4>>2]=o[t+48+4>>2];o[p+(a*244|0)+48+8>>2]=o[t+48+8>>2];o[p+(a*244|0)+48+12>>2]=o[t+48+12>>2];Wc(p+(a*244|0)+64|0,t+64|0,180)|0;return(o[e+12>>2]|0)+(a*244|0)|0}function KM(e,t,i){e=e|0;t=t|0;i=+i;var n=0,r=0,_=0,s=0,a=0,f=0,p=0,l=0;if(!t)t=0;else t=(o[t+236>>2]&2|0)==0?0:t;o[e+64>>2]=0;o[e+64+4>>2]=0;o[e+64+8>>2]=0;o[e+64+12>>2]=0;o[e+64+16>>2]=0;o[e+64+20>>2]=0;o[e+64+24>>2]=0;o[e+64+28>>2]=0;o[e+144>>2]=0;o[e+144+4>>2]=0;o[e+144+8>>2]=0;o[e+144+12>>2]=0;o[e+144+16>>2]=0;o[e+144+20>>2]=0;o[e+144+24>>2]=0;o[e+144+28>>2]=0;if(!t){o[e>>2]=1065353216;o[e+4>>2]=0;o[e+4+4>>2]=0;o[e+4+8>>2]=0;o[e+4+12>>2]=0;o[e+20>>2]=1065353216;o[e+24>>2]=0;o[e+24+4>>2]=0;o[e+24+8>>2]=0;o[e+24+12>>2]=0;o[e+40>>2]=1065353216;o[e+44>>2]=0;o[e+44+4>>2]=0;o[e+44+8>>2]=0;o[e+44+12>>2]=0;o[e+44+16>>2]=0;o[e+240>>2]=0;o[e+128>>2]=0;o[e+128+4>>2]=0;o[e+128+8>>2]=0;o[e+128+12>>2]=0;o[e+96>>2]=1065353216;o[e+100>>2]=1065353216;o[e+104>>2]=1065353216;c[e+108>>2]=0;o[e+112>>2]=1065353216;o[e+116>>2]=1065353216;o[e+120>>2]=1065353216;c[e+124>>2]=0;t=e+176|0;n=t+60|0;do{o[t>>2]=0;t=t+4|0}while((t|0)<(n|0));e=e+236|0;c[e>>2]=0;return}else{n=t+4|0;o[e>>2]=o[n>>2];o[e+4>>2]=o[n+4>>2];o[e+8>>2]=o[n+8>>2];o[e+12>>2]=o[n+12>>2];n=t+20|0;o[e+16>>2]=o[n>>2];o[e+16+4>>2]=o[n+4>>2];o[e+16+8>>2]=o[n+8>>2];o[e+16+12>>2]=o[n+12>>2];n=t+36|0;o[e+32>>2]=o[n>>2];o[e+32+4>>2]=o[n+4>>2];o[e+32+8>>2]=o[n+8>>2];o[e+32+12>>2]=o[n+12>>2];n=t+52|0;o[e+48>>2]=o[n>>2];o[e+48+4>>2]=o[n+4>>2];o[e+48+8>>2]=o[n+8>>2];o[e+48+12>>2]=o[n+12>>2];n=t+368|0;f=+c[n>>2];p=t+372|0;a=f*+c[t+376>>2];s=f*+c[t+380>>2];c[e+128>>2]=f*+c[p>>2];c[e+132>>2]=a;c[e+136>>2]=s;c[e+140>>2]=0;o[e+240>>2]=t;l=t+568|0;o[e+96>>2]=o[l>>2];o[e+96+4>>2]=o[l+4>>2];o[e+96+8>>2]=o[l+8>>2];o[e+96+12>>2]=o[l+12>>2];o[e+112>>2]=o[p>>2];o[e+112+4>>2]=o[p+4>>2];o[e+112+8>>2]=o[p+8>>2];o[e+112+12>>2]=o[p+12>>2];p=t+336|0;o[e+176>>2]=o[p>>2];o[e+176+4>>2]=o[p+4>>2];o[e+176+8>>2]=o[p+8>>2];o[e+176+12>>2]=o[p+12>>2];p=t+352|0;o[e+192>>2]=o[p>>2];o[e+192+4>>2]=o[p+4>>2];o[e+192+8>>2]=o[p+8>>2];o[e+192+12>>2]=o[p+12>>2];s=+c[n>>2];a=s*+c[t+440>>2]*i;f=s*+c[t+444>>2]*i;c[e+208>>2]=s*+c[t+436>>2]*i;c[e+212>>2]=a;c[e+216>>2]=f;c[e+220>>2]=0;f=+c[t+452>>2];a=+c[t+456>>2];s=+c[t+460>>2];_=(f*+c[t+292>>2]+a*+c[t+308>>2]+s*+c[t+324>>2])*i;r=(f*+c[t+296>>2]+a*+c[t+312>>2]+s*+c[t+328>>2])*i;c[e+224>>2]=(+c[t+288>>2]*f+ +c[t+304>>2]*a+ +c[t+320>>2]*s)*i;c[e+228>>2]=_;c[e+232>>2]=r;e=e+236|0;c[e>>2]=0;return}}function QM(e,t,i,r,_,s){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;var a=0,f=0,p=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0;D=o[e+88>>2]|0;if((D|0)==(o[e+92>>2]|0)?(b=D|0?D<<1:1,(D|0)<(b|0)):0){if(!b){a=0;f=D}else{o[5637]=(o[5637]|0)+1;a=Qa((b*152|3)+16|0)|0;if(!a)a=0;else{o[(a+4+15&-16)+-4>>2]=a;a=a+4+15&-16}f=o[e+88>>2]|0}if((f|0)>0){p=0;do{Wc(a+(p*152|0)|0,(o[e+96>>2]|0)+(p*152|0)|0,152)|0;p=p+1|0}while((p|0)!=(f|0))}f=o[e+96>>2]|0;if(f|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[f+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=a;o[e+92>>2]=b;a=o[e+88>>2]|0}else a=D;o[e+88>>2]=a+1;T=o[e+96>>2]|0;o[T+(D*152|0)+140>>2]=_;o[T+(D*152|0)+16>>2]=0;o[T+(D*152|0)+16+4>>2]=0;o[T+(D*152|0)+16+8>>2]=0;o[T+(D*152|0)+16+12>>2]=0;c[T+(D*152|0)+48>>2]=-0;c[T+(D*152|0)+52>>2]=-0;c[T+(D*152|0)+56>>2]=-0;c[T+(D*152|0)+60>>2]=0;e=o[e+16>>2]|0;b=o[e+(i*244|0)+240>>2]|0;I=o[e+(r*244|0)+240>>2]|0;o[T+(D*152|0)+144>>2]=i;o[T+(D*152|0)+148>>2]=r;_=o[s+88>>2]|0;o[T+(D*152|0)+104>>2]=_;o[T+(D*152|0)+132>>2]=0;c[T+(D*152|0)+100>>2]=0;c[T+(D*152|0)+96>>2]=0;k=-+c[t>>2];S=-+c[t+4>>2];R=-+c[t+8>>2];c[T+(D*152|0)>>2]=k;c[T+(D*152|0)+4>>2]=S;c[T+(D*152|0)+8>>2]=R;c[T+(D*152|0)+12>>2]=0;j=(o[u>>2]=_,+c[u>>2]);if(b|0){a=(c[u>>2]=(+c[b+288>>2]*k+ +c[b+292>>2]*S+ +c[b+296>>2]*R)*+c[b+568>>2],o[u>>2]|0);f=(c[u>>2]=(+c[b+304>>2]*k+ +c[b+308>>2]*S+ +c[b+312>>2]*R)*+c[b+572>>2],o[u>>2]|0);p=(c[u>>2]=(+c[b+320>>2]*k+ +c[b+324>>2]*S+ +c[b+328>>2]*R)*+c[b+576>>2],o[u>>2]|0)}else{a=0;f=0;p=0}o[T+(D*152|0)+64>>2]=a;o[T+(D*152|0)+68>>2]=f;o[T+(D*152|0)+72>>2]=p;c[T+(D*152|0)+76>>2]=0;v=+c[t>>2];C=+c[t+4>>2];w=+c[t+8>>2];t=o[t+12>>2]|0;c[T+(D*152|0)+32>>2]=v;c[T+(D*152|0)+36>>2]=C;c[T+(D*152|0)+40>>2]=w;o[T+(D*152|0)+44>>2]=t;if(I|0){a=(c[u>>2]=(v*+c[I+288>>2]+C*+c[I+292>>2]+w*+c[I+296>>2])*+c[I+568>>2],o[u>>2]|0);f=(c[u>>2]=(v*+c[I+304>>2]+C*+c[I+308>>2]+w*+c[I+312>>2])*+c[I+572>>2],o[u>>2]|0);p=(c[u>>2]=(v*+c[I+320>>2]+C*+c[I+324>>2]+w*+c[I+328>>2])*+c[I+576>>2],o[u>>2]|0)}else{a=0;f=0;p=0}o[T+(D*152|0)+80>>2]=a;o[T+(D*152|0)+84>>2]=f;o[T+(D*152|0)+88>>2]=p;c[T+(D*152|0)+92>>2]=0;if(b|0){l=+c[b+288>>2]*k+ +c[b+292>>2]*S+ +c[b+296>>2]*R;d=+c[b+304>>2]*k+ +c[b+308>>2]*S+ +c[b+312>>2]*R;h=+c[b+320>>2]*k+ +c[b+324>>2]*S+ +c[b+328>>2]*R}else{l=0;d=0;h=0}if(I|0){m=+c[I+288>>2]*v+ +c[I+292>>2]*C+ +c[I+296>>2]*w;y=v*+c[I+304>>2]+C*+c[I+308>>2]+w*+c[I+312>>2];g=v*+c[I+320>>2]+C*+c[I+324>>2]+w*+c[I+328>>2]}else{m=0;y=0;g=0}y=1/(l*k+d*S+h*R+0+(m*v+y*C+g*w));c[T+(D*152|0)+108>>2]=y;if(b|0){d=+c[e+(i*244|0)+192>>2];h=+c[e+(i*244|0)+196>>2];m=+c[e+(i*244|0)+200>>2];l=(+c[e+(i*244|0)+176>>2]+ +c[e+(i*244|0)+208>>2])*0+(+c[e+(i*244|0)+180>>2]+ +c[e+(i*244|0)+212>>2])*0+(+c[e+(i*244|0)+184>>2]+ +c[e+(i*244|0)+216>>2])*0}else{d=0;h=0;m=0;l=0}l=l+(d*k+h*S+m*R);if(!I){g=0;k=0;R=0;S=-0;v=g*v;k=k*C;k=v+k;R=R*w;R=k+R;R=S+R;R=l+R;R=0-R;R=y*R;r=T+(D*152|0)+112|0;c[r>>2]=R;r=T+(D*152|0)+116|0;c[r>>2]=0;j=-j;r=T+(D*152|0)+120|0;c[r>>2]=j;r=T+(D*152|0)+124|0;o[r>>2]=_;return}g=+c[e+(r*244|0)+192>>2];k=+c[e+(r*244|0)+196>>2];R=+c[e+(r*244|0)+200>>2];S=(+c[e+(r*244|0)+176>>2]+ +c[e+(r*244|0)+208>>2])*-0+(+c[e+(r*244|0)+180>>2]+ +c[e+(r*244|0)+212>>2])*-0+(+c[e+(r*244|0)+184>>2]+ +c[e+(r*244|0)+216>>2])*-0;v=g*v;k=k*C;k=v+k;R=R*w;R=k+R;R=S+R;R=l+R;R=0-R;R=y*R;r=T+(D*152|0)+112|0;c[r>>2]=R;r=T+(D*152|0)+116|0;c[r>>2]=0;j=-j;r=T+(D*152|0)+120|0;c[r>>2]=j;r=T+(D*152|0)+124|0;o[r>>2]=_;return}function qM(e,t,i,r,_,s,a,f,p,l,b){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;p=+p;l=+l;b=+b;var d=0,h=0,m=0,y=0,g=0,v=0,C=0,w=0,k=0,S=0,R=0,j=0,I=0,T=0,D=0,O=0,L=0,x=0,M=0,P=0,W=0,B=0,A=0,F=0,G=0,E=0,V=0,N=0,X=0;G=o[e+68>>2]|0;if((G|0)==(o[e+72>>2]|0)?(g=G|0?G<<1:1,(G|0)<(g|0)):0){if(!g){d=0;h=G}else{o[5637]=(o[5637]|0)+1;d=Qa((g*152|3)+16|0)|0;if(!d)d=0;else{o[(d+4+15&-16)+-4>>2]=d;d=d+4+15&-16}h=o[e+68>>2]|0}if((h|0)>0){m=0;do{Wc(d+(m*152|0)|0,(o[e+76>>2]|0)+(m*152|0)|0,152)|0;m=m+1|0}while((m|0)!=(h|0))}h=o[e+76>>2]|0;if(h|0){if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[h+-4>>2]|0)}o[e+76>>2]=0}n[e+80>>0]=1;o[e+76>>2]=d;o[e+72>>2]=g;d=o[e+68>>2]|0}else d=G;o[e+68>>2]=d+1;F=o[e+76>>2]|0;o[F+(G*152|0)+140>>2]=_;m=o[e+16>>2]|0;d=o[m+(i*244|0)+240>>2]|0;g=o[m+(r*244|0)+240>>2]|0;o[F+(G*152|0)+144>>2]=i;o[F+(G*152|0)+148>>2]=r;h=o[s+84>>2]|0;o[F+(G*152|0)+104>>2]=h;o[F+(G*152|0)+132>>2]=0;c[F+(G*152|0)+100>>2]=0;c[F+(G*152|0)+96>>2]=0;A=(o[u>>2]=h,+c[u>>2]);if(d|0){o[F+(G*152|0)+16>>2]=o[t>>2];o[F+(G*152|0)+16+4>>2]=o[t+4>>2];o[F+(G*152|0)+16+8>>2]=o[t+8>>2];o[F+(G*152|0)+16+12>>2]=o[t+12>>2];B=+c[a+4>>2];D=+c[F+(G*152|0)+24>>2];M=+c[a+8>>2];P=+c[F+(G*152|0)+20>>2];O=+c[F+(G*152|0)+16>>2];W=+c[a>>2];c[F+(G*152|0)>>2]=B*D-M*P;c[F+(G*152|0)+4>>2]=M*O-D*W;c[F+(G*152|0)+8>>2]=P*W-B*O;c[F+(G*152|0)+12>>2]=0;C=((B*D-M*P)*+c[d+288>>2]+(M*O-D*W)*+c[d+292>>2]+(P*W-B*O)*+c[d+296>>2])*+c[d+568>>2];y=((B*D-M*P)*+c[d+304>>2]+(M*O-D*W)*+c[d+308>>2]+(P*W-B*O)*+c[d+312>>2])*+c[d+572>>2];v=((B*D-M*P)*+c[d+320>>2]+(M*O-D*W)*+c[d+324>>2]+(P*W-B*O)*+c[d+328>>2])*+c[d+576>>2];c[F+(G*152|0)+64>>2]=C;c[F+(G*152|0)+68>>2]=y;c[F+(G*152|0)+72>>2]=v;c[F+(G*152|0)+76>>2]=0;R=O;j=P;I=D;T=B*D-M*P;D=M*O-D*W;O=P*W-B*O}else{o[F+(G*152|0)+64>>2]=0;o[F+(G*152|0)+64+4>>2]=0;o[F+(G*152|0)+64+8>>2]=0;o[F+(G*152|0)+64+12>>2]=0;o[F+(G*152|0)>>2]=0;o[F+(G*152|0)+4>>2]=0;o[F+(G*152|0)+8>>2]=0;o[F+(G*152|0)+12>>2]=0;o[F+(G*152|0)+16>>2]=0;o[F+(G*152|0)+20>>2]=0;o[F+(G*152|0)+24>>2]=0;o[F+(G*152|0)+28>>2]=0;y=0;v=0;C=0;R=0;j=0;I=0;T=0;D=0;O=0}if(g|0){B=-+c[t>>2];V=-+c[t+4>>2];W=-+c[t+8>>2];c[F+(G*152|0)+48>>2]=B;c[F+(G*152|0)+52>>2]=V;c[F+(G*152|0)+56>>2]=W;c[F+(G*152|0)+60>>2]=0;E=+c[f+4>>2];X=+c[f+8>>2];N=+c[f>>2];c[F+(G*152|0)+32>>2]=E*W-X*V;c[F+(G*152|0)+36>>2]=X*B-N*W;c[F+(G*152|0)+40>>2]=N*V-E*B;c[F+(G*152|0)+44>>2]=0;w=((E*W-X*V)*+c[g+288>>2]+(X*B-N*W)*+c[g+292>>2]+(N*V-E*B)*+c[g+296>>2])*+c[g+568>>2];k=((E*W-X*V)*+c[g+304>>2]+(X*B-N*W)*+c[g+308>>2]+(N*V-E*B)*+c[g+312>>2])*+c[g+572>>2];S=((E*W-X*V)*+c[g+320>>2]+(X*B-N*W)*+c[g+324>>2]+(N*V-E*B)*+c[g+328>>2])*+c[g+576>>2];c[F+(G*152|0)+80>>2]=w;c[F+(G*152|0)+84>>2]=k;c[F+(G*152|0)+88>>2]=S;c[F+(G*152|0)+92>>2]=0;L=B;x=V;M=W;P=E*W-X*V;W=X*B-N*W;B=N*V-E*B}else{o[F+(G*152|0)+80>>2]=0;o[F+(G*152|0)+80+4>>2]=0;o[F+(G*152|0)+80+8>>2]=0;o[F+(G*152|0)+80+12>>2]=0;o[F+(G*152|0)+32>>2]=0;o[F+(G*152|0)+32+4>>2]=0;o[F+(G*152|0)+32+8>>2]=0;o[F+(G*152|0)+32+12>>2]=0;o[F+(G*152|0)+32+16>>2]=0;o[F+(G*152|0)+32+20>>2]=0;o[F+(G*152|0)+32+24>>2]=0;o[F+(G*152|0)+32+28>>2]=0;w=0;k=0;S=0;L=0;x=0;M=0;P=0;W=0;B=0}if(d|0){V=+c[a+8>>2];N=+c[a+4>>2];X=+c[a>>2];v=+c[d+368>>2]+((y*V-v*N)*+c[t>>2]+(v*X-V*C)*+c[t+4>>2]+(N*C-y*X)*+c[t+8>>2])}else v=0;if(g|0){N=-w;y=-k;S=-S;E=+c[f+8>>2];V=+c[f+4>>2];X=+c[f>>2];y=+c[g+368>>2]+((E*y-V*S)*+c[t>>2]+(X*S-E*N)*+c[t+4>>2]+(V*N-X*y)*+c[t+8>>2])}else y=0;k=p/(v+y);c[F+(G*152|0)+108>>2]=k;if(d|0){v=+c[m+(i*244|0)+192>>2];C=+c[m+(i*244|0)+196>>2];w=+c[m+(i*244|0)+200>>2];y=(+c[m+(i*244|0)+176>>2]+ +c[m+(i*244|0)+208>>2])*R+(+c[m+(i*244|0)+180>>2]+ +c[m+(i*244|0)+212>>2])*j+(+c[m+(i*244|0)+184>>2]+ +c[m+(i*244|0)+216>>2])*I}else{v=0;C=0;w=0;y=R*0+j*0+I*0}y=y+(v*T+C*D+w*O);if(g|0){E=+c[m+(r*244|0)+192>>2];V=+c[m+(r*244|0)+196>>2];X=+c[m+(r*244|0)+200>>2];N=(+c[m+(r*244|0)+176>>2]+ +c[m+(r*244|0)+208>>2])*L+(+c[m+(r*244|0)+180>>2]+ +c[m+(r*244|0)+212>>2])*x+(+c[m+(r*244|0)+184>>2]+ +c[m+(r*244|0)+216>>2])*M;E=E*P;V=V*W;V=E+V;X=X*B;X=V+X;X=N+X;X=y+X;X=l-X;X=k*X;r=F+(G*152|0)+112|0;c[r>>2]=X;r=F+(G*152|0)+128|0;c[r>>2]=0;r=F+(G*152|0)+116|0;c[r>>2]=b;X=-A;r=F+(G*152|0)+120|0;c[r>>2]=X;r=F+(G*152|0)+124|0;o[r>>2]=h;return}else{E=0;V=0;X=0;N=L*0+x*0+M*0;E=E*P;V=V*W;V=E+V;X=X*B;X=V+X;X=N+X;X=y+X;X=l-X;X=k*X;r=F+(G*152|0)+112|0;c[r>>2]=X;r=F+(G*152|0)+128|0;c[r>>2]=0;r=F+(G*152|0)+116|0;c[r>>2]=b;X=-A;r=F+(G*152|0)+120|0;c[r>>2]=X;r=F+(G*152|0)+124|0;o[r>>2]=h;return}}function JM(e,t,i,n,r,_,s,a,c){e=e|0;t=t|0;i=i|0;n=n|0;r=r|0;_=_|0;s=s|0;a=a|0;c=c|0;if(!(o[a+44>>2]|0))return;t=o[a+20>>2]|0;if(!(o[a+64>>2]&256)){if((t|0)<=0)return;c=0;do{_=o[e+28>>2]|0;if((_|0)>0){t=0;do{r=o[(o[e+116>>2]|0)+(t<<2)>>2]|0;s=o[e+36>>2]|0;i=o[e+16>>2]|0;$M(i+((o[s+(r*152|0)+144>>2]|0)*244|0)|0,i+((o[s+(r*152|0)+148>>2]|0)*244|0)|0,s+(r*152|0)|0);t=t+1|0}while((t|0)!=(_|0));t=o[a+20>>2]|0}c=c+1|0}while((c|0)<(t|0));return}else{if((t|0)<=0)return;c=0;do{_=o[e+28>>2]|0;if((_|0)>0){t=0;do{r=o[(o[e+116>>2]|0)+(t<<2)>>2]|0;s=o[e+36>>2]|0;i=o[e+16>>2]|0;$M(i+((o[s+(r*152|0)+144>>2]|0)*244|0)|0,i+((o[s+(r*152|0)+148>>2]|0)*244|0)|0,s+(r*152|0)|0);t=t+1|0}while((t|0)!=(_|0));t=o[a+20>>2]|0}c=c+1|0}while((c|0)<(t|0));return}}function $M(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0;n=+c[i+128>>2];if(!(n!=0))return;o[5314]=(o[5314]|0)+1;f=+c[i+96>>2];r=+c[i+16>>2];_=+c[i+20>>2];s=+c[i+24>>2];a=+c[i+108>>2];a=n-f*+c[i+116>>2]-(r*+c[e+144>>2]+_*+c[e+148>>2]+s*+c[e+152>>2]+(+c[i>>2]*+c[e+160>>2]+ +c[i+4>>2]*+c[e+164>>2]+ +c[i+8>>2]*+c[e+168>>2]))*a-a*(+c[i+48>>2]*+c[t+144>>2]+ +c[i+52>>2]*+c[t+148>>2]+ +c[i+56>>2]*+c[t+152>>2]+(+c[i+32>>2]*+c[t+160>>2]+ +c[i+36>>2]*+c[t+164>>2]+ +c[i+40>>2]*+c[t+168>>2]));p=+c[i+120>>2];n=f+a<p?p-f:a;c[i+96>>2]=f+a<p?p:f+a;if(o[e+240>>2]|0){p=n*(_*+c[e+132>>2])*+c[e+116>>2];f=n*(s*+c[e+136>>2])*+c[e+120>>2];c[e+144>>2]=+c[e+112>>2]*(n*(r*+c[e+128>>2]))+ +c[e+144>>2];c[e+148>>2]=p+ +c[e+148>>2];c[e+152>>2]=f+ +c[e+152>>2];f=n*+c[e+100>>2]*+c[i+68>>2];p=n*+c[e+104>>2]*+c[i+72>>2];c[e+160>>2]=n*+c[e+96>>2]*+c[i+64>>2]+ +c[e+160>>2];c[e+164>>2]=f+ +c[e+164>>2];c[e+168>>2]=p+ +c[e+168>>2]}if(!(o[t+240>>2]|0))return;p=n*(+c[i+52>>2]*+c[t+132>>2])*+c[t+116>>2];f=n*(+c[i+56>>2]*+c[t+136>>2])*+c[t+120>>2];c[t+144>>2]=+c[t+112>>2]*(n*(+c[i+48>>2]*+c[t+128>>2]))+ +c[t+144>>2];c[t+148>>2]=p+ +c[t+148>>2];c[t+152>>2]=f+ +c[t+152>>2];f=n*+c[t+100>>2]*+c[i+84>>2];p=n*+c[t+104>>2]*+c[i+88>>2];c[t+160>>2]=n*+c[t+96>>2]*+c[i+80>>2]+ +c[t+160>>2];c[t+164>>2]=f+ +c[t+164>>2];c[t+168>>2]=p+ +c[t+168>>2];return}function eP(e,t,i,r){e=e|0;t=t|0;i=i|0;r=r|0;var _=0,s=0,a=0,f=0,l=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;m=p;p=p+80|0;s=o[e+28>>2]|0;t=o[r+64>>2]|0;e:do if((t&4|0)!=0&(s|0)>0){a=o[e+36>>2]|0;_=o[e+76>>2]|0;if(!(t&16)){t=0;while(1){f=o[a+(t*152|0)+132>>2]|0;o[f+120>>2]=o[a+(t*152|0)+100>>2];o[f+124>>2]=o[_+((o[a+(t*152|0)+140>>2]|0)*152|0)+100>>2];t=t+1|0;if((t|0)==(s|0))break e}}else{i=_;t=0}while(1){f=o[a+(t*152|0)+132>>2]|0;o[f+120>>2]=o[a+(t*152|0)+100>>2];y=o[a+(t*152|0)+140>>2]|0;o[f+124>>2]=o[_+(y*152|0)+100>>2];o[f+128>>2]=o[i+((y+1|0)*152|0)+100>>2];t=t+1|0;if((t|0)==(s|0))break e;i=o[e+76>>2]|0}}while(0);i=o[e+48>>2]|0;if((i|0)>0){f=0;do{_=o[e+56>>2]|0;s=o[_+(f*152|0)+132>>2]|0;a=o[s+44>>2]|0;t=_+(f*152|0)+100|0;if(a|0){h=+c[t>>2];y=o[s+28>>2]|0;d=1/+c[r+12>>2];b=h*+c[_+(f*152|0)+20>>2]*+c[y+376>>2]*d;l=h*+c[_+(f*152|0)+24>>2]*+c[y+380>>2]*d;c[a>>2]=+c[a>>2]+ +c[_+(f*152|0)+16>>2]*h*+c[y+372>>2]*d;c[a+4>>2]=b+ +c[a+4>>2];c[a+8>>2]=l+ +c[a+8>>2];l=+c[t>>2];y=o[s+32>>2]|0;b=1/+c[r+12>>2];d=l*+c[_+(f*152|0)+52>>2]*+c[y+376>>2]*b;h=l*+c[_+(f*152|0)+56>>2]*+c[y+380>>2]*b;c[a+32>>2]=+c[a+32>>2]+ +c[_+(f*152|0)+48>>2]*l*+c[y+372>>2]*b;c[a+36>>2]=d+ +c[a+36>>2];c[a+40>>2]=h+ +c[a+40>>2];y=o[s+28>>2]|0;h=+c[t>>2];d=1/+c[r+12>>2];b=+c[_+(f*152|0)+4>>2]*+c[y+572>>2]*h*d;l=h*(+c[_+(f*152|0)+8>>2]*+c[y+576>>2])*d;c[a+16>>2]=+c[a+16>>2]+ +c[_+(f*152|0)>>2]*+c[y+568>>2]*h*d;c[a+20>>2]=b+ +c[a+20>>2];c[a+24>>2]=l+ +c[a+24>>2];y=o[s+32>>2]|0;l=+c[t>>2];b=1/+c[r+12>>2];d=+c[_+(f*152|0)+36>>2]*+c[y+572>>2]*l*b;h=l*(+c[_+(f*152|0)+40>>2]*+c[y+576>>2])*b;c[a+48>>2]=+c[a+48>>2]+ +c[_+(f*152|0)+32>>2]*+c[y+568>>2]*l*b;c[a+52>>2]=d+ +c[a+52>>2];c[a+56>>2]=h+ +c[a+56>>2]}y=o[t>>2]|0;o[s+36>>2]=y;h=+N(+(o[u>>2]=y,+c[u>>2]));if(h>=+c[s+16>>2])n[s+20>>0]=0;f=f+1|0}while((f|0)!=(i|0))}t=o[e+8>>2]|0;if((t|0)>0){a=0;do{i=o[e+16>>2]|0;_=i+(a*244|0)|0;s=o[i+(a*244|0)+240>>2]|0;if(s){if(!(o[r+44>>2]|0)){_=i+(a*244|0)+176|0;b=+c[i+(a*244|0)+64>>2]+ +c[_>>2];c[_>>2]=b;_=i+(a*244|0)+180|0;d=+c[i+(a*244|0)+68>>2]+ +c[_>>2];c[_>>2]=d;_=i+(a*244|0)+184|0;l=+c[i+(a*244|0)+72>>2]+ +c[_>>2];c[_>>2]=l;_=i+(a*244|0)+192|0;c[_>>2]=+c[i+(a*244|0)+80>>2]+ +c[_>>2];_=i+(a*244|0)+196|0;c[_>>2]=+c[i+(a*244|0)+84>>2]+ +c[_>>2];_=i+(a*244|0)+200|0;c[_>>2]=+c[i+(a*244|0)+88>>2]+ +c[_>>2];_=i;t=s}else{b=+c[r+12>>2];d=+c[r+52>>2];y=i+(a*244|0)+176|0;c[y>>2]=+c[i+(a*244|0)+64>>2]+ +c[y>>2];y=i+(a*244|0)+180|0;c[y>>2]=+c[i+(a*244|0)+68>>2]+ +c[y>>2];y=i+(a*244|0)+184|0;c[y>>2]=+c[i+(a*244|0)+72>>2]+ +c[y>>2];y=i+(a*244|0)+192|0;c[y>>2]=+c[i+(a*244|0)+80>>2]+ +c[y>>2];y=i+(a*244|0)+196|0;c[y>>2]=+c[i+(a*244|0)+84>>2]+ +c[y>>2];y=i+(a*244|0)+200|0;c[y>>2]=+c[i+(a*244|0)+88>>2]+ +c[y>>2];h=+c[i+(a*244|0)+144>>2];l=+c[i+(a*244|0)+148>>2];if((((!(h!=0|l!=0)?!(+c[i+(a*244|0)+152>>2]!=0):0)?!(+c[i+(a*244|0)+160>>2]!=0):0)?!(+c[i+(a*244|0)+164>>2]!=0):0)?!(+c[i+(a*244|0)+168>>2]!=0):0)t=s;else{v=+c[i+(a*244|0)+164>>2]*d;g=+c[i+(a*244|0)+168>>2]*d;c[m>>2]=+c[i+(a*244|0)+160>>2]*d;c[m+4>>2]=v;c[m+8>>2]=g;c[m+12>>2]=0;Ev(_,h,l,+c[i+(a*244|0)+152>>2],m,b,m+16|0);o[_>>2]=o[m+16>>2];o[_+4>>2]=o[m+16+4>>2];o[_+8>>2]=o[m+16+8>>2];o[_+12>>2]=o[m+16+12>>2];t=i+(a*244|0)+16|0;o[t>>2]=o[m+16+16>>2];o[t+4>>2]=o[m+16+16+4>>2];o[t+8>>2]=o[m+16+16+8>>2];o[t+12>>2]=o[m+16+16+12>>2];t=i+(a*244|0)+32|0;o[t>>2]=o[m+16+32>>2];o[t+4>>2]=o[m+16+32+4>>2];o[t+8>>2]=o[m+16+32+8>>2];o[t+12>>2]=o[m+16+32+12>>2];t=i+(a*244|0)+48|0;o[t>>2]=o[m+16+48>>2];o[t+4>>2]=o[m+16+48+4>>2];o[t+8>>2]=o[m+16+48+8>>2];o[t+12>>2]=o[m+16+48+12>>2];t=o[e+16>>2]|0;i=t;t=o[t+(a*244|0)+240>>2]|0}_=i;b=+c[i+(a*244|0)+176>>2];d=+c[i+(a*244|0)+180>>2];l=+c[i+(a*244|0)+184>>2]}v=b+ +c[_+(a*244|0)+208>>2];g=d+ +c[_+(a*244|0)+212>>2];h=l+ +c[_+(a*244|0)+216>>2];f=t+284|0;o[f>>2]=(o[f>>2]|0)+1;c[t+336>>2]=v;c[t+340>>2]=g;c[t+344>>2]=h;c[t+348>>2]=0;f=o[e+16>>2]|0;y=o[f+(a*244|0)+240>>2]|0;h=+c[f+(a*244|0)+192>>2]+ +c[f+(a*244|0)+224>>2];g=+c[f+(a*244|0)+196>>2]+ +c[f+(a*244|0)+228>>2];v=+c[f+(a*244|0)+200>>2]+ +c[f+(a*244|0)+232>>2];o[y+284>>2]=(o[y+284>>2]|0)+1;c[y+352>>2]=h;c[y+356>>2]=g;c[y+360>>2]=v;c[y+364>>2]=0;if(o[r+44>>2]|0){f=o[e+16>>2]|0;y=o[f+(a*244|0)+240>>2]|0;s=f+(a*244|0)|0;o[y+284>>2]=(o[y+284>>2]|0)+1;o[y+4>>2]=o[s>>2];o[y+4+4>>2]=o[s+4>>2];o[y+4+8>>2]=o[s+8>>2];o[y+4+12>>2]=o[s+12>>2];s=f+(a*244|0)+16|0;o[y+20>>2]=o[s>>2];o[y+20+4>>2]=o[s+4>>2];o[y+20+8>>2]=o[s+8>>2];o[y+20+12>>2]=o[s+12>>2];s=f+(a*244|0)+32|0;o[y+36>>2]=o[s>>2];o[y+36+4>>2]=o[s+4>>2];o[y+36+8>>2]=o[s+8>>2];o[y+36+12>>2]=o[s+12>>2];f=f+(a*244|0)+48|0;o[y+52>>2]=o[f>>2];o[y+52+4>>2]=o[f+4>>2];o[y+52+8>>2]=o[f+8>>2];o[y+52+12>>2]=o[f+12>>2]}o[(o[(o[e+16>>2]|0)+(a*244|0)+240>>2]|0)+212>>2]=-1;t=o[e+8>>2]|0}a=a+1|0}while((a|0)<(t|0))}if((o[e+28>>2]|0)<0?(o[e+32>>2]|0)<0:0){t=o[e+36>>2]|0;if(t|0){if(n[e+40>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+36>>2]=0}n[e+40>>0]=1;o[e+36>>2]=0;o[e+32>>2]=0}o[e+28>>2]=0;if((o[e+48>>2]|0)<0?(o[e+52>>2]|0)<0:0){t=o[e+56>>2]|0;if(t|0){if(n[e+60>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+56>>2]=0}n[e+60>>0]=1;o[e+56>>2]=0;o[e+52>>2]=0}o[e+48>>2]=0;if((o[e+68>>2]|0)<0?(o[e+72>>2]|0)<0:0){t=o[e+76>>2]|0;if(t|0){if(n[e+80>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+76>>2]=0}n[e+80>>0]=1;o[e+76>>2]=0;o[e+72>>2]=0}o[e+68>>2]=0;if((o[e+88>>2]|0)<0?(o[e+92>>2]|0)<0:0){t=o[e+96>>2]|0;if(t|0){if(n[e+100>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+96>>2]=0}n[e+100>>0]=1;o[e+96>>2]=0;o[e+92>>2]=0}o[e+88>>2]=0;if((o[e+8>>2]|0)>=0){o[e+8>>2]=0;p=m;return 0}if((o[e+12>>2]|0)>=0){o[e+8>>2]=0;p=m;return 0}t=o[e+16>>2]|0;if(t|0){if(n[e+20>>0]|0){o[5638]=(o[5638]|0)+1;qa(o[t+-4>>2]|0)}o[e+16>>2]=0}n[e+20>>0]=1;o[e+16>>2]=0;o[e+12>>2]=0;o[e+8>>2]=0;p=m;return 0}function tP(e,t,i,r,_,s,a,f,p,l){e=e|0;t=t|0;i=i|0;r=r|0;_=_|0;s=s|0;a=a|0;f=f|0;p=p|0;l=l|0;var u=0,b=0,d=0,h=0,m=0,y=0,g=0,v=0;b=o[e+48>>2]|0;h=o[e+28>>2]|0;m=o[e+68>>2]|0;if(o[p+64>>2]&1|0){if((b|0)>0){r=o[e+136>>2]|0;l=o[e+200>>2]|0;d=0;do{_=r+(d<<2)|0;s=o[_>>2]|0;d=d+1|0;l=(te(l,1664525)|0)+1013904223|0;if(d>>>0<65537){i=l>>>16^l;if(d>>>0<257)if(d>>>0<17){i=(i>>>8^i)>>>4^(i>>>8^i);if(d>>>0<5)if(d>>>0<3)i=(i>>>2^i)>>>1^(i>>>2^i);else i=i>>>2^i}else i=i>>>8^i}else i=l;i=r+(((i>>>0)%(d>>>0)|0)<<2)|0;o[_>>2]=o[i>>2];o[i>>2]=s}while((d|0)!=(b|0));o[e+200>>2]=l}if((o[p+20>>2]|0)>(t|0)){if((h|0)>0){r=o[e+116>>2]|0;l=o[e+200>>2]|0;b=0;do{_=r+(b<<2)|0;s=o[_>>2]|0;b=b+1|0;l=(te(l,1664525)|0)+1013904223|0;if(b>>>0<65537){i=l>>>16^l;if(b>>>0<257)if(b>>>0<17){i=(i>>>8^i)>>>4^(i>>>8^i);if(b>>>0<5)if(b>>>0<3)i=(i>>>2^i)>>>1^(i>>>2^i);else i=i>>>2^i}else i=i>>>8^i}else i=l;d=r+(((i>>>0)%(b>>>0)|0)<<2)|0;o[_>>2]=o[d>>2];o[d>>2]=s}while((b|0)!=(h|0));o[e+200>>2]=l}if((m|0)>0){r=o[e+156>>2]|0;l=o[e+200>>2]|0;b=0;do{_=r+(b<<2)|0;s=o[_>>2]|0;b=b+1|0;l=(te(l,1664525)|0)+1013904223|0;if(b>>>0<65537){i=l>>>16^l;if(b>>>0<257)if(b>>>0<17){i=(i>>>8^i)>>>4^(i>>>8^i);if(b>>>0<5)if(b>>>0<3)i=(i>>>2^i)>>>1^(i>>>2^i);else i=i>>>2^i}else i=i>>>8^i}else i=l;h=r+(((i>>>0)%(b>>>0)|0)<<2)|0;o[_>>2]=o[h>>2];o[h>>2]=s}while((b|0)!=(m|0));o[e+200>>2]=l}}}i=o[e+48>>2]|0;if(!(o[p+64>>2]&256)){if((i|0)>0){s=0;do{r=o[(o[e+136>>2]|0)+(s<<2)>>2]|0;_=o[e+56>>2]|0;if((o[_+(r*152|0)+136>>2]|0)>(t|0)){i=o[e+16>>2]|0;+iP(i+((o[_+(r*152|0)+144>>2]|0)*244|0)|0,i+((o[_+(r*152|0)+148>>2]|0)*244|0)|0,_+(r*152|0)|0);i=o[e+48>>2]|0}s=s+1|0}while((s|0)<(i|0))}if((o[p+20>>2]|0)<=(t|0))return 0;if((f|0)>0){_=0;do{i=a+(_<<2)|0;r=o[i>>2]|0;if(n[r+20>>0]|0){t=zM(e,o[r+28>>2]|0,+c[p+12>>2])|0;g=zM(e,o[(o[i>>2]|0)+32>>2]|0,+c[p+12>>2])|0;y=o[e+16>>2]|0;m=o[i>>2]|0;GP[o[(o[m>>2]|0)+24>>2]&15](m,y+(t*244|0)|0,y+(g*244|0)|0,+c[p+12>>2])}_=_+1|0}while((_|0)!=(f|0))}i=o[e+28>>2]|0;if((i|0)>0){r=0;do{p=o[(o[e+116>>2]|0)+(r<<2)>>2]|0;f=o[e+36>>2]|0;a=o[e+16>>2]|0;+nP(a+((o[f+(p*152|0)+144>>2]|0)*244|0)|0,a+((o[f+(p*152|0)+148>>2]|0)*244|0)|0,f+(p*152|0)|0);r=r+1|0}while((r|0)!=(i|0))}i=o[e+68>>2]|0;if((i|0)>0){s=0;do{r=o[(o[e+156>>2]|0)+(s<<2)>>2]|0;_=o[e+76>>2]|0;u=+c[(o[e+36>>2]|0)+((o[_+(r*152|0)+140>>2]|0)*152|0)+100>>2];if(u>0){u=u*+c[_+(r*152|0)+104>>2];c[_+(r*152|0)+120>>2]=-u;c[_+(r*152|0)+124>>2]=u;p=o[e+16>>2]|0;+iP(p+((o[_+(r*152|0)+144>>2]|0)*244|0)|0,p+((o[_+(r*152|0)+148>>2]|0)*244|0)|0,_+(r*152|0)|0)}s=s+1|0}while((s|0)!=(i|0))}i=o[e+88>>2]|0;if((i|0)<=0)return 0;_=0;do{r=o[e+96>>2]|0;u=+c[(o[e+36>>2]|0)+((o[r+(_*152|0)+140>>2]|0)*152|0)+100>>2];if(u>0){v=+c[r+(_*152|0)+104>>2];u=u*v>v?v:u*v;c[r+(_*152|0)+120>>2]=-u;c[r+(_*152|0)+124>>2]=u;p=o[e+16>>2]|0;+iP(p+((o[r+(_*152|0)+144>>2]|0)*244|0)|0,p+((o[r+(_*152|0)+148>>2]|0)*244|0)|0,r+(_*152|0)|0)}_=_+1|0}while((_|0)!=(i|0));return 0}if((i|0)>0){s=0;do{r=o[(o[e+136>>2]|0)+(s<<2)>>2]|0;_=o[e+56>>2]|0;if((o[_+(r*152|0)+136>>2]|0)>(t|0)){i=o[e+16>>2]|0;+iP(i+((o[_+(r*152|0)+144>>2]|0)*244|0)|0,i+((o[_+(r*152|0)+148>>2]|0)*244|0)|0,_+(r*152|0)|0);i=o[e+48>>2]|0}s=s+1|0}while((s|0)<(i|0))}if((o[p+20>>2]|0)<=(t|0))return 0;if((f|0)>0){_=0;do{i=a+(_<<2)|0;r=o[i>>2]|0;if(n[r+20>>0]|0){h=zM(e,o[r+28>>2]|0,+c[p+12>>2])|0;t=zM(e,o[(o[i>>2]|0)+32>>2]|0,+c[p+12>>2])|0;m=o[e+16>>2]|0;d=o[i>>2]|0;GP[o[(o[d>>2]|0)+24>>2]&15](d,m+(h*244|0)|0,m+(t*244|0)|0,+c[p+12>>2])}_=_+1|0}while((_|0)!=(f|0))}i=o[p+64>>2]|0;b=o[e+28>>2]|0;if(i&512|0){if((b|0)<=0)return 0;l=0;do{r=o[(o[e+116>>2]|0)+(l<<2)>>2]|0;_=o[e+36>>2]|0;s=o[e+16>>2]|0;+nP(s+((o[_+(r*152|0)+144>>2]|0)*244|0)|0,s+((o[_+(r*152|0)+148>>2]|0)*244|0)|0,_+(r*152|0)|0);u=+c[_+(r*152|0)+100>>2];r=te(l,(i>>>4&1)+1|0)|0;_=o[(o[e+156>>2]|0)+(r<<2)>>2]|0;s=o[e+76>>2]|0;if(u>0){v=u*+c[s+(_*152|0)+104>>2];c[s+(_*152|0)+120>>2]=-v;c[s+(_*152|0)+124>>2]=v;f=o[e+16>>2]|0;+iP(f+((o[s+(_*152|0)+144>>2]|0)*244|0)|0,f+((o[s+(_*152|0)+148>>2]|0)*244|0)|0,s+(_*152|0)|0)}if(o[p+64>>2]&16|0?(y=o[(o[e+156>>2]|0)+(r+1<<2)>>2]|0,g=o[e+76>>2]|0,u>0):0){v=u*+c[g+(y*152|0)+104>>2];c[g+(y*152|0)+120>>2]=-v;c[g+(y*152|0)+124>>2]=v;f=o[e+16>>2]|0;+iP(f+((o[g+(y*152|0)+144>>2]|0)*244|0)|0,f+((o[g+(y*152|0)+148>>2]|0)*244|0)|0,g+(y*152|0)|0)}l=l+1|0}while((l|0)!=(b|0));return 0}if((b|0)>0){i=0;do{p=o[(o[e+116>>2]|0)+(i<<2)>>2]|0;f=o[e+36>>2]|0;a=o[e+16>>2]|0;+nP(a+((o[f+(p*152|0)+144>>2]|0)*244|0)|0,a+((o[f+(p*152|0)+148>>2]|0)*244|0)|0,f+(p*152|0)|0);i=i+1|0}while((i|0)!=(b|0))}i=o[e+68>>2]|0;if((i|0)>0){s=0;do{r=o[(o[e+156>>2]|0)+(s<<2)>>2]|0;_=o[e+76>>2]|0;u=+c[(o[e+36>>2]|0)+((o[_+(r*152|0)+140>>2]|0)*152|0)+100>>2];if(u>0){v=u*+c[_+(r*152|0)+104>>2];c[_+(r*152|0)+120>>2]=-v;c[_+(r*152|0)+124>>2]=v;p=o[e+16>>2]|0;+iP(p+((o[_+(r*152|0)+144>>2]|0)*244|0)|0,p+((o[_+(r*152|0)+148>>2]|0)*244|0)|0,_+(r*152|0)|0)}s=s+1|0}while((s|0)!=(i|0))}i=o[e+88>>2]|0;if((i|0)<=0)return 0;_=0;do{r=o[e+96>>2]|0;u=+c[(o[e+36>>2]|0)+((o[r+(_*152|0)+140>>2]|0)*152|0)+100>>2];if(u>0){v=+c[r+(_*152|0)+104>>2];v=u*v>v?v:u*v;c[r+(_*152|0)+120>>2]=-v;c[r+(_*152|0)+124>>2]=v;p=o[e+16>>2]|0;+iP(p+((o[r+(_*152|0)+144>>2]|0)*244|0)|0,p+((o[r+(_*152|0)+148>>2]|0)*244|0)|0,r+(_*152|0)|0)}_=_+1|0}while((_|0)!=(i|0));return 0}function iP(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0;_=+c[i+100>>2];f=+c[i+16>>2];s=+c[i+20>>2];a=+c[i+24>>2];n=+c[i+108>>2];n=+c[i+112>>2]-_*+c[i+116>>2]-(f*+c[e+64>>2]+s*+c[e+68>>2]+a*+c[e+72>>2]+(+c[i>>2]*+c[e+80>>2]+ +c[i+4>>2]*+c[e+84>>2]+ +c[i+8>>2]*+c[e+88>>2]))*n-n*(+c[i+48>>2]*+c[t+64>>2]+ +c[i+52>>2]*+c[t+68>>2]+ +c[i+56>>2]*+c[t+72>>2]+(+c[i+32>>2]*+c[t+80>>2]+ +c[i+36>>2]*+c[t+84>>2]+ +c[i+40>>2]*+c[t+88>>2]));\nr=+c[i+120>>2];do if(!(_+n<r)){r=+c[i+124>>2];if(_+n>r){c[i+100>>2]=r;n=r-_;break}else{c[i+100>>2]=_+n;break}}else{c[i+100>>2]=r;n=r-_}while(0);if(o[e+240>>2]|0){s=n*(s*+c[e+132>>2])*+c[e+116>>2];a=n*(a*+c[e+136>>2])*+c[e+120>>2];c[e+64>>2]=+c[e+112>>2]*(n*(f*+c[e+128>>2]))+ +c[e+64>>2];c[e+68>>2]=s+ +c[e+68>>2];c[e+72>>2]=a+ +c[e+72>>2];a=n*+c[e+100>>2]*+c[i+68>>2];f=n*+c[e+104>>2]*+c[i+72>>2];c[e+80>>2]=n*+c[e+96>>2]*+c[i+64>>2]+ +c[e+80>>2];c[e+84>>2]=a+ +c[e+84>>2];c[e+88>>2]=f+ +c[e+88>>2]}if(!(o[t+240>>2]|0))return+n;f=n*(+c[i+52>>2]*+c[t+132>>2])*+c[t+116>>2];a=n*(+c[i+56>>2]*+c[t+136>>2])*+c[t+120>>2];c[t+64>>2]=+c[t+112>>2]*(n*(+c[i+48>>2]*+c[t+128>>2]))+ +c[t+64>>2];c[t+68>>2]=f+ +c[t+68>>2];c[t+72>>2]=a+ +c[t+72>>2];a=n*+c[t+100>>2]*+c[i+84>>2];f=n*+c[t+104>>2]*+c[i+88>>2];c[t+80>>2]=n*+c[t+96>>2]*+c[i+80>>2]+ +c[t+80>>2];c[t+84>>2]=a+ +c[t+84>>2];c[t+88>>2]=f+ +c[t+88>>2];return+n}function nP(e,t,i){e=e|0;t=t|0;i=i|0;var n=0,r=0,_=0,s=0,a=0,f=0,p=0;f=+c[i+100>>2];_=+c[i+16>>2];n=+c[i+20>>2];r=+c[i+24>>2];a=+c[i+108>>2];a=+c[i+112>>2]-f*+c[i+116>>2]-(_*+c[e+64>>2]+n*+c[e+68>>2]+r*+c[e+72>>2]+(+c[i>>2]*+c[e+80>>2]+ +c[i+4>>2]*+c[e+84>>2]+ +c[i+8>>2]*+c[e+88>>2]))*a-a*(+c[i+48>>2]*+c[t+64>>2]+ +c[i+52>>2]*+c[t+68>>2]+ +c[i+56>>2]*+c[t+72>>2]+(+c[i+32>>2]*+c[t+80>>2]+ +c[i+36>>2]*+c[t+84>>2]+ +c[i+40>>2]*+c[t+88>>2]));p=+c[i+120>>2];s=f+a<p?p-f:a;c[i+100>>2]=f+a<p?p:f+a;if(o[e+240>>2]|0){p=s*(n*+c[e+132>>2])*+c[e+116>>2];f=s*(r*+c[e+136>>2])*+c[e+120>>2];c[e+64>>2]=+c[e+112>>2]*(s*(_*+c[e+128>>2]))+ +c[e+64>>2];c[e+68>>2]=p+ +c[e+68>>2];c[e+72>>2]=f+ +c[e+72>>2];f=s*+c[e+100>>2]*+c[i+68>>2];p=s*+c[e+104>>2]*+c[i+72>>2];c[e+80>>2]=s*+c[e+96>>2]*+c[i+64>>2]+ +c[e+80>>2];c[e+84>>2]=f+ +c[e+84>>2];c[e+88>>2]=p+ +c[e+88>>2]}if(!(o[t+240>>2]|0))return+s;p=s*(+c[i+52>>2]*+c[t+132>>2])*+c[t+116>>2];f=s*(+c[i+56>>2]*+c[t+136>>2])*+c[t+120>>2];c[t+64>>2]=+c[t+112>>2]*(s*(+c[i+48>>2]*+c[t+128>>2]))+ +c[t+64>>2];c[t+68>>2]=p+ +c[t+68>>2];c[t+72>>2]=f+ +c[t+72>>2];f=s*+c[t+100>>2]*+c[i+84>>2];p=s*+c[t+104>>2]*+c[i+88>>2];c[t+80>>2]=s*+c[t+96>>2]*+c[i+80>>2]+ +c[t+80>>2];c[t+84>>2]=f+ +c[t+84>>2];c[t+88>>2]=p+ +c[t+88>>2];return+s}var rP=[Wf,tL,tx,nM,CC,ak,yk,dT,RT,ET,yD,YD,$D,rO,nC,bc,fc,wc,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf,Wf];var oP=[Bf,dw,Pk,fO,DO,nS,TS,JR,Gj,dg,hg,jg,Ig,Tg,xg,kp,jp,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf,Bf];var _P=[Af,qO,JO,fL,lL,uL,bL,UL,zL,hx,KL,QL,ox,cx,gx,vx,Rx,jx,Px,Xx,Hx,tM,iM,_M,sM,wC,kC,LC,NC,XC,KC,QC,qC,JC,tw,Pw,nw,rw,sw,aw,pw,lw,yw,gw,$g,vw,ww,Sw,Iw,Tw,Gw,Vw,Xw,Hw,Qw,Jw,ek,tk,_k,sk,fk,hk,mk,gk,Sk,bT,Rk,jk,Sj,Tk,mT,vT,CT,kT,ST,jT,OT,PT,FT,GT,XT,HT,QT,qT,$T,tD,nD,oD,sD,cD,pD,uD,dD,WL,mD,CD,wD,RD,jD,LD,xD,FD,ED,VD,UD,zD,qD,JD,nO,oO,RO,jO,yx,PO,EO,Kk,RR,qk,fS,lS,CS,wS,PS,BS,zS,QS,$S,eR,CR,wR,DR,ev,WR,UR,oj,fj,hj,mj,vj,wj,Rj,Wj,Hj,Zj,tv,iv,uv,bv,vv,Cv,Tv,Lv,Vv,Mv,Wv,Nv,$v,eC,iC,rC,sC,hC,yC,tI,iI,mI,lI,vI,jI,II,CI,wI,ZI,UI,rT,aT,NI,lM,mM,yM,LM,xM,EM,VM,XM,Ty,Ey,Vy,Ny,eg,fg,wg,Og,mg,gg,Mg,Pg,Fy,Bg,Ug,zg,Tp,Dp,Lp,Il,Tl,Xh,Hh,hi,mi,ic,lc,rc,oc,nc,hc,mc,gc,Aa,ec,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af,Af];var sP=[Ff];var aP=[Gf,oL,cL,SL,TL,DL,px,dx,JL,_x,fx,Bx,Ex,Vx,Yx,Kx,oM,jC,IC,GC,HC,YC,$C,Mw,Ww,hw,Rw,bk,pk,kk,Ck,gT,yR,Mk,gS,AT,NT,vD,XD,QD,tO,sO,IO,AO,FO,$k,iS,SS,xS,FS,VS,KS,JS,tR,OR,YR,qR,zj,ov,_v,av,cv,dv,hv,kv,rI,oI,sI,aI,cI,gI,OI,LI,QI,qI,cT,pT,uM,vM,CM,MM,PM,Dy,Ly,Hy,Zy,Ky,Qy,qy,Jy,$y,tg,ng,rg,pg,lg,ug,bg,kg,Dg,Lg,Gg,Kg,Zh,Uh,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf,Gf];var cP=[Ef,tC,oC,Ef];var fP=[Vf,_L,sL,yL,gL,vL,wL,IL,lx,ux,Tx,Dx,Ox,xx,Gx,Ux,MC,WC,BC,AC,UC,ew,Ok,xk,Bk,Ek,Nk,Xk,Uk,ZT,UT,YT,BD,cO,bO,hO,mO,vO,Sv,TO,LO,tS,rS,aS,pS,uS,RS,IS,OS,ES,NS,YS,qS,iR,nR,cR,fR,uR,LR,xR,FR,GR,NR,QR,$R,_j,pj,Fj,Yj,Qj,qj,sv,fv,qg,jv,mS,hI,yI,WI,RI,iT,oT,XI,bM,SM,jM,AM,GM,HM,Py,By,og,_g,cg,Ag,Wa,yc,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf,Vf];var pP=[Nf,MI,eT,fM,wM,WM,xy,Nf];var lP=[Xf];var uP=[Hf];var bP=[Zf,hL,kx,Zx,SC,wT,JT,eD,iD,rD,_D,aD,fD,lD,bD,hD,yj,Op,gi,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf,Zf];var dP=[Uf,Lk,aO,Rv,eS,jS,GS,jj,KR,Aj,Kj,Uf,Uf,Uf,Uf,Uf];var hP=[zf,Ol];var mP=[Yf];var yP=[Kf,rM,uk,wk,hT,BT,VT,gD,KD,eO,Kf,Kf,Kf,Kf,Kf,Kf];var gP=[Qf,dL,jL,Cx,Fx,zx,RC,TC,DC,zC,Ak,zT,MD,PD,xO,oS,LS,XS,rR,ej,Jj,Jg,yS,BI,Gy,nT,HI,dM,RM,FM,Wy,Fg,yi,Ba,Fa,_c,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf,Qf];var vP=[qf,nL,rx,Wg,uc,ac,vc,qf];var CP=[Jf,lT,wO,dR,HR,Jf,Jf,Jf];var wP=[$f,dS,Wk,OO,DS,rj,cj,bj,Ej,$f,$f,$f,$f,$f,$f,$f];var kP=[ep,Pv,Xv,gC];var SP=[tp,Ew,Nw,tp];var RP=[ip];var jP=[np,jR,sR,np];var IP=[rp,JM];var TP=[op,nv,rv,op];var DP=[_p,HL,ZL,Ix,Wx,PC,FC,xC,ZC,uw,Dw,Zw,qw,$w,Dj,uI,sg,ag,vg,xp,Dl,_p,_p,_p,_p,_p,_p,_p,_p,_p,_p,_p];var OP=[sp,Ow,Uw,bI,PI,tT,pM,kM,BM,My,yg,Cg,Mp,iP,nP,sp];var LP=[ap,NM,tP,ap];var xP=[cp,kI];var MP=[fp,jy,Iy,fp];var PP=[pp,hS];var WP=[lp];var BP=[up,Cw,kw,up];var AP=[bp,eP];var FP=[dp,$O,YL,dp];var GP=[hp,rk,DT,MT,WT,GD,Fv,fC,xI,SI,hp,hp,hp,hp,hp,hp];var EP=[mp,eL,aL,mL,CL,kL,RL,ex,bx,qL,NL,Sx,Lx,Mx,Ax,mw,ik,nk,vk,bS,gR,Fk,Vk,Zk,IT,TT,LT,xT,kD,ID,ND,pO,lO,dO,gO,kO,Ov,BO,WO,Yk,Qk,_S,cS,HS,ZS,oR,_R,lR,MR,PR,VR,tj,ij,sj,lj,Ij,Vj,Nj,pv,lv,Bv,Av,aC,cC,AI,hM,DM,OM,Yy,vi,VC,IR,TR,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp,mp];var VP=[yp,gp,Ja,$a];var NP=[vp,XL,nI,_I,pI,Yg,vp,vp];var XP=[Cp,zy];var HP=[wp,iL,rL,nx,ax,OC,iw,fw,xw,ow,_w,cw,dC,mC,Ik,Dk,Gk,vR,Hk,zk,uT,yT,SD,TD,_O,uO,yO,CO,wv,MO,Jk,sS,kS,AS,US,Mj,aR,pR,bR,AR,ER,XR,BR,zR,nj,aj,uj,Cj,kj,Tj,Bj,Xj,Uj,$j,Qg,Iv,Dv,xv,ZM,Xy,ig,Ip,dc,pc,Sc,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp,wp];return{_emscripten_bind_btCylinderShape___destroy___0:Th,_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1:yy,_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1:Li,_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1:Ym,_emscripten_bind_btCollisionObject_isActive_0:jb,_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1:Us,_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4:fm,_emscripten_bind_btCapsuleShapeX_getMargin_0:$u,_emscripten_bind_btCompoundShape_getMargin_0:_d,_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1:Ou,_emscripten_bind_btContactSolverInfo___destroy___0:Kd,_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0:dl,_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0:Ln,_emscripten_bind_btQuaternion_setX_1:Ir,_emscripten_bind_btCylinderShapeZ_getMargin_0:Rh,_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0:Wm,_emscripten_bind_btQuaternion_setZ_1:Dr,_emscripten_bind_btCapsuleShapeZ_getMargin_0:ob,_emscripten_bind_btKinematicCharacterController_setMaxSlope_1:Ki,_emscripten_bind_btQuadWord_z_0:Cr,_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0:Zs,_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0:aa,_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0:ca,_emscripten_bind_btGeneric6DofSpring2Constraint_getBreakingImpulseThreshold_0:wt,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1:ao,_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0:Cu,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0:eo,_emscripten_bind_btCollisionDispatcher___destroy___0:db,_emscripten_bind_btRigidBody_applyCentralImpulse_1:So,_emscripten_bind_btConvexHullShape_getMargin_0:oh,_emscripten_bind_btDefaultMotionState_getWorldTransform_1:Kh,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1:Rm,_emscripten_bind_btRaycastVehicle_getNumWheels_0:Fr,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3:Im,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2:jm,_emscripten_bind_btVector3_op_mul_1:ls,_emscripten_bind_btDynamicsWorld_rayTest_3:uy,_emscripten_bind_btRaycastVehicle_updateWheelTransform_2:Zr,_emscripten_bind_btQuadWord_x_0:gr,_emscripten_bind_btCollisionObject_isKinematicObject_0:Ib,_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1:da,_emscripten_bind_ConvexResultCallback___destroy___0:Wl,_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1:Xt,_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1:sl,_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1:Ta,_emscripten_bind_btRigidBody_getCenterOfMassTransform_0:xo,_emscripten_bind_btGhostObject_isKinematicObject_0:ii,_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5:Pt,_emscripten_bind_btCapsuleShape___destroy___0:ab,_emscripten_bind_btCollisionObject_activate_1:Cb,_emscripten_bind_btCollisionObject_activate_0:vb,_emscripten_bind_btGeneric6DofSpring2Constraint_getRotationalLimitMotor_1:kt,_emscripten_bind_btKinematicCharacterController_setUpAxis_1:Qi,_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1:Um,_emscripten_bind_btGeneric6DofSpring2Constraint_setAngularUpperLimit_1:jt,_emscripten_bind_btTranslationalLimitMotor2___destroy___0:X_,_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1:hb,_emscripten_bind_btVector3_setX_1:ds,_emscripten_bind_btCollisionConfiguration___destroy___0:bb,_emscripten_bind_btCapsuleShapeZ_setMargin_1:sb,_emscripten_bind_btHingeConstraint_enableFeedback_1:Di,_emscripten_bind_btSphereShape___destroy___0:k_,_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1:vy,_emscripten_bind_btManifoldPoint_set_m_localPointB_1:ln,_emscripten_bind_btVector3_setZ_1:ms,_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1:qi,_emscripten_bind_btQuaternion_setValue_4:Rr,_emscripten_bind_btDynamicsWorld_getBroadphase_0:ay,_emscripten_bind_LocalShapeInfo___destroy___0:tu,_emscripten_bind_btPoint2PointConstraint_get_m_setting_0:ar,_emscripten_bind_btQuadWord_setY_1:hr,_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1:yo,_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0:Qh,_emscripten_bind_btSliderConstraint_btSliderConstraint_5:d_,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3:cm,_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0:Dn,_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0:gm,_emscripten_bind_btCylinderShape_setMargin_1:Mh,_emscripten_bind_btCollisionWorld___destroy___0:Nb,_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0:Yl,_emscripten_bind_btBoxShape_btBoxShape_1:Gu,_emscripten_bind_btPersistentManifold_getBody1_0:Jn,_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1:Cl,_emscripten_bind_RaycastInfo_set_m_isInContact_1:Iu,_emscripten_bind_btKinematicCharacterController_setGravity_1:Ui,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5:my,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3:hy,_emscripten_bind_btQuaternion_setY_1:Tr,_emscripten_bind_btWheelInfo_get_m_rollInfluence_0:_a,_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1:rs,_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1:Ku,_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1:cr,_emscripten_bind_btDynamicsWorld_getDispatchInfo_0:cy,_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1:ad,_emscripten_bind_btGeneric6DofSpring2Constraint_enableSpring_2:Ct,_emscripten_bind_btVector3_length_0:cs,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2:uh,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1:lh,_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1:al,_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1:lu,_emscripten_bind_btBoxShape_getMargin_0:Vu,_emscripten_bind_btPairCachingGhostObject___destroy___0:jn,_emscripten_bind_btPairCachingGhostObject_activate_0:In,_emscripten_bind_btPairCachingGhostObject_activate_1:Tn,_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0:Qd,_emscripten_bind_btPairCachingGhostObject_forceActivationState_1:On,_emscripten_bind_btDefaultMotionState___destroy___0:Vh,_emscripten_bind_btDispatcherInfo_get_m_stepCount_0:Pm,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1:lo,_emscripten_bind_btQuadWord_setW_1:br,_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0:io,_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2:qu,_emscripten_bind_LocalShapeInfo_set_m_shapePart_1:ru,_emscripten_bind_btRigidBody_setLinearFactor_1:Jo,_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1:Km,_emscripten_bind_btWheelInfo_get_m_engineForce_0:ta,_emscripten_bind_btRaycastVehicle_setSteeringValue_2:Hr,_emscripten_enum_RotateOrder_RO_YXZ:La,_emscripten_bind_btPoint2PointConstraint___destroy___0:tr,_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1:Cy,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2:sm,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1:_m,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1:uo,_malloc:Qa,_emscripten_bind_btDispatcherInfo_get_m_useEpa_0:Gm,_memmove:Bc,_emscripten_bind_btTransform_btTransform_2:B_,_emscripten_bind_btTransform_btTransform_0:W_,_emscripten_bind_btVector3_op_sub_1:us,_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1:Ia,_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1:Xm,_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1:Ra,_emscripten_bind_btCollisionObject_setActivationState_1:Tb,_emscripten_bind_btPersistentManifold___destroy___0:Kn,_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0:Xd,_emscripten_bind_btCylinderShapeZ___destroy___0:wh,_emscripten_bind_btMatrix3x3___destroy___0:hn,_emscripten_bind_ConvexResultCallback_hasHit_0:Gl,_emscripten_bind_btCollisionShape_calculateLocalInertia_2:Eb,_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1:Et,_emscripten_bind_btCollisionWorld_convexSweepTest_5:Yb,_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1:kl,_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2:Ju,_emscripten_bind_btConstraintSetting_set_m_damping_1:Zd,_emscripten_bind_btVehicleRaycaster___destroy___0:Fs,_emscripten_bind_btRigidBody_setCcdMotionThreshold_1:Ho,_emscripten_bind_btConvexHullShape_setMargin_1:sh,_emscripten_bind_btRigidBody_applyForce_2:Ro,_emscripten_bind_btConeShapeZ_calculateLocalInertia_2:vd,_emscripten_bind_btConstraintSetting_set_m_tau_1:zd,_emscripten_bind_btConvexHullShape_calculateLocalInertia_2:rh,_emscripten_bind_RaycastInfo_get_m_contactPointWS_0:hu,_emscripten_bind_btSphereShape_calculateLocalInertia_2:R_,_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0:ea,_emscripten_bind_btDynamicsWorld_contactTest_2:_y,_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0:ml,_emscripten_bind_btGhostObject_setFriction_1:fi,_emscripten_bind_btCollisionWorld_rayTest_3:$b,_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1:Zo,_emscripten_bind_btCylinderShapeZ_setMargin_1:Ih,_emscripten_bind_btRigidBody_setFriction_1:qo,_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1:$l,_emscripten_bind_btGhostObject_setWorldTransform_1:ui,_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1:km,_emscripten_bind_btTranslationalLimitMotor2_set_m_currentLinearDiff_1:Z_,_emscripten_bind_btConvexHullShape___destroy___0:eh,_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0:bm,_emscripten_bind_btVector4_setX_1:Ls,_emscripten_bind_btKinematicCharacterController_jump_0:Vi,_emscripten_bind_btWheelInfo_set_m_raycastInfo_1:va,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1:Bd,_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1:dh,_emscripten_bind_btRigidBody_upcast_1:__,_emscripten_bind_btCollisionObject_getWorldTransform_0:Rb,_emscripten_bind_btVector4_setZ_1:Ms,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1:dn,___cxa_can_catch:jc,_emscripten_bind_btTransform_getBasis_0:A_,_emscripten_bind_btPairCachingGhostObject_setFriction_1:Zn,_emscripten_bind_btManifoldPoint___destroy___0:tn,_emscripten_bind_btDispatcherInfo_set_m_useEpa_1:Qm,_emscripten_bind_btCollisionDispatcher_getNumManifolds_0:yb,_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1:ba,_emscripten_bind_ClosestRayResultCallback___destroy___0:fl,_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2:Ht,_emscripten_bind_btCylinderShapeX_setMargin_1:Ch,_emscripten_bind_btQuadWord_w_0:yr,_emscripten_bind_btGhostObject_setCcdMotionThreshold_1:oi,_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2:lm,_emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_3:yt,_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2:Yu,_emscripten_bind_btCompoundShape_getNumChildShapes_0:sd,_emscripten_bind_btGhostObject_btGhostObject_0:Yt,_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2:Up,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1:so,_emscripten_bind_btManifoldPoint_set_m_localPointA_1:pn,_emscripten_bind_LocalConvexResult___destroy___0:Hl,_emscripten_bind_btVector3_dot_1:as,_emscripten_bind_btVector4_op_add_1:Is,_emscripten_bind_btWheelInfo___destroy___0:Js,_emscripten_bind_btTransform_setRotation_1:N_,_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0:Mn,_emscripten_bind_btPoint2PointConstraint_enableFeedback_1:rr,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1:gl,_emscripten_bind_btAxisSweep3_btAxisSweep3_2:Pu,_emscripten_bind_btAxisSweep3_btAxisSweep3_3:Wu,_emscripten_bind_btDynamicsWorld___destroy___0:ey,_emscripten_bind_btVector3_setY_1:hs,_emscripten_bind_btAxisSweep3_btAxisSweep3_4:Bu,_emscripten_bind_btAxisSweep3_btAxisSweep3_5:Au,_emscripten_bind_btQuadWord_setX_1:dr,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0:$r,_emscripten_bind_btGhostObject_isActive_0:ti,_emscripten_bind_btOverlappingPairCache___destroy___0:kn,_emscripten_bind_btVector3_normalize_0:fs,_emscripten_bind_btConstraintSetting___destroy___0:Ed,_emscripten_bind_RayResultCallback___destroy___0:_u,_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0:du,_emscripten_bind_btTranslationalLimitMotor2_get_m_currentLinearDiff_0:H_,_emscripten_bind_btPersistentManifold_getBody0_0:qn,_emscripten_bind_btConeShapeX_btConeShapeX_2:dd,_emscripten_bind_btQuaternion_z_0:Mr,_emscripten_bind_btConeTwistConstraint_enableFeedback_1:Dd,_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2:L_,_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1:_b,_emscripten_bind_btRigidBody_applyTorque_1:To,_emscripten_bind_btSliderConstraint_setUpperLinLimit_1:w_,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2:Id,_emscripten_bind_btConcaveShape___destroy___0:pd,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4:Td,_emscripten_bind_btQuaternion_x_0:Lr,_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1:Jl,_emscripten_bind_btConcaveShape_setLocalScaling_1:ud,_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0:dm,_emscripten_bind_btConeShapeX_setLocalScaling_1:md,_emscripten_bind_btCylinderShapeZ_setLocalScaling_1:jh,_emscripten_bind_btConvexHullShape_btConvexHullShape_0:nh,_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1:ya,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1:vl,_emscripten_bind_btRotationalLimitMotor2___destroy___0:a_,_emscripten_bind_btGhostObject___destroy___0:Zt,_emscripten_bind_btGhostObject_setContactProcessingThreshold_1:ci,_emscripten_bind_btCollisionWorld_getBroadphase_0:Kb,_emscripten_bind_btQuaternion___destroy___0:wr,_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1:mb,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2:Yh,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0:Nh,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1:zh,_pthread_self:Fc,_emscripten_bind_btCompoundShape_getChildShape_1:od,_emscripten_bind_btKinematicCharacterController_canJump_0:Ai,_emscripten_bind_btVector4_length_0:Rs,_emscripten_bind_btRigidBody_isActive_0:Fo,_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3:Ar,_emscripten_bind_btMotionState_setWorldTransform_1:wn,_emscripten_bind_btCylinderShape_setLocalScaling_1:xh,_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0:Wn,_emscripten_bind_btCompoundShape_calculateLocalInertia_2:rd,_emscripten_bind_btCollisionWorld_getDispatchInfo_0:Qb,_emscripten_bind_btRigidBody_setCollisionShape_1:Yo,_emscripten_bind_btConeShapeX___destroy___0:bd,_emscripten_bind_btCollisionObject_getCollisionFlags_0:kb,_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1:Hm,_emscripten_bind_btConeTwistConstraint_enableMotor_1:Od,_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3:Xr,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4:Bi,_emscripten_bind_btPairCachingGhostObject_setRestitution_1:Un,_emscripten_bind_btBroadphaseInterface___destroy___0:Hu,_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0:m_,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1:co,_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1:Pb,_emscripten_bind_btCompoundShape___destroy___0:ed,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0:Kr,_emscripten_bind_btCapsuleShapeX_setMargin_1:tb,_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0:p_,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1:po,_emscripten_bind_btRigidBody_getCollisionFlags_0:Mo,_emscripten_bind_btCollisionShape_setLocalScaling_1:Vb,_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0:Yp,_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0:Zl,_emscripten_bind_btMatrix3x3_setEulerZYX_3:gn,_emscripten_bind_btRigidBody_setRollingFriction_1:n_,_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0:Om,_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0:bl,_emscripten_bind_btRigidBody_setMotionState_1:t_,_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0:au,_emscripten_bind_btCollisionWorld_getDispatcher_0:qb,_emscripten_bind_btVector4_dot_1:Ss,_emscripten_bind_btCollisionObject_setRollingFriction_1:Ab,_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1:pu,_emscripten_bind_btTriangleMesh_btTriangleMesh_1:$_,_emscripten_bind_btRotationalLimitMotor2_get_m_currentPosition_0:c_,_i64Subtract:Dc,_emscripten_bind_btCylinderShapeX_getMargin_0:gh,_emscripten_bind_btRigidBody_setDamping_2:Qo,_emscripten_bind_btDynamicsWorld_getDispatcher_0:fy,_emscripten_bind_btGhostObject_setCollisionFlags_1:si,_emscripten_bind_btMatrix3x3_getRotation_1:mn,_emscripten_bind_btWheelInfo_set_m_engineForce_1:ha,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1:Ad,_emscripten_bind_btPersistentManifold_getNumContacts_0:er,_emscripten_bind_btCylinderShapeX_setLocalScaling_1:vh,_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0:Wh,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0:Jr,_emscripten_bind_btCompoundShape_setLocalScaling_1:cd,_emscripten_bind_btOverlappingPairCallback___destroy___0:Rn,_emscripten_bind_btDynamicsWorld_convexSweepTest_5:sy,_emscripten_bind_btCylinderShape_calculateLocalInertia_2:Oh,_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1:Vn,_emscripten_bind_btRigidBody_getCollisionShape_0:Po,_emscripten_bind_btRigidBody_setContactProcessingThreshold_1:Ko,_emscripten_bind_btRigidBody_getLinearVelocity_0:Wo,_emscripten_bind_btRigidBody_applyImpulse_2:jo,_emscripten_bind_btConcaveShape_calculateLocalInertia_2:ld,_emscripten_bind_RaycastInfo_get_m_groundObject_0:mu,_emscripten_bind_btRigidBody_setWorldTransform_1:o_,_emscripten_bind_btRigidBody_setAngularVelocity_1:No,_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3:Mt,_emscripten_bind_btConvexShape_setLocalScaling_1:fh,_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2:z_,_free:qa,_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1:Hn,_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1:Sy,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0:ll,_emscripten_bind_RayResultCallback_hasHit_0:fu,_bitshift64Shl:xc,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0:Qr,_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0:Hs,_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1:Vr,_emscripten_bind_btQuaternion_normalize_0:Sr,_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0:Jp,_emscripten_bind_btQuadWord_setZ_1:mr,_emscripten_bind_btConeShapeZ_setLocalScaling_1:Cd,_emscripten_bind_btPairCachingGhostObject_setActivationState_1:Fn,_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0:xt,_emscripten_bind_btConvexTriangleMeshShape___destroy___0:ph,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1:Ys,_emscripten_bind_btGhostObject_setRollingFriction_1:li,_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1:kh,_emscripten_bind_btRigidBody_getAngularVelocity_0:Lo,_emscripten_bind_btCompoundShape_btCompoundShape_0:id,_emscripten_bind_btCompoundShape_btCompoundShape_1:nd,_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1:Sn,_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2:O_,_emscripten_bind_btSphereShape_getMargin_0:j_,_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0:Am,_emscripten_bind_btRigidBody_updateInertiaTensor_0:s_,_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2:Gn,_emscripten_bind_btTransform_setOrigin_1:V_,_emscripten_bind_ClosestRayResultCallback_hasHit_0:yl,_emscripten_bind_btCompoundShape_addChildShape_2:td,_emscripten_bind_btDispatcher___destroy___0:qm,_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0:Xs,_emscripten_bind_btDiscreteDynamicsWorld___destroy___0:tm,_emscripten_bind_btConvexShape___destroy___0:ah,_emscripten_bind_btGeneric6DofSpring2Constraint_setLinearLowerLimit_1:Dt,_emscripten_bind_btCapsuleShapeX_setLocalScaling_1:eb,_emscripten_bind_btQuadWord_y_0:vr,_emscripten_bind_btCollisionObject_setRestitution_1:Bb,_emscripten_bind_btRigidBody_applyCentralForce_1:ko,_emscripten_bind_LocalConvexResult_get_m_hitFraction_0:Ul,_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0:xm,_emscripten_bind_btQuaternion_w_0:Or,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0:Al,_emscripten_bind_btTransform_getRotation_0:G_,_emscripten_bind_btHingeConstraint_btHingeConstraint_6:ji,_emscripten_bind_btHingeConstraint_btHingeConstraint_7:Ii,_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0:zl,_emscripten_bind_btHingeConstraint_btHingeConstraint_5:Ri,_emscripten_bind_btHingeConstraint_btHingeConstraint_2:wi,_emscripten_bind_btHingeConstraint_btHingeConstraint_3:ki,_emscripten_bind_RaycastInfo___destroy___0:bu,_emscripten_bind_btBoxShape_setMargin_1:Xu,_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0:$p,_emscripten_bind_btMatrix3x3_getRow_1:yn,_emscripten_bind_btTypedConstraint___destroy___0:ts,_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1:mh,_emscripten_enum_RotateOrder_RO_XYZ:Da,_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1:Gt,_emscripten_bind_btConeTwistConstraint_setDamping_1:Pd,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1:am,_bitshift64Ashr:Mc,_emscripten_bind_btQuaternion_btQuaternion_4:kr,_emscripten_bind_btSphereShape_btSphereShape_1:S_,_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0:ua,_emscripten_bind_btQuaternion_y_0:xr,_emscripten_bind_btCollisionWorld_addCollisionObject_1:Xb,_emscripten_bind_btCollisionWorld_addCollisionObject_2:Hb,_emscripten_bind_btCollisionWorld_addCollisionObject_3:Zb,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1:nl,_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1:Md,_emscripten_bind_RaycastInfo_get_m_isInContact_0:gu,_emscripten_bind_btGeneric6DofSpring2Constraint_setLinearUpperLimit_1:Ot,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0:Kp,_emscripten_bind_btCapsuleShape_setMargin_1:ub,_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1:em,_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7:xl,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0:fn,_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0:l_,_emscripten_bind_btActionInterface___destroy___0:xu,_emscripten_bind_btDefaultMotionState_setWorldTransform_1:qh,_emscripten_bind_btCollisionWorld_contactTest_2:zb,_emscripten_bind_RayResultCallback_get_m_collisionObject_0:cu,_emscripten_bind_btPoint2PointConstraint_getPivotInA_0:_r,_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0:qp,_emscripten_bind_btVector4_setY_1:xs,_emscripten_bind_btCompoundShape_setMargin_1:fd,_emscripten_bind_btGhostObject_setRestitution_1:pi,_emscripten_bind_btDynamicsWorld_addCollisionObject_1:iy,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0:Qp,_emscripten_bind_btDynamicsWorld_addCollisionObject_3:ry,_emscripten_bind_btDynamicsWorld_addCollisionObject_2:ny,_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0:hm,_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0:ra,_emscripten_bind_btVector4_op_mul_1:Ts,_emscripten_bind_btCylinderShape_btCylinderShape_1:Dh,_emscripten_bind_btRotationalLimitMotor2_set_m_currentPosition_1:f_,_emscripten_bind_btVector3___destroy___0:os,_bitshift64Lshr:Pc,_emscripten_bind_btRigidBody_setAngularFactor_1:Vo,_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2:Sh,_emscripten_bind_btWheelInfo_set_m_steering_1:wa,_emscripten_bind_btMotionState_getWorldTransform_1:Cn,_emscripten_bind_btDynamicsWorld_getSolverInfo_0:ly,_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1:Nm,_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1:Vm,_emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_5:gt,_emscripten_bind_btVector3_x_0:ys,___cxa_is_pointer_type:Ic,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3:zr,_emscripten_bind_btCollisionObject_getCollisionShape_0:Sb,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4:Yr,_emscripten_bind_btBoxShape_calculateLocalInertia_2:Eu,_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1:go,_emscripten_bind_btVector3_z_0:vs,_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1:Jh,_emscripten_bind_ClosestConvexResultCallback___destroy___0:zp,_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0:Gh,_emscripten_bind_btCollisionObject_setFriction_1:Wb,_emscripten_bind_btDefaultCollisionConfiguration___destroy___0:Bh,_emscripten_bind_btRigidBody_setMassProps_2:e_,_emscripten_bind_btVector3_setValue_3:bs,_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1:En,_emscripten_bind_RaycastInfo_get_m_suspensionLength_0:vu,_emscripten_bind_btGhostObject_getCollisionFlags_0:Qt,_emscripten_bind_btCapsuleShapeX___destroy___0:Qu,_emscripten_bind_btHingeConstraint_setLimit_4:xi,_emscripten_bind_btHingeConstraint_setLimit_5:Mi,_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0:pa,_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1:ga,_emscripten_bind_btConeShape_setLocalScaling_1:Rd,_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1:zi,_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0:ns,_emscripten_bind_btGhostObject_getCollisionShape_0:qt,_emscripten_bind_btCollisionObject_setAnisotropicFriction_2:Db,_emscripten_bind_btBoxShape___destroy___0:Fu,_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0:$s,_emscripten_bind_btPersistentManifold_getContactPoint_1:$n,_emscripten_bind_btVector3_btVector3_0:_s,_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0:At,\n_emscripten_bind_btConeShapeX_calculateLocalInertia_2:hd,_emscripten_bind_RaycastInfo_set_m_groundObject_1:Ru,_emscripten_bind_btGhostObject_activate_1:zt,_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2:Bt,_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0:on,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0:cn,_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1:Wt,_emscripten_bind_btSphereShape_setMargin_1:T_,_emscripten_bind_btRigidBodyConstructionInfo___destroy___0:Ur,_emscripten_bind_btConeShapeZ_btConeShapeZ_2:gd,_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1:Jd,_emscripten_bind_btSliderConstraint_setUpperAngLimit_1:C_,_emscripten_bind_btDynamicsWorld_contactPairTest_3:oy,_emscripten_bind_btCollisionWorld_getPairCache_0:Jb,_emscripten_bind_btConeTwistConstraint_setMotorTarget_1:Gd,_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1:ol,_emscripten_bind_btWheelInfo_set_m_rollInfluence_1:Ca,_emscripten_bind_btRigidBody_getWorldTransform_0:Ao,_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0:Eh,_emscripten_bind_btGhostObject_forceActivationState_1:Kt,_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0:jl,_emscripten_bind_VoidPtr___destroy___0:Lu,_emscripten_bind_btSliderConstraint_setLowerAngLimit_1:g_,_emscripten_bind_btVector4_op_sub_1:Ds,_emscripten_bind_RaycastInfo_set_m_contactPointWS_1:Su,_emscripten_bind_btConeShape_btConeShape_2:kd,_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0:hl,_emscripten_bind_btRaycastVehicle_getRigidBody_0:Gr,_emscripten_enum_RotateOrder_RO_YZX:xa,_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0:su,_emscripten_bind_btWheelInfo_get_m_steering_0:sa,_emscripten_bind_btConstraintSetting_get_m_tau_0:Hd,_emscripten_bind_btSliderConstraint___destroy___0:u_,_emscripten_bind_btCollisionObject_setCollisionShape_1:Mb,_emscripten_bind_btCollisionShape___destroy___0:Gb,_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0:Bl,_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0:Lm,_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0:_o,_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1:Xn,_emscripten_bind_btKinematicCharacterController_warp_1:en,_emscripten_bind_btAxisSweep3___destroy___0:Mu,_emscripten_bind_btTriangleMesh___destroy___0:K_,_emscripten_bind_btKinematicCharacterController_preStep_1:Hi,_emscripten_bind_btRaycastVehicle_applyEngineForce_2:Br,_emscripten_bind_btRaycastVehicle_setBrake_2:Nr,_emscripten_bind_ConcreteContactResultCallback___destroy___0:Ll,_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1:Du,_emscripten_bind_btGeneric6DofSpring2Constraint_setAngularLowerLimit_1:Rt,_emscripten_bind_btCollisionObject___destroy___0:gb,_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1:Qs,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1:mo,_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1:Fd,_emscripten_bind_btDispatcherInfo_set_m_timeStep_1:zm,_emscripten_bind_btVector3_btVector3_3:ss,_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1:ku,_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1:bo,_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0:mm,_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0:el,_emscripten_bind_btRigidBody_isKinematicObject_0:Go,_emscripten_bind_btGeneric6DofSpring2Constraint_setStiffness_2:Lt,_emscripten_bind_RaycastInfo_get_m_hardPointWS_0:yu,_emscripten_bind_btConeTwistConstraint___destroy___0:jd,_emscripten_bind_btQuadWord___destroy___0:ur,_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1:Sl,_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2:Vt,_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0:wu,_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1:y_,_emscripten_bind_btGhostObject_setAnisotropicFriction_2:ri,_emscripten_bind_btConstraintSolver___destroy___0:Yd,_emscripten_bind_btDbvtBroadphase___destroy___0:Ph,_emscripten_bind_btCapsuleShape_btCapsuleShape_2:cb,_emscripten_bind_btTypedConstraint_enableFeedback_1:is,_emscripten_bind_btGhostObject_activate_0:Ut,_emscripten_bind_btCapsuleShape_setLocalScaling_1:lb,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0:qr,_emscripten_bind_btRigidBody_setAnisotropicFriction_2:Xo,_emscripten_bind_btTriangleMeshShape_setLocalScaling_1:Y_,_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1:El,_emscripten_bind_btVector3_op_add_1:ps,_emscripten_bind_btPersistentManifold_btPersistentManifold_0:Qn,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0:Fl,_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2:cl,_emscripten_bind_btVector4___destroy___0:Cs,_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0:An,_emscripten_bind_btConstraintSetting_get_m_damping_0:Nd,_i64Add:Oc,_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1:$d,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1:zs,_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1:Ob,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0:Ah,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1:Fh,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3:Wi,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0:to,_emscripten_bind_btPoint2PointConstraint_getPivotInB_0:sr,_emscripten_bind_btKinematicCharacterController_playerStep_2:Xi,_emscripten_bind_btDispatcherInfo___destroy___0:Tm,_emscripten_bind_btCapsuleShape_getMargin_0:pb,_emscripten_bind_btCylinderShape_getMargin_0:Lh,_emscripten_bind_btStaticPlaneShape_setLocalScaling_1:x_,_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2:bh,_emscripten_bind_ContactResultCallback_addSingleResult_7:Pl,_emscripten_bind_btGhostObject_getWorldTransform_0:ei,_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0:ym,_emscripten_bind_LocalConvexResult_set_m_hitFraction_1:ql,_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2:rb,_emscripten_bind_btDispatcherInfo_get_m_timeStep_0:Bm,_emscripten_bind_btWheelInfo_get_m_frictionSlip_0:ia,_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1:Ks,_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1:Ud,_emscripten_bind_btMotionState___destroy___0:vn,_emscripten_bind_btVector4_z_0:As,_emscripten_bind_btCollisionObject_setCollisionFlags_1:xb,_emscripten_bind_btGeneric6DofSpring2Constraint_getTranslationalLimitMotor_0:St,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1:nm,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2:rm,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3:om,_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1:Sa,_emscripten_bind_RaycastInfo_set_m_suspensionLength_1:Tu,_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1:Jm,_emscripten_bind_btVector4_setValue_4:Os,_emscripten_bind_btVector4_normalize_0:js,_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1:ou,_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1:Yn,_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0:Oi,_emscripten_bind_btConeTwistConstraint_setAngularOnly_1:xd,_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1:_i,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4:nr,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2:ir,_emscripten_bind_btGhostObject_getNumOverlappingObjects_0:Jt,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1:Vl,_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1:Pn,_emscripten_bind_btGeneric6DofSpring2Constraint_setDamping_2:Tt,_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1:wy,_emscripten_bind_btPoint2PointConstraint_setPivotA_1:fr,_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1:_l,_memcpy:Wc,_emscripten_bind_btCapsuleShape_calculateLocalInertia_2:fb,_emscripten_bind_btVector3_y_0:gs,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0:Vs,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2:Uu,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3:zu,_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0:nu,_emscripten_bind_btGhostObject_setCollisionShape_1:ai,_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1:Em,_emscripten_bind_btQuaternion_setW_1:jr,_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1:zn,_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1:Sm,_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1:qs,_emscripten_bind_btGeneric6DofSpring2Constraint___destroy___0:Ry,_emscripten_bind_btCollisionObject_forceActivationState_1:wb,_emscripten_bind_btKinematicCharacterController_onGround_0:Ni,_emscripten_bind_btRaycastVehicle_getWheelInfo_1:Er,_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0:gy,_emscripten_bind_btConeTwistConstraint_setLimit_2:Wd,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1:rl,_emscripten_bind_btRigidBody___destroy___0:vo,_emscripten_bind_btStridingMeshInterface___destroy___0:M_,_emscripten_bind_btRigidBody_setSleepingThresholds_2:r_,_emscripten_bind_btCollisionObject_setWorldTransform_1:Fb,_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0:Kl,_emscripten_bind_btManifoldPoint_get_m_localPointA_0:_n,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0:no,_emscripten_bind_btGeneric6DofSpring2Constraint_enableFeedback_1:vt,_emscripten_bind_btDispatcher_getNumManifolds_0:$m,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0:ro,_emscripten_bind_btRigidBody_activate_1:wo,_emscripten_bind_btRigidBody_activate_0:Co,_emscripten_bind_btRaycastVehicle___destroy___0:Pr,_emscripten_bind_btGhostObject_setActivationState_1:ni,_emscripten_bind_btCollisionWorld_contactPairTest_3:Ub,_emscripten_bind_btCylinderShapeX___destroy___0:hh,_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0:rn,_emscripten_bind_ContactResultCallback___destroy___0:Ml,_emscripten_bind_btDispatcherInfo_set_m_stepCount_1:Zm,_emscripten_bind_btVector4_x_0:Ws,_emscripten_bind_btConstraintSetting_btConstraintSetting_0:Vd,_emscripten_bind_btRigidBody_getMotionState_0:Bo,_emscripten_bind_btKinematicCharacterController_getGhostObject_0:Fi,_emscripten_bind_btRigidBody_btRigidBody_1:Do,_emscripten_bind_btTriangleMeshShape___destroy___0:U_,_emscripten_bind_btKinematicCharacterController_setWalkDirection_1:$i,_emscripten_bind_btDynamicsWorld_removeAction_1:by,_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0:oo,_emscripten_bind_btTransform_setIdentity_0:E_,_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1:un,_emscripten_bind_btKinematicCharacterController_getGravity_0:Gi,_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0:Ld,_emscripten_bind_btDiscreteDynamicsWorld_addAction_1:im,_emscripten_bind_btHingeConstraint_btHingeConstraint_4:Si,_emscripten_bind_LocalShapeInfo_get_m_shapePart_0:iu,_emscripten_bind_btConeShape_calculateLocalInertia_2:Sd,_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2:yh,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1:Nl,_llvm_bswap_i32:Ac,_emscripten_enum_RotateOrder_RO_XZY:Oa,_emscripten_bind_btSphereShape_setLocalScaling_1:I_,_emscripten_bind_btVector4_w_0:Ps,_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0:an,_emscripten_bind_btBvhTriangleMeshShape___destroy___0:Zu,_emscripten_bind_LocalConvexResult_LocalConvexResult_5:Xl,_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1:il,_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1:wm,_emscripten_bind_btVector4_y_0:Bs,_emscripten_bind_btGeneric6DofConstraint___destroy___0:dy,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0:Ns,_emscripten_bind_btConvexHullShape_addPoint_1:th,_emscripten_bind_btConvexHullShape_addPoint_2:ih,_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0:or,_emscripten_bind_btTransform_getOrigin_0:F_,_emscripten_enum_RotateOrder_RO_ZYX:Pa,_emscripten_bind_btHingeConstraint___destroy___0:Ci,_emscripten_bind_btConvexShape_calculateLocalInertia_2:ch,_memset:Lc,_emscripten_bind_btKinematicCharacterController___destroy___0:Pi,_emscripten_bind_btConvexHullShape_setLocalScaling_1:_h,_emscripten_bind_btTriangleMesh_btTriangleMesh_0:J_,_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0:xn,_emscripten_bind_btTriangleMesh_btTriangleMesh_2:es,_emscripten_bind_btTransform___destroy___0:P_,_emscripten_bind_btWheelInfo_set_m_frictionSlip_1:ma,_emscripten_bind_btHingeConstraint_enableAngularMotor_3:Ti,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1:bn,_emscripten_bind_btRigidBody_setCenterOfMassTransform_1:Uo,_emscripten_bind_btManifoldPoint_get_m_localPointB_0:sn,_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3:pm,_emscripten_bind_btSliderConstraint_setLowerLinLimit_1:v_,_emscripten_bind_btPoint2PointConstraint_set_m_setting_1:lr,_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1:Lb,_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0:la,_emscripten_bind_btRigidBody_setLinearVelocity_1:$o,_emscripten_bind_btVehicleTuning_btVehicleTuning_0:Gs,_emscripten_bind_RayResultCallback_set_m_collisionObject_1:uu,_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1:Rl,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0:pl,_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1:ja,_emscripten_bind_btDynamicsWorld_addAction_1:ty,_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1:Cm,_emscripten_bind_btDefaultVehicleRaycaster___destroy___0:$h,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1:ho,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1:fo,_emscripten_bind_btKinematicCharacterController_setFallSpeed_1:Zi,_emscripten_bind_btRigidBody_setActivationState_1:Eo,_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0:fa,_emscripten_bind_ClosestConvexResultCallback_hasHit_0:tl,_emscripten_bind_btCapsuleShapeZ___destroy___0:ib,_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0:na,_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0:ul,_emscripten_bind_btTriangleMesh_addTriangle_3:Q_,_emscripten_bind_btGhostObject_getOverlappingObject_1:$t,_emscripten_bind_btTriangleMesh_addTriangle_4:q_,_emscripten_bind_btRigidBody_applyTorqueImpulse_1:Io,_emscripten_bind_btRigidBody_setCollisionFlags_1:zo,_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1:ka,_emscripten_bind_btConeShape___destroy___0:wd,_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2:nb,_emscripten_bind_btGeneric6DofSpring2Constraint_setBreakingImpulseThreshold_1:It,_emscripten_bind_btSliderConstraint_btSliderConstraint_3:b_,_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0:Dm,_emscripten_bind_RaycastInfo_set_m_hardPointWS_1:ju,_emscripten_bind_btRigidBody_forceActivationState_1:Oo,_emscripten_bind_btPoint2PointConstraint_setPivotB_1:pr,_emscripten_bind_btManifoldPoint_getDistance_0:nn,_emscripten_bind_btGhostPairCallback___destroy___0:bi,_emscripten_bind_btKinematicCharacterController_getMaxSlope_0:Ei,_emscripten_bind_btSliderConstraint_enableFeedback_1:h_,_emscripten_bind_btRaycastVehicle_addWheel_7:Wr,_emscripten_bind_btPairCachingGhostObject_isActive_0:Bn,_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1:eu,_emscripten_bind_btStaticPlaneShape___destroy___0:D_,_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0:Fm,_emscripten_bind_btBoxShape_setLocalScaling_1:Nu,_emscripten_bind_btConeShapeZ___destroy___0:yd,_emscripten_bind_btDynamicsWorld_getPairCache_0:py,_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5:um,_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2:Ji,_emscripten_bind_btRigidBody_setRestitution_1:i_,_emscripten_bind_btVector4_btVector4_0:ws,_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0:Mm,_emscripten_bind_btVector4_btVector4_4:ks,_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1:ky,_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1:Nt,_emscripten_enum_RotateOrder_RO_ZXY:Ma,_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1:Ql,_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1:Nn,_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1:Ft,_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3:vm,_emscripten_bind_btWheelInfo_get_m_raycastInfo_0:oa,_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0:qd,_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0:di,_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1:Yi,_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1:wl,_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0:Es,__GLOBAL__sub_I_btConeTwistConstraint_cpp:FI,__GLOBAL__sub_I_btQuickprof_cpp:Xp,runPostSets:Tc,stackAlloc:VO,stackSave:NO,stackRestore:XO,establishStackSpace:HO,setThrew:ZO,setTempRet0:YO,getTempRet0:KO,dynCall_viiiii:zc,dynCall_vid:Yc,dynCall_vi:Kc,dynCall_viiidii:Qc,dynCall_vii:qc,dynCall_iiiiiiiiiii:Jc,dynCall_ii:$c,dynCall_viidi:ef,dynCall_viddiii:tf,dynCall_vidii:nf,dynCall_iiiii:rf,dynCall_vidi:of,dynCall_diiiiiiii:_f,dynCall_viiiiddddiid:sf,dynCall_diiiii:af,dynCall_iiii:cf,dynCall_viiiiii:ff,dynCall_iiid:pf,dynCall_di:lf,dynCall_iiiiiii:uf,dynCall_diiidii:bf,dynCall_viidii:df,dynCall_viiiiiii:hf,dynCall_viiiiiiiii:mf,dynCall_viiiiiiiiii:yf,dynCall_iii:gf,dynCall_diii:vf,dynCall_diiiiiiiiii:Cf,dynCall_viiiid:wf,dynCall_diiiiiiiii:kf,dynCall_did:Sf,dynCall_viiiidddddidi:Rf,dynCall_diidii:jf,dynCall_diiii:If,dynCall_iiiiiiiiii:Tf,dynCall_viiid:Df,dynCall_viii:Of,dynCall_v:Lf,dynCall_viid:xf,dynCall_iidid:Mf,dynCall_viiii:Pf}}(n.asmGlobalArg,n.asmLibraryArg,un),rr=n._emscripten_bind_btCylinderShape___destroy___0=nr._emscripten_bind_btCylinderShape___destroy___0,or=n._emscripten_bind_btGeneric6DofConstraint_enableFeedback_1=nr._emscripten_bind_btGeneric6DofConstraint_enableFeedback_1,_r=n._emscripten_bind_btDispatcherInfo_get_m_enableSPU_0=nr._emscripten_bind_btDispatcherInfo_get_m_enableSPU_0,sr=n._emscripten_bind_btDispatcherInfo_set_m_useContinuous_1=nr._emscripten_bind_btDispatcherInfo_set_m_useContinuous_1,ar=n._emscripten_bind_btCollisionObject_isActive_0=nr._emscripten_bind_btCollisionObject_isActive_0,cr=n._emscripten_bind_btVehicleTuning_set_m_frictionSlip_1=nr._emscripten_bind_btVehicleTuning_set_m_frictionSlip_1,fr=n._emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=nr._emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4,pr=n._emscripten_bind_btCapsuleShapeX_getMargin_0=nr._emscripten_bind_btCapsuleShapeX_getMargin_0,lr=n._emscripten_bind_btCompoundShape_getMargin_0=nr._emscripten_bind_btCompoundShape_getMargin_0,ur=n._emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1=nr._emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1,br=n._emscripten_bind_btAxisSweep3___destroy___0=nr._emscripten_bind_btAxisSweep3___destroy___0,dr=n._emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0,hr=n._emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1,mr=n._emscripten_bind_btQuaternion_setX_1=nr._emscripten_bind_btQuaternion_setX_1,yr=n._emscripten_bind_btCylinderShapeZ_getMargin_0=nr._emscripten_bind_btCylinderShapeZ_getMargin_0,gr=n._emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0=nr._emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0,vr=n._emscripten_bind_btQuaternion_setZ_1=nr._emscripten_bind_btQuaternion_setZ_1,Cr=n._emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0=nr._emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0,wr=n._emscripten_bind_btKinematicCharacterController_setMaxSlope_1=nr._emscripten_bind_btKinematicCharacterController_setMaxSlope_1,kr=n._emscripten_bind_btQuadWord_z_0=nr._emscripten_bind_btQuadWord_z_0,Sr=n._emscripten_bind_btTransform_setIdentity_0=nr._emscripten_bind_btTransform_setIdentity_0,Rr=n._emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0=nr._emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0,jr=n._emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0=nr._emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0,Ir=n._emscripten_bind_btGeneric6DofSpring2Constraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btGeneric6DofSpring2Constraint_getBreakingImpulseThreshold_0,Tr=n._emscripten_bind_btQuaternion_setW_1=nr._emscripten_bind_btQuaternion_setW_1,Dr=n._emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0=nr._emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0,Or=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0,Lr=n._emscripten_bind_btCollisionDispatcher___destroy___0=nr._emscripten_bind_btCollisionDispatcher___destroy___0,xr=n._emscripten_bind_btRigidBody_applyCentralImpulse_1=nr._emscripten_bind_btRigidBody_applyCentralImpulse_1,Mr=n._emscripten_bind_btConvexHullShape_getMargin_0=nr._emscripten_bind_btConvexHullShape_getMargin_0,Pr=n._emscripten_bind_btDefaultMotionState_getWorldTransform_1=nr._emscripten_bind_btDefaultMotionState_getWorldTransform_1,Wr=n._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=nr._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1,Br=n._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=nr._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3,Ar=n._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=nr._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2,Fr=n._emscripten_bind_btVector3_op_mul_1=nr._emscripten_bind_btVector3_op_mul_1,Gr=n._emscripten_bind_btDynamicsWorld_rayTest_3=nr._emscripten_bind_btDynamicsWorld_rayTest_3,Er=n._emscripten_bind_btRaycastVehicle_updateWheelTransform_2=nr._emscripten_bind_btRaycastVehicle_updateWheelTransform_2,Vr=n._emscripten_bind_btQuadWord_x_0=nr._emscripten_bind_btQuadWord_x_0,Nr=n._emscripten_bind_btCollisionObject_isKinematicObject_0=nr._emscripten_bind_btCollisionObject_isKinematicObject_0,Xr=n._emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1=nr._emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1,Hr=n._emscripten_bind_btSphereShape___destroy___0=nr._emscripten_bind_btSphereShape___destroy___0,Zr=n._emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1,Ur=n._emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1,zr=n._emscripten_bind_btRigidBody_getCenterOfMassTransform_0=nr._emscripten_bind_btRigidBody_getCenterOfMassTransform_0,Yr=n._emscripten_bind_btGhostObject_isKinematicObject_0=nr._emscripten_bind_btGhostObject_isKinematicObject_0,Kr=n._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5=nr._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5,Qr=n._emscripten_bind_btCapsuleShape___destroy___0=nr._emscripten_bind_btCapsuleShape___destroy___0,qr=n._emscripten_bind_btCollisionObject_activate_1=nr._emscripten_bind_btCollisionObject_activate_1,Jr=n._emscripten_bind_btCollisionObject_activate_0=nr._emscripten_bind_btCollisionObject_activate_0,$r=n._emscripten_bind_btGeneric6DofSpring2Constraint_getRotationalLimitMotor_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_getRotationalLimitMotor_1,eo=n._emscripten_bind_btKinematicCharacterController_setUpAxis_1=nr._emscripten_bind_btKinematicCharacterController_setUpAxis_1,to=n._emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1=nr._emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1,io=n._emscripten_bind_btGeneric6DofSpring2Constraint_setAngularUpperLimit_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setAngularUpperLimit_1,no=n._emscripten_bind_btTranslationalLimitMotor2___destroy___0=nr._emscripten_bind_btTranslationalLimitMotor2___destroy___0,ro=n._emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=nr._emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1,oo=n._emscripten_bind_btVector3_setX_1=nr._emscripten_bind_btVector3_setX_1,_o=n._emscripten_bind_btCollisionConfiguration___destroy___0=nr._emscripten_bind_btCollisionConfiguration___destroy___0,so=n._emscripten_bind_btCapsuleShapeZ_setMargin_1=nr._emscripten_bind_btCapsuleShapeZ_setMargin_1,ao=n._emscripten_bind_btHingeConstraint_enableFeedback_1=nr._emscripten_bind_btHingeConstraint_enableFeedback_1,co=n._emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=nr._emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1,fo=n._emscripten_bind_btManifoldPoint_set_m_localPointB_1=nr._emscripten_bind_btManifoldPoint_set_m_localPointB_1,po=n._emscripten_bind_btVector3_setZ_1=nr._emscripten_bind_btVector3_setZ_1,lo=n._emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=nr._emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1,uo=n._emscripten_bind_btQuaternion_setValue_4=nr._emscripten_bind_btQuaternion_setValue_4,bo=n._emscripten_bind_btDynamicsWorld_getBroadphase_0=nr._emscripten_bind_btDynamicsWorld_getBroadphase_0,ho=n._emscripten_bind_LocalShapeInfo___destroy___0=nr._emscripten_bind_LocalShapeInfo___destroy___0,mo=n._emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0=nr._emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0,yo=n._emscripten_bind_btQuadWord_setY_1=nr._emscripten_bind_btQuadWord_setY_1,go=n._emscripten_bind_btRigidBody_isKinematicObject_0=nr._emscripten_bind_btRigidBody_isKinematicObject_0,vo=n._emscripten_bind_ContactResultCallback_addSingleResult_7=nr._emscripten_bind_ContactResultCallback_addSingleResult_7,Co=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1,wo=n._emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0=nr._emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0,ko=n._emscripten_bind_btConeTwistConstraint_setDamping_1=nr._emscripten_bind_btConeTwistConstraint_setDamping_1,So=n._emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=nr._emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0,Ro=n._emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0,jo=n._emscripten_bind_btCylinderShape_setMargin_1=nr._emscripten_bind_btCylinderShape_setMargin_1,Io=n._emscripten_bind_btCollisionWorld___destroy___0=nr._emscripten_bind_btCollisionWorld___destroy___0,To=n._emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0=nr._emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0,Do=n._emscripten_bind_btBoxShape_btBoxShape_1=nr._emscripten_bind_btBoxShape_btBoxShape_1,Oo=n._emscripten_bind_btPersistentManifold_getBody1_0=nr._emscripten_bind_btPersistentManifold_getBody1_0,Lo=n._emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1,xo=n._emscripten_bind_RaycastInfo_set_m_isInContact_1=nr._emscripten_bind_RaycastInfo_set_m_isInContact_1,Mo=n._emscripten_bind_btKinematicCharacterController_setGravity_1=nr._emscripten_bind_btKinematicCharacterController_setGravity_1,Po=n._emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=nr._emscripten_bind_btConstraintSetting_set_m_impulseClamp_1,Wo=n._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=nr._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5,Bo=n._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=nr._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3,Ao=n._emscripten_bind_LocalShapeInfo_get_m_shapePart_0=nr._emscripten_bind_LocalShapeInfo_get_m_shapePart_0,Fo=n.__GLOBAL__sub_I_btConeTwistConstraint_cpp=nr.__GLOBAL__sub_I_btConeTwistConstraint_cpp,Go=n._emscripten_bind_btWheelInfo_get_m_rollInfluence_0=nr._emscripten_bind_btWheelInfo_get_m_rollInfluence_0,Eo=n._emscripten_bind_btVector4_setValue_4=nr._emscripten_bind_btVector4_setValue_4,Vo=n._emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=nr._emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1,No=n._emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1,Xo=n._emscripten_bind_btDynamicsWorld_getDispatchInfo_0=nr._emscripten_bind_btDynamicsWorld_getDispatchInfo_0,Ho=n._emscripten_bind_btCompoundShape_removeChildShapeByIndex_1=nr._emscripten_bind_btCompoundShape_removeChildShapeByIndex_1,Zo=n._emscripten_bind_btGeneric6DofSpring2Constraint_enableSpring_2=nr._emscripten_bind_btGeneric6DofSpring2Constraint_enableSpring_2,Uo=n._emscripten_bind_btVector3_length_0=nr._emscripten_bind_btVector3_length_0,zo=n._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=nr._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2,Yo=n._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=nr._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1,Ko=n._emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1,Qo=n._emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=nr._emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1,qo=n._emscripten_bind_btBoxShape_getMargin_0=nr._emscripten_bind_btBoxShape_getMargin_0,Jo=n._emscripten_bind_btPairCachingGhostObject___destroy___0=nr._emscripten_bind_btPairCachingGhostObject___destroy___0,$o=n._emscripten_bind_btDynamicsWorld_addCollisionObject_3=nr._emscripten_bind_btDynamicsWorld_addCollisionObject_3,e_=n._emscripten_bind_btPairCachingGhostObject_activate_0=nr._emscripten_bind_btPairCachingGhostObject_activate_0,t_=n._emscripten_bind_btPairCachingGhostObject_activate_1=nr._emscripten_bind_btPairCachingGhostObject_activate_1,i_=n._emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0=nr._emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0,n_=n._emscripten_bind_btPairCachingGhostObject_forceActivationState_1=nr._emscripten_bind_btPairCachingGhostObject_forceActivationState_1,r_=n._emscripten_bind_btDefaultMotionState___destroy___0=nr._emscripten_bind_btDefaultMotionState___destroy___0,o_=n._emscripten_bind_btDispatcherInfo_get_m_stepCount_0=nr._emscripten_bind_btDispatcherInfo_get_m_stepCount_0,__=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1,s_=n._emscripten_bind_btQuadWord_setW_1=nr._emscripten_bind_btQuadWord_setW_1,a_=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0,c_=n._emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2=nr._emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2,f_=n._emscripten_bind_LocalShapeInfo_set_m_shapePart_1=nr._emscripten_bind_LocalShapeInfo_set_m_shapePart_1,p_=n._emscripten_bind_btRigidBody_setLinearFactor_1=nr._emscripten_bind_btRigidBody_setLinearFactor_1,l_=n._emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1=nr._emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1,u_=n._emscripten_bind_btWheelInfo_get_m_engineForce_0=nr._emscripten_bind_btWheelInfo_get_m_engineForce_0,b_=n._emscripten_bind_btRaycastVehicle_setSteeringValue_2=nr._emscripten_bind_btRaycastVehicle_setSteeringValue_2,d_=n._emscripten_enum_RotateOrder_RO_YXZ=nr._emscripten_enum_RotateOrder_RO_YXZ,h_=n._emscripten_bind_btPoint2PointConstraint___destroy___0=nr._emscripten_bind_btPoint2PointConstraint___destroy___0,m_=n._emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1=nr._emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1,y_=n._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=nr._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2,g_=n._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=nr._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1,v_=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1,re=n._malloc=nr._malloc,C_=n._emscripten_bind_btDispatcherInfo_get_m_useEpa_0=nr._emscripten_bind_btDispatcherInfo_get_m_useEpa_0,w_=n._emscripten_bind_btTransform_btTransform_2=nr._emscripten_bind_btTransform_btTransform_2,k_=n._emscripten_bind_btTransform_btTransform_0=nr._emscripten_bind_btTransform_btTransform_0,S_=n._emscripten_bind_btVector3_op_sub_1=nr._emscripten_bind_btVector3_op_sub_1,R_=n._emscripten_bind_btWheelInfo_set_m_wheelsRadius_1=nr._emscripten_bind_btWheelInfo_set_m_wheelsRadius_1,j_=n._emscripten_bind_btDispatcherInfo_set_m_enableSPU_1=nr._emscripten_bind_btDispatcherInfo_set_m_enableSPU_1,I_=n._emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1=nr._emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1,T_=n._emscripten_bind_btCollisionObject_setActivationState_1=nr._emscripten_bind_btCollisionObject_setActivationState_1,D_=n._emscripten_bind_btPersistentManifold___destroy___0=nr._emscripten_bind_btPersistentManifold___destroy___0,O_=n._emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=nr._emscripten_bind_btConstraintSetting_get_m_impulseClamp_0,L_=n._emscripten_bind_btCylinderShapeZ___destroy___0=nr._emscripten_bind_btCylinderShapeZ___destroy___0,x_=n._emscripten_bind_btMatrix3x3___destroy___0=nr._emscripten_bind_btMatrix3x3___destroy___0,M_=n._emscripten_bind_ConvexResultCallback_hasHit_0=nr._emscripten_bind_ConvexResultCallback_hasHit_0,P_=n._emscripten_bind_btCollisionShape_calculateLocalInertia_2=nr._emscripten_bind_btCollisionShape_calculateLocalInertia_2,W_=n._emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1,B_=n._emscripten_bind_btCollisionWorld_convexSweepTest_5=nr._emscripten_bind_btCollisionWorld_convexSweepTest_5,A_=n._emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1,F_=n._emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2=nr._emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2,G_=n._emscripten_bind_btConstraintSetting_set_m_damping_1=nr._emscripten_bind_btConstraintSetting_set_m_damping_1,E_=n._emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1=nr._emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1,V_=n._emscripten_bind_btRigidBody_setCcdMotionThreshold_1=nr._emscripten_bind_btRigidBody_setCcdMotionThreshold_1,N_=n._emscripten_bind_btConvexHullShape_setMargin_1=nr._emscripten_bind_btConvexHullShape_setMargin_1,X_=n._emscripten_bind_btRigidBody_applyForce_2=nr._emscripten_bind_btRigidBody_applyForce_2,H_=n._emscripten_bind_btConeShapeZ_calculateLocalInertia_2=nr._emscripten_bind_btConeShapeZ_calculateLocalInertia_2,Z_=n._emscripten_bind_btConstraintSetting_set_m_tau_1=nr._emscripten_bind_btConstraintSetting_set_m_tau_1,U_=n._emscripten_bind_btConvexHullShape_calculateLocalInertia_2=nr._emscripten_bind_btConvexHullShape_calculateLocalInertia_2,z_=n._emscripten_bind_RaycastInfo_get_m_contactPointWS_0=nr._emscripten_bind_RaycastInfo_get_m_contactPointWS_0,Y_=n._emscripten_bind_btSphereShape_calculateLocalInertia_2=nr._emscripten_bind_btSphereShape_calculateLocalInertia_2,K_=n._emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1,Q_=n._emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=nr._emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1,q_=n._pthread_self=nr._pthread_self,J_=n._emscripten_bind_btGhostObject_setFriction_1=nr._emscripten_bind_btGhostObject_setFriction_1,$_=n._emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=nr._emscripten_bind_btPairCachingGhostObject_getWorldTransform_0,es=n._emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=nr._emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1,ts=n._emscripten_bind_btCylinderShapeZ_setMargin_1=nr._emscripten_bind_btCylinderShapeZ_setMargin_1,is=n._emscripten_bind_btRigidBody_setFriction_1=nr._emscripten_bind_btRigidBody_setFriction_1,ns=n._emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1=nr._emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1,rs=n._emscripten_bind_btGhostObject_setWorldTransform_1=nr._emscripten_bind_btGhostObject_setWorldTransform_1,os=n._emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=nr._emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1,_s=n._emscripten_bind_btTranslationalLimitMotor2_set_m_currentLinearDiff_1=nr._emscripten_bind_btTranslationalLimitMotor2_set_m_currentLinearDiff_1,ss=n._emscripten_bind_btConvexHullShape___destroy___0=nr._emscripten_bind_btConvexHullShape___destroy___0,as=n._emscripten_bind_RaycastInfo_set_m_suspensionLength_1=nr._emscripten_bind_RaycastInfo_set_m_suspensionLength_1,cs=n._emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0,fs=n._emscripten_bind_btDiscreteDynamicsWorld_addAction_1=nr._emscripten_bind_btDiscreteDynamicsWorld_addAction_1,ps=n._emscripten_bind_btVector4_setX_1=nr._emscripten_bind_btVector4_setX_1,ls=n._emscripten_bind_btKinematicCharacterController_jump_0=nr._emscripten_bind_btKinematicCharacterController_jump_0,us=n._emscripten_bind_btWheelInfo_set_m_raycastInfo_1=nr._emscripten_bind_btWheelInfo_set_m_raycastInfo_1,bs=n._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=nr._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1,ds=n._emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=nr._emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1,hs=n._emscripten_bind_btRigidBody_upcast_1=nr._emscripten_bind_btRigidBody_upcast_1,ms=n._emscripten_bind_btCollisionObject_getWorldTransform_0=nr._emscripten_bind_btCollisionObject_getWorldTransform_0,ys=n._emscripten_bind_btVector4_setZ_1=nr._emscripten_bind_btVector4_setZ_1,gs=n._emscripten_bind_btQuadWord_y_0=nr._emscripten_bind_btQuadWord_y_0,vs=n._emscripten_bind_btTransform_getBasis_0=nr._emscripten_bind_btTransform_getBasis_0,Cs=n._emscripten_bind_btPairCachingGhostObject_setFriction_1=nr._emscripten_bind_btPairCachingGhostObject_setFriction_1,ws=n._emscripten_bind_btDispatcherInfo_set_m_useEpa_1=nr._emscripten_bind_btDispatcherInfo_set_m_useEpa_1,ks=n._emscripten_bind_btCollisionDispatcher_getNumManifolds_0=nr._emscripten_bind_btCollisionDispatcher_getNumManifolds_0,Ss=n._emscripten_bind_btVehicleRaycaster___destroy___0=nr._emscripten_bind_btVehicleRaycaster___destroy___0,Rs=n._emscripten_bind_ClosestRayResultCallback___destroy___0=nr._emscripten_bind_ClosestRayResultCallback___destroy___0,js=n._emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0,Is=n._emscripten_bind_btCylinderShapeX_setMargin_1=nr._emscripten_bind_btCylinderShapeX_setMargin_1,Ts=n._emscripten_bind_btQuadWord_w_0=nr._emscripten_bind_btQuadWord_w_0,Ds=n._emscripten_bind_btPersistentManifold_getNumContacts_0=nr._emscripten_bind_btPersistentManifold_getNumContacts_0,Os=n._emscripten_bind_btDynamicsWorld_contactTest_2=nr._emscripten_bind_btDynamicsWorld_contactTest_2,Ls=n._emscripten_bind_btDiscreteDynamicsWorld_contactTest_2=nr._emscripten_bind_btDiscreteDynamicsWorld_contactTest_2,xs=n._emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_3=nr._emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_3,Ms=n._emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=nr._emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2,Ps=n._emscripten_bind_btCompoundShape_getNumChildShapes_0=nr._emscripten_bind_btCompoundShape_getNumChildShapes_0,Ws=n._emscripten_bind_btGhostObject_btGhostObject_0=nr._emscripten_bind_btGhostObject_btGhostObject_0,Bs=n._emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2=nr._emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2,As=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1,Fs=n._emscripten_bind_btManifoldPoint_set_m_localPointA_1=nr._emscripten_bind_btManifoldPoint_set_m_localPointA_1,Gs=n._emscripten_bind_LocalConvexResult___destroy___0=nr._emscripten_bind_LocalConvexResult___destroy___0,Es=n._emscripten_bind_btVector3_dot_1=nr._emscripten_bind_btVector3_dot_1,Vs=n._emscripten_bind_btVector4_op_add_1=nr._emscripten_bind_btVector4_op_add_1,Ns=n._emscripten_bind_btWheelInfo___destroy___0=nr._emscripten_bind_btWheelInfo___destroy___0,Xs=n._emscripten_bind_btHingeConstraint_btHingeConstraint_4=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_4,Hs=n._emscripten_bind_btTransform_setRotation_1=nr._emscripten_bind_btTransform_setRotation_1,Zs=n._emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=nr._emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0,Us=n._emscripten_bind_btPoint2PointConstraint_enableFeedback_1=nr._emscripten_bind_btPoint2PointConstraint_enableFeedback_1,zs=n._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1,Ys=n._emscripten_bind_btAxisSweep3_btAxisSweep3_2=nr._emscripten_bind_btAxisSweep3_btAxisSweep3_2,Ks=n._emscripten_bind_btAxisSweep3_btAxisSweep3_3=nr._emscripten_bind_btAxisSweep3_btAxisSweep3_3,Qs=n._emscripten_bind_btDynamicsWorld___destroy___0=nr._emscripten_bind_btDynamicsWorld___destroy___0,qs=n._emscripten_bind_btVector3_setY_1=nr._emscripten_bind_btVector3_setY_1,Js=n._emscripten_bind_btAxisSweep3_btAxisSweep3_4=nr._emscripten_bind_btAxisSweep3_btAxisSweep3_4,$s=n._emscripten_bind_btAxisSweep3_btAxisSweep3_5=nr._emscripten_bind_btAxisSweep3_btAxisSweep3_5,ea=n._emscripten_bind_btQuadWord_setX_1=nr._emscripten_bind_btQuadWord_setX_1,ta=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0,ia=n._emscripten_bind_btGhostObject_isActive_0=nr._emscripten_bind_btGhostObject_isActive_0,na=n._emscripten_bind_btOverlappingPairCache___destroy___0=nr._emscripten_bind_btOverlappingPairCache___destroy___0,ra=n._emscripten_bind_btVector3_normalize_0=nr._emscripten_bind_btVector3_normalize_0,oa=n._emscripten_bind_btConstraintSetting___destroy___0=nr._emscripten_bind_btConstraintSetting___destroy___0,_a=n._emscripten_bind_RayResultCallback___destroy___0=nr._emscripten_bind_RayResultCallback___destroy___0,sa=n._emscripten_bind_RaycastInfo_get_m_contactNormalWS_0=nr._emscripten_bind_RaycastInfo_get_m_contactNormalWS_0,aa=n._emscripten_bind_btTranslationalLimitMotor2_get_m_currentLinearDiff_0=nr._emscripten_bind_btTranslationalLimitMotor2_get_m_currentLinearDiff_0,ca=n._emscripten_bind_btPersistentManifold_getBody0_0=nr._emscripten_bind_btPersistentManifold_getBody0_0,fa=n._emscripten_bind_btConeShapeX_btConeShapeX_2=nr._emscripten_bind_btConeShapeX_btConeShapeX_2,pa=n._emscripten_bind_btConeTwistConstraint_enableFeedback_1=nr._emscripten_bind_btConeTwistConstraint_enableFeedback_1,la=n._emscripten_bind_btCapsuleShapeZ_setLocalScaling_1=nr._emscripten_bind_btCapsuleShapeZ_setLocalScaling_1,ua=n._emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0,ba=n._emscripten_bind_btSliderConstraint_setUpperLinLimit_1=nr._emscripten_bind_btSliderConstraint_setUpperLinLimit_1,da=n._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=nr._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2,ha=n._emscripten_bind_btConcaveShape___destroy___0=nr._emscripten_bind_btConcaveShape___destroy___0,ma=n._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=nr._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4,ya=n._emscripten_bind_btQuaternion_x_0=nr._emscripten_bind_btQuaternion_x_0,ga=n._emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1=nr._emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1,va=n._emscripten_bind_btConcaveShape_setLocalScaling_1=nr._emscripten_bind_btConcaveShape_setLocalScaling_1,Ca=n._emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0,wa=n._emscripten_bind_btConeShapeX_setLocalScaling_1=nr._emscripten_bind_btConeShapeX_setLocalScaling_1,ka=n._emscripten_bind_btGeneric6DofSpring2Constraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setBreakingImpulseThreshold_1,Sa=n._emscripten_bind_btQuaternion_z_0=nr._emscripten_bind_btQuaternion_z_0,Ra=n._emscripten_bind_btConvexHullShape_btConvexHullShape_0=nr._emscripten_bind_btConvexHullShape_btConvexHullShape_0,ja=n._emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1=nr._emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1,Ia=n._emscripten_bind_btConstraintSetting_get_m_damping_0=nr._emscripten_bind_btConstraintSetting_get_m_damping_0,Ta=n._emscripten_bind_btRotationalLimitMotor2___destroy___0=nr._emscripten_bind_btRotationalLimitMotor2___destroy___0,Da=n._emscripten_bind_btGhostObject___destroy___0=nr._emscripten_bind_btGhostObject___destroy___0,Oa=n._emscripten_bind_btGhostObject_setContactProcessingThreshold_1=nr._emscripten_bind_btGhostObject_setContactProcessingThreshold_1,La=n._emscripten_bind_btCollisionWorld_getBroadphase_0=nr._emscripten_bind_btCollisionWorld_getBroadphase_0,xa=n._emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1=nr._emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1,Ma=n._emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=nr._emscripten_bind_btDefaultMotionState_btDefaultMotionState_2,Pa=n._emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=nr._emscripten_bind_btDefaultMotionState_btDefaultMotionState_0,Wa=n._emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=nr._emscripten_bind_btDefaultMotionState_btDefaultMotionState_1,Ba=n._emscripten_bind_btCompoundShape_getChildShape_1=nr._emscripten_bind_btCompoundShape_getChildShape_1,Aa=n._emscripten_bind_btKinematicCharacterController_canJump_0=nr._emscripten_bind_btKinematicCharacterController_canJump_0,Fa=n._emscripten_bind_btRigidBody_isActive_0=nr._emscripten_bind_btRigidBody_isActive_0,Ga=n._emscripten_bind_btRaycastVehicle_btRaycastVehicle_3=nr._emscripten_bind_btRaycastVehicle_btRaycastVehicle_3,Ea=n._emscripten_bind_btMotionState_setWorldTransform_1=nr._emscripten_bind_btMotionState_setWorldTransform_1,Va=n._emscripten_bind_btCylinderShape_setLocalScaling_1=nr._emscripten_bind_btCylinderShape_setLocalScaling_1,Na=n._emscripten_bind_btCollisionWorld_rayTest_3=nr._emscripten_bind_btCollisionWorld_rayTest_3,Xa=n._emscripten_bind_btCompoundShape_calculateLocalInertia_2=nr._emscripten_bind_btCompoundShape_calculateLocalInertia_2,Ha=n._emscripten_bind_btCollisionWorld_getDispatchInfo_0=nr._emscripten_bind_btCollisionWorld_getDispatchInfo_0,Za=n._emscripten_bind_btRigidBody_setCollisionShape_1=nr._emscripten_bind_btRigidBody_setCollisionShape_1,Ua=n._emscripten_bind_btConeShapeX___destroy___0=nr._emscripten_bind_btConeShapeX___destroy___0,za=n._emscripten_bind_btCollisionObject_getCollisionFlags_0=nr._emscripten_bind_btCollisionObject_getCollisionFlags_0,Ya=n._emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1=nr._emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1,Ka=n._emscripten_bind_btConeTwistConstraint_enableMotor_1=nr._emscripten_bind_btConeTwistConstraint_enableMotor_1,Qa=n._emscripten_bind_btRaycastVehicle_setCoordinateSystem_3=nr._emscripten_bind_btRaycastVehicle_setCoordinateSystem_3,qa=n._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=nr._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0,Ja=n._emscripten_bind_btPairCachingGhostObject_setRestitution_1=nr._emscripten_bind_btPairCachingGhostObject_setRestitution_1,$a=n._emscripten_bind_ConvexResultCallback___destroy___0=nr._emscripten_bind_ConvexResultCallback___destroy___0,ec=n._emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0,tc=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1,ic=n._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=nr._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3,nc=n._emscripten_bind_btCollisionObject_setContactProcessingThreshold_1=nr._emscripten_bind_btCollisionObject_setContactProcessingThreshold_1,rc=n._emscripten_bind_btGhostObject_setCcdMotionThreshold_1=nr._emscripten_bind_btGhostObject_setCcdMotionThreshold_1,oc=n._emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0=nr._emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0,_c=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0,sc=n._emscripten_bind_btCapsuleShapeX_setMargin_1=nr._emscripten_bind_btCapsuleShapeX_setMargin_1,ac=n._emscripten_bind_btGeneric6DofSpring2Constraint_setStiffness_2=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setStiffness_2,cc=n._emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=nr._emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0,fc=n._emscripten_bind_LocalConvexResult_LocalConvexResult_5=nr._emscripten_bind_LocalConvexResult_LocalConvexResult_5,pc=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1,lc=n._emscripten_bind_btRigidBody_getCollisionFlags_0=nr._emscripten_bind_btRigidBody_getCollisionFlags_0,uc=n._emscripten_bind_btCollisionShape_setLocalScaling_1=nr._emscripten_bind_btCollisionShape_setLocalScaling_1,bc=n._emscripten_bind_btRigidBody_applyTorque_1=nr._emscripten_bind_btRigidBody_applyTorque_1,dc=n._emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0=nr._emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0,hc=n._emscripten_bind_btMatrix3x3_setEulerZYX_3=nr._emscripten_bind_btMatrix3x3_setEulerZYX_3,mc=n._emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0=nr._emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0,yc=n._emscripten_bind_btConvexHullShape_setLocalScaling_1=nr._emscripten_bind_btConvexHullShape_setLocalScaling_1,gc=n._emscripten_bind_btRigidBody_setMotionState_1=nr._emscripten_bind_btRigidBody_setMotionState_1,vc=n._emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=nr._emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0,Cc=n._emscripten_bind_btCollisionWorld_getDispatcher_0=nr._emscripten_bind_btCollisionWorld_getDispatcher_0,wc=n._emscripten_bind_btVector4_dot_1=nr._emscripten_bind_btVector4_dot_1,kc=n._emscripten_bind_btCollisionObject_setRollingFriction_1=nr._emscripten_bind_btCollisionObject_setRollingFriction_1,Sc=n._emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=nr._emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1,Rc=n._emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=nr._emscripten_bind_btPairCachingGhostObject_getCollisionShape_0,jc=n._emscripten_bind_btRotationalLimitMotor2_get_m_currentPosition_0=nr._emscripten_bind_btRotationalLimitMotor2_get_m_currentPosition_0,Ic=n._i64Subtract=nr._i64Subtract,Tc=n._emscripten_bind_btRaycastVehicle_getWheelTransformWS_1=nr._emscripten_bind_btRaycastVehicle_getWheelTransformWS_1,Dc=n._emscripten_bind_btRigidBody_setDamping_2=nr._emscripten_bind_btRigidBody_setDamping_2,Oc=n._emscripten_bind_btDynamicsWorld_getDispatcher_0=nr._emscripten_bind_btDynamicsWorld_getDispatcher_0,Lc=n._emscripten_bind_btGhostObject_setCollisionFlags_1=nr._emscripten_bind_btGhostObject_setCollisionFlags_1,xc=n._emscripten_bind_btMatrix3x3_getRotation_1=nr._emscripten_bind_btMatrix3x3_getRotation_1,Mc=n._emscripten_bind_btWheelInfo_set_m_engineForce_1=nr._emscripten_bind_btWheelInfo_set_m_engineForce_1,Pc=n._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=nr._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1,Wc=n._emscripten_bind_btCylinderShapeX_setLocalScaling_1=nr._emscripten_bind_btCylinderShapeX_setLocalScaling_1,Bc=n._emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=nr._emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0,Ac=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0,Fc=n._emscripten_bind_btCompoundShape_setLocalScaling_1=nr._emscripten_bind_btCompoundShape_setLocalScaling_1,Gc=n._emscripten_bind_btOverlappingPairCallback___destroy___0=nr._emscripten_bind_btOverlappingPairCallback___destroy___0,Ec=n._emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=nr._emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0,Vc=n._emscripten_bind_btCylinderShape_calculateLocalInertia_2=nr._emscripten_bind_btCylinderShape_calculateLocalInertia_2,Nc=n._emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=nr._emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1,Xc=n._emscripten_bind_btHingeConstraint_enableAngularMotor_3=nr._emscripten_bind_btHingeConstraint_enableAngularMotor_3,Hc=n._emscripten_bind_btRigidBody_setContactProcessingThreshold_1=nr._emscripten_bind_btRigidBody_setContactProcessingThreshold_1,Zc=n._emscripten_bind_btRigidBody_getLinearVelocity_0=nr._emscripten_bind_btRigidBody_getLinearVelocity_0,Uc=n._emscripten_bind_btRigidBody_applyImpulse_2=nr._emscripten_bind_btRigidBody_applyImpulse_2,zc=n._emscripten_bind_btConcaveShape_calculateLocalInertia_2=nr._emscripten_bind_btConcaveShape_calculateLocalInertia_2,Yc=n._emscripten_bind_RaycastInfo_get_m_groundObject_0=nr._emscripten_bind_RaycastInfo_get_m_groundObject_0,Kc=n._emscripten_bind_btRigidBody_setWorldTransform_1=nr._emscripten_bind_btRigidBody_setWorldTransform_1,Qc=n._emscripten_bind_btRigidBody_setAngularVelocity_1=nr._emscripten_bind_btRigidBody_setAngularVelocity_1,qc=n._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3=nr._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3,Jc=n._emscripten_bind_btConvexShape_setLocalScaling_1=nr._emscripten_bind_btConvexShape_setLocalScaling_1,$c=n._emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=nr._emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2,ef=n._emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1=nr._emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1,tf=n._emscripten_bind_btCompoundShape___destroy___0=nr._emscripten_bind_btCompoundShape___destroy___0,nf=n._emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1=nr._emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1,rf=n._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0,of=n._emscripten_bind_RayResultCallback_hasHit_0=nr._emscripten_bind_RayResultCallback_hasHit_0,_f=n._bitshift64Shl=nr._bitshift64Shl,sf=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0,af=n._emscripten_bind_btCylinderShapeX_getMargin_0=nr._emscripten_bind_btCylinderShapeX_getMargin_0,cf=n._emscripten_bind_btQuaternion_normalize_0=nr._emscripten_bind_btQuaternion_normalize_0,ff=n._emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0,pf=n._emscripten_bind_btWheelInfo_get_m_frictionSlip_0=nr._emscripten_bind_btWheelInfo_get_m_frictionSlip_0,lf=n._emscripten_bind_btConeShapeZ_setLocalScaling_1=nr._emscripten_bind_btConeShapeZ_setLocalScaling_1,uf=n._emscripten_bind_btPairCachingGhostObject_setActivationState_1=nr._emscripten_bind_btPairCachingGhostObject_setActivationState_1,bf=n._emscripten_bind_btGeneric6DofSpringConstraint___destroy___0=nr._emscripten_bind_btGeneric6DofSpringConstraint___destroy___0,df=n._emscripten_bind_btRaycastVehicle_getNumWheels_0=nr._emscripten_bind_btRaycastVehicle_getNumWheels_0,hf=n._emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1=nr._emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1,mf=n._emscripten_bind_btGhostObject_setRollingFriction_1=nr._emscripten_bind_btGhostObject_setRollingFriction_1,yf=n._emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1=nr._emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1,gf=n._emscripten_bind_btPoint2PointConstraint_set_m_setting_1=nr._emscripten_bind_btPoint2PointConstraint_set_m_setting_1,vf=n._emscripten_bind_btCompoundShape_btCompoundShape_0=nr._emscripten_bind_btCompoundShape_btCompoundShape_0,Cf=n._emscripten_bind_btCompoundShape_btCompoundShape_1=nr._emscripten_bind_btCompoundShape_btCompoundShape_1,wf=n._emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=nr._emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1,kf=n._emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=nr._emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2,Sf=n.__GLOBAL__sub_I_btQuickprof_cpp=nr.__GLOBAL__sub_I_btQuickprof_cpp,Rf=n._emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1=nr._emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1,jf=n._emscripten_bind_btDispatcherInfo_get_m_useContinuous_0=nr._emscripten_bind_btDispatcherInfo_get_m_useContinuous_0,If=n._emscripten_bind_btRigidBody_updateInertiaTensor_0=nr._emscripten_bind_btRigidBody_updateInertiaTensor_0,Tf=n._emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2=nr._emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2,Df=n._emscripten_bind_btTransform_setOrigin_1=nr._emscripten_bind_btTransform_setOrigin_1,Of=n._emscripten_bind_ClosestRayResultCallback_hasHit_0=nr._emscripten_bind_ClosestRayResultCallback_hasHit_0,Lf=n._emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0=nr._emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0,xf=n._emscripten_bind_btCompoundShape_addChildShape_2=nr._emscripten_bind_btCompoundShape_addChildShape_2,Mf=n._emscripten_bind_btDispatcher___destroy___0=nr._emscripten_bind_btDispatcher___destroy___0,Pf=n._emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0=nr._emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0,Wf=n._emscripten_bind_btDiscreteDynamicsWorld___destroy___0=nr._emscripten_bind_btDiscreteDynamicsWorld___destroy___0,Bf=n._emscripten_bind_btConvexShape___destroy___0=nr._emscripten_bind_btConvexShape___destroy___0,Af=n._memmove=nr._memmove,Ff=n._emscripten_bind_btCapsuleShapeX_setLocalScaling_1=nr._emscripten_bind_btCapsuleShapeX_setLocalScaling_1,Gf=n._emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=nr._emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1,Ef=n._emscripten_bind_btCollisionObject_setRestitution_1=nr._emscripten_bind_btCollisionObject_setRestitution_1,Vf=n._emscripten_bind_btRigidBody_applyCentralForce_1=nr._emscripten_bind_btRigidBody_applyCentralForce_1,Nf=n._emscripten_bind_LocalConvexResult_get_m_hitFraction_0=nr._emscripten_bind_LocalConvexResult_get_m_hitFraction_0,Xf=n._emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1,Hf=n._emscripten_bind_btQuaternion_w_0=nr._emscripten_bind_btQuaternion_w_0,Zf=n._emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0=nr._emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0,Uf=n._emscripten_bind_btTransform_getRotation_0=nr._emscripten_bind_btTransform_getRotation_0,zf=n._emscripten_bind_btHingeConstraint_btHingeConstraint_6=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_6,Yf=n._emscripten_bind_btHingeConstraint_btHingeConstraint_7=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_7,Kf=n._emscripten_bind_btCapsuleShapeZ_getMargin_0=nr._emscripten_bind_btCapsuleShapeZ_getMargin_0,Qf=n._emscripten_bind_btHingeConstraint_btHingeConstraint_5=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_5,qf=n._emscripten_bind_btHingeConstraint_btHingeConstraint_2=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_2,Jf=n._emscripten_bind_btHingeConstraint_btHingeConstraint_3=nr._emscripten_bind_btHingeConstraint_btHingeConstraint_3,$f=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1,ep=n._emscripten_bind_btBoxShape_setMargin_1=nr._emscripten_bind_btBoxShape_setMargin_1,tp=n._emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0,ip=n._emscripten_bind_btMatrix3x3_getRow_1=nr._emscripten_bind_btMatrix3x3_getRow_1,np=n._emscripten_bind_btTypedConstraint___destroy___0=nr._emscripten_bind_btTypedConstraint___destroy___0,rp=n._emscripten_bind_btCylinderShapeX_btCylinderShapeX_1=nr._emscripten_bind_btCylinderShapeX_btCylinderShapeX_1,op=n._emscripten_enum_RotateOrder_RO_XYZ=nr._emscripten_enum_RotateOrder_RO_XYZ,_p=n._emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1,sp=n._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=nr._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3,ap=n._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=nr._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1,cp=n._bitshift64Ashr=nr._bitshift64Ashr,fp=n._emscripten_bind_btQuaternion_btQuaternion_4=nr._emscripten_bind_btQuaternion_btQuaternion_4,pp=n._emscripten_bind_btDiscreteDynamicsWorld_removeAction_1=nr._emscripten_bind_btDiscreteDynamicsWorld_removeAction_1,lp=n._emscripten_bind_btSphereShape_btSphereShape_1=nr._emscripten_bind_btSphereShape_btSphereShape_1,up=n._emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0=nr._emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0,bp=n._emscripten_bind_btQuaternion_y_0=nr._emscripten_bind_btQuaternion_y_0,dp=n._emscripten_bind_btCollisionWorld_addCollisionObject_1=nr._emscripten_bind_btCollisionWorld_addCollisionObject_1,hp=n._emscripten_bind_btCollisionWorld_addCollisionObject_2=nr._emscripten_bind_btCollisionWorld_addCollisionObject_2,mp=n._emscripten_bind_btCollisionWorld_addCollisionObject_3=nr._emscripten_bind_btCollisionWorld_addCollisionObject_3,yp=n._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1,gp=n._emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1,vp=n._emscripten_bind_RaycastInfo_get_m_isInContact_0=nr._emscripten_bind_RaycastInfo_get_m_isInContact_0,Cp=n._emscripten_bind_btGeneric6DofSpring2Constraint_setLinearUpperLimit_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setLinearUpperLimit_1,wp=n._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0,kp=n._emscripten_bind_btCapsuleShape_setMargin_1=nr._emscripten_bind_btCapsuleShape_setMargin_1,Sp=n._emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1=nr._emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1,Rp=n._emscripten_bind_btPoint2PointConstraint_get_m_setting_0=nr._emscripten_bind_btPoint2PointConstraint_get_m_setting_0,jp=n._emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=nr._emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0,Ip=n._emscripten_bind_btActionInterface___destroy___0=nr._emscripten_bind_btActionInterface___destroy___0,Tp=n._emscripten_bind_btDefaultMotionState_setWorldTransform_1=nr._emscripten_bind_btDefaultMotionState_setWorldTransform_1,Dp=n._emscripten_bind_btCollisionWorld_contactTest_2=nr._emscripten_bind_btCollisionWorld_contactTest_2,Op=n._emscripten_bind_RayResultCallback_get_m_collisionObject_0=nr._emscripten_bind_RayResultCallback_get_m_collisionObject_0,Lp=n._emscripten_bind_btPoint2PointConstraint_getPivotInA_0=nr._emscripten_bind_btPoint2PointConstraint_getPivotInA_0,xp=n._emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2=nr._emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2,Mp=n._emscripten_bind_btVector4_setY_1=nr._emscripten_bind_btVector4_setY_1,Pp=n._emscripten_bind_btCompoundShape_setMargin_1=nr._emscripten_bind_btCompoundShape_setMargin_1,Wp=n._emscripten_bind_ClosestConvexResultCallback___destroy___0=nr._emscripten_bind_ClosestConvexResultCallback___destroy___0,Bp=n._emscripten_bind_btDynamicsWorld_addCollisionObject_1=nr._emscripten_bind_btDynamicsWorld_addCollisionObject_1,Ap=n._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0,Fp=(n.___cxa_can_catch=nr.___cxa_can_catch,\nn._emscripten_bind_btDynamicsWorld_addCollisionObject_2=nr._emscripten_bind_btDynamicsWorld_addCollisionObject_2),Gp=n._emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0,Ep=n._emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0=nr._emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0,Vp=n._emscripten_bind_btVector4_op_mul_1=nr._emscripten_bind_btVector4_op_mul_1,Np=n._emscripten_bind_btCylinderShape_btCylinderShape_1=nr._emscripten_bind_btCylinderShape_btCylinderShape_1,Xp=n._emscripten_bind_btVector3___destroy___0=nr._emscripten_bind_btVector3___destroy___0,Hp=n._emscripten_bind_RaycastInfo___destroy___0=nr._emscripten_bind_RaycastInfo___destroy___0,Zp=n._emscripten_bind_btRigidBody_setAngularFactor_1=nr._emscripten_bind_btRigidBody_setAngularFactor_1,Up=n._emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2=nr._emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2,zp=n._emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=nr._emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1,Yp=n._emscripten_bind_btMotionState_getWorldTransform_1=nr._emscripten_bind_btMotionState_getWorldTransform_1,Kp=n._emscripten_bind_btDynamicsWorld_getSolverInfo_0=nr._emscripten_bind_btDynamicsWorld_getSolverInfo_0,Qp=n._emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1=nr._emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1,qp=n._emscripten_bind_btSphereShape_getMargin_0=nr._emscripten_bind_btSphereShape_getMargin_0,Jp=n._emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_5=nr._emscripten_bind_btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint_5,$p=n._emscripten_bind_btVector3_x_0=nr._emscripten_bind_btVector3_x_0,el=(n.___cxa_is_pointer_type=nr.___cxa_is_pointer_type,n._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=nr._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3),tl=n._emscripten_bind_btCollisionObject_getCollisionShape_0=nr._emscripten_bind_btCollisionObject_getCollisionShape_0,il=n._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=nr._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4,nl=n._emscripten_bind_btManifoldPoint___destroy___0=nr._emscripten_bind_btManifoldPoint___destroy___0,rl=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1,ol=n._emscripten_bind_btVector4_length_0=nr._emscripten_bind_btVector4_length_0,_l=n._emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1=nr._emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1,sl=n._emscripten_bind_btGhostObject_setRestitution_1=nr._emscripten_bind_btGhostObject_setRestitution_1,al=n._emscripten_bind_btConeTwistConstraint_setAngularOnly_1=nr._emscripten_bind_btConeTwistConstraint_setAngularOnly_1,cl=n._emscripten_bind_btCollisionObject_setFriction_1=nr._emscripten_bind_btCollisionObject_setFriction_1,fl=n._emscripten_bind_btDefaultCollisionConfiguration___destroy___0=nr._emscripten_bind_btDefaultCollisionConfiguration___destroy___0,pl=n._emscripten_bind_btRigidBody_setMassProps_2=nr._emscripten_bind_btRigidBody_setMassProps_2,ll=n._emscripten_bind_btVector3_setValue_3=nr._emscripten_bind_btVector3_setValue_3,ul=n._emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=nr._emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1,bl=n._emscripten_bind_RaycastInfo_get_m_suspensionLength_0=nr._emscripten_bind_RaycastInfo_get_m_suspensionLength_0,dl=n._emscripten_bind_btGhostObject_getCollisionFlags_0=nr._emscripten_bind_btGhostObject_getCollisionFlags_0,hl=n._emscripten_bind_btCapsuleShapeX___destroy___0=nr._emscripten_bind_btCapsuleShapeX___destroy___0,ml=n._emscripten_bind_btKinematicCharacterController_setFallSpeed_1=nr._emscripten_bind_btKinematicCharacterController_setFallSpeed_1,yl=n._emscripten_bind_btHingeConstraint_setLimit_4=nr._emscripten_bind_btHingeConstraint_setLimit_4,gl=n._emscripten_bind_btHingeConstraint_setLimit_5=nr._emscripten_bind_btHingeConstraint_setLimit_5,vl=n._emscripten_bind_btDefaultVehicleRaycaster___destroy___0=nr._emscripten_bind_btDefaultVehicleRaycaster___destroy___0,Cl=n._emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1=nr._emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1,wl=n._emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1=nr._emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1,kl=n._emscripten_bind_btGhostObject_getNumOverlappingObjects_0=nr._emscripten_bind_btGhostObject_getNumOverlappingObjects_0,Sl=n._emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0,Rl=n._emscripten_bind_btGhostObject_getCollisionShape_0=nr._emscripten_bind_btGhostObject_getCollisionShape_0,jl=n._emscripten_bind_btCollisionObject_setAnisotropicFriction_2=nr._emscripten_bind_btCollisionObject_setAnisotropicFriction_2,Il=n._emscripten_bind_btBoxShape___destroy___0=nr._emscripten_bind_btBoxShape___destroy___0,Tl=n._emscripten_bind_btPersistentManifold_getContactPoint_1=nr._emscripten_bind_btPersistentManifold_getContactPoint_1,Dl=n._emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0,Ol=n._emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1=nr._emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1,Ll=n._emscripten_bind_RaycastInfo_set_m_groundObject_1=nr._emscripten_bind_RaycastInfo_set_m_groundObject_1,xl=n._emscripten_bind_btGhostObject_activate_1=nr._emscripten_bind_btGhostObject_activate_1,Ml=n._emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2=nr._emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2,Pl=n._emscripten_bind_btManifoldPoint_getPositionWorldOnB_0=nr._emscripten_bind_btManifoldPoint_getPositionWorldOnB_0,Wl=n._emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=nr._emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0,Bl=n._emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1,Al=n._emscripten_bind_btSphereShape_setMargin_1=nr._emscripten_bind_btSphereShape_setMargin_1,Fl=n._emscripten_bind_btGeneric6DofSpring2Constraint_setDamping_2=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setDamping_2,Gl=n._emscripten_bind_btConeShapeZ_btConeShapeZ_2=nr._emscripten_bind_btConeShapeZ_btConeShapeZ_2,El=n._emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1=nr._emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1,Vl=n._emscripten_bind_btSliderConstraint_setUpperAngLimit_1=nr._emscripten_bind_btSliderConstraint_setUpperAngLimit_1,Nl=n._emscripten_bind_btDynamicsWorld_contactPairTest_3=nr._emscripten_bind_btDynamicsWorld_contactPairTest_3,Xl=n._emscripten_bind_btCollisionWorld_getPairCache_0=nr._emscripten_bind_btCollisionWorld_getPairCache_0,Hl=n._emscripten_bind_btConeTwistConstraint_setMotorTarget_1=nr._emscripten_bind_btConeTwistConstraint_setMotorTarget_1,Zl=n._emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1,Ul=n._emscripten_bind_btWheelInfo_set_m_rollInfluence_1=nr._emscripten_bind_btWheelInfo_set_m_rollInfluence_1,zl=n._emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1=nr._emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1,Yl=n._emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=nr._emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0,Kl=n._emscripten_bind_btGhostObject_forceActivationState_1=nr._emscripten_bind_btGhostObject_forceActivationState_1,Ql=n._emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0=nr._emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0,ql=n._emscripten_bind_VoidPtr___destroy___0=nr._emscripten_bind_VoidPtr___destroy___0,Jl=n._emscripten_bind_RaycastInfo_set_m_contactNormalWS_1=nr._emscripten_bind_RaycastInfo_set_m_contactNormalWS_1,$l=n._emscripten_bind_btSliderConstraint_setLowerAngLimit_1=nr._emscripten_bind_btSliderConstraint_setLowerAngLimit_1,eu=n._emscripten_bind_RaycastInfo_set_m_contactPointWS_1=nr._emscripten_bind_RaycastInfo_set_m_contactPointWS_1,tu=n._emscripten_bind_btConeShape_btConeShape_2=nr._emscripten_bind_btConeShape_btConeShape_2,iu=n._emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0,nu=n._emscripten_bind_btRaycastVehicle_getRigidBody_0=nr._emscripten_bind_btRaycastVehicle_getRigidBody_0,ru=n._emscripten_enum_RotateOrder_RO_YZX=nr._emscripten_enum_RotateOrder_RO_YZX,ou=n._emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=nr._emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0,_u=n._emscripten_bind_btWheelInfo_get_m_steering_0=nr._emscripten_bind_btWheelInfo_get_m_steering_0,su=n._emscripten_bind_btConstraintSetting_get_m_tau_0=nr._emscripten_bind_btConstraintSetting_get_m_tau_0,au=n._emscripten_bind_btConeShape_setLocalScaling_1=nr._emscripten_bind_btConeShape_setLocalScaling_1,cu=n._emscripten_bind_btCollisionObject_setCollisionShape_1=nr._emscripten_bind_btCollisionObject_setCollisionShape_1,fu=n._emscripten_bind_btCollisionShape___destroy___0=nr._emscripten_bind_btCollisionShape___destroy___0,pu=n._emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0=nr._emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0,lu=n._emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0=nr._emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0,uu=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0,bu=n._emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=nr._emscripten_bind_btPairCachingGhostObject_setCollisionShape_1,du=n._emscripten_bind_btKinematicCharacterController_warp_1=nr._emscripten_bind_btKinematicCharacterController_warp_1,hu=n._emscripten_bind_btContactSolverInfo___destroy___0=nr._emscripten_bind_btContactSolverInfo___destroy___0,mu=n._emscripten_bind_btTriangleMesh___destroy___0=nr._emscripten_bind_btTriangleMesh___destroy___0,yu=n._emscripten_bind_btKinematicCharacterController_preStep_1=nr._emscripten_bind_btKinematicCharacterController_preStep_1,gu=n._emscripten_bind_btRaycastVehicle_applyEngineForce_2=nr._emscripten_bind_btRaycastVehicle_applyEngineForce_2,vu=n._emscripten_bind_btRaycastVehicle_setBrake_2=nr._emscripten_bind_btRaycastVehicle_setBrake_2,Cu=n._emscripten_bind_ConcreteContactResultCallback___destroy___0=nr._emscripten_bind_ConcreteContactResultCallback___destroy___0,wu=n._emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1=nr._emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1,ku=n._emscripten_bind_btGeneric6DofSpring2Constraint_setAngularLowerLimit_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setAngularLowerLimit_1,Su=n._emscripten_bind_btCollisionObject___destroy___0=nr._emscripten_bind_btCollisionObject___destroy___0,Ru=n._emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1=nr._emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1,ju=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1,Iu=n._emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=nr._emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1,Tu=n._emscripten_bind_btDispatcherInfo_set_m_timeStep_1=nr._emscripten_bind_btDispatcherInfo_set_m_timeStep_1,Du=n._emscripten_bind_btVector3_btVector3_3=nr._emscripten_bind_btVector3_btVector3_3,Ou=n._emscripten_bind_btVector3_btVector3_0=nr._emscripten_bind_btVector3_btVector3_0,Lu=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1,xu=n._emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getGravity_0,Mu=n._emscripten_bind_btVector3_z_0=nr._emscripten_bind_btVector3_z_0,Pu=n._emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0=nr._emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0,Wu=n._emscripten_bind_btBroadphaseInterface___destroy___0=nr._emscripten_bind_btBroadphaseInterface___destroy___0,Bu=n._emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0=nr._emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0,Au=n._emscripten_bind_ConcreteContactResultCallback_addSingleResult_7=nr._emscripten_bind_ConcreteContactResultCallback_addSingleResult_7,Fu=n._emscripten_bind_RaycastInfo_get_m_hardPointWS_0=nr._emscripten_bind_RaycastInfo_get_m_hardPointWS_0,Gu=n._emscripten_bind_btConeTwistConstraint___destroy___0=nr._emscripten_bind_btConeTwistConstraint___destroy___0,Eu=n._emscripten_bind_btQuadWord___destroy___0=nr._emscripten_bind_btQuadWord___destroy___0,Vu=n._emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1,Nu=n._emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2=nr._emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2,Xu=n._emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0=nr._emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0,Hu=n._emscripten_bind_btRigidBody_setCenterOfMassTransform_1=nr._emscripten_bind_btRigidBody_setCenterOfMassTransform_1,Zu=n._emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0=nr._emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0,Uu=n._emscripten_bind_btGhostObject_setAnisotropicFriction_2=nr._emscripten_bind_btGhostObject_setAnisotropicFriction_2,zu=n._emscripten_bind_btConstraintSolver___destroy___0=nr._emscripten_bind_btConstraintSolver___destroy___0,Yu=n._emscripten_bind_btDbvtBroadphase___destroy___0=nr._emscripten_bind_btDbvtBroadphase___destroy___0,Ku=n._emscripten_bind_btCapsuleShape_btCapsuleShape_2=nr._emscripten_bind_btCapsuleShape_btCapsuleShape_2,Qu=n._emscripten_bind_btTypedConstraint_enableFeedback_1=nr._emscripten_bind_btTypedConstraint_enableFeedback_1,qu=n._emscripten_bind_btGhostObject_activate_0=nr._emscripten_bind_btGhostObject_activate_0,Ju=n._emscripten_bind_btCapsuleShape_setLocalScaling_1=nr._emscripten_bind_btCapsuleShape_setLocalScaling_1,$u=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0,eb=n._emscripten_bind_btRigidBody_setAnisotropicFriction_2=nr._emscripten_bind_btRigidBody_setAnisotropicFriction_2,tb=n._emscripten_bind_btTriangleMeshShape_setLocalScaling_1=nr._emscripten_bind_btTriangleMeshShape_setLocalScaling_1,ib=n._emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1=nr._emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1,nb=n._emscripten_bind_btVector3_op_add_1=nr._emscripten_bind_btVector3_op_add_1,rb=n._emscripten_bind_btPersistentManifold_btPersistentManifold_0=nr._emscripten_bind_btPersistentManifold_btPersistentManifold_0,ob=n._emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0=nr._emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0,_b=n._emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=nr._emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2,sb=n._emscripten_bind_btVector4___destroy___0=nr._emscripten_bind_btVector4___destroy___0,ab=n._emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=nr._emscripten_bind_btPairCachingGhostObject_isKinematicObject_0,cb=n._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1,fb=n._i64Add=nr._i64Add,pb=n._emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=nr._emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2,lb=n._emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1=nr._emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1,ub=n._emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=nr._emscripten_bind_btCollisionObject_setCcdMotionThreshold_1,bb=n._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=nr._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4,db=n._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=nr._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1,hb=n._emscripten_bind_btQuadWord_setZ_1=nr._emscripten_bind_btQuadWord_setZ_1,mb=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0,yb=n._emscripten_bind_btPoint2PointConstraint_getPivotInB_0=nr._emscripten_bind_btPoint2PointConstraint_getPivotInB_0,gb=n._emscripten_bind_btKinematicCharacterController_playerStep_2=nr._emscripten_bind_btKinematicCharacterController_playerStep_2,vb=n._emscripten_bind_btDispatcherInfo___destroy___0=nr._emscripten_bind_btDispatcherInfo___destroy___0,Cb=n._emscripten_bind_btCapsuleShape_getMargin_0=nr._emscripten_bind_btCapsuleShape_getMargin_0,wb=n._emscripten_bind_btCylinderShape_getMargin_0=nr._emscripten_bind_btCylinderShape_getMargin_0,kb=n._emscripten_bind_btStaticPlaneShape_setLocalScaling_1=nr._emscripten_bind_btStaticPlaneShape_setLocalScaling_1,Sb=n._emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=nr._emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2,Rb=n._emscripten_bind_btQuaternion___destroy___0=nr._emscripten_bind_btQuaternion___destroy___0,jb=n._emscripten_bind_btGhostObject_getWorldTransform_0=nr._emscripten_bind_btGhostObject_getWorldTransform_0,Ib=n._emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=nr._emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0,Tb=n._emscripten_bind_LocalConvexResult_set_m_hitFraction_1=nr._emscripten_bind_LocalConvexResult_set_m_hitFraction_1,Db=n._emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2=nr._emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2,Ob=n._emscripten_bind_btDispatcherInfo_get_m_timeStep_0=nr._emscripten_bind_btDispatcherInfo_get_m_timeStep_0,Lb=n._emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1=nr._emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1,xb=n._emscripten_bind_btBoxShape_calculateLocalInertia_2=nr._emscripten_bind_btBoxShape_calculateLocalInertia_2,Mb=n._emscripten_bind_btMotionState___destroy___0=nr._emscripten_bind_btMotionState___destroy___0,Pb=n._emscripten_bind_btGeneric6DofSpring2Constraint___destroy___0=nr._emscripten_bind_btGeneric6DofSpring2Constraint___destroy___0,Wb=n._emscripten_bind_btCollisionObject_setCollisionFlags_1=nr._emscripten_bind_btCollisionObject_setCollisionFlags_1,Bb=n._emscripten_bind_btGeneric6DofSpring2Constraint_getTranslationalLimitMotor_0=nr._emscripten_bind_btGeneric6DofSpring2Constraint_getTranslationalLimitMotor_0,Ab=n._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=nr._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1,Fb=n._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=nr._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2,Gb=n._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=nr._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3,Eb=n._emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1=nr._emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1,Vb=n._emscripten_bind_btConvexTriangleMeshShape___destroy___0=nr._emscripten_bind_btConvexTriangleMeshShape___destroy___0,Nb=n._emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=nr._emscripten_bind_btDispatcher_getManifoldByIndexInternal_1,Xb=n._emscripten_bind_btRaycastVehicle_getWheelInfo_1=nr._emscripten_bind_btRaycastVehicle_getWheelInfo_1,Hb=n._bitshift64Lshr=nr._bitshift64Lshr,Zb=n._emscripten_bind_btWheelInfo_set_m_steering_1=nr._emscripten_bind_btWheelInfo_set_m_steering_1,Ub=n._emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=nr._emscripten_bind_btPairCachingGhostObject_setWorldTransform_1,zb=n._emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0,Yb=n._emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=nr._emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0,Kb=n._emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=nr._emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1,Qb=n._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=nr._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4,qb=n._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=nr._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2,Jb=n._emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=nr._emscripten_bind_btKinematicCharacterController_setJumpSpeed_1,$b=n._emscripten_bind_btConeShapeX_calculateLocalInertia_2=nr._emscripten_bind_btConeShapeX_calculateLocalInertia_2,ed=n._emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=nr._emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1,td=n._emscripten_bind_btRigidBodyConstructionInfo___destroy___0=nr._emscripten_bind_btRigidBodyConstructionInfo___destroy___0,id=n._emscripten_bind_btRigidBody_getWorldTransform_0=nr._emscripten_bind_btRigidBody_getWorldTransform_0,nd=n._emscripten_bind_btPoint2PointConstraint_setPivotA_1=nr._emscripten_bind_btPoint2PointConstraint_setPivotA_1,rd=n._emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1,od=n._memcpy=nr._memcpy,_d=n._emscripten_bind_btCapsuleShape_calculateLocalInertia_2=nr._emscripten_bind_btCapsuleShape_calculateLocalInertia_2,sd=n._emscripten_bind_btVector3_y_0=nr._emscripten_bind_btVector3_y_0,ad=n._emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0=nr._emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0,cd=n._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=nr._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2,fd=n._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=nr._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3,pd=n._emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=nr._emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0,ld=n._emscripten_bind_btGhostObject_setCollisionShape_1=nr._emscripten_bind_btGhostObject_setCollisionShape_1,ud=n._emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1=nr._emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1,bd=n._emscripten_bind_btRigidBody_setRollingFriction_1=nr._emscripten_bind_btRigidBody_setRollingFriction_1,dd=n._emscripten_bind_btPairCachingGhostObject_setRollingFriction_1=nr._emscripten_bind_btPairCachingGhostObject_setRollingFriction_1,hd=n._emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=nr._emscripten_bind_btDiscreteDynamicsWorld_setGravity_1,md=n._emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1=nr._emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1,yd=n._emscripten_bind_btVector4_z_0=nr._emscripten_bind_btVector4_z_0,gd=n._emscripten_bind_btCollisionObject_forceActivationState_1=nr._emscripten_bind_btCollisionObject_forceActivationState_1,vd=n._emscripten_bind_btKinematicCharacterController_onGround_0=nr._emscripten_bind_btKinematicCharacterController_onGround_0,Cd=n._free=nr._free,wd=n._emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0,kd=n._emscripten_bind_btConeTwistConstraint_setLimit_2=nr._emscripten_bind_btConeTwistConstraint_setLimit_2,Sd=n._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1,Rd=n._emscripten_bind_btRigidBody___destroy___0=nr._emscripten_bind_btRigidBody___destroy___0,jd=n._emscripten_bind_btStridingMeshInterface___destroy___0=nr._emscripten_bind_btStridingMeshInterface___destroy___0,Id=(n.runPostSets=nr.runPostSets,n._emscripten_bind_btRigidBody_setSleepingThresholds_2=nr._emscripten_bind_btRigidBody_setSleepingThresholds_2),Td=n._emscripten_bind_btCollisionObject_setWorldTransform_1=nr._emscripten_bind_btCollisionObject_setWorldTransform_1,Dd=n._emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0=nr._emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0,Od=n._emscripten_bind_btManifoldPoint_get_m_localPointA_0=nr._emscripten_bind_btManifoldPoint_get_m_localPointA_0,Ld=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0,xd=n._emscripten_bind_btGeneric6DofSpring2Constraint_enableFeedback_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_enableFeedback_1,Md=n._emscripten_bind_btDispatcher_getNumManifolds_0=nr._emscripten_bind_btDispatcher_getNumManifolds_0,Pd=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0,Wd=n._emscripten_bind_btRigidBody_activate_1=nr._emscripten_bind_btRigidBody_activate_1,Bd=n._emscripten_bind_btRigidBody_activate_0=nr._emscripten_bind_btRigidBody_activate_0,Ad=n._emscripten_bind_btRaycastVehicle___destroy___0=nr._emscripten_bind_btRaycastVehicle___destroy___0,Fd=n._emscripten_bind_btGhostObject_setActivationState_1=nr._emscripten_bind_btGhostObject_setActivationState_1,Gd=n._emscripten_bind_btCollisionWorld_contactPairTest_3=nr._emscripten_bind_btCollisionWorld_contactPairTest_3,Ed=n._emscripten_bind_btCylinderShapeX___destroy___0=nr._emscripten_bind_btCylinderShapeX___destroy___0,Vd=n._emscripten_bind_btManifoldPoint_getPositionWorldOnA_0=nr._emscripten_bind_btManifoldPoint_getPositionWorldOnA_0,Nd=n._emscripten_bind_ContactResultCallback___destroy___0=nr._emscripten_bind_ContactResultCallback___destroy___0,Xd=n._emscripten_bind_btDispatcherInfo_set_m_stepCount_1=nr._emscripten_bind_btDispatcherInfo_set_m_stepCount_1,Hd=n._emscripten_bind_btVector4_x_0=nr._emscripten_bind_btVector4_x_0,Zd=n._emscripten_bind_btConstraintSetting_btConstraintSetting_0=nr._emscripten_bind_btConstraintSetting_btConstraintSetting_0,Ud=n._emscripten_bind_btRigidBody_getMotionState_0=nr._emscripten_bind_btRigidBody_getMotionState_0,zd=n._emscripten_bind_btKinematicCharacterController_getGhostObject_0=nr._emscripten_bind_btKinematicCharacterController_getGhostObject_0,Yd=n._emscripten_bind_btRigidBody_btRigidBody_1=nr._emscripten_bind_btRigidBody_btRigidBody_1,Kd=n._emscripten_bind_btTriangleMeshShape___destroy___0=nr._emscripten_bind_btTriangleMeshShape___destroy___0,Qd=n._emscripten_bind_btKinematicCharacterController_setWalkDirection_1=nr._emscripten_bind_btKinematicCharacterController_setWalkDirection_1,qd=n._emscripten_bind_btDynamicsWorld_removeAction_1=nr._emscripten_bind_btDynamicsWorld_removeAction_1,Jd=n._emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=nr._emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0,$d=n._emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0=nr._emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0,eh=n._emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=nr._emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1,th=n._emscripten_bind_btKinematicCharacterController_getGravity_0=nr._emscripten_bind_btKinematicCharacterController_getGravity_0,ih=n._emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0,nh=n._emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1=nr._emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1,rh=n._emscripten_bind_btVector4_normalize_0=nr._emscripten_bind_btVector4_normalize_0,oh=n._emscripten_bind_btQuaternion_setY_1=nr._emscripten_bind_btQuaternion_setY_1,_h=n._emscripten_bind_btConeShape_calculateLocalInertia_2=nr._emscripten_bind_btConeShape_calculateLocalInertia_2,sh=n._emscripten_bind_btCylinderShapeX_calculateLocalInertia_2=nr._emscripten_bind_btCylinderShapeX_calculateLocalInertia_2,ah=n._emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1=nr._emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1,ch=n._llvm_bswap_i32=nr._llvm_bswap_i32,fh=n._emscripten_enum_RotateOrder_RO_XZY=nr._emscripten_enum_RotateOrder_RO_XZY,ph=n._emscripten_bind_btSphereShape_setLocalScaling_1=nr._emscripten_bind_btSphereShape_setLocalScaling_1,lh=n._emscripten_bind_btVector4_w_0=nr._emscripten_bind_btVector4_w_0,uh=n._emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=nr._emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0,bh=n._emscripten_bind_btBvhTriangleMeshShape___destroy___0=nr._emscripten_bind_btBvhTriangleMeshShape___destroy___0,dh=n._emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0,hh=n._emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1=nr._emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1,mh=n._emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=nr._emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1,yh=n._emscripten_bind_btVector4_y_0=nr._emscripten_bind_btVector4_y_0,gh=n._emscripten_bind_btGeneric6DofConstraint___destroy___0=nr._emscripten_bind_btGeneric6DofConstraint___destroy___0,vh=n._emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0=nr._emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0,Ch=n._emscripten_bind_btConvexHullShape_addPoint_1=nr._emscripten_bind_btConvexHullShape_addPoint_1,wh=n._emscripten_bind_btConvexHullShape_addPoint_2=nr._emscripten_bind_btConvexHullShape_addPoint_2,kh=n._emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0=nr._emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0,Sh=n._emscripten_bind_btTransform_getOrigin_0=nr._emscripten_bind_btTransform_getOrigin_0,Rh=n._emscripten_enum_RotateOrder_RO_ZYX=nr._emscripten_enum_RotateOrder_RO_ZYX,jh=n._emscripten_bind_btHingeConstraint___destroy___0=nr._emscripten_bind_btHingeConstraint___destroy___0,Ih=n._emscripten_bind_btConvexShape_calculateLocalInertia_2=nr._emscripten_bind_btConvexShape_calculateLocalInertia_2,Th=n._memset=nr._memset,Dh=n._emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1=nr._emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1,Oh=n._emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0,Lh=n._emscripten_bind_btTriangleMesh_btTriangleMesh_0=nr._emscripten_bind_btTriangleMesh_btTriangleMesh_0,xh=n._emscripten_bind_btTriangleMesh_btTriangleMesh_1=nr._emscripten_bind_btTriangleMesh_btTriangleMesh_1,Mh=n._emscripten_bind_btTriangleMesh_btTriangleMesh_2=nr._emscripten_bind_btTriangleMesh_btTriangleMesh_2,Ph=n._emscripten_bind_btWheelInfo_set_m_frictionSlip_1=nr._emscripten_bind_btWheelInfo_set_m_frictionSlip_1,Wh=n._emscripten_bind_btRigidBody_getCollisionShape_0=nr._emscripten_bind_btRigidBody_getCollisionShape_0,Bh=n._emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=nr._emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1,Ah=n._emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0=nr._emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0,Fh=n._emscripten_bind_btManifoldPoint_get_m_localPointB_0=nr._emscripten_bind_btManifoldPoint_get_m_localPointB_0,Gh=n._emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3=nr._emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3,Eh=n._emscripten_bind_btSliderConstraint_setLowerLinLimit_1=nr._emscripten_bind_btSliderConstraint_setLowerLinLimit_1,Vh=n._emscripten_bind_btRigidBody_getAngularVelocity_0=nr._emscripten_bind_btRigidBody_getAngularVelocity_0,Nh=n._emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=nr._emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1,Xh=n._emscripten_bind_btWheelInfo_get_m_wheelsRadius_0=nr._emscripten_bind_btWheelInfo_get_m_wheelsRadius_0,Hh=n._emscripten_bind_btRigidBody_setLinearVelocity_1=nr._emscripten_bind_btRigidBody_setLinearVelocity_1,Zh=n._emscripten_bind_btVehicleTuning_btVehicleTuning_0=nr._emscripten_bind_btVehicleTuning_btVehicleTuning_0,Uh=n._emscripten_bind_RayResultCallback_set_m_collisionObject_1=nr._emscripten_bind_RayResultCallback_set_m_collisionObject_1,zh=n._emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1,Yh=n._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0,Kh=n._emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1=nr._emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1,Qh=n._emscripten_bind_btDynamicsWorld_addAction_1=nr._emscripten_bind_btDynamicsWorld_addAction_1,qh=n._emscripten_bind_btVector4_op_sub_1=nr._emscripten_bind_btVector4_op_sub_1,Jh=n._emscripten_bind_RaycastInfo_set_m_hardPointWS_1=nr._emscripten_bind_RaycastInfo_set_m_hardPointWS_1,$h=n._emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=nr._emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0,em=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1,tm=n._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=nr._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1,im=n._emscripten_bind_btGeneric6DofSpring2Constraint_setLinearLowerLimit_1=nr._emscripten_bind_btGeneric6DofSpring2Constraint_setLinearLowerLimit_1,nm=n._emscripten_bind_btRigidBody_setActivationState_1=nr._emscripten_bind_btRigidBody_setActivationState_1,rm=n._emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0=nr._emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0,om=n._emscripten_bind_ClosestConvexResultCallback_hasHit_0=nr._emscripten_bind_ClosestConvexResultCallback_hasHit_0,_m=n._emscripten_bind_btCapsuleShapeZ___destroy___0=nr._emscripten_bind_btCapsuleShapeZ___destroy___0,sm=n._emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0=nr._emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0,am=n._emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=nr._emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0,cm=n._emscripten_bind_btTriangleMesh_addTriangle_3=nr._emscripten_bind_btTriangleMesh_addTriangle_3,fm=n._emscripten_bind_btGhostObject_getOverlappingObject_1=nr._emscripten_bind_btGhostObject_getOverlappingObject_1,pm=n._emscripten_bind_btTriangleMesh_addTriangle_4=nr._emscripten_bind_btTriangleMesh_addTriangle_4,lm=n._emscripten_bind_btRigidBody_applyTorqueImpulse_1=nr._emscripten_bind_btRigidBody_applyTorqueImpulse_1,um=n._emscripten_bind_btRigidBody_setCollisionFlags_1=nr._emscripten_bind_btRigidBody_setCollisionFlags_1,bm=n._emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1=nr._emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1,dm=n._emscripten_bind_btConeShape___destroy___0=nr._emscripten_bind_btConeShape___destroy___0,hm=n._emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2=nr._emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2,mm=n._emscripten_bind_btSliderConstraint_btSliderConstraint_5=nr._emscripten_bind_btSliderConstraint_btSliderConstraint_5,ym=n._emscripten_bind_btSliderConstraint_btSliderConstraint_3=nr._emscripten_bind_btSliderConstraint_btSliderConstraint_3,gm=n._emscripten_bind_btTransform___destroy___0=nr._emscripten_bind_btTransform___destroy___0,vm=n._emscripten_bind_btDynamicsWorld_convexSweepTest_5=nr._emscripten_bind_btDynamicsWorld_convexSweepTest_5,Cm=n._emscripten_bind_btSliderConstraint___destroy___0=nr._emscripten_bind_btSliderConstraint___destroy___0,wm=n._emscripten_bind_btRigidBody_forceActivationState_1=nr._emscripten_bind_btRigidBody_forceActivationState_1,km=n._emscripten_bind_btPoint2PointConstraint_setPivotB_1=nr._emscripten_bind_btPoint2PointConstraint_setPivotB_1,Sm=n._emscripten_bind_btManifoldPoint_getDistance_0=nr._emscripten_bind_btManifoldPoint_getDistance_0,Rm=n._emscripten_bind_btGhostPairCallback___destroy___0=nr._emscripten_bind_btGhostPairCallback___destroy___0,jm=n._emscripten_bind_btKinematicCharacterController_getMaxSlope_0=nr._emscripten_bind_btKinematicCharacterController_getMaxSlope_0,Im=n._emscripten_bind_btSliderConstraint_enableFeedback_1=nr._emscripten_bind_btSliderConstraint_enableFeedback_1,Tm=n._emscripten_bind_btRaycastVehicle_addWheel_7=nr._emscripten_bind_btRaycastVehicle_addWheel_7,Dm=n._emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=nr._emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1,Om=n._emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1=nr._emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1,Lm=n._emscripten_bind_btStaticPlaneShape___destroy___0=nr._emscripten_bind_btStaticPlaneShape___destroy___0,xm=n._emscripten_bind_btCylinderShapeZ_setLocalScaling_1=nr._emscripten_bind_btCylinderShapeZ_setLocalScaling_1,Mm=n._emscripten_bind_btBoxShape_setLocalScaling_1=nr._emscripten_bind_btBoxShape_setLocalScaling_1,Pm=n._emscripten_bind_btConeShapeZ___destroy___0=nr._emscripten_bind_btConeShapeZ___destroy___0,Wm=n._emscripten_bind_btDynamicsWorld_getPairCache_0=nr._emscripten_bind_btDynamicsWorld_getPairCache_0,Bm=n._emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5=nr._emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5,Am=n._emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=nr._emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2,Fm=n._emscripten_bind_btRigidBody_setRestitution_1=nr._emscripten_bind_btRigidBody_setRestitution_1,Gm=n._emscripten_bind_btVector4_btVector4_0=nr._emscripten_bind_btVector4_btVector4_0,Em=n._emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0=nr._emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0,Vm=n._emscripten_bind_btVector4_btVector4_4=nr._emscripten_bind_btVector4_btVector4_4,Nm=n._emscripten_bind_btKinematicCharacterController___destroy___0=nr._emscripten_bind_btKinematicCharacterController___destroy___0,Xm=n._emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1,Hm=n._emscripten_enum_RotateOrder_RO_ZXY=nr._emscripten_enum_RotateOrder_RO_ZXY,Zm=n._emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1=nr._emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1,Um=n._emscripten_bind_btRotationalLimitMotor2_set_m_currentPosition_1=nr._emscripten_bind_btRotationalLimitMotor2_set_m_currentPosition_1,zm=n._emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1=nr._emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1,Ym=n._emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=nr._emscripten_bind_btDiscreteDynamicsWorld_rayTest_3,Km=n._emscripten_bind_btWheelInfo_get_m_raycastInfo_0=nr._emscripten_bind_btWheelInfo_get_m_raycastInfo_0,Qm=n._emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0=nr._emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0,qm=n._emscripten_bind_btGhostPairCallback_btGhostPairCallback_0=nr._emscripten_bind_btGhostPairCallback_btGhostPairCallback_0,Jm=n._emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=nr._emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1,$m=n._emscripten_bind_btPairCachingGhostObject_isActive_0=nr._emscripten_bind_btPairCachingGhostObject_isActive_0,ey=n._emscripten_bind_btVehicleTuning_get_m_frictionSlip_0=nr._emscripten_bind_btVehicleTuning_get_m_frictionSlip_0;\nn.dynCall_viiiii=nr.dynCall_viiiii,n.dynCall_vid=nr.dynCall_vid,n.dynCall_vi=nr.dynCall_vi,n.dynCall_viiidii=nr.dynCall_viiidii,n.dynCall_vii=nr.dynCall_vii,n.dynCall_iiiiiiiiiii=nr.dynCall_iiiiiiiiiii,n.dynCall_ii=nr.dynCall_ii,n.dynCall_viidi=nr.dynCall_viidi,n.dynCall_viddiii=nr.dynCall_viddiii,n.dynCall_vidii=nr.dynCall_vidii,n.dynCall_iiiii=nr.dynCall_iiiii,n.dynCall_vidi=nr.dynCall_vidi,n.dynCall_diiiiiiii=nr.dynCall_diiiiiiii,n.dynCall_viiiiddddiid=nr.dynCall_viiiiddddiid,n.dynCall_diiiii=nr.dynCall_diiiii,n.dynCall_iiii=nr.dynCall_iiii,n.dynCall_viiiiii=nr.dynCall_viiiiii,n.dynCall_iiid=nr.dynCall_iiid,n.dynCall_di=nr.dynCall_di,n.dynCall_iiiiiii=nr.dynCall_iiiiiii,n.dynCall_diiidii=nr.dynCall_diiidii,n.dynCall_viidii=nr.dynCall_viidii,n.dynCall_viiiiiii=nr.dynCall_viiiiiii,n.dynCall_viiiiiiiii=nr.dynCall_viiiiiiiii,n.dynCall_viiiiiiiiii=nr.dynCall_viiiiiiiiii,n.dynCall_iii=nr.dynCall_iii,n.dynCall_diii=nr.dynCall_diii,n.dynCall_diiiiiiiiii=nr.dynCall_diiiiiiiiii,n.dynCall_viiiid=nr.dynCall_viiiid,n.dynCall_diiiiiiiii=nr.dynCall_diiiiiiiii,n.dynCall_did=nr.dynCall_did,n.dynCall_viiiidddddidi=nr.dynCall_viiiidddddidi,n.dynCall_diidii=nr.dynCall_diidii,n.dynCall_diiii=nr.dynCall_diiii,n.dynCall_iiiiiiiiii=nr.dynCall_iiiiiiiiii,n.dynCall_viiid=nr.dynCall_viiid,n.dynCall_viii=nr.dynCall_viii,n.dynCall_v=nr.dynCall_v,n.dynCall_viid=nr.dynCall_viid,n.dynCall_iidid=nr.dynCall_iidid,n.dynCall_viiii=nr.dynCall_viiii;tn.stackAlloc=nr.stackAlloc,tn.stackSave=nr.stackSave,tn.stackRestore=nr.stackRestore,tn.establishStackSpace=nr.establishStackSpace,tn.setTempRet0=nr.setTempRet0,tn.getTempRet0=nr.getTempRet0,rt.prototype=new Error,rt.prototype.constructor=rt;var ty,iy=null,ny=!1;zn=function _y(){n.calledRun||ot(),n.calledRun||(zn=_y)},n.callMain=n.callMain=function(e){function t(){for(var e=0;e<3;e++)r.push(0)}e=e||[],L();var i=e.length+1,r=[p(E(n.thisProgram),"i8",sn)];t();for(var o=0;o<i-1;o+=1)r.push(p(E(e[o]),"i8",sn)),t();r.push(0),r=p(r,"i32",sn);try{var _=n._main(i,r,0);_t(_,!0)}catch(s){if(s instanceof rt)return;if("SimulateInfiniteLoop"==s)return void(n.noExitRuntime=!0);throw s&&"object"==typeof s&&s.stack&&n.printErr("exception thrown: "+[s,s.stack]),s}finally{ny=!0}},n.run=n.run=ot,n.exit=n.exit=_t;var ry=[];if(n.abort=n.abort=st,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();var oy=!0;n.noInitialRun&&(oy=!1),n.noExitRuntime=!0,ot(),at.prototype=Object.create(at.prototype),at.prototype.constructor=at,at.prototype.__class__=at,at.__cache__={},n.WrapperObject=at,n.getCache=ct,n.wrapPointer=ft,n.castObject=pt,n.NULL=ft(0),n.destroy=lt,n.compare=ut,n.getPointer=bt,n.getClass=dt;return ht.prototype=Object.create(at.prototype),ht.prototype.constructor=ht,ht.prototype.__class__=ht,ht.__cache__={},n.btCollisionShape=ht,ht.prototype.setLocalScaling=ht.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),uc(t,e)},ht.prototype.calculateLocalInertia=ht.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),P_(i,e,t)},ht.prototype.__destroy__=ht.prototype.__destroy__=function(){var e=this.ptr;fu(e)},mt.prototype=Object.create(at.prototype),mt.prototype.constructor=mt,mt.prototype.__class__=mt,mt.__cache__={},n.btCollisionObject=mt,mt.prototype.setAnisotropicFriction=mt.prototype.setAnisotropicFriction=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),jl(i,e,t)},mt.prototype.getCollisionShape=mt.prototype.getCollisionShape=function(){var e=this.ptr;return ft(tl(e),ht)},mt.prototype.setContactProcessingThreshold=mt.prototype.setContactProcessingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),nc(t,e)},mt.prototype.setActivationState=mt.prototype.setActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),T_(t,e)},mt.prototype.forceActivationState=mt.prototype.forceActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),gd(t,e)},mt.prototype.activate=mt.prototype.activate=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),void 0===e?void Jr(t):void qr(t,e)},mt.prototype.isActive=mt.prototype.isActive=function(){var e=this.ptr;return!!ar(e)},mt.prototype.isKinematicObject=mt.prototype.isKinematicObject=function(){var e=this.ptr;return!!Nr(e)},mt.prototype.setRestitution=mt.prototype.setRestitution=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ef(t,e)},mt.prototype.setFriction=mt.prototype.setFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),cl(t,e)},mt.prototype.setRollingFriction=mt.prototype.setRollingFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),kc(t,e)},mt.prototype.getWorldTransform=mt.prototype.getWorldTransform=function(){var e=this.ptr;return ft(ms(e),Ni)},mt.prototype.getCollisionFlags=mt.prototype.getCollisionFlags=function(){var e=this.ptr;return za(e)},mt.prototype.setCollisionFlags=mt.prototype.setCollisionFlags=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Wb(t,e)},mt.prototype.setWorldTransform=mt.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Td(t,e)},mt.prototype.setCollisionShape=mt.prototype.setCollisionShape=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),cu(t,e)},mt.prototype.setCcdMotionThreshold=mt.prototype.setCcdMotionThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ub(t,e)},mt.prototype.setCcdSweptSphereRadius=mt.prototype.setCcdSweptSphereRadius=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Nh(t,e)},mt.prototype.__destroy__=mt.prototype.__destroy__=function(){var e=this.ptr;Su(e)},yt.prototype=Object.create(ht.prototype),yt.prototype.constructor=yt,yt.prototype.__class__=yt,yt.__cache__={},n.btConcaveShape=yt,yt.prototype.setLocalScaling=yt.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),va(t,e)},yt.prototype.calculateLocalInertia=yt.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),zc(i,e,t)},yt.prototype.__destroy__=yt.prototype.__destroy__=function(){var e=this.ptr;ha(e)},gt.prototype=Object.create(at.prototype),gt.prototype.constructor=gt,gt.prototype.__class__=gt,gt.__cache__={},n.btCollisionWorld=gt,gt.prototype.getDispatcher=gt.prototype.getDispatcher=function(){var e=this.ptr;return ft(Cc(e),Ot)},gt.prototype.rayTest=gt.prototype.rayTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Na(n,e,t,i)},gt.prototype.getPairCache=gt.prototype.getPairCache=function(){var e=this.ptr;return ft(Xl(e),Ti)},gt.prototype.getDispatchInfo=gt.prototype.getDispatchInfo=function(){var e=this.ptr;return ft(Ha(e),Zt)},gt.prototype.addCollisionObject=gt.prototype.addCollisionObject=function(e,t,i){var n=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===t?void dp(n,e):void 0===i?void hp(n,e,t):void mp(n,e,t,i)},gt.prototype.getBroadphase=gt.prototype.getBroadphase=function(){var e=this.ptr;return ft(La(e),Jt)},gt.prototype.convexSweepTest=gt.prototype.convexSweepTest=function(e,t,i,n,r){var o=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),B_(o,e,t,i,n,r)},gt.prototype.contactPairTest=gt.prototype.contactPairTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Gd(n,e,t,i)},gt.prototype.contactTest=gt.prototype.contactTest=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Dp(i,e,t)},gt.prototype.__destroy__=gt.prototype.__destroy__=function(){var e=this.ptr;Io(e)},vt.prototype=Object.create(at.prototype),vt.prototype.constructor=vt,vt.prototype.__class__=vt,vt.__cache__={},n.btTypedConstraint=vt,vt.prototype.enableFeedback=vt.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qu(t,e)},vt.prototype.getBreakingImpulseThreshold=vt.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return Sl(e)},vt.prototype.setBreakingImpulseThreshold=vt.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),hr(t,e)},vt.prototype.__destroy__=vt.prototype.__destroy__=function(){var e=this.ptr;np(e)},Ct.prototype=Object.create(ht.prototype),Ct.prototype.constructor=Ct,Ct.prototype.__class__=Ct,Ct.__cache__={},n.btCapsuleShape=Ct,Ct.prototype.setMargin=Ct.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),kp(t,e)},Ct.prototype.getMargin=Ct.prototype.getMargin=function(){var e=this.ptr;return Cb(e)},Ct.prototype.setLocalScaling=Ct.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ju(t,e)},Ct.prototype.calculateLocalInertia=Ct.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),_d(i,e,t)},Ct.prototype.__destroy__=Ct.prototype.__destroy__=function(){var e=this.ptr;Qr(e)},wt.prototype=Object.create(vt.prototype),wt.prototype.constructor=wt,wt.prototype.__class__=wt,wt.__cache__={},n.btGeneric6DofConstraint=wt,wt.prototype.setLinearLowerLimit=wt.prototype.setLinearLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Dh(t,e)},wt.prototype.setLinearUpperLimit=wt.prototype.setLinearUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),nf(t,e)},wt.prototype.setAngularLowerLimit=wt.prototype.setAngularLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),nh(t,e)},wt.prototype.setAngularUpperLimit=wt.prototype.setAngularUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),m_(t,e)},wt.prototype.enableFeedback=wt.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),or(t,e)},wt.prototype.getBreakingImpulseThreshold=wt.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return wd(e)},wt.prototype.setBreakingImpulseThreshold=wt.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),zl(t,e)},wt.prototype.__destroy__=wt.prototype.__destroy__=function(){var e=this.ptr;gh(e)},kt.prototype=Object.create(at.prototype),kt.prototype.constructor=kt,kt.prototype.__class__=kt,kt.__cache__={},n.btStridingMeshInterface=kt,kt.prototype.__destroy__=kt.prototype.__destroy__=function(){var e=this.ptr;jd(e)},St.prototype=Object.create(at.prototype),St.prototype.constructor=St,St.prototype.__class__=St,St.__cache__={},n.ConvexResultCallback=St,St.prototype.hasHit=St.prototype.hasHit=function(){var e=this.ptr;return!!M_(e)},St.prototype.get_m_collisionFilterGroup=St.prototype.get_m_collisionFilterGroup=function(){var e=this.ptr;return Zf(e)},St.prototype.set_m_collisionFilterGroup=St.prototype.set_m_collisionFilterGroup=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ol(t,e)},St.prototype.get_m_collisionFilterMask=St.prototype.get_m_collisionFilterMask=function(){var e=this.ptr;return ob(e)},St.prototype.set_m_collisionFilterMask=St.prototype.set_m_collisionFilterMask=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ah(t,e)},St.prototype.get_m_closestHitFraction=St.prototype.get_m_closestHitFraction=function(){var e=this.ptr;return pu(e)},St.prototype.set_m_closestHitFraction=St.prototype.set_m_closestHitFraction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ib(t,e)},St.prototype.__destroy__=St.prototype.__destroy__=function(){var e=this.ptr;$a(e)},Rt.prototype=Object.create(at.prototype),Rt.prototype.constructor=Rt,Rt.prototype.__class__=Rt,Rt.__cache__={},n.btMotionState=Rt,Rt.prototype.getWorldTransform=Rt.prototype.getWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Yp(t,e)},Rt.prototype.setWorldTransform=Rt.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ea(t,e)},Rt.prototype.__destroy__=Rt.prototype.__destroy__=function(){var e=this.ptr;Mb(e)},jt.prototype=Object.create(ht.prototype),jt.prototype.constructor=jt,jt.prototype.__class__=jt,jt.__cache__={},n.btConeShape=jt,jt.prototype.setLocalScaling=jt.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),au(t,e)},jt.prototype.calculateLocalInertia=jt.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),_h(i,e,t)},jt.prototype.__destroy__=jt.prototype.__destroy__=function(){var e=this.ptr;dm(e)},It.prototype=Object.create(ht.prototype),It.prototype.constructor=It,It.prototype.__class__=It,It.__cache__={},n.btConvexShape=It,It.prototype.setLocalScaling=It.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Jc(t,e)},It.prototype.calculateLocalInertia=It.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Ih(i,e,t)},It.prototype.__destroy__=It.prototype.__destroy__=function(){var e=this.ptr;Bf(e)},Tt.prototype=Object.create(at.prototype),Tt.prototype.constructor=Tt,Tt.prototype.__class__=Tt,Tt.__cache__={},n.ContactResultCallback=Tt,Tt.prototype.addSingleResult=Tt.prototype.addSingleResult=function(e,t,i,n,r,o,_){var s=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),o&&"object"==typeof o&&(o=o.ptr),_&&"object"==typeof _&&(_=_.ptr),vo(s,e,t,i,n,r,o,_)},Tt.prototype.__destroy__=Tt.prototype.__destroy__=function(){var e=this.ptr;Nd(e)},Dt.prototype=Object.create(yt.prototype),Dt.prototype.constructor=Dt,Dt.prototype.__class__=Dt,Dt.__cache__={},n.btTriangleMeshShape=Dt,Dt.prototype.setLocalScaling=Dt.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),tb(t,e)},Dt.prototype.calculateLocalInertia=Dt.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),$c(i,e,t)},Dt.prototype.__destroy__=Dt.prototype.__destroy__=function(){var e=this.ptr;Kd(e)},Ot.prototype=Object.create(at.prototype),Ot.prototype.constructor=Ot,Ot.prototype.__class__=Ot,Ot.__cache__={},n.btDispatcher=Ot,Ot.prototype.getNumManifolds=Ot.prototype.getNumManifolds=function(){var e=this.ptr;return Md(e)},Ot.prototype.getManifoldByIndexInternal=Ot.prototype.getManifoldByIndexInternal=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Nb(t,e),ci)},Ot.prototype.__destroy__=Ot.prototype.__destroy__=function(){var e=this.ptr;Mf(e)},Lt.prototype=Object.create(gt.prototype),Lt.prototype.constructor=Lt,Lt.prototype.__class__=Lt,Lt.__cache__={},n.btDynamicsWorld=Lt,Lt.prototype.addAction=Lt.prototype.addAction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qh(t,e)},Lt.prototype.removeAction=Lt.prototype.removeAction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),qd(t,e)},Lt.prototype.getSolverInfo=Lt.prototype.getSolverInfo=function(){var e=this.ptr;return ft(Kp(e),Ii)},Lt.prototype.getDispatcher=Lt.prototype.getDispatcher=function(){var e=this.ptr;return ft(Oc(e),Ot)},Lt.prototype.rayTest=Lt.prototype.rayTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Gr(n,e,t,i)},Lt.prototype.getPairCache=Lt.prototype.getPairCache=function(){var e=this.ptr;return ft(Wm(e),Ti)},Lt.prototype.getDispatchInfo=Lt.prototype.getDispatchInfo=function(){var e=this.ptr;return ft(Xo(e),Zt)},Lt.prototype.addCollisionObject=Lt.prototype.addCollisionObject=function(e,t,i){var n=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===t?void Bp(n,e):void 0===i?void Fp(n,e,t):void $o(n,e,t,i)},Lt.prototype.getBroadphase=Lt.prototype.getBroadphase=function(){var e=this.ptr;return ft(bo(e),Jt)},Lt.prototype.convexSweepTest=Lt.prototype.convexSweepTest=function(e,t,i,n,r){var o=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),vm(o,e,t,i,n,r)},Lt.prototype.contactPairTest=Lt.prototype.contactPairTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Nl(n,e,t,i)},Lt.prototype.contactTest=Lt.prototype.contactTest=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Os(i,e,t)},Lt.prototype.__destroy__=Lt.prototype.__destroy__=function(){var e=this.ptr;Qs(e)},xt.prototype=Object.create(at.prototype),xt.prototype.constructor=xt,xt.prototype.__class__=xt,xt.__cache__={},n.RayResultCallback=xt,xt.prototype.hasHit=xt.prototype.hasHit=function(){var e=this.ptr;return!!of(e)},xt.prototype.get_m_collisionFilterGroup=xt.prototype.get_m_collisionFilterGroup=function(){var e=this.ptr;return ou(e)},xt.prototype.set_m_collisionFilterGroup=xt.prototype.set_m_collisionFilterGroup=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Sc(t,e)},xt.prototype.get_m_collisionFilterMask=xt.prototype.get_m_collisionFilterMask=function(){var e=this.ptr;return vc(e)},xt.prototype.set_m_collisionFilterMask=xt.prototype.set_m_collisionFilterMask=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qo(t,e)},xt.prototype.get_m_collisionObject=xt.prototype.get_m_collisionObject=function(){var e=this.ptr;return ft(Op(e),mt)},xt.prototype.set_m_collisionObject=xt.prototype.set_m_collisionObject=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Uh(t,e)},xt.prototype.__destroy__=xt.prototype.__destroy__=function(){var e=this.ptr;_a(e)},Mt.prototype=Object.create(at.prototype),Mt.prototype.constructor=Mt,Mt.prototype.__class__=Mt,Mt.__cache__={},n.btVector3=Mt,Mt.prototype.length=Mt.prototype.length=function(){var e=this.ptr;return Uo(e)},Mt.prototype.x=Mt.prototype.x=function(){var e=this.ptr;return $p(e)},Mt.prototype.y=Mt.prototype.y=function(){var e=this.ptr;return sd(e)},Mt.prototype.z=Mt.prototype.z=function(){var e=this.ptr;return Mu(e)},Mt.prototype.setX=Mt.prototype.setX=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),oo(t,e)},Mt.prototype.setY=Mt.prototype.setY=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),qs(t,e)},Mt.prototype.setZ=Mt.prototype.setZ=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),po(t,e)},Mt.prototype.setValue=Mt.prototype.setValue=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),ll(n,e,t,i)},Mt.prototype.normalize=Mt.prototype.normalize=function(){var e=this.ptr;ra(e)},Mt.prototype.dot=Mt.prototype.dot=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),Es(t,e)},Mt.prototype.op_mul=Mt.prototype.op_mul=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Fr(t,e),Mt)},Mt.prototype.op_add=Mt.prototype.op_add=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(nb(t,e),Mt)},Mt.prototype.op_sub=Mt.prototype.op_sub=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(S_(t,e),Mt)},Mt.prototype.__destroy__=Mt.prototype.__destroy__=function(){var e=this.ptr;Xp(e)},Pt.prototype=Object.create(at.prototype),Pt.prototype.constructor=Pt,Pt.prototype.__class__=Pt,Pt.__cache__={},n.btVehicleRaycaster=Pt,Pt.prototype.__destroy__=Pt.prototype.__destroy__=function(){var e=this.ptr;Ss(e)},Wt.prototype=Object.create(mt.prototype),Wt.prototype.constructor=Wt,Wt.prototype.__class__=Wt,Wt.__cache__={},n.btGhostObject=Wt,Wt.prototype.getNumOverlappingObjects=Wt.prototype.getNumOverlappingObjects=function(){var e=this.ptr;return kl(e)},Wt.prototype.getOverlappingObject=Wt.prototype.getOverlappingObject=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(fm(t,e),mt)},Wt.prototype.setAnisotropicFriction=Wt.prototype.setAnisotropicFriction=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Uu(i,e,t)},Wt.prototype.getCollisionShape=Wt.prototype.getCollisionShape=function(){var e=this.ptr;return ft(Rl(e),ht)},Wt.prototype.setContactProcessingThreshold=Wt.prototype.setContactProcessingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Oa(t,e)},Wt.prototype.setActivationState=Wt.prototype.setActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Fd(t,e)},Wt.prototype.forceActivationState=Wt.prototype.forceActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Kl(t,e)},Wt.prototype.activate=Wt.prototype.activate=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),void 0===e?void qu(t):void xl(t,e)},Wt.prototype.isActive=Wt.prototype.isActive=function(){var e=this.ptr;return!!ia(e)},Wt.prototype.isKinematicObject=Wt.prototype.isKinematicObject=function(){var e=this.ptr;return!!Yr(e)},Wt.prototype.setRestitution=Wt.prototype.setRestitution=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),sl(t,e)},Wt.prototype.setFriction=Wt.prototype.setFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),J_(t,e)},Wt.prototype.setRollingFriction=Wt.prototype.setRollingFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),mf(t,e)},Wt.prototype.getWorldTransform=Wt.prototype.getWorldTransform=function(){var e=this.ptr;return ft(jb(e),Ni)},Wt.prototype.getCollisionFlags=Wt.prototype.getCollisionFlags=function(){var e=this.ptr;return dl(e)},Wt.prototype.setCollisionFlags=Wt.prototype.setCollisionFlags=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Lc(t,e)},Wt.prototype.setWorldTransform=Wt.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),rs(t,e)},Wt.prototype.setCollisionShape=Wt.prototype.setCollisionShape=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ld(t,e)},Wt.prototype.setCcdMotionThreshold=Wt.prototype.setCcdMotionThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),rc(t,e)},Wt.prototype.setCcdSweptSphereRadius=Wt.prototype.setCcdSweptSphereRadius=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Kb(t,e)},Wt.prototype.__destroy__=Wt.prototype.__destroy__=function(){var e=this.ptr;Da(e)},Bt.prototype=Object.create(at.prototype),Bt.prototype.constructor=Bt,Bt.prototype.__class__=Bt,Bt.__cache__={},n.btQuadWord=Bt,Bt.prototype.x=Bt.prototype.x=function(){var e=this.ptr;return Vr(e)},Bt.prototype.y=Bt.prototype.y=function(){var e=this.ptr;return gs(e)},Bt.prototype.z=Bt.prototype.z=function(){var e=this.ptr;return kr(e)},Bt.prototype.w=Bt.prototype.w=function(){var e=this.ptr;return Ts(e)},Bt.prototype.setX=Bt.prototype.setX=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ea(t,e)},Bt.prototype.setY=Bt.prototype.setY=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),yo(t,e)},Bt.prototype.setZ=Bt.prototype.setZ=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),hb(t,e)},Bt.prototype.setW=Bt.prototype.setW=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),s_(t,e)},Bt.prototype.__destroy__=Bt.prototype.__destroy__=function(){var e=this.ptr;Eu(e)},At.prototype=Object.create(ht.prototype),At.prototype.constructor=At,At.prototype.__class__=At,At.__cache__={},n.btCylinderShape=At,At.prototype.setMargin=At.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),jo(t,e)},At.prototype.getMargin=At.prototype.getMargin=function(){var e=this.ptr;return wb(e)},At.prototype.setLocalScaling=At.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Va(t,e)},At.prototype.calculateLocalInertia=At.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Vc(i,e,t)},At.prototype.__destroy__=At.prototype.__destroy__=function(){var e=this.ptr;rr(e)},Ft.prototype=Object.create(at.prototype),Ft.prototype.constructor=Ft,Ft.prototype.__class__=Ft,Ft.__cache__={},n.btActionInterface=Ft,Ft.prototype.__destroy__=Ft.prototype.__destroy__=function(){var e=this.ptr;Ip(e)},Gt.prototype=Object.create(at.prototype),Gt.prototype.constructor=Gt,Gt.prototype.__class__=Gt,Gt.__cache__={},n.btMatrix3x3=Gt,Gt.prototype.setEulerZYX=Gt.prototype.setEulerZYX=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),hc(n,e,t,i)},Gt.prototype.getRotation=Gt.prototype.getRotation=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xc(t,e)},Gt.prototype.getRow=Gt.prototype.getRow=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(ip(t,e),Mt)},Gt.prototype.__destroy__=Gt.prototype.__destroy__=function(){var e=this.ptr;x_(e)},Et.prototype=Object.create(Tt.prototype),Et.prototype.constructor=Et,Et.prototype.__class__=Et,Et.__cache__={},n.ConcreteContactResultCallback=Et,Et.prototype.addSingleResult=Et.prototype.addSingleResult=function(e,t,i,n,r,o,_){var s=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),o&&"object"==typeof o&&(o=o.ptr),_&&"object"==typeof _&&(_=_.ptr),Au(s,e,t,i,n,r,o,_)},Et.prototype.__destroy__=Et.prototype.__destroy__=function(){var e=this.ptr;Cu(e)},Vt.prototype=Object.create(Dt.prototype),Vt.prototype.constructor=Vt,Vt.prototype.__class__=Vt,Vt.__cache__={},n.btBvhTriangleMeshShape=Vt,Vt.prototype.setLocalScaling=Vt.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Vo(t,e)},Vt.prototype.calculateLocalInertia=Vt.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Ms(i,e,t)},Vt.prototype.__destroy__=Vt.prototype.__destroy__=function(){var e=this.ptr;bh(e)},Nt.prototype=Object.create(at.prototype),Nt.prototype.constructor=Nt,Nt.prototype.__class__=Nt,Nt.__cache__={},n.btDbvtBroadphase=Nt,Nt.prototype.__destroy__=Nt.prototype.__destroy__=function(){var e=this.ptr;Yu(e)},Xt.prototype=Object.create(at.prototype),Xt.prototype.constructor=Xt,Xt.prototype.__class__=Xt,Xt.__cache__={},n.VoidPtr=Xt,Xt.prototype.__destroy__=Xt.prototype.__destroy__=function(){var e=this.ptr;ql(e)},Ht.prototype=Object.create(at.prototype),Ht.prototype.constructor=Ht,Ht.prototype.__class__=Ht,Ht.__cache__={},n.btSequentialImpulseConstraintSolver=Ht,Ht.prototype.__destroy__=Ht.prototype.__destroy__=function(){var e=this.ptr;cc(e)},Zt.prototype=Object.create(at.prototype),Zt.prototype.constructor=Zt,Zt.prototype.__class__=Zt,Zt.__cache__={},n.btDispatcherInfo=Zt,Zt.prototype.get_m_timeStep=Zt.prototype.get_m_timeStep=function(){var e=this.ptr;return Ob(e)},Zt.prototype.set_m_timeStep=Zt.prototype.set_m_timeStep=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Tu(t,e)},Zt.prototype.get_m_stepCount=Zt.prototype.get_m_stepCount=function(){var e=this.ptr;return o_(e)},Zt.prototype.set_m_stepCount=Zt.prototype.set_m_stepCount=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Xd(t,e)},Zt.prototype.get_m_dispatchFunc=Zt.prototype.get_m_dispatchFunc=function(){var e=this.ptr;return lu(e)},Zt.prototype.set_m_dispatchFunc=Zt.prototype.set_m_dispatchFunc=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qp(t,e)},Zt.prototype.get_m_timeOfImpact=Zt.prototype.get_m_timeOfImpact=function(){var e=this.ptr;return gr(e)},Zt.prototype.set_m_timeOfImpact=Zt.prototype.set_m_timeOfImpact=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),to(t,e)},Zt.prototype.get_m_useContinuous=Zt.prototype.get_m_useContinuous=function(){var e=this.ptr;return!!jf(e)},Zt.prototype.set_m_useContinuous=Zt.prototype.set_m_useContinuous=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),sr(t,e)},Zt.prototype.get_m_enableSatConvex=Zt.prototype.get_m_enableSatConvex=function(){var e=this.ptr;return!!Em(e)},Zt.prototype.set_m_enableSatConvex=Zt.prototype.set_m_enableSatConvex=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ya(t,e)},Zt.prototype.get_m_enableSPU=Zt.prototype.get_m_enableSPU=function(){var e=this.ptr;return!!_r(e)},Zt.prototype.set_m_enableSPU=Zt.prototype.set_m_enableSPU=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),j_(t,e)},Zt.prototype.get_m_useEpa=Zt.prototype.get_m_useEpa=function(){var e=this.ptr;return!!C_(e)},Zt.prototype.set_m_useEpa=Zt.prototype.set_m_useEpa=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ws(t,e)},Zt.prototype.get_m_allowedCcdPenetration=Zt.prototype.get_m_allowedCcdPenetration=function(){var e=this.ptr;return oc(e)},Zt.prototype.set_m_allowedCcdPenetration=Zt.prototype.set_m_allowedCcdPenetration=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ud(t,e)},Zt.prototype.get_m_useConvexConservativeDistanceUtil=Zt.prototype.get_m_useConvexConservativeDistanceUtil=function(){var e=this.ptr;return!!Lf(e)},Zt.prototype.set_m_useConvexConservativeDistanceUtil=Zt.prototype.set_m_useConvexConservativeDistanceUtil=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),l_(t,e)},Zt.prototype.get_m_convexConservativeDistanceThreshold=Zt.prototype.get_m_convexConservativeDistanceThreshold=function(){var e=this.ptr;return mc(e)},Zt.prototype.set_m_convexConservativeDistanceThreshold=Zt.prototype.set_m_convexConservativeDistanceThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Rf(t,e)},Zt.prototype.__destroy__=Zt.prototype.__destroy__=function(){var e=this.ptr;vb(e)},Ut.prototype=Object.create(at.prototype),Ut.prototype.constructor=Ut,Ut.prototype.__class__=Ut,Ut.__cache__={},n.btCollisionConfiguration=Ut,Ut.prototype.__destroy__=Ut.prototype.__destroy__=function(){var e=this.ptr;_o(e)},zt.prototype=Object.create(at.prototype),zt.prototype.constructor=zt,zt.prototype.__class__=zt,zt.__cache__={},n.btAxisSweep3=zt,zt.prototype.__destroy__=zt.prototype.__destroy__=function(){var e=this.ptr;br(e)},Yt.prototype=Object.create(Wt.prototype),Yt.prototype.constructor=Yt,Yt.prototype.__class__=Yt,Yt.__cache__={},n.btPairCachingGhostObject=Yt,Yt.prototype.setAnisotropicFriction=Yt.prototype.setAnisotropicFriction=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Tf(i,e,t)},Yt.prototype.getCollisionShape=Yt.prototype.getCollisionShape=function(){var e=this.ptr;return ft(Rc(e),ht)},Yt.prototype.setContactProcessingThreshold=Yt.prototype.setContactProcessingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ef(t,e)},Yt.prototype.setActivationState=Yt.prototype.setActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),uf(t,e)},Yt.prototype.forceActivationState=Yt.prototype.forceActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),n_(t,e)},Yt.prototype.activate=Yt.prototype.activate=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),void 0===e?void e_(t):void t_(t,e)},Yt.prototype.isActive=Yt.prototype.isActive=function(){var e=this.ptr;return!!$m(e)},Yt.prototype.isKinematicObject=Yt.prototype.isKinematicObject=function(){var e=this.ptr;return!!ab(e)},Yt.prototype.setRestitution=Yt.prototype.setRestitution=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ja(t,e)},Yt.prototype.setFriction=Yt.prototype.setFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Cs(t,e)},Yt.prototype.setRollingFriction=Yt.prototype.setRollingFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),dd(t,e)},Yt.prototype.getWorldTransform=Yt.prototype.getWorldTransform=function(){var e=this.ptr;return ft($_(e),Ni)},Yt.prototype.getCollisionFlags=Yt.prototype.getCollisionFlags=function(){var e=this.ptr;\nreturn $h(e)},Yt.prototype.setCollisionFlags=Yt.prototype.setCollisionFlags=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Gf(t,e)},Yt.prototype.setWorldTransform=Yt.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ub(t,e)},Yt.prototype.setCollisionShape=Yt.prototype.setCollisionShape=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),bu(t,e)},Yt.prototype.setCcdMotionThreshold=Yt.prototype.setCcdMotionThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ul(t,e)},Yt.prototype.setCcdSweptSphereRadius=Yt.prototype.setCcdSweptSphereRadius=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Nc(t,e)},Yt.prototype.getNumOverlappingObjects=Yt.prototype.getNumOverlappingObjects=function(){var e=this.ptr;return Zs(e)},Yt.prototype.getOverlappingObject=Yt.prototype.getOverlappingObject=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(ed(t,e),mt)},Yt.prototype.__destroy__=Yt.prototype.__destroy__=function(){var e=this.ptr;Jo(e)},Kt.prototype=Object.create(at.prototype),Kt.prototype.constructor=Kt,Kt.prototype.__class__=Kt,Kt.__cache__={},n.btRigidBodyConstructionInfo=Kt,Kt.prototype.get_m_linearDamping=Kt.prototype.get_m_linearDamping=function(){var e=this.ptr;return Ld(e)},Kt.prototype.set_m_linearDamping=Kt.prototype.set_m_linearDamping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),em(t,e)},Kt.prototype.get_m_angularDamping=Kt.prototype.get_m_angularDamping=function(){var e=this.ptr;return Or(e)},Kt.prototype.set_m_angularDamping=Kt.prototype.set_m_angularDamping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),__(t,e)},Kt.prototype.get_m_friction=Kt.prototype.get_m_friction=function(){var e=this.ptr;return a_(e)},Kt.prototype.set_m_friction=Kt.prototype.set_m_friction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Lu(t,e)},Kt.prototype.get_m_rollingFriction=Kt.prototype.get_m_rollingFriction=function(){var e=this.ptr;return uu(e)},Kt.prototype.set_m_rollingFriction=Kt.prototype.set_m_rollingFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),rl(t,e)},Kt.prototype.get_m_restitution=Kt.prototype.get_m_restitution=function(){var e=this.ptr;return Jd(e)},Kt.prototype.set_m_restitution=Kt.prototype.set_m_restitution=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Co(t,e)},Kt.prototype.get_m_linearSleepingThreshold=Kt.prototype.get_m_linearSleepingThreshold=function(){var e=this.ptr;return Pd(e)},Kt.prototype.set_m_linearSleepingThreshold=Kt.prototype.set_m_linearSleepingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ju(t,e)},Kt.prototype.get_m_angularSleepingThreshold=Kt.prototype.get_m_angularSleepingThreshold=function(){var e=this.ptr;return mb(e)},Kt.prototype.set_m_angularSleepingThreshold=Kt.prototype.set_m_angularSleepingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),v_(t,e)},Kt.prototype.get_m_additionalDamping=Kt.prototype.get_m_additionalDamping=function(){var e=this.ptr;return!!Ac(e)},Kt.prototype.set_m_additionalDamping=Kt.prototype.set_m_additionalDamping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),tm(t,e)},Kt.prototype.get_m_additionalDampingFactor=Kt.prototype.get_m_additionalDampingFactor=function(){var e=this.ptr;return $u(e)},Kt.prototype.set_m_additionalDampingFactor=Kt.prototype.set_m_additionalDampingFactor=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),tc(t,e)},Kt.prototype.get_m_additionalLinearDampingThresholdSqr=Kt.prototype.get_m_additionalLinearDampingThresholdSqr=function(){var e=this.ptr;return ta(e)},Kt.prototype.set_m_additionalLinearDampingThresholdSqr=Kt.prototype.set_m_additionalLinearDampingThresholdSqr=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),pc(t,e)},Kt.prototype.get_m_additionalAngularDampingThresholdSqr=Kt.prototype.get_m_additionalAngularDampingThresholdSqr=function(){var e=this.ptr;return sf(e)},Kt.prototype.set_m_additionalAngularDampingThresholdSqr=Kt.prototype.set_m_additionalAngularDampingThresholdSqr=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),$f(t,e)},Kt.prototype.get_m_additionalAngularDampingFactor=Kt.prototype.get_m_additionalAngularDampingFactor=function(){var e=this.ptr;return _c(e)},Kt.prototype.set_m_additionalAngularDampingFactor=Kt.prototype.set_m_additionalAngularDampingFactor=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),As(t,e)},Kt.prototype.__destroy__=Kt.prototype.__destroy__=function(){var e=this.ptr;td(e)},Qt.prototype=Object.create(at.prototype),Qt.prototype.constructor=Qt,Qt.prototype.__class__=Qt,Qt.__cache__={},n.RaycastInfo=Qt,Qt.prototype.get_m_contactNormalWS=Qt.prototype.get_m_contactNormalWS=function(){var e=this.ptr;return ft(sa(e),Mt)},Qt.prototype.set_m_contactNormalWS=Qt.prototype.set_m_contactNormalWS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Jl(t,e)},Qt.prototype.get_m_contactPointWS=Qt.prototype.get_m_contactPointWS=function(){var e=this.ptr;return ft(z_(e),Mt)},Qt.prototype.set_m_contactPointWS=Qt.prototype.set_m_contactPointWS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),eu(t,e)},Qt.prototype.get_m_suspensionLength=Qt.prototype.get_m_suspensionLength=function(){var e=this.ptr;return bl(e)},Qt.prototype.set_m_suspensionLength=Qt.prototype.set_m_suspensionLength=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),as(t,e)},Qt.prototype.get_m_hardPointWS=Qt.prototype.get_m_hardPointWS=function(){var e=this.ptr;return ft(Fu(e),Mt)},Qt.prototype.set_m_hardPointWS=Qt.prototype.set_m_hardPointWS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Jh(t,e)},Qt.prototype.get_m_wheelDirectionWS=Qt.prototype.get_m_wheelDirectionWS=function(){var e=this.ptr;return ft(Xu(e),Mt)},Qt.prototype.set_m_wheelDirectionWS=Qt.prototype.set_m_wheelDirectionWS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ur(t,e)},Qt.prototype.get_m_wheelAxleWS=Qt.prototype.get_m_wheelAxleWS=function(){var e=this.ptr;return ft(Dr(e),Mt)},Qt.prototype.set_m_wheelAxleWS=Qt.prototype.set_m_wheelAxleWS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wu(t,e)},Qt.prototype.get_m_isInContact=Qt.prototype.get_m_isInContact=function(){var e=this.ptr;return!!vp(e)},Qt.prototype.set_m_isInContact=Qt.prototype.set_m_isInContact=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xo(t,e)},Qt.prototype.get_m_groundObject=Qt.prototype.get_m_groundObject=function(){var e=this.ptr;return Yc(e)},Qt.prototype.set_m_groundObject=Qt.prototype.set_m_groundObject=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ll(t,e)},Qt.prototype.__destroy__=Qt.prototype.__destroy__=function(){var e=this.ptr;Hp(e)},qt.prototype=Object.create(at.prototype),qt.prototype.constructor=qt,qt.prototype.__class__=qt,qt.__cache__={},n.btManifoldPoint=qt,qt.prototype.getPositionWorldOnA=qt.prototype.getPositionWorldOnA=function(){var e=this.ptr;return ft(Vd(e),Mt)},qt.prototype.getPositionWorldOnB=qt.prototype.getPositionWorldOnB=function(){var e=this.ptr;return ft(Pl(e),Mt)},qt.prototype.getDistance=qt.prototype.getDistance=function(){var e=this.ptr;return Sm(e)},qt.prototype.get_m_localPointA=qt.prototype.get_m_localPointA=function(){var e=this.ptr;return ft(Od(e),Mt)},qt.prototype.set_m_localPointA=qt.prototype.set_m_localPointA=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Fs(t,e)},qt.prototype.get_m_localPointB=qt.prototype.get_m_localPointB=function(){var e=this.ptr;return ft(Fh(e),Mt)},qt.prototype.set_m_localPointB=qt.prototype.set_m_localPointB=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),fo(t,e)},qt.prototype.get_m_positionWorldOnB=qt.prototype.get_m_positionWorldOnB=function(){var e=this.ptr;return ft(Ec(e),Mt)},qt.prototype.set_m_positionWorldOnB=qt.prototype.set_m_positionWorldOnB=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),co(t,e)},qt.prototype.get_m_positionWorldOnA=qt.prototype.get_m_positionWorldOnA=function(){var e=this.ptr;return ft(Wl(e),Mt)},qt.prototype.set_m_positionWorldOnA=qt.prototype.set_m_positionWorldOnA=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Bh(t,e)},qt.prototype.get_m_normalWorldOnB=qt.prototype.get_m_normalWorldOnB=function(){var e=this.ptr;return ft(uh(e),Mt)},qt.prototype.set_m_normalWorldOnB=qt.prototype.set_m_normalWorldOnB=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),eh(t,e)},qt.prototype.__destroy__=qt.prototype.__destroy__=function(){var e=this.ptr;nl(e)},Jt.prototype=Object.create(at.prototype),Jt.prototype.constructor=Jt,Jt.prototype.__class__=Jt,Jt.__cache__={},n.btBroadphaseInterface=Jt,Jt.prototype.__destroy__=Jt.prototype.__destroy__=function(){var e=this.ptr;Wu(e)},$t.prototype=Object.create(Lt.prototype),$t.prototype.constructor=$t,$t.prototype.__class__=$t,$t.__cache__={},n.btDiscreteDynamicsWorld=$t,$t.prototype.setGravity=$t.prototype.setGravity=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),hd(t,e)},$t.prototype.getGravity=$t.prototype.getGravity=function(){var e=this.ptr;return ft(xu(e),Mt)},$t.prototype.addRigidBody=$t.prototype.addRigidBody=function(e,t,i){var n=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===t?void ap(n,e):void 0===i?void _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(n,e,t):void sp(n,e,t,i)},$t.prototype.removeRigidBody=$t.prototype.removeRigidBody=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),os(t,e)},$t.prototype.addConstraint=$t.prototype.addConstraint=function(e,t){var i=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===t?void g_(i,e):void y_(i,e,t)},$t.prototype.removeConstraint=$t.prototype.removeConstraint=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),mh(t,e)},$t.prototype.stepSimulation=$t.prototype.stepSimulation=function(e,t,i){var n=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===t?Wr(n,e):void 0===i?Ar(n,e,t):Br(n,e,t,i)},$t.prototype.getDispatcher=$t.prototype.getDispatcher=function(){var e=this.ptr;return ft(Gp(e),Ot)},$t.prototype.rayTest=$t.prototype.rayTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Ym(n,e,t,i)},$t.prototype.getPairCache=$t.prototype.getPairCache=function(){var e=this.ptr;return ft(Ib(e),Ti)},$t.prototype.getDispatchInfo=$t.prototype.getDispatchInfo=function(){var e=this.ptr;return ft(Ca(e),Zt)},$t.prototype.addCollisionObject=$t.prototype.addCollisionObject=function(e,t,i){var n=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),void 0===t?void Ab(n,e):void 0===i?void Fb(n,e,t):void Gb(n,e,t,i)},$t.prototype.getBroadphase=$t.prototype.getBroadphase=function(){var e=this.ptr;return ft(cs(e),Jt)},$t.prototype.convexSweepTest=$t.prototype.convexSweepTest=function(e,t,i,n,r){var o=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),Bm(o,e,t,i,n,r)},$t.prototype.contactPairTest=$t.prototype.contactPairTest=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Gh(n,e,t,i)},$t.prototype.contactTest=$t.prototype.contactTest=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Ls(i,e,t)},$t.prototype.addAction=$t.prototype.addAction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),fs(t,e)},$t.prototype.removeAction=$t.prototype.removeAction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),pp(t,e)},$t.prototype.getSolverInfo=$t.prototype.getSolverInfo=function(){var e=this.ptr;return ft(Ro(e),Ii)},$t.prototype.__destroy__=$t.prototype.__destroy__=function(){var e=this.ptr;Wf(e)},ei.prototype=Object.create(It.prototype),ei.prototype.constructor=ei,ei.prototype.__class__=ei,ei.__cache__={},n.btConvexTriangleMeshShape=ei,ei.prototype.setLocalScaling=ei.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ds(t,e)},ei.prototype.calculateLocalInertia=ei.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Sb(i,e,t)},ei.prototype.__destroy__=ei.prototype.__destroy__=function(){var e=this.ptr;Vb(e)},ti.prototype=Object.create(vt.prototype),ti.prototype.constructor=ti,ti.prototype.__class__=ti,ti.__cache__={},n.btPoint2PointConstraint=ti,ti.prototype.setPivotA=ti.prototype.setPivotA=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),nd(t,e)},ti.prototype.setPivotB=ti.prototype.setPivotB=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),km(t,e)},ti.prototype.getPivotInA=ti.prototype.getPivotInA=function(){var e=this.ptr;return ft(Lp(e),Mt)},ti.prototype.getPivotInB=ti.prototype.getPivotInB=function(){var e=this.ptr;return ft(yb(e),Mt)},ti.prototype.enableFeedback=ti.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Us(t,e)},ti.prototype.getBreakingImpulseThreshold=ti.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return kh(e)},ti.prototype.setBreakingImpulseThreshold=ti.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),No(t,e)},ti.prototype.get_m_setting=ti.prototype.get_m_setting=function(){var e=this.ptr;return ft(Rp(e),xi)},ti.prototype.set_m_setting=ti.prototype.set_m_setting=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),gf(t,e)},ti.prototype.__destroy__=ti.prototype.__destroy__=function(){var e=this.ptr;h_(e)},ii.prototype=Object.create(vt.prototype),ii.prototype.constructor=ii,ii.prototype.__class__=ii,ii.__cache__={},n.btSliderConstraint=ii,ii.prototype.setLowerLinLimit=ii.prototype.setLowerLinLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Eh(t,e)},ii.prototype.setUpperLinLimit=ii.prototype.setUpperLinLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ba(t,e)},ii.prototype.setLowerAngLimit=ii.prototype.setLowerAngLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),$l(t,e)},ii.prototype.setUpperAngLimit=ii.prototype.setUpperAngLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Vl(t,e)},ii.prototype.enableFeedback=ii.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Im(t,e)},ii.prototype.getBreakingImpulseThreshold=ii.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return ec(e)},ii.prototype.setBreakingImpulseThreshold=ii.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),K_(t,e)},ii.prototype.__destroy__=ii.prototype.__destroy__=function(){var e=this.ptr;Cm(e)},ni.prototype=Object.create(vt.prototype),ni.prototype.constructor=ni,ni.prototype.__class__=ni,ni.__cache__={},n.btConeTwistConstraint=ni,ni.prototype.setLimit=ni.prototype.setLimit=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),kd(i,e,t)},ni.prototype.setAngularOnly=ni.prototype.setAngularOnly=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),al(t,e)},ni.prototype.setDamping=ni.prototype.setDamping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ko(t,e)},ni.prototype.enableMotor=ni.prototype.enableMotor=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ka(t,e)},ni.prototype.setMaxMotorImpulse=ni.prototype.setMaxMotorImpulse=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Pc(t,e)},ni.prototype.setMaxMotorImpulseNormalized=ni.prototype.setMaxMotorImpulseNormalized=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),bs(t,e)},ni.prototype.setMotorTarget=ni.prototype.setMotorTarget=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Hl(t,e)},ni.prototype.setMotorTargetInConstraintSpace=ni.prototype.setMotorTargetInConstraintSpace=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Iu(t,e)},ni.prototype.enableFeedback=ni.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),pa(t,e)},ni.prototype.getBreakingImpulseThreshold=ni.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return ih(e)},ni.prototype.setBreakingImpulseThreshold=ni.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),gp(t,e)},ni.prototype.__destroy__=ni.prototype.__destroy__=function(){var e=this.ptr;Gu(e)},ri.prototype=Object.create(at.prototype),ri.prototype.constructor=ri,ri.prototype.__class__=ri,ri.__cache__={},n.btDefaultCollisionConfiguration=ri,ri.prototype.__destroy__=ri.prototype.__destroy__=function(){var e=this.ptr;fl(e)},oi.prototype=Object.create(jt.prototype),oi.prototype.constructor=oi,oi.prototype.__class__=oi,oi.__cache__={},n.btConeShapeZ=oi,oi.prototype.setLocalScaling=oi.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),lf(t,e)},oi.prototype.calculateLocalInertia=oi.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),H_(i,e,t)},oi.prototype.__destroy__=oi.prototype.__destroy__=function(){var e=this.ptr;Pm(e)},_i.prototype=Object.create(jt.prototype),_i.prototype.constructor=_i,_i.prototype.__class__=_i,_i.__cache__={},n.btConeShapeX=_i,_i.prototype.setLocalScaling=_i.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wa(t,e)},_i.prototype.calculateLocalInertia=_i.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),$b(i,e,t)},_i.prototype.__destroy__=_i.prototype.__destroy__=function(){var e=this.ptr;Ua(e)},si.prototype=Object.create(kt.prototype),si.prototype.constructor=si,si.prototype.__class__=si,si.__cache__={},n.btTriangleMesh=si,si.prototype.addTriangle=si.prototype.addTriangle=function(e,t,i,n){var r=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===n?void cm(r,e,t,i):void pm(r,e,t,i,n)},si.prototype.__destroy__=si.prototype.__destroy__=function(){var e=this.ptr;mu(e)},ai.prototype=Object.create(ht.prototype),ai.prototype.constructor=ai,ai.prototype.__class__=ai,ai.__cache__={},n.btConvexHullShape=ai,ai.prototype.addPoint=ai.prototype.addPoint=function(e,t){var i=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),void 0===t?void Ch(i,e):void wh(i,e,t)},ai.prototype.setMargin=ai.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),N_(t,e)},ai.prototype.getMargin=ai.prototype.getMargin=function(){var e=this.ptr;return Mr(e)},ai.prototype.setLocalScaling=ai.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),yc(t,e)},ai.prototype.calculateLocalInertia=ai.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),U_(i,e,t)},ai.prototype.__destroy__=ai.prototype.__destroy__=function(){var e=this.ptr;ss(e)},ci.prototype=Object.create(at.prototype),ci.prototype.constructor=ci,ci.prototype.__class__=ci,ci.__cache__={},n.btPersistentManifold=ci,ci.prototype.getBody0=ci.prototype.getBody0=function(){var e=this.ptr;return ft(ca(e),mt)},ci.prototype.getBody1=ci.prototype.getBody1=function(){var e=this.ptr;return ft(Oo(e),mt)},ci.prototype.getNumContacts=ci.prototype.getNumContacts=function(){var e=this.ptr;return Ds(e)},ci.prototype.getContactPoint=ci.prototype.getContactPoint=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Tl(t,e),qt)},ci.prototype.__destroy__=ci.prototype.__destroy__=function(){var e=this.ptr;D_(e)},fi.prototype=Object.create(ht.prototype),fi.prototype.constructor=fi,fi.prototype.__class__=fi,fi.__cache__={},n.btBoxShape=fi,fi.prototype.setMargin=fi.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ep(t,e)},fi.prototype.getMargin=fi.prototype.getMargin=function(){var e=this.ptr;return qo(e)},fi.prototype.setLocalScaling=fi.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Mm(t,e)},fi.prototype.calculateLocalInertia=fi.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),xb(i,e,t)},fi.prototype.__destroy__=fi.prototype.__destroy__=function(){var e=this.ptr;Il(e)},pi.prototype=Object.create(Ot.prototype),pi.prototype.constructor=pi,pi.prototype.__class__=pi,pi.__cache__={},n.btCollisionDispatcher=pi,pi.prototype.getNumManifolds=pi.prototype.getNumManifolds=function(){var e=this.ptr;return ks(e)},pi.prototype.getManifoldByIndexInternal=pi.prototype.getManifoldByIndexInternal=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Q_(t,e),ci)},pi.prototype.__destroy__=pi.prototype.__destroy__=function(){var e=this.ptr;Lr(e)},li.prototype=Object.create(at.prototype),li.prototype.constructor=li,li.prototype.__class__=li,li.__cache__={},n.btVehicleTuning=li,li.prototype.get_m_suspensionStiffness=li.prototype.get_m_suspensionStiffness=function(){var e=this.ptr;return $d(e)},li.prototype.set_m_suspensionStiffness=li.prototype.set_m_suspensionStiffness=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),md(t,e)},li.prototype.get_m_suspensionCompression=li.prototype.get_m_suspensionCompression=function(){var e=this.ptr;return Pf(e)},li.prototype.set_m_suspensionCompression=li.prototype.set_m_suspensionCompression=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Lb(t,e)},li.prototype.get_m_suspensionDamping=li.prototype.get_m_suspensionDamping=function(){var e=this.ptr;return Bu(e)},li.prototype.set_m_suspensionDamping=li.prototype.set_m_suspensionDamping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ru(t,e)},li.prototype.get_m_maxSuspensionTravelCm=li.prototype.get_m_maxSuspensionTravelCm=function(){var e=this.ptr;return vh(e)},li.prototype.set_m_maxSuspensionTravelCm=li.prototype.set_m_maxSuspensionTravelCm=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),hf(t,e)},li.prototype.get_m_frictionSlip=li.prototype.get_m_frictionSlip=function(){var e=this.ptr;return ey(e)},li.prototype.set_m_frictionSlip=li.prototype.set_m_frictionSlip=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),cr(t,e)},li.prototype.get_m_maxSuspensionForce=li.prototype.get_m_maxSuspensionForce=function(){var e=this.ptr;return ad(e)},li.prototype.set_m_maxSuspensionForce=li.prototype.set_m_maxSuspensionForce=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),lb(t,e)},ui.prototype=Object.create(ht.prototype),ui.prototype.constructor=ui,ui.prototype.__class__=ui,ui.__cache__={},n.btCompoundShape=ui,ui.prototype.addChildShape=ui.prototype.addChildShape=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),xf(i,e,t)},ui.prototype.removeChildShapeByIndex=ui.prototype.removeChildShapeByIndex=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ho(t,e)},ui.prototype.getNumChildShapes=ui.prototype.getNumChildShapes=function(){var e=this.ptr;return Ps(e)},ui.prototype.getChildShape=ui.prototype.getChildShape=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Ba(t,e),ht)},ui.prototype.setMargin=ui.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Pp(t,e)},ui.prototype.getMargin=ui.prototype.getMargin=function(){var e=this.ptr;return lr(e)},ui.prototype.setLocalScaling=ui.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Fc(t,e)},ui.prototype.calculateLocalInertia=ui.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Xa(i,e,t)},ui.prototype.__destroy__=ui.prototype.__destroy__=function(){var e=this.ptr;tf(e)},bi.prototype=Object.create(at.prototype),bi.prototype.constructor=bi,bi.prototype.__class__=bi,bi.__cache__={},n.btCollisionObjectWrapper=bi,di.prototype=Object.create(St.prototype),di.prototype.constructor=di,di.prototype.__class__=di,di.__cache__={},n.ClosestConvexResultCallback=di,di.prototype.hasHit=di.prototype.hasHit=function(){var e=this.ptr;return!!om(e)},di.prototype.get_m_convexFromWorld=di.prototype.get_m_convexFromWorld=function(){var e=this.ptr;return ft(js(e),Mt)},di.prototype.set_m_convexFromWorld=di.prototype.set_m_convexFromWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Zl(t,e)},di.prototype.get_m_convexToWorld=di.prototype.get_m_convexToWorld=function(){var e=this.ptr;return ft(ff(e),Mt)},di.prototype.set_m_convexToWorld=di.prototype.set_m_convexToWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),rd(t,e)},di.prototype.get_m_hitNormalWorld=di.prototype.get_m_hitNormalWorld=function(){var e=this.ptr;return ft(tp(e),Mt)},di.prototype.set_m_hitNormalWorld=di.prototype.set_m_hitNormalWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ur(t,e)},di.prototype.get_m_hitPointWorld=di.prototype.get_m_hitPointWorld=function(){var e=this.ptr;return ft(Pu(e),Mt)},di.prototype.set_m_hitPointWorld=di.prototype.set_m_hitPointWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ko(t,e)},di.prototype.get_m_collisionFilterGroup=di.prototype.get_m_collisionFilterGroup=function(){var e=this.ptr;return wp(e)},di.prototype.set_m_collisionFilterGroup=di.prototype.set_m_collisionFilterGroup=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),yp(t,e)},di.prototype.get_m_collisionFilterMask=di.prototype.get_m_collisionFilterMask=function(){var e=this.ptr;return Ap(e)},di.prototype.set_m_collisionFilterMask=di.prototype.set_m_collisionFilterMask=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Sd(t,e)},di.prototype.get_m_closestHitFraction=di.prototype.get_m_closestHitFraction=function(){var e=this.ptr;return ua(e)},di.prototype.set_m_closestHitFraction=di.prototype.set_m_closestHitFraction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),hh(t,e)},di.prototype.__destroy__=di.prototype.__destroy__=function(){var e=this.ptr;Wp(e)},hi.prototype=Object.create(Rt.prototype),hi.prototype.constructor=hi,hi.prototype.__class__=hi,hi.__cache__={},n.btDefaultMotionState=hi,hi.prototype.getWorldTransform=hi.prototype.getWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Pr(t,e)},hi.prototype.setWorldTransform=hi.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Tp(t,e)},hi.prototype.get_m_graphicsWorldTrans=hi.prototype.get_m_graphicsWorldTrans=function(){var e=this.ptr;return ft(wo(e),Ni)},hi.prototype.set_m_graphicsWorldTrans=hi.prototype.set_m_graphicsWorldTrans=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),_l(t,e)},hi.prototype.__destroy__=hi.prototype.__destroy__=function(){var e=this.ptr;r_(e)},mi.prototype=Object.create(xt.prototype),mi.prototype.constructor=mi,mi.prototype.__class__=mi,mi.__cache__={},n.ClosestRayResultCallback=mi,mi.prototype.hasHit=mi.prototype.hasHit=function(){var e=this.ptr;return!!Of(e)},mi.prototype.get_m_rayFromWorld=mi.prototype.get_m_rayFromWorld=function(){var e=this.ptr;return ft(iu(e),Mt)},mi.prototype.set_m_rayFromWorld=mi.prototype.set_m_rayFromWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Vu(t,e)},mi.prototype.get_m_rayToWorld=mi.prototype.get_m_rayToWorld=function(){var e=this.ptr;return ft(dh(e),Mt)},mi.prototype.set_m_rayToWorld=mi.prototype.set_m_rayToWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),zh(t,e)},mi.prototype.get_m_hitNormalWorld=mi.prototype.get_m_hitNormalWorld=function(){var e=this.ptr;return ft(Oh(e),Mt)},mi.prototype.set_m_hitNormalWorld=mi.prototype.set_m_hitNormalWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Dm(t,e)},mi.prototype.get_m_hitPointWorld=mi.prototype.get_m_hitPointWorld=function(){var e=this.ptr;return ft(dr(e),Mt)},mi.prototype.set_m_hitPointWorld=mi.prototype.set_m_hitPointWorld=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),A_(t,e)},mi.prototype.get_m_collisionFilterGroup=mi.prototype.get_m_collisionFilterGroup=function(){var e=this.ptr;return Yh(e)},mi.prototype.set_m_collisionFilterGroup=mi.prototype.set_m_collisionFilterGroup=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),zs(t,e)},mi.prototype.get_m_collisionFilterMask=mi.prototype.get_m_collisionFilterMask=function(){var e=this.ptr;return rf(e)},mi.prototype.set_m_collisionFilterMask=mi.prototype.set_m_collisionFilterMask=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),cb(t,e)},mi.prototype.get_m_collisionObject=mi.prototype.get_m_collisionObject=function(){var e=this.ptr;return ft(am(e),mt)},mi.prototype.set_m_collisionObject=mi.prototype.set_m_collisionObject=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Lo(t,e)},mi.prototype.__destroy__=mi.prototype.__destroy__=function(){var e=this.ptr;Rs(e)},yi.prototype=Object.create(vt.prototype),yi.prototype.constructor=yi,yi.prototype.__class__=yi,yi.__cache__={},n.btGeneric6DofSpring2Constraint=yi,yi.prototype.setLinearLowerLimit=yi.prototype.setLinearLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),im(t,e)},yi.prototype.setLinearUpperLimit=yi.prototype.setLinearUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Cp(t,e)},yi.prototype.setAngularLowerLimit=yi.prototype.setAngularLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ku(t,e)},yi.prototype.setAngularUpperLimit=yi.prototype.setAngularUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),io(t,e)},yi.prototype.enableSpring=yi.prototype.enableSpring=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Zo(i,e,t)},yi.prototype.setStiffness=yi.prototype.setStiffness=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),ac(i,e,t)},yi.prototype.setDamping=yi.prototype.setDamping=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Fl(i,e,t)},yi.prototype.getTranslationalLimitMotor=yi.prototype.getTranslationalLimitMotor=function(){var e=this.ptr;return ft(Bb(e),Mi)},yi.prototype.getRotationalLimitMotor=yi.prototype.getRotationalLimitMotor=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft($r(t,e),Zi)},yi.prototype.enableFeedback=yi.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xd(t,e)},yi.prototype.getBreakingImpulseThreshold=yi.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return Ir(e)},yi.prototype.setBreakingImpulseThreshold=yi.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ka(t,e)},yi.prototype.__destroy__=yi.prototype.__destroy__=function(){var e=this.ptr;Pb(e)},gi.prototype=Object.create(Ct.prototype),gi.prototype.constructor=gi,gi.prototype.__class__=gi,gi.__cache__={},n.btCapsuleShapeX=gi,gi.prototype.setMargin=gi.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),sc(t,e)},gi.prototype.getMargin=gi.prototype.getMargin=function(){var e=this.ptr;return pr(e)},gi.prototype.setLocalScaling=gi.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ff(t,e)},gi.prototype.calculateLocalInertia=gi.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),F_(i,e,t)},gi.prototype.__destroy__=gi.prototype.__destroy__=function(){var e=this.ptr;hl(e)},vi.prototype=Object.create(Bt.prototype),vi.prototype.constructor=vi,vi.prototype.__class__=vi,vi.__cache__={},n.btQuaternion=vi,vi.prototype.setValue=vi.prototype.setValue=function(e,t,i,n){var r=this.ptr;e&&"object"==typeof e&&(e=e.ptr),\nt&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),uo(r,e,t,i,n)},vi.prototype.normalize=vi.prototype.normalize=function(){var e=this.ptr;cf(e)},vi.prototype.x=vi.prototype.x=function(){var e=this.ptr;return ya(e)},vi.prototype.y=vi.prototype.y=function(){var e=this.ptr;return bp(e)},vi.prototype.z=vi.prototype.z=function(){var e=this.ptr;return Sa(e)},vi.prototype.w=vi.prototype.w=function(){var e=this.ptr;return Hf(e)},vi.prototype.setX=vi.prototype.setX=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),mr(t,e)},vi.prototype.setY=vi.prototype.setY=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),oh(t,e)},vi.prototype.setZ=vi.prototype.setZ=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),vr(t,e)},vi.prototype.setW=vi.prototype.setW=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Tr(t,e)},vi.prototype.__destroy__=vi.prototype.__destroy__=function(){var e=this.ptr;Rb(e)},Ci.prototype=Object.create(Ct.prototype),Ci.prototype.constructor=Ci,Ci.prototype.__class__=Ci,Ci.__cache__={},n.btCapsuleShapeZ=Ci,Ci.prototype.setMargin=Ci.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),so(t,e)},Ci.prototype.getMargin=Ci.prototype.getMargin=function(){var e=this.ptr;return Kf(e)},Ci.prototype.setLocalScaling=Ci.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),la(t,e)},Ci.prototype.calculateLocalInertia=Ci.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Db(i,e,t)},Ci.prototype.__destroy__=Ci.prototype.__destroy__=function(){var e=this.ptr;_m(e)},wi.prototype=Object.create(Pt.prototype),wi.prototype.constructor=wi,wi.prototype.__class__=wi,wi.__cache__={},n.btDefaultVehicleRaycaster=wi,wi.prototype.__destroy__=wi.prototype.__destroy__=function(){var e=this.ptr;vl(e)},ki.prototype=Object.create(at.prototype),ki.prototype.constructor=ki,ki.prototype.__class__=ki,ki.__cache__={},n.btWheelInfo=ki,ki.prototype.get_m_suspensionStiffness=ki.prototype.get_m_suspensionStiffness=function(){var e=this.ptr;return jr(e)},ki.prototype.set_m_suspensionStiffness=ki.prototype.set_m_suspensionStiffness=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Eb(t,e)},ki.prototype.get_m_frictionSlip=ki.prototype.get_m_frictionSlip=function(){var e=this.ptr;return pf(e)},ki.prototype.set_m_frictionSlip=ki.prototype.set_m_frictionSlip=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ph(t,e)},ki.prototype.get_m_engineForce=ki.prototype.get_m_engineForce=function(){var e=this.ptr;return u_(e)},ki.prototype.set_m_engineForce=ki.prototype.set_m_engineForce=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Mc(t,e)},ki.prototype.get_m_rollInfluence=ki.prototype.get_m_rollInfluence=function(){var e=this.ptr;return Go(e)},ki.prototype.set_m_rollInfluence=ki.prototype.set_m_rollInfluence=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ul(t,e)},ki.prototype.get_m_suspensionRestLength1=ki.prototype.get_m_suspensionRestLength1=function(){var e=this.ptr;return Rr(e)},ki.prototype.set_m_suspensionRestLength1=ki.prototype.set_m_suspensionRestLength1=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),bm(t,e)},ki.prototype.get_m_wheelsRadius=ki.prototype.get_m_wheelsRadius=function(){var e=this.ptr;return Xh(e)},ki.prototype.set_m_wheelsRadius=ki.prototype.set_m_wheelsRadius=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),R_(t,e)},ki.prototype.get_m_wheelsDampingCompression=ki.prototype.get_m_wheelsDampingCompression=function(){var e=this.ptr;return rm(e)},ki.prototype.set_m_wheelsDampingCompression=ki.prototype.set_m_wheelsDampingCompression=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),I_(t,e)},ki.prototype.get_m_wheelsDampingRelaxation=ki.prototype.get_m_wheelsDampingRelaxation=function(){var e=this.ptr;return Ah(e)},ki.prototype.set_m_wheelsDampingRelaxation=ki.prototype.set_m_wheelsDampingRelaxation=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Kh(t,e)},ki.prototype.get_m_steering=ki.prototype.get_m_steering=function(){var e=this.ptr;return _u(e)},ki.prototype.set_m_steering=ki.prototype.set_m_steering=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Zb(t,e)},ki.prototype.get_m_maxSuspensionForce=ki.prototype.get_m_maxSuspensionForce=function(){var e=this.ptr;return sm(e)},ki.prototype.set_m_maxSuspensionForce=ki.prototype.set_m_maxSuspensionForce=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ja(t,e)},ki.prototype.get_m_maxSuspensionTravelCm=ki.prototype.get_m_maxSuspensionTravelCm=function(){var e=this.ptr;return Ep(e)},ki.prototype.set_m_maxSuspensionTravelCm=ki.prototype.set_m_maxSuspensionTravelCm=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Cl(t,e)},ki.prototype.get_m_wheelsSuspensionForce=ki.prototype.get_m_wheelsSuspensionForce=function(){var e=this.ptr;return up(e)},ki.prototype.set_m_wheelsSuspensionForce=ki.prototype.set_m_wheelsSuspensionForce=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wl(t,e)},ki.prototype.get_m_bIsFrontWheel=ki.prototype.get_m_bIsFrontWheel=function(){var e=this.ptr;return!!mo(e)},ki.prototype.set_m_bIsFrontWheel=ki.prototype.set_m_bIsFrontWheel=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),E_(t,e)},ki.prototype.get_m_raycastInfo=ki.prototype.get_m_raycastInfo=function(){var e=this.ptr;return ft(Km(e),Qt)},ki.prototype.set_m_raycastInfo=ki.prototype.set_m_raycastInfo=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),us(t,e)},ki.prototype.get_m_chassisConnectionPointCS=ki.prototype.get_m_chassisConnectionPointCS=function(){var e=this.ptr;return ft(Zu(e),Mt)},ki.prototype.set_m_chassisConnectionPointCS=ki.prototype.set_m_chassisConnectionPointCS=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Xr(t,e)},ki.prototype.__destroy__=ki.prototype.__destroy__=function(){var e=this.ptr;Ns(e)},Si.prototype=Object.create(Mt.prototype),Si.prototype.constructor=Si,Si.prototype.__class__=Si,Si.__cache__={},n.btVector4=Si,Si.prototype.w=Si.prototype.w=function(){var e=this.ptr;return lh(e)},Si.prototype.setValue=Si.prototype.setValue=function(e,t,i,n){var r=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),Eo(r,e,t,i,n)},Si.prototype.length=Si.prototype.length=function(){var e=this.ptr;return ol(e)},Si.prototype.x=Si.prototype.x=function(){var e=this.ptr;return Hd(e)},Si.prototype.y=Si.prototype.y=function(){var e=this.ptr;return yh(e)},Si.prototype.z=Si.prototype.z=function(){var e=this.ptr;return yd(e)},Si.prototype.setX=Si.prototype.setX=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ps(t,e)},Si.prototype.setY=Si.prototype.setY=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Mp(t,e)},Si.prototype.setZ=Si.prototype.setZ=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ys(t,e)},Si.prototype.normalize=Si.prototype.normalize=function(){var e=this.ptr;rh(e)},Si.prototype.dot=Si.prototype.dot=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),wc(t,e)},Si.prototype.op_mul=Si.prototype.op_mul=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Vp(t,e),Mt)},Si.prototype.op_add=Si.prototype.op_add=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Vs(t,e),Mt)},Si.prototype.op_sub=Si.prototype.op_sub=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(qh(t,e),Mt)},Si.prototype.__destroy__=Si.prototype.__destroy__=function(){var e=this.ptr;sb(e)},Ri.prototype=Object.create(Ft.prototype),Ri.prototype.constructor=Ri,Ri.prototype.__class__=Ri,Ri.__cache__={},n.btKinematicCharacterController=Ri,Ri.prototype.setUpAxis=Ri.prototype.setUpAxis=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),eo(t,e)},Ri.prototype.setWalkDirection=Ri.prototype.setWalkDirection=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qd(t,e)},Ri.prototype.setVelocityForTimeInterval=Ri.prototype.setVelocityForTimeInterval=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Am(i,e,t)},Ri.prototype.warp=Ri.prototype.warp=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),du(t,e)},Ri.prototype.preStep=Ri.prototype.preStep=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),yu(t,e)},Ri.prototype.playerStep=Ri.prototype.playerStep=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),gb(i,e,t)},Ri.prototype.setFallSpeed=Ri.prototype.setFallSpeed=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ml(t,e)},Ri.prototype.setJumpSpeed=Ri.prototype.setJumpSpeed=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Jb(t,e)},Ri.prototype.setMaxJumpHeight=Ri.prototype.setMaxJumpHeight=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Jm(t,e)},Ri.prototype.canJump=Ri.prototype.canJump=function(){var e=this.ptr;return!!Aa(e)},Ri.prototype.jump=Ri.prototype.jump=function(){var e=this.ptr;ls(e)},Ri.prototype.setGravity=Ri.prototype.setGravity=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Mo(t,e)},Ri.prototype.getGravity=Ri.prototype.getGravity=function(){var e=this.ptr;return th(e)},Ri.prototype.setMaxSlope=Ri.prototype.setMaxSlope=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wr(t,e)},Ri.prototype.getMaxSlope=Ri.prototype.getMaxSlope=function(){var e=this.ptr;return jm(e)},Ri.prototype.getGhostObject=Ri.prototype.getGhostObject=function(){var e=this.ptr;return ft(zd(e),Yt)},Ri.prototype.setUseGhostSweepTest=Ri.prototype.setUseGhostSweepTest=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),lo(t,e)},Ri.prototype.onGround=Ri.prototype.onGround=function(){var e=this.ptr;return!!vd(e)},Ri.prototype.__destroy__=Ri.prototype.__destroy__=function(){var e=this.ptr;Nm(e)},ji.prototype=Object.create(yt.prototype),ji.prototype.constructor=ji,ji.prototype.__class__=ji,ji.__cache__={},n.btStaticPlaneShape=ji,ji.prototype.setLocalScaling=ji.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),kb(t,e)},ji.prototype.calculateLocalInertia=ji.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),pb(i,e,t)},ji.prototype.__destroy__=ji.prototype.__destroy__=function(){var e=this.ptr;Lm(e)},Ii.prototype=Object.create(at.prototype),Ii.prototype.constructor=Ii,Ii.prototype.__class__=Ii,Ii.__cache__={},n.btContactSolverInfo=Ii,Ii.prototype.get_m_splitImpulse=Ii.prototype.get_m_splitImpulse=function(){var e=this.ptr;return!!Qm(e)},Ii.prototype.set_m_splitImpulse=Ii.prototype.set_m_splitImpulse=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xa(t,e)},Ii.prototype.get_m_splitImpulsePenetrationThreshold=Ii.prototype.get_m_splitImpulsePenetrationThreshold=function(){var e=this.ptr;return i_(e)},Ii.prototype.set_m_splitImpulsePenetrationThreshold=Ii.prototype.set_m_splitImpulsePenetrationThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),El(t,e)},Ii.prototype.__destroy__=Ii.prototype.__destroy__=function(){var e=this.ptr;hu(e)},Ti.prototype=Object.create(at.prototype),Ti.prototype.constructor=Ti,Ti.prototype.__class__=Ti,Ti.__cache__={},n.btOverlappingPairCache=Ti,Ti.prototype.setInternalGhostPairCallback=Ti.prototype.setInternalGhostPairCallback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wf(t,e)},Ti.prototype.__destroy__=Ti.prototype.__destroy__=function(){var e=this.ptr;na(e)},Di.prototype=Object.create(ht.prototype),Di.prototype.constructor=Di,Di.prototype.__class__=Di,Di.__cache__={},n.btSphereShape=Di,Di.prototype.setMargin=Di.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Al(t,e)},Di.prototype.getMargin=Di.prototype.getMargin=function(){var e=this.ptr;return qp(e)},Di.prototype.setLocalScaling=Di.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ph(t,e)},Di.prototype.calculateLocalInertia=Di.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Y_(i,e,t)},Di.prototype.__destroy__=Di.prototype.__destroy__=function(){var e=this.ptr;Hr(e)},Oi.prototype=Object.create(at.prototype),Oi.prototype.constructor=Oi,Oi.prototype.__class__=Oi,Oi.__cache__={},n.btDefaultCollisionConstructionInfo=Oi,Oi.prototype.__destroy__=Oi.prototype.__destroy__=function(){var e=this.ptr;Yb(e)},Li.prototype=Object.create(vt.prototype),Li.prototype.constructor=Li,Li.prototype.__class__=Li,Li.__cache__={},n.btHingeConstraint=Li,Li.prototype.setLimit=Li.prototype.setLimit=function(e,t,i,n,r){var o=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),void 0===r?void yl(o,e,t,i,n):void gl(o,e,t,i,n,r)},Li.prototype.enableAngularMotor=Li.prototype.enableAngularMotor=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Xc(n,e,t,i)},Li.prototype.enableFeedback=Li.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ao(t,e)},Li.prototype.getBreakingImpulseThreshold=Li.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return zb(e)},Li.prototype.setBreakingImpulseThreshold=Li.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Xf(t,e)},Li.prototype.__destroy__=Li.prototype.__destroy__=function(){var e=this.ptr;jh(e)},xi.prototype=Object.create(at.prototype),xi.prototype.constructor=xi,xi.prototype.__class__=xi,xi.__cache__={},n.btConstraintSetting=xi,xi.prototype.get_m_tau=xi.prototype.get_m_tau=function(){var e=this.ptr;return su(e)},xi.prototype.set_m_tau=xi.prototype.set_m_tau=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Z_(t,e)},xi.prototype.get_m_damping=xi.prototype.get_m_damping=function(){var e=this.ptr;return Ia(e)},xi.prototype.set_m_damping=xi.prototype.set_m_damping=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),G_(t,e)},xi.prototype.get_m_impulseClamp=xi.prototype.get_m_impulseClamp=function(){var e=this.ptr;return O_(e)},xi.prototype.set_m_impulseClamp=xi.prototype.set_m_impulseClamp=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Po(t,e)},xi.prototype.__destroy__=xi.prototype.__destroy__=function(){var e=this.ptr;oa(e)},Mi.prototype=Object.create(at.prototype),Mi.prototype.constructor=Mi,Mi.prototype.__class__=Mi,Mi.__cache__={},n.btTranslationalLimitMotor2=Mi,Mi.prototype.get_m_currentLinearDiff=Mi.prototype.get_m_currentLinearDiff=function(){var e=this.ptr;return ft(aa(e),Mt)},Mi.prototype.set_m_currentLinearDiff=Mi.prototype.set_m_currentLinearDiff=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),_s(t,e)},Mi.prototype.__destroy__=Mi.prototype.__destroy__=function(){var e=this.ptr;no(e)},Pi.prototype=Object.create(at.prototype),Pi.prototype.constructor=Pi,Pi.prototype.__class__=Pi,Pi.__cache__={},n.LocalShapeInfo=Pi,Pi.prototype.get_m_shapePart=Pi.prototype.get_m_shapePart=function(){var e=this.ptr;return Ao(e)},Pi.prototype.set_m_shapePart=Pi.prototype.set_m_shapePart=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),f_(t,e)},Pi.prototype.get_m_triangleIndex=Pi.prototype.get_m_triangleIndex=function(){var e=this.ptr;return pd(e)},Pi.prototype.set_m_triangleIndex=Pi.prototype.set_m_triangleIndex=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),zp(t,e)},Pi.prototype.__destroy__=Pi.prototype.__destroy__=function(){var e=this.ptr;ho(e)},Wi.prototype=Object.create(at.prototype),Wi.prototype.constructor=Wi,Wi.prototype.__class__=Wi,Wi.__cache__={},n.btConstraintSolver=Wi,Wi.prototype.__destroy__=Wi.prototype.__destroy__=function(){var e=this.ptr;zu(e)},Bi.prototype=Object.create(wt.prototype),Bi.prototype.constructor=Bi,Bi.prototype.__class__=Bi,Bi.__cache__={},n.btGeneric6DofSpringConstraint=Bi,Bi.prototype.enableSpring=Bi.prototype.enableSpring=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Ml(i,e,t)},Bi.prototype.setStiffness=Bi.prototype.setStiffness=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),xp(i,e,t)},Bi.prototype.setDamping=Bi.prototype.setDamping=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Nu(i,e,t)},Bi.prototype.setLinearLowerLimit=Bi.prototype.setLinearLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Xm(t,e)},Bi.prototype.setLinearUpperLimit=Bi.prototype.setLinearUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Zr(t,e)},Bi.prototype.setAngularLowerLimit=Bi.prototype.setAngularLowerLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),zm(t,e)},Bi.prototype.setAngularUpperLimit=Bi.prototype.setAngularUpperLimit=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),_p(t,e)},Bi.prototype.enableFeedback=Bi.prototype.enableFeedback=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Bl(t,e)},Bi.prototype.getBreakingImpulseThreshold=Bi.prototype.getBreakingImpulseThreshold=function(){var e=this.ptr;return Dl(e)},Bi.prototype.setBreakingImpulseThreshold=Bi.prototype.setBreakingImpulseThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),W_(t,e)},Bi.prototype.__destroy__=Bi.prototype.__destroy__=function(){var e=this.ptr;bf(e)},Ai.prototype=Object.create(at.prototype),Ai.prototype.constructor=Ai,Ai.prototype.__class__=Ai,Ai.__cache__={},n.LocalConvexResult=Ai,Ai.prototype.get_m_hitCollisionObject=Ai.prototype.get_m_hitCollisionObject=function(){var e=this.ptr;return ft(dc(e),mt)},Ai.prototype.set_m_hitCollisionObject=Ai.prototype.set_m_hitCollisionObject=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Zm(t,e)},Ai.prototype.get_m_localShapeInfo=Ai.prototype.get_m_localShapeInfo=function(){var e=this.ptr;return ft(Dd(e),Pi)},Ai.prototype.set_m_localShapeInfo=Ai.prototype.set_m_localShapeInfo=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Om(t,e)},Ai.prototype.get_m_hitNormalLocal=Ai.prototype.get_m_hitNormalLocal=function(){var e=this.ptr;return ft(Cr(e),Mt)},Ai.prototype.set_m_hitNormalLocal=Ai.prototype.set_m_hitNormalLocal=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ga(t,e)},Ai.prototype.get_m_hitPointLocal=Ai.prototype.get_m_hitPointLocal=function(){var e=this.ptr;return ft(To(e),Mt)},Ai.prototype.set_m_hitPointLocal=Ai.prototype.set_m_hitPointLocal=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ns(t,e)},Ai.prototype.get_m_hitFraction=Ai.prototype.get_m_hitFraction=function(){var e=this.ptr;return Nf(e)},Ai.prototype.set_m_hitFraction=Ai.prototype.set_m_hitFraction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Tb(t,e)},Ai.prototype.__destroy__=Ai.prototype.__destroy__=function(){var e=this.ptr;Gs(e)},Fi.prototype=Object.create(at.prototype),Fi.prototype.constructor=Fi,Fi.prototype.__class__=Fi,Fi.__cache__={},n.btOverlappingPairCallback=Fi,Fi.prototype.__destroy__=Fi.prototype.__destroy__=function(){var e=this.ptr;Gc(e)},Gi.prototype=Object.create(mt.prototype),Gi.prototype.constructor=Gi,Gi.prototype.__class__=Gi,Gi.__cache__={},n.btRigidBody=Gi,Gi.prototype.getCenterOfMassTransform=Gi.prototype.getCenterOfMassTransform=function(){var e=this.ptr;return ft(zr(e),Ni)},Gi.prototype.setCenterOfMassTransform=Gi.prototype.setCenterOfMassTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Hu(t,e)},Gi.prototype.setSleepingThresholds=Gi.prototype.setSleepingThresholds=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Id(i,e,t)},Gi.prototype.setDamping=Gi.prototype.setDamping=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Dc(i,e,t)},Gi.prototype.setMassProps=Gi.prototype.setMassProps=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),pl(i,e,t)},Gi.prototype.setLinearFactor=Gi.prototype.setLinearFactor=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),p_(t,e)},Gi.prototype.applyTorque=Gi.prototype.applyTorque=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),bc(t,e)},Gi.prototype.applyForce=Gi.prototype.applyForce=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),X_(i,e,t)},Gi.prototype.applyCentralForce=Gi.prototype.applyCentralForce=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Vf(t,e)},Gi.prototype.applyTorqueImpulse=Gi.prototype.applyTorqueImpulse=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),lm(t,e)},Gi.prototype.applyImpulse=Gi.prototype.applyImpulse=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Uc(i,e,t)},Gi.prototype.applyCentralImpulse=Gi.prototype.applyCentralImpulse=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xr(t,e)},Gi.prototype.updateInertiaTensor=Gi.prototype.updateInertiaTensor=function(){var e=this.ptr;If(e)},Gi.prototype.getLinearVelocity=Gi.prototype.getLinearVelocity=function(){var e=this.ptr;return ft(Zc(e),Mt)},Gi.prototype.getAngularVelocity=Gi.prototype.getAngularVelocity=function(){var e=this.ptr;return ft(Vh(e),Mt)},Gi.prototype.setLinearVelocity=Gi.prototype.setLinearVelocity=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Hh(t,e)},Gi.prototype.setAngularVelocity=Gi.prototype.setAngularVelocity=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qc(t,e)},Gi.prototype.getMotionState=Gi.prototype.getMotionState=function(){var e=this.ptr;return ft(Ud(e),Rt)},Gi.prototype.setMotionState=Gi.prototype.setMotionState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),gc(t,e)},Gi.prototype.setAngularFactor=Gi.prototype.setAngularFactor=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Zp(t,e)},Gi.prototype.upcast=Gi.prototype.upcast=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(hs(t,e),Gi)},Gi.prototype.setAnisotropicFriction=Gi.prototype.setAnisotropicFriction=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),eb(i,e,t)},Gi.prototype.getCollisionShape=Gi.prototype.getCollisionShape=function(){var e=this.ptr;return ft(Wh(e),ht)},Gi.prototype.setContactProcessingThreshold=Gi.prototype.setContactProcessingThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Hc(t,e)},Gi.prototype.setActivationState=Gi.prototype.setActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),nm(t,e)},Gi.prototype.forceActivationState=Gi.prototype.forceActivationState=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),wm(t,e)},Gi.prototype.activate=Gi.prototype.activate=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),void 0===e?void Bd(t):void Wd(t,e)},Gi.prototype.isActive=Gi.prototype.isActive=function(){var e=this.ptr;return!!Fa(e)},Gi.prototype.isKinematicObject=Gi.prototype.isKinematicObject=function(){var e=this.ptr;return!!go(e)},Gi.prototype.setRestitution=Gi.prototype.setRestitution=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Fm(t,e)},Gi.prototype.setFriction=Gi.prototype.setFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),is(t,e)},Gi.prototype.setRollingFriction=Gi.prototype.setRollingFriction=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),bd(t,e)},Gi.prototype.getWorldTransform=Gi.prototype.getWorldTransform=function(){var e=this.ptr;return ft(id(e),Ni)},Gi.prototype.getCollisionFlags=Gi.prototype.getCollisionFlags=function(){var e=this.ptr;return lc(e)},Gi.prototype.setCollisionFlags=Gi.prototype.setCollisionFlags=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),um(t,e)},Gi.prototype.setWorldTransform=Gi.prototype.setWorldTransform=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Kc(t,e)},Gi.prototype.setCollisionShape=Gi.prototype.setCollisionShape=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Za(t,e)},Gi.prototype.setCcdMotionThreshold=Gi.prototype.setCcdMotionThreshold=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),V_(t,e)},Gi.prototype.setCcdSweptSphereRadius=Gi.prototype.setCcdSweptSphereRadius=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),es(t,e)},Gi.prototype.__destroy__=Gi.prototype.__destroy__=function(){var e=this.ptr;Rd(e)},Ei.prototype=Object.create(At.prototype),Ei.prototype.constructor=Ei,Ei.prototype.__class__=Ei,Ei.__cache__={},n.btCylinderShapeX=Ei,Ei.prototype.setMargin=Ei.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Is(t,e)},Ei.prototype.getMargin=Ei.prototype.getMargin=function(){var e=this.ptr;return af(e)},Ei.prototype.setLocalScaling=Ei.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Wc(t,e)},Ei.prototype.calculateLocalInertia=Ei.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),sh(i,e,t)},Ei.prototype.__destroy__=Ei.prototype.__destroy__=function(){var e=this.ptr;Ed(e)},Vi.prototype=Object.create(At.prototype),Vi.prototype.constructor=Vi,Vi.prototype.__class__=Vi,Vi.__cache__={},n.btCylinderShapeZ=Vi,Vi.prototype.setMargin=Vi.prototype.setMargin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ts(t,e)},Vi.prototype.getMargin=Vi.prototype.getMargin=function(){var e=this.ptr;return yr(e)},Vi.prototype.setLocalScaling=Vi.prototype.setLocalScaling=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),xm(t,e)},Vi.prototype.calculateLocalInertia=Vi.prototype.calculateLocalInertia=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Up(i,e,t)},Vi.prototype.__destroy__=Vi.prototype.__destroy__=function(){var e=this.ptr;L_(e)},Ni.prototype=Object.create(at.prototype),Ni.prototype.constructor=Ni,Ni.prototype.__class__=Ni,Ni.__cache__={},n.btTransform=Ni,Ni.prototype.setIdentity=Ni.prototype.setIdentity=function(){var e=this.ptr;Sr(e)},Ni.prototype.setOrigin=Ni.prototype.setOrigin=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Df(t,e)},Ni.prototype.setRotation=Ni.prototype.setRotation=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Hs(t,e)},Ni.prototype.getOrigin=Ni.prototype.getOrigin=function(){var e=this.ptr;return ft(Sh(e),Mt)},Ni.prototype.getRotation=Ni.prototype.getRotation=function(){var e=this.ptr;return ft(Uf(e),vi)},Ni.prototype.getBasis=Ni.prototype.getBasis=function(){var e=this.ptr;return ft(vs(e),Gt)},Ni.prototype.__destroy__=Ni.prototype.__destroy__=function(){var e=this.ptr;gm(e)},Xi.prototype=Object.create(Ft.prototype),Xi.prototype.constructor=Xi,Xi.prototype.__class__=Xi,Xi.__cache__={},n.btRaycastVehicle=Xi,Xi.prototype.applyEngineForce=Xi.prototype.applyEngineForce=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),gu(i,e,t)},Xi.prototype.setSteeringValue=Xi.prototype.setSteeringValue=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),b_(i,e,t)},Xi.prototype.getWheelTransformWS=Xi.prototype.getWheelTransformWS=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Tc(t,e),Ni)},Xi.prototype.updateWheelTransform=Xi.prototype.updateWheelTransform=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),Er(i,e,t)},Xi.prototype.addWheel=Xi.prototype.addWheel=function(e,t,i,n,r,o,_){var s=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),n&&"object"==typeof n&&(n=n.ptr),r&&"object"==typeof r&&(r=r.ptr),o&&"object"==typeof o&&(o=o.ptr),_&&"object"==typeof _&&(_=_.ptr),ft(Tm(s,e,t,i,n,r,o,_),ki)},Xi.prototype.getNumWheels=Xi.prototype.getNumWheels=function(){var e=this.ptr;return df(e)},Xi.prototype.getRigidBody=Xi.prototype.getRigidBody=function(){var e=this.ptr;return ft(nu(e),Gi)},Xi.prototype.getWheelInfo=Xi.prototype.getWheelInfo=function(e){var t=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),ft(Xb(t,e),ki)},Xi.prototype.setBrake=Xi.prototype.setBrake=function(e,t){var i=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),vu(i,e,t)},Xi.prototype.setCoordinateSystem=Xi.prototype.setCoordinateSystem=function(e,t,i){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),i&&"object"==typeof i&&(i=i.ptr),Qa(n,e,t,i)},Xi.prototype.__destroy__=Xi.prototype.__destroy__=function(){var e=this.ptr;Ad(e)},Hi.prototype=Object.create(at.prototype),Hi.prototype.constructor=Hi,Hi.prototype.__class__=Hi,Hi.__cache__={},n.btGhostPairCallback=Hi,Hi.prototype.__destroy__=Hi.prototype.__destroy__=function(){var e=this.ptr;Rm(e)},Zi.prototype=Object.create(at.prototype),Zi.prototype.constructor=Zi,Zi.prototype.__class__=Zi,Zi.__cache__={},n.btRotationalLimitMotor2=Zi,Zi.prototype.get_m_currentPosition=Zi.prototype.get_m_currentPosition=function(){var e=this.ptr;return jc(e)},Zi.prototype.set_m_currentPosition=Zi.prototype.set_m_currentPosition=function(e){var t=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Um(t,e)},Zi.prototype.__destroy__=Zi.prototype.__destroy__=function(){var e=this.ptr;Ta(e)},function(){function e(){n.RO_XYZ=op(),n.RO_XZY=fh(),n.RO_YXZ=d_(),n.RO_YZX=ru(),n.RO_ZXY=Hm(),n.RO_ZYX=Rh()}n.calledRun?e():A(e)}(),n};return t()})}).call(t,i(2),"/",i(3)(e))},function(e,t){function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function r(e){if(f===setTimeout)return setTimeout(e,0);if((f===i||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function o(e){if(p===clearTimeout)return clearTimeout(e);if((p===n||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function _(){d&&u&&(d=!1,u.length?b=u.concat(b):h=-1,b.length&&s())}function s(){if(!d){var e=r(_);d=!0;for(var t=b.length;t;){for(u=b,b=[];++h<t;)u&&u[h].run();h=-1,t=b.length}u=null,d=!1,o(e)}}function a(e,t){this.fun=e,this.array=t}function c(){}var f,p,l=e.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:i}catch(e){f=i}try{p="function"==typeof clearTimeout?clearTimeout:n}catch(e){p=n}}();var u,b=[],d=!1,h=-1;l.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];b.push(new a(e,t)),1!==b.length||d||r(s)},a.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=c,l.addListener=c,l.once=c,l.off=c,l.removeListener=c,l.removeAllListeners=c,l.emit=c,l.binding=function(e){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(e){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){},function(e,t,i){(function(e){function i(e,t){for(var i=0,n=e.length-1;n>=0;n--){var r=e[n];"."===r?e.splice(n,1):".."===r?(e.splice(n,1),i++):i&&(e.splice(n,1),i--)}if(t)for(;i--;i)e.unshift("..");return e}function n(e,t){if(e.filter)return e.filter(t);for(var i=[],n=0;n<e.length;n++)t(e[n],n,e)&&i.push(e[n]);return i}var r=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/,o=function(e){return r.exec(e).slice(1)};t.resolve=function(){for(var t="",r=!1,o=arguments.length-1;o>=-1&&!r;o--){var _=o>=0?arguments[o]:e.cwd();if("string"!=typeof _)throw new TypeError("Arguments to path.resolve must be strings");_&&(t=_+"/"+t,\nr="/"===_.charAt(0))}return t=i(n(t.split("/"),function(e){return!!e}),!r).join("/"),(r?"/":"")+t||"."},t.normalize=function(e){var r=t.isAbsolute(e),o="/"===_(e,-1);return e=i(n(e.split("/"),function(e){return!!e}),!r).join("/"),e||r||(e="."),e&&o&&(e+="/"),(r?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(n(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,i){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var i=e.length-1;i>=0&&""===e[i];i--);return t>i?[]:e.slice(t,i-t+1)}e=t.resolve(e).substr(1),i=t.resolve(i).substr(1);for(var r=n(e.split("/")),o=n(i.split("/")),_=Math.min(r.length,o.length),s=_,a=0;a<_;a++)if(r[a]!==o[a]){s=a;break}for(var c=[],a=s;a<r.length;a++)c.push("..");return c=c.concat(o.slice(s)),c.join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=o(e),i=t[0],n=t[1];return i||n?(n&&(n=n.substr(0,n.length-1)),i+n):"."},t.basename=function(e,t){var i=o(e)[2];return t&&i.substr(-1*t.length)===t&&(i=i.substr(0,i.length-t.length)),i},t.extname=function(e){return o(e)[3]};var _="b"==="ab".substr(-1)?function(e,t,i){return e.substr(t,i)}:function(e,t,i){return t<0&&(t=e.length+t),e.substr(t,i)}}).call(t,i(2))}]);\n//# sourceMappingURL=6ba69877aa503d012c07.worker.js.map',o.p+"6ba69877aa503d012c07.worker.js");
	}},function(e,t){var o=window.URL||window.webkitURL;e.exports=function(e,t){try{try{var i;try{var n=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;i=new n,i.append(e),i=i.getBlob()}catch(r){i=new Blob([e])}return new Worker(o.createObjectURL(i))}catch(r){return new Worker("data:application/javascript,"+encodeURIComponent(e))}}catch(r){return new Worker(t)}}}])});
	//# sourceMappingURL=physi-webpack.min.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TrackballControls = undefined;
	
	var _TrackballControls = __webpack_require__(5);
	
	var _TrackballControls2 = _interopRequireDefault(_TrackballControls);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.TrackballControls = _TrackballControls2.default;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _three = __webpack_require__(1);
	
	var THREE = _interopRequireWildcard(_three);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var TrackballControls = function TrackballControls(object, domElement) {
	
		var _this = this;
		var STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
	
		this.object = object;
		this.domElement = domElement !== undefined ? domElement : document;
	
		// API
	
		this.enabled = true;
	
		this.screen = { left: 0, top: 0, width: 0, height: 0 };
	
		this.rotateSpeed = 1.0;
		this.zoomSpeed = 1.2;
		this.panSpeed = 0.3;
	
		this.noRotate = false;
		this.noZoom = false;
		this.noPan = false;
	
		this.staticMoving = false;
		this.dynamicDampingFactor = 0.2;
	
		this.minDistance = 0;
		this.maxDistance = Infinity;
	
		this.keys = [65 /*A*/, 83 /*S*/, 68 /*D*/];
	
		// internals
	
		this.target = new THREE.Vector3();
	
		var EPS = 0.000001;
	
		var lastPosition = new THREE.Vector3();
	
		var _state = STATE.NONE,
		    _prevState = STATE.NONE,
		    _eye = new THREE.Vector3(),
		    _movePrev = new THREE.Vector2(),
		    _moveCurr = new THREE.Vector2(),
		    _lastAxis = new THREE.Vector3(),
		    _lastAngle = 0,
		    _zoomStart = new THREE.Vector2(),
		    _zoomEnd = new THREE.Vector2(),
		    _touchZoomDistanceStart = 0,
		    _touchZoomDistanceEnd = 0,
		    _panStart = new THREE.Vector2(),
		    _panEnd = new THREE.Vector2();
	
		// for reset
	
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.up0 = this.object.up.clone();
	
		// events
	
		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };
	
		// methods
	
		this.handleResize = function () {
	
			if (this.domElement === document) {
	
				this.screen.left = 0;
				this.screen.top = 0;
				this.screen.width = window.innerWidth;
				this.screen.height = window.innerHeight;
			} else {
	
				var box = this.domElement.getBoundingClientRect();
				// adjustments come from similar code in the jquery offset() function
				var d = this.domElement.ownerDocument.documentElement;
				this.screen.left = box.left + window.pageXOffset - d.clientLeft;
				this.screen.top = box.top + window.pageYOffset - d.clientTop;
				this.screen.width = box.width;
				this.screen.height = box.height;
			}
		};
	
		this.handleEvent = function (event) {
	
			if (typeof this[event.type] == 'function') {
	
				this[event.type](event);
			}
		};
	
		var getMouseOnScreen = function () {
	
			var vector = new THREE.Vector2();
	
			return function getMouseOnScreen(pageX, pageY) {
	
				vector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);
	
				return vector;
			};
		}();
	
		var getMouseOnCircle = function () {
	
			var vector = new THREE.Vector2();
	
			return function getMouseOnCircle(pageX, pageY) {
	
				vector.set((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5), (_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width);
	
				return vector;
			};
		}();
	
		this.rotateCamera = function () {
	
			var axis = new THREE.Vector3(),
			    quaternion = new THREE.Quaternion(),
			    eyeDirection = new THREE.Vector3(),
			    objectUpDirection = new THREE.Vector3(),
			    objectSidewaysDirection = new THREE.Vector3(),
			    moveDirection = new THREE.Vector3(),
			    angle;
	
			return function rotateCamera() {
	
				moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);
				angle = moveDirection.length();
	
				if (angle) {
	
					_eye.copy(_this.object.position).sub(_this.target);
	
					eyeDirection.copy(_eye).normalize();
					objectUpDirection.copy(_this.object.up).normalize();
					objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();
	
					objectUpDirection.setLength(_moveCurr.y - _movePrev.y);
					objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);
	
					moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));
	
					axis.crossVectors(moveDirection, _eye).normalize();
	
					angle *= _this.rotateSpeed;
					quaternion.setFromAxisAngle(axis, angle);
	
					_eye.applyQuaternion(quaternion);
					_this.object.up.applyQuaternion(quaternion);
	
					_lastAxis.copy(axis);
					_lastAngle = angle;
				} else if (!_this.staticMoving && _lastAngle) {
	
					_lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);
					_eye.copy(_this.object.position).sub(_this.target);
					quaternion.setFromAxisAngle(_lastAxis, _lastAngle);
					_eye.applyQuaternion(quaternion);
					_this.object.up.applyQuaternion(quaternion);
				}
	
				_movePrev.copy(_moveCurr);
			};
		}();
	
		this.zoomCamera = function () {
	
			var factor;
	
			if (_state === STATE.TOUCH_ZOOM_PAN) {
	
				factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
				_touchZoomDistanceStart = _touchZoomDistanceEnd;
				_eye.multiplyScalar(factor);
			} else {
	
				factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;
	
				if (factor !== 1.0 && factor > 0.0) {
	
					_eye.multiplyScalar(factor);
				}
	
				if (_this.staticMoving) {
	
					_zoomStart.copy(_zoomEnd);
				} else {
	
					_zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;
				}
			}
		};
	
		this.panCamera = function () {
	
			var mouseChange = new THREE.Vector2(),
			    objectUp = new THREE.Vector3(),
			    pan = new THREE.Vector3();
	
			return function panCamera() {
	
				mouseChange.copy(_panEnd).sub(_panStart);
	
				if (mouseChange.lengthSq()) {
	
					mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);
	
					pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);
					pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));
	
					_this.object.position.add(pan);
					_this.target.add(pan);
	
					if (_this.staticMoving) {
	
						_panStart.copy(_panEnd);
					} else {
	
						_panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));
					}
				}
			};
		}();
	
		this.checkDistances = function () {
	
			if (!_this.noZoom || !_this.noPan) {
	
				if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {
	
					_this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));
					_zoomStart.copy(_zoomEnd);
				}
	
				if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {
	
					_this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));
					_zoomStart.copy(_zoomEnd);
				}
			}
		};
	
		this.update = function () {
	
			_eye.subVectors(_this.object.position, _this.target);
	
			if (!_this.noRotate) {
	
				_this.rotateCamera();
			}
	
			if (!_this.noZoom) {
	
				_this.zoomCamera();
			}
	
			if (!_this.noPan) {
	
				_this.panCamera();
			}
	
			_this.object.position.addVectors(_this.target, _eye);
	
			_this.checkDistances();
	
			_this.object.lookAt(_this.target);
	
			if (lastPosition.distanceToSquared(_this.object.position) > EPS) {
	
				_this.dispatchEvent(changeEvent);
	
				lastPosition.copy(_this.object.position);
			}
		};
	
		this.reset = function () {
	
			_state = STATE.NONE;
			_prevState = STATE.NONE;
	
			_this.target.copy(_this.target0);
			_this.object.position.copy(_this.position0);
			_this.object.up.copy(_this.up0);
	
			_eye.subVectors(_this.object.position, _this.target);
	
			_this.object.lookAt(_this.target);
	
			_this.dispatchEvent(changeEvent);
	
			lastPosition.copy(_this.object.position);
		};
	
		// listeners
	
		function keydown(event) {
	
			if (_this.enabled === false) return;
	
			window.removeEventListener('keydown', keydown);
	
			_prevState = _state;
	
			if (_state !== STATE.NONE) {
	
				return;
			} else if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {
	
				_state = STATE.ROTATE;
			} else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {
	
				_state = STATE.ZOOM;
			} else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {
	
				_state = STATE.PAN;
			}
		}
	
		function keyup(event) {
	
			if (_this.enabled === false) return;
	
			_state = _prevState;
	
			window.addEventListener('keydown', keydown, false);
		}
	
		function mousedown(event) {
	
			if (_this.enabled === false) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			if (_state === STATE.NONE) {
	
				_state = event.button;
			}
	
			if (_state === STATE.ROTATE && !_this.noRotate) {
	
				_moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));
				_movePrev.copy(_moveCurr);
			} else if (_state === STATE.ZOOM && !_this.noZoom) {
	
				_zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));
				_zoomEnd.copy(_zoomStart);
			} else if (_state === STATE.PAN && !_this.noPan) {
	
				_panStart.copy(getMouseOnScreen(event.pageX, event.pageY));
				_panEnd.copy(_panStart);
			}
	
			document.addEventListener('mousemove', mousemove, false);
			document.addEventListener('mouseup', mouseup, false);
	
			_this.dispatchEvent(startEvent);
		}
	
		function mousemove(event) {
	
			if (_this.enabled === false) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			if (_state === STATE.ROTATE && !_this.noRotate) {
	
				_movePrev.copy(_moveCurr);
				_moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));
			} else if (_state === STATE.ZOOM && !_this.noZoom) {
	
				_zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
			} else if (_state === STATE.PAN && !_this.noPan) {
	
				_panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
			}
		}
	
		function mouseup(event) {
	
			if (_this.enabled === false) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			_state = STATE.NONE;
	
			document.removeEventListener('mousemove', mousemove);
			document.removeEventListener('mouseup', mouseup);
			_this.dispatchEvent(endEvent);
		}
	
		function mousewheel(event) {
	
			if (_this.enabled === false) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			_zoomStart.y -= event.deltaY * 0.01;
	
			_this.dispatchEvent(startEvent);
			_this.dispatchEvent(endEvent);
		}
	
		function touchstart(event) {
	
			if (_this.enabled === false) return;
	
			switch (event.touches.length) {
	
				case 1:
					_state = STATE.TOUCH_ROTATE;
					_moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
					_movePrev.copy(_moveCurr);
					break;
	
				default:
					// 2 or more
					_state = STATE.TOUCH_ZOOM_PAN;
					var dx = event.touches[0].pageX - event.touches[1].pageX;
					var dy = event.touches[0].pageY - event.touches[1].pageY;
					_touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);
	
					var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
					var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
					_panStart.copy(getMouseOnScreen(x, y));
					_panEnd.copy(_panStart);
					break;
	
			}
	
			_this.dispatchEvent(startEvent);
		}
	
		function touchmove(event) {
	
			if (_this.enabled === false) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			switch (event.touches.length) {
	
				case 1:
					_movePrev.copy(_moveCurr);
					_moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
					break;
	
				default:
					// 2 or more
					var dx = event.touches[0].pageX - event.touches[1].pageX;
					var dy = event.touches[0].pageY - event.touches[1].pageY;
					_touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);
	
					var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
					var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
					_panEnd.copy(getMouseOnScreen(x, y));
					break;
	
			}
		}
	
		function touchend(event) {
	
			if (_this.enabled === false) return;
	
			switch (event.touches.length) {
	
				case 0:
					_state = STATE.NONE;
					break;
	
				case 1:
					_state = STATE.TOUCH_ROTATE;
					_moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
					_movePrev.copy(_moveCurr);
					break;
	
			}
	
			_this.dispatchEvent(endEvent);
		}
	
		function contextmenu(event) {
	
			event.preventDefault();
		}
	
		this.dispose = function () {
	
			this.domElement.removeEventListener('contextmenu', contextmenu, false);
			this.domElement.removeEventListener('mousedown', mousedown, false);
			this.domElement.removeEventListener('wheel', mousewheel, false);
	
			this.domElement.removeEventListener('touchstart', touchstart, false);
			this.domElement.removeEventListener('touchend', touchend, false);
			this.domElement.removeEventListener('touchmove', touchmove, false);
	
			document.removeEventListener('mousemove', mousemove, false);
			document.removeEventListener('mouseup', mouseup, false);
	
			window.removeEventListener('keydown', keydown, false);
			window.removeEventListener('keyup', keyup, false);
		};
	
		this.domElement.addEventListener('contextmenu', contextmenu, false);
		this.domElement.addEventListener('mousedown', mousedown, false);
		this.domElement.addEventListener('wheel', mousewheel, false);
	
		this.domElement.addEventListener('touchstart', touchstart, false);
		this.domElement.addEventListener('touchend', touchend, false);
		this.domElement.addEventListener('touchmove', touchmove, false);
	
		window.addEventListener('keydown', keydown, false);
		window.addEventListener('keyup', keyup, false);
	
		this.handleResize();
	
		// force an update at start
		this.update();
	}; /**
	    * @author Eberhard Graether / http://egraether.com/
	    * @author Mark Lundin 	/ http://mark-lundin.com
	    * @author Simone Manini / http://daron1337.github.io
	    * @author Luca Antiga 	/ http://lantiga.github.io
	    *
	    * modified by Aaron Abbott to be importable via es6 modules and webpack
	    */
	
	TrackballControls.prototype = Object.create(THREE.EventDispatcher.prototype);
	TrackballControls.prototype.constructor = TrackballControls;
	
	exports.default = TrackballControls;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.randScale = randScale;
	exports.randVector3 = randVector3;
	
	var _three = __webpack_require__(1);
	
	/**
	 * Returns a random float between on [-a, a).
	 * With no arguments, assumes a = 1
	 */
	function randScale() {
	  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	
	  return (Math.random() * 2 - 1) * a;
	}
	
	/**
	 * Returns a random Vector3 between on [-a, a).
	 * With no arguments, assumes a = 1
	 */
	function randVector3() {
	  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	
	  return new _three.Vector3(randScale(a), randScale(a), randScale(a));
	}

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = "COMPND    UNNAMED\nAUTHOR    GENERATED BY OPEN BABEL 2.3.2\nHETATM    1  O   HOH     1      -9.429   1.397   0.000  1.00  0.00           O  \nHETATM    2  H   HOH     0      -8.509   1.764   0.000  1.00  0.00           H  \nCONECT    1    2                                                      \nCONECT    2    1                                                      \nMASTER        0    0    0    0    0    0    0    0    2    0    2    0\nEND\n"

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.moleculeFactory = exports.createBoundary = exports.createHydroxyl = undefined;
	
	var _hydroxylFactory = __webpack_require__(9);
	
	var _hydroxylFactory2 = _interopRequireDefault(_hydroxylFactory);
	
	var _moleculeFactory = __webpack_require__(11);
	
	var _moleculeFactory2 = _interopRequireDefault(_moleculeFactory);
	
	var _boundary = __webpack_require__(12);
	
	var _boundary2 = _interopRequireDefault(_boundary);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.createHydroxyl = _hydroxylFactory2.default;
	exports.createBoundary = _boundary2.default;
	exports.moleculeFactory = _moleculeFactory2.default;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createHydroxyl;
	
	var _three = __webpack_require__(1);
	
	var _physijs = __webpack_require__(3);
	
	var _physijs2 = _interopRequireDefault(_physijs);
	
	var _utils = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Some constant parameters for creating the molecules
	 */
	var numSegments = 32;
	// eventually scale the whole model down by this factor
	var scaleDownBy = 0.25;
	var hydrogenRadius = 5;
	var oxygenRadius = hydrogenRadius * 2;
	var bondConnectorRadius = hydrogenRadius / 3;
	var bondLength = hydrogenRadius * 4;
	
	var hydrogenGeom = new _three.SphereGeometry(hydrogenRadius, numSegments, numSegments);
	// const hydrogenGeom = new BoxGeometry(hydrogenRadius * 2, hydrogenRadius * 2, hydrogenRadius * 2);
	var hydrogenMat = (0, _utils.createBouncyMaterial)(new _three.MeshPhongMaterial({ color: 0xFFFFFF }));
	
	var oxygenGeom = new _three.SphereGeometry(oxygenRadius, numSegments, numSegments);
	// const oxygenGeom = new BoxGeometry(oxygenRadius * 2, oxygenRadius * 2, oxygenRadius * 2);
	var oxygenMat = (0, _utils.createBouncyMaterial)(new _three.MeshPhongMaterial({ color: 0xF00000 }));
	var bondGeom = new _three.CylinderGeometry(bondConnectorRadius, bondConnectorRadius, bondLength);
	var bondMat = (0, _utils.createBouncyMaterial)(new _three.MeshPhongMaterial({ color: 0xA3B1BE }));
	
	function createHydroxyl() {
	  var hydrogenMesh = new _physijs2.default.SphereMesh(hydrogenGeom, hydrogenMat, 1);
	  var oxygenMesh = new _physijs2.default.SphereMesh(oxygenGeom, oxygenMat, 16);
	  var bondMesh = new _physijs2.default.CylinderMesh(bondGeom, bondMat, 17); // not so sure about masses..
	
	  // move the hydrogen and oxygen to bond cylinder's corners
	  hydrogenMesh.position.y = -bondLength / 2;
	  oxygenMesh.position.y = bondLength / 2;
	
	  bondMesh.add(hydrogenMesh);
	  bondMesh.add(oxygenMesh);
	
	  // shrink the whole thing down
	  bondMesh.scale.multiplyScalar(scaleDownBy);
	
	  // need to use ccd because of high velocity and bug in physics engine
	  bondMesh.setCcdMotionThreshold(1);
	
	  // set the radius of the embedded sphere such that it is smaller than the object
	  bondMesh.setCcdSweptSphereRadius(scaleDownBy * 0.2 * bondLength);
	
	  addCallbacks(bondMesh);
	
	  return bondMesh;
	}
	
	function addCallbacks(hydroxylMesh) {
	  hydroxylMesh.addEventListener('collision', function (other, linearVelocity, angularVelocity, contactNormal) {
	    hydroxylMesh.justCollided = true;
	  });
	}

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createBouncyMaterial = createBouncyMaterial;
	
	var _three = __webpack_require__(1);
	
	var _physijs = __webpack_require__(3);
	
	var _physijs2 = _interopRequireDefault(_physijs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * This function wraps physijs.createMaterial and passes values for ideal
	 * mechanics -- perfectly elastic collisions
	 */
	function createBouncyMaterial(material) {
	  return _physijs2.default.createMaterial(material, 0.0, // low friction
	  100.0 // high restitution => very bouncy
	  );
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = moleculeFactory;
	
	var _three = __webpack_require__(1);
	
	var THREE = _interopRequireWildcard(_three);
	
	var _physijs = __webpack_require__(3);
	
	var _physijs2 = _interopRequireDefault(_physijs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function createMolecule(geometry, geometryBonds, json, mass) {
	  /* this code comes from the threejs examples. */
	  var boxGeometry = new THREE.BoxGeometry(1, 1, 1);
	  var sphereGeometry = new THREE.IcosahedronGeometry(1, 2);
	  var offset = geometry.center();
	  geometryBonds.translate(offset.x, offset.y, offset.z);
	
	  var root = new _physijs2.default.ConvexMesh(boxGeometry, new THREE.MeshPhongMaterial({ color: 0xFFFFFF }));
	  console.log(root);
	
	  for (var i = 0; i < geometry.vertices.length; i++) {
	    var position = geometry.vertices[i];
	    var color = geometry.colors[i];
	    var element = geometry.elements[i];
	    var material = new THREE.MeshPhongMaterial({ color: color });
	    var object = new _physijs2.default.SphereMesh(sphereGeometry, material);
	    object.position.copy(position);
	    object.position.multiplyScalar(75);
	    object.scale.multiplyScalar(25);
	    root.add(object);
	    var atom = json.atoms[i];
	    var text = document.createElement('div');
	    text.className = 'label';
	    text.style.color = 'rgb(' + atom[3][0] + ',' + atom[3][1] + ',' + atom[3][2] + ')';
	    text.textContent = atom[4];
	  }
	  for (var i = 0; i < geometryBonds.vertices.length; i += 2) {
	    var start = geometryBonds.vertices[i];
	    var end = geometryBonds.vertices[i + 1];
	    start.multiplyScalar(75);
	    end.multiplyScalar(75);
	    var object = new _physijs2.default.BoxMesh(boxGeometry, new THREE.MeshPhongMaterial(0xffffff));
	    object.position.copy(start);
	    object.position.lerp(end, 0.5);
	    object.scale.set(5, 5, start.distanceTo(end));
	    object.lookAt(end);
	    root.add(object);
	  }
	
	  return root;
	}
	
	function createModel(json) {
	
	  var scope = this,
	      geometryAtoms = new THREE.Geometry(),
	      geometryBonds = new THREE.Geometry();
	
	  geometryAtoms.elements = [];
	
	  var atoms = json.atoms;
	  var bonds = json.bonds;
	
	  for (var i = 0; i < atoms.length; i++) {
	
	    var atom = atoms[i];
	
	    var x = atom[0];
	    var y = atom[1];
	    var z = atom[2];
	
	    var position = new THREE.Vector3(x, y, z);
	    geometryAtoms.vertices.push(position);
	
	    var r = atom[3][0] / 255;
	    var g = atom[3][1] / 255;
	    var b = atom[3][2] / 255;
	
	    var color = new THREE.Color();
	    color.setRGB(r, g, b);
	
	    geometryAtoms.colors.push(color);
	
	    geometryAtoms.elements.push(atom[4]);
	  }
	
	  for (var i = 0; i < bonds.length; i++) {
	
	    var bond = bonds[i];
	
	    var start = bond[0];
	    var end = bond[1];
	
	    var vertex1 = geometryAtoms.vertices[start];
	    var vertex2 = geometryAtoms.vertices[end];
	
	    geometryBonds.vertices.push(vertex1.clone());
	    geometryBonds.vertices.push(vertex2.clone());
	  }
	
	  return { geometryAtoms: geometryAtoms, geometryBonds: geometryBonds, json: json };
	}
	
	function parsePDB(text) {
	
	  function trim(text) {
	
	    return text.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	  }
	
	  function capitalize(text) {
	
	    return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();
	  }
	
	  function hash(s, e) {
	
	    return "s" + Math.min(s, e) + "e" + Math.max(s, e);
	  }
	
	  function parseBond(start, length) {
	
	    var eatom = parseInt(lines[i].substr(start, length));
	
	    if (eatom) {
	
	      var h = hash(satom, eatom);
	
	      if (bhash[h] == undefined) {
	
	        bonds.push([satom - 1, eatom - 1, 1]);
	        bhash[h] = bonds.length - 1;
	      } else {
	
	        // doesn't really work as almost all PDBs
	        // have just normal bonds appearing multiple
	        // times instead of being double/triple bonds
	        // bonds[bhash[h]][2] += 1;
	
	      }
	    }
	  }
	
	  var CPK = { "h": [255, 255, 255], "he": [217, 255, 255], "li": [204, 128, 255], "be": [194, 255, 0], "b": [255, 181, 181], "c": [144, 144, 144], "n": [48, 80, 248], "o": [255, 13, 13], "f": [144, 224, 80], "ne": [179, 227, 245], "na": [171, 92, 242], "mg": [138, 255, 0], "al": [191, 166, 166], "si": [240, 200, 160], "p": [255, 128, 0], "s": [255, 255, 48], "cl": [31, 240, 31], "ar": [128, 209, 227], "k": [143, 64, 212], "ca": [61, 255, 0], "sc": [230, 230, 230], "ti": [191, 194, 199], "v": [166, 166, 171], "cr": [138, 153, 199], "mn": [156, 122, 199], "fe": [224, 102, 51], "co": [240, 144, 160], "ni": [80, 208, 80], "cu": [200, 128, 51], "zn": [125, 128, 176], "ga": [194, 143, 143], "ge": [102, 143, 143], "as": [189, 128, 227], "se": [255, 161, 0], "br": [166, 41, 41], "kr": [92, 184, 209], "rb": [112, 46, 176], "sr": [0, 255, 0], "y": [148, 255, 255], "zr": [148, 224, 224], "nb": [115, 194, 201], "mo": [84, 181, 181], "tc": [59, 158, 158], "ru": [36, 143, 143], "rh": [10, 125, 140], "pd": [0, 105, 133], "ag": [192, 192, 192], "cd": [255, 217, 143], "in": [166, 117, 115], "sn": [102, 128, 128], "sb": [158, 99, 181], "te": [212, 122, 0], "i": [148, 0, 148], "xe": [66, 158, 176], "cs": [87, 23, 143], "ba": [0, 201, 0], "la": [112, 212, 255], "ce": [255, 255, 199], "pr": [217, 255, 199], "nd": [199, 255, 199], "pm": [163, 255, 199], "sm": [143, 255, 199], "eu": [97, 255, 199], "gd": [69, 255, 199], "tb": [48, 255, 199], "dy": [31, 255, 199], "ho": [0, 255, 156], "er": [0, 230, 117], "tm": [0, 212, 82], "yb": [0, 191, 56], "lu": [0, 171, 36], "hf": [77, 194, 255], "ta": [77, 166, 255], "w": [33, 148, 214], "re": [38, 125, 171], "os": [38, 102, 150], "ir": [23, 84, 135], "pt": [208, 208, 224], "au": [255, 209, 35], "hg": [184, 184, 208], "tl": [166, 84, 77], "pb": [87, 89, 97], "bi": [158, 79, 181], "po": [171, 92, 0], "at": [117, 79, 69], "rn": [66, 130, 150], "fr": [66, 0, 102], "ra": [0, 125, 0], "ac": [112, 171, 250], "th": [0, 186, 255], "pa": [0, 161, 255], "u": [0, 143, 255], "np": [0, 128, 255], "pu": [0, 107, 255], "am": [84, 92, 242], "cm": [120, 92, 227], "bk": [138, 79, 227], "cf": [161, 54, 212], "es": [179, 31, 212], "fm": [179, 31, 186], "md": [179, 13, 166], "no": [189, 13, 135], "lr": [199, 0, 102], "rf": [204, 0, 89], "db": [209, 0, 79], "sg": [217, 0, 69], "bh": [224, 0, 56], "hs": [230, 0, 46], "mt": [235, 0, 38],
	    "ds": [235, 0, 38], "rg": [235, 0, 38], "cn": [235, 0, 38], "uut": [235, 0, 38], "uuq": [235, 0, 38], "uup": [235, 0, 38], "uuh": [235, 0, 38], "uus": [235, 0, 38], "uuo": [235, 0, 38] };
	
	  var atoms = [];
	  var bonds = [];
	  var histogram = {};
	
	  var bhash = {};
	
	  var lines = text.split("\n");
	
	  var x, y, z, e;
	
	  for (var i = 0, il = lines.length; i < il; ++i) {
	
	    if (lines[i].substr(0, 4) == "ATOM" || lines[i].substr(0, 6) == "HETATM") {
	
	      x = parseFloat(lines[i].substr(30, 7));
	      y = parseFloat(lines[i].substr(38, 7));
	      z = parseFloat(lines[i].substr(46, 7));
	
	      e = trim(lines[i].substr(76, 2)).toLowerCase();
	
	      if (e == "") e = trim(lines[i].substr(12, 2)).toLowerCase();
	      atoms.push([x, y, z, CPK[e], capitalize(e)]);
	
	      if (histogram[e] == undefined) histogram[e] = 1;else histogram[e] += 1;
	    } else if (lines[i].substr(0, 6) == "CONECT") {
	
	      var satom = parseInt(lines[i].substr(6, 5));
	
	      parseBond(11, 5);
	      parseBond(16, 5);
	      parseBond(21, 5);
	      parseBond(26, 5);
	    }
	  }
	
	  return { "ok": true, "atoms": atoms, "bonds": bonds, "histogram": histogram };
	}
	
	function moleculeFactory(rawText, mass) {
	  var json = parsePDB(rawText);
	
	  var _createModel = createModel(json),
	      geometryAtoms = _createModel.geometryAtoms,
	      geometryBonds = _createModel.geometryBonds;
	
	  return function () {
	    return createMolecule(geometryAtoms, geometryBonds, json, mass);
	  };
	}

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createBoundary;
	
	var _three = __webpack_require__(1);
	
	var _physijs = __webpack_require__(3);
	
	var _physijs2 = _interopRequireDefault(_physijs);
	
	var _utils = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* 
	 * Creates a boundary object consisting of several thin (finite) planes.
	 *
	 * Can't just use a plain box mesh because then it isn't "hollow". This can
	 * contain other meshes because it is made of individual walls
	 */
	function createBoundary() {
	  var wallLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;
	  var wallMass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	  var wallMaterial = (0, _utils.createBouncyMaterial)(new _three.MeshBasicMaterial({
	    color: 0x4135FF,
	    transparent: true,
	    wireframe: true,
	    opacity: 0.10
	  }));
	  var wallGeometry = new _three.BoxGeometry(wallLength, wallLength, 2);
	
	  var wallBottom = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	  var wallTop = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	  var wallLeft = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	  var wallRight = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	  var wallFront = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	  var wallBack = new _physijs2.default.BoxMesh(wallGeometry, wallMaterial, wallMass);
	
	  // Half Length => hl
	  var hl = wallLength / 2;
	  var center = new _three.Vector3(0, 0, hl);
	
	  // set the positions of the walls
	  wallTop.position.z = wallLength;
	
	  wallLeft.position.z = hl;
	  wallLeft.position.x = -hl;
	  wallRight.position.z = hl;
	  wallRight.position.x = hl;
	
	  wallBack.position.z = hl;
	  wallBack.position.y = -hl;
	  wallFront.position.z = hl;
	  wallFront.position.y = hl;
	
	  // have everything look at the cube center
	  wallLeft.lookAt(center);
	  wallRight.lookAt(center);
	  wallBottom.lookAt(center);
	  wallTop.lookAt(center);
	  wallFront.lookAt(center);
	  wallBack.lookAt(center);
	
	  // add them to wallBottom
	  wallBottom.add(wallTop);
	  wallBottom.add(wallLeft);
	  wallBottom.add(wallRight);
	  wallBottom.add(wallFront);
	  wallBottom.add(wallBack);
	
	  // finally move wall bottom so that center is actually at the origin
	
	  wallBottom.position.z = -hl;
	  wallBottom.receiveShadow = true;
	  return wallBottom;
	}

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map